{"version":3,"file":"opensheetmusicdisplay.min.js","mappings":";CAAA,SAA2CA,EAAMC,GAC1B,iBAAZC,SAA0C,iBAAXC,OACxCA,OAAOD,QAAUD,IACQ,mBAAXG,QAAyBA,OAAOC,IAC9CD,OAAO,GAAIH,GACe,iBAAZC,QACdA,QAA+B,sBAAID,IAEnCD,EAA4B,sBAAIC,IARlC,CASGK,MAAM,WACT,kCCEqEH,EAAOD,QAAmN,SAASK,EAAEC,EAAEC,EAAEC,GAAG,SAASC,EAAEC,EAAEC,GAAG,IAAIJ,EAAEG,GAAG,CAAC,IAAIJ,EAAEI,GAAG,CAAmE,GAAGE,EAAE,OAAOA,EAAEF,GAAE,GAAI,IAAIG,EAAE,IAAIC,MAAM,uBAAuBJ,EAAE,KAAK,MAAMG,EAAEE,KAAK,mBAAmBF,EAAE,IAAIG,EAAET,EAAEG,GAAG,CAACV,QAAQ,IAAIM,EAAEI,GAAG,GAAGO,KAAKD,EAAEhB,SAAQ,SAASW,GAAoB,OAAOF,EAAlBH,EAAEI,GAAG,GAAGC,IAAeA,KAAIK,EAAEA,EAAEhB,QAAQK,EAAEC,EAAEC,EAAEC,GAAG,OAAOD,EAAEG,GAAGV,QAAQ,IAAI,IAAIY,OAAE,EAAoCD,EAAE,EAAEA,EAAEH,EAAEU,OAAOP,IAAIF,EAAED,EAAEG,IAAI,OAAOF,EAAjb,CAAob,CAAC,EAAE,CAAC,SAASE,EAAEQ,EAAET,GAAG,aAAa,IAAIU,EAAET,EAAE,WAAWU,EAAEV,EAAE,aAAaW,EAAE,oEAAoEZ,EAAEa,OAAO,SAASZ,GAAG,IAAI,IAAIQ,EAAET,EAAEG,EAAEG,EAAEX,EAAEC,EAAEC,EAAEC,EAAE,GAAGC,EAAE,EAAEG,EAAED,EAAEO,OAAOM,EAAEZ,EAAES,EAAE,WAAWD,EAAEK,UAAUd,GAAGF,EAAEE,EAAEO,QAAQM,EAAEZ,EAAEH,EAAEI,EAAEQ,GAAGF,EAAER,EAAEF,KAAKC,EAAED,EAAEG,EAAED,EAAEF,KAAK,EAAEA,EAAEG,EAAED,EAAEF,KAAK,IAAIU,EAAER,EAAEe,WAAWjB,KAAKC,EAAED,EAAEG,EAAED,EAAEe,WAAWjB,KAAK,EAAEA,EAAEG,EAAED,EAAEe,WAAWjB,KAAK,GAAGO,EAAEG,GAAG,EAAEd,GAAG,EAAEc,IAAI,EAAET,GAAG,EAAEJ,EAAE,EAAEkB,GAAG,GAAGd,IAAI,EAAEG,GAAG,EAAE,GAAGN,EAAE,EAAEiB,EAAE,GAAGX,EAAE,GAAGL,EAAEmB,KAAKL,EAAEM,OAAOZ,GAAGM,EAAEM,OAAOvB,GAAGiB,EAAEM,OAAOtB,GAAGgB,EAAEM,OAAOrB,IAAI,OAAOC,EAAEqB,KAAK,KAAKnB,EAAEoB,OAAO,SAASnB,GAAG,IAAIQ,EAAET,EAAEG,EAAEG,EAAEX,EAAEC,EAAEC,EAAE,EAAEC,EAAE,EAAEC,EAAE,QAAQ,GAAGE,EAAEoB,OAAO,EAAEtB,EAAES,UAAUT,EAAE,MAAM,IAAIK,MAAM,mDAAmD,IAAIF,EAAEY,EAAE,GAAGb,EAAEA,EAAEqB,QAAQ,sBAAsB,KAAKd,OAAO,EAAE,GAAGP,EAAEiB,OAAOjB,EAAEO,OAAO,KAAKI,EAAEM,OAAO,KAAKJ,IAAIb,EAAEiB,OAAOjB,EAAEO,OAAO,KAAKI,EAAEM,OAAO,KAAKJ,IAAIA,EAAE,GAAG,EAAE,MAAM,IAAIV,MAAM,6CAA6C,IAAIF,EAAES,EAAEY,WAAW,IAAIC,WAAW,EAAEV,GAAG,IAAIW,MAAM,EAAEX,GAAGjB,EAAEI,EAAEO,QAAQC,EAAEG,EAAEc,QAAQzB,EAAEiB,OAAOrB,OAAO,GAAGS,EAAEM,EAAEc,QAAQzB,EAAEiB,OAAOrB,QAAQ,EAAEG,GAAG,GAAGM,IAAI,GAAGX,EAAEiB,EAAEc,QAAQzB,EAAEiB,OAAOrB,QAAQ,EAAEM,GAAG,EAAER,IAAI,GAAGC,EAAEgB,EAAEc,QAAQzB,EAAEiB,OAAOrB,OAAOK,EAAEJ,KAAKW,EAAE,KAAKd,IAAIO,EAAEJ,KAAKE,GAAG,KAAKJ,IAAIM,EAAEJ,KAAKK,GAAG,OAAOD,IAAI,CAAC,YAAY,GAAG,UAAU,KAAK,EAAE,CAAC,SAASD,EAAEQ,EAAET,GAAG,aAAa,IAAIG,EAAEF,EAAE,cAAcK,EAAEL,EAAE,uBAAuBN,EAAEM,EAAE,uBAAuBL,EAAEK,EAAE,4BAA4B,SAASJ,EAAEI,EAAEQ,EAAET,EAAEG,EAAEG,GAAGZ,KAAKiC,eAAe1B,EAAEP,KAAKkC,iBAAiBnB,EAAEf,KAAKmC,MAAM7B,EAAEN,KAAKoC,YAAY3B,EAAET,KAAKqC,kBAAkBzB,EAAET,EAAEmC,UAAU,CAACC,iBAAiB,WAAW,IAAIhC,EAAE,IAAIK,EAAEH,EAAE+B,QAAQC,QAAQzC,KAAKqC,oBAAoBK,KAAK1C,KAAKoC,YAAYO,oBAAoBD,KAAK,IAAIxC,EAAE,gBAAgBa,EAAEf,KAAK,OAAOO,EAAEqC,GAAG,OAAM,WAAW,GAAG5C,KAAK6C,WAAWC,cAAc/B,EAAEmB,iBAAiB,MAAM,IAAIxB,MAAM,4CAA2CH,GAAGwC,oBAAoB,WAAW,OAAO,IAAInC,EAAEH,EAAE+B,QAAQC,QAAQzC,KAAKqC,oBAAoBW,eAAe,iBAAiBhD,KAAKiC,gBAAgBe,eAAe,mBAAmBhD,KAAKkC,kBAAkBc,eAAe,QAAQhD,KAAKmC,OAAOa,eAAe,cAAchD,KAAKoC,eAAejC,EAAE8C,iBAAiB,SAAS1C,EAAEQ,EAAET,GAAG,OAAOC,EAAEmC,KAAK,IAAIzC,GAAGyC,KAAK,IAAIxC,EAAE,qBAAqBwC,KAAK3B,EAAEmC,eAAe5C,IAAIoC,KAAK,IAAIxC,EAAE,mBAAmB8C,eAAe,cAAcjC,IAAIA,EAAEnB,QAAQO,GAAG,CAAC,aAAa,EAAE,sBAAsB,GAAG,2BAA2B,GAAG,sBAAsB,KAAK,EAAE,CAAC,SAASI,EAAEQ,EAAET,GAAG,aAAa,IAAIG,EAAEF,EAAE,0BAA0BD,EAAE6C,MAAM,CAACC,MAAM,OAAOF,eAAe,SAAS3C,GAAG,OAAO,IAAIE,EAAE,sBAAsBkC,iBAAiB,WAAW,OAAO,IAAIlC,EAAE,yBAAyBH,EAAE+C,QAAQ9C,EAAE,YAAY,CAAC,UAAU,EAAE,yBAAyB,KAAK,EAAE,CAAC,SAASA,EAAEQ,EAAET,GAAG,aAAa,IAAIG,EAAEF,EAAE,WAAeJ,EAAE,WAAW,IAAI,IAAII,EAAEQ,EAAE,GAAGT,EAAE,EAAEA,EAAE,IAAIA,IAAI,CAACC,EAAED,EAAE,IAAI,IAAIG,EAAE,EAAEA,EAAE,EAAEA,IAAIF,EAAE,EAAEA,EAAE,WAAWA,IAAI,EAAEA,IAAI,EAAEQ,EAAET,GAAGC,EAAE,OAAOQ,EAA5G,GAAiHA,EAAEnB,QAAQ,SAASW,EAAEQ,GAAG,YAAO,IAASR,GAAGA,EAAEO,OAAO,WAAWL,EAAEY,UAAUd,GAAG,SAASA,EAAEQ,EAAET,EAAEG,GAAG,IAAIG,EAAET,EAAEF,EAAmF,EAA/EK,EAAEC,IAAI,EAAE,IAAI,IAAIL,EAA+D,EAA3DA,EAAED,EAAEC,IAAIK,EAAEA,IAAI,EAAEK,EAAE,KAAKL,EAAEQ,EAAEb,KAAK,OAAO,EAAEK,EAA3F,CAA8F,EAAEQ,EAAER,EAAEA,EAAEO,QAAU,SAASP,EAAEQ,EAAET,EAAEG,GAAG,IAAIG,EAAET,EAAEF,EAA8F,EAA1FK,EAAEC,IAAI,EAAE,IAAI,IAAIL,EAA0E,EAAtEA,EAAED,EAAEC,IAAIK,EAAEA,IAAI,EAAEK,EAAE,KAAKL,EAAEQ,EAAEO,WAAWpB,KAAK,OAAO,EAAEK,EAAtG,CAAyG,EAAEQ,EAAER,EAAEA,EAAEO,QAAU,IAAI,CAAC,UAAU,KAAK,EAAE,CAAC,SAASP,EAAEQ,EAAET,GAAG,aAAaA,EAAEgD,QAAO,EAAGhD,EAAEiD,QAAO,EAAGjD,EAAEkD,KAAI,EAAGlD,EAAEmD,eAAc,EAAGnD,EAAEoD,KAAK,KAAKpD,EAAE8B,YAAY,KAAK9B,EAAEqD,mBAAmB,KAAKrD,EAAEsD,QAAQ,KAAKtD,EAAEuD,gBAAgB,KAAKvD,EAAEwD,eAAe,MAAM,IAAI,EAAE,CAAC,SAASvD,EAAEQ,EAAET,GAAG,aAAa,IAAIG,EAAOA,EAAE,oBAAoB+B,QAAQA,QAAQjC,EAAE,OAAOQ,EAAEnB,QAAQ,CAAC4C,QAAQ/B,IAAI,CAACsD,IAAI,KAAK,EAAE,CAAC,SAASxD,EAAEQ,EAAET,GAAG,aAAa,IAAIG,EAAE,oBAAoBqB,YAAY,oBAAoBkC,aAAa,oBAAoBC,YAAYrD,EAAEL,EAAE,QAAQN,EAAEM,EAAE,WAAWL,EAAEK,EAAE,0BAA0BJ,EAAEM,EAAE,aAAa,QAAQ,SAASL,EAAEG,EAAEQ,GAAGb,EAAEW,KAAKb,KAAK,eAAeO,GAAGP,KAAKkE,MAAM,KAAKlE,KAAKmE,YAAY5D,EAAEP,KAAKoE,aAAarD,EAAEf,KAAKqE,KAAK,GAAG/D,EAAE8C,MAAM,OAAOnD,EAAEqE,SAASlE,EAAEF,GAAGE,EAAEkC,UAAUiC,aAAa,SAAShE,GAAGP,KAAKqE,KAAK9D,EAAE8D,KAAK,OAAOrE,KAAKkE,OAAOlE,KAAKwE,cAAcxE,KAAKkE,MAAM3C,KAAKtB,EAAEwE,YAAYtE,EAAEI,EAAEmE,OAAM,IAAKtE,EAAEkC,UAAUqC,MAAM,WAAWzE,EAAEoC,UAAUqC,MAAM9D,KAAKb,MAAM,OAAOA,KAAKkE,OAAOlE,KAAKwE,cAAcxE,KAAKkE,MAAM3C,KAAK,IAAG,IAAKnB,EAAEkC,UAAUsC,QAAQ,WAAW1E,EAAEoC,UAAUsC,QAAQ/D,KAAKb,MAAMA,KAAKkE,MAAM,MAAM9D,EAAEkC,UAAUkC,YAAY,WAAWxE,KAAKkE,MAAM,IAAItD,EAAEZ,KAAKmE,aAAa,CAACU,KAAI,EAAGC,MAAM9E,KAAKoE,aAAaU,QAAQ,IAAI,IAAI/D,EAAEf,KAAKA,KAAKkE,MAAMa,OAAO,SAASxE,GAAGQ,EAAEQ,KAAK,CAACmD,KAAKnE,EAAE8D,KAAKtD,EAAEsD,SAAS/D,EAAE4C,eAAe,SAAS3C,GAAG,OAAO,IAAIH,EAAE,UAAUG,IAAID,EAAEqC,iBAAiB,WAAW,OAAO,IAAIvC,EAAE,UAAU,MAAM,CAAC,yBAAyB,GAAG,UAAU,GAAG4E,KAAK,KAAK,EAAE,CAAC,SAASzE,EAAEQ,EAAET,GAAG,aAAa,SAAS2E,EAAE1E,EAAEQ,GAAG,IAAIT,EAAEG,EAAE,GAAG,IAAIH,EAAE,EAAEA,EAAES,EAAET,IAAIG,GAAGyE,OAAOC,aAAa,IAAI5E,GAAGA,KAAK,EAAE,OAAOE,EAAE,SAASA,EAAEF,EAAEQ,EAAET,EAAEG,EAAEG,EAAEX,GAAG,IAAIC,EAAEC,EAAEC,EAAEG,EAAE6E,KAAK/E,EAAEE,EAAE6B,YAAY5B,EAAEP,IAAIoF,EAAEC,WAAWlE,EAAEmE,EAAEd,YAAY,SAASxE,EAAEG,EAAEoF,OAAOvE,EAAEsE,EAAEd,YAAY,SAASY,EAAEC,WAAWlF,EAAEoF,OAAOxE,EAAEZ,EAAEwD,QAAQ1C,EAAEqE,EAAEd,YAAY,SAASxE,EAAEe,IAAIyE,EAAEF,EAAEd,YAAY,SAASY,EAAEC,WAAWtE,IAAI0E,EAAEzE,EAAEH,SAASV,EAAEoF,KAAK1E,OAAO6E,EAAEF,EAAE3E,SAASE,EAAEF,OAAO8E,EAAE,GAAGC,EAAE,GAAGC,EAAE,GAAGC,EAAE3F,EAAEoD,IAAIwC,EAAE5F,EAAEsD,KAAKuC,EAAE,CAAC9D,MAAM,EAAEF,eAAe,EAAEC,iBAAiB,GAAGnB,IAAIT,IAAI2F,EAAE9D,MAAM5B,EAAE4B,MAAM8D,EAAEhE,eAAe1B,EAAE0B,eAAegE,EAAE/D,iBAAiB3B,EAAE2B,kBAAkB,IAAIgE,EAAE,EAAEnF,IAAImF,GAAG,GAAG1F,IAAIkF,IAAIC,IAAIO,GAAG,MAAM,IAAIC,EAAE,EAAEC,EAAE,EAAEL,IAAII,GAAG,IAAI,SAASvF,GAAGwF,EAAE,IAAID,GAAG,SAAS5F,EAAEQ,GAAG,IAAIT,EAAEC,EAAE,OAAOA,IAAID,EAAES,EAAE,MAAM,QAAQ,MAAMT,IAAI,GAA7D,CAAiEF,EAAEyD,gBAAgBkC,KAAKK,EAAE,GAAGD,GAAG,SAAS5F,GAAG,OAAO,IAAIA,GAAG,GAA1B,CAA8BH,EAAE0D,iBAAiB5D,EAAE8F,EAAEK,cAAcnG,IAAI,EAAEA,GAAG8F,EAAEM,gBAAgBpG,IAAI,EAAEA,GAAG8F,EAAEO,gBAAgB,EAAEpG,EAAE6F,EAAEQ,iBAAiB,KAAKrG,IAAI,EAAEA,GAAG6F,EAAES,cAAc,EAAEtG,IAAI,EAAEA,GAAG6F,EAAEU,aAAahB,IAAIG,EAAEZ,EAAE,EAAE,GAAGA,EAAE0B,EAAEvF,GAAG,GAAGH,EAAE2E,GAAG,KAAKX,EAAEY,EAAE/E,OAAO,GAAG+E,GAAGF,IAAIG,EAAEb,EAAE,EAAE,GAAGA,EAAE0B,EAAEzF,GAAG,GAAGuE,EAAEG,GAAG,KAAKX,EAAEa,EAAEhF,OAAO,GAAGgF,GAAG,IAAIc,EAAE,GAAG,OAAOA,GAAG,OAAOA,GAAG3B,EAAEiB,EAAE,GAAGU,GAAGvG,EAAE+C,MAAMwD,GAAG3B,EAAE/E,EAAE,GAAG0G,GAAG3B,EAAE9E,EAAE,GAAGyG,GAAG3B,EAAEgB,EAAE9D,MAAM,GAAGyE,GAAG3B,EAAEgB,EAAEhE,eAAe,GAAG2E,GAAG3B,EAAEgB,EAAE/D,iBAAiB,GAAG0E,GAAG3B,EAAE7D,EAAEN,OAAO,GAAG8F,GAAG3B,EAAEW,EAAE9E,OAAO,GAAG,CAAC+F,WAAWC,EAAEC,kBAAkBH,EAAExF,EAAEwE,EAAEoB,UAAUF,EAAEG,oBAAoBhC,EAAEmB,EAAE,GAAGQ,EAAE3B,EAAE/D,EAAEJ,OAAO,GAAG,WAAWmE,EAAEkB,EAAE,GAAGlB,EAAExE,EAAE,GAAGW,EAAEwE,EAAE1E,GAAG,IAAIqE,EAAEhF,EAAE,YAAYK,EAAEL,EAAE,2BAA2B8E,EAAE9E,EAAE,WAAWoG,EAAEpG,EAAE,YAAYuG,EAAEvG,EAAE,gBAAgB,SAASN,EAAEM,EAAEQ,EAAET,EAAEG,GAAGG,EAAEC,KAAKb,KAAK,iBAAiBA,KAAKkH,aAAa,EAAElH,KAAKmH,WAAWpG,EAAEf,KAAKoH,YAAY9G,EAAEN,KAAKqH,eAAe5G,EAAET,KAAKsH,YAAY/G,EAAEP,KAAKuH,YAAW,EAAGvH,KAAKwH,cAAc,GAAGxH,KAAKyH,WAAW,GAAGzH,KAAK0H,oBAAoB,EAAE1H,KAAK2H,aAAa,EAAE3H,KAAK4H,YAAY,KAAK5H,KAAK6H,SAAS,GAAGtC,EAAEjB,SAASrE,EAAEW,GAAGX,EAAEqC,UAAUf,KAAK,SAAShB,GAAG,IAAIQ,EAAER,EAAE8D,KAAKyD,SAAS,EAAExH,EAAEN,KAAK2H,aAAalH,EAAET,KAAK6H,SAAS/G,OAAOd,KAAKuH,WAAWvH,KAAKwH,cAAcjG,KAAKhB,IAAIP,KAAKkH,cAAc3G,EAAEmE,KAAK5D,OAAOF,EAAE0B,UAAUf,KAAKV,KAAKb,KAAK,CAAC0E,KAAKnE,EAAEmE,KAAKL,KAAK,CAACuD,YAAY5H,KAAK4H,YAAYE,QAAQxH,GAAGS,EAAE,KAAKT,EAAEG,EAAE,IAAIH,EAAE,SAASL,EAAEqC,UAAUyF,aAAa,SAASxH,GAAGP,KAAK0H,oBAAoB1H,KAAKkH,aAAalH,KAAK4H,YAAYrH,EAAE6E,KAAKI,KAAK,IAAIzE,EAAEf,KAAKsH,cAAc/G,EAAE6E,KAAK5B,IAAI,GAAGzC,EAAE,CAAC,IAAIT,EAAEG,EAAEF,EAAEQ,GAAE,EAAGf,KAAK0H,oBAAoB1H,KAAKoH,YAAYpH,KAAKqH,gBAAgBrH,KAAKuB,KAAK,CAACmD,KAAKpE,EAAEuG,WAAWxC,KAAK,CAACyD,QAAQ,UAAU9H,KAAKuH,YAAW,GAAItH,EAAEqC,UAAU0F,aAAa,SAASzH,GAAGP,KAAKuH,YAAW,EAAG,IAAIxG,EAAEf,KAAKsH,cAAc/G,EAAE6E,KAAK5B,IAAIlD,EAAEG,EAAEF,EAAEQ,GAAE,EAAGf,KAAK0H,oBAAoB1H,KAAKoH,YAAYpH,KAAKqH,gBAAgB,GAAGrH,KAAKyH,WAAWlG,KAAKjB,EAAE0G,WAAWjG,EAAEf,KAAKuB,KAAK,CAACmD,KAAK,SAASnE,GAAG,OAAOuG,EAAEmB,gBAAgBhD,EAAE1E,EAAE4B,MAAM,GAAG8C,EAAE1E,EAAE0B,eAAe,GAAGgD,EAAE1E,EAAE2B,iBAAiB,GAA7F,CAAiG3B,GAAG8D,KAAK,CAACyD,QAAQ,YAAY,IAAI9H,KAAKuB,KAAK,CAACmD,KAAKpE,EAAEuG,WAAWxC,KAAK,CAACyD,QAAQ,KAAK9H,KAAKwH,cAAc1G,QAAQd,KAAKuB,KAAKvB,KAAKwH,cAAcU,SAASlI,KAAK4H,YAAY,MAAM3H,EAAEqC,UAAUqC,MAAM,WAAW,IAAI,IAAIpE,EAAEP,KAAKkH,aAAanG,EAAE,EAAEA,EAAEf,KAAKyH,WAAW3G,OAAOC,IAAIf,KAAKuB,KAAK,CAACmD,KAAK1E,KAAKyH,WAAW1G,GAAGsD,KAAK,CAACyD,QAAQ,OAAO,IAAIxH,EAAEN,KAAKkH,aAAa3G,EAAEE,EAAE,SAASF,EAAEQ,EAAET,EAAEG,EAAEG,GAAG,IAAIX,EAAEsF,EAAEd,YAAY,SAAS7D,EAAEH,IAAI,OAAOqG,EAAEqB,sBAAsB,WAAWlD,EAAE1E,EAAE,GAAG0E,EAAE1E,EAAE,GAAG0E,EAAElE,EAAE,GAAGkE,EAAE3E,EAAE,GAAG2E,EAAEhF,EAAEa,OAAO,GAAGb,EAA3I,CAA8ID,KAAKyH,WAAW3G,OAAOR,EAAEC,EAAEP,KAAKmH,WAAWnH,KAAKqH,gBAAgBrH,KAAKuB,KAAK,CAACmD,KAAKjE,EAAE4D,KAAK,CAACyD,QAAQ,QAAQ7H,EAAEqC,UAAU8F,kBAAkB,WAAWpI,KAAKqI,SAASrI,KAAK6H,SAASK,QAAQlI,KAAK+H,aAAa/H,KAAKqI,SAASxF,YAAY7C,KAAKsI,SAAStI,KAAKqI,SAASE,QAAQvI,KAAKqI,SAASG,UAAUvI,EAAEqC,UAAUmG,iBAAiB,SAASlI,GAAGP,KAAK6H,SAAStG,KAAKhB,GAAG,IAAIQ,EAAEf,KAAK,OAAOO,EAAEqC,GAAG,QAAO,SAASrC,GAAGQ,EAAEwD,aAAahE,MAAKA,EAAEqC,GAAG,OAAM,WAAW7B,EAAEiH,aAAajH,EAAEsH,SAASxF,YAAY9B,EAAE8G,SAAS/G,OAAOC,EAAEqH,oBAAoBrH,EAAE2H,SAAQnI,EAAEqC,GAAG,SAAQ,SAASrC,GAAGQ,EAAE4H,MAAMpI,MAAKP,MAAMC,EAAEqC,UAAUkG,OAAO,WAAW,QAAQ5H,EAAE0B,UAAUkG,OAAO3H,KAAKb,SAASA,KAAKqI,UAAUrI,KAAK6H,SAAS/G,QAAQd,KAAKoI,qBAAoB,GAAIpI,KAAKqI,UAAUrI,KAAK6H,SAAS/G,QAAQd,KAAK4I,oBAAe,GAAQ5I,KAAK0I,OAAM,KAAMzI,EAAEqC,UAAUqG,MAAM,SAASpI,GAAG,IAAIQ,EAAEf,KAAK6H,SAAS,IAAIjH,EAAE0B,UAAUqG,MAAM9H,KAAKb,KAAKO,GAAG,OAAM,EAAG,IAAI,IAAID,EAAE,EAAEA,EAAES,EAAED,OAAOR,IAAI,IAAIS,EAAET,GAAGqI,MAAMpI,GAAG,MAAMA,IAAI,OAAM,GAAIN,EAAEqC,UAAUuG,KAAK,WAAWjI,EAAE0B,UAAUuG,KAAKhI,KAAKb,MAAM,IAAI,IAAIO,EAAEP,KAAK6H,SAAS9G,EAAE,EAAEA,EAAER,EAAEO,OAAOC,IAAIR,EAAEQ,GAAG8H,QAAQ9H,EAAEnB,QAAQK,GAAG,CAAC,WAAW,EAAE,eAAe,GAAG,0BAA0B,GAAG,UAAU,GAAG,WAAW,KAAK,EAAE,CAAC,SAASM,EAAEQ,EAAET,GAAG,aAAa,IAAID,EAAEE,EAAE,mBAAmBE,EAAEF,EAAE,mBAAmBD,EAAEwI,eAAe,SAASvI,EAAEL,EAAEa,GAAG,IAAIZ,EAAE,IAAIM,EAAEP,EAAEoH,YAAYvG,EAAEb,EAAE6I,SAAS7I,EAAEmH,gBAAgBjH,EAAE,EAAE,IAAIG,EAAEyI,SAAQ,SAASzI,EAAEQ,GAAGX,IAAI,IAAIE,EAAE,SAASC,EAAEQ,GAAG,IAAIT,EAAEC,GAAGQ,EAAEN,EAAEJ,EAAEC,GAAG,IAAIG,EAAE,MAAM,IAAIC,MAAMJ,EAAE,wCAAwC,OAAOG,EAAvG,CAA0GM,EAAEkI,QAAQ7G,YAAYlC,EAAEkC,aAAa3B,EAAEM,EAAEkI,QAAQtF,oBAAoBzD,EAAEyD,oBAAoB,GAAG/C,EAAEG,EAAEyC,IAAIvD,EAAEc,EAAE2C,KAAK3C,EAAEmI,gBAAgB5I,EAAEG,GAAGuC,eAAe,OAAO,CAACwC,KAAKjF,EAAEiD,IAAI5C,EAAE8C,KAAKzD,EAAE2D,QAAQ7C,EAAE6C,SAAS,GAAGC,gBAAgB9C,EAAE8C,gBAAgBC,eAAe/C,EAAE+C,iBAAiBpB,KAAKvC,MAAKA,EAAEwH,aAAavH,EAAE,MAAMG,GAAGJ,EAAEwI,MAAMpI,GAAG,OAAOJ,IAAI,CAAC,kBAAkB,EAAE,kBAAkB,IAAI,GAAG,CAAC,SAASI,EAAEQ,EAAET,GAAG,aAAa,SAASG,IAAI,KAAKT,gBAAgBS,GAAG,OAAO,IAAIA,EAAE,GAAG0I,UAAUrI,OAAO,MAAM,IAAIJ,MAAM,kGAAkGV,KAAKoJ,MAAMC,OAAOC,OAAO,MAAMtJ,KAAK4D,QAAQ,KAAK5D,KAAKN,KAAK,GAAGM,KAAKuJ,MAAM,WAAW,IAAIhJ,EAAE,IAAIE,EAAE,IAAI,IAAIM,KAAKf,KAAK,mBAAmBA,KAAKe,KAAKR,EAAEQ,GAAGf,KAAKe,IAAI,OAAOR,IAAIE,EAAE6B,UAAU/B,EAAE,aAAaiJ,UAAUjJ,EAAE,UAAUE,EAAEgJ,QAAQlJ,EAAE,aAAaE,EAAEiJ,SAASnJ,EAAE,cAAcE,EAAEkJ,QAAQ,QAAQlJ,EAAE+I,UAAU,SAASjJ,EAAEQ,GAAG,OAAM,IAAKN,GAAG+I,UAAUjJ,EAAEQ,IAAIN,EAAEmJ,SAASrJ,EAAE,cAAcQ,EAAEnB,QAAQa,GAAG,CAAC,aAAa,EAAE,aAAa,EAAE,SAAS,GAAG,WAAW,GAAG,YAAY,KAAK,GAAG,CAAC,SAASF,EAAEQ,EAAET,GAAG,aAAa,IAAIG,EAAEF,EAAE,WAAWK,EAAEL,EAAE,cAAcJ,EAAEI,EAAE,UAAUH,EAAEG,EAAE,gBAAgBN,EAAEM,EAAE,uBAAuBF,EAAEE,EAAE,iBAAiB,SAASC,EAAEC,GAAG,OAAO,IAAIG,EAAE4B,SAAQ,SAASjC,EAAEQ,GAAG,IAAIT,EAAEG,EAAEoJ,aAAatH,mBAAmBG,KAAK,IAAIzC,GAAGK,EAAEsC,GAAG,SAAQ,SAASrC,GAAGQ,EAAER,MAAKqC,GAAG,OAAM,WAAWtC,EAAEuC,WAAWV,QAAQ1B,EAAEoJ,aAAa1H,MAAMpB,EAAE,IAAIL,MAAM,mCAAmCH,OAAMiI,YAAWzH,EAAEnB,QAAQ,SAASW,EAAEN,GAAG,IAAIC,EAAEF,KAAK,OAAOC,EAAEQ,EAAEqJ,OAAO7J,GAAG,GAAG,CAACqD,QAAO,EAAGyG,YAAW,EAAGC,uBAAsB,EAAGvG,eAAc,EAAGwG,eAAe9J,EAAE+J,aAAa7J,EAAE8J,QAAQ9J,EAAE+J,SAAS7J,GAAGK,EAAE4B,QAAQ6H,OAAO,IAAI3J,MAAM,yDAAyDD,EAAE6J,eAAe,sBAAsB/J,GAAE,EAAGN,EAAE+J,sBAAsB/J,EAAEqD,QAAQiH,MAAK,SAAShK,GAAG,IAAIQ,EAAE,IAAIX,EAAEH,GAAG,OAAOc,EAAEyJ,KAAKjK,GAAGQ,KAAIwJ,MAAK,SAAShK,GAAG,IAAIQ,EAAE,CAACH,EAAE4B,QAAQC,QAAQlC,IAAID,EAAEC,EAAE6I,MAAM,GAAGnJ,EAAE8J,WAAW,IAAI,IAAItJ,EAAE,EAAEA,EAAEH,EAAEQ,OAAOL,IAAIM,EAAEQ,KAAKf,EAAEF,EAAEG,KAAK,OAAOG,EAAE4B,QAAQiI,IAAI1J,MAAKwJ,MAAK,SAAShK,GAAG,IAAI,IAAIQ,EAAER,EAAE2H,QAAQ5H,EAAES,EAAEqI,MAAM3I,EAAE,EAAEA,EAAEH,EAAEQ,OAAOL,IAAI,CAAC,IAAIG,EAAEN,EAAEG,GAAGP,EAAEkF,KAAKxE,EAAE8J,YAAY9J,EAAEiJ,aAAa,CAACtG,QAAO,EAAGyG,uBAAsB,EAAGtG,KAAK9C,EAAE8C,KAAKF,IAAI5C,EAAE4C,IAAII,QAAQhD,EAAE+J,eAAe7J,OAAOF,EAAE+J,eAAe,KAAK9G,gBAAgBjD,EAAEiD,gBAAgBC,eAAelD,EAAEkD,eAAeL,cAAcxD,EAAEwD,gBAAgB,OAAO1C,EAAEoG,WAAWrG,SAASZ,EAAE0D,QAAQ7C,EAAEoG,YAAYjH,OAAM,CAAC,aAAa,EAAE,gBAAgB,GAAG,sBAAsB,GAAG,SAAS,GAAG,UAAU,GAAG,eAAe,KAAK,GAAG,CAAC,SAASK,EAAEQ,EAAET,GAAG,aAAa,IAAIG,EAAEF,EAAE,YAAYK,EAAEL,EAAE,2BAA2B,SAASN,EAAEM,EAAEQ,GAAGH,EAAEC,KAAKb,KAAK,mCAAmCO,GAAGP,KAAK4K,gBAAe,EAAG5K,KAAK6K,YAAY9J,GAAGN,EAAE6D,SAASrE,EAAEW,GAAGX,EAAEqC,UAAUuI,YAAY,SAAStK,GAAG,IAAIQ,EAAEf,MAAMA,KAAK8K,QAAQvK,GAAGgI,QAAQhI,EAAEqC,GAAG,QAAO,SAASrC,GAAGQ,EAAEQ,KAAK,CAACmD,KAAKnE,EAAE8D,KAAK,CAACyD,QAAQ,QAAOlF,GAAG,SAAQ,SAASrC,GAAGQ,EAAEuH,SAAStI,KAAK4I,eAAerI,EAAEQ,EAAE4H,MAAMpI,MAAKqC,GAAG,OAAM,WAAW7B,EAAEuH,SAASvH,EAAE6J,gBAAe,EAAG7J,EAAE2H,UAASzI,EAAEqC,UAAUiG,MAAM,WAAW,QAAQ3H,EAAE0B,UAAUiG,MAAM1H,KAAKb,QAAQA,KAAK8K,QAAQvC,SAAQ,IAAKtI,EAAEqC,UAAUkG,OAAO,WAAW,QAAQ5H,EAAE0B,UAAUkG,OAAO3H,KAAKb,QAAQA,KAAK4K,eAAe5K,KAAK0I,MAAM1I,KAAK8K,QAAQtC,UAAS,IAAKzH,EAAEnB,QAAQK,GAAG,CAAC,0BAA0B,GAAG,WAAW,KAAK,GAAG,CAAC,SAASM,EAAEQ,EAAET,GAAG,aAAa,IAAIM,EAAEL,EAAE,mBAAmBwK,SAAS,SAAStK,EAAEF,EAAEQ,EAAET,GAAGM,EAAEC,KAAKb,KAAKe,GAAGf,KAAKgL,QAAQzK,EAAE,IAAIE,EAAET,KAAKO,EAAEqC,GAAG,QAAO,SAASrC,EAAEQ,GAAGN,EAAEc,KAAKhB,IAAIE,EAAEuK,QAAQzC,QAAQjI,GAAGA,EAAES,MAAK6B,GAAG,SAAQ,SAASrC,GAAGE,EAAEwK,KAAK,QAAQ1K,MAAKqC,GAAG,OAAM,WAAWnC,EAAEc,KAAK,SAAQhB,EAAE,YAAY+D,SAAS7D,EAAEG,GAAGH,EAAE6B,UAAU4I,MAAM,WAAWlL,KAAKgL,QAAQxC,UAAUzH,EAAEnB,QAAQa,GAAG,CAAC,WAAW,GAAG,kBAAkB,KAAK,GAAG,CAAC,SAASF,EAAEQ,EAAET,GAAG,aAAaS,EAAEnB,QAAQ,CAACuK,OAAO,oBAAoBgB,OAAOC,cAAc,SAAS7K,EAAEQ,GAAG,GAAGoK,OAAOE,MAAMF,OAAOE,OAAOvJ,WAAWuJ,KAAK,OAAOF,OAAOE,KAAK9K,EAAEQ,GAAG,GAAG,iBAAiBR,EAAE,MAAM,IAAIG,MAAM,4CAA4C,OAAO,IAAIyK,OAAO5K,EAAEQ,IAAIuK,YAAY,SAAS/K,GAAG,GAAG4K,OAAOI,MAAM,OAAOJ,OAAOI,MAAMhL,GAAG,IAAIQ,EAAE,IAAIoK,OAAO5K,GAAG,OAAOQ,EAAEyK,KAAK,GAAGzK,GAAG0K,SAAS,SAASlL,GAAG,OAAO4K,OAAOM,SAASlL,IAAI6J,SAAS,SAAS7J,GAAG,OAAOA,GAAG,mBAAmBA,EAAEqC,IAAI,mBAAmBrC,EAAEgI,OAAO,mBAAmBhI,EAAEiI,UAAU,IAAI,GAAG,CAAC,SAASjI,EAAEQ,EAAET,GAAG,aAAa,SAASL,EAAEM,EAAEQ,EAAET,GAAG,IAAIG,EAAEG,EAAEP,EAAEgB,UAAUN,GAAGd,EAAEI,EAAEyJ,OAAOxJ,GAAG,GAAGc,GAAGnB,EAAEyD,KAAKzD,EAAEyD,MAAM,IAAIgI,KAAK,OAAOzL,EAAEmC,cAAcnC,EAAEmC,YAAYnC,EAAEmC,YAAYuJ,eAAe,iBAAiB1L,EAAE4D,kBAAkB5D,EAAE4D,gBAAgB+H,SAAS3L,EAAE4D,gBAAgB,IAAI5D,EAAE4D,iBAAiB,MAAM5D,EAAE4D,kBAAkB5D,EAAEuD,KAAI,GAAIvD,EAAE6D,gBAAgB,GAAG7D,EAAE6D,iBAAiB7D,EAAEuD,KAAI,GAAIvD,EAAEuD,MAAMjD,EAAEoF,EAAEpF,IAAIN,EAAEwD,gBAAgBhD,EAAEiF,EAAEnF,KAAKqF,EAAE/E,KAAKb,KAAKS,GAAE,GAAI,IAAIP,EAAE,WAAWU,IAAG,IAAKX,EAAEsD,SAAQ,IAAKtD,EAAEqD,OAAOhD,QAAG,IAASA,EAAEiD,SAAStD,EAAEsD,QAAQrD,IAAIa,aAAaE,GAAG,IAAIF,EAAEmB,kBAAkBjC,EAAEuD,MAAMzC,GAAG,IAAIA,EAAED,UAAUb,EAAEqD,QAAO,EAAGrD,EAAEsD,QAAO,EAAGxC,EAAE,GAAGd,EAAEmC,YAAY,QAAQxB,EAAE,UAAU,IAAIT,EAAOA,EAAEY,aAAaE,GAAGF,aAAaP,EAAEO,EAAEG,EAAEiJ,QAAQjJ,EAAEkJ,SAASrJ,GAAG,IAAI0E,EAAElF,EAAEQ,GAAGV,EAAEiK,eAAe/J,EAAEQ,EAAEd,EAAEsD,OAAOtD,EAAE+J,sBAAsB/J,EAAEqD,QAAQ,IAAIlD,EAAE,IAAIY,EAAET,EAAEJ,EAAEF,GAAGD,KAAKoJ,MAAM7I,GAAGH,EAAE,IAAIQ,EAAEL,EAAE,UAAUF,EAAEE,EAAE,WAAWC,EAAED,EAAE,0BAA0BL,EAAEK,EAAE,yBAAyBa,EAAEb,EAAE,cAAcU,EAAEV,EAAE,sBAAsBS,EAAET,EAAE,eAAeJ,EAAEI,EAAE,cAAcW,EAAEX,EAAE,iBAAiBkF,EAAElF,EAAE,qCAAqCmF,EAAE,SAASnF,GAAG,MAAMA,EAAEsL,OAAO,KAAKtL,EAAEA,EAAEuL,UAAU,EAAEvL,EAAEO,OAAO,IAAI,IAAIC,EAAER,EAAEwL,YAAY,KAAK,OAAO,EAAEhL,EAAER,EAAEuL,UAAU,EAAE/K,GAAG,IAAI4E,EAAE,SAASpF,GAAG,MAAM,MAAMA,EAAEsL,OAAO,KAAKtL,GAAG,KAAKA,GAAGqF,EAAE,SAASrF,EAAEQ,GAAG,OAAOA,OAAE,IAASA,EAAEA,EAAEK,EAAEqC,cAAclD,EAAEoF,EAAEpF,GAAGP,KAAKoJ,MAAM7I,IAAIN,EAAEY,KAAKb,KAAKO,EAAE,KAAK,CAACiD,KAAI,EAAGC,cAAc1C,IAAIf,KAAKoJ,MAAM7I,IAAI,SAASH,EAAEG,GAAG,MAAM,oBAAoB8I,OAAO/G,UAAU0J,SAASnL,KAAKN,GAAG,IAAIE,EAAE,CAAC+J,KAAK,WAAW,MAAM,IAAI9J,MAAM,+EAA+EsI,QAAQ,SAASzI,GAAG,IAAIQ,EAAET,EAAEG,EAAE,IAAIM,KAAKf,KAAKoJ,MAAM3I,EAAET,KAAKoJ,MAAMrI,IAAIT,EAAES,EAAE8K,MAAM7L,KAAKN,KAAKoB,OAAOC,EAAED,UAAUC,EAAE8K,MAAM,EAAE7L,KAAKN,KAAKoB,UAAUd,KAAKN,MAAMa,EAAED,EAAEG,IAAIwL,OAAO,SAAS3L,GAAG,IAAIG,EAAE,GAAG,OAAOT,KAAKgJ,SAAQ,SAASzI,EAAEQ,GAAGT,EAAEC,EAAEQ,IAAIN,EAAEc,KAAKR,MAAKN,GAAG2E,KAAK,SAAS7E,EAAEQ,EAAET,GAAG,GAAG,IAAI6I,UAAUrI,OAAO,OAAOP,EAAEP,KAAKN,KAAKa,EAAEN,EAAEY,KAAKb,KAAKO,EAAEQ,EAAET,GAAGN,KAAK,GAAGI,EAAEG,GAAG,CAAC,IAAIE,EAAEF,EAAE,OAAOP,KAAKiM,QAAO,SAAS1L,EAAEQ,GAAG,OAAOA,EAAEyC,KAAK/C,EAAEyL,KAAK3L,MAAK,IAAIK,EAAEZ,KAAKoJ,MAAMpJ,KAAKN,KAAKa,GAAG,OAAOK,IAAIA,EAAE4C,IAAI5C,EAAE,MAAMuL,OAAO,SAAS7L,GAAG,IAAIA,EAAE,OAAON,KAAK,GAAGI,EAAEE,GAAG,OAAON,KAAKiM,QAAO,SAAS1L,EAAEQ,GAAG,OAAOA,EAAEyC,KAAKlD,EAAE4L,KAAK3L,MAAK,IAAIA,EAAEP,KAAKN,KAAKY,EAAES,EAAE6E,EAAE/E,KAAKb,KAAKO,GAAGE,EAAET,KAAKuJ,QAAQ,OAAO9I,EAAEf,KAAKqB,EAAEyE,KAAK/E,GAAG2L,OAAO,SAAS9L,GAAGA,EAAEN,KAAKN,KAAKY,EAAE,IAAIC,EAAEP,KAAKoJ,MAAM9I,GAAG,GAAGC,IAAI,MAAMD,EAAEuL,OAAO,KAAKvL,GAAG,KAAKC,EAAEP,KAAKoJ,MAAM9I,IAAIC,IAAIA,EAAEiD,WAAWxD,KAAKoJ,MAAM9I,QAAQ,IAAI,IAAIS,EAAEf,KAAKiM,QAAO,SAAS1L,EAAEQ,GAAG,OAAOA,EAAEyE,KAAKqG,MAAM,EAAEvL,EAAEQ,UAAUR,KAAIG,EAAE,EAAEA,EAAEM,EAAED,OAAOL,WAAWT,KAAKoJ,MAAMrI,EAAEN,GAAG+E,MAAM,OAAOxF,MAAMqM,SAAS,SAAS9L,GAAG,MAAM,IAAIG,MAAM,+EAA+E4L,uBAAuB,SAAS/L,GAAG,IAAIQ,EAAET,EAAE,GAAG,IAAI,IAAIA,EAAED,EAAEyJ,OAAOvJ,GAAG,GAAG,CAAC+G,aAAY,EAAGlF,YAAY,QAAQuB,mBAAmB,KAAK4I,KAAK,GAAGxD,SAAS,MAAMnF,QAAQ,KAAK4I,SAAS,kBAAkBnF,eAAezG,EAAE0E,cAAciH,KAAKjM,EAAEiM,KAAKE,cAAcnM,EAAE8B,YAAY9B,EAAE8B,YAAYuJ,cAAc,iBAAiBrL,EAAEiM,OAAOjM,EAAEiM,KAAK,WAAWjM,EAAEiM,KAAK,MAAM,IAAI7L,MAAM,6BAA6BL,EAAEqM,aAAapM,EAAEiM,MAAM,WAAWjM,EAAEyI,UAAU,YAAYzI,EAAEyI,UAAU,UAAUzI,EAAEyI,UAAU,UAAUzI,EAAEyI,WAAWzI,EAAEyI,SAAS,QAAQ,UAAUzI,EAAEyI,WAAWzI,EAAEyI,SAAS,OAAO,IAAItI,EAAEH,EAAEsD,SAAS5D,KAAK4D,SAAS,GAAG7C,EAAEZ,EAAE2I,eAAe9I,KAAKM,EAAEG,GAAG,MAAMF,IAAIQ,EAAE,IAAIP,EAAE,UAAUmI,MAAMpI,GAAG,OAAO,IAAIL,EAAEa,EAAET,EAAEiM,MAAM,SAASjM,EAAEkM,WAAWG,cAAc,SAASpM,EAAEQ,GAAG,OAAOf,KAAKsM,uBAAuB/L,GAAGgH,WAAWxG,IAAI6L,mBAAmB,SAASrM,EAAEQ,GAAG,OAAOR,EAAEA,GAAG,IAAIgM,OAAOhM,EAAEgM,KAAK,cAAcvM,KAAKsM,uBAAuB/L,GAAGsM,eAAe9L,KAAKA,EAAEnB,QAAQa,GAAG,CAAC,qBAAqB,EAAE,aAAa,EAAE,aAAa,EAAE,oCAAoC,GAAG,gBAAgB,GAAG,yBAAyB,GAAG,wBAAwB,GAAG,SAAS,GAAG,UAAU,GAAG,cAAc,KAAK,GAAG,CAAC,SAASF,EAAEQ,EAAET,GAAGS,EAAEnB,QAAQW,EAAE,WAAW,CAACuM,YAAO,IAAS,GAAG,CAAC,SAASvM,EAAEQ,EAAET,GAAG,aAAa,IAAIG,EAAEF,EAAE,gBAAgB,SAASK,EAAEL,GAAGE,EAAEI,KAAKb,KAAKO,GAAG,IAAI,IAAIQ,EAAE,EAAEA,EAAEf,KAAK0E,KAAK5D,OAAOC,IAAIR,EAAEQ,GAAG,IAAIR,EAAEQ,GAAGR,EAAE,YAAY+D,SAAS1D,EAAEH,GAAGG,EAAE0B,UAAUyK,OAAO,SAASxM,GAAG,OAAOP,KAAK0E,KAAK1E,KAAKgN,KAAKzM,IAAIK,EAAE0B,UAAU2K,qBAAqB,SAAS1M,GAAG,IAAI,IAAIQ,EAAER,EAAEe,WAAW,GAAGhB,EAAEC,EAAEe,WAAW,GAAGb,EAAEF,EAAEe,WAAW,GAAGV,EAAEL,EAAEe,WAAW,GAAGrB,EAAED,KAAKc,OAAO,EAAE,GAAGb,IAAIA,EAAE,GAAGD,KAAK0E,KAAKzE,KAAKc,GAAGf,KAAK0E,KAAKzE,EAAE,KAAKK,GAAGN,KAAK0E,KAAKzE,EAAE,KAAKQ,GAAGT,KAAK0E,KAAKzE,EAAE,KAAKW,EAAE,OAAOX,EAAED,KAAKgN,KAAK,OAAO,GAAGpM,EAAE0B,UAAU4K,sBAAsB,SAAS3M,GAAG,IAAIQ,EAAER,EAAEe,WAAW,GAAGhB,EAAEC,EAAEe,WAAW,GAAGb,EAAEF,EAAEe,WAAW,GAAGV,EAAEL,EAAEe,WAAW,GAAGrB,EAAED,KAAKmN,SAAS,GAAG,OAAOpM,IAAId,EAAE,IAAIK,IAAIL,EAAE,IAAIQ,IAAIR,EAAE,IAAIW,IAAIX,EAAE,IAAIW,EAAE0B,UAAU6K,SAAS,SAAS5M,GAAG,GAAGP,KAAKoN,YAAY7M,GAAG,IAAIA,EAAE,MAAM,GAAG,IAAIQ,EAAEf,KAAK0E,KAAKmH,MAAM7L,KAAKgN,KAAKhN,KAAKqN,MAAMrN,KAAKgN,KAAKhN,KAAKqN,MAAM9M,GAAG,OAAOP,KAAKqN,OAAO9M,EAAEQ,GAAGA,EAAEnB,QAAQgB,GAAG,CAAC,WAAW,GAAG,eAAe,KAAK,GAAG,CAAC,SAASL,EAAEQ,EAAET,GAAG,aAAa,IAAIG,EAAEF,EAAE,YAAY,SAASK,EAAEL,GAAGP,KAAK0E,KAAKnE,EAAEP,KAAKc,OAAOP,EAAEO,OAAOd,KAAKqN,MAAM,EAAErN,KAAKgN,KAAK,EAAEpM,EAAE0B,UAAU,CAAC8K,YAAY,SAAS7M,GAAGP,KAAKsN,WAAWtN,KAAKqN,MAAM9M,IAAI+M,WAAW,SAAS/M,GAAG,GAAGP,KAAKc,OAAOd,KAAKgN,KAAKzM,GAAGA,EAAE,EAAE,MAAM,IAAIG,MAAM,sCAAsCV,KAAKc,OAAO,mBAAmBP,EAAE,uBAAuBgN,SAAS,SAAShN,GAAGP,KAAKsN,WAAW/M,GAAGP,KAAKqN,MAAM9M,GAAGiN,KAAK,SAASjN,GAAGP,KAAKuN,SAASvN,KAAKqN,MAAM9M,IAAIwM,OAAO,SAASxM,KAAKkN,QAAQ,SAASlN,GAAG,IAAIQ,EAAET,EAAE,EAAE,IAAIN,KAAKoN,YAAY7M,GAAGQ,EAAEf,KAAKqN,MAAM9M,EAAE,EAAEQ,GAAGf,KAAKqN,MAAMtM,IAAIT,GAAGA,GAAG,GAAGN,KAAK+M,OAAOhM,GAAG,OAAOf,KAAKqN,OAAO9M,EAAED,GAAGoN,WAAW,SAASnN,GAAG,OAAOE,EAAEgE,YAAY,SAASzE,KAAKmN,SAAS5M,KAAK4M,SAAS,SAAS5M,KAAK0M,qBAAqB,SAAS1M,KAAK2M,sBAAsB,SAAS3M,KAAKoN,SAAS,WAAW,IAAIpN,EAAEP,KAAKyN,QAAQ,GAAG,OAAO,IAAI/B,KAAKA,KAAKkC,IAAI,MAAMrN,GAAG,GAAG,MAAMA,GAAG,GAAG,IAAI,EAAEA,GAAG,GAAG,GAAGA,GAAG,GAAG,GAAGA,GAAG,EAAE,IAAI,GAAGA,IAAI,MAAMQ,EAAEnB,QAAQgB,GAAG,CAAC,WAAW,KAAK,GAAG,CAAC,SAASL,EAAEQ,EAAET,GAAG,aAAa,IAAIG,EAAEF,EAAE,sBAAsB,SAASK,EAAEL,GAAGE,EAAEI,KAAKb,KAAKO,GAAGA,EAAE,YAAY+D,SAAS1D,EAAEH,GAAGG,EAAE0B,UAAU6K,SAAS,SAAS5M,GAAGP,KAAKoN,YAAY7M,GAAG,IAAIQ,EAAEf,KAAK0E,KAAKmH,MAAM7L,KAAKgN,KAAKhN,KAAKqN,MAAMrN,KAAKgN,KAAKhN,KAAKqN,MAAM9M,GAAG,OAAOP,KAAKqN,OAAO9M,EAAEQ,GAAGA,EAAEnB,QAAQgB,GAAG,CAAC,WAAW,GAAG,qBAAqB,KAAK,GAAG,CAAC,SAASL,EAAEQ,EAAET,GAAG,aAAa,IAAIG,EAAEF,EAAE,gBAAgB,SAASK,EAAEL,GAAGE,EAAEI,KAAKb,KAAKO,GAAGA,EAAE,YAAY+D,SAAS1D,EAAEH,GAAGG,EAAE0B,UAAUyK,OAAO,SAASxM,GAAG,OAAOP,KAAK0E,KAAKpD,WAAWtB,KAAKgN,KAAKzM,IAAIK,EAAE0B,UAAU2K,qBAAqB,SAAS1M,GAAG,OAAOP,KAAK0E,KAAKqH,YAAYxL,GAAGP,KAAKgN,MAAMpM,EAAE0B,UAAU4K,sBAAsB,SAAS3M,GAAG,OAAOA,IAAIP,KAAKmN,SAAS,IAAIvM,EAAE0B,UAAU6K,SAAS,SAAS5M,GAAGP,KAAKoN,YAAY7M,GAAG,IAAIQ,EAAEf,KAAK0E,KAAKmH,MAAM7L,KAAKgN,KAAKhN,KAAKqN,MAAMrN,KAAKgN,KAAKhN,KAAKqN,MAAM9M,GAAG,OAAOP,KAAKqN,OAAO9M,EAAEQ,GAAGA,EAAEnB,QAAQgB,GAAG,CAAC,WAAW,GAAG,eAAe,KAAK,GAAG,CAAC,SAASL,EAAEQ,EAAET,GAAG,aAAa,IAAIG,EAAEF,EAAE,iBAAiB,SAASK,EAAEL,GAAGE,EAAEI,KAAKb,KAAKO,GAAGA,EAAE,YAAY+D,SAAS1D,EAAEH,GAAGG,EAAE0B,UAAU6K,SAAS,SAAS5M,GAAG,GAAGP,KAAKoN,YAAY7M,GAAG,IAAIA,EAAE,OAAO,IAAIuB,WAAW,GAAG,IAAIf,EAAEf,KAAK0E,KAAKmJ,SAAS7N,KAAKgN,KAAKhN,KAAKqN,MAAMrN,KAAKgN,KAAKhN,KAAKqN,MAAM9M,GAAG,OAAOP,KAAKqN,OAAO9M,EAAEQ,GAAGA,EAAEnB,QAAQgB,GAAG,CAAC,WAAW,GAAG,gBAAgB,KAAK,GAAG,CAAC,SAASL,EAAEQ,EAAET,GAAG,aAAa,IAAIG,EAAEF,EAAE,YAAYK,EAAEL,EAAE,cAAcN,EAAEM,EAAE,iBAAiBL,EAAEK,EAAE,kBAAkBJ,EAAEI,EAAE,sBAAsBH,EAAEG,EAAE,sBAAsBQ,EAAEnB,QAAQ,SAASW,GAAG,IAAIQ,EAAEN,EAAEY,UAAUd,GAAG,OAAOE,EAAEiM,aAAa3L,GAAG,WAAWA,GAAGH,EAAEiB,WAAW,eAAed,EAAE,IAAIZ,EAAEI,GAAGK,EAAEiB,WAAW,IAAIzB,EAAEK,EAAEgE,YAAY,aAAalE,IAAI,IAAIN,EAAEQ,EAAEgE,YAAY,QAAQlE,IAAI,IAAIL,EAAEK,KAAK,CAAC,aAAa,GAAG,WAAW,GAAG,gBAAgB,GAAG,qBAAqB,GAAG,iBAAiB,GAAG,qBAAqB,KAAK,GAAG,CAAC,SAASA,EAAEQ,EAAET,GAAG,aAAaA,EAAEyG,kBAAkB,OAAOzG,EAAE2G,oBAAoB,OAAO3G,EAAE6H,sBAAsB,OAAO7H,EAAEwN,gCAAgC,OAAOxN,EAAEyN,4BAA4B,OAAOzN,EAAE2H,gBAAgB,SAAS,IAAI,GAAG,CAAC,SAAS1H,EAAEQ,EAAET,GAAG,aAAa,IAAIG,EAAEF,EAAE,mBAAmBK,EAAEL,EAAE,YAAY,SAASN,EAAEM,GAAGE,EAAEI,KAAKb,KAAK,oBAAoBO,GAAGP,KAAKgO,SAASzN,EAAEK,EAAE0D,SAASrE,EAAEQ,GAAGR,EAAEqC,UAAUiC,aAAa,SAAShE,GAAGP,KAAKuB,KAAK,CAACmD,KAAK9D,EAAE6D,YAAYzE,KAAKgO,SAASzN,EAAEmE,MAAML,KAAK9D,EAAE8D,QAAQtD,EAAEnB,QAAQK,GAAG,CAAC,WAAW,GAAG,kBAAkB,KAAK,GAAG,CAAC,SAASM,EAAEQ,EAAET,GAAG,aAAa,IAAIG,EAAEF,EAAE,mBAAmBK,EAAEL,EAAE,YAAY,SAASN,IAAIQ,EAAEI,KAAKb,KAAK,cAAcA,KAAKgD,eAAe,QAAQ,GAAGzC,EAAE,YAAY+D,SAASrE,EAAEQ,GAAGR,EAAEqC,UAAUiC,aAAa,SAAShE,GAAGP,KAAK6C,WAAWV,MAAMvB,EAAEL,EAAEmE,KAAK1E,KAAK6C,WAAWV,OAAO,GAAGnC,KAAKuB,KAAKhB,IAAIQ,EAAEnB,QAAQK,GAAG,CAAC,WAAW,EAAE,WAAW,GAAG,kBAAkB,KAAK,GAAG,CAAC,SAASM,EAAEQ,EAAET,GAAG,aAAa,IAAIG,EAAEF,EAAE,YAAYK,EAAEL,EAAE,mBAAmB,SAASN,EAAEM,GAAGK,EAAEC,KAAKb,KAAK,uBAAuBO,GAAGP,KAAKiO,SAAS1N,EAAEP,KAAKgD,eAAezC,EAAE,GAAGE,EAAE6D,SAASrE,EAAEW,GAAGX,EAAEqC,UAAUiC,aAAa,SAAShE,GAAG,GAAGA,EAAE,CAAC,IAAIQ,EAAEf,KAAK6C,WAAW7C,KAAKiO,WAAW,EAAEjO,KAAK6C,WAAW7C,KAAKiO,UAAUlN,EAAER,EAAEmE,KAAK5D,OAAOF,EAAE0B,UAAUiC,aAAa1D,KAAKb,KAAKO,IAAIQ,EAAEnB,QAAQK,GAAG,CAAC,WAAW,GAAG,kBAAkB,KAAK,GAAG,CAAC,SAASM,EAAEQ,EAAET,GAAG,aAAa,IAAIG,EAAEF,EAAE,YAAYK,EAAEL,EAAE,mBAAmB,SAASN,EAAEM,GAAGK,EAAEC,KAAKb,KAAK,cAAc,IAAIe,EAAEf,KAAKA,KAAKkO,aAAY,EAAGlO,KAAKqN,MAAM,EAAErN,KAAKmO,IAAI,EAAEnO,KAAK0E,KAAK,KAAK1E,KAAKuM,KAAK,GAAGvM,KAAKoO,gBAAe,EAAG7N,EAAEgK,MAAK,SAAShK,GAAGQ,EAAEmN,aAAY,EAAGnN,EAAE2D,KAAKnE,EAAEQ,EAAEoN,IAAI5N,GAAGA,EAAEO,QAAQ,EAAEC,EAAEwL,KAAK9L,EAAEY,UAAUd,GAAGQ,EAAEuH,UAAUvH,EAAEsN,oBAAkB,SAAS9N,GAAGQ,EAAE4H,MAAMpI,MAAKE,EAAE6D,SAASrE,EAAEW,GAAGX,EAAEqC,UAAUsC,QAAQ,WAAWhE,EAAE0B,UAAUsC,QAAQ/D,KAAKb,MAAMA,KAAK0E,KAAK,MAAMzE,EAAEqC,UAAUkG,OAAO,WAAW,QAAQ5H,EAAE0B,UAAUkG,OAAO3H,KAAKb,SAASA,KAAKoO,gBAAgBpO,KAAKkO,cAAclO,KAAKoO,gBAAe,EAAG3N,EAAE6N,MAAMtO,KAAKqO,eAAe,GAAGrO,QAAO,IAAKC,EAAEqC,UAAU+L,eAAe,WAAWrO,KAAKoO,gBAAe,EAAGpO,KAAKsI,UAAUtI,KAAKuO,aAAavO,KAAKwO,QAAQxO,KAAKuO,aAAa9N,EAAE6N,MAAMtO,KAAKqO,eAAe,GAAGrO,MAAMA,KAAKoO,gBAAe,KAAMnO,EAAEqC,UAAUkM,MAAM,WAAW,GAAGxO,KAAKsI,UAAUtI,KAAKuO,WAAW,OAAM,EAAG,IAAIhO,EAAE,KAAKQ,EAAE0N,KAAKC,IAAI1O,KAAKmO,IAAInO,KAAKqN,MAAM,OAAO,GAAGrN,KAAKqN,OAAOrN,KAAKmO,IAAI,OAAOnO,KAAK0I,MAAM,OAAO1I,KAAKuM,MAAM,IAAI,SAAShM,EAAEP,KAAK0E,KAAKoH,UAAU9L,KAAKqN,MAAMtM,GAAG,MAAM,IAAI,aAAaR,EAAEP,KAAK0E,KAAKmJ,SAAS7N,KAAKqN,MAAMtM,GAAG,MAAM,IAAI,QAAQ,IAAI,aAAaR,EAAEP,KAAK0E,KAAKmH,MAAM7L,KAAKqN,MAAMtM,GAAG,OAAOf,KAAKqN,MAAMtM,EAAEf,KAAKuB,KAAK,CAACmD,KAAKnE,EAAE8D,KAAK,CAACyD,QAAQ9H,KAAKmO,IAAInO,KAAKqN,MAAMrN,KAAKmO,IAAI,IAAI,MAAMpN,EAAEnB,QAAQK,GAAG,CAAC,WAAW,GAAG,kBAAkB,KAAK,GAAG,CAAC,SAASM,EAAEQ,EAAET,GAAG,aAAa,SAASG,EAAEF,GAAGP,KAAKwF,KAAKjF,GAAG,UAAUP,KAAK6C,WAAW,GAAG7C,KAAK4I,eAAe,KAAK5I,KAAK2O,gBAAgB,GAAG3O,KAAKsI,UAAS,EAAGtI,KAAKuO,YAAW,EAAGvO,KAAK4O,UAAS,EAAG5O,KAAK6O,WAAW,CAACnK,KAAK,GAAGgE,IAAI,GAAGC,MAAM,IAAI3I,KAAKqI,SAAS,KAAK5H,EAAE6B,UAAU,CAACf,KAAK,SAAShB,GAAGP,KAAKiL,KAAK,OAAO1K,IAAImI,IAAI,WAAW,GAAG1I,KAAKuO,WAAW,OAAM,EAAGvO,KAAK2E,QAAQ,IAAI3E,KAAKiL,KAAK,OAAOjL,KAAK4E,UAAU5E,KAAKuO,YAAW,EAAG,MAAMhO,GAAGP,KAAKiL,KAAK,QAAQ1K,GAAG,OAAM,GAAIoI,MAAM,SAASpI,GAAG,OAAOP,KAAKuO,aAAavO,KAAKsI,SAAStI,KAAK4I,eAAerI,GAAGP,KAAKuO,YAAW,EAAGvO,KAAKiL,KAAK,QAAQ1K,GAAGP,KAAKqI,UAAUrI,KAAKqI,SAASM,MAAMpI,GAAGP,KAAK4E,YAAW,IAAKhC,GAAG,SAASrC,EAAEQ,GAAG,OAAOf,KAAK6O,WAAWtO,GAAGgB,KAAKR,GAAGf,MAAM4E,QAAQ,WAAW5E,KAAK6C,WAAW7C,KAAK4I,eAAe5I,KAAK2O,gBAAgB,KAAK3O,KAAK6O,WAAW,IAAI5D,KAAK,SAAS1K,EAAEQ,GAAG,GAAGf,KAAK6O,WAAWtO,GAAG,IAAI,IAAID,EAAE,EAAEA,EAAEN,KAAK6O,WAAWtO,GAAGO,OAAOR,IAAIN,KAAK6O,WAAWtO,GAAGD,GAAGO,KAAKb,KAAKe,IAAI2B,KAAK,SAASnC,GAAG,OAAOA,EAAEkI,iBAAiBzI,OAAOyI,iBAAiB,SAASlI,GAAG,GAAGP,KAAK4O,SAAS,MAAM,IAAIlO,MAAM,eAAeV,KAAK,4BAA4BA,KAAK6C,WAAWtC,EAAEsC,WAAW7C,KAAK8O,kBAAkB9O,KAAKqI,SAAS9H,EAAE,IAAIQ,EAAEf,KAAK,OAAOO,EAAEqC,GAAG,QAAO,SAASrC,GAAGQ,EAAEwD,aAAahE,MAAKA,EAAEqC,GAAG,OAAM,WAAW7B,EAAE2H,SAAQnI,EAAEqC,GAAG,SAAQ,SAASrC,GAAGQ,EAAE4H,MAAMpI,MAAKP,MAAMuI,MAAM,WAAW,OAAOvI,KAAKsI,WAAWtI,KAAKuO,aAAavO,KAAKsI,UAAS,EAAGtI,KAAKqI,UAAUrI,KAAKqI,SAASE,SAAQ,IAAKC,OAAO,WAAW,IAAIxI,KAAKsI,UAAUtI,KAAKuO,WAAW,OAAM,EAAG,IAAIhO,EAAEP,KAAKsI,UAAS,EAAG,OAAOtI,KAAK4I,iBAAiB5I,KAAK2I,MAAM3I,KAAK4I,gBAAgBrI,GAAE,GAAIP,KAAKqI,UAAUrI,KAAKqI,SAASG,UAAUjI,GAAGoE,MAAM,aAAaJ,aAAa,SAAShE,GAAGP,KAAKuB,KAAKhB,IAAIyC,eAAe,SAASzC,EAAEQ,GAAG,OAAOf,KAAK2O,gBAAgBpO,GAAGQ,EAAEf,KAAK8O,kBAAkB9O,MAAM8O,gBAAgB,WAAW,IAAI,IAAIvO,KAAKP,KAAK2O,gBAAgB3O,KAAK2O,gBAAgBI,eAAexO,KAAKP,KAAK6C,WAAWtC,GAAGP,KAAK2O,gBAAgBpO,KAAKsI,KAAK,WAAW,GAAG7I,KAAK4O,SAAS,MAAM,IAAIlO,MAAM,eAAeV,KAAK,4BAA4BA,KAAK4O,UAAS,EAAG5O,KAAKqI,UAAUrI,KAAKqI,SAASQ,QAAQmD,SAAS,WAAW,IAAIzL,EAAE,UAAUP,KAAKwF,KAAK,OAAOxF,KAAKqI,SAASrI,KAAKqI,SAAS,OAAO9H,EAAEA,IAAIQ,EAAEnB,QAAQa,GAAG,IAAI,GAAG,CAAC,SAASF,EAAEQ,EAAET,GAAG,aAAa,IAAIF,EAAEG,EAAE,YAAYK,EAAEL,EAAE,mBAAmBN,EAAEM,EAAE,mBAAmBF,EAAEE,EAAE,aAAaE,EAAEF,EAAE,cAAcL,EAAEK,EAAE,eAAeJ,EAAE,KAAK,GAAGM,EAAEuO,WAAW,IAAI7O,EAAEI,EAAE,uCAAuC,MAAMA,IAA4xB,SAASa,EAAEb,EAAEQ,EAAET,GAAG,IAAIG,EAAEM,EAAE,OAAOA,GAAG,IAAI,OAAO,IAAI,cAAcN,EAAE,aAAa,MAAM,IAAI,SAASA,EAAE,SAAS,IAAIT,KAAKiP,cAAcxO,EAAET,KAAKkP,YAAYnO,EAAEf,KAAKmP,UAAU7O,EAAEF,EAAEsM,aAAajM,GAAGT,KAAKoP,QAAQ7O,EAAEmC,KAAK,IAAI9B,EAAEH,IAAIF,EAAEsI,OAAO,MAAMtI,GAAGP,KAAKoP,QAAQ,IAAInP,EAAE,SAASD,KAAKoP,QAAQzG,MAAMpI,IAAIa,EAAEkB,UAAU,CAACiF,WAAW,SAAShH,GAAG,OAA5lC,SAAWA,EAAEJ,GAAG,OAAO,IAAID,EAAEsC,SAAQ,SAASzB,EAAET,GAAG,IAAIG,EAAE,GAAGG,EAAEL,EAAE0O,cAAchP,EAAEM,EAAE2O,YAAYhP,EAAEK,EAAE4O,UAAU5O,EAAEqC,GAAG,QAAO,SAASrC,EAAEQ,GAAGN,EAAEc,KAAKhB,GAAGJ,GAAGA,EAAEY,MAAK6B,GAAG,SAAQ,SAASrC,GAAGE,EAAE,GAAGH,EAAEC,MAAKqC,GAAG,OAAM,WAAW,IAAI,IAAIrC,EAAE,SAASA,EAAEQ,EAAET,GAAG,OAAOC,GAAG,IAAI,OAAO,OAAOH,EAAEiP,QAAQjP,EAAEqE,YAAY,cAAc1D,GAAGT,GAAG,IAAI,SAAS,OAAOD,EAAEc,OAAOJ,GAAG,QAAQ,OAAOX,EAAEqE,YAAYlE,EAAEQ,IAAvJ,CAA4Jd,EAAE,SAASM,EAAEQ,GAAG,IAAIT,EAAEG,EAAE,EAAEG,EAAE,KAAKX,EAAE,EAAE,IAAIK,EAAE,EAAEA,EAAES,EAAED,OAAOR,IAAIL,GAAGc,EAAET,GAAGQ,OAAO,OAAOP,GAAG,IAAI,SAAS,OAAOQ,EAAEU,KAAK,IAAI,IAAI,QAAQ,OAAOM,MAAMO,UAAUgN,OAAOC,MAAM,GAAGxO,GAAG,IAAI,aAAa,IAAIH,EAAE,IAAIkB,WAAW7B,GAAGK,EAAE,EAAEA,EAAES,EAAED,OAAOR,IAAIM,EAAE4O,IAAIzO,EAAET,GAAGG,GAAGA,GAAGM,EAAET,GAAGQ,OAAO,OAAOF,EAAE,IAAI,aAAa,OAAOuK,OAAOmE,OAAOvO,GAAG,QAAQ,MAAM,IAAIL,MAAM,8BAA8BH,EAAE,MAA3W,CAAkXK,EAAEH,GAAGP,GAAGa,EAAER,GAAG,MAAMA,GAAGD,EAAEC,GAAGE,EAAE,MAAK+H,YAAsVhI,CAAER,KAAKO,IAAIqC,GAAG,SAASrC,EAAEQ,GAAG,IAAIT,EAAEN,KAAK,MAAM,SAASO,EAAEP,KAAKoP,QAAQxM,GAAGrC,GAAE,SAASA,GAAGQ,EAAEF,KAAKP,EAAEC,EAAEmE,KAAKnE,EAAE8D,SAAQrE,KAAKoP,QAAQxM,GAAGrC,GAAE,WAAWH,EAAEkO,MAAMvN,EAAEoI,UAAU7I,MAAKN,MAAMwI,OAAO,WAAW,OAAOpI,EAAEkO,MAAMtO,KAAKoP,QAAQ5G,OAAO,GAAGxI,KAAKoP,SAASpP,MAAMuI,MAAM,WAAW,OAAOvI,KAAKoP,QAAQ7G,QAAQvI,MAAM6M,eAAe,SAAStM,GAAG,GAAGH,EAAEsM,aAAa,cAAc,eAAe1M,KAAKkP,YAAY,MAAM,IAAIxO,MAAMV,KAAKkP,YAAY,oCAAoC,OAAO,IAAI/O,EAAEH,KAAK,CAACyP,WAAW,eAAezP,KAAKkP,aAAa3O,KAAKQ,EAAEnB,QAAQwB,GAAG,CAAC,YAAY,EAAE,cAAc,EAAE,sCAAsC,GAAG,aAAa,GAAG,WAAW,GAAG,kBAAkB,GAAG,kBAAkB,KAAK,GAAG,CAAC,SAASb,EAAEQ,EAAET,GAAG,aAAa,GAAGA,EAAEgD,QAAO,EAAGhD,EAAEoP,OAAM,EAAGpP,EAAEqP,QAAO,EAAGrP,EAAEsP,YAAY,oBAAoBC,aAAa,oBAAoB/N,WAAWxB,EAAEwP,WAAW,oBAAoB3E,OAAO7K,EAAEuB,WAAW,oBAAoBC,WAAW,oBAAoB+N,YAAYvP,EAAEyP,MAAK,MAAO,CAAC,IAAItP,EAAE,IAAIoP,YAAY,GAAG,IAAIvP,EAAEyP,KAAK,IAAI,IAAIC,KAAK,CAACvP,GAAG,CAAC8L,KAAK,oBAAoB0D,KAAK,MAAM1P,GAAG,IAAI,IAAIK,EAAE,IAAIsP,KAAKC,aAAaD,KAAKE,mBAAmBF,KAAKG,gBAAgBH,KAAKI,eAAe1P,EAAE2P,OAAO9P,GAAGH,EAAEyP,KAAK,IAAInP,EAAE4P,QAAQ,mBAAmBP,KAAK,MAAM1P,GAAGD,EAAEyP,MAAK,IAAK,IAAIzP,EAAE0O,aAAazO,EAAE,mBAAmBwK,SAAS,MAAMxK,GAAGD,EAAE0O,YAAW,IAAK,CAAC,kBAAkB,KAAK,GAAG,CAAC,SAASzO,EAAEQ,EAAEd,GAAG,aAAa,IAAI,IAAIE,EAAEI,EAAE,WAAWH,EAAEG,EAAE,aAAaD,EAAEC,EAAE,iBAAiBE,EAAEF,EAAE,0BAA0BF,EAAE,IAAI0B,MAAM,KAAKnB,EAAE,EAAEA,EAAE,IAAIA,IAAIP,EAAEO,GAAG,KAAKA,EAAE,EAAE,KAAKA,EAAE,EAAE,KAAKA,EAAE,EAAE,KAAKA,EAAE,EAAE,KAAKA,EAAE,EAAE,EAAkB,SAASV,IAAIO,EAAEI,KAAKb,KAAK,gBAAgBA,KAAKyQ,SAAS,KAAK,SAASjQ,IAAIC,EAAEI,KAAKb,KAAK,gBAArGK,EAAE,KAAKA,EAAE,KAAK,EAAuGJ,EAAEqF,WAAW,SAAS/E,GAAG,OAAOH,EAAE0P,WAAWxP,EAAE8K,cAAc7K,EAAE,SAAS,SAASA,GAAG,IAAIQ,EAAET,EAAEG,EAAEG,EAAEX,EAAEC,EAAEK,EAAEO,OAAOX,EAAE,EAAE,IAAIS,EAAE,EAAEA,EAAEV,EAAEU,IAAI,QAAQ,OAAON,EAAEC,EAAEe,WAAWV,MAAMA,EAAE,EAAEV,GAAG,QAAQ,OAAOO,EAAEF,EAAEe,WAAWV,EAAE,OAAON,EAAE,OAAOA,EAAE,OAAO,KAAKG,EAAE,OAAOG,KAAKT,GAAGG,EAAE,IAAI,EAAEA,EAAE,KAAK,EAAEA,EAAE,MAAM,EAAE,EAAE,IAAIS,EAAEX,EAAEyB,WAAW,IAAIC,WAAW3B,GAAG,IAAI4B,MAAM5B,GAAGS,EAAEX,EAAE,EAAEA,EAAEE,EAAES,IAAI,QAAQ,OAAON,EAAEC,EAAEe,WAAWV,MAAMA,EAAE,EAAEV,GAAG,QAAQ,OAAOO,EAAEF,EAAEe,WAAWV,EAAE,OAAON,EAAE,OAAOA,EAAE,OAAO,KAAKG,EAAE,OAAOG,KAAKN,EAAE,IAAIS,EAAEd,KAAKK,GAAGA,EAAE,KAAKS,EAAEd,KAAK,IAAIK,IAAI,GAAGA,EAAE,MAAMS,EAAEd,KAAK,IAAIK,IAAI,IAAIS,EAAEd,KAAK,IAAIK,IAAI,GAAGS,EAAEd,KAAK,IAAIK,IAAI,GAAG,IAAIS,EAAEd,KAAK,IAAIK,IAAI,EAAE,IAAIS,EAAEd,KAAK,IAAI,GAAGK,GAAG,OAAOS,EAAhiB,CAAmiBR,IAAIN,EAAEiK,WAAW,SAAS3J,GAAG,OAAOH,EAAE0P,WAAW3P,EAAEsE,YAAY,aAAalE,GAAGyL,SAAS,SAAS,SAASzL,GAAG,IAAIQ,EAAET,EAAEG,EAAEG,EAAEX,EAAEM,EAAEO,OAAOZ,EAAE,IAAI6B,MAAM,EAAE9B,GAAG,IAAIc,EAAET,EAAE,EAAES,EAAEd,GAAG,IAAIQ,EAAEF,EAAEQ,MAAM,IAAIb,EAAEI,KAAKG,OAAO,GAAG,GAAGG,EAAEP,EAAEI,IAAIP,EAAEI,KAAK,MAAMS,GAAGH,EAAE,MAAM,CAAC,IAAIH,GAAG,IAAIG,EAAE,GAAG,IAAIA,EAAE,GAAG,EAAE,EAAEA,GAAGG,EAAEd,GAAGQ,EAAEA,GAAG,EAAE,GAAGF,EAAEQ,KAAKH,IAAI,EAAEA,EAAEV,EAAEI,KAAK,MAAMG,EAAE,MAAMP,EAAEI,KAAKG,GAAGA,GAAG,MAAMP,EAAEI,KAAK,MAAMG,GAAG,GAAG,KAAKP,EAAEI,KAAK,MAAM,KAAKG,GAAG,OAAOP,EAAEY,SAASR,IAAIJ,EAAE2N,SAAS3N,EAAEA,EAAE2N,SAAS,EAAEvN,GAAGJ,EAAEY,OAAOR,GAAGH,EAAEuQ,kBAAkBxQ,GAAhX,CAAoXK,EAAEJ,EAAEsE,YAAYrE,EAAEyB,WAAW,aAAa,QAAQtB,KAAKJ,EAAEmE,SAASpE,EAAEO,GAAGP,EAAEoC,UAAUiC,aAAa,SAAShE,GAAG,IAAIQ,EAAEZ,EAAEsE,YAAYrE,EAAEyB,WAAW,aAAa,QAAQtB,EAAEmE,MAAM,GAAG1E,KAAKyQ,UAAUzQ,KAAKyQ,SAAS3P,OAAO,CAAC,GAAGV,EAAEyB,WAAW,CAAC,IAAIvB,EAAES,GAAGA,EAAE,IAAIe,WAAWxB,EAAEQ,OAAOd,KAAKyQ,SAAS3P,SAAS0O,IAAIxP,KAAKyQ,SAAS,GAAG1P,EAAEyO,IAAIlP,EAAEN,KAAKyQ,SAAS3P,aAAaC,EAAEf,KAAKyQ,SAASnB,OAAOvO,GAAGf,KAAKyQ,SAAS,KAAK,IAAIhQ,EAAE,SAASF,EAAEQ,GAAG,IAAIT,EAAE,KAAKS,EAAEA,GAAGR,EAAEO,QAAQP,EAAEO,SAASC,EAAER,EAAEO,QAAQR,EAAES,EAAE,EAAE,GAAGT,GAAG,MAAM,IAAIC,EAAED,KAAKA,IAAI,OAAOA,EAAE,GAAI,IAAIA,EAANS,EAAUT,EAAED,EAAEE,EAAED,IAAIS,EAAET,EAAES,EAAnI,CAAsIA,GAAGH,EAAEG,EAAEN,IAAIM,EAAED,SAASV,EAAEyB,YAAYjB,EAAEG,EAAE8M,SAAS,EAAEpN,GAAGT,KAAKyQ,SAAS1P,EAAE8M,SAASpN,EAAEM,EAAED,UAAUF,EAAEG,EAAE8K,MAAM,EAAEpL,GAAGT,KAAKyQ,SAAS1P,EAAE8K,MAAMpL,EAAEM,EAAED,UAAUd,KAAKuB,KAAK,CAACmD,KAAKzE,EAAEiK,WAAWtJ,GAAGyD,KAAK9D,EAAE8D,QAAQnE,EAAEoC,UAAUqC,MAAM,WAAW3E,KAAKyQ,UAAUzQ,KAAKyQ,SAAS3P,SAASd,KAAKuB,KAAK,CAACmD,KAAKzE,EAAEiK,WAAWlK,KAAKyQ,UAAUpM,KAAK,KAAKrE,KAAKyQ,SAAS,OAAOxQ,EAAE0Q,iBAAiBzQ,EAAEC,EAAEmE,SAAS9D,EAAEC,GAAGD,EAAE8B,UAAUiC,aAAa,SAAShE,GAAGP,KAAKuB,KAAK,CAACmD,KAAKzE,EAAEqF,WAAW/E,EAAEmE,MAAML,KAAK9D,EAAE8D,QAAQpE,EAAE2Q,iBAAiBpQ,GAAG,CAAC,gBAAgB,GAAG,yBAAyB,GAAG,YAAY,GAAG,UAAU,KAAK,GAAG,CAAC,SAASD,EAAEQ,EAAEb,GAAG,aAAa,IAAIC,EAAEI,EAAE,aAAaH,EAAEG,EAAE,YAAYD,EAAEC,EAAE,iBAAiBE,EAAEF,EAAE,sBAAsBF,EAAEE,EAAE,cAAc,SAASK,EAAEL,GAAG,OAAOA,EAAE,SAASC,EAAED,EAAEQ,GAAG,IAAI,IAAIT,EAAE,EAAEA,EAAEC,EAAEO,SAASR,EAAES,EAAET,GAAG,IAAIC,EAAEe,WAAWhB,GAAG,OAAOS,EAAEb,EAAEmP,QAAQ,SAAStO,EAAET,GAAGJ,EAAEwM,aAAa,QAAQ,IAAI,OAAO,IAAIsD,KAAK,CAACjP,GAAG,CAACwL,KAAKjM,IAAI,MAAMC,GAAG,IAAI,IAAIE,EAAE,IAAIyP,KAAKC,aAAaD,KAAKE,mBAAmBF,KAAKG,gBAAgBH,KAAKI,eAAe,OAAO7P,EAAE8P,OAAOxP,GAAGN,EAAE+P,QAAQlQ,GAAG,MAAMC,GAAG,MAAM,IAAIG,MAAM,sCAAsC,IAAIT,EAAE,CAAC4Q,iBAAiB,SAAStQ,EAAEQ,EAAET,GAAG,IAAIG,EAAE,GAAGG,EAAE,EAAEX,EAAEM,EAAEO,OAAO,GAAGb,GAAGK,EAAE,OAAO4E,OAAOC,aAAaoK,MAAM,KAAKhP,GAAG,KAAKK,EAAEX,GAAG,UAAUc,GAAG,eAAeA,EAAEN,EAAEc,KAAK2D,OAAOC,aAAaoK,MAAM,KAAKhP,EAAEsL,MAAMjL,EAAE6N,KAAKC,IAAI9N,EAAEN,EAAEL,MAAMQ,EAAEc,KAAK2D,OAAOC,aAAaoK,MAAM,KAAKhP,EAAEsN,SAASjN,EAAE6N,KAAKC,IAAI9N,EAAEN,EAAEL,MAAMW,GAAGN,EAAE,OAAOG,EAAEgB,KAAK,KAAKqP,gBAAgB,SAASvQ,GAAG,IAAI,IAAIQ,EAAE,GAAGT,EAAE,EAAEA,EAAEC,EAAEO,OAAOR,IAAIS,GAAGmE,OAAOC,aAAa5E,EAAED,IAAI,OAAOS,GAAGgQ,eAAe,CAAClP,WAAW,WAAW,IAAI,OAAO1B,EAAE0B,YAAY,IAAIqD,OAAOC,aAAaoK,MAAM,KAAK,IAAIzN,WAAW,IAAIhB,OAAO,MAAMP,GAAG,OAAM,GAAhH,GAAuHuP,WAAW,WAAW,IAAI,OAAO3P,EAAE2P,YAAY,IAAI5K,OAAOC,aAAaoK,MAAM,KAAKjP,EAAEgL,YAAY,IAAIxK,OAAO,MAAMP,GAAG,OAAM,GAA/G,KAAwH,SAASa,EAAEb,GAAG,IAAIQ,EAAE,MAAMT,EAAEJ,EAAEmB,UAAUd,GAAGE,GAAE,EAAG,GAAG,eAAeH,EAAEG,EAAER,EAAE8Q,eAAelP,WAAW,eAAevB,IAAIG,EAAER,EAAE8Q,eAAejB,YAAYrP,EAAE,KAAK,EAAEM,GAAG,IAAI,OAAOd,EAAE4Q,iBAAiBtQ,EAAED,EAAES,GAAG,MAAMR,GAAGQ,EAAE0N,KAAKuC,MAAMjQ,EAAE,GAAG,OAAOd,EAAE6Q,gBAAgBvQ,GAAG,SAASU,EAAEV,EAAEQ,GAAG,IAAI,IAAIT,EAAE,EAAEA,EAAEC,EAAEO,OAAOR,IAAIS,EAAET,GAAGC,EAAED,GAAG,OAAOS,EAAEb,EAAEwQ,kBAAkBtP,EAAE,IAAIJ,EAAE,GAAGA,EAAE2O,OAAO,CAACA,OAAO/O,EAAE8O,MAAM,SAASnP,GAAG,OAAOC,EAAED,EAAE,IAAIwB,MAAMxB,EAAEO,UAAU8O,YAAY,SAASrP,GAAG,OAAOS,EAAE2O,OAAO9N,WAAWtB,GAAG0Q,QAAQpP,WAAW,SAAStB,GAAG,OAAOC,EAAED,EAAE,IAAIuB,WAAWvB,EAAEO,UAAUgP,WAAW,SAASvP,GAAG,OAAOC,EAAED,EAAED,EAAEgL,YAAY/K,EAAEO,WAAWE,EAAE0O,MAAM,CAACC,OAAOvO,EAAEsO,MAAM9O,EAAEgP,YAAY,SAASrP,GAAG,OAAO,IAAIuB,WAAWvB,GAAG0Q,QAAQpP,WAAW,SAAStB,GAAG,OAAO,IAAIuB,WAAWvB,IAAIuP,WAAW,SAASvP,GAAG,OAAOD,EAAE8K,cAAc7K,KAAKS,EAAE4O,YAAY,CAACD,OAAO,SAASpP,GAAG,OAAOa,EAAE,IAAIU,WAAWvB,KAAKmP,MAAM,SAASnP,GAAG,OAAOU,EAAE,IAAIa,WAAWvB,GAAG,IAAIwB,MAAMxB,EAAE2Q,cAActB,YAAYhP,EAAEiB,WAAW,SAAStB,GAAG,OAAO,IAAIuB,WAAWvB,IAAIuP,WAAW,SAASvP,GAAG,OAAOD,EAAE8K,cAAc,IAAItJ,WAAWvB,MAAMS,EAAEa,WAAW,CAAC8N,OAAOvO,EAAEsO,MAAM,SAASnP,GAAG,OAAOU,EAAEV,EAAE,IAAIwB,MAAMxB,EAAEO,UAAU8O,YAAY,SAASrP,GAAG,OAAOA,EAAE0Q,QAAQpP,WAAWjB,EAAEkP,WAAW,SAASvP,GAAG,OAAOD,EAAE8K,cAAc7K,KAAKS,EAAE8O,WAAW,CAACH,OAAOvO,EAAEsO,MAAM,SAASnP,GAAG,OAAOU,EAAEV,EAAE,IAAIwB,MAAMxB,EAAEO,UAAU8O,YAAY,SAASrP,GAAG,OAAOS,EAAE8O,WAAWjO,WAAWtB,GAAG0Q,QAAQpP,WAAW,SAAStB,GAAG,OAAOU,EAAEV,EAAE,IAAIuB,WAAWvB,EAAEO,UAAUgP,WAAWlP,GAAGV,EAAEuE,YAAY,SAASlE,EAAEQ,GAAG,GAAGA,EAAEA,GAAG,IAAIR,EAAE,OAAOQ,EAAEb,EAAEwM,aAAanM,GAAG,IAAID,EAAEJ,EAAEmB,UAAUN,GAAG,OAAOC,EAAEV,GAAGC,GAAGQ,IAAIb,EAAEmB,UAAU,SAASd,GAAG,MAAM,iBAAiBA,EAAE,SAAS,mBAAmB8I,OAAO/G,UAAU0J,SAASnL,KAAKN,GAAG,QAAQJ,EAAE2P,YAAYxP,EAAEmL,SAASlL,GAAG,aAAaJ,EAAE0B,YAAYtB,aAAauB,WAAW,aAAa3B,EAAEyP,aAAarP,aAAasP,YAAY,mBAAc,GAAQ3P,EAAEwM,aAAa,SAASnM,GAAG,IAAIJ,EAAEI,EAAEkM,eAAe,MAAM,IAAI/L,MAAMH,EAAE,uCAAuCL,EAAEiR,iBAAiB,MAAMjR,EAAEkR,kBAAkB,EAAElR,EAAEmR,OAAO,SAAS9Q,GAAG,IAAIQ,EAAET,EAAEG,EAAE,GAAG,IAAIH,EAAE,EAAEA,GAAGC,GAAG,IAAIO,OAAOR,IAAIG,GAAG,QAAQM,EAAER,EAAEe,WAAWhB,IAAI,GAAG,IAAI,IAAIS,EAAEiL,SAAS,IAAIL,cAAc,OAAOlL,GAAGP,EAAEoO,MAAM,SAAS/N,EAAEQ,EAAET,GAAGG,GAAE,WAAWF,EAAEgP,MAAMjP,GAAG,KAAKS,GAAG,QAAOb,EAAEoE,SAAS,SAAS/D,EAAEQ,GAAG,SAAST,KAAKA,EAAEgC,UAAUvB,EAAEuB,UAAU/B,EAAE+B,UAAU,IAAIhC,GAAGJ,EAAE4J,OAAO,WAAW,IAAIvJ,EAAEQ,EAAET,EAAE,GAAG,IAAIC,EAAE,EAAEA,EAAE4I,UAAUrI,OAAOP,IAAI,IAAIQ,KAAKoI,UAAU5I,GAAG4I,UAAU5I,GAAGwO,eAAehO,SAAI,IAAST,EAAES,KAAKT,EAAES,GAAGoI,UAAU5I,GAAGQ,IAAI,OAAOT,GAAGJ,EAAEoK,eAAe,SAAShK,EAAEC,EAAEE,EAAEG,EAAEX,GAAG,OAAOI,EAAEmC,QAAQC,QAAQlC,GAAGgK,MAAK,SAAS9J,GAAG,OAAON,EAAE4P,OAAOtP,aAAauP,OAAO,IAAI,CAAC,gBAAgB,iBAAiBhO,QAAQqH,OAAO/G,UAAU0J,SAASnL,KAAKJ,MAAM,oBAAoB6Q,WAAW,IAAIjR,EAAEmC,SAAQ,SAASzB,EAAET,GAAG,IAAIC,EAAE,IAAI+Q,WAAW/Q,EAAEgR,OAAO,SAAShR,GAAGQ,EAAER,EAAEiR,OAAOC,SAASlR,EAAEmR,QAAQ,SAASnR,GAAGD,EAAEC,EAAEiR,OAAO7I,QAAQpI,EAAEoR,kBAAkBlR,MAAKA,KAAI8J,MAAK,SAAShK,GAAG,IAAIQ,EAAEb,EAAEmB,UAAUd,GAAG,OAAOQ,GAAG,gBAAgBA,EAAER,EAAEL,EAAEuE,YAAY,aAAalE,GAAG,WAAWQ,IAAId,EAAEM,EAAEH,EAAEsB,OAAOnB,GAAGE,IAAG,IAAKG,IAAIL,EAAE,SAASA,GAAG,OAAOC,EAAED,EAAEJ,EAAE0B,WAAW,IAAIC,WAAWvB,EAAEO,QAAQ,IAAIiB,MAAMxB,EAAEO,SAAzE,CAAmFP,KAAKA,GAAGF,EAAEmC,QAAQ6H,OAAO,IAAI3J,MAAM,2BAA2BJ,EAAE,oFAAmF,CAAC,WAAW,EAAE,aAAa,EAAE,gBAAgB,GAAG,YAAY,GAAG,qBAAqB,KAAK,GAAG,CAAC,SAASC,EAAEQ,EAAET,GAAG,aAAa,IAAIG,EAAEF,EAAE,sBAAsBK,EAAEL,EAAE,WAAWN,EAAEM,EAAE,eAAeL,EAAEK,EAAE,cAAcJ,GAAGI,EAAE,UAAUA,EAAE,cAAc,SAASH,EAAEG,GAAGP,KAAKoJ,MAAM,GAAGpJ,KAAK4R,YAAYrR,EAAEH,EAAEkC,UAAU,CAACuP,eAAe,SAAStR,GAAG,IAAIP,KAAK8R,OAAO5E,sBAAsB3M,GAAG,CAACP,KAAK8R,OAAOzE,OAAO,EAAE,IAAItM,EAAEf,KAAK8R,OAAOpE,WAAW,GAAG,MAAM,IAAIhN,MAAM,+CAA+CE,EAAEyQ,OAAOtQ,GAAG,cAAcH,EAAEyQ,OAAO9Q,GAAG,OAAOwR,YAAY,SAASxR,EAAEQ,GAAG,IAAIT,EAAEN,KAAK8R,OAAOzE,MAAMrN,KAAK8R,OAAOvE,SAAShN,GAAG,IAAIE,EAAET,KAAK8R,OAAOpE,WAAW,KAAK3M,EAAE,OAAOf,KAAK8R,OAAOvE,SAASjN,GAAGG,GAAGuR,sBAAsB,WAAWhS,KAAKiS,WAAWjS,KAAK8R,OAAOrE,QAAQ,GAAGzN,KAAKkS,wBAAwBlS,KAAK8R,OAAOrE,QAAQ,GAAGzN,KAAKmS,4BAA4BnS,KAAK8R,OAAOrE,QAAQ,GAAGzN,KAAKoS,kBAAkBpS,KAAK8R,OAAOrE,QAAQ,GAAGzN,KAAKqS,eAAerS,KAAK8R,OAAOrE,QAAQ,GAAGzN,KAAKsS,iBAAiBtS,KAAK8R,OAAOrE,QAAQ,GAAGzN,KAAKuS,iBAAiBvS,KAAK8R,OAAOrE,QAAQ,GAAG,IAAIlN,EAAEP,KAAK8R,OAAO3E,SAASnN,KAAKuS,kBAAkBxR,EAAEZ,EAAE0B,WAAW,aAAa,QAAQvB,EAAEM,EAAE6D,YAAY1D,EAAER,GAAGP,KAAKmH,WAAWnH,KAAK4R,YAAY3H,eAAe3J,IAAIkS,2BAA2B,WAAWxS,KAAKyS,sBAAsBzS,KAAK8R,OAAOrE,QAAQ,GAAGzN,KAAK8R,OAAOtE,KAAK,GAAGxN,KAAKiS,WAAWjS,KAAK8R,OAAOrE,QAAQ,GAAGzN,KAAKkS,wBAAwBlS,KAAK8R,OAAOrE,QAAQ,GAAGzN,KAAKmS,4BAA4BnS,KAAK8R,OAAOrE,QAAQ,GAAGzN,KAAKoS,kBAAkBpS,KAAK8R,OAAOrE,QAAQ,GAAGzN,KAAKqS,eAAerS,KAAK8R,OAAOrE,QAAQ,GAAGzN,KAAKsS,iBAAiBtS,KAAK8R,OAAOrE,QAAQ,GAAGzN,KAAK0S,oBAAoB,GAAG,IAAI,IAAInS,EAAEQ,EAAET,EAAEG,EAAET,KAAKyS,sBAAsB,GAAG,EAAEhS,GAAGF,EAAEP,KAAK8R,OAAOrE,QAAQ,GAAG1M,EAAEf,KAAK8R,OAAOrE,QAAQ,GAAGnN,EAAEN,KAAK8R,OAAO3E,SAASpM,GAAGf,KAAK0S,oBAAoBnS,GAAG,CAACoS,GAAGpS,EAAEO,OAAOC,EAAE6R,MAAMtS,IAAIuS,kCAAkC,WAAW,GAAG7S,KAAK8S,6BAA6B9S,KAAK8R,OAAOrE,QAAQ,GAAGzN,KAAK+S,mCAAmC/S,KAAK8R,OAAOrE,QAAQ,GAAGzN,KAAKgT,WAAWhT,KAAK8R,OAAOrE,QAAQ,GAAG,EAAEzN,KAAKgT,WAAW,MAAM,IAAItS,MAAM,wCAAwCuS,eAAe,WAAW,IAAI1S,EAAEQ,EAAE,IAAIR,EAAE,EAAEA,EAAEP,KAAKoJ,MAAMtI,OAAOP,IAAIQ,EAAEf,KAAKoJ,MAAM7I,GAAGP,KAAK8R,OAAOvE,SAASxM,EAAEmS,mBAAmBlT,KAAK6R,eAAe5R,EAAE8G,mBAAmBhG,EAAEoS,cAAcnT,KAAK8R,QAAQ/Q,EAAEqS,aAAarS,EAAEsS,qBAAqBC,eAAe,WAAW,IAAI/S,EAAE,IAAIP,KAAK8R,OAAOvE,SAASvN,KAAKsS,kBAAkBtS,KAAK8R,OAAO5E,sBAAsBjN,EAAEgH,uBAAuB1G,EAAE,IAAIL,EAAE,CAACqT,MAAMvT,KAAKuT,OAAOvT,KAAK4R,cAAc4B,gBAAgBxT,KAAK8R,QAAQ9R,KAAKoJ,MAAM7H,KAAKhB,GAAG,GAAGP,KAAKoS,oBAAoBpS,KAAKoJ,MAAMtI,QAAQ,IAAId,KAAKoS,mBAAmB,IAAIpS,KAAKoJ,MAAMtI,OAAO,MAAM,IAAIJ,MAAM,kCAAkCV,KAAKoS,kBAAkB,gCAAgCpS,KAAKoJ,MAAMtI,SAAS2S,iBAAiB,WAAW,IAAIlT,EAAEP,KAAK8R,OAAO7E,qBAAqBhN,EAAEkI,uBAAuB,GAAG5H,EAAE,EAAE,MAAMP,KAAK+R,YAAY,EAAE9R,EAAE8G,mBAAwK,IAAIrG,MAAM,sDAA/J,IAAIA,MAAM,2IAA2MV,KAAK8R,OAAOvE,SAAShN,GAAG,IAAIQ,EAAER,EAAE,GAAGP,KAAK6R,eAAe5R,EAAEkI,uBAAuBnI,KAAKgS,wBAAwBhS,KAAKiS,aAAarR,EAAEuQ,kBAAkBnR,KAAKkS,0BAA0BtR,EAAEuQ,kBAAkBnR,KAAKmS,8BAA8BvR,EAAEuQ,kBAAkBnR,KAAKoS,oBAAoBxR,EAAEuQ,kBAAkBnR,KAAKqS,iBAAiBzR,EAAEwQ,kBAAkBpR,KAAKsS,mBAAmB1R,EAAEwQ,iBAAiB,CAAC,GAAGpR,KAAKuT,OAAM,GAAIhT,EAAEP,KAAK8R,OAAO7E,qBAAqBhN,EAAE6N,kCAAkC,EAAE,MAAM,IAAIpN,MAAM,wEAAwE,GAAGV,KAAK8R,OAAOvE,SAAShN,GAAGP,KAAK6R,eAAe5R,EAAE6N,iCAAiC9N,KAAK6S,qCAAqC7S,KAAK+R,YAAY/R,KAAK+S,mCAAmC9S,EAAE8N,+BAA+B/N,KAAK+S,mCAAmC/S,KAAK8R,OAAO7E,qBAAqBhN,EAAE8N,6BAA6B/N,KAAK+S,mCAAmC,GAAG,MAAM,IAAIrS,MAAM,gEAAgEV,KAAK8R,OAAOvE,SAASvN,KAAK+S,oCAAoC/S,KAAK6R,eAAe5R,EAAE8N,6BAA6B/N,KAAKwS,6BAA6B,IAAIlS,EAAEN,KAAKsS,iBAAiBtS,KAAKqS,eAAerS,KAAKuT,QAAQjT,GAAG,GAAGA,GAAG,GAAGN,KAAKyS,uBAAuB,IAAIhS,EAAEM,EAAET,EAAE,GAAG,EAAEG,EAAET,KAAK+R,YAAYhR,EAAEd,EAAEgH,uBAAuBjH,KAAK8R,OAAO9E,KAAKvM,QAAQ,GAAGA,EAAE,EAAE,MAAM,IAAIC,MAAM,0BAA0B+N,KAAKiF,IAAIjT,GAAG,YAAYkT,cAAc,SAASpT,GAAGP,KAAK8R,OAAOrR,EAAEF,IAAIiK,KAAK,SAASjK,GAAGP,KAAK2T,cAAcpT,GAAGP,KAAKyT,mBAAmBzT,KAAKsT,iBAAiBtT,KAAKiT,mBAAmBlS,EAAEnB,QAAQQ,GAAG,CAAC,qBAAqB,GAAG,cAAc,GAAG,YAAY,GAAG,SAAS,GAAG,UAAU,GAAG,aAAa,KAAK,GAAG,CAAC,SAASG,EAAEQ,EAAET,GAAG,aAAa,IAAIG,EAAEF,EAAE,sBAAsBN,EAAEM,EAAE,WAAWK,EAAEL,EAAE,sBAAsBL,EAAEK,EAAE,WAAWJ,EAAEI,EAAE,UAAUH,EAAEG,EAAE,kBAAkBF,EAAEE,EAAE,aAAa,SAASC,EAAED,EAAEQ,GAAGf,KAAKiJ,QAAQ1I,EAAEP,KAAK4R,YAAY7Q,EAAEP,EAAE8B,UAAU,CAACsR,YAAY,WAAW,OAAO,IAAI,EAAE5T,KAAK6T,UAAUC,QAAQ,WAAW,OAAO,OAAO,KAAK9T,KAAK6T,UAAUV,cAAc,SAAS5S,GAAG,IAAIQ,EAAET,EAAE,GAAGC,EAAEiN,KAAK,IAAIxN,KAAK+T,eAAexT,EAAEkN,QAAQ,GAAGnN,EAAEC,EAAEkN,QAAQ,GAAGzN,KAAKgU,SAASzT,EAAE4M,SAASnN,KAAK+T,gBAAgBxT,EAAEiN,KAAKlN,IAAI,IAAIN,KAAKiC,iBAAiB,IAAIjC,KAAKkC,iBAAiB,MAAM,IAAIxB,MAAM,sIAAsI,GAAG,QAAQK,EAAE,SAASR,GAAG,IAAI,IAAIQ,KAAKX,EAAE,GAAGA,EAAE2O,eAAehO,IAAIX,EAAEW,GAAGqC,QAAQ7C,EAAE,OAAOH,EAAEW,GAAG,OAAO,KAArF,CAA2Ff,KAAKiU,oBAAoB,MAAM,IAAIvT,MAAM,+BAA+BT,EAAEoR,OAAOrR,KAAKiU,mBAAmB,0BAA0BhU,EAAEwE,YAAY,SAASzE,KAAKgU,UAAU,KAAKhU,KAAK6J,aAAa,IAAIjJ,EAAEZ,KAAKiC,eAAejC,KAAKkC,iBAAiBlC,KAAKmC,MAAMpB,EAAER,EAAE4M,SAASnN,KAAKiC,kBAAkBuR,gBAAgB,SAASjT,GAAGP,KAAKkU,cAAc3T,EAAEkN,QAAQ,GAAGlN,EAAEiN,KAAK,GAAGxN,KAAK6T,QAAQtT,EAAEkN,QAAQ,GAAGzN,KAAKiU,kBAAkB1T,EAAEmN,WAAW,GAAG1N,KAAK0D,KAAKnD,EAAEoN,WAAW3N,KAAKmC,MAAM5B,EAAEkN,QAAQ,GAAGzN,KAAKiC,eAAe1B,EAAEkN,QAAQ,GAAGzN,KAAKkC,iBAAiB3B,EAAEkN,QAAQ,GAAG,IAAI1M,EAAER,EAAEkN,QAAQ,GAAG,GAAGzN,KAAKmU,kBAAkB5T,EAAEkN,QAAQ,GAAGzN,KAAKoU,kBAAkB7T,EAAEkN,QAAQ,GAAGzN,KAAKqU,gBAAgB9T,EAAEkN,QAAQ,GAAGzN,KAAKsU,uBAAuB/T,EAAEkN,QAAQ,GAAGzN,KAAKuU,uBAAuBhU,EAAEkN,QAAQ,GAAGzN,KAAKkT,kBAAkB3S,EAAEkN,QAAQ,GAAGzN,KAAK4T,cAAc,MAAM,IAAIlT,MAAM,mCAAmCH,EAAEiN,KAAKzM,GAAGf,KAAKwU,gBAAgBjU,GAAGP,KAAKyU,qBAAqBlU,GAAGP,KAAK0U,YAAYnU,EAAE4M,SAASnN,KAAKoU,oBAAoBf,kBAAkB,WAAWrT,KAAK6D,gBAAgB,KAAK7D,KAAK8D,eAAe,KAAK,IAAIvD,EAAEP,KAAKkU,eAAe,EAAElU,KAAKwD,OAAO,GAAGxD,KAAKuU,wBAAwB,GAAGhU,IAAIP,KAAK8D,eAAe,GAAG9D,KAAKuU,wBAAwB,GAAGhU,IAAIP,KAAK6D,gBAAgB7D,KAAKuU,wBAAwB,GAAG,OAAOvU,KAAKwD,KAAK,MAAMxD,KAAK0K,YAAYmB,OAAO,KAAK7L,KAAKwD,KAAI,IAAKiR,qBAAqB,SAASlU,GAAG,GAAGP,KAAK2U,YAAY,GAAG,CAAC,IAAI5T,EAAEN,EAAET,KAAK2U,YAAY,GAAG/B,OAAO5S,KAAKkC,mBAAmBjC,EAAEmR,mBAAmBpR,KAAKkC,iBAAiBnB,EAAE0M,QAAQ,IAAIzN,KAAKiC,iBAAiBhC,EAAEmR,mBAAmBpR,KAAKiC,eAAelB,EAAE0M,QAAQ,IAAIzN,KAAKkT,oBAAoBjT,EAAEmR,mBAAmBpR,KAAKkT,kBAAkBnS,EAAE0M,QAAQ,IAAIzN,KAAKqU,kBAAkBpU,EAAEmR,mBAAmBpR,KAAKqU,gBAAgBtT,EAAE0M,QAAQ,MAAM+G,gBAAgB,SAASjU,GAAG,IAAIQ,EAAET,EAAEG,EAAEG,EAAEL,EAAE8M,MAAMrN,KAAKmU,kBAAkB,IAAInU,KAAK2U,cAAc3U,KAAK2U,YAAY,IAAIpU,EAAE8M,MAAM,EAAEzM,GAAGG,EAAER,EAAEkN,QAAQ,GAAGnN,EAAEC,EAAEkN,QAAQ,GAAGhN,EAAEF,EAAE4M,SAAS7M,GAAGN,KAAK2U,YAAY5T,GAAG,CAAC4R,GAAG5R,EAAED,OAAOR,EAAEsS,MAAMnS,GAAGF,EAAEgN,SAAS3M,IAAIwS,WAAW,WAAW,IAAI7S,EAAEF,EAAEwB,WAAW,aAAa,QAAQ,GAAG7B,KAAK8T,UAAU9T,KAAK0K,YAAYvK,EAAE+J,WAAWlK,KAAKgU,UAAUhU,KAAK2K,eAAexK,EAAE+J,WAAWlK,KAAK0U,iBAAiB,CAAC,IAAI3T,EAAEf,KAAK4U,4BAA4B,GAAG,OAAO7T,EAAEf,KAAK0K,YAAY3J,MAAM,CAAC,IAAIT,EAAEL,EAAEwE,YAAYlE,EAAEP,KAAKgU,UAAUhU,KAAK0K,YAAY1K,KAAK4R,YAAY3H,eAAe3J,GAAG,IAAIG,EAAET,KAAK6U,+BAA+B,GAAG,OAAOpU,EAAET,KAAK2K,eAAelK,MAAM,CAAC,IAAIG,EAAEX,EAAEwE,YAAYlE,EAAEP,KAAK0U,aAAa1U,KAAK2K,eAAe3K,KAAK4R,YAAY3H,eAAerJ,MAAMgU,0BAA0B,WAAW,IAAIrU,EAAEP,KAAK2U,YAAY,OAAO,GAAGpU,EAAE,CAAC,IAAIQ,EAAEN,EAAEF,EAAEqS,OAAO,OAAO,IAAI7R,EAAE0M,QAAQ,IAAQvN,EAAEF,KAAKgU,YAAYjT,EAAE0M,QAAQ,GAAlC,KAA0CtN,EAAE+J,WAAWnJ,EAAEoM,SAAS5M,EAAEO,OAAO,IAAI,OAAO,MAAM+T,6BAA6B,WAAW,IAAItU,EAAEP,KAAK2U,YAAY,OAAO,GAAGpU,EAAE,CAAC,IAAIQ,EAAEN,EAAEF,EAAEqS,OAAO,OAAO,IAAI7R,EAAE0M,QAAQ,IAAQvN,EAAEF,KAAK0U,eAAe3T,EAAE0M,QAAQ,GAArC,KAA6CtN,EAAE+J,WAAWnJ,EAAEoM,SAAS5M,EAAEO,OAAO,IAAI,OAAO,OAAOC,EAAEnB,QAAQY,GAAG,CAAC,qBAAqB,EAAE,iBAAiB,EAAE,UAAU,EAAE,qBAAqB,GAAG,YAAY,GAAG,SAAS,GAAG,UAAU,KAAK,GAAG,CAAC,SAASD,EAAEQ,EAAET,GAAG,aAAa,SAASG,EAAEF,EAAEQ,EAAET,GAAGN,KAAKwF,KAAKjF,EAAEP,KAAKwD,IAAIlD,EAAEkD,IAAIxD,KAAK0D,KAAKpD,EAAEoD,KAAK1D,KAAK4D,QAAQtD,EAAEsD,QAAQ5D,KAAK6D,gBAAgBvD,EAAEuD,gBAAgB7D,KAAK8D,eAAexD,EAAEwD,eAAe9D,KAAK8U,MAAM/T,EAAEf,KAAK+U,YAAYzU,EAAEiD,OAAOvD,KAAKiJ,QAAQ,CAAC7G,YAAY9B,EAAE8B,YAAYuB,mBAAmBrD,EAAEqD,oBAAoB,IAAI1D,EAAEM,EAAE,yBAAyBK,EAAEL,EAAE,uBAAuBL,EAAEK,EAAE,UAAUJ,EAAEI,EAAE,sBAAsBH,EAAEG,EAAE,0BAA0BE,EAAE6B,UAAU,CAAC0S,eAAe,SAASzU,GAAG,IAAIQ,EAAE,KAAKT,EAAE,SAAS,IAAI,IAAIC,EAAE,MAAM,IAAIG,MAAM,6BAA6B,IAAID,EAAE,YAAYH,EAAEC,EAAEkM,gBAAgB,SAASnM,EAAE,iBAAiBA,GAAG,SAASA,IAAIA,EAAE,UAAUS,EAAEf,KAAKiV,oBAAoB,IAAIrU,GAAGZ,KAAK+U,YAAYnU,IAAIH,IAAIM,EAAEA,EAAE2B,KAAK,IAAIxC,EAAE0Q,oBAAoBhQ,GAAGH,IAAIM,EAAEA,EAAE2B,KAAK,IAAIxC,EAAEyQ,mBAAmB,MAAMpQ,IAAIQ,EAAE,IAAIX,EAAE,UAAUuI,MAAMpI,GAAG,OAAO,IAAIN,EAAEc,EAAET,EAAE,KAAK4U,MAAM,SAAS3U,EAAEQ,GAAG,OAAOf,KAAKgV,eAAezU,GAAGgH,WAAWxG,IAAIoU,WAAW,SAAS5U,EAAEQ,GAAG,OAAOf,KAAKgV,eAAezU,GAAG,cAAcsM,eAAe9L,IAAImI,gBAAgB,SAAS3I,EAAEQ,GAAG,GAAGf,KAAK8U,iBAAiB3U,GAAGH,KAAK8U,MAAM1S,YAAYgB,QAAQ7C,EAAE6C,MAAM,OAAOpD,KAAK8U,MAAM/R,sBAAsB,IAAIzC,EAAEN,KAAKiV,oBAAoB,OAAOjV,KAAK+U,cAAczU,EAAEA,EAAEoC,KAAK,IAAIxC,EAAE0Q,mBAAmBzQ,EAAE8C,iBAAiB3C,EAAEC,EAAEQ,IAAIkU,kBAAkB,WAAW,OAAOjV,KAAK8U,iBAAiB3U,EAAEH,KAAK8U,MAAMvS,mBAAmBvC,KAAK8U,iBAAiB1U,EAAEJ,KAAK8U,MAAM,IAAIlU,EAAEZ,KAAK8U,SAAS,IAAI,IAAIzU,EAAE,CAAC,SAAS,WAAW,eAAe,eAAe,iBAAiBG,EAAE,WAAW,MAAM,IAAIE,MAAM,+EAA+EU,EAAE,EAAEA,EAAEf,EAAES,OAAOM,IAAIX,EAAE6B,UAAUjC,EAAEe,IAAIZ,EAAEO,EAAEnB,QAAQa,GAAG,CAAC,qBAAqB,EAAE,sBAAsB,GAAG,yBAAyB,GAAG,wBAAwB,GAAG,SAAS,KAAK,GAAG,CAAC,SAASF,EAAEC,EAAEO,IAAG,SAAUA,GAAG,aAAa,IAAIT,EAAEG,EAAEF,EAAEQ,EAAEqU,kBAAkBrU,EAAEsU,uBAAuB,GAAG9U,EAAE,CAAC,IAAIK,EAAE,EAAEX,EAAE,IAAIM,EAAEF,GAAGH,EAAEa,EAAEuU,SAASC,eAAe,IAAItV,EAAEuV,QAAQtV,EAAE,CAACuV,eAAc,IAAKnV,EAAE,WAAWJ,EAAEwE,KAAK9D,IAAIA,EAAE,QAAQ,GAAGG,EAAE2U,mBAAc,IAAS3U,EAAE4U,eAAerV,EAAE,aAAaS,GAAG,uBAAuBA,EAAEuU,SAASM,cAAc,UAAU,WAAW,IAAIrV,EAAEQ,EAAEuU,SAASM,cAAc,UAAUrV,EAAEsV,mBAAmB,WAAWxV,IAAIE,EAAEsV,mBAAmB,KAAKtV,EAAEuV,WAAWC,YAAYxV,GAAGA,EAAE,MAAMQ,EAAEuU,SAASU,gBAAgBC,YAAY1V,IAAI,WAAW2V,WAAW7V,EAAE,QAAQ,CAAC,IAAIF,EAAE,IAAIY,EAAE4U,eAAexV,EAAEgW,MAAMC,UAAU/V,EAAEC,EAAE,WAAWH,EAAEkW,MAAMC,YAAY,IAAI,IAAIlW,EAAE,GAAG,SAASC,IAAI,IAAIE,EAAEQ,EAAEN,GAAE,EAAG,IAAI,IAAIH,EAAEF,EAAEU,OAAOR,GAAG,CAAC,IAAIS,EAAEX,EAAEA,EAAE,GAAGG,GAAG,IAAIA,EAAED,GAAGS,EAAER,KAAKD,EAAEF,EAAEU,OAAOL,GAAE,EAAGD,EAAEZ,QAAQ,SAASW,GAAG,IAAIH,EAAEmB,KAAKhB,IAAIE,GAAGH,OAAOO,KAAKb,UAAK,IAAoB,EAAA2F,EAAO,EAAAA,EAAO,oBAAoBuK,KAAKA,KAAK,oBAAoBqG,OAAOA,OAAO,KAAK,IAAI,GAAG,CAAC,SAAShW,EAAEQ,EAAET,GAAG,aAAa,IAAIM,EAAEL,EAAE,aAAa,SAASF,KAAK,IAAIG,EAAE,GAAGP,EAAE,CAAC,YAAYC,EAAE,CAAC,aAAaO,EAAE,CAAC,WAAW,SAASN,EAAEI,GAAG,GAAG,mBAAmBA,EAAE,MAAM,IAAIiW,UAAU,+BAA+BxW,KAAKyW,MAAMhW,EAAET,KAAK0W,MAAM,GAAG1W,KAAK2W,aAAQ,EAAOpW,IAAIF,GAAGW,EAAEhB,KAAKO,GAAG,SAASH,EAAEG,EAAEQ,EAAET,GAAGN,KAAK4W,QAAQrW,EAAE,mBAAmBQ,IAAIf,KAAK6W,YAAY9V,EAAEf,KAAK8W,cAAc9W,KAAK+W,oBAAoB,mBAAmBzW,IAAIN,KAAKgX,WAAW1W,EAAEN,KAAKiX,aAAajX,KAAKkX,mBAAmB,SAAS9V,EAAEL,EAAET,EAAEG,GAAGG,GAAE,WAAW,IAAIL,EAAE,IAAIA,EAAED,EAAEG,GAAG,MAAMF,GAAG,OAAOC,EAAE6J,OAAOtJ,EAAER,GAAGA,IAAIQ,EAAEP,EAAE6J,OAAOtJ,EAAE,IAAIyV,UAAU,uCAAuChW,EAAEiC,QAAQ1B,EAAER,MAAK,SAASU,EAAEV,GAAG,IAAIQ,EAAER,GAAGA,EAAEgK,KAAK,GAAGhK,IAAI,iBAAiBA,GAAG,mBAAmBA,IAAI,mBAAmBQ,EAAE,OAAO,WAAWA,EAAEwO,MAAMhP,EAAE4I,YAAY,SAASnI,EAAED,EAAER,GAAG,IAAID,GAAE,EAAG,SAASG,EAAEF,GAAGD,IAAIA,GAAE,EAAGE,EAAE6J,OAAOtJ,EAAER,IAAI,SAASK,EAAEL,GAAGD,IAAIA,GAAE,EAAGE,EAAEiC,QAAQ1B,EAAER,IAAI,IAAIN,EAAEiB,GAAE,WAAWX,EAAEK,EAAEH,MAAK,UAAUR,EAAEkX,QAAQ1W,EAAER,EAAE2S,OAAO,SAAS1R,EAAEX,EAAEQ,GAAG,IAAIT,EAAE,GAAG,IAAIA,EAAEsS,MAAMrS,EAAEQ,GAAGT,EAAE6W,OAAO,UAAU,MAAM5W,GAAGD,EAAE6W,OAAO,QAAQ7W,EAAEsS,MAAMrS,EAAE,OAAOD,GAAGS,EAAEnB,QAAQO,GAAGmC,UAAU8U,QAAQ,SAASrW,GAAG,GAAG,mBAAmBA,EAAE,OAAOf,KAAK,IAAIM,EAAEN,KAAKqX,YAAY,OAAOrX,KAAKuK,MAAK,SAAShK,GAAG,OAAOD,EAAEmC,QAAQ1B,KAAKwJ,MAAK,WAAW,OAAOhK,QAAK,SAASA,GAAG,OAAOD,EAAEmC,QAAQ1B,KAAKwJ,MAAK,WAAW,MAAMhK,SAAOJ,EAAEmC,UAAUgV,MAAM,SAAS/W,GAAG,OAAOP,KAAKuK,KAAK,KAAKhK,IAAIJ,EAAEmC,UAAUiI,KAAK,SAAShK,EAAEQ,GAAG,GAAG,mBAAmBR,GAAGP,KAAKyW,QAAQvW,GAAG,mBAAmBa,GAAGf,KAAKyW,QAAQxW,EAAE,OAAOD,KAAK,IAAIM,EAAE,IAAIN,KAAKqX,YAAYhX,GAAqF,OAAlFL,KAAKyW,QAAQhW,EAAEW,EAAEd,EAAEN,KAAKyW,QAAQvW,EAAEK,EAAEQ,EAAEf,KAAK2W,SAAS3W,KAAK0W,MAAMnV,KAAK,IAAInB,EAAEE,EAAEC,EAAEQ,IAAWT,GAAGF,EAAEkC,UAAUwU,cAAc,SAASvW,GAAGC,EAAEiC,QAAQzC,KAAK4W,QAAQrW,IAAIH,EAAEkC,UAAUyU,mBAAmB,SAASxW,GAAGa,EAAEpB,KAAK4W,QAAQ5W,KAAK6W,YAAYtW,IAAIH,EAAEkC,UAAU2U,aAAa,SAAS1W,GAAGC,EAAE6J,OAAOrK,KAAK4W,QAAQrW,IAAIH,EAAEkC,UAAU4U,kBAAkB,SAAS3W,GAAGa,EAAEpB,KAAK4W,QAAQ5W,KAAKgX,WAAWzW,IAAIC,EAAEiC,QAAQ,SAASlC,EAAEQ,GAAG,IAAIT,EAAEY,EAAED,EAAEF,GAAG,GAAG,UAAUT,EAAE6W,OAAO,OAAO3W,EAAE6J,OAAO9J,EAAED,EAAEsS,OAAO,IAAInS,EAAEH,EAAEsS,MAAM,GAAGnS,EAAEO,EAAET,EAAEE,OAAO,CAACF,EAAEkW,MAAMvW,EAAEK,EAAEoW,QAAQ5V,EAAE,IAAI,IAAIH,GAAG,EAAEX,EAAEM,EAAEmW,MAAM5V,SAASF,EAAEX,GAAGM,EAAEmW,MAAM9V,GAAGkW,cAAc/V,GAAG,OAAOR,GAAGC,EAAE6J,OAAO,SAAS9J,EAAEQ,GAAGR,EAAEkW,MAAMxW,EAAEM,EAAEoW,QAAQ5V,EAAE,IAAI,IAAIT,GAAG,EAAEG,EAAEF,EAAEmW,MAAM5V,SAASR,EAAEG,GAAGF,EAAEmW,MAAMpW,GAAG2W,aAAalW,GAAG,OAAOR,GAAGJ,EAAEsC,QAAQ,SAASlC,GAAG,OAAGA,aAAaP,KAAYO,EAASC,EAAEiC,QAAQ,IAAIzC,KAAKK,GAAGE,IAAIJ,EAAEkK,OAAO,SAAS9J,GAAG,IAAIQ,EAAE,IAAIf,KAAKK,GAAG,OAAOG,EAAE6J,OAAOtJ,EAAER,IAAIJ,EAAEsK,IAAI,SAASlK,GAAG,IAAID,EAAEN,KAAK,GAAG,mBAAmBqJ,OAAO/G,UAAU0J,SAASnL,KAAKN,GAAG,OAAOP,KAAKqK,OAAO,IAAImM,UAAU,qBAAqB,IAAI/V,EAAEF,EAAEO,OAAOF,GAAE,EAAG,IAAIH,EAAE,OAAOT,KAAKyC,QAAQ,IAA8C,IAA1C,IAAIxC,EAAE,IAAI8B,MAAMtB,GAAGP,EAAE,EAAEa,GAAG,EAAEZ,EAAE,IAAIH,KAAKK,KAAUU,EAAEN,GAAGL,EAAEG,EAAEQ,GAAGA,GAAG,OAAOZ,EAAE,SAASC,EAAEG,EAAEQ,GAAGT,EAAEmC,QAAQlC,GAAGgK,MAAK,SAAShK,GAAGN,EAAEc,GAAGR,IAAIL,IAAIO,GAAGG,IAAIA,GAAE,EAAGJ,EAAEiC,QAAQtC,EAAEF,OAAK,SAASM,GAAGK,IAAIA,GAAE,EAAGJ,EAAE6J,OAAOlK,EAAEI,SAAQJ,EAAEoX,KAAK,SAAShX,GAAc,GAAG,mBAAmB8I,OAAO/G,UAAU0J,SAASnL,KAAKN,GAAG,OAAOP,KAAKqK,OAAO,IAAImM,UAAU,qBAAqB,IAAIlW,EAAEC,EAAEO,OAAOL,GAAE,EAAG,IAAIH,EAAE,OAAON,KAAKyC,QAAQ,IAA2B,IAAvB,IAA4IvC,EAAxIU,GAAG,EAAEX,EAAE,IAAID,KAAKK,KAAUO,EAAEN,GAAGJ,EAAEK,EAAEK,GAA5MZ,KAAiNyC,QAAQvC,GAAGqK,MAAK,SAAShK,GAAGE,IAAIA,GAAE,EAAGD,EAAEiC,QAAQxC,EAAEM,OAAK,SAASA,GAAGE,IAAIA,GAAE,EAAGD,EAAE6J,OAAOpK,EAAEM,OAAY,OAAON,IAAI,CAACuX,UAAU,KAAK,GAAG,CAAC,SAASjX,EAAEQ,EAAET,GAAG,aAAa,IAAIG,EAAE,IAAG,EAAGF,EAAE,sBAAsBkX,QAAQhX,EAAEF,EAAE,iBAAiBA,EAAE,iBAAiBA,EAAE,yBAAyBQ,EAAEnB,QAAQa,GAAG,CAAC,gBAAgB,GAAG,gBAAgB,GAAG,qBAAqB,GAAG,uBAAuB,KAAK,GAAG,CAAC,SAASF,EAAEQ,EAAET,GAAG,aAAa,IAAIJ,EAAEK,EAAE,kBAAkBJ,EAAEI,EAAE,kBAAkBH,EAAEG,EAAE,mBAAmBK,EAAEL,EAAE,mBAAmBN,EAAEM,EAAE,kBAAkBF,EAAEgJ,OAAO/G,UAAU0J,SAA0B,SAAS9K,EAAEX,GAAG,KAAKP,gBAAgBkB,GAAG,OAAO,IAAIA,EAAEX,GAAGP,KAAKiJ,QAAQ9I,EAAEsX,OAAO,CAAC3S,OAAxF,EAAgG4S,OAAvF,EAAgGC,UAAU,MAAMC,WAAW,GAAGC,SAAS,EAAEC,SAA7I,EAAwJC,GAAG,IAAIxX,GAAG,IAAI,IAAIQ,EAAEf,KAAKiJ,QAAQlI,EAAE8D,KAAK,EAAE9D,EAAE6W,WAAW7W,EAAE6W,YAAY7W,EAAE6W,WAAW7W,EAAEiX,MAAM,EAAEjX,EAAE6W,YAAY7W,EAAE6W,WAAW,KAAK7W,EAAE6W,YAAY,IAAI5X,KAAKiY,IAAI,EAAEjY,KAAKkY,IAAI,GAAGlY,KAAKmY,OAAM,EAAGnY,KAAKoY,OAAO,GAAGpY,KAAKqY,KAAK,IAAIpY,EAAED,KAAKqY,KAAKC,UAAU,EAAE,IAAIhY,EAAEJ,EAAEqY,aAAavY,KAAKqY,KAAKtX,EAAE+D,MAAM/D,EAAE2W,OAAO3W,EAAE6W,WAAW7W,EAAE8W,SAAS9W,EAAE+W,UAAU,GAA7d,IAAgexX,EAAM,MAAM,IAAII,MAAME,EAAEN,IAAI,GAAGS,EAAEyX,QAAQtY,EAAEuY,iBAAiBzY,KAAKqY,KAAKtX,EAAEyX,QAAQzX,EAAE2X,WAAW,CAAC,IAAIjY,EAAE,GAAGA,EAAE,iBAAiBM,EAAE2X,WAAWtY,EAAEuY,WAAW5X,EAAE2X,YAAY,yBAAyBrY,EAAEQ,KAAKE,EAAE2X,YAAY,IAAI5W,WAAWf,EAAE2X,YAAY3X,EAAE2X,WAA/sB,KAA2tBpY,EAAEJ,EAAE0Y,qBAAqB5Y,KAAKqY,KAAK5X,IAAQ,MAAM,IAAIC,MAAME,EAAEN,IAAIN,KAAK6Y,WAAU,GAAI,SAASpY,EAAEF,EAAEQ,GAAG,IAAIT,EAAE,IAAIY,EAAEH,GAAG,GAAGT,EAAEiB,KAAKhB,GAAE,GAAID,EAAE2X,IAAI,MAAM3X,EAAE4X,KAAKtX,EAAEN,EAAE2X,KAAK,OAAO3X,EAAEmR,OAAOvQ,EAAEoB,UAAUf,KAAK,SAAShB,EAAEQ,GAAG,IAAIT,EAAEG,EAAEG,EAAEZ,KAAKqY,KAAKpY,EAAED,KAAKiJ,QAAQ0O,UAAU,GAAG3X,KAAKmY,MAAM,OAAM,EAAG1X,EAAEM,MAAMA,EAAEA,GAAE,IAAKA,EAAE,EAAE,EAAE,iBAAiBR,EAAEK,EAAEkY,MAAM1Y,EAAEuY,WAAWpY,GAAG,yBAAyBF,EAAEQ,KAAKN,GAAGK,EAAEkY,MAAM,IAAIhX,WAAWvB,GAAGK,EAAEkY,MAAMvY,EAAEK,EAAEmY,QAAQ,EAAEnY,EAAEoY,SAASpY,EAAEkY,MAAMhY,OAAO,EAAE,CAAC,GAAG,IAAIF,EAAE0X,YAAY1X,EAAEqY,OAAO,IAAI9Y,EAAE+Y,KAAKjZ,GAAGW,EAAEuY,SAAS,EAAEvY,EAAE0X,UAAUrY,GAAG,KAAKK,EAAEJ,EAAEkZ,QAAQxY,EAAEH,KAA1vC,IAA+vCH,EAAM,OAAON,KAAKqZ,MAAM/Y,KAAKN,KAAKmY,OAAM,GAAI,IAAIvX,EAAE0X,YAAY,IAAI1X,EAAEoY,UAAU,IAAIvY,GAAG,IAAIA,KAAK,WAAWT,KAAKiJ,QAAQ8O,GAAG/X,KAAK+E,OAAO3E,EAAEkZ,cAAcnZ,EAAEoZ,UAAU3Y,EAAEqY,OAAOrY,EAAEuY,YAAYnZ,KAAK+E,OAAO5E,EAAEoZ,UAAU3Y,EAAEqY,OAAOrY,EAAEuY,mBAAmB,EAAEvY,EAAEoY,UAAU,IAAIpY,EAAE0X,YAAY,IAAIhY,GAAG,OAAO,IAAIG,GAAGH,EAAEJ,EAAEsZ,WAAWxZ,KAAKqY,MAAMrY,KAAKqZ,MAAM/Y,GAAGN,KAAKmY,OAAM,EAArlD,IAAwlD7X,GAAO,IAAIG,IAAIT,KAAKqZ,MAA5mD,KAAunDzY,EAAE0X,UAAU,KAAKpX,EAAEoB,UAAUyC,OAAO,SAASxE,GAAGP,KAAKoY,OAAO7W,KAAKhB,IAAIW,EAAEoB,UAAU+W,MAAM,SAAS9Y,GAAvtD,IAA0tDA,IAAQ,WAAWP,KAAKiJ,QAAQ8O,GAAG/X,KAAKyR,OAAOzR,KAAKoY,OAAO3W,KAAK,IAAIzB,KAAKyR,OAAOtR,EAAEsZ,cAAczZ,KAAKoY,SAASpY,KAAKoY,OAAO,GAAGpY,KAAKiY,IAAI1X,EAAEP,KAAKkY,IAAIlY,KAAKqY,KAAKH,KAAK5X,EAAEoZ,QAAQxY,EAAEZ,EAAE8Y,QAAQ3Y,EAAEH,EAAEqZ,WAAW,SAASpZ,EAAEQ,GAAG,OAAOA,EAAEA,GAAG,IAAI8D,KAAI,EAAGpE,EAAEF,EAAEQ,IAAIT,EAAE0X,KAAK,SAASzX,EAAEQ,GAAG,OAAOA,EAAEA,GAAG,IAAIiX,MAAK,EAAGvX,EAAEF,EAAEQ,KAAK,CAAC,iBAAiB,GAAG,kBAAkB,GAAG,iBAAiB,GAAG,kBAAkB,GAAG,iBAAiB,KAAK,GAAG,CAAC,SAASR,EAAEQ,EAAET,GAAG,aAAa,IAAIW,EAAEV,EAAE,kBAAkBS,EAAET,EAAE,kBAAkBW,EAAEX,EAAE,mBAAmBkF,EAAElF,EAAE,oBAAoBE,EAAEF,EAAE,mBAAmBK,EAAEL,EAAE,kBAAkBN,EAAEM,EAAE,mBAAmBmF,EAAE2D,OAAO/G,UAAU0J,SAAS,SAAS9L,EAAEK,GAAG,KAAKP,gBAAgBE,GAAG,OAAO,IAAIA,EAAEK,GAAGP,KAAKiJ,QAAQjI,EAAEyW,OAAO,CAACE,UAAU,MAAMC,WAAW,EAAEG,GAAG,IAAIxX,GAAG,IAAI,IAAIQ,EAAEf,KAAKiJ,QAAQlI,EAAE8D,KAAK,GAAG9D,EAAE6W,YAAY7W,EAAE6W,WAAW,KAAK7W,EAAE6W,YAAY7W,EAAE6W,WAAW,IAAI7W,EAAE6W,aAAa7W,EAAE6W,YAAY,OAAO,GAAG7W,EAAE6W,YAAY7W,EAAE6W,WAAW,KAAKrX,GAAGA,EAAEqX,aAAa7W,EAAE6W,YAAY,IAAI,GAAG7W,EAAE6W,YAAY7W,EAAE6W,WAAW,IAAI,IAAI,GAAG7W,EAAE6W,cAAc7W,EAAE6W,YAAY,IAAI5X,KAAKiY,IAAI,EAAEjY,KAAKkY,IAAI,GAAGlY,KAAKmY,OAAM,EAAGnY,KAAKoY,OAAO,GAAGpY,KAAKqY,KAAK,IAAIzX,EAAEZ,KAAKqY,KAAKC,UAAU,EAAE,IAAIhY,EAAEW,EAAE2Y,aAAa5Z,KAAKqY,KAAKtX,EAAE6W,YAAY,GAAGtX,IAAImF,EAAEoU,KAAK,MAAM,IAAInZ,MAAMD,EAAEH,IAAIN,KAAKwY,OAAO,IAAIvY,EAAEgB,EAAE6Y,iBAAiB9Z,KAAKqY,KAAKrY,KAAKwY,QAAQ,SAASrY,EAAEI,EAAEQ,GAAG,IAAIT,EAAE,IAAIJ,EAAEa,GAAG,GAAGT,EAAEiB,KAAKhB,GAAE,GAAID,EAAE2X,IAAI,MAAM3X,EAAE4X,KAAKzX,EAAEH,EAAE2X,KAAK,OAAO3X,EAAEmR,OAAOvR,EAAEoC,UAAUf,KAAK,SAAShB,EAAEQ,GAAG,IAAIT,EAAEG,EAAEG,EAAEX,EAAEC,EAAEC,EAAEC,EAAEJ,KAAKqY,KAAKhY,EAAEL,KAAKiJ,QAAQ0O,UAAUnX,EAAER,KAAKiJ,QAAQyP,WAAWtX,GAAE,EAAG,GAAGpB,KAAKmY,MAAM,OAAM,EAAG1X,EAAEM,MAAMA,EAAEA,GAAE,IAAKA,EAAE0E,EAAEsU,SAAStU,EAAEuU,WAAW,iBAAiBzZ,EAAEH,EAAE0Y,MAAM5X,EAAE+Y,cAAc1Z,GAAG,yBAAyBmF,EAAE7E,KAAKN,GAAGH,EAAE0Y,MAAM,IAAIhX,WAAWvB,GAAGH,EAAE0Y,MAAMvY,EAAEH,EAAE2Y,QAAQ,EAAE3Y,EAAE4Y,SAAS5Y,EAAE0Y,MAAMhY,OAAO,EAAE,CAAC,GAAG,IAAIV,EAAEkY,YAAYlY,EAAE6Y,OAAO,IAAIjY,EAAEkY,KAAK7Y,GAAGD,EAAE+Y,SAAS,EAAE/Y,EAAEkY,UAAUjY,IAAIC,EAAEW,EAAEiZ,QAAQ9Z,EAAEqF,EAAEuU,eAAevU,EAAE0U,aAAa3Z,IAAIL,EAAE,iBAAiBK,EAAEU,EAAEyX,WAAWnY,GAAG,yBAAyBkF,EAAE7E,KAAKL,GAAG,IAAIsB,WAAWtB,GAAGA,EAAEF,EAAEW,EAAEmZ,qBAAqBpa,KAAKqY,KAAKlY,IAAIG,IAAImF,EAAE4U,cAAa,IAAKjZ,IAAId,EAAEmF,EAAEoU,KAAKzY,GAAE,GAAId,IAAImF,EAAE6U,cAAcha,IAAImF,EAAEoU,KAAK,OAAO7Z,KAAKqZ,MAAM/Y,KAAKN,KAAKmY,OAAM,GAAI/X,EAAE+Y,WAAW,IAAI/Y,EAAEkY,WAAWhY,IAAImF,EAAE6U,eAAe,IAAIla,EAAE4Y,UAAUvY,IAAIgF,EAAEsU,UAAUtZ,IAAIgF,EAAE8U,gBAAgB,WAAWva,KAAKiJ,QAAQ8O,IAAInX,EAAEM,EAAEsZ,WAAWpa,EAAE6Y,OAAO7Y,EAAE+Y,UAAUlZ,EAAEG,EAAE+Y,SAASvY,EAAEV,EAAEgB,EAAEuZ,WAAWra,EAAE6Y,OAAOrY,GAAGR,EAAE+Y,SAASlZ,EAAEG,EAAEkY,UAAUjY,EAAEJ,EAAEA,GAAGe,EAAE0Z,SAASta,EAAE6Y,OAAO7Y,EAAE6Y,OAAOrY,EAAEX,EAAE,GAAGD,KAAK+E,OAAO7E,IAAIF,KAAK+E,OAAO/D,EAAEuY,UAAUnZ,EAAE6Y,OAAO7Y,EAAE+Y,aAAa,IAAI/Y,EAAE4Y,UAAU,IAAI5Y,EAAEkY,YAAYlX,GAAE,UAAW,EAAEhB,EAAE4Y,UAAU,IAAI5Y,EAAEkY,YAAYhY,IAAImF,EAAE6U,cAAc,OAAOha,IAAImF,EAAE6U,eAAe7Z,EAAEgF,EAAEsU,UAAUtZ,IAAIgF,EAAEsU,UAAUzZ,EAAEW,EAAE0Z,WAAW3a,KAAKqY,MAAMrY,KAAKqZ,MAAM/Y,GAAGN,KAAKmY,OAAM,EAAG7X,IAAImF,EAAEoU,MAAMpZ,IAAIgF,EAAE8U,eAAeva,KAAKqZ,MAAM5T,EAAEoU,QAAQzZ,EAAEkY,UAAU,KAAKpY,EAAEoC,UAAUyC,OAAO,SAASxE,GAAGP,KAAKoY,OAAO7W,KAAKhB,IAAIL,EAAEoC,UAAU+W,MAAM,SAAS9Y,GAAGA,IAAIkF,EAAEoU,OAAO,WAAW7Z,KAAKiJ,QAAQ8O,GAAG/X,KAAKyR,OAAOzR,KAAKoY,OAAO3W,KAAK,IAAIzB,KAAKyR,OAAOzQ,EAAEyY,cAAczZ,KAAKoY,SAASpY,KAAKoY,OAAO,GAAGpY,KAAKiY,IAAI1X,EAAEP,KAAKkY,IAAIlY,KAAKqY,KAAKH,KAAK5X,EAAEsa,QAAQ1a,EAAEI,EAAE4Z,QAAQ/Z,EAAEG,EAAEua,WAAW,SAASta,EAAEQ,GAAG,OAAOA,EAAEA,GAAG,IAAI8D,KAAI,EAAG1E,EAAEI,EAAEQ,IAAIT,EAAEwa,OAAO3a,GAAG,CAAC,iBAAiB,GAAG,kBAAkB,GAAG,mBAAmB,GAAG,kBAAkB,GAAG,iBAAiB,GAAG,kBAAkB,GAAG,iBAAiB,KAAK,GAAG,CAAC,SAASI,EAAEQ,EAAET,GAAG,aAAa,IAAIG,EAAE,oBAAoBqB,YAAY,oBAAoBkC,aAAa,oBAAoB+W,WAAWza,EAAEmX,OAAO,SAASlX,GAAG,IAAI,IAAIQ,EAAEgB,MAAMO,UAAUuJ,MAAMhL,KAAKsI,UAAU,GAAGpI,EAAED,QAAQ,CAAC,IAAIR,EAAES,EAAEmH,QAAQ,GAAG5H,EAAE,CAAC,GAAG,iBAAiBA,EAAE,MAAM,IAAIkW,UAAUlW,EAAE,sBAAsB,IAAI,IAAIG,KAAKH,EAAEA,EAAEyO,eAAetO,KAAKF,EAAEE,GAAGH,EAAEG,KAAK,OAAOF,GAAGD,EAAEiZ,UAAU,SAAShZ,EAAEQ,GAAG,OAAOR,EAAEO,SAASC,EAAER,EAAEA,EAAEsN,SAAStN,EAAEsN,SAAS,EAAE9M,IAAIR,EAAEO,OAAOC,EAAER,IAAI,IAAIK,EAAE,CAAC8Z,SAAS,SAASna,EAAEQ,EAAET,EAAEG,EAAEG,GAAG,GAAGG,EAAE8M,UAAUtN,EAAEsN,SAAStN,EAAEiP,IAAIzO,EAAE8M,SAASvN,EAAEA,EAAEG,GAAGG,QAAQ,IAAI,IAAIX,EAAE,EAAEA,EAAEQ,EAAER,IAAIM,EAAEK,EAAEX,GAAGc,EAAET,EAAEL,IAAIwZ,cAAc,SAASlZ,GAAG,IAAIQ,EAAET,EAAEG,EAAEG,EAAEX,EAAEC,EAAE,IAAIa,EAAEN,EAAE,EAAEH,EAAEC,EAAEO,OAAOC,EAAET,EAAES,IAAIN,GAAGF,EAAEQ,GAAGD,OAAO,IAAIZ,EAAE,IAAI4B,WAAWrB,GAAGM,EAAEH,EAAE,EAAEN,EAAEC,EAAEO,OAAOC,EAAET,EAAES,IAAId,EAAEM,EAAEQ,GAAGb,EAAEsP,IAAIvP,EAAEW,GAAGA,GAAGX,EAAEa,OAAO,OAAOZ,IAAID,EAAE,CAACya,SAAS,SAASna,EAAEQ,EAAET,EAAEG,EAAEG,GAAG,IAAI,IAAIX,EAAE,EAAEA,EAAEQ,EAAER,IAAIM,EAAEK,EAAEX,GAAGc,EAAET,EAAEL,IAAIwZ,cAAc,SAASlZ,GAAG,MAAM,GAAG+O,OAAOC,MAAM,GAAGhP,KAAKD,EAAE0a,SAAS,SAASza,GAAGA,GAAGD,EAAE4Y,KAAKpX,WAAWxB,EAAE2a,MAAMjX,YAAY1D,EAAE4a,MAAMH,WAAWza,EAAEmX,OAAOnX,EAAEM,KAAKN,EAAE4Y,KAAKnX,MAAMzB,EAAE2a,MAAMlZ,MAAMzB,EAAE4a,MAAMnZ,MAAMzB,EAAEmX,OAAOnX,EAAEL,KAAKK,EAAE0a,SAASva,IAAI,IAAI,GAAG,CAAC,SAASF,EAAEQ,EAAET,GAAG,aAAa,IAAIF,EAAEG,EAAE,YAAYK,GAAE,EAAGX,GAAE,EAAG,IAAIiF,OAAOC,aAAaoK,MAAM,KAAK,CAAC,IAAI,MAAMhP,GAAGK,GAAE,EAAG,IAAIsE,OAAOC,aAAaoK,MAAM,KAAK,IAAIzN,WAAW,IAAI,MAAMvB,GAAGN,GAAE,EAAG,IAAI,IAAII,EAAE,IAAID,EAAE8Y,KAAK,KAAKzY,EAAE,EAAEA,EAAE,IAAIA,IAAIJ,EAAEI,GAAG,KAAKA,EAAE,EAAE,KAAKA,EAAE,EAAE,KAAKA,EAAE,EAAE,KAAKA,EAAE,EAAE,KAAKA,EAAE,EAAE,EAAE,SAASD,EAAED,EAAEQ,GAAG,GAAGA,EAAE,QAAQR,EAAEsN,UAAU5N,IAAIM,EAAEsN,UAAUjN,GAAG,OAAOsE,OAAOC,aAAaoK,MAAM,KAAKnP,EAAEmZ,UAAUhZ,EAAEQ,IAAI,IAAI,IAAIT,EAAE,GAAGG,EAAE,EAAEA,EAAEM,EAAEN,IAAIH,GAAG4E,OAAOC,aAAa5E,EAAEE,IAAI,OAAOH,EAAED,EAAE,KAAKA,EAAE,KAAK,EAAEC,EAAEqY,WAAW,SAASpY,GAAG,IAAIQ,EAAET,EAAEG,EAAEG,EAAEX,EAAEC,EAAEK,EAAEO,OAAOX,EAAE,EAAE,IAAIS,EAAE,EAAEA,EAAEV,EAAEU,IAAI,QAAQ,OAAON,EAAEC,EAAEe,WAAWV,MAAMA,EAAE,EAAEV,GAAG,QAAQ,OAAOO,EAAEF,EAAEe,WAAWV,EAAE,OAAON,EAAE,OAAOA,EAAE,OAAO,KAAKG,EAAE,OAAOG,KAAKT,GAAGG,EAAE,IAAI,EAAEA,EAAE,KAAK,EAAEA,EAAE,MAAM,EAAE,EAAE,IAAIS,EAAE,IAAIX,EAAE8Y,KAAK/Y,GAAGS,EAAEX,EAAE,EAAEA,EAAEE,EAAES,IAAI,QAAQ,OAAON,EAAEC,EAAEe,WAAWV,MAAMA,EAAE,EAAEV,GAAG,QAAQ,OAAOO,EAAEF,EAAEe,WAAWV,EAAE,OAAON,EAAE,OAAOA,EAAE,OAAO,KAAKG,EAAE,OAAOG,KAAKN,EAAE,IAAIS,EAAEd,KAAKK,GAAGA,EAAE,KAAKS,EAAEd,KAAK,IAAIK,IAAI,GAAGA,EAAE,MAAMS,EAAEd,KAAK,IAAIK,IAAI,IAAIS,EAAEd,KAAK,IAAIK,IAAI,GAAGS,EAAEd,KAAK,IAAIK,IAAI,GAAG,IAAIS,EAAEd,KAAK,IAAIK,IAAI,EAAE,IAAIS,EAAEd,KAAK,IAAI,GAAGK,GAAG,OAAOS,GAAGT,EAAEgZ,cAAc,SAAS/Y,GAAG,OAAOC,EAAED,EAAEA,EAAEO,SAASR,EAAE2Z,cAAc,SAAS1Z,GAAG,IAAI,IAAIQ,EAAE,IAAIX,EAAE8Y,KAAK3Y,EAAEO,QAAQR,EAAE,EAAEG,EAAEM,EAAED,OAAOR,EAAEG,EAAEH,IAAIS,EAAET,GAAGC,EAAEe,WAAWhB,GAAG,OAAOS,GAAGT,EAAEma,WAAW,SAASla,EAAEQ,GAAG,IAAIT,EAAEG,EAAEG,EAAEX,EAAEC,EAAEa,GAAGR,EAAEO,OAAOX,EAAE,IAAI4B,MAAM,EAAE7B,GAAG,IAAII,EAAEG,EAAE,EAAEH,EAAEJ,GAAG,IAAIU,EAAEL,EAAED,MAAM,IAAIH,EAAEM,KAAKG,OAAO,GAAG,GAAGX,EAAEI,EAAEO,IAAIT,EAAEM,KAAK,MAAMH,GAAGL,EAAE,MAAM,CAAC,IAAIW,GAAG,IAAIX,EAAE,GAAG,IAAIA,EAAE,GAAG,EAAE,EAAEA,GAAGK,EAAEJ,GAAGU,EAAEA,GAAG,EAAE,GAAGL,EAAED,KAAKL,IAAI,EAAEA,EAAEE,EAAEM,KAAK,MAAMG,EAAE,MAAMT,EAAEM,KAAKG,GAAGA,GAAG,MAAMT,EAAEM,KAAK,MAAMG,GAAG,GAAG,KAAKT,EAAEM,KAAK,MAAM,KAAKG,GAAG,OAAOJ,EAAEL,EAAEM,IAAIH,EAAEka,WAAW,SAASja,EAAEQ,GAAG,IAAIT,EAAE,KAAKS,EAAEA,GAAGR,EAAEO,QAAQP,EAAEO,SAASC,EAAER,EAAEO,QAAQR,EAAES,EAAE,EAAE,GAAGT,GAAG,MAAM,IAAIC,EAAED,KAAKA,IAAI,OAAOA,EAAE,GAAI,IAAIA,EAANS,EAAUT,EAAED,EAAEE,EAAED,IAAIS,EAAET,EAAES,IAAI,CAAC,WAAW,KAAK,GAAG,CAAC,SAASR,EAAEQ,EAAET,GAAG,aAAaS,EAAEnB,QAAQ,SAASW,EAAEQ,EAAET,EAAEG,GAAG,IAAI,IAAIG,EAAE,MAAML,EAAE,EAAEN,EAAEM,IAAI,GAAG,MAAM,EAAEL,EAAE,EAAE,IAAII,GAAG,CAAC,IAAIA,GAAGJ,EAAE,IAAII,EAAE,IAAIA,EAAEL,EAAEA,GAAGW,EAAEA,EAAEG,EAAEN,KAAK,GAAG,IAAIP,IAAIU,GAAG,MAAMX,GAAG,MAAM,OAAOW,EAAEX,GAAG,GAAG,IAAI,IAAI,GAAG,CAAC,SAASM,EAAEQ,EAAET,GAAG,aAAaS,EAAEnB,QAAQ,CAACoa,WAAW,EAAEmB,gBAAgB,EAAEZ,aAAa,EAAEa,aAAa,EAAErB,SAAS,EAAEsB,QAAQ,EAAEC,QAAQ,EAAEzB,KAAK,EAAES,aAAa,EAAEH,YAAY,EAAEoB,SAAS,EAAEC,gBAAgB,EAAEC,cAAc,EAAEpB,aAAa,EAAEqB,iBAAiB,EAAEC,aAAa,EAAEC,mBAAmB,EAAEC,uBAAuB,EAAEC,WAAW,EAAEC,eAAe,EAAEC,MAAM,EAAEC,QAAQ,EAAEC,mBAAmB,EAAEC,SAAS,EAAEC,OAAO,EAAEC,UAAU,EAAEC,WAAW,IAAI,IAAI,GAAG,CAAC,SAAS/b,EAAEQ,EAAET,GAAG,aAAa,IAAIH,EAAE,WAAW,IAAI,IAAII,EAAEQ,EAAE,GAAGT,EAAE,EAAEA,EAAE,IAAIA,IAAI,CAACC,EAAED,EAAE,IAAI,IAAIG,EAAE,EAAEA,EAAE,EAAEA,IAAIF,EAAE,EAAEA,EAAE,WAAWA,IAAI,EAAEA,IAAI,EAAEQ,EAAET,GAAGC,EAAE,OAAOQ,EAA5G,GAAiHA,EAAEnB,QAAQ,SAASW,EAAEQ,EAAET,EAAEG,GAAG,IAAIG,EAAET,EAAEF,EAAEQ,EAAEH,EAAEC,IAAI,EAAE,IAAI,IAAIL,EAAEO,EAAEP,EAAED,EAAEC,IAAIK,EAAEA,IAAI,EAAEK,EAAE,KAAKL,EAAEQ,EAAEb,KAAK,OAAO,EAAEK,IAAI,IAAI,GAAG,CAAC,SAASA,EAAEQ,EAAET,GAAG,aAAa,IAAIF,EAAEa,EAAEV,EAAE,mBAAmBF,EAAEE,EAAE,WAAWS,EAAET,EAAE,aAAaW,EAAEX,EAAE,WAAWE,EAAEF,EAAE,cAA0BmF,GAAG,EAAwDQ,EAAE,IAAIC,EAAED,IAAWU,EAAE,IAAoB,SAASE,EAAEvG,EAAEQ,GAAG,OAAOR,EAAE2X,IAAIzX,EAAEM,GAAGA,EAAE,SAASwb,EAAEhc,GAAG,OAAOA,GAAG,IAAI,EAAEA,EAAE,EAAE,GAAG,SAASic,EAAEjc,GAAG,IAAI,IAAIQ,EAAER,EAAEO,OAAO,KAAKC,GAAGR,EAAEQ,GAAG,EAAE,SAAS0b,EAAElc,GAAG,IAAIQ,EAAER,EAAEkW,MAAMnW,EAAES,EAAE2b,QAAQpc,EAAEC,EAAE+X,YAAYhY,EAAEC,EAAE+X,WAAW,IAAIhY,IAAIW,EAAEyZ,SAASna,EAAE0Y,OAAOlY,EAAE4b,YAAY5b,EAAE6b,YAAYtc,EAAEC,EAAE4Y,UAAU5Y,EAAE4Y,UAAU7Y,EAAES,EAAE6b,aAAatc,EAAEC,EAAEsc,WAAWvc,EAAEC,EAAE+X,WAAWhY,EAAES,EAAE2b,SAASpc,EAAE,IAAIS,EAAE2b,UAAU3b,EAAE6b,YAAY,IAAI,SAASE,EAAEvc,EAAEQ,GAAGV,EAAE0c,gBAAgBxc,EAAE,GAAGA,EAAEyc,YAAYzc,EAAEyc,aAAa,EAAEzc,EAAE0c,SAAS1c,EAAEyc,YAAYjc,GAAGR,EAAEyc,YAAYzc,EAAE0c,SAASR,EAAElc,EAAE8X,MAAM,SAAS6E,EAAE3c,EAAEQ,GAAGR,EAAEoc,YAAYpc,EAAEmc,WAAW3b,EAAE,SAASoc,EAAE5c,EAAEQ,GAAGR,EAAEoc,YAAYpc,EAAEmc,WAAW3b,IAAI,EAAE,IAAIR,EAAEoc,YAAYpc,EAAEmc,WAAW,IAAI3b,EAAE,SAASqc,EAAE7c,EAAEQ,GAAG,IAAIT,EAAEG,EAAEG,EAAEL,EAAE8c,iBAAiBpd,EAAEM,EAAE0c,SAAS/c,EAAEK,EAAE+c,YAAYnd,EAAEI,EAAEgd,WAAWnd,EAAEG,EAAE0c,SAAS1c,EAAEid,OAAOrX,EAAE5F,EAAE0c,UAAU1c,EAAEid,OAAOrX,GAAG,EAAE9F,EAAEE,EAAEgW,OAAO/V,EAAED,EAAEkd,OAAOrc,EAAEb,EAAEmd,KAAKzc,EAAEV,EAAE0c,SAAS/W,EAAElF,EAAEX,EAAEJ,EAAEC,EAAE,GAAGgB,EAAEb,EAAEJ,EAAEC,GAAGK,EAAE+c,aAAa/c,EAAEod,aAAa/c,IAAI,GAAGT,EAAEI,EAAEqd,YAAYzd,EAAEI,EAAEqd,WAAW,GAAG,GAAGvd,GAAGC,EAAES,GAAGb,KAAKgB,GAAGb,EAAEC,EAAEJ,EAAE,KAAKc,GAAGX,EAAEC,KAAKD,EAAEJ,IAAII,IAAIC,KAAKD,EAAEJ,EAAE,GAAG,CAACA,GAAG,EAAEK,IAAI,UAAUD,IAAIJ,KAAKI,IAAIC,IAAID,IAAIJ,KAAKI,IAAIC,IAAID,IAAIJ,KAAKI,IAAIC,IAAID,IAAIJ,KAAKI,IAAIC,IAAID,IAAIJ,KAAKI,IAAIC,IAAID,IAAIJ,KAAKI,IAAIC,IAAID,IAAIJ,KAAKI,IAAIC,IAAID,IAAIJ,KAAKI,IAAIC,IAAIL,EAAEgB,GAAG,GAAGR,EAAEyF,GAAGjF,EAAEhB,GAAGA,EAAEgB,EAAEiF,EAAEhG,EAAEO,EAAE,CAAC,GAAGF,EAAEsd,YAAY9c,EAAEZ,IAAID,EAAEO,GAAG,MAAMO,EAAEX,EAAEJ,EAAEC,EAAE,GAAGgB,EAAEb,EAAEJ,EAAEC,YAAYa,EAAEK,EAAEL,EAAEP,IAAIJ,GAAG,KAAKQ,GAAG,OAAOV,GAAGK,EAAEqd,UAAU1d,EAAEK,EAAEqd,UAAU,SAASE,EAAEvd,GAAG,IAAIQ,EAAET,EAAEG,EAAEG,EAAEX,EAAEC,EAAEC,EAAEC,EAAEC,EAAEG,EAAEY,EAAEb,EAAEid,OAAO,EAAE,CAAC,GAAG5c,EAAEL,EAAEwd,YAAYxd,EAAEqd,UAAUrd,EAAE0c,SAAS1c,EAAE0c,UAAU7b,GAAGA,EAAE+E,GAAG,CAAC,IAAIlF,EAAEyZ,SAASna,EAAEgW,OAAOhW,EAAEgW,OAAOnV,EAAEA,EAAE,GAAGb,EAAEsd,aAAazc,EAAEb,EAAE0c,UAAU7b,EAAEb,EAAEyc,aAAa5b,EAAEL,EAAET,EAAEC,EAAEyd,UAAUvd,EAAEF,EAAE0d,OAAOld,GAAGR,EAAE0d,KAAKld,GAAGK,GAAGX,EAAEA,EAAEW,EAAE,IAAId,IAAI,IAAIS,EAAET,EAAEc,EAAEX,EAAEF,EAAEmd,OAAO3c,GAAGR,EAAEmd,KAAK3c,GAAGK,GAAGX,EAAEA,EAAEW,EAAE,IAAId,IAAIM,GAAGQ,EAAE,GAAG,IAAIb,EAAE8X,KAAKW,SAAS,MAAM,GAAG9Y,EAAEK,EAAE8X,KAAKlY,EAAEI,EAAEgW,OAAOnW,EAAEG,EAAE0c,SAAS1c,EAAEqd,UAAcpd,OAAE,GAANH,EAAEO,IAAWJ,EAAEN,EAAE8Y,YAAexY,EAAEH,GAAGC,EAAE,IAAIE,EAAE,GAAGN,EAAE8Y,UAAUxY,EAAES,EAAEyZ,SAASva,EAAED,EAAE4Y,MAAM5Y,EAAE6Y,QAAQvY,EAAEJ,GAAG,IAAIF,EAAEuW,MAAMyH,KAAKhe,EAAEie,MAAMnd,EAAEd,EAAEie,MAAMhe,EAAEK,EAAEJ,GAAG,IAAIF,EAAEuW,MAAMyH,OAAOhe,EAAEie,MAAMjd,EAAEhB,EAAEie,MAAMhe,EAAEK,EAAEJ,IAAIF,EAAE6Y,SAASvY,EAAEN,EAAEke,UAAU5d,EAAEA,GAAGD,EAAEqd,WAAWtd,EAAEC,EAAEqd,UAAUrd,EAAE8d,QAAr6D,EAA+6D,IAAIpe,EAAEM,EAAE0c,SAAS1c,EAAE8d,OAAO9d,EAAE+d,MAAM/d,EAAEgW,OAAOtW,GAAGM,EAAE+d,OAAO/d,EAAE+d,OAAO/d,EAAEge,WAAWhe,EAAEgW,OAAOtW,EAAE,IAAIM,EAAEie,UAAUje,EAAE8d,SAAS9d,EAAE+d,OAAO/d,EAAE+d,OAAO/d,EAAEge,WAAWhe,EAAEgW,OAAOtW,EAA1kE,EAA8kE,IAAIM,EAAEie,UAAUje,EAAEmd,KAAKzd,EAAEM,EAAEkd,QAAQld,EAAE0d,KAAK1d,EAAE+d,OAAO/d,EAAE0d,KAAK1d,EAAE+d,OAAOre,EAAEA,IAAIM,EAAE8d,WAAW9d,EAAEqd,UAAUrd,EAAE8d,OAAlrE,aAAssE9d,EAAEqd,UAAUzX,GAAG,IAAI5F,EAAE8X,KAAKW,UAAU,SAASyF,EAAEle,EAAEQ,GAAG,IAAI,IAAIT,EAAEG,IAAI,CAAC,GAAGF,EAAEqd,UAAUzX,EAAE,CAAC,GAAG2X,EAAEvd,GAAGA,EAAEqd,UAAUzX,GAAl3E,IAAq3EpF,EAAM,OAA3xE,EAAoyE,GAAG,IAAIR,EAAEqd,UAAU,MAAM,GAAGtd,EAAE,EAAEC,EAAEqd,WAAn2E,IAAk3Erd,EAAE+d,OAAO/d,EAAE+d,OAAO/d,EAAEge,WAAWhe,EAAEgW,OAAOhW,EAAE0c,SAA55E,EAAu6E,IAAI1c,EAAEie,UAAUle,EAAEC,EAAEmd,KAAKnd,EAAE0c,SAAS1c,EAAEkd,QAAQld,EAAE0d,KAAK1d,EAAE+d,OAAO/d,EAAE0d,KAAK1d,EAAE+d,OAAO/d,EAAE0c,UAAU,IAAI3c,GAAGC,EAAE0c,SAAS3c,GAAGC,EAAEid,OAAOrX,IAAI5F,EAAEme,aAAatB,EAAE7c,EAAED,IAAIC,EAAEme,cAA5jF,EAA4kF,GAAGje,EAAEJ,EAAEse,UAAUpe,EAAEA,EAAE0c,SAAS1c,EAAEsd,YAAYtd,EAAEme,aAA1nF,GAA0oFne,EAAEqd,WAAWrd,EAAEme,aAAane,EAAEme,cAAcne,EAAEqe,gBAAgBre,EAAEqd,WAA1sF,EAAutF,CAAC,IAAIrd,EAAEme,eAAene,EAAE0c,WAAW1c,EAAE+d,OAAO/d,EAAE+d,OAAO/d,EAAEge,WAAWhe,EAAEgW,OAAOhW,EAAE0c,SAApyF,EAA+yF,IAAI1c,EAAEie,UAAUle,EAAEC,EAAEmd,KAAKnd,EAAE0c,SAAS1c,EAAEkd,QAAQld,EAAE0d,KAAK1d,EAAE+d,OAAO/d,EAAE0d,KAAK1d,EAAE+d,OAAO/d,EAAE0c,SAAS,KAAK1c,EAAEme,eAAene,EAAE0c,gBAAgB1c,EAAE0c,UAAU1c,EAAEme,aAAane,EAAEme,aAAa,EAAEne,EAAE+d,MAAM/d,EAAEgW,OAAOhW,EAAE0c,UAAU1c,EAAE+d,OAAO/d,EAAE+d,OAAO/d,EAAEge,WAAWhe,EAAEgW,OAAOhW,EAAE0c,SAAS,IAAI1c,EAAEie,eAAe/d,EAAEJ,EAAEse,UAAUpe,EAAE,EAAEA,EAAEgW,OAAOhW,EAAE0c,WAAW1c,EAAEqd,YAAYrd,EAAE0c,WAAW,GAAGxc,IAAIqc,EAAEvc,GAAE,GAAI,IAAIA,EAAE8X,KAAKC,WAAW,OAA5oG,EAAqpG,OAAO/X,EAAE8d,OAAO9d,EAAE0c,SAAShX,EAAI1F,EAAE0c,SAAShX,EAA3xG,IAA+xGlF,GAAO+b,EAAEvc,GAAE,GAAI,IAAIA,EAAE8X,KAAKC,UAArtG,EAAI,GAAguG/X,EAAEse,WAAW/B,EAAEvc,GAAE,GAAI,IAAIA,EAAE8X,KAAKC,WAA5wG,EAAI,EAAuxG,SAASwG,EAAEve,EAAEQ,GAAG,IAAI,IAAIT,EAAEG,EAAEG,IAAI,CAAC,GAAGL,EAAEqd,UAAUzX,EAAE,CAAC,GAAG2X,EAAEvd,GAAGA,EAAEqd,UAAUzX,GAAl8G,IAAq8GpF,EAAM,OAA32G,EAAo3G,GAAG,IAAIR,EAAEqd,UAAU,MAAM,GAAGtd,EAAE,EAAEC,EAAEqd,WAAn7G,IAAk8Grd,EAAE+d,OAAO/d,EAAE+d,OAAO/d,EAAEge,WAAWhe,EAAEgW,OAAOhW,EAAE0c,SAA5+G,EAAu/G,IAAI1c,EAAEie,UAAUle,EAAEC,EAAEmd,KAAKnd,EAAE0c,SAAS1c,EAAEkd,QAAQld,EAAE0d,KAAK1d,EAAE+d,OAAO/d,EAAE0d,KAAK1d,EAAE+d,OAAO/d,EAAE0c,UAAU1c,EAAE+c,YAAY/c,EAAEme,aAAane,EAAEwe,WAAWxe,EAAEsd,YAAYtd,EAAEme,aAAazY,EAAI,IAAI3F,GAAGC,EAAE+c,YAAY/c,EAAEqe,gBAAgBre,EAAE0c,SAAS3c,GAAGC,EAAEid,OAAOrX,IAAI5F,EAAEme,aAAatB,EAAE7c,EAAED,GAAGC,EAAEme,cAAc,IAAI,IAAIne,EAAEuX,UAA9wH,IAAwxHvX,EAAEme,cAAkB,KAAKne,EAAE0c,SAAS1c,EAAEsd,eAAetd,EAAEme,aAAazY,IAAM1F,EAAE+c,aAAp2H,GAAo3H/c,EAAEme,cAAcne,EAAE+c,YAAY,CAAC,IAAI1c,EAAEL,EAAE0c,SAAS1c,EAAEqd,UAAt6H,EAAk7Hnd,EAAEJ,EAAEse,UAAUpe,EAAEA,EAAE0c,SAAS,EAAE1c,EAAEwe,WAAWxe,EAAE+c,YAA99H,GAA6+H/c,EAAEqd,WAAWrd,EAAE+c,YAAY,EAAE/c,EAAE+c,aAAa,IAAI/c,EAAE0c,UAAUrc,IAAIL,EAAE+d,OAAO/d,EAAE+d,OAAO/d,EAAEge,WAAWhe,EAAEgW,OAAOhW,EAAE0c,SAAvlI,EAAkmI,IAAI1c,EAAEie,UAAUle,EAAEC,EAAEmd,KAAKnd,EAAE0c,SAAS1c,EAAEkd,QAAQld,EAAE0d,KAAK1d,EAAE+d,OAAO/d,EAAE0d,KAAK1d,EAAE+d,OAAO/d,EAAE0c,UAAU,KAAK1c,EAAE+c,cAAc,GAAG/c,EAAEye,gBAAgB,EAAEze,EAAEme,aAAazY,EAAI1F,EAAE0c,WAAWxc,IAAIqc,EAAEvc,GAAE,GAAI,IAAIA,EAAE8X,KAAKC,WAAW,OAA7wI,OAA2xI,GAAG/X,EAAEye,iBAAiB,IAAIve,EAAEJ,EAAEse,UAAUpe,EAAE,EAAEA,EAAEgW,OAAOhW,EAAE0c,SAAS,MAAMH,EAAEvc,GAAE,GAAIA,EAAE0c,WAAW1c,EAAEqd,YAAY,IAAIrd,EAAE8X,KAAKC,UAAU,OAAz5I,OAAu6I/X,EAAEye,gBAAgB,EAAEze,EAAE0c,WAAW1c,EAAEqd,YAAY,OAAOrd,EAAEye,kBAAkBve,EAAEJ,EAAEse,UAAUpe,EAAE,EAAEA,EAAEgW,OAAOhW,EAAE0c,SAAS,IAAI1c,EAAEye,gBAAgB,GAAGze,EAAE8d,OAAO9d,EAAE0c,SAAShX,EAAI1F,EAAE0c,SAAShX,EAA/qJ,IAAmrJlF,GAAO+b,EAAEvc,GAAE,GAAI,IAAIA,EAAE8X,KAAKC,UAAzmJ,EAAI,GAAonJ/X,EAAEse,WAAW/B,EAAEvc,GAAE,GAAI,IAAIA,EAAE8X,KAAKC,WAAhqJ,EAAI,EAA2qJ,SAAS2G,EAAE1e,EAAEQ,EAAET,EAAEG,EAAEG,GAAGZ,KAAKkf,YAAY3e,EAAEP,KAAKmf,SAASpe,EAAEf,KAAKof,YAAY9e,EAAEN,KAAKqf,UAAU5e,EAAET,KAAKsf,KAAK1e,EAAE,SAAS2e,IAAIvf,KAAKqY,KAAK,KAAKrY,KAAKmX,OAAO,EAAEnX,KAAK2c,YAAY,KAAK3c,KAAKwf,iBAAiB,EAAExf,KAAK4c,YAAY,EAAE5c,KAAK0c,QAAQ,EAAE1c,KAAKke,KAAK,EAAEle,KAAKyf,OAAO,KAAKzf,KAAK0f,QAAQ,EAAE1f,KAAK0X,OAArgK,EAA8gK1X,KAAK2f,YAAY,EAAE3f,KAAKwd,OAAO,EAAExd,KAAK4f,OAAO,EAAE5f,KAAKyd,OAAO,EAAEzd,KAAKuW,OAAO,KAAKvW,KAAK+d,YAAY,EAAE/d,KAAK0d,KAAK,KAAK1d,KAAKie,KAAK,KAAKje,KAAKse,MAAM,EAAEte,KAAKge,UAAU,EAAEhe,KAAK6f,UAAU,EAAE7f,KAAKwe,UAAU,EAAExe,KAAKue,WAAW,EAAEve,KAAKgd,YAAY,EAAEhd,KAAK0e,aAAa,EAAE1e,KAAK+e,WAAW,EAAE/e,KAAKgf,gBAAgB,EAAEhf,KAAKid,SAAS,EAAEjd,KAAK6d,YAAY,EAAE7d,KAAK4d,UAAU,EAAE5d,KAAKsd,YAAY,EAAEtd,KAAKqd,iBAAiB,EAAErd,KAAK4e,eAAe,EAAE5e,KAAK8E,MAAM,EAAE9E,KAAK8X,SAAS,EAAE9X,KAAK2d,WAAW,EAAE3d,KAAKud,WAAW,EAAEvd,KAAK8f,UAAU,IAAI7e,EAAEga,MAAM,MAAKjb,KAAK+f,UAAU,IAAI9e,EAAEga,MAAM,KAAWjb,KAAKggB,QAAQ,IAAI/e,EAAEga,MAAM,IAAWuB,EAAExc,KAAK8f,WAAWtD,EAAExc,KAAK+f,WAAWvD,EAAExc,KAAKggB,SAAShgB,KAAKigB,OAAO,KAAKjgB,KAAKkgB,OAAO,KAAKlgB,KAAKmgB,QAAQ,KAAKngB,KAAKogB,SAAS,IAAInf,EAAEga,MAAMjV,IAAKhG,KAAKqgB,KAAK,IAAIpf,EAAEga,MAAM,KAAOuB,EAAExc,KAAKqgB,MAAMrgB,KAAKsgB,SAAS,EAAEtgB,KAAKugB,SAAS,EAAEvgB,KAAKwgB,MAAM,IAAIvf,EAAEga,MAAM,KAAOuB,EAAExc,KAAKwgB,OAAOxgB,KAAKygB,MAAM,EAAEzgB,KAAK0gB,YAAY,EAAE1gB,KAAK6e,SAAS,EAAE7e,KAAK2gB,MAAM,EAAE3gB,KAAK4gB,QAAQ,EAAE5gB,KAAK6gB,WAAW,EAAE7gB,KAAK8gB,QAAQ,EAAE9gB,KAAKqe,OAAO,EAAEre,KAAK+gB,OAAO,EAAE/gB,KAAKghB,SAAS,EAAE,SAASC,EAAE1gB,GAAG,IAAIQ,EAAE,OAAOR,GAAGA,EAAEkW,OAAOlW,EAAE6d,SAAS7d,EAAEsc,UAAU,EAAEtc,EAAE2gB,UAA3iM,GAAwjMngB,EAAER,EAAEkW,OAAOiG,QAAQ,EAAE3b,EAAE6b,YAAY,EAAE7b,EAAEmd,KAAK,IAAInd,EAAEmd,MAAMnd,EAAEmd,MAAMnd,EAAEoW,OAAOpW,EAAEmd,KAAxkM,GAA+kMtX,EAAErG,EAAE4d,MAAM,IAAIpd,EAAEmd,KAAK,EAAE,EAAEnd,EAAE4e,WAA/rM,EAA4sMtf,EAAE8gB,SAASpgB,GAA/sM,GAAqtM+F,EAAEvG,EAAEmF,GAAG,SAAS0b,EAAE7gB,GAAG,IAAIQ,EAAEkgB,EAAE1gB,GAAG,OAArvM,IAA4vMQ,GAAO,SAASR,GAAGA,EAAEwd,YAAY,EAAExd,EAAEid,OAAOhB,EAAEjc,EAAE0d,MAAM1d,EAAEqe,eAAexe,EAAEG,EAAEuE,OAAOqa,SAAS5e,EAAEod,WAAWvd,EAAEG,EAAEuE,OAAOoa,YAAY3e,EAAEgd,WAAWnd,EAAEG,EAAEuE,OAAOsa,YAAY7e,EAAE8c,iBAAiBjd,EAAEG,EAAEuE,OAAOua,UAAU9e,EAAE0c,SAAS,EAAE1c,EAAEyc,YAAY,EAAEzc,EAAEqd,UAAU,EAAErd,EAAE8d,OAAO,EAAE9d,EAAEme,aAAane,EAAE+c,YAAYrX,EAAI1F,EAAEye,gBAAgB,EAAEze,EAAE+d,MAAM,EAAvT,CAA0T/d,EAAEkW,OAAO1V,EAAE,SAASsgB,EAAE9gB,EAAEQ,EAAET,EAAEG,EAAEG,EAAEX,GAAG,IAAIM,EAAE,OAAOmF,EAAE,IAAIxF,EAAE,EAAE,IAA9mN,IAAinNa,IAAQA,EAAE,GAAGN,EAAE,GAAGP,EAAE,EAAEO,GAAGA,GAAG,GAAGA,IAAIP,EAAE,EAAEO,GAAG,IAAIG,EAAE,GAAhpN,EAAqpNA,GAAzpN,IAA4pNN,GAAOG,EAAE,GAAG,GAAGA,GAAGM,EAAE,GAAG,EAAEA,GAAGd,EAAE,GAAlsN,EAAusNA,EAAE,OAAO6G,EAAEvG,EAAEmF,GAAG,IAAIjF,IAAIA,EAAE,GAAG,IAAIN,EAAE,IAAIof,EAAE,OAAOhf,EAAEkW,MAAMtW,GAAGkY,KAAK9X,EAAEJ,EAAE+d,KAAKhe,EAAEC,EAAEsf,OAAO,KAAKtf,EAAEyf,OAAOnf,EAAEN,EAAEqd,OAAO,GAAGrd,EAAEyf,OAAOzf,EAAEsd,OAAOtd,EAAEqd,OAAO,EAAErd,EAAE0f,UAAUjf,EAAE,EAAET,EAAE6d,UAAU,GAAG7d,EAAE0f,UAAU1f,EAAEqe,UAAUre,EAAE6d,UAAU,EAAE7d,EAAEoe,eAAepe,EAAE0f,UAA/3N,EAA24N,GAA34N,GAAi5N1f,EAAEoW,OAAO,IAAItV,EAAEiY,KAAK,EAAE/Y,EAAEqd,QAAQrd,EAAE8d,KAAK,IAAIhd,EAAEga,MAAM9a,EAAE6d,WAAW7d,EAAEud,KAAK,IAAIzc,EAAEga,MAAM9a,EAAEqd,QAAQrd,EAAEugB,YAAY,GAAG9f,EAAE,EAAET,EAAEqf,iBAAiB,EAAErf,EAAEugB,YAAYvgB,EAAEwc,YAAY,IAAI1b,EAAEiY,KAAK/Y,EAAEqf,kBAAkBrf,EAAEwgB,MAAM,EAAExgB,EAAEugB,YAAYvgB,EAAEsgB,MAAM,EAAEtgB,EAAEugB,YAAYvgB,EAAE2E,MAAM/D,EAAEZ,EAAE2X,SAAS7X,EAAEE,EAAEuX,OAAOpX,EAAE8gB,EAAE7gB,GAAGH,EAAE,CAAC,IAAI6e,EAAE,EAAE,EAAE,EAAE,GAAE,SAAS1e,EAAEQ,GAAG,IAAIT,EAAE,MAAM,IAAIA,EAAEC,EAAEif,iBAAiB,IAAIlf,EAAEC,EAAEif,iBAAiB,KAAK,CAAC,GAAGjf,EAAEqd,WAAW,EAAE,CAAC,GAAGE,EAAEvd,GAAG,IAAIA,EAAEqd,WAAj3O,IAA43O7c,EAAM,OAAlyO,EAA2yO,GAAG,IAAIR,EAAEqd,UAAU,MAAMrd,EAAE0c,UAAU1c,EAAEqd,UAAUrd,EAAEqd,UAAU,EAAE,IAAInd,EAAEF,EAAEyc,YAAY1c,EAAE,IAAI,IAAIC,EAAE0c,UAAU1c,EAAE0c,UAAUxc,KAAKF,EAAEqd,UAAUrd,EAAE0c,SAASxc,EAAEF,EAAE0c,SAASxc,EAAEqc,EAAEvc,GAAE,GAAI,IAAIA,EAAE8X,KAAKC,WAAW,OAAz+O,EAAk/O,GAAG/X,EAAE0c,SAAS1c,EAAEyc,aAAazc,EAAEid,OAAOrX,IAAI2W,EAAEvc,GAAE,GAAI,IAAIA,EAAE8X,KAAKC,WAAW,OAA1jP,EAAmkP,OAAO/X,EAAE8d,OAAO,EAA/qP,IAAirPtd,GAAO+b,EAAEvc,GAAE,GAAI,IAAIA,EAAE8X,KAAKC,UAAvmP,EAAI,IAAmnP/X,EAAE0c,SAAS1c,EAAEyc,cAAcF,EAAEvc,GAAE,GAAIA,EAAE8X,KAAKC,WAAzqP,MAAyrP,IAAI2G,EAAE,EAAE,EAAE,EAAE,EAAER,GAAG,IAAIQ,EAAE,EAAE,EAAE,GAAG,EAAER,GAAG,IAAIQ,EAAE,EAAE,EAAE,GAAG,GAAGR,GAAG,IAAIQ,EAAE,EAAE,EAAE,GAAG,GAAGH,GAAG,IAAIG,EAAE,EAAE,GAAG,GAAG,GAAGH,GAAG,IAAIG,EAAE,EAAE,GAAG,IAAI,IAAIH,GAAG,IAAIG,EAAE,EAAE,GAAG,IAAI,IAAIH,GAAG,IAAIG,EAAE,GAAG,IAAI,IAAI,KAAKH,GAAG,IAAIG,EAAE,GAAG,IAAI,IAAI,KAAKH,IAAIxe,EAAEghB,YAAY,SAAS/gB,EAAEQ,GAAG,OAAOsgB,EAAE9gB,EAAEQ,EAA99P,EAAk+P,GAAG,EAAE,IAAIT,EAAEiY,aAAa8I,EAAE/gB,EAAEihB,aAAaH,EAAE9gB,EAAEkhB,iBAAiBP,EAAE3gB,EAAEmY,iBAAiB,SAASlY,EAAEQ,GAAG,OAAOR,GAAGA,EAAEkW,MAAM,IAAIlW,EAAEkW,MAAMyH,KAAKxY,GAAGnF,EAAEkW,MAAMgJ,OAAO1e,EAA9oQ,GAAmpQ2E,GAAGpF,EAAE8Y,QAAQ,SAAS7Y,EAAEQ,GAAG,IAAIT,EAAEG,EAAEG,EAAEX,EAAE,IAAIM,IAAIA,EAAEkW,OAAO,EAAE1V,GAAGA,EAAE,EAAE,OAAOR,EAAEuG,EAAEvG,EAAEmF,GAAGA,EAAE,GAAGjF,EAAEF,EAAEkW,OAAOlW,EAAE0Y,SAAS1Y,EAAEuY,OAAO,IAAIvY,EAAEyY,UAAU,MAAMvY,EAAE0W,QAApyQ,IAA4yQpW,EAAM,OAAO+F,EAAEvG,EAAE,IAAIA,EAAE+X,WAAW,EAAE5S,GAAG,GAAGjF,EAAE4X,KAAK9X,EAAED,EAAEG,EAAEkf,WAAWlf,EAAEkf,WAAW5e,EAA1yQ,KAA4yQN,EAAE0W,OAAW,GAAG,IAAI1W,EAAEyd,KAAK3d,EAAE4d,MAAM,EAAEjB,EAAEzc,EAAE,IAAIyc,EAAEzc,EAAE,KAAKyc,EAAEzc,EAAE,GAAGA,EAAEgf,QAAQvC,EAAEzc,GAAGA,EAAEgf,OAAOgC,KAAK,EAAE,IAAIhhB,EAAEgf,OAAOiC,KAAK,EAAE,IAAIjhB,EAAEgf,OAAOkC,MAAM,EAAE,IAAIlhB,EAAEgf,OAAOja,KAAK,EAAE,IAAI/E,EAAEgf,OAAO7b,QAAQ,GAAG,IAAIsZ,EAAEzc,EAAE,IAAIA,EAAEgf,OAAOmC,MAAM1E,EAAEzc,EAAEA,EAAEgf,OAAOmC,MAAM,EAAE,KAAK1E,EAAEzc,EAAEA,EAAEgf,OAAOmC,MAAM,GAAG,KAAK1E,EAAEzc,EAAEA,EAAEgf,OAAOmC,MAAM,GAAG,KAAK1E,EAAEzc,EAAE,IAAIA,EAAEqE,MAAM,EAAE,GAAGrE,EAAEqX,UAAUrX,EAAEqE,MAAM,EAAE,EAAE,GAAGoY,EAAEzc,EAAE,IAAIA,EAAEgf,OAAOoC,IAAIphB,EAAEgf,OAAOkC,OAAOlhB,EAAEgf,OAAOkC,MAAM7gB,SAASoc,EAAEzc,EAAE,IAAIA,EAAEgf,OAAOkC,MAAM7gB,QAAQoc,EAAEzc,EAAEA,EAAEgf,OAAOkC,MAAM7gB,QAAQ,EAAE,MAAML,EAAEgf,OAAOiC,OAAOnhB,EAAE4d,MAAMjd,EAAEX,EAAE4d,MAAM1d,EAAEkc,YAAYlc,EAAEic,QAAQ,IAAIjc,EAAEif,QAAQ,EAAEjf,EAAE0W,OAAO,KAAK+F,EAAEzc,EAAE,GAAGyc,EAAEzc,EAAE,GAAGyc,EAAEzc,EAAE,GAAGyc,EAAEzc,EAAE,GAAGyc,EAAEzc,EAAE,GAAGyc,EAAEzc,EAAE,IAAIA,EAAEqE,MAAM,EAAE,GAAGrE,EAAEqX,UAAUrX,EAAEqE,MAAM,EAAE,EAAE,GAAGoY,EAAEzc,EAAE,GAAGA,EAAE0W,OAAOvQ,OAAO,CAAC,IAAI1G,EAAr/R,GAA0/RO,EAAEmf,OAAO,GAAG,IAAI,EAAE1f,IAAI,GAAGO,EAAEqX,UAAUrX,EAAEqE,MAAM,EAAE,EAAErE,EAAEqE,MAAM,EAAE,EAAE,IAAIrE,EAAEqE,MAAM,EAAE,IAAI,EAAE,IAAIrE,EAAEwc,WAAW/c,GAAG,IAAIA,GAAG,GAAGA,EAAE,GAAGO,EAAE0W,OAAOvQ,EAAEuW,EAAE1c,EAAEP,GAAG,IAAIO,EAAEwc,WAAWE,EAAE1c,EAAEF,EAAE4d,QAAQ,IAAIhB,EAAE1c,EAAE,MAAMF,EAAE4d,QAAQ5d,EAAE4d,MAAM,EAAE,GAAG,KAAK1d,EAAE0W,OAAO,GAAG1W,EAAEgf,OAAOkC,MAAM,CAAC,IAAI/gB,EAAEH,EAAEic,QAAQjc,EAAEif,SAAS,MAAMjf,EAAEgf,OAAOkC,MAAM7gB,UAAUL,EAAEic,UAAUjc,EAAE+e,mBAAmB/e,EAAEgf,OAAOiC,MAAMjhB,EAAEic,QAAQ9b,IAAIL,EAAE4d,MAAMjd,EAAEX,EAAE4d,MAAM1d,EAAEkc,YAAYlc,EAAEic,QAAQ9b,EAAEA,IAAI6b,EAAElc,GAAGK,EAAEH,EAAEic,QAAQjc,EAAEic,UAAUjc,EAAE+e,oBAAoBtC,EAAEzc,EAAE,IAAIA,EAAEgf,OAAOkC,MAAMlhB,EAAEif,UAAUjf,EAAEif,UAAUjf,EAAEgf,OAAOiC,MAAMjhB,EAAEic,QAAQ9b,IAAIL,EAAE4d,MAAMjd,EAAEX,EAAE4d,MAAM1d,EAAEkc,YAAYlc,EAAEic,QAAQ9b,EAAEA,IAAIH,EAAEif,UAAUjf,EAAEgf,OAAOkC,MAAM7gB,SAASL,EAAEif,QAAQ,EAAEjf,EAAE0W,OAAO,SAAS1W,EAAE0W,OAAO,GAAG,GAAG,KAAK1W,EAAE0W,OAAO,GAAG1W,EAAEgf,OAAOja,KAAK,CAAC5E,EAAEH,EAAEic,QAAQ,EAAE,CAAC,GAAGjc,EAAEic,UAAUjc,EAAE+e,mBAAmB/e,EAAEgf,OAAOiC,MAAMjhB,EAAEic,QAAQ9b,IAAIL,EAAE4d,MAAMjd,EAAEX,EAAE4d,MAAM1d,EAAEkc,YAAYlc,EAAEic,QAAQ9b,EAAEA,IAAI6b,EAAElc,GAAGK,EAAEH,EAAEic,QAAQjc,EAAEic,UAAUjc,EAAE+e,kBAAkB,CAACvf,EAAE,EAAE,MAAMA,EAAEQ,EAAEif,QAAQjf,EAAEgf,OAAOja,KAAK1E,OAAO,IAAIL,EAAEgf,OAAOja,KAAKlE,WAAWb,EAAEif,WAAW,EAAExC,EAAEzc,EAAER,SAAS,IAAIA,GAAGQ,EAAEgf,OAAOiC,MAAMjhB,EAAEic,QAAQ9b,IAAIL,EAAE4d,MAAMjd,EAAEX,EAAE4d,MAAM1d,EAAEkc,YAAYlc,EAAEic,QAAQ9b,EAAEA,IAAI,IAAIX,IAAIQ,EAAEif,QAAQ,EAAEjf,EAAE0W,OAAO,SAAS1W,EAAE0W,OAAO,GAAG,GAAG,KAAK1W,EAAE0W,OAAO,GAAG1W,EAAEgf,OAAO7b,QAAQ,CAAChD,EAAEH,EAAEic,QAAQ,EAAE,CAAC,GAAGjc,EAAEic,UAAUjc,EAAE+e,mBAAmB/e,EAAEgf,OAAOiC,MAAMjhB,EAAEic,QAAQ9b,IAAIL,EAAE4d,MAAMjd,EAAEX,EAAE4d,MAAM1d,EAAEkc,YAAYlc,EAAEic,QAAQ9b,EAAEA,IAAI6b,EAAElc,GAAGK,EAAEH,EAAEic,QAAQjc,EAAEic,UAAUjc,EAAE+e,kBAAkB,CAACvf,EAAE,EAAE,MAAMA,EAAEQ,EAAEif,QAAQjf,EAAEgf,OAAO7b,QAAQ9C,OAAO,IAAIL,EAAEgf,OAAO7b,QAAQtC,WAAWb,EAAEif,WAAW,EAAExC,EAAEzc,EAAER,SAAS,IAAIA,GAAGQ,EAAEgf,OAAOiC,MAAMjhB,EAAEic,QAAQ9b,IAAIL,EAAE4d,MAAMjd,EAAEX,EAAE4d,MAAM1d,EAAEkc,YAAYlc,EAAEic,QAAQ9b,EAAEA,IAAI,IAAIX,IAAIQ,EAAE0W,OAAO,UAAU1W,EAAE0W,OAAO,IAAI,GAAG,MAAM1W,EAAE0W,SAAS1W,EAAEgf,OAAOiC,MAAMjhB,EAAEic,QAAQ,EAAEjc,EAAE+e,kBAAkB/C,EAAElc,GAAGE,EAAEic,QAAQ,GAAGjc,EAAE+e,mBAAmBtC,EAAEzc,EAAE,IAAIF,EAAE4d,OAAOjB,EAAEzc,EAAEF,EAAE4d,OAAO,EAAE,KAAK5d,EAAE4d,MAAM,EAAE1d,EAAE0W,OAAOvQ,IAAInG,EAAE0W,OAAOvQ,GAAG,IAAInG,EAAEic,SAAS,GAAGD,EAAElc,GAAG,IAAIA,EAAE+X,UAAU,OAAO7X,EAAEkf,YAAY,EAA3wV,OAAoxV,GAAG,IAAIpf,EAAEyY,UAAUuD,EAAExb,IAAIwb,EAAEjc,IAAnzV,IAAuzVS,EAAM,OAAO+F,EAAEvG,GAAG,GAAG,GAAG,MAAME,EAAE0W,QAAQ,IAAI5W,EAAEyY,SAAS,OAAOlS,EAAEvG,GAAG,GAAG,GAAG,IAAIA,EAAEyY,UAAU,IAAIvY,EAAEmd,WAA15V,IAAq6V7c,GAAO,MAAMN,EAAE0W,OAAO,CAAC,IAAIhX,EAAE,IAAIM,EAAEqX,SAAS,SAASvX,EAAEQ,GAAG,IAAI,IAAIT,IAAI,CAAC,GAAG,IAAIC,EAAEqd,YAAYE,EAAEvd,GAAG,IAAIA,EAAEqd,WAAW,CAAC,GAAxhW,IAA2hW7c,EAAM,OAAj8V,EAA08V,MAAM,GAAGR,EAAEme,aAAa,EAAEpe,EAAED,EAAEse,UAAUpe,EAAE,EAAEA,EAAEgW,OAAOhW,EAAE0c,WAAW1c,EAAEqd,YAAYrd,EAAE0c,WAAW3c,IAAIwc,EAAEvc,GAAE,GAAI,IAAIA,EAAE8X,KAAKC,WAAW,OAAzkW,EAAklW,OAAO/X,EAAE8d,OAAO,EAA9rW,IAAgsWtd,GAAO+b,EAAEvc,GAAE,GAAI,IAAIA,EAAE8X,KAAKC,UAAtnW,EAAI,GAAioW/X,EAAEse,WAAW/B,EAAEvc,GAAE,GAAI,IAAIA,EAAE8X,KAAKC,WAA7qW,EAAI,EAA62V,CAA4U7X,EAAEM,GAAG,IAAIN,EAAEqX,SAAS,SAASvX,EAAEQ,GAAG,IAAI,IAAIT,EAAEG,EAAEG,EAAEX,EAAEC,EAAEK,EAAEgW,SAAS,CAAC,GAAGhW,EAAEqd,WAAW1X,EAAE,CAAC,GAAG4X,EAAEvd,GAAGA,EAAEqd,WAAW1X,GAAr4W,IAAw4WnF,EAAM,OAA9yW,EAAuzW,GAAG,IAAIR,EAAEqd,UAAU,MAAM,GAAGrd,EAAEme,aAAa,EAAEne,EAAEqd,WAAn4W,GAAi5W,EAAErd,EAAE0c,WAAWxc,EAAEP,EAAEU,EAAEL,EAAE0c,SAAS,MAAM/c,IAAIU,IAAIH,IAAIP,IAAIU,IAAIH,IAAIP,IAAIU,GAAG,CAACX,EAAEM,EAAE0c,SAAS/W,EAAE,UAAUzF,IAAIP,IAAIU,IAAIH,IAAIP,IAAIU,IAAIH,IAAIP,IAAIU,IAAIH,IAAIP,IAAIU,IAAIH,IAAIP,IAAIU,IAAIH,IAAIP,IAAIU,IAAIH,IAAIP,IAAIU,IAAIH,IAAIP,IAAIU,IAAIA,EAAEX,GAAGM,EAAEme,aAAaxY,GAAGjG,EAAEW,GAAGL,EAAEme,aAAane,EAAEqd,YAAYrd,EAAEme,aAAane,EAAEqd,WAAW,GAAGrd,EAAEme,cAA1qX,GAA2rXpe,EAAED,EAAEse,UAAUpe,EAAE,EAAEA,EAAEme,aAA/sX,GAA+tXne,EAAEqd,WAAWrd,EAAEme,aAAane,EAAE0c,UAAU1c,EAAEme,aAAane,EAAEme,aAAa,IAAIpe,EAAED,EAAEse,UAAUpe,EAAE,EAAEA,EAAEgW,OAAOhW,EAAE0c,WAAW1c,EAAEqd,YAAYrd,EAAE0c,YAAY3c,IAAIwc,EAAEvc,GAAE,GAAI,IAAIA,EAAE8X,KAAKC,WAAW,OAAl3X,EAA23X,OAAO/X,EAAE8d,OAAO,EAAv+X,IAAy+Xtd,GAAO+b,EAAEvc,GAAE,GAAI,IAAIA,EAAE8X,KAAKC,UAA/5X,EAAI,GAA06X/X,EAAEse,WAAW/B,EAAEvc,GAAE,GAAI,IAAIA,EAAE8X,KAAKC,WAAt9X,EAAI,EAA6sW,CAAqxB7X,EAAEM,GAAGX,EAAEK,EAAEqE,OAAOwa,KAAK7e,EAAEM,GAAG,GAAx/X,IAA2/XZ,GAAv/X,IAA8/XA,IAAQM,EAAE0W,OAAO,KAA3hY,IAAgiYhX,GAAxhY,IAA+hYA,EAAM,OAAO,IAAII,EAAE+X,YAAY7X,EAAEkf,YAAY,GAA5qY,EAAirY,GAArlY,IAAwlYxf,IAAQ,IAAIY,EAAEV,EAAEyhB,UAAUrhB,GAAG,IAAIM,IAAIV,EAAE0hB,iBAAiBthB,EAAE,EAAE,GAAE,GAAI,IAAIM,IAAIyb,EAAE/b,EAAEwd,MAAM,IAAIxd,EAAEmd,YAAYnd,EAAEwc,SAAS,EAAExc,EAAEuc,YAAY,EAAEvc,EAAE4d,OAAO,KAAK5B,EAAElc,GAAG,IAAIA,EAAE+X,WAAW,OAAO7X,EAAEkf,YAAY,EAAh3Y,EAAo3Y,OAAx3Y,IAA+3Y5e,EAA33Y,EAAm4YN,EAAEyd,MAAM,EAAE,GAAG,IAAIzd,EAAEyd,MAAMhB,EAAEzc,EAAE,IAAIF,EAAE4d,OAAOjB,EAAEzc,EAAEF,EAAE4d,OAAO,EAAE,KAAKjB,EAAEzc,EAAEF,EAAE4d,OAAO,GAAG,KAAKjB,EAAEzc,EAAEF,EAAE4d,OAAO,GAAG,KAAKjB,EAAEzc,EAAE,IAAIF,EAAE6d,UAAUlB,EAAEzc,EAAEF,EAAE6d,UAAU,EAAE,KAAKlB,EAAEzc,EAAEF,EAAE6d,UAAU,GAAG,KAAKlB,EAAEzc,EAAEF,EAAE6d,UAAU,GAAG,OAAOjB,EAAE1c,EAAEF,EAAE4d,QAAQ,IAAIhB,EAAE1c,EAAE,MAAMF,EAAE4d,QAAQ1B,EAAElc,GAAG,EAAEE,EAAEyd,OAAOzd,EAAEyd,MAAMzd,EAAEyd,MAAM,IAAIzd,EAAEic,QAAppZ,EAA8pZ,IAAIpc,EAAEkZ,WAAW,SAASjZ,GAAG,IAAIQ,EAAE,OAAOR,GAAGA,EAAEkW,MAAhoZ,MAAuoZ1V,EAAER,EAAEkW,MAAMU,SAAa,KAAKpW,GAAG,KAAKA,GAAG,KAAKA,GAAG,MAAMA,GAAGA,IAAI6F,GAAG,MAAM7F,EAAE+F,EAAEvG,EAAEmF,IAAInF,EAAEkW,MAAM,KAAK1V,IAAI6F,EAAEE,EAAEvG,GAAG,GAA3zZ,GAAi0ZmF,GAAGpF,EAAEsY,qBAAqB,SAASrY,EAAEQ,GAAG,IAAIT,EAAEG,EAAEG,EAAEX,EAAEC,EAAEC,EAAEC,EAAEC,EAAEG,EAAEO,EAAED,OAAO,IAAIP,IAAIA,EAAEkW,MAAM,OAAO/Q,EAAE,GAAG,KAAKzF,GAAGK,EAAEC,EAAEkW,OAAOyH,OAAO,IAAIje,GAAr3Z,KAAw3ZK,EAAE6W,QAAY7W,EAAEsd,UAAU,OAAOlY,EAAE,IAAI,IAAIzF,IAAIM,EAAE4d,MAAMnd,EAAET,EAAE4d,MAAMpd,EAAEP,EAAE,IAAIF,EAAE4d,KAAK,EAAE1d,GAAGF,EAAEkd,SAAS,IAAIvd,IAAIuc,EAAElc,EAAE2d,MAAM3d,EAAE2c,SAAS,EAAE3c,EAAE0c,YAAY,EAAE1c,EAAE+d,OAAO,GAAGhe,EAAE,IAAIY,EAAEiY,KAAK5Y,EAAEkd,QAAQvc,EAAEyZ,SAASra,EAAEU,EAAEP,EAAEF,EAAEkd,OAAOld,EAAEkd,OAAO,GAAGzc,EAAEV,EAAEG,EAAEF,EAAEkd,QAAQtd,EAAEK,EAAEyY,SAAS7Y,EAAEI,EAAEwY,QAAQ3Y,EAAEG,EAAEuY,MAAMvY,EAAEyY,SAASxY,EAAED,EAAEwY,QAAQ,EAAExY,EAAEuY,MAAM/X,EAAE+c,EAAExd,GAAGA,EAAEsd,WAA/ra,GAA6sa,CAAC,IAAInd,EAAEH,EAAE2c,SAASrc,EAAEN,EAAEsd,UAAU,EAAMtd,EAAEge,OAAOhe,EAAEge,OAAOhe,EAAEie,WAAWje,EAAEiW,OAAO9V,EAA3xa,EAA+xa,IAAIH,EAAEke,UAAUle,EAAEod,KAAKjd,EAAEH,EAAEmd,QAAQnd,EAAE2d,KAAK3d,EAAEge,OAAOhe,EAAE2d,KAAK3d,EAAEge,OAAO7d,EAAEA,MAAMG,IAAIN,EAAE2c,SAASxc,EAAEH,EAAEsd,UAAU3X,EAAI6X,EAAExd,GAAG,OAAOA,EAAE2c,UAAU3c,EAAEsd,UAAUtd,EAAE0c,YAAY1c,EAAE2c,SAAS3c,EAAE+d,OAAO/d,EAAEsd,UAAUtd,EAAEsd,UAAU,EAAEtd,EAAEoe,aAAape,EAAEgd,YAAYrX,EAAI3F,EAAE0e,gBAAgB,EAAEze,EAAEwY,QAAQ5Y,EAAEI,EAAEuY,MAAM1Y,EAAEG,EAAEyY,SAAS9Y,EAAEI,EAAE4d,KAAKje,EAArob,GAA0obK,EAAE0hB,YAAY,sCAAsC,CAAC,kBAAkB,GAAG,YAAY,GAAG,UAAU,GAAG,aAAa,GAAG,UAAU,KAAK,GAAG,CAAC,SAASzhB,EAAEQ,EAAET,GAAG,aAAaS,EAAEnB,QAAQ,WAAWI,KAAKyhB,KAAK,EAAEzhB,KAAK4hB,KAAK,EAAE5hB,KAAKiiB,OAAO,EAAEjiB,KAAK6hB,GAAG,EAAE7hB,KAAK2hB,MAAM,KAAK3hB,KAAKkiB,UAAU,EAAEliB,KAAKwF,KAAK,GAAGxF,KAAK4D,QAAQ,GAAG5D,KAAK0hB,KAAK,EAAE1hB,KAAKmiB,MAAK,IAAK,IAAI,GAAG,CAAC,SAAS5hB,EAAEQ,EAAET,GAAG,aAAaS,EAAEnB,QAAQ,SAASW,EAAEQ,GAAG,IAAIT,EAAEG,EAAEG,EAAEX,EAAEC,EAAEC,EAAEC,EAAEC,EAAEG,EAAEY,EAAEH,EAAED,EAAEE,EAAEuE,EAAEC,EAAEC,EAAEC,EAAEC,EAAEC,EAAEC,EAAEC,EAAEC,EAAEC,EAAEC,EAAEC,EAAE9F,EAAEC,EAAEkW,MAAMhW,EAAEF,EAAEwY,QAAQ5S,EAAE5F,EAAEuY,MAAMlY,EAAEH,GAAGF,EAAEyY,SAAS,GAAG/Y,EAAEM,EAAE4Y,SAAS/S,EAAE7F,EAAE0Y,OAAO/Y,EAAED,GAAGc,EAAER,EAAE+X,WAAWnY,EAAEF,GAAGM,EAAE+X,UAAU,KAAKlY,EAAEE,EAAE8hB,KAAK/hB,EAAEC,EAAE+hB,MAAM7hB,EAAEF,EAAEgiB,MAAMlhB,EAAEd,EAAEiiB,MAAMthB,EAAEX,EAAEiW,OAAOvV,EAAEV,EAAEkiB,KAAKthB,EAAEZ,EAAEmiB,KAAKhd,EAAEnF,EAAEoiB,QAAQhd,EAAEpF,EAAEqiB,SAAShd,GAAG,GAAGrF,EAAEsiB,SAAS,EAAEhd,GAAG,GAAGtF,EAAEuiB,UAAU,EAAEtiB,EAAE,EAAE,CAACW,EAAE,KAAKF,GAAGmF,EAAE1F,MAAMS,EAAEA,GAAG,EAAEF,GAAGmF,EAAE1F,MAAMS,EAAEA,GAAG,GAAG2E,EAAEJ,EAAEzE,EAAE2E,GAAG5E,EAAE,OAAO,CAAC,GAAGC,KAAK8E,EAAED,IAAI,GAAG3E,GAAG4E,EAAE,IAAKA,EAAED,IAAI,GAAG,KAAKO,EAAEnG,KAAK,MAAM4F,MAAM,CAAC,KAAK,GAAGC,GAAG,CAAC,GAAG,IAAI,GAAGA,GAAG,CAACD,EAAEJ,GAAG,MAAMI,IAAI7E,GAAG,GAAG8E,GAAG,IAAI,SAAS/E,EAAE,GAAG,GAAG+E,EAAE,CAACxF,EAAEwiB,KAAK,GAAG,MAAMviB,EAAEA,EAAE2X,IAAI,8BAA8B5X,EAAEwiB,KAAK,GAAG,MAAMviB,EAAEwF,EAAE,MAAMF,GAAGC,GAAG,MAAM5E,EAAE4E,IAAI9E,GAAGmF,EAAE1F,MAAMS,EAAEA,GAAG,GAAG6E,GAAG/E,GAAG,GAAG8E,GAAG,EAAE9E,KAAK8E,EAAE5E,GAAG4E,GAAG5E,EAAE,KAAKF,GAAGmF,EAAE1F,MAAMS,EAAEA,GAAG,EAAEF,GAAGmF,EAAE1F,MAAMS,EAAEA,GAAG,GAAG2E,EAAEH,EAAE1E,EAAE4E,GAAGtF,EAAE,OAAO,CAAC,GAAGU,KAAK8E,EAAED,IAAI,GAAG3E,GAAG4E,IAAI,IAAIA,EAAED,IAAI,GAAG,MAAM,CAAC,GAAG,IAAI,GAAGC,GAAG,CAACD,EAAEH,GAAG,MAAMG,IAAI7E,GAAG,GAAG8E,GAAG,IAAI,SAASxF,EAAEC,EAAE2X,IAAI,wBAAwB5X,EAAEwiB,KAAK,GAAG,MAAMviB,EAAE,GAAGyF,EAAE,MAAMH,EAAE3E,GAAG4E,GAAG,MAAM9E,GAAGmF,EAAE1F,MAAMS,GAAGA,GAAG,GAAG4E,IAAI9E,GAAGmF,EAAE1F,MAAMS,EAAEA,GAAG,IAAId,GAAG4F,GAAGhF,GAAG,GAAG8E,GAAG,GAAG,CAACvF,EAAE2X,IAAI,gCAAgC5X,EAAEwiB,KAAK,GAAG,MAAMviB,EAAE,GAAGS,KAAK8E,EAAE5E,GAAG4E,GAAGA,EAAE7F,EAAEC,GAAG8F,EAAE,CAAC,GAAGxF,GAAGsF,EAAEE,EAAEF,IAAIxF,EAAEyiB,KAAK,CAACxiB,EAAE2X,IAAI,gCAAgC5X,EAAEwiB,KAAK,GAAG,MAAMviB,EAAE,GAAG2F,EAAEjF,GAAGgF,EAAE,KAAK7E,GAAG,GAAG6E,GAAG5F,EAAEyF,EAAEA,EAAEC,EAAE,CAAC,IAAIA,GAAGD,EAAEM,EAAEnG,KAAKgB,EAAEgF,OAAOH,IAAIG,EAAEhG,EAAE+F,EAAEE,EAAEE,QAAQ,GAAGhF,EAAE0E,GAAG,GAAGG,GAAG5F,EAAEe,EAAE0E,GAAGA,GAAG1E,GAAG2E,EAAE,CAAC,IAAIA,GAAGD,EAAEM,EAAEnG,KAAKgB,EAAEgF,OAAOH,IAAI,GAAGG,EAAE,EAAE7E,EAAE2E,EAAE,CAAC,IAAIA,GAAGD,EAAE1E,EAAEgF,EAAEnG,KAAKgB,EAAEgF,OAAOH,IAAIG,EAAEhG,EAAE+F,EAAEE,EAAEE,SAAS,GAAGH,GAAG7E,EAAE0E,EAAEA,EAAEC,EAAE,CAAC,IAAIA,GAAGD,EAAEM,EAAEnG,KAAKgB,EAAEgF,OAAOH,IAAIG,EAAEhG,EAAE+F,EAAEE,EAAEE,EAAE,KAAK,EAAEL,GAAGK,EAAEnG,KAAKiG,EAAED,KAAKG,EAAEnG,KAAKiG,EAAED,KAAKG,EAAEnG,KAAKiG,EAAED,KAAKF,GAAG,EAAEA,IAAIK,EAAEnG,KAAKiG,EAAED,KAAK,EAAEF,IAAIK,EAAEnG,KAAKiG,EAAED,WAAW,CAAC,IAAIA,EAAEhG,EAAE+F,EAAEI,EAAEnG,KAAKmG,EAAEH,KAAKG,EAAEnG,KAAKmG,EAAEH,KAAKG,EAAEnG,KAAKmG,EAAEH,KAAK,GAAGF,GAAG,KAAKA,IAAIK,EAAEnG,KAAKmG,EAAEH,KAAK,EAAEF,IAAIK,EAAEnG,KAAKmG,EAAEH,OAAO,OAAO,aAAaxF,EAAEG,GAAGX,EAAEE,GAAGM,GAAGsF,EAAE7E,GAAG,EAAEF,IAAI,IAAIE,GAAG6E,GAAG,IAAI,EAAExF,EAAEwY,QAAQtY,EAAEF,EAAE4Y,SAASlZ,EAAEM,EAAEyY,SAASvY,EAAEG,EAAEA,EAAEH,EAAE,EAAE,GAAGA,EAAEG,GAAGL,EAAE+X,UAAUrY,EAAEE,EAAEA,EAAEF,EAAE,IAAI,KAAKA,EAAEE,GAAGG,EAAEkiB,KAAKxhB,EAAEV,EAAEmiB,KAAKvhB,IAAI,IAAI,GAAG,CAAC,SAASX,EAAEQ,EAAET,GAAG,aAAa,IAAIiF,EAAEhF,EAAE,mBAAmB8E,EAAE9E,EAAE,aAAaoG,EAAEpG,EAAE,WAAWuG,EAAEvG,EAAE,aAAagc,EAAEhc,EAAE,cAA0B2c,GAAG,EAAkB,SAASE,EAAE7c,GAAG,OAAOA,IAAI,GAAG,MAAMA,IAAI,EAAE,SAAS,MAAMA,IAAI,KAAK,IAAIA,IAAI,IAAI,SAASN,IAAID,KAAK8iB,KAAK,EAAE9iB,KAAKgjB,MAAK,EAAGhjB,KAAKke,KAAK,EAAEle,KAAKijB,UAAS,EAAGjjB,KAAKkjB,MAAM,EAAEljB,KAAKoiB,KAAK,EAAEpiB,KAAKmjB,MAAM,EAAEnjB,KAAKojB,MAAM,EAAEpjB,KAAKie,KAAK,KAAKje,KAAKqjB,MAAM,EAAErjB,KAAKqiB,MAAM,EAAEriB,KAAKsiB,MAAM,EAAEtiB,KAAKuiB,MAAM,EAAEviB,KAAKuW,OAAO,KAAKvW,KAAKwiB,KAAK,EAAExiB,KAAKyiB,KAAK,EAAEziB,KAAKc,OAAO,EAAEd,KAAKsjB,OAAO,EAAEtjB,KAAK2hB,MAAM,EAAE3hB,KAAK0iB,QAAQ,KAAK1iB,KAAK2iB,SAAS,KAAK3iB,KAAK4iB,QAAQ,EAAE5iB,KAAK6iB,SAAS,EAAE7iB,KAAKujB,MAAM,EAAEvjB,KAAKwjB,KAAK,EAAExjB,KAAKyjB,MAAM,EAAEzjB,KAAK0jB,KAAK,EAAE1jB,KAAK2jB,KAAK,KAAK3jB,KAAK4jB,KAAK,IAAIre,EAAE0V,MAAM,KAAKjb,KAAK6jB,KAAK,IAAIte,EAAE0V,MAAM,KAAKjb,KAAK8jB,OAAO,KAAK9jB,KAAK+jB,QAAQ,KAAK/jB,KAAK+iB,KAAK,EAAE/iB,KAAKgkB,KAAK,EAAEhkB,KAAKikB,IAAI,EAAE,SAAS/jB,EAAEK,GAAG,IAAIQ,EAAE,OAAOR,GAAGA,EAAEkW,OAAO1V,EAAER,EAAEkW,MAAMlW,EAAE6d,SAAS7d,EAAEsc,UAAU9b,EAAEqiB,MAAM,EAAE7iB,EAAE2X,IAAI,GAAGnX,EAAEmd,OAAO3d,EAAE4d,MAAM,EAAEpd,EAAEmd,MAAMnd,EAAE+hB,KAA9tB,EAAquB/hB,EAAEiiB,KAAK,EAAEjiB,EAAEkiB,SAAS,EAAEliB,EAAEqhB,KAAK,MAAMrhB,EAAEkd,KAAK,KAAKld,EAAEyhB,KAAK,EAAEzhB,EAAE0hB,KAAK,EAAE1hB,EAAE2hB,QAAQ3hB,EAAE+iB,OAAO,IAAIve,EAAE2V,MAA3zB,KAAo0Bna,EAAE4hB,SAAS5hB,EAAEgjB,QAAQ,IAAIxe,EAAE2V,MAAz1B,KAAk2Bna,EAAEgiB,KAAK,EAAEhiB,EAAEijB,MAAM,EAAt4B,GAA24B9G,EAAE,SAAS/c,EAAEI,GAAG,IAAIQ,EAAE,OAAOR,GAAGA,EAAEkW,QAAQ1V,EAAER,EAAEkW,OAAO4L,MAAM,EAAEthB,EAAEuhB,MAAM,EAAEvhB,EAAEwhB,MAAM,EAAEriB,EAAEK,IAAI2c,EAAE,SAAS9c,EAAEG,EAAEQ,GAAG,IAAIT,EAAEG,EAAE,OAAOF,GAAGA,EAAEkW,OAAOhW,EAAEF,EAAEkW,MAAM1V,EAAE,GAAGT,EAAE,EAAES,GAAGA,IAAIT,EAAE,GAAGS,GAAG,GAAGA,EAAE,KAAKA,GAAG,KAAKA,IAAIA,EAAE,GAAG,GAAGA,GAAGmc,GAAG,OAAOzc,EAAE8V,QAAQ9V,EAAE4iB,QAAQtiB,IAAIN,EAAE8V,OAAO,MAAM9V,EAAEyd,KAAK5d,EAAEG,EAAE4iB,MAAMtiB,EAAEZ,EAAEI,KAAK2c,EAAE,SAAS7c,EAAEE,EAAEQ,GAAG,IAAIT,EAAEG,EAAE,OAAOF,GAAGE,EAAE,IAAIR,GAAGM,EAAEkW,MAAMhW,GAAG8V,OAAO,KAA5tC,KAAkuCjW,EAAEF,EAAEG,EAAEQ,MAAUR,EAAEkW,MAAM,MAAMnW,GAAG4c,EAAE,IAAI1c,EAAEY,EAAEH,GAAE,EAAG,SAAS6c,EAAEvd,GAAG,GAAGU,EAAE,CAAC,IAAIF,EAAE,IAAIP,EAAE,IAAI+E,EAAE2V,MAAM,KAAK9Z,EAAE,IAAImE,EAAE2V,MAAM,IAAIna,EAAE,EAAEA,EAAE,KAAKR,EAAEqjB,KAAK7iB,KAAK,EAAE,KAAKA,EAAE,KAAKR,EAAEqjB,KAAK7iB,KAAK,EAAE,KAAKA,EAAE,KAAKR,EAAEqjB,KAAK7iB,KAAK,EAAE,KAAKA,EAAE,KAAKR,EAAEqjB,KAAK7iB,KAAK,EAAE,IAAIwb,EAAx8C,EAA48Chc,EAAEqjB,KAAK,EAAE,IAAIpjB,EAAE,EAAED,EAAEsjB,KAAK,CAACpB,KAAK,IAAI1hB,EAAE,EAAEA,EAAE,IAAIR,EAAEqjB,KAAK7iB,KAAK,EAAEwb,EAAlgD,EAAsgDhc,EAAEqjB,KAAK,EAAE,GAAGxiB,EAAE,EAAEb,EAAEsjB,KAAK,CAACpB,KAAK,IAAIxhB,GAAE,EAAGV,EAAEmiB,QAAQliB,EAAED,EAAEqiB,QAAQ,EAAEriB,EAAEoiB,SAASvhB,EAAEb,EAAEsiB,SAAS,EAAE,SAASpE,EAAEle,EAAEQ,EAAET,EAAEG,GAAG,IAAIG,EAAEX,EAAEM,EAAEkW,MAAM,OAAO,OAAOxW,EAAEsW,SAAStW,EAAEoiB,MAAM,GAAGpiB,EAAEojB,MAAMpjB,EAAEsiB,MAAM,EAAEtiB,EAAEqiB,MAAM,EAAEriB,EAAEsW,OAAO,IAAIhR,EAAE2T,KAAKjZ,EAAEoiB,QAAQ5hB,GAAGR,EAAEoiB,OAAO9c,EAAEmV,SAASza,EAAEsW,OAAOxV,EAAET,EAAEL,EAAEoiB,MAAMpiB,EAAEoiB,MAAM,GAAGpiB,EAAEsiB,MAAM,EAAEtiB,EAAEqiB,MAAMriB,EAAEoiB,QAAQ5hB,GAAGG,EAAEX,EAAEoiB,MAAMpiB,EAAEsiB,SAAS3hB,EAAEH,GAAG8E,EAAEmV,SAASza,EAAEsW,OAAOxV,EAAET,EAAEG,EAAEG,EAAEX,EAAEsiB,QAAQ9hB,GAAGG,IAAI2E,EAAEmV,SAASza,EAAEsW,OAAOxV,EAAET,EAAEG,EAAEA,EAAE,GAAGR,EAAEsiB,MAAM9hB,EAAER,EAAEqiB,MAAMriB,EAAEoiB,QAAQpiB,EAAEsiB,OAAO3hB,EAAEX,EAAEsiB,QAAQtiB,EAAEoiB,QAAQpiB,EAAEsiB,MAAM,GAAGtiB,EAAEqiB,MAAMriB,EAAEoiB,QAAQpiB,EAAEqiB,OAAO1hB,KAAK,EAAEN,EAAE4jB,aAAa/jB,EAAEG,EAAE6jB,cAAc/jB,EAAEE,EAAE8jB,iBAAiBlkB,EAAEI,EAAE+jB,YAAY,SAAS9jB,GAAG,OAAOF,EAAEE,EAAE,KAAKD,EAAEsZ,aAAavZ,EAAEC,EAAE4Z,QAAQ,SAAS3Z,EAAEQ,GAAG,IAAIT,EAAEG,EAAEG,EAAEX,EAAEC,EAAEC,EAAEC,EAAEC,EAAEG,EAAEY,EAAEH,EAAED,EAAEE,EAAEuE,EAAEC,EAAEC,EAAEC,EAAEC,EAAEC,EAAEC,EAAEC,EAAEC,EAAEC,EAAEC,EAAEC,EAAE,EAAEQ,EAAE,IAAIrB,EAAE2T,KAAK,GAAGjU,EAAE,CAAC,GAAG,GAAG,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI,IAAI1E,IAAIA,EAAEkW,QAAQlW,EAAE0Y,SAAS1Y,EAAEuY,OAAO,IAAIvY,EAAEyY,SAAS,OAAOkE,EAAE,MAAM5c,EAAEC,EAAEkW,OAAOqM,OAAOxiB,EAAEwiB,KAAK,IAAI5iB,EAAEK,EAAE4Y,SAASvY,EAAEL,EAAE0Y,OAAO7Y,EAAEG,EAAE+X,UAAUrY,EAAEM,EAAEwY,QAAQtY,EAAEF,EAAEuY,MAAM3Y,EAAEI,EAAEyY,SAAS3Y,EAAEC,EAAEkiB,KAAKhiB,EAAEF,EAAEmiB,KAAKrhB,EAAEjB,EAAEc,EAAEb,EAAE6F,EAA18E,EAA88E1F,EAAE,OAAO,OAAOD,EAAEwiB,MAAM,KAA79E,EAAo+E,GAAG,IAAIxiB,EAAE4d,KAAK,CAAC5d,EAAEwiB,KAAK,GAAG,MAAM,KAAKtiB,EAAE,IAAI,CAAC,GAAG,IAAIL,EAAE,MAAMI,EAAEJ,IAAIE,GAAGI,EAAER,MAAMO,EAAEA,GAAG,EAAE,GAAG,EAAEF,EAAE4d,MAAM,QAAQ7d,EAAE,CAACuG,EAAEtG,EAAE6iB,MAAM,GAAG,IAAI9iB,EAAEuG,EAAE,GAAGvG,IAAI,EAAE,IAAIC,EAAE6iB,MAAMxc,EAAErG,EAAE6iB,MAAMvc,EAAE,EAAE,GAAGpG,EAAEH,EAAE,EAAEC,EAAEwiB,KAAK,EAAE,MAAM,GAAGxiB,EAAE4iB,MAAM,EAAE5iB,EAAE2d,OAAO3d,EAAE2d,KAAKkE,MAAK,KAAM,EAAE7hB,EAAE4d,UAAU,IAAI7d,IAAI,IAAIA,GAAG,IAAI,GAAG,CAACE,EAAE2X,IAAI,yBAAyB5X,EAAEwiB,KAAK,GAAG,MAAM,GAAG,IAAI,GAAGziB,GAAG,CAACE,EAAE2X,IAAI,6BAA6B5X,EAAEwiB,KAAK,GAAG,MAAM,GAAGtiB,GAAG,EAAEwF,EAAE,GAAG,IAAI3F,KAAK,IAAI,IAAIC,EAAE+iB,MAAM/iB,EAAE+iB,MAAMrd,OAAO,GAAGA,EAAE1F,EAAE+iB,MAAM,CAAC9iB,EAAE2X,IAAI,sBAAsB5X,EAAEwiB,KAAK,GAAG,MAAMxiB,EAAE8hB,KAAK,GAAGpc,EAAEzF,EAAE4d,MAAM7d,EAAE6iB,MAAM,EAAE7iB,EAAEwiB,KAAK,IAAIziB,EAAE,GAAG,GAAGG,EAAEH,EAAE,EAAE,MAAM,KAAK,EAAE,KAAKG,EAAE,IAAI,CAAC,GAAG,IAAIL,EAAE,MAAMI,EAAEJ,IAAIE,GAAGI,EAAER,MAAMO,EAAEA,GAAG,EAAE,GAAGF,EAAE4iB,MAAM7iB,EAAE,IAAI,IAAIC,EAAE4iB,OAAO,CAAC3iB,EAAE2X,IAAI,6BAA6B5X,EAAEwiB,KAAK,GAAG,MAAM,GAAG,MAAMxiB,EAAE4iB,MAAM,CAAC3iB,EAAE2X,IAAI,2BAA2B5X,EAAEwiB,KAAK,GAAG,MAAMxiB,EAAE2d,OAAO3d,EAAE2d,KAAKwD,KAAKphB,GAAG,EAAE,GAAG,IAAIC,EAAE4iB,QAAQtc,EAAE,GAAG,IAAIvG,EAAEuG,EAAE,GAAGvG,IAAI,EAAE,IAAIC,EAAE6iB,MAAMxc,EAAErG,EAAE6iB,MAAMvc,EAAE,EAAE,IAAIpG,EAAEH,EAAE,EAAEC,EAAEwiB,KAAK,EAAE,KAAK,EAAE,KAAKtiB,EAAE,IAAI,CAAC,GAAG,IAAIL,EAAE,MAAMI,EAAEJ,IAAIE,GAAGI,EAAER,MAAMO,EAAEA,GAAG,EAAEF,EAAE2d,OAAO3d,EAAE2d,KAAK2D,KAAKvhB,GAAG,IAAIC,EAAE4iB,QAAQtc,EAAE,GAAG,IAAIvG,EAAEuG,EAAE,GAAGvG,IAAI,EAAE,IAAIuG,EAAE,GAAGvG,IAAI,GAAG,IAAIuG,EAAE,GAAGvG,IAAI,GAAG,IAAIC,EAAE6iB,MAAMxc,EAAErG,EAAE6iB,MAAMvc,EAAE,EAAE,IAAIpG,EAAEH,EAAE,EAAEC,EAAEwiB,KAAK,EAAE,KAAK,EAAE,KAAKtiB,EAAE,IAAI,CAAC,GAAG,IAAIL,EAAE,MAAMI,EAAEJ,IAAIE,GAAGI,EAAER,MAAMO,EAAEA,GAAG,EAAEF,EAAE2d,OAAO3d,EAAE2d,KAAKgE,OAAO,IAAI5hB,EAAEC,EAAE2d,KAAK4D,GAAGxhB,GAAG,GAAG,IAAIC,EAAE4iB,QAAQtc,EAAE,GAAG,IAAIvG,EAAEuG,EAAE,GAAGvG,IAAI,EAAE,IAAIC,EAAE6iB,MAAMxc,EAAErG,EAAE6iB,MAAMvc,EAAE,EAAE,IAAIpG,EAAEH,EAAE,EAAEC,EAAEwiB,KAAK,EAAE,KAAK,EAAE,GAAG,KAAKxiB,EAAE4iB,MAAM,CAAC,KAAK1iB,EAAE,IAAI,CAAC,GAAG,IAAIL,EAAE,MAAMI,EAAEJ,IAAIE,GAAGI,EAAER,MAAMO,EAAEA,GAAG,EAAEF,EAAEQ,OAAOT,EAAEC,EAAE2d,OAAO3d,EAAE2d,KAAKiE,UAAU7hB,GAAG,IAAIC,EAAE4iB,QAAQtc,EAAE,GAAG,IAAIvG,EAAEuG,EAAE,GAAGvG,IAAI,EAAE,IAAIC,EAAE6iB,MAAMxc,EAAErG,EAAE6iB,MAAMvc,EAAE,EAAE,IAAIpG,EAAEH,EAAE,OAAOC,EAAE2d,OAAO3d,EAAE2d,KAAK0D,MAAM,MAAMrhB,EAAEwiB,KAAK,EAAE,KAAK,EAAE,GAAG,KAAKxiB,EAAE4iB,QAAQ/iB,GAAGa,EAAEV,EAAEQ,UAAUE,EAAEb,GAAGa,IAAIV,EAAE2d,OAAOjY,EAAE1F,EAAE2d,KAAKiE,UAAU5hB,EAAEQ,OAAOR,EAAE2d,KAAK0D,QAAQrhB,EAAE2d,KAAK0D,MAAM,IAAI5f,MAAMzB,EAAE2d,KAAKiE,YAAY3c,EAAEmV,SAASpa,EAAE2d,KAAK0D,MAAMlhB,EAAER,EAAEe,EAAEgF,IAAI,IAAI1F,EAAE4iB,QAAQ5iB,EAAE6iB,MAAMxc,EAAErG,EAAE6iB,MAAM1iB,EAAEO,EAAEf,IAAIE,GAAGa,EAAEf,GAAGe,EAAEV,EAAEQ,QAAQE,GAAGV,EAAEQ,QAAQ,MAAMP,EAAED,EAAEQ,OAAO,EAAER,EAAEwiB,KAAK,EAAE,KAAK,EAAE,GAAG,KAAKxiB,EAAE4iB,MAAM,CAAC,GAAG,IAAI/iB,EAAE,MAAMI,EAAE,IAAIS,EAAE,EAAEgF,EAAEvF,EAAER,EAAEe,KAAKV,EAAE2d,MAAMjY,GAAG1F,EAAEQ,OAAO,QAAQR,EAAE2d,KAAKzY,MAAMN,OAAOC,aAAaa,IAAIA,GAAGhF,EAAEb,IAAI,GAAG,IAAIG,EAAE4iB,QAAQ5iB,EAAE6iB,MAAMxc,EAAErG,EAAE6iB,MAAM1iB,EAAEO,EAAEf,IAAIE,GAAGa,EAAEf,GAAGe,EAAEgF,EAAE,MAAMzF,OAAOD,EAAE2d,OAAO3d,EAAE2d,KAAKzY,KAAK,MAAMlF,EAAEQ,OAAO,EAAER,EAAEwiB,KAAK,EAAE,KAAK,EAAE,GAAG,KAAKxiB,EAAE4iB,MAAM,CAAC,GAAG,IAAI/iB,EAAE,MAAMI,EAAE,IAAIS,EAAE,EAAEgF,EAAEvF,EAAER,EAAEe,KAAKV,EAAE2d,MAAMjY,GAAG1F,EAAEQ,OAAO,QAAQR,EAAE2d,KAAKra,SAASsB,OAAOC,aAAaa,IAAIA,GAAGhF,EAAEb,IAAI,GAAG,IAAIG,EAAE4iB,QAAQ5iB,EAAE6iB,MAAMxc,EAAErG,EAAE6iB,MAAM1iB,EAAEO,EAAEf,IAAIE,GAAGa,EAAEf,GAAGe,EAAEgF,EAAE,MAAMzF,OAAOD,EAAE2d,OAAO3d,EAAE2d,KAAKra,QAAQ,MAAMtD,EAAEwiB,KAAK,EAAE,KAAK,EAAE,GAAG,IAAIxiB,EAAE4iB,MAAM,CAAC,KAAK1iB,EAAE,IAAI,CAAC,GAAG,IAAIL,EAAE,MAAMI,EAAEJ,IAAIE,GAAGI,EAAER,MAAMO,EAAEA,GAAG,EAAE,GAAGH,KAAK,MAAMC,EAAE6iB,OAAO,CAAC5iB,EAAE2X,IAAI,sBAAsB5X,EAAEwiB,KAAK,GAAG,MAAMtiB,EAAEH,EAAE,EAAEC,EAAE2d,OAAO3d,EAAE2d,KAAKyD,KAAKphB,EAAE4iB,OAAO,EAAE,EAAE5iB,EAAE2d,KAAKkE,MAAK,GAAI5hB,EAAE4d,MAAM7d,EAAE6iB,MAAM,EAAE7iB,EAAEwiB,KAAK,GAAG,MAAM,KAAK,GAAG,KAAKtiB,EAAE,IAAI,CAAC,GAAG,IAAIL,EAAE,MAAMI,EAAEJ,IAAIE,GAAGI,EAAER,MAAMO,EAAEA,GAAG,EAAED,EAAE4d,MAAM7d,EAAE6iB,MAAM/F,EAAE/c,GAAGG,EAAEH,EAAE,EAAEC,EAAEwiB,KAAK,GAAG,KAAK,GAAG,GAAG,IAAIxiB,EAAE2iB,SAAS,OAAO1iB,EAAE4Y,SAASjZ,EAAEK,EAAE+X,UAAUlY,EAAEG,EAAEwY,QAAQ9Y,EAAEM,EAAEyY,SAAS7Y,EAAEG,EAAEkiB,KAAKniB,EAAEC,EAAEmiB,KAAKjiB,EAAE,EAAED,EAAE4d,MAAM7d,EAAE6iB,MAAM,EAAE7iB,EAAEwiB,KAAK,GAAG,KAAK,GAAG,GAAG,IAAI/hB,GAAG,IAAIA,EAAE,MAAMR,EAAE,KAAK,GAAG,GAAGD,EAAE0iB,KAAK,CAAC3iB,KAAK,EAAEG,EAAEA,GAAG,EAAEA,EAAEF,EAAEwiB,KAAK,GAAG,MAAM,KAAKtiB,EAAE,GAAG,CAAC,GAAG,IAAIL,EAAE,MAAMI,EAAEJ,IAAIE,GAAGI,EAAER,MAAMO,EAAEA,GAAG,EAAE,OAAOF,EAAE0iB,KAAK,EAAE3iB,EAAEG,GAAG,EAAE,GAAGH,KAAK,IAAI,KAAK,EAAEC,EAAEwiB,KAAK,GAAG,MAAM,KAAK,EAAE,GAAGhF,EAAExd,GAAGA,EAAEwiB,KAAK,GAAG,IAAI/hB,EAAE,MAAMV,KAAK,EAAEG,GAAG,EAAE,MAAMD,EAAE,KAAK,EAAED,EAAEwiB,KAAK,GAAG,MAAM,KAAK,EAAEviB,EAAE2X,IAAI,qBAAqB5X,EAAEwiB,KAAK,GAAGziB,KAAK,EAAEG,GAAG,EAAE,MAAM,KAAK,GAAG,IAAIH,KAAK,EAAEG,EAAEA,GAAG,EAAEA,EAAEA,EAAE,IAAI,CAAC,GAAG,IAAIL,EAAE,MAAMI,EAAEJ,IAAIE,GAAGI,EAAER,MAAMO,EAAEA,GAAG,EAAE,IAAI,MAAMH,KAAKA,IAAI,GAAG,OAAO,CAACE,EAAE2X,IAAI,+BAA+B5X,EAAEwiB,KAAK,GAAG,MAAM,GAAGxiB,EAAEQ,OAAO,MAAMT,EAAEG,EAAEH,EAAE,EAAEC,EAAEwiB,KAAK,GAAG,IAAI/hB,EAAE,MAAMR,EAAE,KAAK,GAAGD,EAAEwiB,KAAK,GAAG,KAAK,GAAG,GAAG9hB,EAAEV,EAAEQ,OAAO,CAAC,GAAGX,EAAEa,IAAIA,EAAEb,GAAGC,EAAEY,IAAIA,EAAEZ,GAAG,IAAIY,EAAE,MAAMT,EAAEgF,EAAEmV,SAAS9Z,EAAEH,EAAER,EAAEe,EAAEd,GAAGC,GAAGa,EAAEf,GAAGe,EAAEZ,GAAGY,EAAEd,GAAGc,EAAEV,EAAEQ,QAAQE,EAAE,MAAMV,EAAEwiB,KAAK,GAAG,MAAM,KAAK,GAAG,KAAKtiB,EAAE,IAAI,CAAC,GAAG,IAAIL,EAAE,MAAMI,EAAEJ,IAAIE,GAAGI,EAAER,MAAMO,EAAEA,GAAG,EAAE,GAAGF,EAAEkjB,KAAK,KAAK,GAAGnjB,GAAGA,KAAK,EAAEG,GAAG,EAAEF,EAAEmjB,MAAM,GAAG,GAAGpjB,GAAGA,KAAK,EAAEG,GAAG,EAAEF,EAAEijB,MAAM,GAAG,GAAGljB,GAAGA,KAAK,EAAEG,GAAG,EAAE,IAAIF,EAAEkjB,MAAM,GAAGljB,EAAEmjB,MAAM,CAACljB,EAAE2X,IAAI,sCAAsC5X,EAAEwiB,KAAK,GAAG,MAAMxiB,EAAEojB,KAAK,EAAEpjB,EAAEwiB,KAAK,GAAG,KAAK,GAAG,KAAKxiB,EAAEojB,KAAKpjB,EAAEijB,OAAO,CAAC,KAAK/iB,EAAE,GAAG,CAAC,GAAG,IAAIL,EAAE,MAAMI,EAAEJ,IAAIE,GAAGI,EAAER,MAAMO,EAAEA,GAAG,EAAEF,EAAEsjB,KAAK3e,EAAE3E,EAAEojB,SAAS,EAAErjB,EAAEA,KAAK,EAAEG,GAAG,EAAE,KAAKF,EAAEojB,KAAK,IAAIpjB,EAAEsjB,KAAK3e,EAAE3E,EAAEojB,SAAS,EAAE,GAAGpjB,EAAEoiB,QAAQpiB,EAAEwjB,OAAOxjB,EAAEsiB,QAAQ,EAAE1c,EAAE,CAACuc,KAAKniB,EAAEsiB,SAAS3c,EAAEsW,EAAE,EAAEjc,EAAEsjB,KAAK,EAAE,GAAGtjB,EAAEoiB,QAAQ,EAAEpiB,EAAEujB,KAAK3d,GAAG5F,EAAEsiB,QAAQ1c,EAAEuc,KAAKxc,EAAE,CAAC1F,EAAE2X,IAAI,2BAA2B5X,EAAEwiB,KAAK,GAAG,MAAMxiB,EAAEojB,KAAK,EAAEpjB,EAAEwiB,KAAK,GAAG,KAAK,GAAG,KAAKxiB,EAAEojB,KAAKpjB,EAAEkjB,KAAKljB,EAAEmjB,OAAO,CAAC,KAAK9d,GAAGS,EAAE9F,EAAEoiB,QAAQriB,GAAG,GAAGC,EAAEsiB,SAAS,MAAM,GAAG,IAAIhd,EAAE,MAAMQ,KAAKV,EAAEU,IAAI,KAAK5F,IAAI,CAAC,GAAG,IAAIL,EAAE,MAAMI,EAAEJ,IAAIE,GAAGI,EAAER,MAAMO,EAAEA,GAAG,EAAE,GAAGoF,EAAE,GAAGvF,KAAKqF,EAAElF,GAAGkF,EAAEpF,EAAEsjB,KAAKtjB,EAAEojB,QAAQ9d,MAAM,CAAC,GAAG,KAAKA,EAAE,CAAC,IAAIO,EAAET,EAAE,EAAElF,EAAE2F,GAAG,CAAC,GAAG,IAAIhG,EAAE,MAAMI,EAAEJ,IAAIE,GAAGI,EAAER,MAAMO,EAAEA,GAAG,EAAE,GAAGH,KAAKqF,EAAElF,GAAGkF,EAAE,IAAIpF,EAAEojB,KAAK,CAACnjB,EAAE2X,IAAI,4BAA4B5X,EAAEwiB,KAAK,GAAG,MAAM9c,EAAE1F,EAAEsjB,KAAKtjB,EAAEojB,KAAK,GAAG1iB,EAAE,GAAG,EAAEX,GAAGA,KAAK,EAAEG,GAAG,OAAO,GAAG,KAAKoF,EAAE,CAAC,IAAIO,EAAET,EAAE,EAAElF,EAAE2F,GAAG,CAAC,GAAG,IAAIhG,EAAE,MAAMI,EAAEJ,IAAIE,GAAGI,EAAER,MAAMO,EAAEA,GAAG,EAAEA,GAAGkF,EAAEM,EAAE,EAAEhF,EAAE,GAAG,GAAGX,KAAKqF,IAAIrF,KAAK,EAAEG,GAAG,MAAM,CAAC,IAAI2F,EAAET,EAAE,EAAElF,EAAE2F,GAAG,CAAC,GAAG,IAAIhG,EAAE,MAAMI,EAAEJ,IAAIE,GAAGI,EAAER,MAAMO,EAAEA,GAAG,EAAEA,GAAGkF,EAAEM,EAAE,EAAEhF,EAAE,IAAI,KAAKX,KAAKqF,IAAIrF,KAAK,EAAEG,GAAG,EAAE,GAAGF,EAAEojB,KAAK1iB,EAAEV,EAAEkjB,KAAKljB,EAAEmjB,MAAM,CAACljB,EAAE2X,IAAI,4BAA4B5X,EAAEwiB,KAAK,GAAG,MAAM,KAAK9hB,KAAKV,EAAEsjB,KAAKtjB,EAAEojB,QAAQ1d,GAAG,GAAG,KAAK1F,EAAEwiB,KAAK,MAAM,GAAG,IAAIxiB,EAAEsjB,KAAK,KAAK,CAACrjB,EAAE2X,IAAI,uCAAuC5X,EAAEwiB,KAAK,GAAG,MAAM,GAAGxiB,EAAEsiB,QAAQ,EAAE1c,EAAE,CAACuc,KAAKniB,EAAEsiB,SAAS3c,EAAEsW,EAAltO,EAAstOjc,EAAEsjB,KAAK,EAAEtjB,EAAEkjB,KAAKljB,EAAEoiB,QAAQ,EAAEpiB,EAAEujB,KAAK3d,GAAG5F,EAAEsiB,QAAQ1c,EAAEuc,KAAKxc,EAAE,CAAC1F,EAAE2X,IAAI,8BAA8B5X,EAAEwiB,KAAK,GAAG,MAAM,GAAGxiB,EAAEuiB,SAAS,EAAEviB,EAAEqiB,SAASriB,EAAEyjB,QAAQ7d,EAAE,CAACuc,KAAKniB,EAAEuiB,UAAU5c,EAAEsW,EAA33O,EAA+3Ojc,EAAEsjB,KAAKtjB,EAAEkjB,KAAKljB,EAAEmjB,MAAMnjB,EAAEqiB,SAAS,EAAEriB,EAAEujB,KAAK3d,GAAG5F,EAAEuiB,SAAS3c,EAAEuc,KAAKxc,EAAE,CAAC1F,EAAE2X,IAAI,wBAAwB5X,EAAEwiB,KAAK,GAAG,MAAM,GAAGxiB,EAAEwiB,KAAK,GAAG,IAAI/hB,EAAE,MAAMR,EAAE,KAAK,GAAGD,EAAEwiB,KAAK,GAAG,KAAK,GAAG,GAAG,GAAG3iB,GAAG,KAAKC,EAAE,CAACG,EAAE4Y,SAASjZ,EAAEK,EAAE+X,UAAUlY,EAAEG,EAAEwY,QAAQ9Y,EAAEM,EAAEyY,SAAS7Y,EAAEG,EAAEkiB,KAAKniB,EAAEC,EAAEmiB,KAAKjiB,EAAEsG,EAAEvG,EAAEU,GAAGf,EAAEK,EAAE4Y,SAASvY,EAAEL,EAAE0Y,OAAO7Y,EAAEG,EAAE+X,UAAUrY,EAAEM,EAAEwY,QAAQtY,EAAEF,EAAEuY,MAAM3Y,EAAEI,EAAEyY,SAAS3Y,EAAEC,EAAEkiB,KAAKhiB,EAAEF,EAAEmiB,KAAK,KAAKniB,EAAEwiB,OAAOxiB,EAAE0jB,MAAM,GAAG,MAAM,IAAI1jB,EAAE0jB,KAAK,EAAEre,GAAGS,EAAE9F,EAAEoiB,QAAQriB,GAAG,GAAGC,EAAEsiB,SAAS,MAAM,GAAG,IAAIhd,EAAE,MAAMQ,KAAKV,EAAEU,IAAI,KAAK5F,IAAI,CAAC,GAAG,IAAIL,EAAE,MAAMI,EAAEJ,IAAIE,GAAGI,EAAER,MAAMO,EAAEA,GAAG,EAAE,GAAGmF,GAAG,IAAI,IAAIA,GAAG,CAAC,IAAIE,EAAEH,EAAEI,EAAEH,EAAEI,EAAEH,EAAED,GAAGS,EAAE9F,EAAEoiB,QAAQ3c,IAAI1F,GAAG,GAAGwF,EAAEC,GAAG,IAAID,OAAO,GAAG,IAAID,EAAE,MAAMQ,IAAIP,GAAGH,EAAEU,IAAI,KAAK5F,IAAI,CAAC,GAAG,IAAIL,EAAE,MAAMI,EAAEJ,IAAIE,GAAGI,EAAER,MAAMO,EAAEA,GAAG,EAAEH,KAAKwF,EAAErF,GAAGqF,EAAEvF,EAAE0jB,MAAMne,EAAE,GAAGxF,KAAKqF,EAAElF,GAAGkF,EAAEpF,EAAE0jB,MAAMte,EAAEpF,EAAEQ,OAAO8E,EAAE,IAAID,EAAE,CAACrF,EAAEwiB,KAAK,GAAG,MAAM,GAAG,GAAGnd,EAAE,CAACrF,EAAE0jB,MAAM,EAAE1jB,EAAEwiB,KAAK,GAAG,MAAM,GAAG,GAAGnd,EAAE,CAACpF,EAAE2X,IAAI,8BAA8B5X,EAAEwiB,KAAK,GAAG,MAAMxiB,EAAEqhB,MAAM,GAAGhc,EAAErF,EAAEwiB,KAAK,GAAG,KAAK,GAAG,GAAGxiB,EAAEqhB,MAAM,CAAC,IAAIxb,EAAE7F,EAAEqhB,MAAMnhB,EAAE2F,GAAG,CAAC,GAAG,IAAIhG,EAAE,MAAMI,EAAEJ,IAAIE,GAAGI,EAAER,MAAMO,EAAEA,GAAG,EAAEF,EAAEQ,QAAQT,GAAG,GAAGC,EAAEqhB,OAAO,EAAEthB,KAAKC,EAAEqhB,MAAMnhB,GAAGF,EAAEqhB,MAAMrhB,EAAE0jB,MAAM1jB,EAAEqhB,MAAMrhB,EAAE2jB,IAAI3jB,EAAEQ,OAAOR,EAAEwiB,KAAK,GAAG,KAAK,GAAG,KAAKnd,GAAGS,EAAE9F,EAAEqiB,SAAStiB,GAAG,GAAGC,EAAEuiB,UAAU,MAAM,GAAG,IAAIjd,EAAE,MAAMQ,KAAKV,EAAEU,IAAI,KAAK5F,IAAI,CAAC,GAAG,IAAIL,EAAE,MAAMI,EAAEJ,IAAIE,GAAGI,EAAER,MAAMO,EAAEA,GAAG,EAAE,GAAG,IAAI,IAAImF,GAAG,CAAC,IAAIE,EAAEH,EAAEI,EAAEH,EAAEI,EAAEH,EAAED,GAAGS,EAAE9F,EAAEqiB,SAAS5c,IAAI1F,GAAG,GAAGwF,EAAEC,GAAG,IAAID,OAAO,GAAG,IAAID,EAAE,MAAMQ,IAAIP,GAAGH,EAAEU,IAAI,KAAK5F,IAAI,CAAC,GAAG,IAAIL,EAAE,MAAMI,EAAEJ,IAAIE,GAAGI,EAAER,MAAMO,EAAEA,GAAG,EAAEH,KAAKwF,EAAErF,GAAGqF,EAAEvF,EAAE0jB,MAAMne,EAAE,GAAGxF,KAAKqF,EAAElF,GAAGkF,EAAEpF,EAAE0jB,MAAMte,EAAE,GAAGC,EAAE,CAACpF,EAAE2X,IAAI,wBAAwB5X,EAAEwiB,KAAK,GAAG,MAAMxiB,EAAEgjB,OAAO1d,EAAEtF,EAAEqhB,MAAM,GAAGhc,EAAErF,EAAEwiB,KAAK,GAAG,KAAK,GAAG,GAAGxiB,EAAEqhB,MAAM,CAAC,IAAIxb,EAAE7F,EAAEqhB,MAAMnhB,EAAE2F,GAAG,CAAC,GAAG,IAAIhG,EAAE,MAAMI,EAAEJ,IAAIE,GAAGI,EAAER,MAAMO,EAAEA,GAAG,EAAEF,EAAEgjB,QAAQjjB,GAAG,GAAGC,EAAEqhB,OAAO,EAAEthB,KAAKC,EAAEqhB,MAAMnhB,GAAGF,EAAEqhB,MAAMrhB,EAAE0jB,MAAM1jB,EAAEqhB,MAAM,GAAGrhB,EAAEgjB,OAAOhjB,EAAE8hB,KAAK,CAAC7hB,EAAE2X,IAAI,gCAAgC5X,EAAEwiB,KAAK,GAAG,MAAMxiB,EAAEwiB,KAAK,GAAG,KAAK,GAAG,GAAG,IAAI1iB,EAAE,MAAMG,EAAE,GAAGS,EAAEC,EAAEb,EAAEE,EAAEgjB,OAAOtiB,EAAE,CAAC,IAAIA,EAAEV,EAAEgjB,OAAOtiB,GAAGV,EAAEgiB,OAAOhiB,EAAEyiB,KAAK,CAACxiB,EAAE2X,IAAI,gCAAgC5X,EAAEwiB,KAAK,GAAG,MAAM5hB,EAAEF,EAAEV,EAAEiiB,OAAOvhB,GAAGV,EAAEiiB,MAAMjiB,EAAE+hB,MAAMrhB,GAAGV,EAAEiiB,MAAMvhB,EAAEA,EAAEV,EAAEQ,SAASE,EAAEV,EAAEQ,QAAQ2E,EAAEnF,EAAEiW,YAAY9Q,EAAE7E,EAAEM,EAAEhB,EAAEI,EAAEgjB,OAAOtiB,EAAEV,EAAEQ,OAAO,IAAIV,EAAEY,IAAIA,EAAEZ,GAAGA,GAAGY,EAAEV,EAAEQ,QAAQE,EAAEJ,EAAEV,KAAKuF,EAAEvE,OAAOF,IAAI,IAAIV,EAAEQ,SAASR,EAAEwiB,KAAK,IAAI,MAAM,KAAK,GAAG,GAAG,IAAI1iB,EAAE,MAAMG,EAAEK,EAAEV,KAAKI,EAAEQ,OAAOV,IAAIE,EAAEwiB,KAAK,GAAG,MAAM,KAAK,GAAG,GAAGxiB,EAAE4d,KAAK,CAAC,KAAK1d,EAAE,IAAI,CAAC,GAAG,IAAIL,EAAE,MAAMI,EAAEJ,IAAIE,GAAGI,EAAER,MAAMO,EAAEA,GAAG,EAAE,GAAGS,GAAGb,EAAEG,EAAEsc,WAAW5b,EAAEX,EAAE8iB,OAAOniB,EAAEA,IAAIV,EAAE4d,MAAM7d,EAAE6iB,MAAM7iB,EAAE4iB,MAAMvc,EAAErG,EAAE6iB,MAAMviB,EAAEK,EAAEf,EAAEe,GAAGoE,EAAE/E,EAAE6iB,MAAMviB,EAAEK,EAAEf,EAAEe,IAAIA,EAAEb,GAAGE,EAAE4iB,MAAM7iB,EAAE+c,EAAE/c,MAAMC,EAAE6iB,MAAM,CAAC5iB,EAAE2X,IAAI,uBAAuB5X,EAAEwiB,KAAK,GAAG,MAAMtiB,EAAEH,EAAE,EAAEC,EAAEwiB,KAAK,GAAG,KAAK,GAAG,GAAGxiB,EAAE4d,MAAM5d,EAAE4iB,MAAM,CAAC,KAAK1iB,EAAE,IAAI,CAAC,GAAG,IAAIL,EAAE,MAAMI,EAAEJ,IAAIE,GAAGI,EAAER,MAAMO,EAAEA,GAAG,EAAE,GAAGH,KAAK,WAAWC,EAAE8iB,OAAO,CAAC7iB,EAAE2X,IAAI,yBAAyB5X,EAAEwiB,KAAK,GAAG,MAAMtiB,EAAEH,EAAE,EAAEC,EAAEwiB,KAAK,GAAG,KAAK,GAAG7c,EAAE,EAAE,MAAM1F,EAAE,KAAK,GAAG0F,GAAG,EAAE,MAAM1F,EAAE,KAAK,GAAG,OAAO,EAAU,QAAQ,OAAO2c,EAAE,OAAO3c,EAAE4Y,SAASjZ,EAAEK,EAAE+X,UAAUlY,EAAEG,EAAEwY,QAAQ9Y,EAAEM,EAAEyY,SAAS7Y,EAAEG,EAAEkiB,KAAKniB,EAAEC,EAAEmiB,KAAKjiB,GAAGF,EAAE+hB,OAAOphB,IAAIV,EAAE+X,WAAWhY,EAAEwiB,KAAK,KAAKxiB,EAAEwiB,KAAK,IAAI,IAAI/hB,KAAK0d,EAAEle,EAAEA,EAAE0Y,OAAO1Y,EAAE4Y,SAASlY,EAAEV,EAAE+X,YAAYhY,EAAEwiB,KAAK,IAAI,IAAI1hB,GAAGb,EAAEyY,SAAS/X,GAAGV,EAAE+X,UAAU/X,EAAE6d,UAAUhd,EAAEb,EAAEsc,WAAW5b,EAAEX,EAAE8iB,OAAOniB,EAAEX,EAAE4d,MAAMjd,IAAIV,EAAE4d,MAAM7d,EAAE6iB,MAAM7iB,EAAE4iB,MAAMvc,EAAErG,EAAE6iB,MAAMviB,EAAEK,EAAEV,EAAE4Y,SAASlY,GAAGoE,EAAE/E,EAAE6iB,MAAMviB,EAAEK,EAAEV,EAAE4Y,SAASlY,IAAIV,EAAE2gB,UAAU5gB,EAAEmiB,MAAMniB,EAAE0iB,KAAK,GAAG,IAAI,KAAK1iB,EAAEwiB,KAAK,IAAI,IAAI,KAAKxiB,EAAEwiB,MAAM,KAAKxiB,EAAEwiB,KAAK,IAAI,IAAI,GAAG1hB,GAAG,IAAIH,GAAG,IAAIF,IAA31U,IAA+1UkF,IAAQA,GAAG,GAAGA,IAAI3F,EAAEqa,WAAW,SAASpa,GAAG,IAAIA,IAAIA,EAAEkW,MAAM,OAAOyG,EAAE,IAAInc,EAAER,EAAEkW,MAAM,OAAO1V,EAAEwV,SAASxV,EAAEwV,OAAO,MAAMhW,EAAEkW,MAAM,KAA19U,GAAk+UnW,EAAEwZ,iBAAiB,SAASvZ,EAAEQ,GAAG,IAAIT,EAAE,OAAOC,GAAGA,EAAEkW,MAAM,IAAI,GAAGnW,EAAEC,EAAEkW,OAAOyH,MAAMhB,IAAI5c,EAAE2d,KAAKld,GAAGohB,MAAK,EAAtkV,GAA4kVjF,GAAG5c,EAAE8Z,qBAAqB,SAAS7Z,EAAEQ,GAAG,IAAIT,EAAEG,EAAEM,EAAED,OAAO,OAAOP,GAAGA,EAAEkW,MAAM,KAAKnW,EAAEC,EAAEkW,OAAOyH,MAAM,KAAK5d,EAAEwiB,KAAK5F,EAAE,KAAK5c,EAAEwiB,MAAMzd,EAAE,EAAEtE,EAAEN,EAAE,KAAKH,EAAE6iB,OAAO,EAAE1E,EAAEle,EAAEQ,EAAEN,EAAEA,IAAIH,EAAEwiB,KAAK,IAAI,IAAIxiB,EAAE2iB,SAAS,EAAtwV,GAA2wV/F,GAAG5c,EAAEgkB,YAAY,sCAAsC,CAAC,kBAAkB,GAAG,YAAY,GAAG,UAAU,GAAG,YAAY,GAAG,aAAa,KAAK,GAAG,CAAC,SAAS/jB,EAAEQ,EAAET,GAAG,aAAa,IAAIkc,EAAEjc,EAAE,mBAAmBkc,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,EAAE,GAAGK,EAAE,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAII,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,MAAM,MAAM,MAAM,EAAE,GAAGC,EAAE,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAIpc,EAAEnB,QAAQ,SAASW,EAAEQ,EAAET,EAAEG,EAAEG,EAAEX,EAAEC,EAAEC,GAAG,IAAIC,EAAEC,EAAEG,EAAEY,EAAEH,EAAED,EAAEE,EAAEuE,EAAEC,EAAEC,EAAExF,EAAEsiB,KAAK7c,EAAE,EAAEC,EAAE,EAAEC,EAAE,EAAEC,EAAE,EAAEC,EAAE,EAAEC,EAAE,EAAEC,EAAE,EAAEC,EAAE,EAAEC,EAAE,EAAEQ,EAAE,EAAE3B,EAAE,KAAKM,EAAE,EAAEF,EAAE,IAAImX,EAAEvB,MAAM,IAAItU,EAAE,IAAI6V,EAAEvB,MAAM,IAAInU,EAAE,KAAKyV,EAAE,EAAE,IAAI3W,EAAE,EAAEA,GAAG,GAAGA,IAAIP,EAAEO,GAAG,EAAE,IAAIC,EAAE,EAAEA,EAAEpF,EAAEoF,IAAIR,EAAEtE,EAAET,EAAEuF,MAAM,IAAIG,EAAEL,EAAEI,EAAE,GAAG,GAAGA,GAAG,IAAIV,EAAEU,GAAGA,KAAK,GAAGA,EAAEC,IAAIA,EAAED,GAAG,IAAIA,EAAE,OAAOnF,EAAEX,KAAK,SAASW,EAAEX,KAAK,SAASE,EAAEsiB,KAAK,EAAE,EAAE,IAAI3c,EAAE,EAAEA,EAAEC,GAAG,IAAIV,EAAES,GAAGA,KAAK,IAAIE,EAAEF,IAAIE,EAAEF,GAAGF,EAAEO,EAAE,EAAEP,GAAG,GAAGA,IAAI,GAAGO,IAAI,GAAGA,GAAGd,EAAEO,IAAI,EAAE,OAAO,EAAE,GAAG,EAAEO,IAAI,IAAI5F,GAAG,IAAIwF,GAAG,OAAO,EAAE,IAAIY,EAAE,GAAG,EAAEf,EAAE,EAAEA,EAAE,GAAGA,IAAIe,EAAEf,EAAE,GAAGe,EAAEf,GAAGP,EAAEO,GAAG,IAAIC,EAAE,EAAEA,EAAEpF,EAAEoF,IAAI,IAAI9E,EAAET,EAAEuF,KAAK3F,EAAEyG,EAAE5F,EAAET,EAAEuF,OAAOA,GAAG,GAAG7E,EAAE,IAAIT,GAAG0E,EAAE6B,EAAE5G,EAAE,IAAI,IAAIK,GAAG0E,EAAEwX,EAAElX,GAAG,IAAIuB,EAAEgW,EAAEP,GAAG,IAAI,MAAMtX,EAAEiY,EAAEpW,EAAEqW,GAAG,GAAGvX,EAAEE,EAAE7E,EAAEhB,EAAEiG,EAAEL,EAAEe,EAAE,EAAEpG,GAAG,EAAEY,GAAGgF,EAAE,IAAIH,EAAED,IAAI,EAAE,IAAIzF,GAAG,IAAI6F,GAAG,IAAI7F,GAAG,IAAI6F,EAAE,OAAO,EAAE,OAAO,CAAC,IAAIlF,EAAE0E,EAAEM,EAAER,EAAExF,EAAE2F,GAAG7E,GAAGyE,EAAE,EAAEvF,EAAE2F,IAAI3F,EAAE2F,GAAG7E,GAAGyE,EAAEqB,EAAEyV,EAAErc,EAAE2F,IAAIZ,EAAEM,EAAErF,EAAE2F,MAAMJ,EAAE,GAAG,GAAGrF,EAAE,GAAGwF,EAAEM,EAAEJ,EAAEzF,EAAE,GAAG4F,EAAErF,EAAEK,GAAG2F,GAAGV,IAAI7F,GAAGD,IAAIc,GAAG,GAAGuE,GAAG,GAAGC,EAAE,EAAE,IAAIrF,IAAI,IAAID,EAAE,GAAGwF,EAAE,EAAEgB,EAAExG,GAAGA,IAAI,EAAE,GAAG,IAAIA,GAAGwG,GAAGxG,EAAE,EAAEwG,GAAGxG,GAAGwG,EAAE,EAAEf,IAAI,KAAKR,EAAEO,GAAG,CAAC,GAAGA,IAAIG,EAAE,MAAMH,EAAE7E,EAAET,EAAEJ,EAAE2F,IAAI,GAAGG,EAAEJ,IAAIgB,EAAExF,KAAKZ,EAAE,CAAC,IAAI,IAAI0F,IAAIA,EAAEF,GAAG/E,GAAG6E,EAAEK,EAAE,IAAIF,EAAEL,EAAEM,GAAGD,EAAEC,EAAEH,MAAMI,GAAGd,EAAEY,EAAEC,KAAK,IAAID,IAAIE,IAAI,EAAE,GAAGC,GAAG,GAAGH,EAAE,IAAI1F,GAAG,IAAI6F,GAAG,IAAI7F,GAAG,IAAI6F,EAAE,OAAO,EAAExF,EAAEJ,EAAEoG,EAAExF,GAAG4E,GAAG,GAAGC,GAAG,GAAGhF,EAAEhB,EAAE,GAAG,OAAO,IAAI2G,IAAIhG,EAAEK,EAAE2F,GAAGhB,EAAEM,GAAG,GAAG,IAAI,GAAG,GAAG/F,EAAEsiB,KAAKzc,EAAE,IAAI,CAAC,kBAAkB,KAAK,GAAG,CAAC,SAASzF,EAAEQ,EAAET,GAAG,aAAaS,EAAEnB,QAAQ,CAAC,EAAE,kBAAkB,EAAE,aAAa,EAAE,GAAG,KAAK,aAAa,KAAK,eAAe,KAAK,aAAa,KAAK,sBAAsB,KAAK,eAAe,KAAK,yBAAyB,IAAI,GAAG,CAAC,SAASW,EAAEQ,EAAET,GAAG,aAAa,IAAIM,EAAEL,EAAE,mBAA2B,SAASE,EAAEF,GAAG,IAAI,IAAIQ,EAAER,EAAEO,OAAO,KAAKC,GAAGR,EAAEQ,GAAG,EAAE,IAAaV,EAAE,IAAIG,EAAEH,IAAMe,EAAE,GAAgBuE,EAAE,GAAipE,MAAM,KAAStB,EAAE0F,GAAG,IAAIC,EAAE,IAAIrE,MAAM,IAAKtB,EAAE2F,GAAG,IAAIQ,EAAE,IAAI7E,MAAM,KAAKtB,EAAEmG,GAAG,IAAI3B,EAAE,IAAIlD,MAAM,KAAKtB,EAAEwE,GAAG,IAAIM,EAAE,IAAIxD,MAA3Z,IAAoatB,EAAE8E,GAAG,IAAIF,EAAEsB,EAAEG,EAAEyV,EAAE,IAAIxa,MAAMX,GAAG,SAASob,EAAEjc,EAAEQ,EAAET,EAAEG,EAAEG,GAAGZ,KAAKukB,YAAYhkB,EAAEP,KAAKwkB,WAAWzjB,EAAEf,KAAKykB,WAAWnkB,EAAEN,KAAK0kB,MAAMjkB,EAAET,KAAK2kB,WAAW/jB,EAAEZ,KAAK4kB,UAAUrkB,GAAGA,EAAEO,OAAO,SAAS2b,EAAElc,EAAEQ,GAAGf,KAAK6kB,SAAStkB,EAAEP,KAAK8kB,SAAS,EAAE9kB,KAAK+kB,UAAUhkB,EAAE,SAAS+b,EAAEvc,GAAG,OAAOA,EAAE,IAAIqG,EAAErG,GAAGqG,EAAE,KAAKrG,IAAI,IAAI,SAAS2c,EAAE3c,EAAEQ,GAAGR,EAAEoc,YAAYpc,EAAEmc,WAAW,IAAI3b,EAAER,EAAEoc,YAAYpc,EAAEmc,WAAW3b,IAAI,EAAE,IAAI,SAASoc,EAAE5c,EAAEQ,EAAET,GAAGC,EAAEygB,SAAzvB,GAAowB1gB,GAAGC,EAAEwgB,QAAQhgB,GAAGR,EAAEygB,SAAS,MAAM9D,EAAE3c,EAAEA,EAAEwgB,QAAQxgB,EAAEwgB,OAAOhgB,GAA5zB,GAAi0BR,EAAEygB,SAASzgB,EAAEygB,UAAU1gB,EAAx1B,KAA81BC,EAAEwgB,QAAQhgB,GAAGR,EAAEygB,SAAS,MAAMzgB,EAAEygB,UAAU1gB,GAAG,SAAS8c,EAAE7c,EAAEQ,EAAET,GAAG6c,EAAE5c,EAAED,EAAE,EAAES,GAAGT,EAAE,EAAES,EAAE,IAAI,SAAS+c,EAAEvd,EAAEQ,GAAG,IAAI,IAAIT,EAAE,EAAEA,GAAG,EAAEC,EAAEA,KAAK,EAAED,IAAI,EAAE,IAAIS,IAAI,OAAOT,IAAI,EAAE,SAASme,EAAEle,EAAEQ,EAAET,GAAG,IAAIG,EAAEG,EAAEX,EAAE,IAAI8B,MAAM4D,IAAKzF,EAAE,EAAE,IAAIO,EAAE,EAAEA,GAAGkF,EAAElF,IAAIR,EAAEQ,GAAGP,EAAEA,EAAEI,EAAEG,EAAE,IAAI,EAAE,IAAIG,EAAE,EAAEA,GAAGG,EAAEH,IAAI,CAAC,IAAIT,EAAEI,EAAE,EAAEK,EAAE,GAAG,IAAIT,IAAII,EAAE,EAAEK,GAAGkd,EAAE7d,EAAEE,KAAKA,KAAK,SAAS2e,EAAEve,GAAG,IAAIQ,EAAE,IAAIA,EAAE,EAAEA,EAAEP,EAAEO,IAAIR,EAAEuf,UAAU,EAAE/e,GAAG,EAAE,IAAIA,EAAE,EAAEA,EAAEK,EAAEL,IAAIR,EAAEwf,UAAU,EAAEhf,GAAG,EAAE,IAAIA,EAAE,EAAEA,EAA5vC,GAAgwCA,IAAIR,EAAEyf,QAAQ,EAAEjf,GAAG,EAAER,EAAEuf,UAAU,KAAK,EAAEvf,EAAEqgB,QAAQrgB,EAAEsgB,WAAW,EAAEtgB,EAAEse,SAASte,EAAEugB,QAAQ,EAAE,SAAS7B,EAAE1e,GAAG,EAAEA,EAAEygB,SAAS9D,EAAE3c,EAAEA,EAAEwgB,QAAQ,EAAExgB,EAAEygB,WAAWzgB,EAAEoc,YAAYpc,EAAEmc,WAAWnc,EAAEwgB,QAAQxgB,EAAEwgB,OAAO,EAAExgB,EAAEygB,SAAS,EAAE,SAASzB,EAAEhf,EAAEQ,EAAET,EAAEG,GAAG,IAAIG,EAAE,EAAEG,EAAEd,EAAE,EAAEK,EAAE,OAAOC,EAAEK,GAAGL,EAAEN,IAAIM,EAAEK,KAAKL,EAAEN,IAAIQ,EAAEM,IAAIN,EAAEH,GAAG,SAAS2gB,EAAE1gB,EAAEQ,EAAET,GAAG,IAAI,IAAIG,EAAEF,EAAE8f,KAAK/f,GAAGM,EAAEN,GAAG,EAAEM,GAAGL,EAAE+f,WAAW1f,EAAEL,EAAE+f,UAAUf,EAAExe,EAAER,EAAE8f,KAAKzf,EAAE,GAAGL,EAAE8f,KAAKzf,GAAGL,EAAEigB,QAAQ5f,KAAK2e,EAAExe,EAAEN,EAAEF,EAAE8f,KAAKzf,GAAGL,EAAEigB,SAASjgB,EAAE8f,KAAK/f,GAAGC,EAAE8f,KAAKzf,GAAGN,EAAEM,EAAEA,IAAI,EAAEL,EAAE8f,KAAK/f,GAAGG,EAAE,SAAS2gB,EAAE7gB,EAAEQ,EAAET,GAAG,IAAIG,EAAEG,EAAEX,EAAEC,EAAEC,EAAE,EAAE,GAAG,IAAII,EAAEse,SAAS,KAAKpe,EAAEF,EAAEoc,YAAYpc,EAAEogB,MAAM,EAAExgB,IAAI,EAAEI,EAAEoc,YAAYpc,EAAEogB,MAAM,EAAExgB,EAAE,GAAGS,EAAEL,EAAEoc,YAAYpc,EAAEkgB,MAAMtgB,GAAGA,IAAI,IAAIM,EAAE2c,EAAE7c,EAAEK,EAAEG,IAAIqc,EAAE7c,GAAGN,EAAEgF,EAAErE,IAAIP,EAAE,EAAEU,GAAG,KAAKb,EAAE6F,EAAE9F,KAAKkd,EAAE5c,EAAEK,GAAG2E,EAAEtF,GAAGC,GAAGkd,EAAE7c,EAAEN,EAAE6c,IAAIrc,GAAGH,GAAG,KAAKJ,EAAE8F,EAAE/F,KAAKkd,EAAE5c,EAAEE,GAAG8b,EAAEtc,GAAGC,IAAIC,EAAEI,EAAEse,WAAWzB,EAAE7c,EAA98D,IAAk9DQ,GAAG,SAASsgB,EAAE9gB,EAAEQ,GAAG,IAAIT,EAAEG,EAAEG,EAAEX,EAAEc,EAAE8jB,SAAS3kB,EAAEa,EAAEgkB,UAAUR,YAAYpkB,EAAEY,EAAEgkB,UAAUH,UAAUxkB,EAAEW,EAAEgkB,UAAUL,MAAMrkB,GAAG,EAAE,IAAIE,EAAE+f,SAAS,EAAE/f,EAAEggB,SAAhnE,IAA2nEjgB,EAAE,EAAEA,EAAEF,EAAEE,IAAI,IAAIL,EAAE,EAAEK,IAAIC,EAAE8f,OAAO9f,EAAE+f,UAAUjgB,EAAEC,EAAEC,EAAEigB,MAAMlgB,GAAG,GAAGL,EAAE,EAAEK,EAAE,GAAG,EAAE,KAAKC,EAAE+f,SAAS,GAAGrgB,EAAE,GAAGW,EAAEL,EAAE8f,OAAO9f,EAAE+f,UAAUjgB,EAAE,IAAIA,EAAE,IAAI,EAAEE,EAAEigB,MAAM5f,GAAG,EAAEL,EAAEqgB,UAAUzgB,IAAII,EAAEsgB,YAAY3gB,EAAE,EAAEU,EAAE,IAAI,IAAIG,EAAE+jB,SAASzkB,EAAEC,EAAEC,EAAE+f,UAAU,EAAE,GAAGhgB,EAAEA,IAAI2gB,EAAE1gB,EAAEN,EAAEK,GAAG,IAAIM,EAAER,EAAEE,EAAEC,EAAE8f,KAAK,GAAG9f,EAAE8f,KAAK,GAAG9f,EAAE8f,KAAK9f,EAAE+f,YAAYW,EAAE1gB,EAAEN,EAAE,GAAGQ,EAAEF,EAAE8f,KAAK,GAAG9f,EAAE8f,OAAO9f,EAAEggB,UAAUjgB,EAAEC,EAAE8f,OAAO9f,EAAEggB,UAAU9f,EAAER,EAAE,EAAEW,GAAGX,EAAE,EAAEK,GAAGL,EAAE,EAAEQ,GAAGF,EAAEigB,MAAM5f,IAAIL,EAAEigB,MAAMlgB,IAAIC,EAAEigB,MAAM/f,GAAGF,EAAEigB,MAAMlgB,GAAGC,EAAEigB,MAAM/f,IAAI,EAAER,EAAE,EAAEK,EAAE,GAAGL,EAAE,EAAEQ,EAAE,GAAGG,EAAEL,EAAE8f,KAAK,GAAGzf,IAAIqgB,EAAE1gB,EAAEN,EAAE,GAAG,GAAGM,EAAE+f,WAAW/f,EAAE8f,OAAO9f,EAAEggB,UAAUhgB,EAAE8f,KAAK,GAAG,SAAS9f,EAAEQ,GAAG,IAAIT,EAAEG,EAAEG,EAAEX,EAAEC,EAAEC,EAAEC,EAAEW,EAAE8jB,SAASxkB,EAAEU,EAAE+jB,SAAStkB,EAAEO,EAAEgkB,UAAUR,YAAYnjB,EAAEL,EAAEgkB,UAAUH,UAAU3jB,EAAEF,EAAEgkB,UAAUP,WAAWxjB,EAAED,EAAEgkB,UAAUN,WAAWvjB,EAAEH,EAAEgkB,UAAUJ,WAAWlf,EAAE,EAAE,IAAIxF,EAAE,EAAEA,GAAG0F,EAAE1F,IAAIM,EAAE6f,SAASngB,GAAG,EAAE,IAAIG,EAAE,EAAEG,EAAE8f,KAAK9f,EAAEggB,UAAU,GAAG,EAAEjgB,EAAEC,EAAEggB,SAAS,EAAEjgB,EAAp5F,IAAw5FA,IAAIY,GAAGjB,EAAEG,EAAE,EAAEA,EAAE,GAAGK,EAAEF,EAAE8f,KAAK/f,IAAI,GAAG,GAAG,KAAKL,EAAEiB,EAAEuE,KAAKrF,EAAE,EAAEK,EAAE,GAAGR,EAAEI,EAAEI,IAAIF,EAAE6f,SAASngB,KAAKC,EAAE,EAAEc,GAAGP,IAAIP,EAAEe,EAAER,EAAEO,IAAIb,EAAEC,EAAE,EAAEK,GAAGF,EAAEqgB,SAASzgB,GAAGF,EAAEC,GAAGkB,IAAIb,EAAEsgB,YAAY1gB,GAAGK,EAAE,EAAEC,EAAE,GAAGP,KAAK,GAAG,IAAIuF,EAAE,CAAC,EAAE,CAAC,IAAIxF,EAAEiB,EAAE,EAAE,IAAIX,EAAE6f,SAASngB,IAAIA,IAAIM,EAAE6f,SAASngB,KAAKM,EAAE6f,SAASngB,EAAE,IAAI,EAAEM,EAAE6f,SAASlf,KAAKuE,GAAG,QAAQ,EAAEA,GAAG,IAAIxF,EAAEiB,EAAE,IAAIjB,EAAEA,IAAI,IAAIQ,EAAEF,EAAE6f,SAASngB,GAAG,IAAIQ,GAAGJ,GAAGO,EAAEL,EAAE8f,OAAO/f,MAAMF,EAAE,EAAEQ,EAAE,KAAKX,IAAIM,EAAEqgB,UAAU3gB,EAAEG,EAAE,EAAEQ,EAAE,IAAIR,EAAE,EAAEQ,GAAGR,EAAE,EAAEQ,EAAE,GAAGX,GAAGQ,MAAjqB,CAAwqBF,EAAEQ,GAAG0d,EAAExe,EAAEI,EAAEE,EAAE6f,UAAU,SAAS4E,EAAEzkB,EAAEQ,EAAET,GAAG,IAAIG,EAAEG,EAAEX,GAAG,EAAEC,EAAEa,EAAE,GAAGZ,EAAE,EAAEC,EAAE,EAAEC,EAAE,EAAE,IAAI,IAAIH,IAAIE,EAAE,IAAIC,EAAE,GAAGU,EAAE,GAAGT,EAAE,GAAG,GAAG,MAAMG,EAAE,EAAEA,GAAGH,EAAEG,IAAIG,EAAEV,EAAEA,EAAEa,EAAE,GAAGN,EAAE,GAAG,KAAKN,EAAEC,GAAGQ,IAAIV,IAAIC,EAAEE,EAAEE,EAAEyf,QAAQ,EAAEpf,IAAIT,EAAE,IAAIS,GAAGA,IAAIX,GAAGM,EAAEyf,QAAQ,EAAEpf,KAAKL,EAAEyf,QAAQ,OAAQ7f,GAAG,GAAGI,EAAEyf,QAAQ,MAAOzf,EAAEyf,QAAQ,MAAO/f,EAAEW,EAAEP,GAAGF,EAAE,KAAKD,GAAGE,EAAE,IAAI,GAAGQ,IAAIV,GAAGE,EAAE,EAAE,IAAIA,EAAE,EAAE,IAAI,SAAS6kB,EAAE1kB,EAAEQ,EAAET,GAAG,IAAIG,EAAEG,EAAEX,GAAG,EAAEC,EAAEa,EAAE,GAAGZ,EAAE,EAAEC,EAAE,EAAEC,EAAE,EAAE,IAAI,IAAIH,IAAIE,EAAE,IAAIC,EAAE,GAAGI,EAAE,EAAEA,GAAGH,EAAEG,IAAI,GAAGG,EAAEV,EAAEA,EAAEa,EAAE,GAAGN,EAAE,GAAG,OAAON,EAAEC,GAAGQ,IAAIV,GAAG,CAAC,GAAGC,EAAEE,EAAE,KAAK+c,EAAE7c,EAAEK,EAAEL,EAAEyf,SAAS,KAAK7f,SAAS,IAAIS,GAAGA,IAAIX,IAAImd,EAAE7c,EAAEK,EAAEL,EAAEyf,SAAS7f,KAAKid,EAAE7c,EAAxyH,GAA4yHA,EAAEyf,SAAS7C,EAAE5c,EAAEJ,EAAE,EAAE,IAAIA,GAAG,IAAIid,EAAE7c,EAAv0H,GAA20HA,EAAEyf,SAAS7C,EAAE5c,EAAEJ,EAAE,EAAE,KAAKid,EAAE7c,EAAh2H,GAAo2HA,EAAEyf,SAAS7C,EAAE5c,EAAEJ,EAAE,GAAG,IAAIF,EAAEW,EAAEP,GAAGF,EAAE,KAAKD,GAAGE,EAAE,IAAI,GAAGQ,IAAIV,GAAGE,EAAE,EAAE,IAAIA,EAAE,EAAE,IAAIK,EAAE8b,GAAG,IAAI2I,GAAE,EAAG,SAASC,EAAE5kB,EAAEQ,EAAET,EAAEG,GAAG0c,EAAE5c,EAAE,GAAQE,EAAE,EAAE,GAAG,GAAG,SAASF,EAAEQ,EAAET,EAAEG,GAAGwe,EAAE1e,GAAO2c,EAAE3c,EAAED,GAAG4c,EAAE3c,GAAGD,GAAIM,EAAE8Z,SAASna,EAAEoc,YAAYpc,EAAEgW,OAAOxV,EAAET,EAAEC,EAAEmc,SAASnc,EAAEmc,SAASpc,EAAvG,CAA0GC,EAAEQ,EAAET,GAAMA,EAAE6gB,SAAS,SAAS5gB,GAAG2kB,IAAI,WAAW,IAAI3kB,EAAEQ,EAAET,EAAEG,EAAEG,EAAEX,EAAE,IAAI8B,MAAM4D,IAAK,IAAIlF,EAAEH,EAAE,EAAEG,EAAEP,GAAIO,IAAI,IAAI8E,EAAE9E,GAAGH,EAAEC,EAAE,EAAEA,EAAE,GAAGwF,EAAEtF,GAAGF,IAAI0E,EAAE3E,KAAKG,EAAE,IAAIwE,EAAE3E,EAAE,GAAGG,EAAEA,EAAEG,EAAE,EAAEH,EAAE,GAAGA,IAAI,IAAI8b,EAAE9b,GAAGG,EAAEL,EAAE,EAAEA,EAAE,GAAGyF,EAAEvF,GAAGF,IAAIqG,EAAEhG,KAAKH,EAAE,IAAIG,IAAI,EAAEH,EAAEW,EAAEX,IAAI,IAAI8b,EAAE9b,GAAGG,GAAG,EAAEL,EAAE,EAAEA,EAAE,GAAGyF,EAAEvF,GAAG,EAAEF,IAAIqG,EAAE,IAAIhG,KAAKH,EAAE,IAAIM,EAAE,EAAEA,GAAG4E,EAAE5E,IAAId,EAAEc,GAAG,EAAE,IAAIR,EAAE,EAAEA,GAAG,KAAK4F,EAAE,EAAE5F,EAAE,GAAG,EAAEA,IAAIN,EAAE,KAAK,KAAKM,GAAG,KAAK4F,EAAE,EAAE5F,EAAE,GAAG,EAAEA,IAAIN,EAAE,KAAK,KAAKM,GAAG,KAAK4F,EAAE,EAAE5F,EAAE,GAAG,EAAEA,IAAIN,EAAE,KAAK,KAAKM,GAAG,KAAK4F,EAAE,EAAE5F,EAAE,GAAG,EAAEA,IAAIN,EAAE,KAAK,IAAIwe,EAAEtY,EAAE3F,IAAIP,GAAGM,EAAE,EAAEA,EAAEa,EAAEb,IAAI6F,EAAE,EAAE7F,EAAE,GAAG,EAAE6F,EAAE,EAAE7F,GAAGud,EAAEvd,EAAE,GAAG8E,EAAE,IAAImX,EAAErW,EAAEJ,EAAE1F,IAAIG,EAAEmF,GAAGgB,EAAE,IAAI6V,EAAEpW,EAAEJ,EAAE,EAAE5E,EAAEuE,GAAGmB,EAAE,IAAI0V,EAAE,IAAIza,MAAM,GAAGkE,EAAE,EAAhqJ,GAAuB,GAAwoI,GAA2gBif,GAAE,GAAI3kB,EAAE0f,OAAO,IAAIxD,EAAElc,EAAEuf,UAAUza,GAAG9E,EAAE2f,OAAO,IAAIzD,EAAElc,EAAEwf,UAAUpZ,GAAGpG,EAAE4f,QAAQ,IAAI1D,EAAElc,EAAEyf,QAAQlZ,GAAGvG,EAAEwgB,OAAO,EAAExgB,EAAEygB,SAAS,EAAElC,EAAEve,IAAID,EAAEyhB,iBAAiBoD,EAAE7kB,EAAEyc,gBAAgB,SAASxc,EAAEQ,EAAET,EAAEG,GAAG,IAAIG,EAAEX,EAAEC,EAAE,EAAE,EAAEK,EAAEuE,OAAO,IAAIvE,EAAE8X,KAAK6I,YAAY3gB,EAAE8X,KAAK6I,UAAU,SAAS3gB,GAAG,IAAIQ,EAAET,EAAE,WAAW,IAAIS,EAAE,EAAEA,GAAG,GAAGA,IAAIT,KAAK,EAAE,GAAG,EAAEA,GAAG,IAAIC,EAAEuf,UAAU,EAAE/e,GAAG,OAA5kK,EAAqlK,GAAG,IAAIR,EAAEuf,UAAU,KAAK,IAAIvf,EAAEuf,UAAU,KAAK,IAAIvf,EAAEuf,UAAU,IAAI,OAAlpK,EAA2pK,IAAI/e,EAAE,GAAGA,EAAEV,EAAEU,IAAI,GAAG,IAAIR,EAAEuf,UAAU,EAAE/e,GAAG,OAApsK,EAA6sK,OAAjtK,EAAu/J,CAAoOR,IAAI8gB,EAAE9gB,EAAEA,EAAE0f,QAAQoB,EAAE9gB,EAAEA,EAAE2f,QAAQhgB,EAAE,SAASK,GAAG,IAAIQ,EAAE,IAAIikB,EAAEzkB,EAAEA,EAAEuf,UAAUvf,EAAE0f,OAAO6E,UAAUE,EAAEzkB,EAAEA,EAAEwf,UAAUxf,EAAE2f,OAAO4E,UAAUzD,EAAE9gB,EAAEA,EAAE4f,SAASpf,EAAEE,GAAI,GAAGF,GAAG,IAAIR,EAAEyf,QAAQ,EAAE9Z,EAAEnF,GAAG,GAAGA,KAAK,OAAOR,EAAEqgB,SAAS,GAAG7f,EAAE,GAAG,EAAE,EAAE,EAAEA,EAApL,CAAuLR,GAAGK,EAAEL,EAAEqgB,QAAQ,EAAE,IAAI,GAAG3gB,EAAEM,EAAEsgB,WAAW,EAAE,IAAI,IAAIjgB,IAAIA,EAAEX,IAAIW,EAAEX,EAAEK,EAAE,EAAEA,EAAE,GAAGM,IAAI,IAAIG,EAAEokB,EAAE5kB,EAAEQ,EAAET,EAAEG,GAAG,IAAIF,EAAEuX,UAAU7X,IAAIW,GAAGuc,EAAE5c,EAAE,GAAGE,EAAE,EAAE,GAAG,GAAG2gB,EAAE7gB,EAAE4F,EAAEC,KAAK+W,EAAE5c,EAAE,GAAGE,EAAE,EAAE,GAAG,GAAG,SAASF,EAAEQ,EAAET,EAAEG,GAAG,IAAIG,EAAE,IAAIuc,EAAE5c,EAAEQ,EAAE,IAAI,GAAGoc,EAAE5c,EAAED,EAAE,EAAE,GAAG6c,EAAE5c,EAAEE,EAAE,EAAE,GAAGG,EAAE,EAAEA,EAAEH,EAAEG,IAAIuc,EAAE5c,EAAEA,EAAEyf,QAAQ,EAAE9Z,EAAEtF,GAAG,GAAG,GAAGqkB,EAAE1kB,EAAEA,EAAEuf,UAAU/e,EAAE,GAAGkkB,EAAE1kB,EAAEA,EAAEwf,UAAUzf,EAAE,GAA7I,CAAiJC,EAAEA,EAAE0f,OAAO6E,SAAS,EAAEvkB,EAAE2f,OAAO4E,SAAS,EAAE5kB,EAAE,GAAGkhB,EAAE7gB,EAAEA,EAAEuf,UAAUvf,EAAEwf,YAAYjB,EAAEve,GAAGE,GAAGwe,EAAE1e,IAAID,EAAEqe,UAAU,SAASpe,EAAEQ,EAAET,GAAG,OAAOC,EAAEoc,YAAYpc,EAAEogB,MAAM,EAAEpgB,EAAEse,UAAU9d,IAAI,EAAE,IAAIR,EAAEoc,YAAYpc,EAAEogB,MAAM,EAAEpgB,EAAEse,SAAS,GAAG,IAAI9d,EAAER,EAAEoc,YAAYpc,EAAEkgB,MAAMlgB,EAAEse,UAAU,IAAIve,EAAEC,EAAEse,WAAW,IAAI9d,EAAER,EAAEuf,UAAU,EAAExf,MAAMC,EAAEugB,UAAU/f,IAAIR,EAAEuf,UAAU,GAAG7a,EAAE3E,GAAGD,EAAE,MAAME,EAAEwf,UAAU,EAAEjD,EAAE/b,OAAOR,EAAEse,WAAWte,EAAEmgB,YAAY,GAAGpgB,EAAEwhB,UAAU,SAASvhB,GAAG4c,EAAE5c,EAAE,EAAE,GAAG6c,EAAE7c,EAA9hM,IAAkiM4F,GAAG,SAAS5F,GAAG,KAAKA,EAAEygB,UAAU9D,EAAE3c,EAAEA,EAAEwgB,QAAQxgB,EAAEwgB,OAAO,EAAExgB,EAAEygB,SAAS,GAAG,GAAGzgB,EAAEygB,WAAWzgB,EAAEoc,YAAYpc,EAAEmc,WAAW,IAAInc,EAAEwgB,OAAOxgB,EAAEwgB,SAAS,EAAExgB,EAAEygB,UAAU,GAArJ,CAAyJzgB,KAAK,CAAC,kBAAkB,KAAK,GAAG,CAAC,SAASA,EAAEQ,EAAET,GAAG,aAAaS,EAAEnB,QAAQ,WAAWI,KAAK8Y,MAAM,KAAK9Y,KAAK+Y,QAAQ,EAAE/Y,KAAKgZ,SAAS,EAAEhZ,KAAKoe,SAAS,EAAEpe,KAAKiZ,OAAO,KAAKjZ,KAAKmZ,SAAS,EAAEnZ,KAAKsY,UAAU,EAAEtY,KAAK6c,UAAU,EAAE7c,KAAKkY,IAAI,GAAGlY,KAAKyW,MAAM,KAAKzW,KAAKkhB,UAAU,EAAElhB,KAAKme,MAAM,IAAI,IAAI,GAAG,CAAC,SAAS5d,EAAEQ,EAAET,GAAG,aAAaS,EAAEnB,QAAQ,mBAAmB8V,aAAaA,aAAa,WAAW,IAAInV,EAAE,GAAGsL,MAAM0D,MAAMpG,WAAW5I,EAAE6kB,OAAO,EAAE,EAAE,GAAGlP,WAAW3G,MAAM,KAAKhP,KAAK,KAAK,GAAG,CAAC,IAAr35F,CAA035F,0BCZzp6F,SAMC,SAAUb,EAAM2lB,GACb,aAEI,EAMA,WAIJ,IAAIC,EAAO,aACPC,EAAgB,YAChBC,SAAejP,SAAWgP,UAA0BhP,OAAOkP,YAAcF,GACzE,kBAAkBrZ,KAAKqK,OAAOkP,UAAUC,WAGxCC,EAAa,CACb,QACA,QACA,OACA,OACA,SAIJ,SAASC,EAAWC,EAAKC,GACrB,IAAIpO,EAASmO,EAAIC,GACjB,GAA2B,mBAAhBpO,EAAOqO,KACd,OAAOrO,EAAOqO,KAAKF,GAEnB,IACI,OAAOG,SAAS1jB,UAAUyjB,KAAKllB,KAAK6W,EAAQmO,GAC9C,MAAO9kB,GAEL,OAAO,WACH,OAAOilB,SAAS1jB,UAAUiN,MAAMA,MAAMmI,EAAQ,CAACmO,EAAK1c,cAOpE,SAAS8c,IACDC,QAAQC,MACJD,QAAQC,IAAI5W,MACZ2W,QAAQC,IAAI5W,MAAM2W,QAAS/c,WAG3B6c,SAAS1jB,UAAUiN,MAAMA,MAAM2W,QAAQC,IAAK,CAACD,QAAS/c,aAG1D+c,QAAQE,OAAOF,QAAQE,QAK/B,SAASC,EAAWP,GAKhB,MAJmB,UAAfA,IACAA,EAAa,cAGNI,UAAYX,IAEG,UAAfO,GAA0BN,EAC1BS,OACwBK,IAAxBJ,QAAQJ,GACRF,EAAWM,QAASJ,QACJQ,IAAhBJ,QAAQC,IACRP,EAAWM,QAAS,OAEpBZ,GAMf,SAASiB,EAAsBzhB,EAAO0hB,GAElC,IAAK,IAAI/lB,EAAI,EAAGA,EAAIklB,EAAW7kB,OAAQL,IAAK,CACxC,IAAIqlB,EAAaH,EAAWllB,GAC5BT,KAAK8lB,GAAerlB,EAAIqE,EACpBwgB,EACAtlB,KAAKymB,cAAcX,EAAYhhB,EAAO0hB,GAI9CxmB,KAAKmmB,IAAMnmB,KAAK0mB,MAKpB,SAASC,EAAgCb,EAAYhhB,EAAO0hB,GACxD,OAAO,kBACQN,UAAYX,IACnBgB,EAAsB1lB,KAAKb,KAAM8E,EAAO0hB,GACxCxmB,KAAK8lB,GAAYvW,MAAMvP,KAAMmJ,aAOzC,SAASyd,EAAqBd,EAAYhhB,EAAO0hB,GAE7C,OAAOH,EAAWP,IACXa,EAAgCpX,MAAMvP,KAAMmJ,WAGvD,SAAS0d,EAAOrhB,EAAMshB,EAAcnnB,GAClC,IACIonB,EADA7W,EAAOlQ,KAEX8mB,EAA+B,MAAhBA,EAAuB,OAASA,EAE/C,IAAIE,EAAa,WAyBjB,SAASC,IACL,IAAIC,EAEJ,UAAW3Q,SAAWgP,GAAkByB,EAAxC,CAEA,IACIE,EAAc3Q,OAAO4Q,aAAaH,GACpC,MAAOI,IAGT,UAAWF,IAAgB3B,EACvB,IACI,IAAI8B,EAAS9Q,OAAOjB,SAAS+R,OACzBC,EAAWD,EAAOrlB,QAClBulB,mBAAmBP,GAAc,MACnB,IAAdM,IACAJ,EAAc,WAAWM,KAAKH,EAAOxb,MAAMyb,IAAW,IAE5D,MAAOF,IAQb,YAJiCd,IAA7BpW,EAAKuX,OAAOP,KACZA,OAAcZ,GAGXY,GAlDS,iBAAT1hB,EACTwhB,GAAc,IAAMxhB,EACK,iBAATA,IAChBwhB,OAAaV,GAwEfpW,EAAK1K,KAAOA,EAEZ0K,EAAKuX,OAAS,CAAE,MAAS,EAAG,MAAS,EAAG,KAAQ,EAAG,KAAQ,EACvD,MAAS,EAAG,OAAU,GAE1BvX,EAAKuW,cAAgB9mB,GAAWinB,EAEhC1W,EAAKwX,SAAW,WACZ,OAAOX,GAGX7W,EAAKyX,SAAW,SAAU7iB,EAAO8iB,GAI7B,GAHqB,iBAAV9iB,QAA2DwhB,IAArCpW,EAAKuX,OAAO3iB,EAAM6G,iBAC/C7G,EAAQoL,EAAKuX,OAAO3iB,EAAM6G,kBAET,iBAAV7G,GAAsBA,GAAS,GAAKA,GAASoL,EAAKuX,OAAOI,QAUhE,KAAM,6CAA+C/iB,EAJrD,GALAiiB,EAAejiB,GACC,IAAZ8iB,GAtFZ,SAAgCE,GAC5B,IAAIC,GAAapC,EAAWmC,IAAa,UAAUnc,cAEnD,UAAW4K,SAAWgP,GAAkByB,EAAxC,CAGA,IAEI,YADAzQ,OAAO4Q,aAAaH,GAAce,GAEpC,MAAOX,IAGT,IACI7Q,OAAOjB,SAAS+R,OACdE,mBAAmBP,GAAc,IAAMe,EAAY,IACvD,MAAOX,MAwEDY,CAAuBljB,GAE3ByhB,EAAsB1lB,KAAKqP,EAAMpL,EAAOU,UAC7B0gB,UAAYX,GAAiBzgB,EAAQoL,EAAKuX,OAAOI,OACxD,MAAO,oCAOnB3X,EAAK+X,gBAAkB,SAAUnjB,GAC7BgiB,EAAehiB,EACVmiB,KACD/W,EAAKyX,SAAS7iB,GAAO,IAI7BoL,EAAKgY,WAAa,WACdhY,EAAKyX,SAASb,GAAc,GA3DhC,WACI,UAAWvQ,SAAWgP,GAAkByB,EAAxC,CAGA,IAEI,YADAzQ,OAAO4Q,aAAagB,WAAWnB,GAEjC,MAAOI,IAGT,IACI7Q,OAAOjB,SAAS+R,OACdE,mBAAmBP,GAAc,2CACrC,MAAOI,MA+CTgB,IAGJlY,EAAKmY,UAAY,SAAST,GACtB1X,EAAKyX,SAASzX,EAAKuX,OAAOa,MAAOV,IAGrC1X,EAAKqY,WAAa,SAASX,GACvB1X,EAAKyX,SAASzX,EAAKuX,OAAOI,OAAQD,IAItC,IAAIY,EAAevB,IACC,MAAhBuB,IACAA,EAAe1B,GAEnB5W,EAAKyX,SAASa,GAAc,GAS9B,IAAIC,EAAgB,IAAI5B,EAEpB6B,EAAiB,GACrBD,EAAcE,UAAY,SAAmBnjB,GACzC,GAAqB,iBAATA,GAAqC,iBAATA,GAA+B,KAATA,EAC5D,MAAM,IAAIgR,UAAU,kDAGtB,IAAIoS,EAASF,EAAeljB,GAK5B,OAJKojB,IACHA,EAASF,EAAeljB,GAAQ,IAAIqhB,EAClCrhB,EAAMijB,EAAcf,WAAYe,EAAchC,gBAE3CmC,GAIX,IAAIC,SAAetS,SAAWgP,EAAiBhP,OAAO4P,SAAMG,EAiB5D,OAhBAmC,EAAcK,WAAa,WAMvB,cALWvS,SAAWgP,GACfhP,OAAO4P,MAAQsC,IAClBlS,OAAO4P,IAAM0C,GAGVJ,GAGXA,EAAcM,WAAa,WACvB,OAAOL,GAIXD,EAAuB,QAAIA,EAEpBA,QA9Rc,uCAHzB,iGCAA,MAAaO,EA+EX3R,YAAY4R,EAAoB,EAAGC,EAAsB,EAAGC,EAAqB,EAAGC,GAAoB,GA7EhG,KAAAH,UAAoB,EACpB,KAAAC,YAAsB,EACtB,KAAAC,WAAqB,EA4E3BnpB,KAAKipB,UAAYA,EACjBjpB,KAAKkpB,YAAcA,EACnBlpB,KAAKmpB,WAAaA,EAEdC,GACFppB,KAAKopB,WAEPppB,KAAKqpB,eA1EAC,WAAWC,EAAcC,GAC9B,OAAID,EAAGE,UAAYD,EAAGC,UACbF,EAEAC,EAIJF,aAAaC,EAAcC,GAChC,OAAOD,EAAGJ,aAAeK,EAAGL,YAAcI,EAAGG,cAAgBF,EAAGE,aAAeH,EAAGI,YAAcH,EAAGG,UAQ9FL,0BAA0BM,GAC/B,OAAO,IAAIZ,EAASY,EAASX,UAAWW,EAASV,YAAaU,EAAST,YAAY,GAG9EG,YAAYC,EAAcC,GAC/B,MAAMK,EAAgBN,EAAGhgB,QAEzB,OADAsgB,EAAIC,IAAIN,GACDK,EAGFP,aAAaC,EAAcC,GAChC,MAAMK,EAAgBN,EAAGhgB,QAEzB,OADAsgB,EAAIE,IAAIP,GACDK,EAGAP,gBAAiBC,EAAcC,GAClC,OAAO,IAAIR,GAAYO,EAAGJ,WAAaI,EAAGL,YAAcK,EAAGN,YAAcO,EAAGL,WAAaK,EAAGN,YAAcM,EAAGP,WACvFM,EAAGL,YAAcM,EAAGN,aAGxCI,iCAAiCppB,EAAW0F,GAClD,GAAU,IAAN1F,EACF,OAAO0F,EAGT,GAAU,IAANA,EACF,OAAO,EAGT,KAAO6I,KAAKiF,IAAI9N,GAAK,MACf1F,EAAI0F,EACN1F,GAAK0F,EAELA,GAAK1F,EAIT,OAAOuO,KAAKub,MAAM9pB,GAsBb8L,WACL,IAAIyF,EAAiBzR,KAAKipB,UAAY,IAAMjpB,KAAKkpB,YAKjD,OAJwB,IAApBlpB,KAAKmpB,aACP1X,EAASzR,KAAKmpB,WAAa,IAAM1X,GAG5BA,EAGFlI,QACL,OAAO,IAAIyf,EAAShpB,KAAKipB,UAAWjpB,KAAKkpB,YAAalpB,KAAKmpB,YAAY,GAG9DQ,gBACT,OAAO3pB,KAAKipB,UAGHU,cAAU/W,GACf5S,KAAKipB,YAAcrW,IACrB5S,KAAKipB,UAAYrW,EACjB5S,KAAKopB,WACLppB,KAAKqpB,gBAIEK,kBACT,OAAO1pB,KAAKkpB,YAGHQ,gBAAY9W,GACjB5S,KAAKkpB,cAAgBtW,IACvB5S,KAAKkpB,YAActW,EAEI,IAAnB5S,KAAKipB,WACPjpB,KAAKopB,WAEPppB,KAAKqpB,gBAIEY,iBACT,OAAOjqB,KAAKmpB,WAGHc,eAAWrX,GAChB5S,KAAKmpB,aAAevW,IACtB5S,KAAKmpB,WAAavW,EAClB5S,KAAKqpB,gBAQFa,uBACL,OAAOlqB,KAAKmpB,WAAanpB,KAAKkpB,YAAclpB,KAAKipB,UAG5CkB,8BACL,IAAIC,EAAc,EACdC,EAAkB,EACtB,MAAMC,EAA4BtqB,KAAKkqB,uBACvC,KAAOG,EAAUC,GACfF,IACAC,EAAU5b,KAAK8b,IAAI,EAAGH,GAExB,OAAO3b,KAAKC,IAAI,EAAG0b,EAAM,GAGpBI,aACL,OAAOxqB,KAAKyqB,UAAY,EAGfhB,gBACT,OAAOzpB,KAAKyqB,UAGPC,OAAOC,GACZ3qB,KAAKipB,WAAa0B,EAClB3qB,KAAKkpB,aAAeyB,EACI,IAApB3qB,KAAKmpB,aACPnpB,KAAKipB,WAAajpB,KAAKmpB,WAAanpB,KAAKkpB,YACzClpB,KAAKmpB,WAAa,GAefW,IAAIF,GAST,OANA5pB,KAAKipB,WAAajpB,KAAKmpB,WAAanpB,KAAKkpB,YAAclpB,KAAKipB,WAAaW,EAASV,aAC/EU,EAAST,WAAaS,EAASV,YAAcU,EAASX,WAAajpB,KAAKkpB,YAC3ElpB,KAAKkpB,YAAclpB,KAAKkpB,YAAcU,EAASV,YAC/ClpB,KAAKmpB,WAAa,EAClBnpB,KAAKopB,WACLppB,KAAKqpB,eACErpB,KASF+pB,IAAIH,GAST,OANA5pB,KAAKipB,WAAajpB,KAAKmpB,WAAanpB,KAAKkpB,YAAclpB,KAAKipB,WAAaW,EAASV,aAC/EU,EAAST,WAAaS,EAASV,YAAcU,EAASX,WAAajpB,KAAKkpB,YAC3ElpB,KAAKkpB,YAAclpB,KAAKkpB,YAAcU,EAASV,YAC/ClpB,KAAKmpB,WAAa,EAClBnpB,KAAKopB,WACLppB,KAAKqpB,eACErpB,KAOF4qB,SAASC,GACd,GAAI7qB,KAAKkpB,aAAe2B,EACtB,OAAO7qB,KAGT,MAAM8qB,EAA2B,IAAI9B,EAAShpB,KAAKipB,UAAY,EAAGjpB,KAAKkpB,YAAalpB,KAAKmpB,YAEzF,KAAO2B,EAAepB,YAAcmB,GAClCC,EAAenB,YAGjB,GAAI3pB,KAAKipB,UAAYjpB,KAAKkpB,YAAa,CACrC,MAAM6B,EAA6B,IAAI/B,EAAShpB,KAAKipB,UAAY,EAAGjpB,KAAKkpB,YAAalpB,KAAKmpB,YAE3F,KAAO4B,EAAiBrB,YAAcmB,GACpCE,EAAiBpB,YAGnB,GAAIoB,EAAiBrB,YAAcoB,EAAepB,YAChD,OAAOqB,EAGX,OAAOD,EAGFE,OAAOnF,GACZ,OAAO7lB,KAAKyqB,aAAc5E,MAAAA,OAAG,EAAHA,EAAK4E,WAG1BQ,UAAUpF,GACf,MAAMqF,EAAelrB,KAAKyqB,UAAY5E,EAAI4E,UAE1C,OAAOS,EAAOA,EAAO,GAAK,EAAI,EAAI,EAG7BC,GAAGC,GACR,OAAOprB,KAAKyqB,UAAYW,EAAKX,UAGxBY,IAAID,GACT,OAAOprB,KAAKyqB,WAAaW,EAAKX,UAGzBa,GAAGF,GACR,OAAQprB,KAAKqrB,IAAID,GAGZG,IAAIH,GACT,OAAQprB,KAAKmrB,GAAGC,GAWV/B,eACNrpB,KAAKyqB,UAAYzqB,KAAKmpB,WAAanpB,KAAKipB,UAAYjpB,KAAKkpB,YAGnDE,WAEN,GAAuB,IAAnBppB,KAAKipB,UAEP,YADAjpB,KAAKkpB,YAAc,GAMrB,MAAMzoB,EAAYuoB,EAASwC,0BAA0B/c,KAAKiF,IAAI1T,KAAKipB,WAAYxa,KAAKiF,IAAI1T,KAAKkpB,cAE7FlpB,KAAKipB,WAAaxoB,EAClBT,KAAKkpB,aAAezoB,EAEpB,MAAMgrB,EAAgBhd,KAAKuC,MAAMhR,KAAKipB,UAAYjpB,KAAKkpB,aAQvD,GAPc,IAAVuC,IACFzrB,KAAKmpB,YAAcsC,EACnBzrB,KAAKipB,WAAawC,EAAQzrB,KAAKkpB,YACR,IAAnBlpB,KAAKipB,YACPjpB,KAAKkpB,YAAc,IAGnBlpB,KAAKkpB,YAAcF,EAAS0C,qBAAsB,CACpD,MAAMC,EAAiB3rB,KAAKkpB,YAAcF,EAAS0C,qBACnD1rB,KAAKipB,UAAYxa,KAAKub,MAAMhqB,KAAKipB,UAAY0C,GAC7C3rB,KAAKkpB,YAAcza,KAAKub,MAAMhqB,KAAKkpB,YAAcyC,GAEnD,GAAI3rB,KAAKipB,UAAYD,EAAS0C,qBAAsB,CAClD,MAAMC,EAAiB3rB,KAAKipB,UAAYD,EAAS0C,qBACjD1rB,KAAKipB,UAAYxa,KAAKub,MAAMhqB,KAAKipB,UAAY0C,GAC7C3rB,KAAKkpB,YAAcza,KAAKub,MAAMhqB,KAAKkpB,YAAcyC,IAM9CC,SAASC,GACZ,MAAMC,EAAuB9rB,KAAK+rB,iBAAiBF,GACnD,OAAOpd,KAAKiF,IAAIoY,GAAgB9C,EAASgD,yBAGtCD,iBAAiBF,GACpB,MAAMI,EAAqB,IAAIjD,EAAS,EAAG6C,EAAcnC,aAEzD,OADiC1pB,KAAKypB,UAAYwC,EAASxC,WAxUjE,aACiB,EAAAiC,qBAA+B,MA8ThC,EAAAM,yBAAmC,qGCrUnD,gBAEA,MAAaE,EAGT7U,cACIrX,KAAKmsB,OAAS,GACd,IAAK,IAAI1rB,EAAY,EAAGA,EAAI,EAAGA,IAAK,CAChCT,KAAKmsB,OAAO1rB,GAAK,GACjB,IAAK,IAAIqd,EAAY,EAAGA,EAAI,EAAGA,IAC3B9d,KAAKmsB,OAAO1rB,GAAGqd,GAAK,GAKzBwL,yBAAyB8C,GAC5B,MAAMC,EAAqB,IAAIH,EACzBI,EAAc7d,KAAK6d,IAAIF,GACvBG,EAAc9d,KAAK8d,IAAIH,GAK7B,OAJAC,EAASF,OAAO,GAAG,GAAKG,EACxBD,EAASF,OAAO,GAAG,IAAMI,EACzBF,EAASF,OAAO,GAAG,GAAKI,EACxBF,EAASF,OAAO,GAAG,GAAKG,EACjBD,EAGJG,qBAAqBC,GACxB,IAAK,IAAIhsB,EAAY,EAAGA,EAAI,EAAGA,IAC3B,IAAK,IAAIqd,EAAY,EAAGA,EAAI,EAAGA,IAC3B9d,KAAKmsB,OAAO1rB,GAAGqd,IAAM2O,EAK1BC,qBACH,MAAMC,EAAsB,IAAIT,EAChC,IAAK,IAAIzrB,EAAY,EAAGA,EAAI,EAAGA,IAC3B,IAAK,IAAIqd,EAAY,EAAGA,EAAI,EAAGA,IAC3B6O,EAAUR,OAAO1rB,GAAGqd,GAAK9d,KAAKmsB,OAAOrO,GAAGrd,GAGhD,OAAOksB,EAGJC,qBAAqBC,GACxB,MAAMpb,EAAmB,IAAI,EAAAqb,SAG7B,OAFArb,EAAOxL,EAAI4mB,EAAM5mB,EAAIjG,KAAKmsB,OAAO,GAAG,GAAKU,EAAM/mB,EAAI9F,KAAKmsB,OAAO,GAAG,GAClE1a,EAAO3L,EAAI+mB,EAAM5mB,EAAIjG,KAAKmsB,OAAO,GAAG,GAAKU,EAAM/mB,EAAI9F,KAAKmsB,OAAO,GAAG,GAC3D1a,GA9Cf,mHCAA,uCACW,KAAAsb,cAA2C,GAE1C,KAAAC,OAAmB,GACnB,KAAAC,WAAuB,GAExBC,gBAAgBC,GACnB,IAAIC,EAAiBptB,KAAK+sB,cAAcI,GACnCC,IACDA,EAAO,IAEXptB,KAAK+sB,cAAcI,GAAiBC,EAAK9d,OAAOtP,KAAKitB,YACrDjtB,KAAKitB,WAAa,GAGfI,iBAAiBC,GACpBttB,KAAKitB,WAAW1rB,KAAK+rB,GAGlB/rB,KAAK+rB,GACRttB,KAAKgtB,OAAOzrB,KAAK+rB,oGCnBzB,MAAaC,EAiBTlW,YAAYmW,EAAaC,EAAeC,GACpC1tB,KAAK2tB,MAAQ,IACb3tB,KAAKwtB,IAAMA,EACXxtB,KAAKytB,MAAQA,EACbztB,KAAK0tB,KAAOA,EAEEE,mBACd,OAAO,IAAIL,EAAU,EAAG,EAAG,GAEbM,yBACd,OAAO,IAAIN,EAAU,EAAG,IAAK,KAEfO,mBACd,OAAO,IAAIP,EAAU,GAAI,IAAK,IAEhBQ,qBACd,OAAO,IAAIR,EAAU,IAAK,EAAG,KAEfS,oBACd,OAAO,IAAIT,EAAU,IAAK,IAAK,GAEjBU,iBACd,OAAO,IAAIV,EAAU,IAAK,GAAI,IAEhBW,sBACd,OAAO,IAAIX,EAAU,IAAK,IAAK,KAEjBY,sBACd,OAAO,IAAIZ,EAAU,EAAG,EAAG,KAIba,oBACd,OAAO,IAAIb,EAAU,IAAK,EAAG,KAEfc,oBACd,OAAO,IAAId,EAAU,IAAK,IAAK,KAEjBe,oBACd,OAAO,IAAIf,EAAU,EAAG,GAAI,KAGzBvhB,WACH,MAAO,OAAShM,KAAKwtB,IAAM,IAAMxtB,KAAKytB,MAAQ,IAAMztB,KAAK0tB,KAAO,IAAM1tB,KAAK2tB,MAAQ,KA5D3F,yCCFA,IAAYY,EAeAC,8FAfZ,SAAYD,GACR,aACA,aACA,aACA,aACA,aACA,aACA,cAPJ,CAAYA,EAAA,EAAAA,WAAA,EAAAA,SAAQ,KAepB,SAAYC,GACR,qBACA,mBACA,mBACA,yBACA,iCACA,+BACA,iCACA,+BACA,2CACA,yCACA,8BACA,gDACA,8CACA,8CACA,gCACA,0CACA,oBACA,sBAlBJ,CAAYA,EAAA,EAAAA,iBAAA,EAAAA,eAAc,KAsB1B,MAAaC,EA6JTpX,YAAYqX,EAA2BC,EAAgBC,EAA4BC,GAhJ3E,KAAAD,WAA6BJ,EAAeM,KAiJhD9uB,KAAK0uB,gBAAkBA,EACvB1uB,KAAK2uB,OAASA,EACd3uB,KAAK4uB,WAAaA,EAClB5uB,KAAK6uB,cAAgBA,EACrB7uB,KAAK+uB,SAAmB,EAAkD,IAA7BJ,EAASF,EAAMO,YACxDP,EAAMQ,wBAAwBL,GAClC5uB,KAAKkvB,UAAYT,EAAMU,cAAcnvB,MAlJlCspB,yBAAyB8F,GAC5B,OAAQA,GACJ,KAAKb,EAASnoB,EACV,MAAO,IACX,KAAKmoB,EAAS/R,EACV,MAAO,IACX,KAAK+R,EAAS3nB,EACV,MAAO,IACX,KAAK2nB,EAAS9R,EACV,MAAO,IACX,KAAK8R,EAAStN,EACV,MAAO,IACX,KAAKsN,EAAStpB,EACV,MAAO,IACX,KAAKspB,EAAS5nB,EACV,MAAO,IACX,QACI,MAAO,IASZ2iB,6BAA6B+F,EAAoBC,GACpD,GAAc,IAAVA,EACA,MAAO,CAACD,EAAU,GAEtB,MAAME,EAAoBd,EAAMe,gBAC1BC,EAAwBF,EAAMvtB,QAAQqtB,GAC5C,IAAIK,EAAsB,EACtBC,GAAoBF,EAAgBH,GAASC,EAAMzuB,OAQvD,OAPI2uB,EAAgBH,EAAQC,EAAMzuB,OAAS,IACvC4uB,EAAc,GAEdC,EAAW,IACXA,EAAWJ,EAAMzuB,OAAS6uB,EAC1BD,GAAe,GAEZ,CAACH,EAAMI,GAAWD,GAUtBpG,mCAAmCsG,EAAcjD,GACpD,MAAMkD,EAA8BD,EAAMlB,gBAAkBkB,EAAME,oBAAsBnD,EACxF,OAAO8B,EAAMsB,gBAAgBF,EAAa,IAGvCvG,uBAAuB1W,EAAeod,GACzC,IAAIC,EAAmB,EAEvB,KAAOrd,EAAQ,GACXA,GAASod,EACTC,IAEJ,KAAOrd,GAASod,GACZpd,GAASod,EACTC,IAEJ,MAAO,CAACA,SAAUA,EAAUC,SAAUtd,GAOnC0W,qBAAqBzD,GACxB,IACIsK,EADAC,EAAsB,EAE1B,GAAIvK,aAAe4I,EAAO,CAEtB,MAAMmB,EAAe/J,EACrBuK,EAAcR,EAAMjB,OAAS,EAC7BwB,EAAwBP,EAAMlB,gBAA0BH,EAAStpB,EAAI2qB,EAAME,wBACrD,iBAARjK,IAGdsK,EAD8BtK,EACE,IAGpC,OAAO,IAAQpX,KAAK8b,IAAI,EAAG6F,GAAe3hB,KAAK8b,IAAI,EAAG4F,EAAgB,IAGnE7G,yBAAyB4F,GAE5B,OAAOzgB,KAAK0X,IAAI+I,EAAY,KAASzgB,KAAK4hB,KAAO5B,EAAM6B,eAAiB,GAGrEhH,qBAAqB4F,GACxB,MAAMqB,EAAc9B,EAAM+B,kBAAkBtB,GAAa,GACnDP,EAAiBlgB,KAAKuC,MAAMuf,EAAM,IAAM9B,EAAMO,WAC9CkB,EAAmBzhB,KAAKuC,MAAMuf,GAAO,GAC3C,IAAI7B,EAAsCwB,EACtCtB,EAA6BJ,EAAeM,KAKhD,OAJuD,IAAnD9uB,KAAKwvB,gBAAgBxtB,QAAQ0sB,KAC7BA,EAA6BwB,EAAW,EACxCtB,EAAaJ,EAAeiC,OAEzB,IAAIhC,EAAMC,EAAiBC,EAAQC,GAGvCtF,oBAAoB4G,GACvB,MAAMvB,EAAiBlgB,KAAKuC,MAAMkf,EAAW,IAAMzB,EAAMO,WACnD0B,EAA2BR,EAAW,GAC5C,IAAIxB,EAAsCgC,EACtC9B,EAA6BJ,EAAeM,KAKhD,OAJuD,IAAnD9uB,KAAKwvB,gBAAgBxtB,QAAQ0sB,KAC7BA,EAA6BgC,EAAmB,EAChD9B,EAAaJ,EAAeiC,OAEzB,IAAIhC,EAAMC,EAAiBC,EAAQC,GAGvCtF,eAAe4G,GAElB,IAAIxB,EADJwB,GAAwB,GAKxB,OAHuD,IAAnDlwB,KAAKwvB,gBAAgBxtB,QAAQ0sB,KAC7BA,EAA6BwB,EAAW,GAErCxB,EAGJpF,aAAa4G,GAEhB,IAAIxB,EADJwB,GAAsB,GAKtB,OAHuD,IAAnDlwB,KAAKwvB,gBAAgBxtB,QAAQ0sB,KAC7BA,EAA6BwB,EAAW,GAErCxB,EAgBJpF,+BAA+BsF,GAGlC,OAAQA,GAEJ,KAAKJ,EAAeM,KAChB,OAAO,EACX,KAAKN,EAAeiC,MAChB,OAAO,EACX,KAAKjC,EAAemC,KAChB,OAAQ,EACZ,KAAKnC,EAAeoC,QAChB,OAAO,EACX,KAAKpC,EAAeqC,YAChB,OAAO,EACX,KAAKrC,EAAesC,WAChB,OAAQ,EACZ,KAAKtC,EAAeuC,YAChB,OAAO,EACX,KAAKvC,EAAewC,WAChB,OAAQ,EACZ,KAAKxC,EAAeyC,iBAChB,MAAO,GACX,KAAKzC,EAAe0C,gBAChB,OAAQ,GACZ,KAAK1C,EAAe2C,UAChB,OAAQ,IACZ,KAAK3C,EAAe4C,mBAChB,OAAO,IACX,KAAK5C,EAAe6C,kBAChB,OAAQ,IACZ,KAAK7C,EAAe8C,kBAChB,MAAO,MACX,KAAK9C,EAAe+C,WAChB,MAAO,MACX,KAAK/C,EAAegD,gBAChB,OAAQ,MACZ,KAAKhD,EAAeiD,KAChB,MAAO,MACX,KAAKjD,EAAekD,MAChB,MAAO,MACX,QACI,MAAM,IAAIhxB,MAAM,mCAKrB4oB,+BAA+BqI,GAClC,OAAQA,GACJ,KAAK,EAED,OAAOnD,EAAeM,KAC1B,KAAK,EACD,OAAON,EAAeiC,MAC1B,KAAM,EACF,OAAOjC,EAAemC,KAC1B,KAAK,EACD,OAAOnC,EAAeqC,YAC1B,KAAM,EACF,OAAOrC,EAAesC,WAC1B,KAAK,EACD,OAAOtC,EAAeuC,YAC1B,KAAM,EACF,OAAOvC,EAAewC,WAC1B,IAAK,GACD,OAAOxC,EAAeyC,iBAC1B,KAAM,GACF,OAAOzC,EAAe0C,gBAC1B,KAAK,IACD,OAAO1C,EAAe4C,mBAC1B,KAAM,IACF,OAAO5C,EAAe6C,kBAC1B,QACI,OAAIM,EAAY,GAAKA,EAAY,EACtBnD,EAAeyC,iBACfU,EAAY,GAAKA,GAAa,EAC9BnD,EAAe0C,gBAGnB1C,EAAeyC,kBAU3B3H,yBAAyBsF,GAC5B,IAAIgD,EACJ,OAAQhD,GACJ,KAAKJ,EAAeoC,QAChBgB,EAAM,IACN,MACJ,KAAKpD,EAAemC,KAChBiB,EAAM,IACN,MACJ,KAAKpD,EAAeiC,MAChBmB,EAAM,IACN,MACJ,KAAKpD,EAAeqC,YAChBe,EAAM,KACN,MACJ,KAAKpD,EAAeuC,YAChBa,EAAM,MACN,MACJ,KAAKpD,EAAesC,WAChBc,EAAM,KACN,MACJ,KAAKpD,EAAewC,WAChBY,EAAM,MACN,MACJ,KAAKpD,EAAeyC,iBAChBW,EAAM,IACN,MACJ,KAAKpD,EAAe0C,gBAChBU,EAAM,IACN,MACJ,KAAKpD,EAAe2C,UAChBS,EAAM,KACN,MACJ,KAAKpD,EAAe4C,mBAChBQ,EAAM,KACN,MACJ,KAAKpD,EAAe6C,kBAChBO,EAAM,KACN,MACJ,KAAKpD,EAAe8C,kBAChBM,EAAM,KACN,MACJ,KAAKpD,EAAe+C,WAChBK,EAAM,MACN,MACJ,KAAKpD,EAAegD,gBAChBI,EAAM,MACN,MACJ,KAAKpD,EAAeiD,KAChBG,EAAM,IACN,MACJ,KAAKpD,EAAekD,MAChBE,EAAM,IAId,OAAOA,EAGA9B,0BACP,OAAOrB,EAAMQ,wBAAwBjvB,KAAK4uB,YAGnCiD,aACP,OAAO7xB,KAAK2uB,OAGLmD,sBACP,OAAO9xB,KAAK0uB,gBAGLqD,iBACP,OAAO/xB,KAAK4uB,WAGLoD,oBACP,OAAOhyB,KAAK6uB,cAGLoD,gBACP,OAAOjyB,KAAKkvB,UAGEgD,iCACd,OAAOzD,EAAMO,WAGVmD,cACH,OAAOnyB,KAAK+uB,SAITqD,mBAAmBzG,GACtB,GAAIA,EAAS,GACT,MAAM,IAAIjrB,MAAM,mGAEpB,OAAIirB,EAAS,EACF3rB,KAAKqyB,gCAAgC1G,GAE5CA,EAAS,EACF3rB,KAAKsyB,gCAAgC3G,GAEzC3rB,KAGJuyB,qBACH,OAAQvyB,KAAK4uB,YACT,KAAKJ,EAAemC,KACpB,KAAKnC,EAAesC,WAChB9wB,KAAK0uB,gBAAkB1uB,KAAKwyB,2BAA2BxyB,KAAK0uB,iBAC5D1uB,KAAK4uB,WAAaH,EAAMgE,wBAAwBzyB,KAAK+uB,UAAqB/uB,KAAoB,gBAC3D,IAAlCA,KAAK2uB,OAASF,EAAMO,cACrB,MACJ,KAAKR,EAAeiC,MACpB,KAAKjC,EAAeqC,YAChB7wB,KAAK0uB,gBAAkB1uB,KAAK0yB,uBAAuB1yB,KAAK0uB,iBACxD1uB,KAAK4uB,WAAaH,EAAMgE,wBAAwBzyB,KAAK+uB,UAAqB/uB,KAAoB,gBAC3D,IAAlCA,KAAK2uB,OAASF,EAAMO,cACrB,MACJ,QACI,QAIL2D,WACH,IAAIC,EAA2BnE,EAAMoE,kBAAkB7yB,KAAK4uB,YAI5D,OAHKgE,IACDA,EAAmB,IAEhB,QAAUnE,EAAMqE,kBAAkB9yB,KAAK0uB,iBAAmBkE,EACjE,WAAa5yB,KAAK0uB,gBAAkB,aAAe1uB,KAAK2uB,OAAO3iB,WAG5D+mB,eAAeC,GAClB,MAAMC,EAAYjzB,KAIlB,SAAKizB,IAAOD,IAGJC,EAAGnB,kBAAoBkB,EAAGlB,iBAAmBmB,EAAGpB,SAAWmB,EAAGnB,QAAUoB,EAAGlB,aAAeiB,EAAGjB,WAGlGmB,iBAAiBF,GAEpB,QADkBhzB,OACFgzB,GAIbG,+BAA+BH,GAClC,MAAMC,EAAYjzB,KAClB,OAAIizB,EAAGpB,SAAWmB,EAAGnB,OACVoB,EAAGnB,gBAAkBkB,EAAGlB,gBAExBmB,EAAGpB,OAASmB,EAAGnB,OAIvBuB,4BAA4BJ,GAC/B,MAAMC,EAAYjzB,KAClB,OAAIizB,EAAGpB,SAAWmB,EAAGnB,OACVoB,EAAGnB,gBAAkBkB,EAAGlB,gBAExBmB,EAAGpB,OAASmB,EAAGnB,OAKtBQ,gCAAgC1G,GACpC,MAAM0H,EAAwB5E,EAAMe,gBAAgBxtB,QAAQhC,KAAK0uB,iBACjE,IACI4E,EADAC,EAAoBvzB,KAAK2uB,OAQ7B,OANI0E,EAAgB1H,EAAS8C,EAAMe,gBAAgB1uB,OAAS,GACxDwyB,EAAc7E,EAAMe,gBAAgB6D,EAAgB1H,EAAS8C,EAAMe,gBAAgB1uB,QACnFyyB,KAEAD,EAAc7E,EAAMe,gBAAgB6D,EAAgB1H,GAEjD,IAAI8C,EAAM6E,EAAaC,EAAW/E,EAAeM,MAGpDwD,+BAA+B3G,GACnC,MAAM0H,EAAwB5E,EAAMe,gBAAgBxtB,QAAQhC,KAAK0uB,iBACjE,IACI4E,EADAC,EAAoBvzB,KAAK2uB,OAQ7B,OANI0E,EAAgB1H,EAAS,GACzB2H,EAAc7E,EAAMe,gBAAgBf,EAAMe,gBAAgB1uB,OAASuyB,EAAgB1H,GACnF4H,KAEAD,EAAc7E,EAAMe,gBAAgB6D,EAAgB1H,GAEjD,IAAI8C,EAAM6E,EAAaC,EAAW/E,EAAeM,MAGpD4D,uBAAuBc,GAC3B,IAAI/yB,EAAYguB,EAAMe,gBAAgBxtB,QAAQwxB,GAE9C,OADA/yB,GAAKA,EAAI,GAAKguB,EAAMe,gBAAgB1uB,OAC7B2tB,EAAMe,gBAAgB/uB,GAGzB+xB,2BAA2BgB,GAC/B,MAAM/yB,EAAYguB,EAAMe,gBAAgBxtB,QAAQwxB,GAChD,OAAI/yB,EAAI,EACGguB,EAAMe,gBAAgB/uB,EAAI,GAE1BguB,EAAMe,gBAAgBf,EAAMe,gBAAgB1uB,OAAS,IAjdxE,UACkB,EAAA0uB,gBAA8B,CACxCjB,EAASnoB,EAAGmoB,EAAS/R,EAAG+R,EAAS3nB,EAAG2nB,EAAS9R,EAAG8R,EAAStN,EAAGsN,EAAStpB,EAAGspB,EAAS5nB,GAGtE,EAAA2pB,eAAyB,IAAM7hB,KAAKglB,IAAMhlB,KAAK4hB,MAC/C,EAAArB,WAAqB,gGC3CxC,MAAalC,EAITzV,YAAYpR,EAAY,EAAGH,EAAY,GAHhC,KAAAG,EAAY,EACZ,KAAAH,EAAY,EAGf9F,KAAKiG,EAAIA,EACTjG,KAAK8F,EAAIA,EAGK4tB,mBACd,OAAO,IAAI5G,EAERxD,sBAAsB2J,EAAcD,GACvC,OAAQC,EAAGhtB,IAAM+sB,EAAG/sB,GAAKgtB,EAAGntB,IAAMktB,EAAGltB,EAElC6sB,WACH,MAAO,IAAM3yB,KAAKiG,EAAI,KAAOjG,KAAK8F,EAAI,KAhB9C,iHCDA,eACA,UAKA,MAAa6tB,EAaTtc,YAAYpR,EAAWH,EAAW8tB,EAAeC,GAZ1C,KAAA5tB,EAAY,EACZ,KAAAH,EAAY,EACZ,KAAA8tB,MAAgB,EAChB,KAAAC,OAAiB,EAUpB7zB,KAAKiG,EAAIA,EACTjG,KAAK8F,EAAIA,EACT9F,KAAK4zB,MAAQA,EACb5zB,KAAK6zB,OAASA,EAGXvK,iCAAiChC,EAAoBrX,GACxD,OAAO,IAAI0jB,EAAarM,EAASrhB,EAAGqhB,EAASxhB,EAAGmK,EAAK2jB,MAAO3jB,EAAK4jB,QAE1DC,eACP,OAAO,IAAI,EAAAhH,SAAS9sB,KAAKiG,EAAGjG,KAAK8F,GAE1BiuB,WACP,OAAO,IAAI,EAAAC,QAAQh0B,KAAK4zB,MAAO5zB,KAAK6zB,SA3B5C,6GCHA,gBAIIxc,YAAYuc,EAAgB,EAAGC,EAAiB,GAC5C7zB,KAAK4zB,MAAQA,EACb5zB,KAAK6zB,OAASA,iaCPtB,aACA,aACA,aACA,aACA,aACA,aACA,aACA,uCCNA,IAAYI,wEAAAA,EAAA,EAAAA,aAAA,EAAAA,WAAU,KAClB,uBACA,mBACA,uBACA,+BACA,wDCLJ,IAAYC,mEAAAA,EAAA,EAAAA,QAAA,EAAAA,MAAK,KACb,mCACA,kDCEJ,IAAYC,8FAAZ,SAAYA,GACR,yBACA,+BACA,+BACA,6BACA,mCACA,mCACA,2BACA,iCACA,iCATJ,CAAYA,EAAA,EAAAA,oBAAA,EAAAA,kBAAiB,KAiB7B,sBACW7K,cAAc8K,GACjB,OAAOA,IAAkBD,EAAkBE,SACpCD,IAAkBD,EAAkBG,YACpCF,IAAkBD,EAAkBI,WAGxCjL,uBAAuB8K,GAC1B,OAAOA,IAAkBD,EAAkBK,WACpCJ,IAAkBD,EAAkBM,cACpCL,IAAkBD,EAAkBO,aAGxCpL,eAAe8K,GAClB,OAAOA,IAAkBD,EAAkBQ,UACpCP,IAAkBD,EAAkBS,aACpCR,IAAkBD,EAAkBU,yCCrCnD,IAAYC,sEAAAA,EAAA,EAAAA,WAAA,EAAAA,SAAQ,KAChB,UACA,eACA,cACA,YACA,2aCNJ,aACA,WACA,aACA,wMCLA,gBACA,aACA,aAKA,kBAOWxL,wBAAwB5kB,GAG3B,MAAMqwB,EAAa,IAAI,UAWvB,OATuCA,EAAIvrB,UAAU9E,GACR6F,MACxC7E,GACUqvB,EAAI3vB,KAAK,0BAA0B8P,MAAM,UAEnD+C,IACG,MAAMA,KAGF1N,MACPyqB,IACG,MAEMC,GAFoB,IAAIC,WACDC,gBAAgBH,EAAS,YACzBI,qBAAqB,YAAY,GAAGC,aAAa,aAC9E,OAAON,EAAI3vB,KAAK6vB,GAAU/f,MAAM,WAEnC+C,IACG,MAAMA,KAEZ1N,MACGyqB,IACG,MACMM,GADoB,IAAIJ,WACDC,gBAAgBH,EAAS,YAChDO,EAAmB,IAAI,EAAAC,YAAYF,EAAItf,iBAC7C,OAAOxT,QAAQC,QAAQ8yB,MAE1Btd,IACG,MAAMA,KAEZ1N,MACGyqB,GACUA,IAEV/c,IACG,MAAM,IAAIvX,MAAM,wBAA0BuX,EAAIwd,YAKnDnM,sBAAsB5kB,GACzB,MAAMqwB,EAAc,IAAI,UAExB,OAAOA,EAAIvrB,UAAU9E,GAAM6F,MACtB7E,GACUqvB,EAAI3vB,KAAK,0BAA0B8P,MAAM,UAEnD+C,IAGG,MADA,UAAItP,MAAMsP,GACJA,KAEZ1N,MACGyqB,IACG,MAEMC,GAFoB,IAAIC,WACDC,gBAAgBH,EAAS,YACzBI,qBAAqB,YAAY,GAAGC,aAAa,aAC9E,OAAON,EAAI3vB,KAAK6vB,GAAU/f,MAAM,WAEnC+C,IACG,MAAMA,wGCrEtB,MAAaud,EAcTne,YAAYqe,GACR,GAZG,KAAAC,eAAyB,GAYvBD,EACD,MAAM,IAAIh1B,MAAM,gDAEpBV,KAAK01B,KAAOA,EACZ11B,KAAKwF,KAAOkwB,EAAKE,SAASnpB,cAEtBipB,EAAKC,kBACL31B,KAAK21B,eAAgB,EACrB31B,KAAK61B,eAAiBH,EAAKI,WAAW,IAE1C91B,KAAK+1B,YAAcL,EAAKM,gBAEO,IAA3BN,EAAKO,WAAWn1B,QAAgB40B,EAAKO,WAAW,GAAGC,WAAaC,KAAKC,UACrEp2B,KAAK4S,MAAQ8iB,EAAKO,WAAW,GAAGI,UAEhCr2B,KAAK4S,MAAQ,GASd0jB,UAAUC,GACb,OAAOv2B,KAAK01B,KAAKI,WAAWU,aAAaD,GAOtCT,aACH,IAAK91B,KAAKy2B,MAAO,CACb,MAAMX,EAA2B91B,KAAK01B,KAAKI,WACrCW,EAAyB,GAC/B,IAAK,IAAIh2B,EAAY,EAAGA,EAAIq1B,EAAWh1B,OAAQL,GAAK,EAChDg2B,EAAMl1B,KAAKu0B,EAAWr1B,IAE1BT,KAAKy2B,MAAQA,EAEjB,OAAOz2B,KAAKy2B,MAQTC,QAAQC,GACX,MAAMC,EAAkB52B,KAAK01B,KAAKO,WAClC,IAAK,IAAIx1B,EAAY,EAAGK,EAAiB81B,EAAM91B,OAAQL,EAAIK,EAAQL,GAAK,EAAG,CACvE,MAAMo2B,EAAaD,EAAMn2B,GACzB,GAAIo2B,EAAKX,WAAaC,KAAKW,cAAgBD,EAAKjB,SAASnpB,gBAAkBkqB,EACvE,OAAO,IAAInB,EAAYqB,IAU5BE,SAASnB,GACZ,MAAMgB,EAAkB52B,KAAK01B,KAAKO,WAC5Be,EAAqB,GACrBC,GAAsBrB,EACvBqB,IACDrB,EAAWA,EAASnpB,eAExB,IAAK,IAAIhM,EAAY,EAAGA,EAAIm2B,EAAM91B,OAAQL,GAAK,EAAG,CAC9C,MAAMo2B,EAAaD,EAAMn2B,GACrBo2B,EAAKX,WAAaC,KAAKW,eACtBG,GAAaJ,EAAKjB,SAASnpB,gBAAkBmpB,GAE9CoB,EAAIz1B,KAAK,IAAIi0B,EAAYqB,IAGjC,OAAOG,GA9Ff,6aCPA,aACA,6GCHA,mBACS1N,mCAAmC4N,EAAaC,EAAyBC,GAAsB,GAEpG,OADuB,IAAIC,OAAO,QAAUF,EAAkB,WAAYC,EAAa,SAAM9Q,GAC/Epa,KAAKgrB,kaCHvB,aACA,aACA,0LCDA,mCAGI7f,YAAYoe,EAAiB10B,GAEzBf,KAAKy1B,QAAUA,EACX10B,IACAf,KAAKy1B,SAAW,IAAM10B,EAAEiL,cAMpC,oCAGIqL,YAAYoe,GAERz1B,KAAKy1B,QAAUA,IAIvB,qCAGIpe,YAAYoe,GACRz1B,KAAKy1B,QAAUA,uHC3BvB,gBAGA,UAKA,MAAsB6B,UAAoC,EAAAC,gBAStDlgB,YAAYmgB,EAA4BC,EAAgCC,GACpEC,QACA33B,KAAKy3B,WAAaA,EAClBz3B,KAAK43B,cAAgBF,EACrB13B,KAAK63B,YAAc,IAAI,EAAAC,YAAY93B,KAAMw3B,EAAgBO,kBACzD/3B,KAAKg4B,gBAAkBR,EACvBx3B,KAAKg4B,gBAAgBC,oBAAoB12B,KAAKvB,MAC9CA,KAAKk4B,MAAQV,EAAgBW,kBAAkBD,MAI/CE,YAA0B,OAAOp4B,KAAKq4B,MAE/BC,sBAA+B,OAAOt4B,KAAKg4B,gBAC3CO,uBAAyC,OAAOv4B,KAAKy3B,WACrDe,gBAA6B,OAAOx4B,KAAKy3B,WAAWe,WAxBnE,oJCPA,gBAEA,MAAsBC,UAAqC,EAAAlB,gBAEvDlgB,YAAYqhB,GACRf,QACA33B,KAAK04B,OAASA,EAEPC,aACP,OAAO34B,KAAK04B,OAELC,WAAO/lB,GACd5S,KAAK04B,OAAS9lB,GAVtB,6ICHA,gBAGA,UAEA,UAEA,UAKA,2CACY,KAAAgmB,gCAAsE,IAAI,EAAAC,WAC1E,KAAAC,+CAA2D,GAC3D,KAAAC,oCAA0E,IAAI,EAAAF,WAG3EG,2BACP,OAAOh5B,KAAKi5B,qBAGLD,yBAAqBpmB,GAC5B5S,KAAKi5B,qBAAuBrmB,EAC5B5S,KAAKk5B,8BAQFC,+BACHn5B,KAAK+4B,oCAAoCK,QACzCp5B,KAAK84B,+CAA+CM,QACpD,IAAK,MAAM7I,KAAOvwB,KAAK44B,gCAAgCS,OACnDr5B,KAAK+4B,oCAAoCO,SAAS/I,EAAKvwB,KAAK44B,gCAAgCW,SAAShJ,IAItGiJ,gBAAgBC,EAA8B7J,GACjD,IAAKA,EACD,OAEJ,MAAM8J,EAA2B9J,EAAMkC,gBAAiC,GAAflC,EAAMiC,OAqBzD8H,EAA2C35B,KAAK84B,+CAA+C92B,QAAQ03B,IAAa,EAC1H,GAAI15B,KAAK+4B,oCAAoCa,YAAYF,IAIrD,GAHIC,GACA35B,KAAK84B,+CAA+C1T,OAAOplB,KAAK84B,+CAA+C92B,QAAQ03B,GAAW,GAElI15B,KAAK+4B,oCAAoCQ,SAASG,KAAc9J,EAAME,oBAAqB,CACvF9vB,KAAK44B,gCAAgCgB,YAAYF,IACjD15B,KAAK44B,gCAAgCW,SAASG,KAAc9J,EAAME,qBAClE9vB,KAAK84B,+CAA+Cv3B,KAAKm4B,GACzD15B,KAAK+4B,oCAAoCO,SAASI,EAAU9J,EAAME,sBAC3DF,EAAMmC,aAAe,EAAAvD,eAAeM,MAC3C9uB,KAAK+4B,oCAAoC3sB,OAAOstB,GAGpD,MAAMG,EAAgD75B,KAAK+4B,oCAAoCQ,SAASG,GAWxG,GAVI9J,EAAMmC,aAAe,EAAAvD,eAAeM,OAGhCc,EAF4C,KAA5CnhB,KAAKiF,IAAImmB,GAED,IAAI,EAAApL,MAAMmB,EAAMkC,gBAAiBlC,EAAMiC,OAAQ,EAAArD,eAAeM,MAI9D,IAAI,EAAAL,MAAMmB,EAAMkC,gBAAiBlC,EAAMiC,OAAQ,EAAArD,eAAeoC,UAG1E5wB,KAAK85B,2BAA2BlK,EAAMmC,cAAiBnC,EAAMoC,cAC7D,OAEJ,EAAA+H,qBAAqBC,cAAcC,uBAAuBR,EAAe7J,SAG7E,GAAIA,EAAMmC,aAAe,EAAAvD,eAAeM,KAAM,CAK1C,GAJK6K,GACD35B,KAAK84B,+CAA+Cv3B,KAAKm4B,GAE7D15B,KAAK+4B,oCAAoCO,SAASI,EAAU9J,EAAME,qBAC9D9vB,KAAK85B,2BAA2BlK,EAAMmC,cAAiBnC,EAAMoC,cAC7D,OAEJ,EAAA+H,qBAAqBC,cAAcC,uBAAuBR,EAAe7J,QAErE+J,IAEA/J,EAAQ,IAAI,EAAAnB,MAAMmB,EAAMkC,gBAAiBlC,EAAMiC,OAAQ,EAAArD,eAAeoC,SACtE5wB,KAAK84B,+CAA+C1T,OAAOplB,KAAK84B,+CAA+C92B,QAAQ03B,GAAW,GAClI,EAAAK,qBAAqBC,cAAcC,uBAAuBR,EAAe7J,IAMjFkK,2BAA2BlL,GAC/B,OAAOA,IAAe,EAAAJ,eAAe2C,WAAavC,IAAe,EAAAJ,eAAe0C,gBAG5EgI,8BACJ,MAAMgB,EAAwBl6B,KAAKi5B,qBAAqBkB,eACxD,IAAIC,EAEAA,EADAp6B,KAAKi5B,qBAAqBoB,IAAM,EACZ,EAAA7L,eAAeiC,MAEf,EAAAjC,eAAemC,KAEvC3wB,KAAK44B,gCAAgCQ,QACrCp5B,KAAK84B,+CAA+Ch4B,OAAS,EAC7D,IAAK,IAAI6tB,GAAkB,EAAGA,EAAS,EAAGA,IACtC,IAAK,IAAIluB,EAAY,EAAGA,EAAIy5B,EAAUp5B,OAAQL,IAC1CT,KAAK44B,gCAAgCU,SAAiBY,EAAUz5B,GAAc,GAATkuB,EAAa,EAAAF,MAAMQ,wBAAwBmL,IAGxHp6B,KAAKm5B,2OCvIb,mBACA,UACA,UACA,SACA,UACA,UACA,UACA,UAwsBA,IAAYmB,EAhsBZ,oBA8BIjjB,YAAYkjB,EAAgC7B,EAAiC8B,GAAoB,GA7BvF,KAAAA,UAAoB,EACpB,KAAAC,4BAAsC,EACtC,KAAAC,qBAA+B,EAC/B,KAAAC,qBAA+B,EAC/B,KAAAC,iBAA6B,IAAI,EAAA9N,SACjC,KAAA+N,iBAA6B,IAAI,EAAA/N,SACjC,KAAA7c,KAAgB,IAAI,EAAA+jB,QACpB,KAAA8G,WAAsB,IAAI,EAAA9G,QAC1B,KAAA+G,gBAA4B,IAAI,EAAAjO,SAChC,KAAAkO,sBAAkC,IAAI,EAAAlO,SACtC,KAAAmO,WAAqB,EACrB,KAAAC,YAAsB,EACtB,KAAAC,UAAoB,EACpB,KAAAC,aAAuB,EACvB,KAAAC,iBAA2B,EAC3B,KAAAC,kBAA4B,EAC5B,KAAAC,gBAA0B,EAC1B,KAAAC,mBAA6B,EAG7B,KAAAC,cAA+B,GAUrCz7B,KAAK04B,OAASA,EACd14B,KAAKu6B,WAAaA,EAClBv6B,KAAKw6B,SAAWA,EAChBx6B,KAAK06B,qBAAsB,EAC3B16B,KAAK26B,qBAAsB,EACvBjC,IACA14B,KAAK24B,OAASD,GAIXgD,iCACP,OAAO17B,KAAKy6B,2BAGLkB,0BACP,OAAO37B,KAAK06B,oBAGLiB,wBAAoB/oB,GAC3B5S,KAAK06B,oBAAsB9nB,EAGpBgpB,0BACP,OAAO57B,KAAK26B,oBAGLiB,wBAAoBhpB,GAC3B5S,KAAK26B,oBAAsB/nB,EAGpBipB,uBACP,OAAO77B,KAAK46B,iBAGLiB,qBAAiBjpB,GACxB5S,KAAK46B,iBAAmBhoB,EAGjBkpB,uBACP,OAAO97B,KAAK66B,iBAGLiB,qBAAiBlpB,GACxB5S,KAAK66B,iBAAmBjoB,EACxB5S,KAAKy6B,4BAA6B,EAG3B1G,WACP,OAAO/zB,KAAKiQ,KAGL8jB,SAAKnhB,GACZ5S,KAAKiQ,KAAO2C,EAGLmpB,iBACP,OAAO/7B,KAAK86B,WAGLkB,sBACP,OAAOh8B,KAAK+6B,gBAGLkB,4BACP,OAAOj8B,KAAKg7B,sBAGLkB,iBACP,OAAOl8B,KAAKi7B,WAGLiB,eAAWtpB,GAClB5S,KAAKi7B,WAAaroB,EAClB5S,KAAKm8B,qBAGEC,kBACP,OAAOp8B,KAAKk7B,YAGLkB,gBAAYxpB,GACnB5S,KAAKk7B,YAActoB,EACnB5S,KAAKm8B,qBAGEE,gBACP,OAAOr8B,KAAKm7B,UAGLkB,cAAUzpB,GACjB5S,KAAKm7B,UAAYvoB,EACjB5S,KAAKm8B,qBAGEG,mBACP,OAAOt8B,KAAKo7B,aAGLkB,iBAAa1pB,GACpB5S,KAAKo7B,aAAexoB,EACpB5S,KAAKm8B,qBAGEI,uBACP,OAAOv8B,KAAKq7B,iBAAmBr7B,KAAKi7B,WAAaj7B,KAAKi7B,WAAaj7B,KAAKq7B,iBAGjEkB,qBAAiB3pB,GACxB5S,KAAKq7B,iBAAmBzoB,EACxB5S,KAAKw8B,2BAGEC,wBACP,OAAOz8B,KAAKs7B,kBAAoBt7B,KAAKk7B,YAAcl7B,KAAKk7B,YAAcl7B,KAAKs7B,kBAGpEmB,sBAAkB7pB,GACzB5S,KAAKs7B,kBAAoB1oB,EACzB5S,KAAKw8B,2BAGEE,sBACP,OAAO18B,KAAKu7B,gBAAkBv7B,KAAKm7B,UAAYn7B,KAAKm7B,UAAYn7B,KAAKu7B,gBAG9DmB,oBAAgB9pB,GACvB5S,KAAKu7B,gBAAkB3oB,EACvB5S,KAAKw8B,2BAGEG,yBACP,OAAO38B,KAAKw7B,mBAAqBx7B,KAAKo7B,aAAep7B,KAAKo7B,aAAep7B,KAAKw7B,mBAGvEmB,uBAAmB/pB,GAC1B5S,KAAKw7B,mBAAqB5oB,EAC1B5S,KAAKw8B,2BAGEI,wBACP,OAAO58B,KAAK68B,kBAGLC,8BACP,OAAO98B,KAAK+8B,wBAGLC,oBACP,OAAOh9B,KAAKy7B,cAGLuB,kBAAcpqB,GACrB5S,KAAKy7B,cAAgB7oB,EAGd+lB,aACP,OAAO34B,KAAK04B,OAGLC,WAAO/lB,GACd,GAAI5S,KAAK04B,OAAQ,CAEb,MAAMrrB,EAAgBrN,KAAK04B,OAAOsE,cAAch7B,QAAQhC,KAAM,GAC1DqN,GAAS,GACTrN,KAAK04B,OAAOsE,cAAc5X,OAAO/X,EAAO,GAGhDrN,KAAK04B,OAAS9lB,EAEV5S,KAAK04B,OAAOsE,cAAch7B,QAAQhC,OAAS,EAC3C,UAAI2I,MAAM,kBAAqB3I,KAAKu6B,WAAWljB,YAAoB7R,KACnE,gCAAmCxF,KAAK04B,OAAO6B,WAAWljB,YAAoB7R,KAAO,kBAErFxF,KAAK04B,OAAOsE,cAAcz7B,KAAKvB,MAI5Bi9B,iBACP,OAAOj9B,KAAKu6B,WAQL2C,aACP,OAAO,IAAI,EAAApQ,SAAS9sB,KAAK87B,iBAAiB71B,GAAKjG,KAAKy8B,kBAAoBz8B,KAAKu8B,kBACzDv8B,KAAK87B,iBAAiBh2B,GAAK9F,KAAK28B,mBAAqB38B,KAAK08B,kBAG3ES,gCACCn9B,KAAK04B,QACL14B,KAAK46B,iBAAiB30B,EAAIjG,KAAK04B,OAAOmD,iBAAiB51B,EAAIjG,KAAK66B,iBAAiB50B,EACjFjG,KAAK46B,iBAAiB90B,EAAI9F,KAAK04B,OAAOmD,iBAAiB/1B,EAAI9F,KAAK66B,iBAAiB/0B,GAEjF9F,KAAK46B,iBAAmB56B,KAAK66B,iBAO9BuC,4BACLp9B,KAAK46B,iBAAiB30B,EAAIjG,KAAK66B,iBAAiB50B,EAChDjG,KAAK46B,iBAAiB90B,EAAI9F,KAAK66B,iBAAiB/0B,EAChD,IAAI4yB,EAAsB14B,KAAK04B,OAC/B,KAAOA,GACL14B,KAAK46B,iBAAiB30B,GAAKyyB,EAAOmC,iBAAiB50B,EACnDjG,KAAK46B,iBAAiB90B,GAAK4yB,EAAOmC,iBAAiB/0B,EACnD4yB,EAASA,EAAOA,OAOb2E,uDACHr9B,KAAK46B,iBAAiB30B,EAAI,EAC1BjG,KAAK46B,iBAAiB90B,EAAI,EAC1B,IAAK,IAAIw3B,EAAc,EAAGC,EAAcv9B,KAAKg9B,cAAcl8B,OAAQw8B,EAAMC,IAAOD,EACjDt9B,KAAKg9B,cAAcM,GACxCE,oCAAoCx9B,KAAK46B,iBAAiB30B,EAAGjG,KAAK46B,iBAAiB90B,GAU1F03B,oCAAoCv3B,EAAWH,GAClD9F,KAAK46B,iBAAiB30B,EAAIjG,KAAK66B,iBAAiB50B,EAAIA,EACpDjG,KAAK46B,iBAAiB90B,EAAI9F,KAAK66B,iBAAiB/0B,EAAIA,EACpD,IAAK,IAAIw3B,EAAc,EAAGC,EAAcv9B,KAAKg9B,cAAcl8B,OAAQw8B,EAAMC,IAAOD,EACjDt9B,KAAKg9B,cAAcM,GACxCE,oCAAoCx9B,KAAK46B,iBAAiB30B,EAAGjG,KAAK46B,iBAAiB90B,GAO1F23B,uCACL,IAAK,IAAIH,EAAc,EAAGC,EAAcv9B,KAAKg9B,cAAcl8B,OAAQw8B,EAAMC,IAAOD,EACnDt9B,KAAKg9B,cAAcM,GACxCE,oCAAoCx9B,KAAK46B,iBAAiB30B,EAAGjG,KAAK46B,iBAAiB90B,GAOtF43B,uBACH,GAAkC,IAA9B19B,KAAKy7B,cAAc36B,OACnB,OAEJ,IAAK,IAAIw8B,EAAc,EAAGC,EAAcv9B,KAAKg9B,cAAcl8B,OAAQw8B,EAAMC,IAAOD,EAC1Ct9B,KAAKg9B,cAAcM,GACxCI,uBAIjB,IAAIC,EAAkBC,OAAOC,UACzBC,EAAmBF,OAAOG,UAC1BC,EAAiBJ,OAAOC,UACxBI,EAAoBL,OAAOG,UAC3BG,EAAwBN,OAAOC,UAC/BM,EAAyBP,OAAOG,UAChCK,EAAuBR,OAAOC,UAC9BQ,EAA0BT,OAAOG,UAGjC/9B,KAAKw6B,WACLmD,EAAU39B,KAAKi7B,WACf6C,EAAW99B,KAAKk7B,YAChB8C,EAASh+B,KAAKm7B,UACd8C,EAAYj+B,KAAKo7B,aACjB8C,EAAgBl+B,KAAKq7B,iBACrB8C,EAAiBn+B,KAAKs7B,kBACtB8C,EAAep+B,KAAKu7B,gBACpB8C,EAAkBr+B,KAAKw7B,oBAI3B,IAAK,IAAI8B,EAAc,EAAGC,EAAcv9B,KAAKg9B,cAAcl8B,OAAQw8B,EAAMC,IAAOD,EAAK,CACjF,MAAMgB,EAA4Bt+B,KAAKg9B,cAAcM,GACrDK,EAAUlvB,KAAKC,IAAIivB,EAASW,EAAazD,iBAAiB50B,EAAIq4B,EAAarD,YAC3E6C,EAAWrvB,KAAKN,IAAI2vB,EAAUQ,EAAazD,iBAAiB50B,EAAIq4B,EAAapD,aAC7E8C,EAASvvB,KAAKC,IAAIsvB,EAAQM,EAAazD,iBAAiB/0B,EAAIw4B,EAAanD,WACzE8C,EAAYxvB,KAAKN,IAAI8vB,EAAWK,EAAazD,iBAAiB/0B,EAAIw4B,EAAalD,cAC/E8C,EAAgBzvB,KAAKC,IAAIwvB,EAAeI,EAAazD,iBAAiB50B,EAAIq4B,EAAajD,kBACvF8C,EAAiB1vB,KAAKN,IAAIgwB,EAAgBG,EAAazD,iBAAiB50B,EAAIq4B,EAAahD,mBACzF8C,EAAe3vB,KAAKC,IAAI0vB,EAAcE,EAAazD,iBAAiB/0B,EAAIw4B,EAAa/C,iBACrF8C,EAAkB5vB,KAAKN,IAAIkwB,EAAiBC,EAAazD,iBAAiB/0B,EAAIw4B,EAAa9C,oBAI/Fx7B,KAAKi7B,WAAa0C,EAClB39B,KAAKk7B,YAAc4C,EACnB99B,KAAKm7B,UAAY6C,EACjBh+B,KAAKo7B,aAAe6C,EACpBj+B,KAAKq7B,iBAAmB6C,EACxBl+B,KAAKs7B,kBAAoB6C,EACzBn+B,KAAKu7B,gBAAkB6C,EACvBp+B,KAAKw7B,mBAAqB6C,EAC1Br+B,KAAKm8B,qBACLn8B,KAAKw8B,2BACLx8B,KAAK06B,qBAAsB,EAC3B16B,KAAK26B,qBAAsB,EAGxB4D,4BACH,GAAkC,IAA9Bv+B,KAAKy7B,cAAc36B,OACnB,OAEJ,IAAK,IAAIw8B,EAAc,EAAGC,EAAcv9B,KAAKg9B,cAAcl8B,OAAQw8B,EAAMC,IAAOD,EAC1Ct9B,KAAKg9B,cAAcM,GACxCiB,4BAEjB,IAAIP,EAAiBJ,OAAOC,UACxBI,EAAoBL,OAAOG,UAC3BK,EAAuBR,OAAOC,UAC9BQ,EAA0BT,OAAOG,UACjC/9B,KAAK26B,sBACLqD,EAASh+B,KAAKm7B,UACd8C,EAAYj+B,KAAKo7B,aACjBgD,EAAep+B,KAAKu7B,gBACpB8C,EAAkBr+B,KAAKw7B,oBAE3B,IAAK,IAAI8B,EAAc,EAAGC,EAAcv9B,KAAKg9B,cAAcl8B,OAAQw8B,EAAMC,IAAOD,EAAK,CACjF,MAAMgB,EAA4Bt+B,KAAKg9B,cAAcM,GACrDU,EAASvvB,KAAKC,IAAIsvB,EAAQM,EAAazD,iBAAiB/0B,EAAIw4B,EAAanD,WACpE,EAAAqD,eAAeC,yBAA6BH,EAAa/D,sBAAsB,EAAAmE,0BAChFT,EAAYxvB,KAAKN,IAAI8vB,EAAWK,EAAazD,iBAAiB/0B,EAAIw4B,EAAalD,eAKnFgD,EAAe3vB,KAAKC,IAAI0vB,EAAcE,EAAazD,iBAAiB/0B,EAAIw4B,EAAa/C,iBACrF8C,EAAkB5vB,KAAKN,IAAIkwB,EAAiBC,EAAazD,iBAAiB/0B,EAAIw4B,EAAa9C,oBAE/Fx7B,KAAKm7B,UAAY6C,EACjBh+B,KAAKo7B,aAAe6C,EACpBj+B,KAAKu7B,gBAAkB6C,EACvBp+B,KAAKw7B,mBAAqB6C,EAC1Br+B,KAAKm8B,qBACLn8B,KAAKw8B,2BASFmC,wCAAwCC,EAA2BC,EAAuBC,GAC7F9+B,KAAK87B,iBAAmB,IAAI,EAAAhP,SAASgS,EAAS74B,EAAG64B,EAASh5B,GAC1D9F,KAAKm9B,gCACL,IAAI4B,EAA0B,EAC1BC,GAAwB,EAC5B,GACI,OAAQH,GACJ,KAAKvE,EAAW2E,KAChB,KAAK3E,EAAW4E,MACZH,EAAkB/+B,KAAK66B,iBAAiB50B,EACxC24B,EAAaO,sCAAsCn/B,KAAM6+B,GACzDG,EAAevwB,KAAKiF,IAAIqrB,EAAkB/+B,KAAK66B,iBAAiB50B,GAAK,KACrE,MACJ,KAAKq0B,EAAW8E,GAChB,KAAK9E,EAAW+E,KACZN,EAAkB/+B,KAAK66B,iBAAiB/0B,EACxC84B,EAAaO,sCAAsCn/B,KAAM6+B,GACzDG,EAAevwB,KAAKiF,IAAIqrB,EAAkB/+B,KAAK66B,iBAAiB/0B,GAAK,KACrE,MACJ,QACI,MAAM,IAAI,EAAAw5B,4BAA4B,oBAG3CN,GAQJO,mBAAmBC,GACtB,MAAMC,EAAuBhxB,KAAKC,IAAI1O,KAAK67B,iBAAiB51B,EAAIjG,KAAKk7B,YAAasE,EAAI5E,iBAAiB30B,EAAIu5B,EAAItE,aACzGzsB,KAAKN,IAAInO,KAAK67B,iBAAiB51B,EAAIjG,KAAKi7B,WAAYuE,EAAI5E,iBAAiB30B,EAAIu5B,EAAIvE,YACjFyE,EAAwBjxB,KAAKC,IAAI1O,KAAK67B,iBAAiB/1B,EAAI9F,KAAKo7B,aAAcoE,EAAI5E,iBAAiB90B,EAAI05B,EAAIpE,cAC3G3sB,KAAKN,IAAInO,KAAK67B,iBAAiB/1B,EAAI9F,KAAKm7B,UAAWqE,EAAI5E,iBAAiB90B,EAAI05B,EAAIrE,WACtF,OAAIsE,EAAe,GAAKC,EAAgB,EAWrCC,kBAAkBH,GACrB,MAAMI,EAA6B5/B,KAAK67B,iBAAiB51B,EAAIjG,KAAKi7B,YAAgBuE,EAAI5E,iBAAiB30B,EAAIu5B,EAAIvE,YACvGuE,EAAI5E,iBAAiB30B,EAAIu5B,EAAIvE,YAAgBj7B,KAAK67B,iBAAiB51B,EAAIjG,KAAKk7B,YAC9E2E,EAA8B7/B,KAAK67B,iBAAiB51B,EAAIjG,KAAKi7B,YAAgBuE,EAAI5E,iBAAiB30B,EAAIu5B,EAAItE,aACxGsE,EAAI5E,iBAAiB30B,EAAIu5B,EAAItE,aAAiBl7B,KAAK67B,iBAAiB51B,EAAIjG,KAAKk7B,YACrF,GAAI0E,GAAoBC,EAAmB,CACvC,MAAMC,EAA4B9/B,KAAK67B,iBAAiB/1B,EAAI9F,KAAKm7B,WAAeqE,EAAI5E,iBAAiB90B,EAAI05B,EAAIrE,WACrGqE,EAAI5E,iBAAiB90B,EAAI05B,EAAIrE,WAAen7B,KAAK67B,iBAAiB/1B,EAAI9F,KAAKo7B,aAC7E2E,EAA+B//B,KAAK67B,iBAAiB/1B,EAAI9F,KAAKm7B,WAAeqE,EAAI5E,iBAAiB90B,EAAI05B,EAAIpE,cACxGoE,EAAI5E,iBAAiB90B,EAAI05B,EAAIpE,cAAkBp7B,KAAK67B,iBAAiB/1B,EAAI9F,KAAKo7B,aACtF,GAAI0E,GAAmBC,EACnB,OAAO,EAGf,OAAO,EAGJC,uBAAuBlB,GAE1B,OAD0B9+B,KAAK67B,iBAAiB51B,EAAIjG,KAAKi7B,YAAe6D,EAAS74B,GAAK64B,EAAS74B,GAAMjG,KAAK67B,iBAAiB51B,EAAIjG,KAAKk7B,aAEtGl7B,KAAK67B,iBAAiB/1B,EAAI9F,KAAKm7B,WAAc2D,EAASh5B,GAAKg5B,EAASh5B,GAAM9F,KAAK67B,iBAAiB/1B,EAAI9F,KAAKo7B,aAapI6E,yBAAyBT,GAC5B,MAAMC,EAAuBhxB,KAAKC,IAAI1O,KAAK67B,iBAAiB51B,EAAIjG,KAAKs7B,kBAAmBkE,EAAI5E,iBAAiB30B,EAAIu5B,EAAIlE,mBAC/G7sB,KAAKN,IAAInO,KAAK67B,iBAAiB51B,EAAIjG,KAAKq7B,iBAAkBmE,EAAI5E,iBAAiB30B,EAAIu5B,EAAInE,kBACvFqE,EAAwBjxB,KAAKC,IAAI1O,KAAK67B,iBAAiB/1B,EAAI9F,KAAKw7B,mBAAoBgE,EAAI5E,iBAAiB90B,EAAI05B,EAAIhE,oBACjH/sB,KAAKN,IAAInO,KAAK67B,iBAAiB/1B,EAAI9F,KAAKu7B,gBAAiBiE,EAAI5E,iBAAiB90B,EAAI05B,EAAIjE,iBAC5F,OAAIkE,EAAe,GAAKC,EAAgB,EAWrCQ,kBAAkBV,GACrB,MAAMW,EAA6BngC,KAAK67B,iBAAiB51B,EAAIjG,KAAKq7B,kBAAsBmE,EAAI5E,iBAAiB30B,EAAIu5B,EAAInE,kBAC7GmE,EAAI5E,iBAAiB30B,EAAIu5B,EAAInE,kBAAsBr7B,KAAK67B,iBAAiB51B,EAAIjG,KAAKs7B,kBACpF8E,EAA8BpgC,KAAK67B,iBAAiB51B,EAAIjG,KAAKq7B,kBAAsBmE,EAAI5E,iBAAiB30B,EAAIu5B,EAAIlE,mBAC9GkE,EAAI5E,iBAAiB30B,EAAIu5B,EAAIlE,mBAAuBt7B,KAAK67B,iBAAiB51B,EAAIjG,KAAKs7B,kBAC3F,GAAI6E,GAAoBC,EAAmB,CACvC,MAAMC,EAA4BrgC,KAAK67B,iBAAiB/1B,EAAI9F,KAAKu7B,iBAAqBiE,EAAI5E,iBAAiB90B,EAAI05B,EAAIjE,iBAC3GiE,EAAI5E,iBAAiB90B,EAAI05B,EAAIjE,iBAAqBv7B,KAAK67B,iBAAiB/1B,EAAI9F,KAAKw7B,mBACnF8E,EAA+BtgC,KAAK67B,iBAAiB/1B,EAAI9F,KAAKu7B,iBAAqBiE,EAAI5E,iBAAiB90B,EAAI05B,EAAIhE,oBAC9GgE,EAAI5E,iBAAiB90B,EAAI05B,EAAIhE,oBAAwBx7B,KAAK67B,iBAAiB/1B,EAAI9F,KAAKw7B,mBAC5F,GAAI6E,GAAmBC,EACnB,OAAO,EAGf,OAAO,EAGJC,uBAAuBzB,GAG1B,OAF0B9+B,KAAK67B,iBAAiB51B,EAAIjG,KAAKq7B,kBAAqByD,EAAS74B,GAChF64B,EAAS74B,GAAMjG,KAAK67B,iBAAiB51B,EAAIjG,KAAKs7B,mBAEvBt7B,KAAK67B,iBAAiB/1B,EAAI9F,KAAKu7B,iBAAoBuD,EAASh5B,GAC/Eg5B,EAASh5B,GAAM9F,KAAK67B,iBAAiB/1B,EAAI9F,KAAKw7B,mBActDgF,8BAA8B5B,EAA2BC,EAAuBC,GACnF9+B,KAAK87B,iBAAmB,IAAI,EAAAhP,SAASgS,EAAS74B,EAAG64B,EAASh5B,GAC1D9F,KAAKm9B,gCACL,IAAI4B,EAA0B,EAC1BC,GAAwB,EAC5B,GACI,OAAQH,GACJ,KAAKvE,EAAW2E,KAChB,KAAK3E,EAAW4E,MACZH,EAAkB/+B,KAAK66B,iBAAiB50B,EACxC24B,EAAa6B,gCAAgCzgC,KAAM6+B,GACnDG,EAAevwB,KAAKiF,IAAIqrB,EAAkB/+B,KAAK66B,iBAAiB50B,GAAK,KACrE,MACJ,KAAKq0B,EAAW8E,GAChB,KAAK9E,EAAW+E,KACZN,EAAkB/+B,KAAK66B,iBAAiB/0B,EACxC84B,EAAa6B,gCAAgCzgC,KAAM6+B,GACnDG,EAAevwB,KAAKiF,IAAIqrB,EAAkB/+B,KAAK66B,iBAAiB/0B,GAAK,KACrE,MACJ,QACI,MAAM,IAAI,EAAAw5B,4BAA4B,oBAEzCN,GAGN0B,uBAA0BC,GAC7B,MAAM9a,EAAc7lB,KAAKu6B,WACzB,GAAIv6B,KAAKggC,uBAAuBW,IAAsB9a,EAClD,OAAQA,EAEZ,IAAK,IAAIyX,EAAc,EAAGC,EAAcv9B,KAAKy7B,cAAc36B,OAAQw8B,EAAMC,IAAOD,EAAK,CACjF,MACMsD,EADmB5gC,KAAKy7B,cAAc6B,GACZoD,uBAA0BC,GAC1D,GAAIC,EACA,OAAQA,GASbC,mBAA8CC,EAAqBC,GAAsB,EAC3CC,EAAoB,EAAAzJ,gBAAgB/xB,MACrF,IAAIiM,EAAc,GAClB,IAAK,MAAMwvB,KAASjhC,KAAKy7B,cACrBhqB,EAASA,EAAOnC,OAAO2xB,EAAMJ,mBAAsBC,EAAQC,EAAYC,IAkB3E,OAbIhhC,KAAKu6B,YAAev6B,KAAKu6B,WAAiB2G,kBAAkBF,KACxDD,EACID,EAAOnB,kBAAkB3/B,OACzByR,EAAOlQ,KAAKvB,KAAKu6B,YAGjBuG,EAAOvB,mBAAmBv/B,OAC1ByR,EAAOlQ,KAAKvB,KAAKu6B,aAMtB9oB,EAID0qB,qBACNn8B,KAAK+6B,gBAAkB,IAAI,EAAAjO,SAAS9sB,KAAKk8B,WAAYl8B,KAAKq8B,WAC1Dr8B,KAAKiQ,KAAO,IAAI,EAAA+jB,QAAQh0B,KAAKo8B,YAAcp8B,KAAKk8B,WAAYl8B,KAAKs8B,aAAet8B,KAAKq8B,WACrFr8B,KAAK68B,kBAAoB,EAAAlJ,aAAawN,0BAA0BnhC,KAAK+6B,gBAAiB/6B,KAAKiQ,MAGrFusB,2BACNx8B,KAAKg7B,sBAAwB,IAAI,EAAAlO,SAAS9sB,KAAKu8B,iBAAkBv8B,KAAK08B,iBACtE18B,KAAK86B,WAAa,IAAI,EAAA9G,QAAQh0B,KAAKy8B,kBAAoBz8B,KAAKu8B,iBAAkBv8B,KAAK28B,mBAAqB38B,KAAK08B,iBAC7G18B,KAAK+8B,wBAA0B,EAAApJ,aAAawN,0BAA0BnhC,KAAKg7B,sBAAuBh7B,KAAK86B,YAQnGqE,sCAAsCiC,EAAyBvC,GAMnE,GAAI7+B,OAASohC,EAAb,CAKA,GAAIphC,KAAKw6B,UAAYx6B,KAAKigC,yBAAyBmB,GAAa,CAC5D,IAAIC,EAAwB,EAC5B,OAAQxC,GACJ,KAAKvE,EAAW2E,KAIZ,OAHAoC,EAAiBrhC,KAAK46B,iBAAiB30B,EAAIjG,KAAKq7B,kBAAqB+F,EAAWxG,iBAAiB30B,EAAIm7B,EAAW9F,mBAChH8F,EAAWvG,iBAAiB50B,GAAKo7B,OACjCD,EAAWxG,iBAAiB30B,GAAKo7B,GAErC,KAAK/G,EAAW4E,MAIZ,OAHAmC,EAAiBrhC,KAAK46B,iBAAiB30B,EAAIjG,KAAKs7B,mBAAsB8F,EAAWxG,iBAAiB30B,EAAIm7B,EAAW/F,kBACjH+F,EAAWvG,iBAAiB50B,GAAKo7B,OACjCD,EAAWxG,iBAAiB30B,GAAKo7B,GAErC,KAAK/G,EAAW8E,GAIZ,OAHAiC,EAAiBrhC,KAAK46B,iBAAiB90B,EAAI9F,KAAKu7B,iBAAoB6F,EAAWxG,iBAAiB90B,EAAIs7B,EAAW5F,oBAC/G4F,EAAWvG,iBAAiB/0B,GAAKu7B,OACjCD,EAAWxG,iBAAiB90B,GAAKu7B,GAErC,KAAK/G,EAAW+E,KAIZ,OAHAgC,EAAiBrhC,KAAK46B,iBAAiB90B,EAAI9F,KAAKw7B,oBAAuB4F,EAAWxG,iBAAiB90B,EAAIs7B,EAAW7F,iBAClH6F,EAAWvG,iBAAiB/0B,GAAKu7B,OACjCD,EAAWxG,iBAAiB90B,GAAKu7B,GAErC,QACI,MAAM,IAAI,EAAA/B,4BAA4B,cAKlD,IAAK,IAAIhC,EAAc,EAAGC,EAAcv9B,KAAKg9B,cAAcl8B,OAAQw8B,EAAMC,IAAOD,EAC1Ct9B,KAAKg9B,cAAcM,GACxC6B,sCAAsCiC,EAAYvC,IAS/D4B,gCAAgCW,EAAyBvC,GAM7D,GAAI7+B,OAASohC,EAAb,CAKA,GAAIphC,KAAKw6B,UAAYx6B,KAAKu/B,mBAAmB6B,GAAa,CACtD,IAAIC,EACJ,OAAQxC,GACJ,KAAKvE,EAAW2E,KAIZ,OAHAoC,EAAiBrhC,KAAK46B,iBAAiB30B,EAAIjG,KAAKi7B,YAAemG,EAAWxG,iBAAiB30B,EAAIm7B,EAAWlG,aAC1GkG,EAAWvG,iBAAiB50B,GAAKo7B,OACjCD,EAAWxG,iBAAiB30B,GAAKo7B,GAErC,KAAK/G,EAAW4E,MAIZ,OAHAmC,EAAiBrhC,KAAK46B,iBAAiB30B,EAAIjG,KAAKk7B,aAAgBkG,EAAWxG,iBAAiB30B,EAAIm7B,EAAWnG,YAC3GmG,EAAWvG,iBAAiB50B,GAAKo7B,OACjCD,EAAWxG,iBAAiB30B,GAAKo7B,GAErC,KAAK/G,EAAW8E,GAIZ,OAHAiC,EAAiBrhC,KAAK46B,iBAAiB90B,EAAI9F,KAAKm7B,WAAciG,EAAWxG,iBAAiB90B,EAAIs7B,EAAWhG,cACzGgG,EAAWvG,iBAAiB/0B,GAAKu7B,OACjCD,EAAWxG,iBAAiB90B,GAAKu7B,GAErC,KAAK/G,EAAW+E,KAIZ,OAHAgC,EAAiBrhC,KAAK46B,iBAAiB90B,EAAI9F,KAAKo7B,cAAiBgG,EAAWxG,iBAAiB90B,EAAIs7B,EAAWjG,WAC5GiG,EAAWvG,iBAAiB/0B,GAAKu7B,OACjCD,EAAWxG,iBAAiB90B,GAAKu7B,GAErC,QACI,MAAM,IAAI,EAAA/B,4BAA4B,cAKlD,IAAK,IAAIhC,EAAc,EAAGC,EAAcv9B,KAAKg9B,cAAcl8B,OAAQw8B,EAAMC,IAAOD,EAC1Ct9B,KAAKg9B,cAAcM,GACxCmD,gCAAgCW,EAAYvC,MAKrE,SAAYvE,GACR,mBACA,qBACA,eACA,mBAJJ,CAAYA,EAAA,EAAAA,aAAA,EAAAA,WAAU,sGC/sBtB,gBAEA,MAAagH,UAAkB,EAAA/J,iBAA/B,oNCAA,gBAKA,IAAYgK,EAwGAC,EAZAC,EAZAC,EARAC,GAxEZ,SAAYJ,GACR,2CACA,yCACA,+DACA,uCACA,iCACA,qCACA,2BACA,yCACA,iCACA,iCACA,kCACA,kDACA,wDACA,kCACA,kCACA,kCACA,kCACA,kCACA,kCACA,kCACA,kCACA,kCACA,oCACA,4BACA,4BACA,4BACA,4BACA,4BACA,4BACA,4BACA,4BACA,4BACA,8BAjCJ,CAAYA,EAAA,EAAAA,0BAAA,EAAAA,wBAAuB,KAoCtB,EAAAK,4BACT,IAAI,EAAA/I,WACR,EAAA+I,4BAA4BtI,SAASiI,EAAwBM,iBAAkB,WAC/E,EAAAD,4BAA4BtI,SAASiI,EAAwBO,gBAAiB,QAC9E,EAAAF,4BAA4BtI,SAASiI,EAAwBQ,2BAA4B,SACzF,EAAAH,4BAA4BtI,SAASiI,EAAwBS,eAAgB,UAC7E,EAAAJ,4BAA4BtI,SAASiI,EAAwBU,YAAa,aAC1E,EAAAL,4BAA4BtI,SAASiI,EAAwBW,cAAe,YAC5E,EAAAN,4BAA4BtI,SAASiI,EAAwBY,SAAU,iBACvE,EAAAP,4BAA4BtI,SAASiI,EAAwBa,gBAAiB,kBAC9E,EAAAR,4BAA4BtI,SAASiI,EAAwBc,YAAa,cAC1E,EAAAT,4BAA4BtI,SAASiI,EAAwBe,YAAa,aAC1E,EAAAV,4BAA4BtI,SAASiI,EAAwBgB,YAAa,cAC1E,EAAAX,4BAA4BtI,SAASiI,EAAwBiB,oBAAqB,aAClF,EAAAZ,4BAA4BtI,SAASiI,EAAwBkB,uBAAwB,cACrF,EAAAb,4BAA4BtI,SAASiI,EAAwBmB,YAAa,gBAC1E,EAAAd,4BAA4BtI,SAASiI,EAAwBoB,YAAa,cAC1E,EAAAf,4BAA4BtI,SAASiI,EAAwBqB,YAAa,cAC1E,EAAAhB,4BAA4BtI,SAASiI,EAAwBsB,YAAa,aAC1E,EAAAjB,4BAA4BtI,SAASiI,EAAwBuB,YAAa,eAC1E,EAAAlB,4BAA4BtI,SAASiI,EAAwBwB,YAAa,aAC1E,EAAAnB,4BAA4BtI,SAASiI,EAAwByB,YAAa,YAC1E,EAAApB,4BAA4BtI,SAASiI,EAAwB0B,YAAa,SAC1E,EAAArB,4BAA4BtI,SAASiI,EAAwB2B,YAAa,kBAC1E,EAAAtB,4BAA4BtI,SAASiI,EAAwB4B,aAAc,aAC3E,EAAAvB,4BAA4BtI,SAASiI,EAAwB6B,SAAU,cACvE,EAAAxB,4BAA4BtI,SAASiI,EAAwB8B,SAAU,QACvE,EAAAzB,4BAA4BtI,SAASiI,EAAwB+B,SAAU,SACvE,EAAA1B,4BAA4BtI,SAASiI,EAAwBgC,SAAU,WACvE,EAAA3B,4BAA4BtI,SAASiI,EAAwBiC,SAAU,WACvE,EAAA5B,4BAA4BtI,SAASiI,EAAwBkC,SAAU,SACvE,EAAA7B,4BAA4BtI,SAASiI,EAAwBmC,SAAU,kBACvE,EAAA9B,4BAA4BtI,SAASiI,EAAwBoC,SAAU,kBACvE,EAAA/B,4BAA4BtI,SAASiI,EAAwBqC,SAAU,YACvE,EAAAhC,4BAA4BtI,SAASiI,EAAwBsC,UAAW,aAE5DlC,EAAA,EAAAA,YAAA,EAAAA,UAAS,KACjB,6BACA,0BAMQD,EAAA,EAAAA,kBAAA,EAAAA,gBAAe,KACvB,6BACA,6BACA,mCACA,yCACA,uBACA,6BACA,qBACA,yBACA,kCAGQD,EAAA,EAAAA,YAAA,EAAAA,UAAS,KACjB,qBACA,2BACA,2CACA,+CACA,mCACA,6CACA,uBACA,uBACA,wBAGQD,EAAA,EAAAA,eAAA,EAAAA,aAAY,KAEpB,YACA,cACA,cACA,cACA,cACA,cACA,cACA,4CCnGJ,IAAYsC,EAfAC,EANAC,sHAAAA,EAAA,EAAAA,cAAA,EAAAA,YAAW,KACnB,eACA,+BACA,8BAGQD,EAAA,EAAAA,0BAAA,EAAAA,wBAAuB,KAC/B,qBACA,2BACA,2BACA,6BACA,yCACA,qCACA,6CACA,iCACA,2CACA,uBACA,wBACA,yBAGQD,EAAA,EAAAA,mBAAA,EAAAA,iBAAgB,KACxB,2BACA,mBACA,wKCxBJ,gBACA,UAEA,IAMYG,EANAC,GAAAA,EAAA,EAAAA,gBAAA,EAAAA,cAAa,KACrB,eACA,mCACA,uCAGJ,SAAYD,GACR,gBACA,oBACA,8BACA,oBACA,wBACA,oBACA,wBAPJ,CAAYA,EAAA,EAAAA,wBAAA,EAAAA,sBAAqB,KAWjC,0BAwBI5sB,YAAY8sB,EAA2CF,EAAsBG,SArBrE,KAAAlM,MAAwB,IAAI,EAAAsG,eAU7B,KAAA6F,WAAqB,EACrB,KAAAC,cAAwB,EACxB,KAAAC,cAAwB,EACxB,KAAAC,cAAwB,EACxB,KAAAC,aAAuB,EACvB,KAAAC,eAAyB,EAEzB,KAAAC,kBAAmC,EAAAC,cAAc3F,KAEjD,KAAA4F,iBAA2B,EAG9B7kC,KAAKikC,sBAAwBE,EAItBF,0BAAsBa,GAE7B,OADA9kC,KAAK8kC,sBAAwBA,EACrBA,GACJ,KAAKb,EAAsBc,MACvB/kC,KAAKglC,cACL,MACJ,KAAKf,EAAsBgB,UACvBjlC,KAAKklC,kBACL,MACJ,KAAKjB,EAAsBkB,UACvBnlC,KAAKolC,kBACL,MACJ,KAAKnB,EAAsBoB,QACvBrlC,KAAKslC,oBACL,MACJ,KAAKrB,EAAsBsB,aACvBvlC,KAAKwlC,yBACL,MACJ,KAAKvB,EAAsBG,QAC3B,QACIpkC,KAAKylC,iBAINxB,4BACP,OAAOjkC,KAAK8kC,sBAGTE,cACHhlC,KAAK0lC,gBAAiB,EACtB1lC,KAAK2lC,YAAa,EAClB3lC,KAAK4lC,0BAA2B,EAChC5lC,KAAK6lC,wBAAyB,EAC9B7lC,KAAK8lC,aAAc,EACnB9lC,KAAK+lC,qBAAsB,EAC3B/lC,KAAKgmC,qBAAsB,EAC3BhmC,KAAKimC,cAAe,EACpBjmC,KAAKkmC,iBAAkB,EACvBlmC,KAAKmmC,WAAY,EACjBnmC,KAAKomC,cAAe,EACpBpmC,KAAKqmC,cAAe,EACpBrmC,KAAKsmC,cAAe,EACpBtmC,KAAKykC,aAAc,EACnBzkC,KAAKumC,eAAgB,EACrBvmC,KAAK6kC,iBAAkB,EACvB7kC,KAAKk4B,MAAMsO,aAAc,EAGtBf,gBACHzlC,KAAKk4B,MAAMuO,oBACXzmC,KAAKglC,cACLhlC,KAAK6kC,iBAAkB,EAGpBK,kBACHllC,KAAK0lC,gBAAiB,EACtB1lC,KAAK2lC,YAAa,EAClB3lC,KAAK4lC,0BAA2B,EAChC5lC,KAAK4lC,0BAA2B,EAChC5lC,KAAK8lC,aAAc,EACnB9lC,KAAK+lC,qBAAsB,EAC3B/lC,KAAKgmC,qBAAsB,EAC3BhmC,KAAKimC,cAAe,EACpBjmC,KAAKkmC,iBAAkB,EACvBlmC,KAAK6kC,iBAAkB,EAGpBS,oBAEHtlC,KAAKk4B,MAAMsO,aAAc,EACzBxmC,KAAK0mC,aAAc,EAEnB1mC,KAAK6kC,iBAAkB,EAGpBW,yBACHxlC,KAAKslC,oBACLtlC,KAAKumC,eAAgB,EAErBvmC,KAAKk4B,MAAMyO,8BAAgC,IAC3C3mC,KAAKk4B,MAAM0O,0BAA4B,EAIvC5mC,KAAKk4B,MAAM2O,8BAAgC,EAC3C7mC,KAAKk4B,MAAM4O,+BAAiC,EAG5C9mC,KAAKk4B,MAAM6O,qBAAuB,IAClC/mC,KAAKk4B,MAAM8O,cAAgB,IAC3BhnC,KAAKk4B,MAAM+O,8BAAgC,EAE3CjnC,KAAKk4B,MAAMgP,iBAAmB,EAC9BlnC,KAAKk4B,MAAMiP,eAAiB,EAC5BnnC,KAAKk4B,MAAMkP,gBAAkB,EAM1BhC,kBACHplC,KAAK0lC,gBAAiB,EACtB1lC,KAAK2lC,YAAa,EAClB3lC,KAAK4lC,0BAA2B,EAChC5lC,KAAK6lC,wBAAyB,EAC9B7lC,KAAK8lC,aAAc,EACnB9lC,KAAK+lC,qBAAsB,EAC3B/lC,KAAKgmC,qBAAsB,EAC3BhmC,KAAKimC,cAAe,EACpBjmC,KAAKkmC,iBAAkB,EAIhBQ,kBACP,OAAO1mC,KAAKykC,YAGLiC,gBAAY9zB,GACnB5S,KAAKykC,YAAc7xB,EACnB5S,KAAKqmC,aAAezzB,EACpB5S,KAAKmmC,UAAYvzB,EACjB5S,KAAKomC,aAAexzB,EACpB5S,KAAKsmC,aAAe1zB,EAObuzB,gBACP,OAAOnmC,KAAKqkC,UAIL8B,cAAUvzB,GACjB5S,KAAKqkC,UAAYzxB,EACjB5S,KAAKk4B,MAAMmP,YAAcz0B,EACpBA,IACD5S,KAAKomC,cAAe,GAIjBA,mBACP,OAAOpmC,KAAKskC,aAIL8B,iBAAaxzB,GACpB5S,KAAKskC,aAAe1xB,EACpB5S,KAAKk4B,MAAMoP,eAAiB10B,EACxBA,IACA5S,KAAKmmC,WAAY,GAIdE,mBACP,OAAOrmC,KAAKwkC,aAIL6B,iBAAazzB,GACpB5S,KAAKwkC,aAAe5xB,EACpB5S,KAAKk4B,MAAMqP,eAAiB30B,EAGrB0zB,mBACP,OAAOtmC,KAAKukC,aAGL+B,iBAAa1zB,GACpB5S,KAAKukC,aAAe3xB,EACpB5S,KAAKk4B,MAAMsP,eAAiB50B,EAGrB2zB,oBACP,OAAOvmC,KAAK0kC,cAGL6B,kBAAc3zB,GACrB5S,KAAK0kC,cAAgB9xB,EACrB5S,KAAKk4B,MAAMuP,gBAAkB70B,EACxB5S,KAAKk4B,MAAMuP,kBACZznC,KAAKk4B,MAAMwP,yBAA0B,GAIlCC,wBACP,OAAO3nC,KAAK2kC,kBAGLgD,sBAAkB/0B,GACzB5S,KAAK2kC,kBAAoB/xB,EACzB5S,KAAKk4B,MAAMyP,kBAAoB/0B,EAGxBg1B,YACP,OAAO5nC,KAAKk4B,MAGL0P,UAAMh1B,GACb5S,KAAKk4B,MAAQtlB,iNCzPrB,eAEA,aACA,UACA,UACA,QAMA,UACA,UACA,UACA,UACA,UACA,UASA,MAAa4rB,EAkVTnnB,cA5GO,KAAAwwB,cAA0B,CAAC,EAAK,EAAK,IAAK,IAAK,EAAK,IAAK,EAAK,GAC9D,KAAAC,4BAAwC,CAAC,EAAK,EAAK,EAAK,EAAK,GAAM,GAAM,GAAM,KAC/E,KAAAC,qBAA+C,GAC/C,KAAAC,4BAAsD,GAiFtD,KAAAC,kCAA4C,EAyB/CjoC,KAAKymC,oBAGFA,oBAEHzmC,KAAKkoC,aAAqC,EAAtB1J,EAAe2J,KAGnCnoC,KAAKooC,iBAAmB,EACxBpoC,KAAKqoC,oBAAsB,EAC3BroC,KAAKsoC,4CAA8C,EACnDtoC,KAAKuoC,oBAAsB,EAC3BvoC,KAAKwoC,kBAAoB,EAGzBxoC,KAAKwmC,aAAc,EACnBxmC,KAAKyoC,kBAAoB,EAAAA,kBAAkBpJ,KAC3Cr/B,KAAK0oC,WAAa,OAClB1oC,KAAK2oC,cAAgB,EACrB3oC,KAAK4oC,oBAAsB,EAC3B5oC,KAAKknC,iBAAmB,EACxBlnC,KAAKmnC,eAAiB,EACtBnnC,KAAKonC,gBAAkB,EACvBpnC,KAAK6oC,iBAAmB,EACxB7oC,KAAK8oC,oBAAsB,EAC3B9oC,KAAKgnC,cAAgB,EACrBhnC,KAAK+mC,qBAAuB,EAC5B/mC,KAAK+oC,yBAA2B,EAChC/oC,KAAK6mC,8BAAgC,EAGrC7mC,KAAKgpC,YAAc,EACnBhpC,KAAKipC,wBAA0B,OAC/BjpC,KAAKkpC,0BAA4B1K,EAAe2J,KAChDnoC,KAAKmpC,iBAAmB,EACxBnpC,KAAKopC,kBAAoB,EACzBppC,KAAKqpC,wBAA0B,EAC/BrpC,KAAKspC,uBAAyB,EAC9BtpC,KAAKupC,0BAA4B,EACjCvpC,KAAKinC,8BAAgC,EACrCjnC,KAAK8mC,+BAAiC,EACtC9mC,KAAKwpC,2BAA6B,IAGlCxpC,KAAKypC,eAAgB,EACrBzpC,KAAK0pC,gBAAkB,CACnBC,wBAAwB,EACxBC,YAAY,EACZC,0BAA0B,GAE9B7pC,KAAK8pC,cAAe,EAGpB9pC,KAAK+pC,UAAYvL,EAAe2J,KAAO,EACvCnoC,KAAKgqC,eAAiBxL,EAAe2J,KAAO,EAC5CnoC,KAAKiqC,kBAAoB,KAAOzL,EAAe2J,KAE/CnoC,KAAKkqC,WAAY,EACjBlqC,KAAKmqC,eAAiB,GACtBnqC,KAAKoqC,sBAAwB,GAG7BpqC,KAAKqqC,eAAiB,GACtBrqC,KAAKsqC,gBAAkB,IACvBtqC,KAAKuqC,wBAA0B,EAC/BvqC,KAAKwqC,mCAAqC,EAC1CxqC,KAAKyqC,6BAA8B,EACnCzqC,KAAK0qC,uCAAyC,EAC9C1qC,KAAK2qC,4CAA8C,EACnD3qC,KAAK4qC,0BAA4B,GACjC5qC,KAAK6qC,eAAiB,IACtB7qC,KAAK8qC,kBAAoB,KACzB9qC,KAAK+qC,2CAA4C,EACjD/qC,KAAKgrC,mCAAoC,EACzChrC,KAAKirC,yBAA2B,GAChCjrC,KAAKkrC,8CAAgD,GAGrDlrC,KAAKmrC,sBAAwB,IAC7BnrC,KAAKorC,kBAAoB,GACzBprC,KAAKqrC,mBAAqB,EAC1BrrC,KAAKsrC,mDAAqD,EAC1DtrC,KAAKurC,iBAAmB,GAGxBvrC,KAAKwrC,yBAA2B,EAChCxrC,KAAKyrC,gBAAkB,EACvBzrC,KAAK0rC,0BAA4B,GACjC1rC,KAAK2rC,WAAa,GAClB3rC,KAAK4rC,cAAgB,IACrB5rC,KAAK6rC,cAAgB,IACrB7rC,KAAK8rC,kBAAoB,GACzB9rC,KAAK+rC,iDAAmD,EACxD/rC,KAAKgsC,6BAA8B,EAInChsC,KAAKisC,uBAAyB,GAC9BjsC,KAAKksC,iBAAmB,GAGxBlsC,KAAKmsC,mBAAqB,IAC1BnsC,KAAKosC,6BAA+B,IACpCpsC,KAAKqsC,+BAAiC,IACtCrsC,KAAKssC,sBAAwB,IAC7BtsC,KAAKusC,qBAAuB,IAC5BvsC,KAAKwsC,sBAAwB,GAC7BxsC,KAAKysC,oBAAsB,GAC3BzsC,KAAK0sC,kDAAoD,GACzD1sC,KAAK2sC,eAAiB,EACtB3sC,KAAK4sC,wCAA0C,KAC/C5sC,KAAK6sC,gCAAkC,IAGvC7sC,KAAK8sC,2BAA6B,EAClC9sC,KAAK+sC,qBAAuB,GAG5B/sC,KAAKgtC,sBAAwB,GAC7BhtC,KAAKitC,oBAAsB,GAC3BjtC,KAAKktC,gCAAkC,IACvCltC,KAAKmtC,sBAAwB,EAC7BntC,KAAKotC,yBAA2B,EAAAjZ,kBAAkBI,WAClDv0B,KAAKqtC,4BAA8B,EACnCrtC,KAAKstC,oBAAsB,EAC3BttC,KAAKutC,mCAAqC,EAC1CvtC,KAAKwtC,mBAAqB,GAC1BxtC,KAAKytC,oBAAsB,EAC3BztC,KAAK0tC,uBAAwB,EAC7B1tC,KAAK2tC,2BAA6B,YAClC3tC,KAAK4tC,qBAAuB,IAAI,EAAA/U,WAChC74B,KAAK6tC,0BAA0B7tC,KAAK4tC,sBAAsB,GAC1D5tC,KAAK8tC,sBAAwB,IAAI,EAAAjV,WACjC74B,KAAK+tC,2BAA2B/tC,KAAK8tC,uBACrC9tC,KAAKguC,aAAe,GACpBhuC,KAAKiuC,kBACLjuC,KAAKkuC,yBAA2B,EAChCluC,KAAKmuC,4BAA8B,GACnCnuC,KAAKouC,qBAAuB,EAC5BpuC,KAAKquC,wCAA0C,GAC/CruC,KAAKsuC,6BAA+B,GACpCtuC,KAAKuuC,qBAAuB,EAC5BvuC,KAAKwuC,sBAAwB,GAG7BxuC,KAAKyuC,yBAA2B,IAAMjQ,EAAe2J,KACrDnoC,KAAK0uC,yBAA2B,EAChC1uC,KAAK2uC,2BAA6B,GAClC3uC,KAAK4uC,gBAAiB,EACtB5uC,KAAK6uC,kBAAmB,EACxB7uC,KAAK8uC,mBAAoB,EACzB9uC,KAAK+uC,wBAA0B,IAAMvQ,EAAe2J,KACpDnoC,KAAKgvC,oBAAsB,GAC3BhvC,KAAKivC,wBAA0B,GAC/BjvC,KAAKkvC,yBAA2B,GAChClvC,KAAKmvC,qBAAsB,EAG3BnvC,KAAKovC,sBAAuB,EAC5BpvC,KAAKqvC,oBAAsB,IAC3BrvC,KAAKsvC,iCACLtvC,KAAKuvC,oBAAsB,IAC3BvvC,KAAKwvC,yBAA2B,GAChCxvC,KAAKyvC,qCAAuC,EAC5CzvC,KAAK0vC,iBAAmB,IACxB1vC,KAAK2vC,iBAAmB,IACxB3vC,KAAK4vC,wBAA0B,MAC/B5vC,KAAK6vC,wBAA0B,KAC/B7vC,KAAK8vC,oBAAsB,GAC3B9vC,KAAK+vC,gBAAkB,GACvB/vC,KAAKgwC,kBAAoB,GACzBhwC,KAAKiwC,oBAAsB,GAC3BjwC,KAAKkwC,oBAAsB,GAC3BlwC,KAAKmwC,iBAAmB,EACxBnwC,KAAKowC,wCAA0C,IAC/CpwC,KAAKqwC,wCAA0C,IAC/CrwC,KAAKswC,sCAAwC,GAC7CtwC,KAAKuwC,sCAAwC,GAC7CvwC,KAAKwwC,qCAAuC,GAE5CxwC,KAAKywC,sCAAmCnqB,EAGxCtmB,KAAK0wC,4BAA8B,EACnC1wC,KAAK2wC,6BAA+B,GACpC3wC,KAAK4wC,6BAA+B,GACpC5wC,KAAK6wC,iCAAmC,GACxC7wC,KAAK8wC,iCAAmC,GACxC9wC,KAAK+wC,YAAc,IAGnB/wC,KAAKgxC,wBAA0B,EAAA7c,kBAAkBI,WACjDv0B,KAAKixC,aAAe,EACpBjxC,KAAKkxC,2BAA6B,EAClClxC,KAAKmxC,8BAAgC,GACrCnxC,KAAKoxC,gCAAkC,GACvCpxC,KAAKqxC,+BAAiC,GACtCrxC,KAAKsxC,+BAAiC,GACtCtxC,KAAKuxC,mCAAqC,IAC1CvxC,KAAKwxC,6BAA+B,GACpCxxC,KAAKyxC,8BAAgC,IAGrCzxC,KAAK0xC,6BAA+B,IACpC1xC,KAAK2xC,4BAA8B,IACnC3xC,KAAK4xC,eAAiB,IACtB5xC,KAAK6xC,kBAAoB,EACzB7xC,KAAK8xC,0BAA4B,IACjC9xC,KAAK+xC,6BAA+B,EACpC/xC,KAAKgyC,wBAA0B,GAG/BhyC,KAAKiyC,gCAAkC,GACvCjyC,KAAKkyC,2BAA6B,GAClClyC,KAAKmyC,mBAAqB,EAC1BnyC,KAAKoyC,qBAAuB,EAC5BpyC,KAAKqyC,UAAY,IACjBryC,KAAKsyC,eAAiB,GACtBtyC,KAAKuyC,oBAAiBjsB,EACtBtmB,KAAKwyC,gBAAkB,EACvBxyC,KAAKyyC,2BAAwBnsB,EAC7BtmB,KAAK0yC,uBAAyB,UAC9B1yC,KAAK2yC,eAAiB,IACtB3yC,KAAK4yC,gBAAkB,IACvB5yC,KAAK6yC,yBAA2B,IAChC7yC,KAAK8yC,oBAAsB,IAC3B9yC,KAAK+yC,oBAAsBvU,EAAe2J,KAAO,EACjDnoC,KAAKgzC,gCAAkC,IACvChzC,KAAKizC,eAAiBzU,EAAe2J,KAAO,EAC5CnoC,KAAKkzC,mCAAqC,IAC1ClzC,KAAKmzC,0BAA4B,GACjCnzC,KAAKozC,sBAAwB,EAC7BpzC,KAAKqzC,qBAAuB,IAC5BrzC,KAAKszC,8BAAgC9U,EAAe2J,KACpDnoC,KAAKuzC,eAAiBvzC,KAAKsyC,eAAiBtyC,KAAKisC,uBAEjDjsC,KAAKwzC,gCAAkC,EAGvCxzC,KAAKyzC,mCAAqC,KAG1CzzC,KAAK0zC,kBAAoB,MAGzB1zC,KAAK2mC,8BAAgC,IACrC3mC,KAAK4mC,0BAA4B,EACjC5mC,KAAK2zC,6BAA+B,EACpC3zC,KAAK4zC,oBAAsB,GAC3B5zC,KAAK6zC,gBAAkB,EACvB7zC,KAAK8zC,4BAA8B,GACnC9zC,KAAK+zC,gCAAkC,IACvC/zC,KAAKg0C,wBAA0B,IAC/Bh0C,KAAKi0C,qBAAsB,EAC3Bj0C,KAAKk0C,qBAAuB,EAC5Bl0C,KAAKm0C,qBAAuB,GAC5Bn0C,KAAKo0C,qBAAuB,GAG5Bp0C,KAAKq0C,uBAAwB,EAG7Br0C,KAAKs0C,WAAa,EAAAC,gBAAgBC,MAClCx0C,KAAKy0C,sBAAwB,EAC7Bz0C,KAAK00C,+BAAiC,EAAAC,gCAAgCC,GACtE50C,KAAK60C,yBAA0B,EAC/B70C,KAAK80C,iBAAkB,EACvB90C,KAAK+0C,aAAc,EACnB/0C,KAAKg1C,aAAe,gBAAaC,IACjCj1C,KAAKk1C,iBAAkB,EACvBl1C,KAAKm1C,yBAA0B,EAC/Bn1C,KAAKo1C,YAAa,EAClBp1C,KAAKq1C,YAAa,EAClBr1C,KAAKs1C,uBAAuB,WAC5Bt1C,KAAKu1C,mBAAqB,UAC1Bv1C,KAAKw1C,kBAAoB,kBACzBx1C,KAAKy1C,iBAAmB,EAAAxhB,WAAWyhB,QACnC11C,KAAK21C,uBAAyB,WAC9B31C,KAAK41C,sBAAwBhY,OAAOC,UACpC79B,KAAK61C,sBAAwB,EAC7B71C,KAAK81C,sBAAwBlY,OAAOC,UACpC79B,KAAK+1C,oBAAsBnY,OAAOC,UAClC79B,KAAKunC,gBAAiB,EACtBvnC,KAAKqnC,aAAc,EACnBrnC,KAAKsnC,gBAAiB,EACtBtnC,KAAKwnC,gBAAiB,EACtBxnC,KAAKynC,iBAAkB,EACvBznC,KAAK0nC,yBAA0B,EAC/B1nC,KAAKg2C,kBAAmB,EACxBh2C,KAAKi2C,sBAAuB,EAC5Bj2C,KAAKk2C,uCAAwC,EAC7Cl2C,KAAKm2C,sBAAuB,EAC5Bn2C,KAAKo2C,cAAe,EACpBp2C,KAAKq2C,oBAAqB,EAC1Br2C,KAAKs2C,4BAA6B,EAClCt2C,KAAKu2C,iDAAkD,EACvDv2C,KAAKw2C,sBAAuB,EAC5Bx2C,KAAKy2C,mCAAoC,EACzCz2C,KAAK02C,qBAAsB,EAC3B12C,KAAK22C,sBAAuB,EAC5B32C,KAAK42C,8BAA+B,EACpC52C,KAAK2nC,kBAAoB,EAAA/C,cAAciS,aACvC72C,KAAK82C,0BAA2B,EAChC92C,KAAK+2C,uBAAyB,EAAAnS,cAAc3F,KAC5Cj/B,KAAKg3C,2BAA4B,EACjCh3C,KAAKi3C,yBAA2B,IAChCj3C,KAAKk3C,iBAAmB,EACxBl3C,KAAKm3C,iBAAmB,EACxBn3C,KAAKo3C,mBAAqB,GAC1Bp3C,KAAKq3C,kBAAoB,IACzBr3C,KAAKs3C,8BAA+B,EACpCt3C,KAAKu3C,oBAAsB,EAC3Bv3C,KAAKw3C,kCAAmC,EACxCx3C,KAAKy3C,8BAA+B,EACpCz3C,KAAK03C,4BAA6B,EAClC13C,KAAK23C,uBAAwB,EAE7BnZ,EAAeC,yBAA0B,EAEzCz+B,KAAK43C,WAAaA,EAAWC,oBAC7B73C,KAAK83C,yBAAsBxxB,EAC3BtmB,KAAK+3C,iCAAkC,EACvC/3C,KAAKg4C,wBAA0B,EAE/Bh4C,KAAKi4C,uBAAyB,IAAI,EAAApf,WAClC74B,KAAKioC,kCAAoC,EAEzCjoC,KAAKk4C,8BAAgC,EACrCl4C,KAAKm4C,8BAAgC,GACrCn4C,KAAKo4C,qDAAsD,EAC3Dp4C,KAAKq4C,uBAAwB,EAC7Br4C,KAAKs4C,4BAA6B,EAClCt4C,KAAKu4C,gDAGL,IACIv4C,KAAKw4C,0BAA4Bx4C,KAAKqqC,eAAiBrqC,KAAKsqC,gBAAkBtqC,KAAK6qC,eAAiB7qC,KAAK8qC,kBAAoB,GAM/H,MAAO2N,GACL,UAAIC,KAAK,mBAAoBD,IAI9BF,8CAA8CI,GAAoC,eACrF,MAAMC,EAA6C,QAA5B,EAAoB,QAApB,EAAAC,WAAWpzB,iBAAS,eAAEmzB,cAAM,QAAI,GACjDlzB,EAAmD,QAA/B,EAAoB,QAApB,EAAAmzB,WAAWpzB,iBAAS,eAAEC,iBAAS,QAAI,GAC7D,IAAIozB,GAA0B,GAC1B94C,KAAKs4C,4BAA8B,SAAWpsC,KAAK0sC,IAE5C54C,KAAKq4C,uBAAyB3yB,EAAUqzB,SAAS,cADxDD,GAAiB,GAMrB94C,KAAKg5C,6CAA+C,EAAAC,wCAAwCC,MACvFJ,GACGH,GAA6B34C,KAAKm4C,gCAClCn4C,KAAKg5C,6CAA+C,EAAAC,wCAAwCE,OASjG7D,uBAAuB8D,GAC1Bp5C,KAAKq5C,kBAAoBD,EACzBp5C,KAAKs5C,qBAAuBt5C,KAAKq5C,kBACjCr5C,KAAKu5C,iBAAmBv5C,KAAKs5C,qBAC7Bt5C,KAAKw5C,iBAAmBx5C,KAAKs5C,qBAC7Bt5C,KAAKy5C,kBAAoBz5C,KAAKs5C,qBAC9Bt5C,KAAK05C,kBAAoB15C,KAAKs5C,qBAC9Bt5C,KAAK0yC,uBAAyB1yC,KAAKs5C,qBAGhCK,0BAA0BvqB,EAAYqK,GACzCrK,EAAKwqB,4BAA8B55C,KAAKioC,kCACxCjoC,KAAKi4C,uBAAuB3e,SAASlK,EAAKwqB,4BAA6BngB,GACvEz5B,KAAKioC,oCAMF4R,MAAMzqB,GACT,OAAO,EAAA0qB,cAAcC,SAAS3qB,EAAMpvB,MAIjCg6C,yBACHh6C,KAAKi4C,uBAAyB,IAAI,EAAApf,WAClC74B,KAAKioC,kCAAoC,EAGtC4F,0BAA0BoM,EAA0DC,GACvFD,EAAqB3gB,SAAS,EAAA9K,eAAeiC,MAAOypB,EAA6B,IAAM,KACvFD,EAAqB3gB,SAAS,EAAA9K,eAAemC,KAAMupB,EAA6B,IAAM,KACtFD,EAAqB3gB,SAAS,EAAA9K,eAAesC,WAAYopB,EAA6B,KAAO,MAC7FD,EAAqB3gB,SAAS,EAAA9K,eAAeqC,YAAaqpB,EAA6B,KAAO,KAG3FC,wBAAwB5pB,EAAsB3d,GACjD5S,KAAK8tC,sBAAsBxU,SAAS/I,EAAK3d,GAEtCm7B,2BAA2BqM,GA2B9B,OA1BAA,EAAW9gB,SAAS,EAAA+gB,gBAAgBC,MAAO,KAC3CF,EAAW9gB,SAAS,EAAA+gB,gBAAgBE,UAAW,OAC/CH,EAAW9gB,SAAS,EAAA+gB,gBAAgBG,WAAY,OAChDJ,EAAW9gB,SAAS,EAAA+gB,gBAAgBI,SAAU,KAC9CL,EAAW9gB,SAAS,EAAA+gB,gBAAgBK,aAAc,QAClDN,EAAW9gB,SAAS,EAAA+gB,gBAAgBM,aAAc,MAClDP,EAAW9gB,SAAS,EAAA+gB,gBAAgBO,kBAAmB,QACvDR,EAAW9gB,SAAS,EAAA+gB,gBAAgBQ,iBAAkB,QACtDT,EAAW9gB,SAAS,EAAA+gB,gBAAgBS,eAAgB,KAAK96C,KAAK4tC,qBAAqBrU,SAAS,EAAA/K,eAAemC,UAC3GypB,EAAW9gB,SAAS,EAAA+gB,gBAAgBU,WAAY,WAChDX,EAAW9gB,SAAS,EAAA+gB,gBAAgBW,WAAY,QAChDZ,EAAW9gB,SAAS,EAAA+gB,gBAAgBY,WAAY,MAChDb,EAAW9gB,SAAS,EAAA+gB,gBAAgBa,cAAe,KACnDd,EAAW9gB,SAAS,EAAA+gB,gBAAgBc,WAAY,QAChDf,EAAW9gB,SAAS,EAAA+gB,gBAAgBe,WAAY,MAChDhB,EAAW9gB,SAAS,EAAA+gB,gBAAgBgB,aAAc,MAClDjB,EAAW9gB,SAAS,EAAA+gB,gBAAgBiB,UAAW,SAC/ClB,EAAW9gB,SAAS,EAAA+gB,gBAAgBkB,UAAW,OAC/CnB,EAAW9gB,SAAS,EAAA+gB,gBAAgBmB,aAAc,MAClDpB,EAAW9gB,SAAS,EAAA+gB,gBAAgBoB,UAAW,SAC/CrB,EAAW9gB,SAAS,EAAA+gB,gBAAgBqB,UAAW,OAC/CtB,EAAW9gB,SAAS,EAAA+gB,gBAAgBsB,gBAAiB,QACrDvB,EAAW9gB,SAAS,EAAA+gB,gBAAgBuB,gBAAiB,QACrDxB,EAAW9gB,SAAS,EAAA+gB,gBAAgBwB,MAAO,KAC3CzB,EAAW9gB,SAAS,EAAA+gB,gBAAgByB,KAAM,QAEnC1B,EAGJ2B,aACHC,EACAC,EACAC,EACAC,EACAC,GAEA,QAAuC91B,IAAnC,EAAA+zB,gBAAgB4B,GAA8B,CAC9C,MAAMI,EAAuB,CACzBH,KAAAA,EACAC,KAAAA,EACAC,KAAAA,GAEJp8C,KAAKguC,aAAazsC,KAAK,EAAA+6C,YAAYC,kBAAkBP,EAAS,EAAA3B,gBAAgB4B,GAAgBI,KAI/FG,YAAYR,EAAiBS,GAChC,EAAAH,YAAYI,kBAAkBV,EAASS,EAAYz8C,KAAKguC,cAGrDC,kBACH,MAAM0O,EAAgB38C,KAAK4tC,qBAAqBrU,SAAS,EAAA/K,eAAeiC,OAClEmsB,EAAe58C,KAAK4tC,qBAAqBrU,SAAS,EAAA/K,eAAemC,MAEvE3wB,KAAK+7C,aAAa,MAAO,QAAS,CAAC,GAAGY,KAAU,GAAGC,KAAS,GAAGD,MAAW,CAAC,GAAGC,MAAU,IACxF58C,KAAK+7C,aAAa,OAAQ,WAAY,CAAC,GAAGY,KAAU,GAAGC,KAAS,GAAGD,MAAW,CAAC,GAAGC,MAAU,IAC5F58C,KAAK+7C,aAAa,QAAS,WAAY,CAAC,KAAM,GAAI,CAAC,MACnD/7C,KAAK+7C,aAAa,QAAS,kBAAmB,CAAC,KAAM,GAAI,IACzD/7C,KAAK+7C,aAAa,QAAS,gBAAiB,CAAC,KAAM,GAAI,CAAC,MACxD/7C,KAAK+7C,aAAa,QAAS,kBAAmB,CAAC,KAAM,GAAI,IACzD/7C,KAAK+7C,aAAa,SAAU,eAAgB,CAAC,KAAM,GAAI,CAAC,MACxD/7C,KAAK+7C,aAAa,SAAU,kBAAmB,CAAC,MAAO,GAAI,IAC3D/7C,KAAK+7C,aAAa,SAAU,eAAgB,CAAC,KAAM,GAAI,CAAC,MACxD/7C,KAAK+7C,aAAa,SAAU,kBAAmB,CAAC,MAAO,GAAI,IAC3D/7C,KAAK+7C,aAAa,QAAS,WAAY,CAAC,KAAM,GAAI,CAAC,MACnD/7C,KAAK+7C,aAAa,QAAS,kBAAmB,CAAC,KAAM,GAAI,IACzD/7C,KAAK+7C,aAAa,KAAKa,KAAS,eAAgB,GAAI,CAAC,GAAGA,MAAU,IAClE58C,KAAK+7C,aAAa,QAAS,gBAAiB,CAAC,KAAM,GAAI,CAAC,MACxD/7C,KAAK+7C,aAAa,QAAS,kBAAmB,CAAC,KAAM,GAAI,IACzD/7C,KAAK+7C,aAAa,SAAU,eAAgB,CAAC,KAAM,GAAI,CAAC,MACxD/7C,KAAK+7C,aAAa,SAAU,kBAAmB,CAAC,MAAO,GAAI,IAC3D/7C,KAAK+7C,aAAa,SAAU,eAAgB,CAAC,KAAM,GAAI,CAAC,MACxD/7C,KAAK+7C,aAAa,SAAU,kBAAmB,CAAC,MAAO,GAAI,IAC3D/7C,KAAK+7C,aAAa,UAAW,aAAc,CAAC,KAAM,GAAI,IACtD/7C,KAAK+7C,aAAa,WAAY,aAAc,CAAC,MAAO,GAAI,IACxD/7C,KAAK+7C,aAAa,WAAY,aAAc,CAAC,MAAO,GAAI,IACxD/7C,KAAK+7C,aAAa,KAAM,aAAc,CAAC,KAAM,GAAI,IACjD/7C,KAAK+7C,aAAa,OAAQ,aAAc,CAAC,KAAM,GAAI,IAkD/CzM,iCACJtvC,KAAK68C,QAAU,IAAI96C,MAAM/B,KAAKqvC,qBAC9BrvC,KAAK88C,gBAAkB,IAAI/6C,MAAM/B,KAAKqvC,qBACtCrvC,KAAK+8C,UAAY,IAAIh7C,MAAM/B,KAAKqvC,qBAChCrvC,KAAKg9C,UAAY,IAAIj7C,MAAM/B,KAAKqvC,qBAChC,IAAK,IAAI5uC,EAAY,EAAGA,EAAIT,KAAKqvC,oBAAqB5uC,IAAK,CACvD,MAAMF,EAAYE,EAAIT,KAAKqvC,oBAC3BrvC,KAAK68C,QAAQp8C,GAAKgO,KAAK8b,IAAIhqB,EAAG,GAC9BP,KAAK88C,gBAAgBr8C,GAAKgO,KAAK8b,IAAK,EAAIhqB,EAAI,GAC5CP,KAAK+8C,UAAUt8C,GAAK,EAAIgO,KAAK8b,IAAK,EAAIhqB,EAAI,GAAKA,EAC/CP,KAAKg9C,UAAUv8C,GAAK,GAAK,EAAIF,GAAKkO,KAAK8b,IAAIhqB,EAAG,KAt3B1D,mBAEkB,EAAA4nC,KAAe,EA03BjC,MAAayP,EACTvgC,YAAYuc,EAAeC,EAAgBopB,EAAmB,mBAC1Dj9C,KAAK4zB,MAAQA,EACb5zB,KAAK6zB,OAASA,EACd7zB,KAAKi9C,SAAWA,EAKTC,kBACP,OAAKl9C,KAAKm9C,YAGC,EAFAn9C,KAAK4zB,MAAQ5zB,KAAK6zB,OAMtBspB,kBACP,YAAsB72B,IAAftmB,KAAK4zB,YAAuCtN,IAAhBtmB,KAAK6zB,QAAwC,IAAhB7zB,KAAK6zB,QAA+B,IAAf7zB,KAAK4zB,MAE5EikB,iCACd,OAAO,IAAID,EAAW,EAAG,GAEtB5sB,OAAOoyB,GACV,QAAKA,GAGEA,EAAgBxpB,QAAU5zB,KAAK4zB,OAASwpB,EAAgBvpB,SAAW7zB,KAAK6zB,QA3BvF,oICr5BA,gBACA,UACA,UACA,UACA,UACA,UAIA,MAAawpB,UAAsC,EAAA9lB,gBAK/ClgB,YAAYimC,EAA4C5kB,EAAqB6kB,EACjEC,EAAgCC,EAA4BvlB,GACpEP,QACA33B,KAAKs9C,qBAAuBA,EAC5Bt9C,KAAK63B,YAAc,IAAI,EAAAC,YAAY93B,KAAM04B,GACzC14B,KAAKk4B,MAAQA,EACbl4B,KAAK09C,eAAeH,EAAYE,EAAoBD,GAE7CG,8BACP,OAAO39C,KAAKs9C,qBAELM,qBACP,OAAO59C,KAAK69C,eAERH,eAAeH,EAAoBE,EAA4BD,GACnE,MAAM/7B,EAAe,EAAAq8B,qBAAqBC,mBAAmB/9C,KAAKs9C,qBAAsBG,EAAoBD,GAC5Gx9C,KAAK69C,eAAiB,IAAI,EAAAD,eAAe,IAAI,EAAAxlB,MAAM3W,GAAO87B,EAAYv9C,KAAKk4B,MAAMkV,yBAA0BptC,KAAKk4B,MAAOl4B,KAAK63B,aAC5H73B,KAAK69C,eAAe9lB,iBAAiB+D,iBAAmB,IAAI,EAAAhP,SAAS9sB,KAAKk4B,MAAMmV,2BAA4B,GAC5GrtC,KAAK69C,eAAezlB,MAAM4lB,aAAeh+C,KAAKk4B,MAAM+lB,yBAvB5D,wICPA,yBACI5mC,YAAYghB,EAAuB6lB,GAC/Bl+C,KAAKq4B,MAAQA,EACbr4B,KAAKm+C,SAAWD,yNCLxB,gBAGA,UACA,UACA,UACA,UAGA,aAOA,MAAaE,UAA6C,EAAA9mB,4BAetDjgB,YAAYgnC,EAAgDC,EAAsB5mB,GAC9EC,MAAM2mB,EAAWD,EAAmB3mB,GAVhC,KAAApI,MAAyB,GAY7BtvB,KAAKu+C,gBAAiB,EACtBv+C,KAAKw+C,gBAAiB,EAMfC,mBAAmC,OAAOz+C,KAAK0+C,aAC/CD,iBAAa7rC,GAA2B5S,KAAK0+C,aAAe9rC,EAE5D+rC,iBAAiC,OAAO3+C,KAAK4+C,WAC7CD,eAAW/rC,GAA2B5S,KAAK4+C,WAAahsC,EAExDisC,mBAA4B,OAAO7+C,KAAK4+C,WAAa5+C,KAAK4+C,WAAWtmB,qBAAkBhS,EAEvFw4B,qBAA4B,OAAO9+C,KAAKu+C,eACxCO,mBAAelsC,GAAkB5S,KAAKu+C,eAAiB3rC,EAEvDmsC,eAAsB,OAAO/+C,KAAKg/C,kBAAkB5mB,OAASp4B,KAAKg/C,kBAAkB5mB,MAAMt3B,OAAS,EAEnGm+C,qBAA4B,OAAOj/C,KAAKw+C,eACxCS,mBAAersC,GAAkB5S,KAAKw+C,eAAiB5rC,EAEvDssC,YAA2B,OAAOl/C,KAAKsvB,MAEvC0vB,wBAAmD,OAAOh/C,KAAKu4B,iBAKnE4mB,4BAEH,MAAMC,EAAmDp/C,KAAKg4B,gBAAgBqnB,wBACxEC,EAAet/C,KAAK++C,SAAW/+C,KAAKq4B,MAAMN,iBAAiB+D,iBAAiB71B,EAAIjG,KAAKq4B,MAAMN,iBAAiBwE,iBAAmB,EAC/HgjB,EAAgBv/C,KAAK++C,SAAW/+C,KAAKq4B,MAAMN,iBAAiB+D,iBAAiB71B,EAAIjG,KAAKq4B,MAAMN,iBAAiB0E,kBAAoB,EAYvI,QAXKz8B,KAAK++C,UAAY/+C,KAAKsvB,MAAMxuB,OAAS,GACtC,UAAI0+C,KAAK,kDAERx/C,KAAK++C,UACF/+C,KAAKg/C,kBAAkBS,cAAgB,EAAAC,gBAAgBC,WACvD3/C,KAAKg/C,kBAAkBS,cAAgB,EAAAC,gBAAgBE,YAEvD,UAAIJ,KAAK,kHACmE,QAAjB,EAAAx/C,KAAK0+C,oBAAY,eAAEmB,gBAG9E7/C,KAAKw4B,WACT,KAAK,EAAAoM,cAAckb,MACf,GAAK9/C,KAAK++C,SAMH,CACH,MAAMgB,EAAiB//C,KAAKq4B,MAAMN,iBAAiB2E,gBAAkB18B,KAAKq4B,MAAMN,iBAAiB+D,iBAAiBh2B,EAClHs5C,EAAwBY,qBAAqBV,EAAMC,EAAOQ,QAPtD//C,KAAKg/C,kBAAkBS,cAAgB,EAAAC,gBAAgBC,UACvDP,EAAwBa,uBAAuBjgD,KAAKsvB,MAAM,GAAG4wB,MAAOlgD,KAAKsvB,MAAM,GAAG6wB,KAC3EngD,KAAKg/C,kBAAkBS,cAAgB,EAAAC,gBAAgBE,YAC9DR,EAAwBa,uBAAuBjgD,KAAKsvB,MAAM,GAAG6wB,IAAKngD,KAAKsvB,MAAM,GAAG4wB,OAMxF,MACJ,KAAK,EAAAtb,cAAcwb,MACf,GAAKpgD,KAAK++C,SAOH,CACH,MAAMgB,EAAiB//C,KAAKq4B,MAAMN,iBAAiB4E,mBAAqB38B,KAAKq4B,MAAMN,iBAAiB+D,iBAAiBh2B,EACrHs5C,EAAwBiB,wBAAwBf,EAAMC,EAAOQ,QAPzD//C,KAAKg/C,kBAAkBS,cAAgB,EAAAC,gBAAgBC,UACvDP,EAAwBkB,0BAA0BtgD,KAAKsvB,MAAM,GAAG4wB,MAAOlgD,KAAKsvB,MAAM,GAAG6wB,KAC9EngD,KAAKg/C,kBAAkBS,cAAgB,EAAAC,gBAAgBE,YAC9DR,EAAwBkB,0BAA0BtgD,KAAKsvB,MAAM,GAAG6wB,IAAKngD,KAAKsvB,MAAM,GAAG4wB,OAM3F,MACJ,QACI,UAAIv3C,MAAM,kEAYf43C,qBAAqBC,EAAgBC,EAAc36C,EAC9B46C,EAA6B1gD,KAAKk4B,MAAMiU,mBAAoBwU,EAAyB3gD,KAAKk4B,MAAMya,gBACxH,MAAMiO,EAAsB,IAAI,EAAA9zB,SAAS0zB,EAAQ16C,GAC3C+6C,EAAyB,IAAI,EAAA/zB,SAAS2zB,EAAM36C,EAAI46C,EAAqB,GACrEI,EAAyB,IAAI,EAAAh0B,SAAS2zB,EAAM36C,EAAI46C,EAAqB,GAC3E1gD,KAAK+gD,cAAcH,EAAWC,EAAcC,EAAcH,GAYvDK,8BAA8BR,EAAgBC,EAAc36C,EAC9Bm7C,EAAuCjhD,KAAKk4B,MAAMkU,6BAClDuU,EAAyB3gD,KAAKk4B,MAAMya,gBACrE,MAAMiO,EAAsB,IAAI,EAAA9zB,SAAS0zB,EAAQ16C,GAC3C+6C,EAAyB,IAAI,EAAA/zB,SAAS2zB,EAAM36C,EAAIm7C,EAA+B,GAC/EH,EAAyB,IAAI,EAAAh0B,SAAS2zB,EAAM36C,EAAIm7C,EAA+B,GACrFjhD,KAAK+gD,cAAcH,EAAWC,EAAcC,EAAcH,GAavDO,+BAA+BV,EAAgBC,EAAc36C,EAC9Bq7C,EAAyCnhD,KAAKk4B,MAAMmU,+BACpDqU,EAA6B1gD,KAAKk4B,MAAMiU,mBACxCwU,EAAyB3gD,KAAKk4B,MAAMya,gBACtE,MAAMyO,EAA2B,IAAI,EAAAt0B,SAAS0zB,EAAQ16C,EAAIq7C,EAAiC,GACrFE,EAA2B,IAAI,EAAAv0B,SAAS0zB,EAAQ16C,EAAIq7C,EAAiC,GACrFN,EAAyB,IAAI,EAAA/zB,SAAS2zB,EAAM36C,EAAI46C,EAAqB,GACrEI,EAAyB,IAAI,EAAAh0B,SAAS2zB,EAAM36C,EAAI46C,EAAqB,GAC3E1gD,KAAKshD,eAAeF,EAAgBP,EAAcQ,EAAgBP,EAAcH,GAS7EY,0BAA0Bf,EAAgBC,EAAc36C,GAC3D,MAAM07C,EAA6B/yC,KAAKiF,IAAI1T,KAAKsvB,MAAM,GAAG4wB,MAAMp6C,EAAI9F,KAAKsvB,MAAM,GAAG4wB,MAAMp6C,GAAK,KAC7F9F,KAAKsvB,MAAM8J,QAEPooB,EACAxhD,KAAKkhD,+BAA+BV,EAAQC,EAAM36C,GAC3C9F,KAAKu+C,eACZv+C,KAAKghD,8BAA8BR,EAAQC,EAAM36C,GAEjD9F,KAAKugD,qBAAqBC,EAAQC,EAAM36C,GAYzC27C,sBAAsBjB,EAAgBC,EAAc36C,EAC9B46C,EAA6B1gD,KAAKk4B,MAAMiU,mBAAoBwU,EAAyB3gD,KAAKk4B,MAAMya,gBACzH,MAAM+O,EAA4B,IAAI,EAAA50B,SAAS0zB,EAAQ16C,EAAI46C,EAAqB,GAC1EiB,EAA4B,IAAI,EAAA70B,SAAS0zB,EAAQ16C,EAAI46C,EAAqB,GAC1EkB,EAAqB,IAAI,EAAA90B,SAAS2zB,EAAM36C,GAC9C9F,KAAK+gD,cAAca,EAAUF,EAAiBC,EAAiBhB,GAY5DkB,+BAA+BrB,EAAgBC,EAAc36C,EAC9B46C,EAA6B1gD,KAAKk4B,MAAMiU,mBACxC8U,EAAuCjhD,KAAKk4B,MAAMkU,6BAClDuU,EAAyB3gD,KAAKk4B,MAAMya,gBACtE,MAAMyO,EAA2B,IAAI,EAAAt0B,SAAS0zB,EAAQ16C,EAAI46C,EAAqB,GACzEW,EAA2B,IAAI,EAAAv0B,SAAS0zB,EAAQ16C,EAAI46C,EAAqB,GACzEG,EAAyB,IAAI,EAAA/zB,SAAS2zB,EAAM36C,EAAIm7C,EAA+B,GAC/EH,EAAyB,IAAI,EAAAh0B,SAAS2zB,EAAM36C,EAAIm7C,EAA+B,GACrFjhD,KAAKshD,eAAeF,EAAgBP,EAAcQ,EAAgBP,EAAcH,GAW7EmB,gCAAgCtB,EAAgBC,EAAc36C,EAC9Bq7C,EAAyCnhD,KAAKk4B,MAAMmU,+BACpDsU,EAAyB3gD,KAAKk4B,MAAMya,gBACvE,MAAMyO,EAA2B,IAAI,EAAAt0B,SAAS0zB,EAAQ16C,EAAIq7C,EAAiC,GACrFE,EAA2B,IAAI,EAAAv0B,SAAS0zB,EAAQ16C,EAAIq7C,EAAiC,GACrFY,EAAoB,IAAI,EAAAj1B,SAAS2zB,EAAM36C,GAC7C9F,KAAK+gD,cAAcgB,EAASX,EAAgBC,EAAgBV,GASzDqB,2BAA2BxB,EAAgBC,EAAcwB,GAC5D,MAAMC,EAA4BzzC,KAAKiF,IAAI1T,KAAKsvB,MAAM,GAAG6wB,IAAIr6C,EAAI9F,KAAKsvB,MAAM,GAAG6wB,IAAIr6C,GAAK,KACxF9F,KAAKsvB,MAAM8J,QACP8oB,EACAliD,KAAK6hD,+BAA+BrB,EAAQC,EAAMwB,GAC3CjiD,KAAKu+C,eACZv+C,KAAK8hD,gCAAgCtB,EAAQC,EAAMwB,GAEnDjiD,KAAKyhD,sBAAsBjB,EAAQC,EAAMwB,GAO1CE,UACCniD,KAAK++C,SACL/+C,KAAK+3B,iBAAiB2F,wBAG1B19B,KAAK+3B,iBAAiB+D,iBAAmB97B,KAAKsvB,MAAM,GAAG4wB,MACvDlgD,KAAK+3B,iBAAiB2E,gBAAkB18B,KAAKsvB,MAAM,GAAG6wB,IAAIr6C,EAAI9F,KAAKsvB,MAAM,GAAG4wB,MAAMp6C,EAClF9F,KAAK+3B,iBAAiB4E,mBAAqB38B,KAAKsvB,MAAM,GAAG6wB,IAAIr6C,EAAI9F,KAAKsvB,MAAM,GAAG4wB,MAAMp6C,EACrF9F,KAAK+3B,iBAAiBmF,OAAOp3B,GAAK9F,KAAK+3B,iBAAiB2E,gBAAkB18B,KAAK+3B,iBAAiB4E,oBAAsB,EAKlH38B,KAAKg/C,kBAAkBS,cAAgB,EAAAC,gBAAgBC,WACvD3/C,KAAK+3B,iBAAiBwE,iBAAmB,EACzCv8B,KAAK+3B,iBAAiB0E,kBAAoBz8B,KAAKsvB,MAAM,GAAG6wB,IAAIl6C,EAAIjG,KAAKsvB,MAAM,GAAG4wB,MAAMj6C,IAEpFjG,KAAK+3B,iBAAiBwE,iBAAmBv8B,KAAKsvB,MAAM,GAAG6wB,IAAIl6C,EAAIjG,KAAKsvB,MAAM,GAAG4wB,MAAMj6C,EACnFjG,KAAK+3B,iBAAiB0E,kBAAoB,IAO3C73B,UACH5E,KAAKsvB,MAAM8J,QAORgpB,eAAel6C,GACdlI,KAAK++C,UACL/+C,KAAK+3B,iBAAiB+D,iBAAiBh2B,GAAKoC,EAC5ClI,KAAK+3B,iBAAiB2F,yBAEtB19B,KAAKsvB,MAAM,GAAG4wB,MAAMp6C,GAAKoC,EACzBlI,KAAKsvB,MAAM,GAAG6wB,IAAIr6C,GAAKoC,EACvBlI,KAAKsvB,MAAM,GAAG6wB,IAAIr6C,GAAKoC,GAIxBm6C,QAAQzvC,GAEP5S,KAAK++C,UAGatwC,KAAKiF,IAAI1T,KAAKsvB,MAAM,GAAG6wB,IAAIl6C,EAAIjG,KAAKsvB,MAAM,GAAG4wB,MAAMj6C,GAC7DwI,KAAKiF,IAAId,KAGjB5S,KAAKg/C,kBAAkBS,cAAgB,EAAAC,gBAAgBC,UACnD/sC,EAAQ,EACR5S,KAAKsvB,MAAM,GAAG4wB,MAAMj6C,GAAK2M,GAEzB5S,KAAKsvB,MAAM,GAAG6wB,IAAIl6C,GAAK2M,EACvB5S,KAAKsvB,MAAM,GAAG6wB,IAAIl6C,GAAK2M,GAGvBA,EAAQ,EACR5S,KAAKsvB,MAAM,GAAG4wB,MAAMj6C,GAAK2M,GAEzB5S,KAAKsvB,MAAM,GAAG6wB,IAAIl6C,GAAK2M,EACvB5S,KAAKsvB,MAAM,GAAG6wB,IAAIl6C,GAAK2M,GAG/B5S,KAAKmiD,WAcDpB,cAAcuB,EAAsBC,EAAyBC,EAAyB7B,GAC1F,MAAM8B,EAA2B,IAAI,EAAAC,cAAcJ,EAAYC,EAAe5B,GACxEgC,EAA2B,IAAI,EAAAD,cAAcJ,EAAYE,EAAe7B,GAE9E3gD,KAAKsvB,MAAM/tB,KAAKkhD,GAChBziD,KAAKsvB,MAAM/tB,KAAKohD,GAWZrB,eAAeF,EAA0BP,EAAwBQ,EAA0BP,EAAwBH,GACvH,MAAM8B,EAA2B,IAAI,EAAAC,cAActB,EAAgBP,EAAcF,GAC3EgC,EAA2B,IAAI,EAAAD,cAAcrB,EAAgBP,EAAcH,GAEjF3gD,KAAKsvB,MAAM/tB,KAAKkhD,GAChBziD,KAAKsvB,MAAM/tB,KAAKohD,IA1VxB,+IChBA,gBAEA,MAAaC,EAQTvrC,cACIurC,EAAeC,MAAQ,IAAI9gD,MAAM6gD,EAAeE,qBAChDF,EAAeG,cAAgB,IAAIhhD,MAAM6gD,EAAeE,qBACxDF,EAAeI,gBAAkB,IAAIjhD,MAAM6gD,EAAeE,qBAC1DF,EAAeK,gBAAkB,IAAIlhD,MAAM6gD,EAAeE,qBAC1D,IAAK,IAAIriD,EAAY,EAAGA,EAAImiD,EAAeE,oBAAqBriD,IAAK,CACjE,MAAMF,EAAaE,EAAImiD,EAAeE,oBAEtCF,EAAeC,MAAMpiD,GAAKgO,KAAK8b,IAAIhqB,EAAG,GACtCqiD,EAAeG,cAActiD,GAAKgO,KAAK8b,IAAK,EAAIhqB,EAAI,GACpDqiD,EAAeI,gBAAgBviD,GAAK,EAAIgO,KAAK8b,IAAK,EAAIhqB,EAAI,GAAKA,EAC/DqiD,EAAeK,gBAAgBxiD,GAAK,GAAK,EAAIF,GAAKkO,KAAK8b,IAAIhqB,EAAG,IAa/D2iD,2BAA2BroB,GAC9B,MAAMxtB,EAAiBoB,KAAKub,MAAM6Q,EAAmB+nB,EAAeE,qBACpE,OAAIz1C,EAAQ,GAAKA,GAASu1C,EAAeE,oBAC9B,IAAI,EAAAh2B,SAGR,IAAI,EAAAA,SAAY81B,EAAeG,cAAc11C,GAASrN,KAAKmjD,cAAcl9C,EAC1E28C,EAAeI,gBAAgB31C,GAASrN,KAAKojD,qBAAqBn9C,EAClE28C,EAAeK,gBAAgB51C,GAASrN,KAAKqjD,mBAAmBp9C,EAChE28C,EAAeC,MAAMx1C,GAASrN,KAAKsjD,YAAYr9C,EAC9B28C,EAAeG,cAAc11C,GAASrN,KAAKmjD,cAAcr9C,EAC1E88C,EAAeI,gBAAgB31C,GAASrN,KAAKojD,qBAAqBt9C,EAClE88C,EAAeK,gBAAgB51C,GAASrN,KAAKqjD,mBAAmBv9C,EAAI88C,EAAeC,MAAMx1C,GAASrN,KAAKsjD,YAAYx9C,IA5CjI,mBACmB,EAAAg9C,oBAA8B,6NCAjD,gBAEA,UACA,aAEA,MAAaS,UAAgD,EAAAjsB,4BAIzDjgB,YAAYmsC,EAAsDlF,EAAsB5mB,GACpFC,MAAM2mB,EAAWkF,EAAsB9rB,EAAQ+rB,qBAC/CzjD,KAAK0jD,gCAAkCF,EACvCxjD,KAAK2jD,SAAWjsB,EAGbynB,sBACH,MAAMC,EAAmDp/C,KAAKg4B,gBAAgBqnB,wBACxEC,EAAet/C,KAAK+3B,iBAAiB+D,iBAAiB71B,EAAIjG,KAAK+3B,iBAAiBwE,iBAChFgjB,EAAgBv/C,KAAK+3B,iBAAiB+D,iBAAiB71B,EAAIjG,KAAK+3B,iBAAiB0E,kBACvF,IAAIsjB,EAAiB,EACrB,OAAQ//C,KAAKw4B,WACT,KAAK,EAAAoM,cAAckb,MACfC,EAAS//C,KAAK+3B,iBAAiB+D,iBAAiBh2B,EAAI9F,KAAK+3B,iBAAiB2E,gBAC1E0iB,EAAwBY,qBAAqBV,EAAMC,EAAOQ,GAC1D,MACJ,KAAK,EAAAnb,cAAcwb,MACfL,EAAS//C,KAAK+3B,iBAAiB+D,iBAAiBh2B,EAAI9F,KAAK+3B,iBAAiB4E,mBAC1EyiB,EAAwBiB,wBAAwBf,EAAMC,EAAOQ,GAC7D,MACJ,QACI,UAAIp3C,MAAM,sEAzB1B,yKCJA,gBAEA,MAAai7C,UAA8C,EAAAtsB,4BAEvDjgB,YAAYwsC,EAA2CxrB,GACnDV,MAAOU,EAAMN,iBAAiBY,OAAOsE,WAA0B4mB,EAAkBA,EAAiBjsB,eAClG53B,KAAKq4B,MAAQA,EAGNulB,qBACP,OAAO59C,KAAKq4B,MAGT8mB,wBAXX,gJCNA,gBAEA,UACA,UAEA,UAKA,MAAavB,UAAuB,EAAAtc,UAiBhCjqB,YAAYghB,EAAcklB,EAAoBuG,EAA8B5rB,EAChEQ,GACRf,QACA33B,KAAKq4B,MAAQA,EACbr4B,KAAK63B,YAAc,IAAI,EAAAC,YAAY93B,KAAM04B,GACzC14B,KAAKq4B,MAAM0rB,WAAaxG,EACxBv9C,KAAKq4B,MAAMjE,cAAgB0vB,EAC3B9jD,KAAKk4B,MAAQA,EAGNE,YACP,OAAOp4B,KAAKq4B,MAGTrsB,WACH,MAAO,GAAGhM,KAAKq4B,MAAM5W,SAASzhB,KAAK63B,YAAYiE,iBAAiB71B,KAAKjG,KAAK63B,YAAYiE,iBAAiBh2B,KAOpGk+C,0CACH,GAA+B,KAA3BhkD,KAAKo4B,MAAM3W,KAAKwiC,OAChB,OAEJjkD,KAAKkkD,UAAY,GACjB,MAAMC,EAAqE,QAAnC,EAAU,QAAV,EAAAnkD,KAAKk4B,aAAK,eAAE+W,+BAAuB,QAAI,GACzE3f,EAAkBtvB,KAAKo4B,MAAM3W,KAAK2iC,MAAM,YACxCC,EAAqB/0B,EAAMxuB,OACjC,IAAIwjD,EAAmB,EACvB,IAAK,IAAI7jD,EAAY,EAAGA,EAAI4jD,EAAY5jD,IAAK,CACzC,MAAM8jD,EAAej1B,EAAM7uB,GAAGwjD,OACxBO,EACN,EAAAzqB,qBAAqB0qB,aAAaC,8BAC/BH,EAAMvkD,KAAKo4B,MAAMusB,KAAM3kD,KAAKo4B,MAAMwsB,UAAW5kD,KAAKq4B,MAAMwsB,YACrDC,EAAoB9kD,KAAKo4B,MAAM2rB,WAAaS,EAClDF,EAAW71C,KAAKN,IAAIm2C,EAAUQ,GAE9B9kD,KAAKkkD,UAAU3iD,KAAK,CAACkgB,KAAM8iC,EAAMQ,QAAS,EAAGnxB,MAAOkxB,IAKxD,IAAK,MAAMP,KAAQvkD,KAAKkkD,UAAW,CAC/B,IAAIa,EAAkB,EACtB,OAAQ/kD,KAAKo4B,MAAMhE,eACf,KAAK,EAAAD,kBAAkBU,YACvB,KAAK,EAAAV,kBAAkBS,YACvB,KAAK,EAAAT,kBAAkBQ,SACnBowB,EAAUT,EAAWC,EAAK3wB,MAC1B,MACJ,KAAK,EAAAO,kBAAkBO,aACvB,KAAK,EAAAP,kBAAkBM,aACvB,KAAK,EAAAN,kBAAkBK,UACnBuwB,GAAWT,EAAWC,EAAK3wB,OAAS,EAK5C2wB,EAAKQ,QAAUA,EAGnB,IAAIlxB,EAAiB7zB,KAAKo4B,MAAM2rB,WAAaM,EACzCrkD,KAAKk4B,MAAM8f,wBAA0B,GAAKh4C,KAAKkkD,UAAUpjD,OAAS,IAClE+yB,GAAW7zB,KAAKk4B,MAAM8f,wBAA0BqM,EAAc,IAElE,MAAMW,EAAoBhlD,KAAK+3B,iBAE/B,OAAQ/3B,KAAKo4B,MAAMhE,eACf,KAAK,EAAAD,kBAAkBO,aACnBswB,EAAK3oB,WAAaxI,EAClBmxB,EAAK9oB,YAAcooB,EAAW,EAC9BU,EAAK1oB,aAAe,EACpB0oB,EAAK5oB,YAAckoB,EAAW,EAC9B,MACJ,KAAK,EAAAnwB,kBAAkBM,aACnBuwB,EAAK3oB,WAAaxI,EAAS,EAC3BmxB,EAAK9oB,YAAcooB,EAAW,EAC9BU,EAAK1oB,aAAezI,EAAS,EAC7BmxB,EAAK5oB,YAAckoB,EAAW,EAC9B,MACJ,KAAK,EAAAnwB,kBAAkBK,UACnBwwB,EAAK3oB,UAAY,EACjB2oB,EAAK9oB,YAAcooB,EAAW,EAC9BU,EAAK1oB,aAAezI,EACpBmxB,EAAK5oB,YAAckoB,EAAW,EAC9B,MACJ,KAAK,EAAAnwB,kBAAkBI,WACnBywB,EAAK3oB,WAAaxI,EAClBmxB,EAAK9oB,WAAa,EAClB8oB,EAAK1oB,aAAe,EACpB0oB,EAAK5oB,YAAckoB,EACnB,MACJ,KAAK,EAAAnwB,kBAAkBG,WACnB0wB,EAAK3oB,WAAaxI,EAAS,EAC3BmxB,EAAK9oB,WAAa,EAClB8oB,EAAK1oB,aAAezI,EAAS,EAC7BmxB,EAAK5oB,YAAckoB,EACnB,MACJ,KAAK,EAAAnwB,kBAAkBE,QACnB2wB,EAAK3oB,UAAY,EACjB2oB,EAAK9oB,WAAa,EAClB8oB,EAAK1oB,aAAezI,EACpBmxB,EAAK5oB,YAAckoB,EACnB,MACJ,KAAK,EAAAnwB,kBAAkBU,YACnBmwB,EAAK3oB,WAAaxI,EAClBmxB,EAAK9oB,YAAcooB,EACnBU,EAAK1oB,aAAe,EACpB0oB,EAAK5oB,YAAc,EACnB,MACJ,KAAK,EAAAjI,kBAAkBS,YACnBowB,EAAK3oB,WAAaxI,EAAS,EAC3BmxB,EAAK9oB,YAAcooB,EACnBU,EAAK1oB,aAAezI,EAAS,EAC7BmxB,EAAK5oB,YAAc,EACnB,MACJ,KAAK,EAAAjI,kBAAkBQ,SACnBqwB,EAAK3oB,UAAY,EACjB2oB,EAAK9oB,YAAcooB,EACnBU,EAAK1oB,aAAezI,EACpBmxB,EAAK5oB,YAAc,EAI3B4oB,EAAKtoB,gBAAkBsoB,EAAK3oB,UAAYxI,EAASswB,EACjDa,EAAKzoB,iBAAmByoB,EAAK9oB,WAAarI,EAASswB,EACnDa,EAAKroB,mBAAqBqoB,EAAK1oB,aAAezI,EAASswB,EACvDa,EAAKvoB,kBAAoBuoB,EAAK5oB,YAAcvI,EAASswB,GAlJ7D,wHCTA,gBAGA,sBACI9sC,YAAY4tC,EAAiBv8C,EAAekrB,EAAgB,EACxDsxB,EAAqC,EAAA3jB,wBAAwBM,iBAC7DsjB,GACAnlD,KAAKilD,MAAQA,EACbjlD,KAAK0I,IAAMA,EACX1I,KAAK4zB,MAAQA,EACb5zB,KAAKolD,QAAkBF,EACvBllD,KAAKmlD,SAAWA,EASTjF,YACP,OAAOlgD,KAAKilD,MAEL/E,UAAMttC,GACb5S,KAAKilD,MAAQryC,EAENutC,UACP,OAAOngD,KAAK0I,IAELy3C,QAAIvtC,GACX5S,KAAK0I,IAAMkK,EAEJyyC,YACP,OAAOrlD,KAAK4zB,MAELyxB,UAAMzyC,GACb5S,KAAK4zB,MAAQhhB,+GCnCrB,gBAEA,UACA,UACA,UAKA,4BAMIyE,YAAYiuC,EAA0BC,EAA0CC,EAAsBC,GAClGzlD,KAAKslD,YAAcA,EACnBtlD,KAAKulD,oBAAsBA,EAC3B,MAAMG,EAAyCH,EAAoB3tB,cAAc6rB,oBAAoB7b,MAAMoJ,wBAGvGsU,EAAYK,KAAK7kD,QAAU,GACxBwkD,EAAY3sB,OAAOitB,MAAM,GAAGC,OAAOn8B,YAAc,GACzB,EAAAyK,kBAAkBI,WAGjD,MAAM8D,EAAe,IAAI,EAAAD,MAAMktB,EAAYK,MAC3C3lD,KAAK69C,eAAiB,IAAI,EAAAD,eACtBvlB,EACAmtB,EACAE,EACA1lD,KAAKulD,oBAAoB3tB,cAAc6rB,oBAAoB7b,MAC3D2d,EAAoBxtB,kBAExB/3B,KAAK69C,eAAe9lB,iBAAiB+D,iBAAmB,IAAI,EAAAhP,SAAS,EAAG24B,GACpEC,IAAwB,EAAAvxB,kBAAkBI,aAC1Cv0B,KAAK69C,eAAe9lB,iBAAiB+D,iBAAiB71B,GAAK,GAIxD6/C,kBACP,OAAO9lD,KAAKslD,YAELS,sBACP,OAAO/lD,KAAKgmD,mBAELD,oBAAgBnzC,GACvB5S,KAAKgmD,mBAAqBpzC,EAEnBgrC,qBACP,OAAO59C,KAAK69C,eAELD,mBAAehrC,GACtB5S,KAAK69C,eAAiBjrC,EAEfqzC,uBACP,OAAOjmD,KAAKulD,oBAELU,qBAAiBrzC,GACxB5S,KAAKulD,oBAAsB3yC,4GCvDnC,2BAIIyE,YAAY6uC,GAFJ,KAAAC,uBAAgD,GAGpDnmD,KAAKkmD,UAAYA,EACjBlmD,KAAKomD,aAGEC,mBACP,OAAOrmD,KAAKkmD,UAGLI,6BACP,OAAOtmD,KAAKmmD,uBAGLG,2BAAuB1zC,GAC9B5S,KAAKmmD,uBAAyBvzC,EAG3B2zC,WACH,IAAK,IAAI9lD,EAAY,EAAGA,EAAIT,KAAKmmD,uBAAuBrlD,OAAQL,IAC5D,IAAKT,KAAKmmD,uBAAuB1lD,GAC7B,OAAO,EAGf,OAAO,EAGH2lD,aAEJ,IAAK,IAAI3lD,EAAY,EAAGA,EAAIT,KAAKkmD,UAAUM,UAAU1lD,OAAQL,IACzDT,KAAKmmD,uBAAuB5kD,UAAK+kB,8GCpC7C,4BACIjP,YAAYovC,EAAqCC,EAAgDruB,EACrF6lB,GACRl+C,KAAKymD,gBAAkBA,EACvBzmD,KAAK0mD,eAAiBA,EACtB1mD,KAAKq4B,MAAQA,EACbr4B,KAAKm+C,SAAWD,4GCJxB,gBAIA,UAIA,UACA,UAKA,MAAsByI,UAAyB,EAAApvB,gBAI3ClgB,YAAYuvC,EAA0BnD,EAAgDnF,GAClF3mB,QAyCG,KAAAkvB,cAAwB,EAIvB,KAAA15B,eAAyB,EAK1B,KAAA25B,mBAA6B,EAjDhC9mD,KAAK+mD,YAAcH,EACnB5mD,KAAKyjD,oBAAsBA,EAC3BzjD,KAAKg4B,gBAAkBsmB,EACnBA,GACAt+C,KAAK+mD,YAAczI,EAAU0I,YAC7BhnD,KAAK+3B,iBAAmB,IAAI,EAAAD,YAAY93B,KAAMs+C,EAAUvmB,mBAExD/3B,KAAK+3B,iBAAmB,IAAI,EAAAD,YAAY93B,MAE5CA,KAAK+3B,iBAAiBuE,aAAe,EACjCt8B,KAAKyjD,sBACLzjD,KAAKmtB,cAAgBntB,KAAKyjD,oBAAoB5D,eAGlD7/C,KAAKinD,aAAe,GAqCbD,kBACP,OAAOhnD,KAAK+mD,YAGL5uB,wBACP,OAAOn4B,KAAKknD,kBAGL/uB,sBAAkBvlB,GACzB5S,KAAKknD,kBAAoBt0C,EAGlBitC,oBACP,OAAO7/C,KAAKmtB,cAGLg6B,iCACP,OAAOnnD,KAAKonD,2BAGLD,+BAA2Bv0C,GAClC5S,KAAKonD,2BAA6Bx0C,EAG3By0C,gCACP,OAAOrnD,KAAKsnD,0BAGLD,8BAA0Bz0C,GACjC5S,KAAKsnD,0BAA4B10C,EAG1B0lB,sBACP,OAAOt4B,KAAKg4B,gBAGLM,oBAAgB1lB,GACvB5S,KAAKg4B,gBAAkBplB,EACnB5S,KAAKg4B,kBACLh4B,KAAK+3B,iBAAiBY,OAAS34B,KAAKg4B,gBAAgBD,kBAQrDwvB,cACH,MAAM,IAAI7mD,MAAM,mBAOb8mD,aAAajD,GAChB,MAAM,IAAI7jD,MAAM,mBAQb+mD,eAAeC,GAClB,MAAM,IAAIhnD,MAAM,mBAUbinD,cAAcC,EAA4BC,EAA6BC,GAC1E,MAAM,IAAIpnD,MAAM,mBAQbqnD,iBAAiBC,GACpB,MAAM,IAAItnD,MAAM,mBAQbunD,aAAaP,EAAuBQ,GAAmB,GAC1D,MAAM,IAAIxnD,MAAM,mBAObynD,uBAAuBC,GAC1BpoD,KAAK+3B,iBAAiB+D,iBAAmB,IAAI,EAAAhP,SAASs7B,EAAM,GAOzDC,SAASz0B,GACZ5zB,KAAK+3B,iBAAiBqE,YAAcxI,EAQjC00B,gBACH,MAAM,IAAI5nD,MAAM,mBAGb6nD,qCAAqCC,SACxC,IAAK,IAAIlrB,EAAc,EAAGC,EAAcv9B,KAAKinD,aAAanmD,OAAQw8B,EAAMC,IAAOD,EAAK,CAChF,MAAMioB,EAA2CvlD,KAAKinD,aAAa3pB,GACnE,GAA6C,QAAzC,EAAAioB,EAAoBkD,6BAAqB,eAAEz9B,OAAOw9B,GAClD,OAAOjD,GAWZmD,sDAAsDC,GACzD,IAAK,IAAIrrB,EAAc,EAAGC,EAAcv9B,KAAKinD,aAAanmD,OAAQw8B,EAAMC,IAAOD,EAAK,CAChF,MAAMioB,EAA2CvlD,KAAKinD,aAAa3pB,GACnE,GAAIioB,EAAoBqD,iBAAiBC,wBAAwBC,uBAAuB99B,OAAO29B,GAC3F,OAAOpD,GAUZwD,yCACH,MAAMC,EAAqB,IAAI,EAAAhgC,SAAS,EAAG,GAC3C,IAAK,IAAIsU,EAAc,EAAGC,EAAcv9B,KAAKinD,aAAanmD,OAAQw8B,EAAMC,IAAOD,EAAK,CAChF,MAAMioB,EAA2CvlD,KAAKinD,aAAa3pB,GACnE0rB,EAASl/B,IAAIy7B,EAAoB0D,+BAErC,OAAOD,EAASh+B,OAAOhrB,KAAKyjD,oBAAoByF,UAO7CC,oBACH,GAAiC,IAA7BnpD,KAAKinD,aAAanmD,OAClB,OAAO,EAEX,MAAMsoD,EAAkB,GACxB,IAAK,IAAI9rB,EAAc,EAAGC,EAAcv9B,KAAKinD,aAAanmD,OAAQw8B,EAAMC,IAAOD,EAAK,CAChF,MAAM+rB,EAAkCrpD,KAAKinD,aAAa3pB,GAC1D,IAAK,IAAIgsB,EAAe,EAAGC,EAAeF,EAAWT,iBAAiBY,aAAa1oD,OAAQwoD,EAAOC,IAAQD,EAAM,CAC5G,MAAMG,EAAyBJ,EAAWT,iBAAiBY,aAAaF,GACpEF,EAAOpnD,QAAQynD,EAAWC,aAAe,GACzCN,EAAO7nD,KAAKkoD,EAAWC,cAInC,OAAIN,EAAOtoD,OAAS,EAMjB6oD,YACH,OAAO3pD,KAAKgnD,YAAY4C,iBAAiBC,QAGtCC,8CACH,IAAId,EAAqB,IAAI,EAAAhgC,SAAS,EAAG,GACzC,MAAMogC,EAAkB,GACxB,IAAK,IAAI9rB,EAAc,EAAGC,EAAcv9B,KAAKinD,aAAanmD,OAAQw8B,EAAMC,IAAOD,EAAK,CAChF,MAAMioB,EAA2CvlD,KAAKinD,aAAa3pB,GACnE,IAAK,IAAIgsB,EAAe,EAAGC,EAAehE,EAAoBqD,iBAAiBY,aAAa1oD,OAAQwoD,EAAOC,IAAQD,EAAM,CACrH,MAAMG,EAAyBlE,EAAoBqD,iBAAiBY,aAAaF,GAC7EF,EAAOpnD,QAAQynD,EAAWC,aAAe,GACzCN,EAAO7nD,KAAKkoD,EAAWC,cAInC,IAAK,IAAIpsB,EAAc,EAAGC,EAAc6rB,EAAOtoD,OAAQw8B,EAAMC,IAAOD,EAAK,CACrE,MAAMysB,EAAeX,EAAO9rB,GACtB0sB,EAA0B,IAAI,EAAAhhC,SAAS,EAAG,GAChD,IAAK,MAAMu8B,KAAuBvlD,KAAKinD,aACnC,IAAK,MAAMgD,KAAO1E,EAAoB2E,sBAC9BD,EAAIE,iBAAiBT,cAAgBK,GAASE,EAAIG,MAAMtpD,OAAS,GACjEkpD,EAAclgC,IAAImgC,EAAIG,MAAM,GAAGC,qBAIvCrB,EAAS79B,GAAG6+B,KACZhB,EAAW,EAAAhgC,SAASshC,mBAAmBN,IAG/C,OAAOhB,EAGJuB,uBAAuBhF,GAC1BvlD,KAAKinD,aAAa1lD,KAAKgkD,GAOpBiF,kCAAkCnB,GACrC,GAAIA,EACA,GAAiC,IAA7BrpD,KAAKinD,aAAanmD,QAAgBd,KAAKinD,aAAajnD,KAAKinD,aAAanmD,OAAS,GAAG2nD,sBAAsBt9B,GAAGk+B,EAAWZ,uBACtHzoD,KAAKinD,aAAa1lD,KAAK8nD,QAEvB,IAAK,IAAI5oD,EAAYT,KAAKinD,aAAanmD,OAAS,EAAGL,GAAK,EAAGA,IAAK,CAC5D,GAAIT,KAAKinD,aAAaxmD,GAAGgoD,sBAAsBt9B,GAAGk+B,EAAWZ,uBAAwB,CACjFzoD,KAAKinD,aAAa7hC,OAAO3kB,EAAI,EAAG,EAAG4oD,GACnC,MAEM,IAAN5oD,GACAT,KAAKinD,aAAa7hC,OAAO3kB,EAAG,EAAG4oD,IAO5CoB,mBACH,OAAOzqD,KAAK0qD,2BAGTC,kBACH,OAAO3qD,KAAK4qD,2BAGTF,2BACH,OAAwD,IAApD1qD,KAAK+mD,YAAY6C,iBAAiBiB,OAAO/pD,QAGtCd,KAAKgnD,cAAgBhnD,KAAK+mD,YAAY6C,iBAAiBiB,OAAO,GAGlED,2BACH,OAAwD,IAApD5qD,KAAK+mD,YAAY6C,iBAAiBiB,OAAO/pD,QAItCd,KAAKgnD,cAAgBhnD,KAAKgnD,YAAY4C,iBAAiBiB,OAAO7nC,OAGlE8nC,2BACH,MAAMC,EAA+B/qD,KAAKyjD,oBAC1C,QAAKsH,GAGEA,EAAcD,2BAOlBE,yBACH,MAAMD,EAA+B/qD,KAAKyjD,oBAC1C,QAAKsH,GAGEA,EAAcC,yBAOlBC,2BACH,MAAMF,EAA+B/qD,KAAKyjD,oBAC1C,QAAKsH,GAGEA,EAAcE,2BAMlBC,yBACH,MAAMH,EAA+B/qD,KAAKyjD,oBAC1C,QAAKsH,GAGEA,EAAcG,yBAGlBC,yBAMH,OALmCnrD,KAAK+mD,YAAY6C,iBAAiBwB,cAAcC,UAC/ErrD,KAAK+mD,YAAY6C,iBAAiByB,WAhX9C,kJCnBA,gBACA,UAIA,UAGA,MAAaC,UAA2B,EAAA/zB,gBAMpClgB,YAAYqhB,GACRf,QANI,KAAA4zB,aAA8B,GAC9B,KAAAC,OAA2B,GAM/BxrD,KAAK04B,OAASA,EACd14B,KAAK63B,YAAc,IAAI,EAAAC,YAAY93B,UAAMsmB,GAGlCmlC,mBACP,OAAOzrD,KAAKurD,aAGLE,iBAAa74C,GACpB5S,KAAKurD,aAAe34C,EAGb84C,aACP,OAAO1rD,KAAKwrD,OAGLE,WAAO94C,GACd5S,KAAKwrD,OAAS54C,EAGP+lB,aACP,OAAO34B,KAAK04B,OAGLC,WAAO/lB,GACd5S,KAAK04B,OAAS9lB,EAGP+4C,iBACP,OAAO3rD,KAAK4rD,WAGLD,eAAW/4C,GAClB5S,KAAK4rD,WAAah5C,EASfi5C,6BAA6BC,EAAmB5zB,GACnD,OAAO,IAAI,EAAApL,SAAS,EAAK,IA0BjC,IAAY2b,EA7EZ,wBA6EYA,EAAA,EAAAA,oBAAA,EAAAA,kBAAiB,KACzB,iBACA,qBACA,0PCpFJ,eAEA,UAIA,UACA,SAEA,UACA,UAGA,UAEA,aAEA,UAKA,UACA,UAOA,4BACIpxB,YAAY00C,EAAwBC,GAW5B,KAAAC,WAAmC,GAEnC,KAAAC,YAAoC,GACpC,KAAAC,sCAAgF,GAKhF,KAAAC,QAA2B,GAM3B,KAAAC,WAAqB,EAxBzBrsD,KAAK+rD,WAAaA,EAClB/rD,KAAKssD,eAAiBtsD,KAAK+rD,WAAWlB,OAAO/pD,OAC7Cd,KAAKgsD,WAAaA,EAClBhsD,KAAKgsD,WAAW5F,WAAWpmD,MAuBpBusD,uBACP,OAAOvsD,KAAK+rD,WAGLS,oBACP,OAAOxsD,KAAKgsD,WAGLS,iBACP,OAAOzsD,KAAKisD,WAGLQ,eAAW75C,GAClB5S,KAAKisD,WAAar5C,EAOX85C,kBACP,OAAO1sD,KAAKksD,YAGLQ,gBAAY95C,GACnB5S,KAAKksD,YAAct5C,EAGZ+5C,4CACP,OAAO3sD,KAAKmsD,sCAGLQ,0CAAsC/5C,GAC7C5S,KAAKmsD,sCAAwCv5C,EAGtCg6C,YACP,OAAO5sD,KAAK6sD,MAGLD,UAAMh6C,GACb5S,KAAK6sD,MAAQj6C,EAGNk6C,eACP,OAAO9sD,KAAK+sD,SAGLD,aAASl6C,GAChB5S,KAAK+sD,SAAWn6C,EAGTo6C,eACP,OAAOhtD,KAAKitD,SAGLD,aAASp6C,GAChB5S,KAAKitD,SAAWr6C,EAGTs6C,eACP,OAAOltD,KAAKmtD,SAGLD,aAASt6C,GAChB5S,KAAKmtD,SAAWv6C,EAGTw6C,cACP,OAAOptD,KAAKosD,QAGLiB,2BACP,OAAOrtD,KAAKstD,qBAGLC,yBACP,OAAOvtD,KAAKwtD,mBAGLC,4BACP,OAAOztD,KAAK0tD,sBAGLD,0BAAsB76C,GAC7B5S,KAAK0tD,sBAAwB96C,EAOtB+6C,qBACP,OAAO3tD,KAAKssD,eAGLsB,gBACP,OAAO5tD,KAAKqsD,UAGLuB,cAAUh7C,GACjB5S,KAAKqsD,UAAYz5C,EAOd0W,2CAA2CukC,GAC9C,IAAK,IAAIptD,EAAY,EAAGA,EAAIotD,EAAoBpB,WAAW3rD,OAAQL,IAAK,CACpE,MAAMqtD,EAAyBD,EAAoBpB,WAAWhsD,GAAGorD,6BAA6BprD,EAAGotD,EAAoBtB,iBAAiB3kB,OACrGimB,EAAoBpB,WAAWhsD,GAC3Ds3B,iBAAiByF,oCAAoCswB,EAAa7nD,EAAG6nD,EAAahoD,IAIxFioD,aACH/tD,KAAKmsD,sCAAwC,GAC7CnsD,KAAKisD,WAAa,GAClBjsD,KAAKksD,YAAc,GAGhB8B,cACHhuD,KAAKgsD,WAAWiC,YAQbC,8BACH,IAAK,IAAI5wB,EAAc,EAAGC,EAAcv9B,KAAKisD,WAAWnrD,OAAQw8B,EAAMC,IAAOD,EAAK,CAC9E,MAAM6wB,EAAyCnuD,KAAKisD,WAAW3uB,GAC/D,IAAK,IAAIgsB,EAAe,EAAGC,EAAe4E,EAAmB1C,aAAa3qD,OAAQwoD,EAAOC,IAAQD,EAC5D6E,EAAmB1C,aAAanC,GACrD8E,kBAAmB,GAKpCC,iBAAoBC,GACvB,IAAK,IAAIhxB,EAAc,EAAGC,EAAcv9B,KAAKysD,WAAW3rD,OAAQw8B,EAAMC,IAAOD,EAEzE,OAD+Ct9B,KAAKysD,WAAWnvB,GACrCvF,iBAAiB2I,uBAA0B4tB,GAKtEC,qBAAqBC,EAAsBC,GAC9C,IAAK,IAAIhuD,EAAY+tD,EAAc/tD,GAAK,EAAGA,IAAK,CAC5C,MAAMiuD,EAA6B1uD,KAAKksD,YAAYzrD,GAAGguD,GACvD,GAAIC,EACA,OAAOA,GAeZC,uCAAuCF,EAAoBD,EAAsB5F,GACpF,IAAK,IAAInoD,EAAY+tD,EAAc/tD,EAAIT,KAAKksD,YAAYprD,OAAQL,IAAK,CACjE,MAAMmuD,EAAqC5uD,KAAKksD,YAAYzrD,GAAGguD,GAC/D,GAAKG,EAGL,IAAK,IAAItxB,EAAc,EAAGC,EAAcqxB,EAAiB3H,aAAanmD,OAAQw8B,EAAMC,IAAOD,EAAK,CAC5F,MAAMioB,EAA2CqJ,EAAiB3H,aAAa3pB,GAC/E,GAAIioB,EAAoBqD,mBAAqBA,EACzC,OAAOrD,IAchBsJ,4BAA4BJ,EAAoBD,EAAsBjJ,GACzE,MAAMqJ,EAAqCrJ,EAAoB3tB,cACzDk3B,EAAmCF,EAAiB3H,aAAajlD,QAAQujD,GAC/E,GAAIuJ,EAA2BF,EAAiB3H,aAAanmD,OAAS,EAClE,OAAO8tD,EAAiB3H,aAAa6H,EAA2B,GAC7D,GAAIN,EAAexuD,KAAKksD,YAAYprD,OAAS,EAAG,CACnD,MAAMiuD,EAAgC/uD,KAAKksD,YAAYsC,EAAe,GAAGC,GACzE,GAAIM,EAAY9H,aAAanmD,OAAS,EAClC,OAAOiuD,EAAY9H,aAAa,IAMrC+H,uCAAuC/J,EAAev8C,GACzD,MAAMumD,EAAwC,GACxC3C,EAAyBtsD,KAAKksD,YAAY,GAAGprD,OACnD,IAAK,IAAIL,EAAYwkD,EAAOxkD,GAAKiI,EAAKjI,IAClC,IAAK,IAAIqd,EAAY,EAAGA,EAAIwuC,EAAgBxuC,IACxC,GAAI9d,KAAKksD,YAAYzrD,GAAGqd,GAAG6rC,YAAa,CACpCsF,EAAkB1tD,KAAKvB,KAAKksD,YAAYzrD,GAAGqd,IAC3C,MAIZ,OAAOmxC,EAGJC,yBAAyBC,GAC5B,MAAMC,EAAwC,GAC9C,IAAIC,EAA4B,GAChCD,EAAgB7tD,KAAK8tD,GACrB,IAAK,IAAI5uD,EAAY,EAAGA,EAAI0uD,EAASruD,OAAQL,IAC/B,IAANA,EACA4uD,EAAM9tD,KAAK4tD,EAAS,KAEhBA,EAAS1uD,GAAG63B,kBAAoB62B,EAAS1uD,EAAI,GAAG63B,mBAGR,IAApC82B,EAAgBptD,QAAQqtD,IACxBD,EAAgB7tD,KAAK8tD,GAEzBA,EAAQ,GACRD,EAAgB7tD,KAAK8tD,IANrBA,EAAM9tD,KAAK4tD,EAAS1uD,KAWhC,OAAO2uD,EAOJE,wBACH,MAAMC,EAAiC,GACjCC,EAAoCxvD,KAAK+rD,WAAW0D,wBAC1D,GAAID,EACA,IAAK,IAAI/uD,EAAY,EAAGA,EAAI+uD,EAAmBE,uBAAwBjvD,IAAK,CACxE,IAAIinD,EAAwB,IAAI,EAAAiI,gBAChC,GAAIH,EAAmBI,8BAA8BnvD,GACjD,IAAK,IAAI68B,EAAc,EAAGC,EAAciyB,EAAmBI,8BAA8BnvD,GAAGovD,aAAa/uD,OAAQw8B,EAAMC,IAAOD,EAAK,CAC/H,MAAMwyB,EAA2DN,EAAmBI,8BAA8BnvD,GAAGovD,aAAavyB,GAC9HwyB,aAAuC,EAAAH,kBACvCjI,EAAwBoI,GAKpCP,EAAYhuD,KAAKmmD,GAGzB,OAAO6H,EAGJQ,aACH,MAAMP,EAAoCxvD,KAAK+rD,WAAW0D,wBAC1D,GAAID,EACA,IAAK,IAAI/uD,EAAY,EAAGA,EAAI+uD,EAAmBE,uBAAwBjvD,IACnE,IAAK,IAAI68B,EAAc,EAAGC,EAAciyB,EAAmBI,8BAA8BnvD,GAAGovD,aAAa/uD,OAAQw8B,EAAMC,IAAOD,EAAK,CAC/H,MAAMwyB,EAA2DN,EAAmBI,8BAA8BnvD,GAAGovD,aAAavyB,GAClI,GAAIwyB,aAAuC,EAAAE,eACvC,OAAuBF,GAapCG,6BAA6BC,GAChC,GAA0D,IAAtDlwD,KAAKmsD,sCAAsCrrD,QAC1C,EAAAqvD,eAAeC,eAAepwD,KAAKmsD,uCAAwD,kBAAEhhC,GAAG+kC,GAAY,CAC7G,MAAMG,EACF,IAAI,EAAAC,qCAAqCtwD,KAAKssD,eAAgB4D,GAElE,OADAlwD,KAAKmsD,sCAAsC5qD,KAAK8uD,GACzCA,EAEX,IAAK,IAAI5vD,EAAYT,KAAKmsD,sCAAsCrrD,OAAS,EAAGL,GAAK,EAAGA,IAAK,CACrF,GAAIT,KAAKmsD,sCAAsC1rD,GAAG8vD,kBAAkBplC,GAAG+kC,GAAY,CAC/E,MAAMG,EACF,IAAI,EAAAC,qCAAqCtwD,KAAKssD,eAAgB4D,GAElE,OADAlwD,KAAKmsD,sCAAsC/mC,OAAO3kB,EAAI,EAAG,EAAG4vD,GACrDA,EAEX,GAAIrwD,KAAKmsD,sCAAsC1rD,GAAG8vD,kBAAkBvlC,OAAOklC,GACvE,OAAOlwD,KAAKmsD,sCAAsC1rD,IAevD+vD,kCAAkCN,EAAqBO,EAAqB,GAC/E,MAAMpjD,EAAgB,EAAA8iD,eAAeO,aAAa1wD,KAAKmsD,sCACL,IAAI,EAAAmE,qCAAqC,EAAGJ,GAC5C,EAAAI,qCAAqCK,mBACrCF,GAClD,GAAIpjD,GAAS,EACT,OAAOrN,KAAKmsD,sCAAsC9+C,GAWnDujD,yCAAyCC,GAC5C,MAAMC,EAAqD9wD,KAAKmsD,sCAChE,IAEI4E,EACAC,EAHAC,EAAoB,EACpBC,EAAqBJ,EAAWhwD,OAAS,EAG7C,GAAI+vD,EAAexlC,IAAIylC,EAAWA,EAAWhwD,OAAS,GAAGyvD,mBAAoB,CACzE,KAAOW,EAAaD,EAAY,GAAG,CAC/B,MAAME,EAAsB1iD,KAAKuC,OAAOkgD,EAAaD,GAAa,GAClE,GAAIH,EAAWG,GAAWV,kBAAkBvlC,OAAO6lC,GAAiB,CAChEK,EAAaD,EACb,MACG,GAAIH,EAAWI,GAAYX,kBAAkBvlC,OAAO6lC,GAAiB,CACxEI,EAAYC,EACZ,MACG,GAAIJ,EAAWK,GAAaZ,kBAAkBvlC,OAAO6lC,GACxD,OAAO7wD,KAAKmsD,sCAAsCnqD,QAAQ8uD,EAAWK,IAC9DN,EAAe1lC,GAAG2lC,EAAWK,GAAaZ,mBACjDW,EAAaC,EAEbF,EAAYE,EAKpB,GAAIF,IAAcC,EACd,OAAOlxD,KAAKmsD,sCAAsCnqD,QAAQ8uD,EAAWG,IAEzEF,EAASD,EAAWG,GAAWV,kBAC/BS,EAAUF,EAAWI,GAAYX,uBAEjCQ,EAASD,EAAWA,EAAWhwD,OAAS,GAAGyvD,kBAC3CS,EAAU,EAAAhoC,SAASooC,KAAKpxD,KAAKqxD,6BAA6BP,EAAWhwD,OAAS,GAAIiwD,GAClFG,EAAaJ,EAAWhwD,OAE5B,MAAMoqB,EAAe8lC,EAAQvnC,UAAYsnC,EAAOtnC,UAI1C6nC,EAAqBJ,GAHJF,EAAQvnC,UAAYonC,EAAepnC,WAGRyB,EAClD,OAAOzc,KAAKC,IAAI4iD,EAAYtxD,KAAKmsD,sCAAsCrrD,QASpEywD,yCAAyCC,GAC5C,MAAMC,EAAmC,GACnCC,EAAiC,GACvC,IAAK,IAAIp0B,EAAc,EAAGC,EAAci0B,EAAgB1wD,OAAQw8B,EAAMC,IAAOD,EAAK,CAC9E,MACMq0B,EADqCH,EAAgBl0B,GACX0pB,YAAY4C,kBACZ,IAA5C6H,EAAmBzvD,QAAQ2vD,IAC3BF,EAAmBlwD,KAAKowD,GAGhC,IAAK,IAAIr0B,EAAc,EAAGC,EAAck0B,EAAmB3wD,OAAQw8B,EAAMC,IAAOD,EAAK,CACjF,MAAMq0B,EAAyBF,EAAmBn0B,GAC5CjwB,EAAgBrN,KAAK+rD,WAAW6F,gCAAgCD,GACtE,IAAK,IAAI7zC,EAAY,EAAGA,EAAI6zC,EAAW9G,OAAO/pD,OAAQgd,IAClD4zC,EAAqBnwD,KAAK8L,EAAQyQ,GAG1C,OAAO4zC,EASJG,6CAA6C9G,EAA8B0D,SAC9E,IAAK,IAAIhuD,EAAY,EAAGA,EAAIT,KAAKksD,YAAYprD,OAAQL,IACjD,IAA0B,QAAtB,EAAAT,KAAKksD,YAAYzrD,GAAG,UAAE,eAAEgjD,uBAAwBsH,EAChD,OAAO/qD,KAAKksD,YAAYzrD,GAAGguD,GAMhCqD,iCAAiCrD,EAAoBsD,GAAwB,GAChF,IAAIvD,EAAuBxuD,KAAKksD,YAAYprD,OAAS,EAIrD,OAHIixD,IACAvD,EAAe//C,KAAKC,IAAI8/C,EAAcxuD,KAAK+rD,WAAWnkB,MAAMgO,wBAEzD51C,KAAKksD,YAAYsC,GAAcC,GAGnCuD,gBAAgBpD,EAAoCJ,EAAsByD,GAG7E,IAFAzD,EAAe,EAERA,EAAexuD,KAAKksD,YAAYprD,OAAQ0tD,IAC3C,IAAK,IAAIlxB,EAAc,EAAGC,EAAcv9B,KAAKksD,YAAYsC,GAAc1tD,OAAQw8B,EAAMC,IAAOD,EAExF,GADkCt9B,KAAKksD,YAAYsC,GAAclxB,KACjDsxB,EACZ,OAAO,EAInB,OAAO,EAYHsD,0BACJvxB,EAAyBK,EAAoB,EAAAzJ,gBAAgB/xB,KAC7D2sD,EAA0B,EAAGC,EAAwB,GAAIC,EAA8B,EACvFC,GACA,MAAMC,EAAoB,GAE1B,KAA+B,IAAxBA,EAAazxD,QAAgBqxD,GAAmBC,GAAe,CAElE,MAAMtxB,EAAsB,IAAI,EAAAhJ,iBAAYxR,GAC5Cwa,EAAO5E,WAAayE,EAAc16B,EAAIksD,EACtCrxB,EAAOzE,UAAYsE,EAAc76B,EAAIqsD,EACrCrxB,EAAO1E,YAAcuE,EAAc16B,EAAIksD,EACvCrxB,EAAOxE,aAAeqE,EAAc76B,EAAIqsD,EACxCrxB,EAAOjF,iBAAmB,IAAI,EAAA/O,SAAS6T,EAAc16B,EAAG06B,EAAc76B,GACtEg7B,EAAO1D,4BAEP,IAAK,IAAIE,EAAc,EAAGC,EAAcv9B,KAAKysD,WAAW3rD,OAAQw8B,EAAMC,IAAOD,EAAK,CAC9E,MACMk1B,EADyCxyD,KAAKysD,WAAWnvB,GACvBvF,iBAAiB8I,mBAAsBC,GAAQ,EAAOE,GAE9F,GAAKwxB,GAA8B,IAAnBA,EAAQ1xD,OAIpB,IAAK,IAAIwoD,EAAe,EAAGC,EAAeiJ,EAAQ1xD,OAAQwoD,EAAOC,IAAQD,EAChEgJ,EAEMA,EAAqBE,EAAQlJ,KACpCiJ,EAAahxD,KAAKixD,EAAQlJ,IAF1BiJ,EAAahxD,KAAKixD,EAAQlJ,IAQ1C6I,GAAmBE,EAGvB,IAAII,EACJ,IAAK,IAAIn1B,EAAc,EAAGC,EAAcg1B,EAAazxD,OAAQw8B,EAAMC,IAAOD,EAAK,CAC3E,MAAMo1B,EAAYH,EAAaj1B,SACfhX,IAAZmsC,GAGyBzyD,KAAK2yD,kBAAkBD,EAAO36B,iBAAiB8D,iBAAkB8E,GACjE3gC,KAAK2yD,kBAAkBF,EAAQ16B,iBAAiB8D,iBAAkB8E,MAH3F8xB,EAAUC,GASlB,GAAID,EACA,OAAOA,EAKRG,qBAAqBjyB,GACxB,OAAO3gC,KAAKkyD,0BAA+CvxB,EAAe,EAAAkyB,oBAAoBrtD,KAAM,EAAG,GAAI,GAC/CktD,IAA+B,MAC3B,YAAmDpsC,KAA5B,QAAvB,EAAAosC,EAAOI,wBAAgB,eAAErK,0BAGtFsK,eAAepyB,EAAyBqyB,GAC3C,MAAMC,EAAyCjzD,KAAK4yD,qBAAqBjyB,GACzE,IAAKsyB,EACD,OAEJ,IAAIC,EACAC,EAAsBv1B,OAAOw1B,iBAMjC,IAAK,MAAMhkC,KAAQ6jC,EAAkB7I,MAAO,CACxC,MAAMiJ,EAAejkC,EAAK2I,iBAAiB8D,iBAAiB/1B,EACtDwtD,EAAgB7kD,KAAKiF,IAAI0b,EAAK2I,iBAAiB8D,iBAAiB51B,EAAI06B,EAAc16B,GAClFstD,EAAgB9kD,KAAKiF,IAAI2/C,EAAO1yB,EAAc76B,GAEhDwtD,EAAQC,EAAQJ,IAChBD,EAAc9jC,EACd+jC,EAAcG,EAAQC,GAG9B,OAAOL,EAGJM,SAAS3mC,GACZ,OAAO7sB,KAAKyzD,kBAAkB5mC,GAAO,GAGlC6mC,SAAS7mC,GACZ,OAAO7sB,KAAKyzD,kBAAkB5mC,GAAO,GAGlC8mC,UAAU9mC,GACb,MAAM+mC,EAAe,IAAI,EAAA9mC,SAASD,EAAM5mB,EAAG4mB,EAAM/mB,GAGjD,OAFA8tD,EAAG3tD,GAAK,GACR2tD,EAAG9tD,GAAK,GACD8tD,EAIHH,kBAAkB5mC,EAAiBgnC,GACvC,MAKMC,EALmB9zD,KAAK+zD,OAAeC,SAAS,GAKhBC,gBAChCL,EAAeE,EAAII,iBACzBN,EAAG3tD,EAAI4mB,EAAM5mB,EACb2tD,EAAG9tD,EAAI+mB,EAAM/mB,EACb,IAAIquD,EAA6BL,EAAIM,eACjCP,IACAM,EAAkBA,EAAgBN,WAEtC,MAAMQ,EAAeT,EAAGU,gBAAgBH,GACxC,OAAO,IAAI,EAAArnC,SAASunC,EAAGpuD,EAAGouD,EAAGvuD,GAG1ByuD,kBAAkB5zB,GACrB,MAGMG,EAAsB,IAAI,EAAAhJ,YAChCgJ,EAAO5E,WAAayE,EAAc16B,EAJC,EAKnC66B,EAAOzE,UAAYsE,EAAc76B,EAJE,EAKnCg7B,EAAO1E,YAAcuE,EAAc16B,EANA,EAOnC66B,EAAOxE,aAAeqE,EAAc76B,EAND,EAOnCg7B,EAAOjF,iBAAmB,IAAI,EAAA/O,SAAS,EAAG,GAC1C,IAAK,IAAIwQ,EAAc,EAAGC,EAAcv9B,KAAKysD,WAAW3rD,OAAQw8B,EAAMC,IAAOD,EAAK,CAC9E,MACMk1B,EADyCxyD,KAAKysD,WAAWnvB,GACVvF,iBAAiB8I,mBAAmCC,GACzG,GAAuB,IAAnB0xB,EAAQ1xD,OAGR,IAAK,IAAIwoD,EAAe,EAAGC,EAAeiJ,EAAQ1xD,OAAQwoD,EAAOC,IAAQD,EAErE,OADqCkJ,EAAQlJ,IAQtDkL,qBAAqB7zB,GACxB,MACM4xB,EAAsC,GAEtCzxB,EAAsB,IAAI,EAAAhJ,iBAAYxR,GAC5Cwa,EAAO5E,WAAayE,EAAc16B,EAJA,GAKlC66B,EAAOzE,UAAYsE,EAAc76B,EALC,GAMlCg7B,EAAO1E,YAAcuE,EAAc16B,EAND,GAOlC66B,EAAOxE,aAAeqE,EAAc76B,EAPF,GAQlCg7B,EAAOjF,iBAAmB,IAAI,EAAA/O,SAAS,EAAG,GAE1C,IAAK,IAAIwQ,EAAc,EAAGC,EAAcv9B,KAAKysD,WAAW3rD,OAAQw8B,EAAMC,IAAOD,EAAK,CAC9E,MACMk1B,EADyCxyD,KAAKysD,WAAWnvB,GACLvF,iBAAiB8I,mBAAwCC,GAAQ,GAC3H,GAAK0xB,GAA8B,IAAnBA,EAAQ1xD,OAGpB,IAAK,IAAIwoD,EAAe,EAAGC,EAAeiJ,EAAQ1xD,OAAQwoD,EAAOC,IAAQD,EAAM,CAC3E,MAAMmL,EAA2BjC,EAAQlJ,GACzCiJ,EAAahxD,KAAKkzD,IAK9B,IAAIhC,EACJ,IAAK,IAAIn1B,EAAc,EAAGC,EAAcg1B,EAAazxD,OAAQw8B,EAAMC,IAAOD,EAAK,CAC3E,MAAMm3B,EAA2BlC,EAAaj1B,GAC9C,QAAgBhX,IAAZmsC,EACAA,EAAUgC,MACP,CACH,IAAKA,EAAIhM,sBACL,SAEqBzoD,KAAK2yD,kBAAkB8B,EAAI18B,iBAAiB8D,iBAAkB8E,GAC9D3gC,KAAK2yD,kBAAkBF,EAAQ16B,iBAAiB8D,iBAAkB8E,KAEvF8xB,EAAUgC,IAItB,GAAIhC,EACA,OAAOA,EAORiC,yBAAyB/zB,GAC5B,MAAMg0B,EAA6B30D,KAAKw0D,qBAAqB7zB,GAC7D,GAAKg0B,EAGL,OAAOA,EAAM/L,iBAGVloB,uBAA0B4tB,GAC7B,IAAK,IAAIhxB,EAAc,EAAGC,EAAcv9B,KAAKisD,WAAWnrD,OAAQw8B,EAAMC,IAAOD,EAAK,CAC9E,MACMn9B,EAD2BH,KAAKisD,WAAW3uB,GAC1BvF,iBAAiB2I,uBAA0B4tB,GAClE,GAAInuD,EACA,OAAQA,GAMby0D,4BAA4BtG,GAC/B,MAAMqG,EAA6B30D,KAAK0gC,uBAA4C4tB,GACpF,GAAKqG,EAGL,OAAOA,EAAM7L,uBAGV+L,qBAAqBvG,GACxB,IACI,OAAOtuD,KAAKu0D,kBAAkBjG,GAChC,MAAO7V,GACL,UAAIC,KAAK,4CAA6C,yBAA2B4V,EAAsB7V,IAMxGqc,4BAA4BxG,GAC/B,IACI,MAAMqG,EAA6B30D,KAAKw0D,qBAAqBlG,GAC7D,IAAKqG,EACD,OAEJ,OAAOA,EAAM7L,uBACf,MAAOrQ,GACL,UAAIC,KACA,kDACA,yBAA2B4V,EAAsB7V,IAYtDsc,cAAc1nD,GACjB,MAAM2nD,EAAkDh1D,KAAK2sD,sCAAsCt/C,GACnG,IAAIg8C,EACJ,IACI,IAAK,IAAI/rB,EAAc,EAAGC,EAAcy3B,EAAUC,aAAan0D,OAAQw8B,EAAMC,IAAOD,EAAK,CACrF,MAAMq3B,EAA6BK,EAAUC,aAAa33B,GACrDq3B,GAAUA,EAAM/L,iBAAiB5B,YAAY4C,iBAAiBC,UAG9DR,EAEMsL,EAAM58B,kBAAoBsxB,EAAWtxB,kBACxCsxB,EAAWtxB,iBAAiB+D,iBAAiB71B,EAAI0uD,EAAM58B,iBAAiB+D,iBAAiB71B,IACzFojD,EAAasL,GAHjBtL,EAAasL,IAOvB,MAAOlc,GACL,UAAIC,KAAK,oCAAqCD,GAGlD,OAAO4Q,EASJ6L,iCAAiC7nD,GACpC,IAAK,IAAI5M,EAAY4M,EAAQ,EAAG5M,GAAK,EAAGA,IAAK,CACzC,MAAM+xD,EAAiCxyD,KAAKmsD,sCAAsC1rD,GAAGw0D,aACrF,IAAK,IAAI33B,EAAc,EAAGC,EAAci1B,EAAQ1xD,OAAQw8B,EAAMC,IAAOD,EAAK,CACtE,MAAMq3B,EAA6BnC,EAAQl1B,GAC3C,GAAIq3B,GAASA,EAAM/L,iBAAiB5B,YAAY4C,iBAAiBC,QAC7D,OAAOppD,GAInB,OAAQ,EASL00D,6BAA6B9nD,GAChC,IAAK,IAAI5M,EAAY4M,EAAQ,EAAG5M,EAAIT,KAAKmsD,sCAAsCrrD,SAAUL,EAAG,CACxF,MAAM+xD,EAAiCxyD,KAAKmsD,sCAAsC1rD,GAAGw0D,aACrF,IAAK,IAAI33B,EAAc,EAAGC,EAAci1B,EAAQ1xD,OAAQw8B,EAAMC,IAAOD,EAAK,CACtE,MAAMq3B,EAA6BnC,EAAQl1B,GAC3C,GAAIq3B,GAASA,EAAM/L,iBAAiB5B,YAAY4C,iBAAiBC,QAC7D,OAAOppD,GAInB,OAAQ,EAGL20D,0BAA0BC,EAAyBC,GACtD,IAAIC,EACAtE,EAAoBxiD,KAAKuC,MAAMqkD,GACnCpE,EAAYxiD,KAAKC,IAAI1O,KAAK2sD,sCAAsC7rD,OAAS,EAAGmwD,GAC5E,IAAK,IAAIxwD,EAAYwwD,EAAWxwD,GAAK,EAAGA,IAEpC,GADA80D,EAAav1D,KAAK+0D,cAAct0D,GAC5B80D,EAAY,CACZ,IAAID,EAKA,OAAOC,EAJP,GAAIA,EAAW3M,iBAAiB5B,YAAY4C,iBAAiBC,QACzD,OAAO0L,GAUpBC,2BAA2BH,EAAyBI,GACvD,IAAIF,EAEJ,IAAK,IAAI90D,EADkBgO,KAAKN,IAAI,EAAGM,KAAKinD,KAAKL,IAChB50D,EAAIT,KAAK2sD,sCAAsC7rD,OAAQL,IAEpF,GADA80D,EAAav1D,KAAK+0D,cAAct0D,GAC5B80D,EAAY,CACZ,IAAIE,EAKA,OAAOF,EAJP,GAAIA,EAAW3M,iBAAiB5B,YAAY4C,iBAAiBC,QACzD,OAAO0L,GAUpBI,+BAA+B9E,EAA0B3L,GAC5D,MAAMzzC,EAAgCzR,KAAK41D,gCAAgC/E,GACrEzI,EAAe32C,EAAO,GACtBokD,EAAwCpkD,EAAO,GACrD,IAAKokD,GAA2E,IAA/CA,EAAyBC,WAAWh1D,OACjE,OAEJ,MAAMi1D,EAAsBF,EAAyB99B,iBAAiB8D,iBAAiB/1B,EACjF+tB,EAAiB,EAAAs8B,eAAentC,KAAK6yC,EAAyBC,YAAY/9B,iBAAiB+D,iBAAiBh2B,EAAI,EACtH,OAAO,IAAI,EAAA48C,cAAc,IAAI,EAAA51B,SAASs7B,EAAM2N,GAAc,IAAI,EAAAjpC,SAASs7B,EAAM2N,EAAcliC,GAAS,EAAGqxB,GAGpG0Q,gCAAgCI,eACnC,IAAIC,EACJ,MAAMZ,EAA0Br1D,KAAK4wD,yCAAyCoF,GACxEE,EAA0Cl2D,KAAKo1D,0BAA0BC,GAAiB,GAC1Fc,EAAsCn2D,KAAKw1D,2BAA2BH,GAAiB,GACvFe,EAA2BJ,EAAUvsC,UAC3C,IAAKysC,IAAuBC,EACxB,MAAO,CAAC,OAAG7vC,GAEf,IAAI+vC,EAOAC,EAMJ,GAVID,EAFAH,EAEgF,QAAhD,EAAAA,EAAmBt+B,cAAcU,uBAAe,eAAEH,kBAEN,QAA5C,EAAAg+B,EAAev+B,cAAcU,uBAAe,eAAEH,kBAI9Em+B,EADAH,EACwE,QAA5C,EAAAA,EAAev+B,cAAcU,uBAAe,eAAEH,kBAEE,QAAhD,EAAA+9B,EAAmBt+B,cAAcU,uBAAe,eAAEH,kBAE9Ek+B,IAAkCC,EAA2B,CAE7D,IAAI1sC,EACA2sC,EACAC,EACJ,GAJAP,EAAqBI,EAIhBH,EAGE,GAAKC,EAORI,EAA8BL,EAAmBn+B,iBAAiB8D,iBAAiB51B,EACnFuwD,EAA0BL,EAAep+B,iBAAiB8D,iBAAiB51B,EAEvE2jB,EADAssC,IAAuBC,EACZ,GAECC,EAAmBF,EAAmBpN,uBAAuBr/B,YACpE0sC,EAAerN,uBAAuBr/B,UAAYysC,EAAmBpN,uBAAuBr/B,eAb7E,CACxB8sC,EAA8BL,EAAmBn+B,iBAAiB8D,iBAAiB51B,EACnFuwD,EAA0BP,EAAmBQ,kCAC7C,MAAMC,EAAoBR,EAAmBt+B,cAAc6rB,oBAC3D75B,GAAYwsC,EAAmBF,EAAmBpN,uBAAuBr/B,YACrE,EAAAT,SAASooC,KAAKsF,EAAGnG,kBAAmBmG,EAAGxN,UAAUz/B,UAAYysC,EAAmBpN,uBAAuBr/B,gBAP3G8sC,EAA8BC,EAA0BL,EAAep+B,iBAAiB8D,iBAAiB51B,EACzG2jB,EAAW,EAmBf,OAFAA,EAAWnb,KAAKC,IAAI,EAAGD,KAAKN,IAAI,EAAGyb,IAE5B,CAD+B2sC,EAA8B3sC,GAAY4sC,EAA0BD,GAC3EN,GAC5B,CACH,MAAMU,EAAwCR,EAAev+B,cAAc6rB,oBAAoB8M,kBAAkB9mC,UACjH,IAAIG,EACAgtC,EACJ,GAAIR,EAAmBO,EAA+B,CAClDV,EAAqBI,EACrB,MAAME,EAAsCL,EAAmBn+B,iBAAiB8D,iBAAiB51B,EAC3F4wD,EAAqCZ,EAAmBQ,kCAC9D7sC,GAAYwsC,EAAmBF,EAAmBpN,uBAAuBr/B,YACpEktC,EAAgCT,EAAmBpN,uBAAuBr/B,WAC/EG,EAAWnb,KAAKC,IAAI,EAAGD,KAAKN,IAAI,EAAGyb,IACnCgtC,EAAwBL,EAA8B3sC,GAAYitC,EAA6BN,OAC5F,CACHN,EAAqBK,EACrB,MAAME,EAAkCL,EAAep+B,iBAAiB8D,iBAAiB51B,EACnF6wD,EAAgCb,EAAmBc,iCACzDntC,GAAYwsC,EAAmBO,IAC1BR,EAAerN,uBAAuBr/B,UAAYktC,GACvD/sC,EAAWnb,KAAKC,IAAI,EAAGD,KAAKN,IAAI,EAAGyb,IACnCgtC,EAAwBE,EAAwBltC,GAAY4sC,EAA0BM,GAE1F,MAAO,CAACF,EAAuBX,IAIhCe,gCACH,IAAIC,EAAiC,EACrC,IAAK,IAAI35B,EAAc,EAAGC,EAAcv9B,KAAK+rD,WAAWmL,YAAYp2D,OAAQw8B,EAAMC,IAAOD,GAE1D,IADIt9B,KAAK+rD,WAAWmL,YAAY55B,GAC5CusB,SACXoN,IAGR,OAAOA,EAGJE,iCACH,IAAIC,EAAkC,EACtC,IAAK,IAAI95B,EAAc,EAAGC,EAAcv9B,KAAK+rD,WAAWmL,YAAYp2D,OAAQw8B,EAAMC,IAAOD,GAExD,IADEt9B,KAAK+rD,WAAWmL,YAAY55B,GAC5C+5B,WACXD,IAGR,OAAOA,EAOJE,iCAAiC1O,SACpC,KAA2D,QAAtD,EAAAA,EAAiBC,wBAAwB0O,qBAAa,eAAEC,qBACzD,OAEJ,MAAM5I,EAAqChG,EAAiBC,wBAAwB0O,cAAcC,oBAC7F5O,EAAiB5B,YAAYyQ,gBAClC,OAAO7I,MAAAA,OAAgB,EAAhBA,EAAkBrG,qCAAqCK,EAAiB8O,WAG3E/E,kBAAkBgF,EAAeC,GACrC,MAAMC,EAAiBF,EAAI1xD,EAAI2xD,EAAI3xD,EAC7B6xD,EAAiBH,EAAI7xD,EAAI8xD,EAAI9xD,EACnC,OAAQ+xD,EAASA,EAAWC,EAASA,EAQjCzG,6BAA6BhkD,GACjC,IAAI0qD,EAAsB,IAAI,EAAA/uC,SAAS,EAAG,GAC1C,IAAK,MAAMu8B,KAAuBvlD,KAAKmsD,sCAAsC9+C,GAAO4nD,aAAc,CAC9F,IAAK1P,EACD,SAEJ,MAAMyS,EAAkCzS,EAAoB0S,8BACxDF,EAAU5sC,GAAG6sC,KACbD,EAAYC,GAGpB,OAAOD,IAIf,qIC9+BA,gBACA,UACA,UACA,UAQA,MAAaje,UAAsB,EAAAviB,gBAC/BlgB,YAAY+X,EAAYsJ,EAA6BR,EAAuBmyB,GACxE1yB,QAgBG,KAAAugC,gBAAkC,EAAA1pC,eAAeM,KAQjD,KAAAqpC,UAAoB,EAvBvBn4D,KAAKo4D,WAAahpC,EAClBpvB,KAAKmqD,iBAAmBzxB,EACxB14B,KAAK+3B,iBAAmB,IAAI,EAAAD,YAAY93B,KAAM04B,EAAOX,kBAEjD/3B,KAAKqqD,oBADLA,GAG2Bj7B,EAAKy2B,OAGpC7lD,KAAKq4D,aAAer4D,KAAKmqB,4BAA4BnqB,KAAKqqD,qBAC1DrqD,KAAKk4B,MAAQA,EACbl4B,KAAKk4B,MAAMyhB,0BAA0BvqB,EAAMpvB,MAcxCqrD,UAAU7N,EAAgC8a,EAA6B3mC,EAAmB4mC,GAC7F,IAAIC,EAAyBx4D,KAAKo4D,WAAW3pC,MAI7C,OAHI,EAAAsL,qBAAqB0+B,sBACrBD,EAAkB,EAAAz+B,qBAAqB0+B,oBAAoBC,eAAe14D,KAAKo4D,WAAW3pC,MAAO+uB,EAAgB7rB,IAE9G6mC,EAQHruC,4BAA4BP,GAClC,OAAK5pB,KAAKo4D,YAAep4D,KAAKo4D,WAAWO,WAGlC,EAFE/uC,EAASO,8BAKTyuC,sBACT,OAAO54D,KAAKmqD,iBAAiB2I,iBAAiBl7B,cAAcO,kBAAkBQ,OAKzErP,gBAAgB8F,EAAY8I,GACjC,OAAOA,EAAM+f,uBAAuB1e,SAASnK,EAAKwqB,8BAvDxD,yHChBA,gBAGA,MAAariB,UAAwB,EAAAshC,yBAItB9gC,uBACP,OAAO/3B,KAAK63B,YAGLE,qBAAiBnlB,GACxB5S,KAAK63B,YAAcjlB,GAT3B,+HCHA,gBACA,UACA,UACA,SACA,UAMA,MAAakmD,UAA6B,EAAAvhC,gBAEtClgB,YAAYqY,EAA0BgJ,GAClCf,QACA33B,KAAK+4D,eAAiBrpC,EACtB1vB,KAAKg5D,YAGLh5D,KAAK+3B,iBAAmB,IAAI,EAAAD,YAAY93B,KAAM04B,GAW1CsgC,YACJ,OAAQh5D,KAAK+4D,eAAeE,MACxB,KAAK,EAAAC,WAAWC,IACZn5D,KAAKo5D,aAAe,EAAAC,YAAYF,IAChC,MACJ,KAAK,EAAAD,WAAWI,IACZt5D,KAAKo5D,aAAe,EAAAC,YAAYC,IAChC,MACJ,KAAK,EAAAJ,WAAWK,KACZv5D,KAAKo5D,aAAe,EAAAC,YAAYE,KAChC,MACJ,KAAK,EAAAL,WAAWM,KACZx5D,KAAKo5D,aAAe,EAAAC,YAAYG,KAChC,MACJ,QACI,MAAM,IAAI,EAAAl6B,4BAA4B,MAlCtD,mICTA,gBAEA,UAEA,MAAam6B,UAA2B,EAAAliC,gBAEpClgB,YAAYqiD,EAA0BC,EAA2BjhC,EAAqBkhC,GAClFjiC,QACA33B,KAAK63B,YAAc,IAAI,EAAAC,YAAYY,GACnC14B,KAAK63B,YAAYiE,iBAAmB49B,EACpC15D,KAAK63B,YAAYuE,YAAcu9B,EAAgB1zD,EAAIyzD,EAAezzD,EAClEjG,KAAK63B,YAAYyE,aAAeq9B,EAAgB7zD,EAAI4zD,EAAe5zD,EACnE9F,KAAK45D,MAAQA,GARrB,4HCJA,gBAEA,UAEA,UAIA,UACA,UAGA,UACA,SAEA,MAAaC,UAAsB,EAAAjX,eAG/BvrC,YAAYyiD,EAAY5hC,GACpBP,QAMG,KAAAsvB,aAAsC,GALzCjnD,KAAK85D,KAAOA,EACZ95D,KAAKk4B,MAAQA,EAgBV5O,eAAgBrjB,EAAkBH,GACrC,GAAIG,EAAEghD,aAAanmD,OAAS,EACxB,OAAQ,EACL,GAAIgF,EAAEmhD,aAAanmD,OAAS,EAC/B,OAAO,EAEX,MAAMi5D,EAA2B,EAAA/wC,SAASgxC,MAAM/zD,EAAEghD,aAAahhD,EAAEghD,aAAanmD,OAAS,GAAGgoD,uBAC1C7iD,EAAEghD,aAAa,GAAG6B,wBAC5DmR,EAA2B,EAAAjxC,SAASgxC,MAAMl0D,EAAEmhD,aAAanhD,EAAEmhD,aAAanmD,OAAS,GAAGgoD,uBAC1ChjD,EAAEmhD,aAAa,GAAG6B,wBAElE,OAAIiR,EAAetwC,UAAYwwC,EAAexwC,UACnC,EAGPwwC,EAAexwC,UAAYswC,EAAetwC,WAClC,EAGL,EAOJywC,eAAehiC,GAIlB,MAAMiiC,EAAuCn6D,KAAKinD,aAAa,GACzDmT,EAAqCp6D,KAAKinD,aAAajnD,KAAKinD,aAAanmD,OAAS,GAGxF,IAAIu5D,EAA+BF,EAAgBG,0BAA0Bt6D,KAAK85D,KAAKS,YAClFF,GAAiBr6D,KAAKw6D,aACvBH,EAAgBF,EAAgBM,+BAA+Bz6D,KAAK85D,KAAKS,YAExEF,IACDA,EAAgBF,EAAgBO,gDAAgD16D,KAAK85D,KAAKS,UAAWv6D,KAAK85D,OAE9G,IAAIa,EAA6BP,EAAcE,0BAA0Bt6D,KAAK85D,KAAKc,UAC9ED,GAAe36D,KAAK66D,WACrBF,EAAcP,EAAcK,+BAA+Bz6D,KAAK85D,KAAKc,UAGzE,MAAMtc,EAAuB6b,EAAgBviC,cAAcU,gBACrD8mB,EAAmDd,EAAUe,wBAEnEr/C,KAAK86D,mBAAmB1b,EAAyBd,GAGjD,MAAMyc,EACF/6D,KAAKg7D,qBAAqBX,EAAeM,EAAarc,EAAWpmB,EAAOknB,GAEtEoB,EAAiBua,EAAeva,OAChCC,EAAesa,EAAeta,KACpC,IAAIwa,EAAiBF,EAAeE,OAChCC,EAAeH,EAAeG,KAClC,MAAMC,EAAmBjjC,EAAM+X,oBACzBmrB,EAAmBljC,EAAMgY,oBAC/B,IAAImrB,EAEJ,GAAIr7D,KAAKs7D,YAAc,EAAA12B,cAAckb,MAAO,CACxCmb,GAAU/iC,EAAM4X,oBAChBorB,GAAQhjC,EAAM4X,oBACd,MAAMyrB,EAA4B,IAAI,EAAAzuC,SAAS9sB,KAAKinD,aAAa,GAAGrvB,cAAcG,iBAAiB+D,iBAAiB71B,EACnEjG,KAAKinD,aAAa,GAAGlvB,iBAAiB+D,iBAAiB71B,EACzDg1D,GAC3CZ,EACIkB,EAAgBt1D,GAAKjG,KAAKinD,aAAa,GAAGlvB,iBAAiBqE,YAG3Dm/B,EAAgBt1D,EAAIjG,KAAKinD,aAAa,GAAGrvB,cAAc4jC,uBAI3Dx7D,KAAKw6D,aACLe,EAAgBt1D,GAAKm0D,EAAcriC,iBAAiB+D,iBAAiB71B,GAGzE,MAAMw1D,EAAyB,IAAI,EAAA3uC,SAAS9sB,KAAKinD,aAAajnD,KAAKinD,aAAanmD,OAAS,GAAG82B,cAAcG,iBAAiB+D,iBAAiB71B,EAC9FjG,KAAKinD,aAAajnD,KAAKinD,aAAanmD,OAAS,GAAGi3B,iBAAiB+D,iBAAiB71B,EACpFi1D,GAiB5C,GAhBIP,EACIc,EAAax1D,GAAKjG,KAAKinD,aAAajnD,KAAKinD,aAAanmD,OAAS,GAAGi3B,iBAAiBmE,WAGnFu/B,EAAax1D,EAAIjG,KAAKinD,aAAajnD,KAAKinD,aAAanmD,OAAS,GAAG82B,cAAcG,iBAAiB+D,iBAAiB71B,EAC/GjG,KAAKinD,aAAajnD,KAAKinD,aAAanmD,OAAS,GAAG82B,cAAcG,iBAAiBhE,KAAKH,MAI1F5zB,KAAK66D,WACLY,EAAax1D,GAAKm0D,EAAcsB,iBAAiB3jC,iBAAiB+D,iBAAiB71B,GAIvFo1D,EAASr7D,KAAK27D,mBAAmBJ,EAAiBE,EAAcnd,EAAWc,GAErD,IAAlBic,EAAOv6D,OAAc,CACrB,MAAM86D,EAAmB,IAAI,EAAA9uC,UAAU2uC,EAAax1D,EAAIs1D,EAAgBt1D,GAAK,EAAIs1D,EAAgBt1D,GAC1Dw1D,EAAa31D,EAAIy1D,EAAgBz1D,GAAK,EAAIy1D,EAAgBz1D,GACjGu1D,EAAO95D,KAAKq6D,GAIhB,MAAMC,EAAoCptD,KAAKqtD,MAAMZ,EAAOD,IAAWxa,EAAOD,IAGxEub,EAAmB,IAAI,EAAAjvC,SAAS,EAAG,GACzC,IAAIkvC,EAAiB,IAAI,EAAAlvC,SAAS2zB,EAAOD,IAAU0a,EAAOD,IAM1D,MAAMgB,EAA2B,EAAA/vC,SAASgwC,kBAAkBL,GACtDM,EAA4BF,EAAevvC,qBACjDsvC,EAAOC,EAAervC,qBAAqBovC,GAC3C,MAAMI,EAAgCp8D,KAAKq8D,4CAA4ChB,EAAQ7a,EAAQya,EAAQgB,GAIzGK,EAAyBt8D,KAAKu8D,sBAAsBH,EAAmBL,EAAQC,GAC/EQ,EAAuBx8D,KAAKy8D,uBAAuBL,EAAmBL,EAAQC,GAC9EU,EAAqBX,EAAOj2D,EAAIi2D,EAAO91D,EAAIq2D,EAC3CK,EAAmBX,EAAKl2D,EAAIk2D,EAAK/1D,EAAIu2D,EAIrCI,EAA8B,IAAI,EAAA9vC,SACxC,IAAI+vC,GAAqB,EACrBpuD,KAAKiF,IAAIjF,KAAKiF,IAAI4oD,GAAkB7tD,KAAKiF,IAAI8oD,IAAiB,MAC9DI,EAAkB32D,EAAI+1D,EAAK/1D,EAAI,EAC/B22D,EAAkB92D,EAAI,EACtB+2D,GAAY,IAEZD,EAAkB32D,GAAK02D,EAAWD,IAAeJ,EAAiBE,GAClEI,EAAkB92D,EAAIw2D,EAAiBM,EAAkB32D,EAAIy2D,GAKjE,MAAMI,EAA2B98D,KAAK+8D,0BAA0Bf,EAAK/1D,EAAGm2D,GAOlEY,EAAuB,EACvBC,EAAqB,EAqB3B,IAAIC,EAAqB/B,EACrBgC,GAAoBhC,EAExB,IAAK0B,EAAW,CACZ,MAAMprD,EACFzR,KAAKo9D,gBAAgBjC,EAAUmB,EAAgBE,EAAcpB,GACjE8B,EAAazrD,EAAOyrD,WACpBC,EAAW1rD,EAAO0rD,SAItB,MAAME,EACFr9D,KAAKs9D,uBAAuBtB,EAAK/1D,EAAGi3D,EAAYC,EAAUf,EAAmBU,EAAkB7B,EAAQC,GAE3G,IAAIqC,EAA8BF,EAAcE,kBAC5CC,EAA4BH,EAAcG,gBAI9CD,EAAoBpB,EAAgBvvC,qBAAqB2wC,GACzDA,EAAkBt3D,GAAKu6C,EACvB+c,EAAkBz3D,GAAKy3D,EAAkBz3D,EAAIm1D,EAC7CuC,EAAkBrB,EAAgBvvC,qBAAqB4wC,GACvDA,EAAgBv3D,GAAKu6C,EACrBgd,EAAgB13D,GAAK03D,EAAgB13D,EAAIm1D,EAWzCj7D,KAAKmjD,cAAgB,IAAI,EAAAr2B,SAAS0zB,EAAQya,EAAS+B,GACnDh9D,KAAKojD,qBAAuB,IAAI,EAAAt2B,SAASywC,EAAkBt3D,EAAGs3D,EAAkBz3D,EAAIk3D,GACpFh9D,KAAKqjD,mBAAqB,IAAI,EAAAv2B,SAAS0wC,EAAgBv3D,EAAGu3D,EAAgB13D,EAAIm3D,GAC9Ej9D,KAAKsjD,YAAc,IAAI,EAAAx2B,SAAS2zB,EAAMya,EAAO+B,GAG7C,MAAMn8D,EAAiBw9C,EAAUmf,QAAQ38D,OACnC2vD,EAAqBrR,EAAwBse,sBAAsB19D,KAAKmjD,cAAcl9C,EAAGnF,GACzF68D,EAAmBve,EAAwBse,sBAAsB19D,KAAKsjD,YAAYr9C,EAAGnF,GACrF88D,EAAmB59D,KAAKsjD,YAAYr9C,EAAIjG,KAAKmjD,cAAcl9C,EAC3D43D,EAAuBze,EAAwBlX,aACrD,IAAK,IAAIznC,EAAYgwD,EAAYhwD,EAAIk9D,EAAUl9D,IAAK,CAEhD,MAAMyqB,EAAezqB,EAAIo9D,EAAe79D,KAAKmjD,cAAcl9C,EACrD63D,EAAuB99D,KAAKkjD,2BAA2Bz0C,KAAKiF,IAAIwX,GAAQ0yC,GAG9E,IAAIvwD,EAAgB+xC,EAAwBse,sBAAsBI,EAAW73D,EAAGnF,GAE5EuM,GAASojD,IACTnS,EAAUmf,QAAQpwD,GAASoB,KAAKC,IAAI4vC,EAAUmf,QAAQpwD,GAAQywD,EAAWh4D,IAE7EuH,IACIA,EAAQvM,IACRw9C,EAAUmf,QAAQpwD,GAASoB,KAAKC,IAAI4vC,EAAUmf,QAAQpwD,GAAQywD,EAAWh4D,SAG9E,CACHm1D,GAAU/iC,EAAM4X,oBAChBorB,GAAQhjC,EAAM4X,oBAGd,MAAMiuB,EAA4B,IAAI,EAAAjxC,SAAS9sB,KAAKinD,aAAa,GAAGrvB,cAAcG,iBAAiB+D,iBAAiB71B,EACnEjG,KAAKinD,aAAa,GAAGlvB,iBAAiB+D,iBAAiB71B,EACzDg1D,GAC3CZ,EACA0D,EAAgB93D,GAAKjG,KAAKinD,aAAa,GAAGlvB,iBAAiBqE,YAG3D2hC,EAAgB93D,EAAIjG,KAAKinD,aAAa,GAAGrvB,cAAc4jC,uBAIvDx7D,KAAKw6D,aACLuD,EAAgB93D,GAAKm0D,EAAcriC,iBAAiB+D,iBAAiB71B,GAEzE,MAAM+3D,EAAyB,IAAI,EAAAlxC,SAAS9sB,KAAKinD,aAAajnD,KAAKinD,aAAanmD,OAAS,GAAG82B,cAAcG,iBAAiB+D,iBAAiB71B,EAC9FjG,KAAKinD,aAAajnD,KAAKinD,aAAanmD,OAAS,GAAGi3B,iBAAiB+D,iBAAiB71B,EACpFi1D,GAiB5C,GAhBIP,EACAqD,EAAa/3D,GAAKjG,KAAKinD,aAAajnD,KAAKinD,aAAanmD,OAAS,GAAGi3B,iBAAiBmE,WAGnF8hC,EAAa/3D,EAAIjG,KAAKinD,aAAajnD,KAAKinD,aAAanmD,OAAS,GAAG82B,cAAcG,iBAAiB+D,iBAAiB71B,EAC3GjG,KAAKinD,aAAajnD,KAAKinD,aAAanmD,OAAS,GAAG82B,cAAcG,iBAAiBhE,KAAKH,MAI1F5zB,KAAK66D,WACLmD,EAAa/3D,GAAKm0D,EAAcsB,iBAAiB3jC,iBAAiB+D,iBAAiB71B,GAIvFo1D,EAASr7D,KAAKi+D,sBAAsBF,EAAiBC,EAAc1f,EAAWc,GAExD,IAAlBic,EAAOv6D,OAAc,CACrB,MAAM86D,EAAmB,IAAI,EAAA9uC,UAAUkxC,EAAa/3D,EAAI83D,EAAgB93D,GAAK,EAAI83D,EAAgB93D,GAC1D+3D,EAAal4D,EAAIi4D,EAAgBj4D,GAAK,EAAIi4D,EAAgBj4D,GACjGu1D,EAAO95D,KAAKq6D,GAIhB,MAAMC,EAAmCptD,KAAKqtD,MAAMZ,EAAOD,IAAWxa,EAAOD,IAEvEub,EAAmB,IAAI,EAAAjvC,SAAS,EAAG,GACzC,IAAIkvC,EAAiB,IAAI,EAAAlvC,SAAS2zB,EAAOD,EAAQ0a,EAAOD,GAMxD,MAAMgB,EAA2B,EAAA/vC,SAASgwC,mBAAmBL,GACvDM,EAA4BF,EAAevvC,qBACjDsvC,EAAOC,EAAervC,qBAAqBovC,GAC3C,MAAMI,EAAgCp8D,KAAKk+D,4CAA4C7C,EAAQ7a,EAAQya,EAAQgB,GAIzGK,EAAyBt8D,KAAKu8D,sBAAsBH,EAAmBL,EAAQC,GAC/EQ,EAAuBx8D,KAAKy8D,uBAAuBL,EAAmBL,EAAQC,GAC9EU,EAAqBX,EAAOj2D,EAAIi2D,EAAO91D,EAAIq2D,EAC3CK,EAAmBX,EAAKl2D,EAAIk2D,EAAK/1D,EAAIu2D,EAIrCI,EAA8B,IAAI,EAAA9vC,SACxC,IAAI+vC,GAAqB,EACrBpuD,KAAKiF,IAAIjF,KAAKiF,IAAI4oD,GAAkB7tD,KAAKiF,IAAI8oD,IAAiB,MAC9DI,EAAkB32D,EAAI+1D,EAAK/1D,EAAI,EAC/B22D,EAAkB92D,EAAI,EACtB+2D,GAAY,IAEZD,EAAkB32D,GAAK02D,EAAWD,IAAeJ,EAAiBE,GAClEI,EAAkB92D,EAAIw2D,EAAiBM,EAAkB32D,EAAIy2D,GAKjE,MAAMI,EAA2B98D,KAAK+8D,0BAA0Bf,EAAK/1D,EAAGm2D,GAOlEY,EAAuB,EACvBC,EAAqB,EAkB3B,IAAIC,EAAqB/B,EACrBgC,GAAoBhC,EAExB,IAAK0B,EAAW,CACZ,MAAMprD,EACFzR,KAAKo9D,gBAAgBjC,EAAUmB,EAAgBE,EAAcpB,GACjE8B,EAAazrD,EAAOyrD,WACpBC,EAAW1rD,EAAO0rD,SAItB,MAAME,EACFr9D,KAAKs9D,uBAAuBtB,EAAK/1D,EAAGi3D,EAAYC,EAAUf,EAAmBU,EAAkB7B,EAAQC,GAC3G,IAAIqC,EAA8BF,EAAcE,kBAC5CC,EAA4BH,EAAcG,gBAI9CD,EAAoBpB,EAAgBvvC,qBAAqB2wC,GACzDA,EAAkBt3D,GAAKu6C,EACvB+c,EAAkBz3D,GAAKm1D,EACvBuC,EAAkBrB,EAAgBvvC,qBAAqB4wC,GACvDA,EAAgBv3D,GAAKu6C,EACrBgd,EAAgB13D,GAAKm1D,EAGrBj7D,KAAKmjD,cAAgB,IAAI,EAAAr2B,SAAS0zB,EAAQya,EAAS+B,GACnDh9D,KAAKojD,qBAAuB,IAAI,EAAAt2B,SAASywC,EAAkBt3D,EAAGs3D,EAAkBz3D,EAAIk3D,GACpFh9D,KAAKqjD,mBAAqB,IAAI,EAAAv2B,SAAS0wC,EAAgBv3D,EAAGu3D,EAAgB13D,EAAIm3D,GAC9Ej9D,KAAKsjD,YAAc,IAAI,EAAAx2B,SAAS2zB,EAAMya,EAAO+B,GAS7C,MAAMn8D,EAAiBw9C,EAAU6f,WAAWr9D,OACtC2vD,EAAqBrR,EAAwBse,sBAAsB19D,KAAKmjD,cAAcl9C,EAAGnF,GACzF68D,EAAmBve,EAAwBse,sBAAsB19D,KAAKsjD,YAAYr9C,EAAGnF,GACrF88D,EAAmB59D,KAAKsjD,YAAYr9C,EAAIjG,KAAKmjD,cAAcl9C,EAC3D43D,EAAuBze,EAAwBlX,aACrD,IAAK,IAAIznC,EAAYgwD,EAAYhwD,EAAIk9D,EAAUl9D,IAAK,CAEhD,MAAMyqB,EAAezqB,EAAIo9D,EAAe79D,KAAKmjD,cAAcl9C,EACrD63D,EAAuB99D,KAAKkjD,2BAA2Bz0C,KAAKiF,IAAIwX,GAAQ0yC,GAG9E,IAAIvwD,EAAgB+xC,EAAwBse,sBAAsBI,EAAW73D,EAAGnF,GAE5EuM,GAASojD,IACTnS,EAAU6f,WAAW9wD,GAASoB,KAAKN,IAAImwC,EAAU6f,WAAW9wD,GAAQywD,EAAWh4D,IAEnFuH,IACIA,EAAQvM,IACRw9C,EAAU6f,WAAW9wD,GAASoB,KAAKN,IAAImwC,EAAU6f,WAAW9wD,GAAQywD,EAAWh4D,MAmBvFk1D,qBAAwBX,EACAM,EACArc,EACApmB,EACAknB,GAC5B,IAAIoB,EAAiB,EACjBya,EAAiB,EACjBxa,EAAe,EACfya,EAAe,EAEnB,GAAIb,EAAe,CAEf7Z,EAAS6Z,EAActiC,iBAAiB+D,iBAAiB71B,EAAIo0D,EAAclQ,iBAAiB2I,iBAAiB/6B,iBAAiB+D,iBAAiB71B,EAC7Go0D,EAAclQ,iBAAiB2I,iBAAiBl7B,cAAcG,iBAAiB+D,iBAAiB71B,EAG9HjG,KAAKw6D,aACLha,GAAU6Z,EAAclQ,iBAAiB2I,iBAAiB4I,iBAAiB3jC,iBAAiB+D,iBAAiB71B,GAMjH,MAAMm4D,EAAmC/D,EAAclQ,iBAGnD8Q,EADAj7D,KAAKs7D,YAAc,EAAA12B,cAAckb,MACxBse,EAAYrmC,iBAAiB+D,iBAAiBh2B,EAAIs4D,EAAYrmC,iBAAiBsE,UAE/E+hC,EAAYrmC,iBAAiB+D,iBAAiBh2B,EAAIs4D,EAAYrmC,iBAAiBuE,aAKvF8hC,EAAYjU,iBAAiBkU,gBAAkB,EAAAC,kBAAkBj/B,MAAQr/B,KAAKs7D,YAAc,EAAA12B,cAAcwb,QAC3GI,GAAU,IAEV4d,EAAYjU,iBAAiBkU,gBAAkB,EAAAC,kBAAkBl/B,IAAMp/B,KAAKs7D,YAAc,EAAA12B,cAAckb,QACxGU,GAAU,SAcdA,EAAS,EAGb,GAAIma,EAAa,CACbla,EAAOka,EAAY5iC,iBAAiB+D,iBAAiB71B,EAAI00D,EAAYxQ,iBAAiB2I,iBAAiB/6B,iBAAiB+D,iBAAiB71B,EACnI00D,EAAYxQ,iBAAiB2I,iBAAiBl7B,cAAcG,iBAAiB+D,iBAAiB71B,EAGhGjG,KAAK66D,WACLpa,GAAQka,EAAYxQ,iBAAiB2I,iBAAiB4I,iBAAiB3jC,iBAAiB+D,iBAAiB71B,GAG7G,MAAMs4D,EAAiC5D,EAAYxQ,iBAE/C+Q,EADAl7D,KAAKs7D,YAAc,EAAA12B,cAAckb,MAC1Bye,EAAUxmC,iBAAiB+D,iBAAiBh2B,EAAIy4D,EAAUxmC,iBAAiBsE,UAE3EkiC,EAAUxmC,iBAAiB+D,iBAAiBh2B,EAAIy4D,EAAUxmC,iBAAiBuE,aAKjFiiC,EAAUpU,iBAAiBkU,gBAAkB,EAAAC,kBAAkBj/B,MAAQr/B,KAAKs7D,YAAc,EAAA12B,cAAcwb,QACzGK,GAAQ,IAER8d,EAAUpU,iBAAiBkU,gBAAkB,EAAAC,kBAAkBl/B,IAAMp/B,KAAKs7D,YAAc,EAAA12B,cAAckb,QACtGW,GAAQ,SA6BZA,EAAOnC,EAAUvmB,iBAAiBhE,KAAKH,MA2C3C,OAvCKymC,GAAkBM,IACnBM,GAAU,IACVC,GAAQ,KAEPb,IAEGY,EADAj7D,KAAKs7D,YAAc,EAAA12B,cAAckb,MACxBob,EAAO,EAEPA,EAAO,GAGnBP,IAEGO,EADAl7D,KAAKs7D,YAAc,EAAA12B,cAAckb,MAC1Bmb,EAAS,EAETA,EAAS,GAKpBj7D,KAAK85D,KAAK0E,iCAAmCx+D,KAAK85D,KAAK2E,iBACnDz+D,KAAKs7D,YAAc,EAAA12B,cAAckb,MACjCmb,GAAU/iC,EAAMsY,qCACXyqB,GAAU/iC,EAAMsY,sCAEzBxwC,KAAK85D,KAAK4E,6BAA+B1+D,KAAK85D,KAAK2E,iBAC/Cz+D,KAAKs7D,YAAc,EAAA12B,cAAckb,MACjCob,GAAQhjC,EAAMsY,qCACT0qB,GAAQhjC,EAAMsY,sCAGvBxwC,KAAKs7D,YAAc,EAAA12B,cAAckb,OACjCmb,EAASxsD,KAAKC,IAAIusD,EAAQ,KAC1BC,EAAOzsD,KAAKC,IAAIwsD,EAAM,OAEtBD,EAASxsD,KAAKN,IAAI8sD,EAAQ3c,EAAUtV,YAAc,KAClDkyB,EAAOzsD,KAAKN,IAAI+sD,EAAM5c,EAAUtV,YAAc,MAG3C,CAACwX,OAAAA,EAAQya,OAAAA,EAAQxa,KAAAA,EAAMya,KAAAA,GAQ1BJ,mBAAmB1b,EAAkDd,GAQzE,GAAIt+C,KAAKk4B,MAAMkX,qBAEX,YADApvC,KAAKs7D,UAAYt7D,KAAK85D,KAAK6E,cAM/B,IAAK,IAAIrhC,EAAc,EAAGC,EAAcv9B,KAAKinD,aAAanmD,OAAQw8B,EAAMC,IAAOD,EAE3E,GADiDt9B,KAAKinD,aAAa3pB,GAC3C1F,cAAcuxB,oBAKlC,YAJInpD,KAAK85D,KAAKS,UAAUqE,iBAAiBlV,uBAAuB,EAAAmV,aAC5D7+D,KAAK85D,KAAKc,QAAQgE,iBAAiBlV,uBAAuB,EAAAmV,YAC1D7+D,KAAKs7D,UAAY,EAAA12B,cAAcwb,MAC1BpgD,KAAKs7D,UAAY,EAAA12B,cAAckb,OAMhD,IAAK,IAAIxiB,EAAc,EAAGC,EAAcv9B,KAAKinD,aAAanmD,OAAQw8B,EAAMC,IAAOD,EAE3E,GADiDt9B,KAAKinD,aAAa3pB,GAC3CwhC,cAAch+D,OAAS,EAE3C,YADAd,KAAKs7D,UAAY,EAAA12B,cAAckb,OAIvC,MAAMqa,EAAuCn6D,KAAKinD,aAAa,GACzDmT,EAAqCp6D,KAAKinD,aAAajnD,KAAKinD,aAAanmD,OAAS,GAIlFi+D,EAAwC5E,EAAgBjQ,sBAAsB,GAAGC,iBAAiBkU,cAExG,GAAIU,IADwC3E,EAAclQ,sBAAsB,GAAGC,iBAAiBkU,cAGhGr+D,KAAKs7D,UAAayD,IAAuB,EAAAT,kBAAkBl/B,GAAM,EAAAwF,cAAcwb,MAAQ,EAAAxb,cAAckb,UAClG,CAEH,IAAIkf,EAAa7E,EAAgBpiC,iBAAiBmE,WAAai+B,EAAgBpiC,iBAAiB+D,iBAAiB71B,EACnGk0D,EAAgBviC,cAAcG,iBAAiB+D,iBAAiB71B,EAC1Eg5D,EAAa7E,EAAcriC,iBAAiBqE,YAAcg+B,EAAcriC,iBAAiB+D,iBAAiB71B,EAChGm0D,EAAcxiC,cAAcG,iBAAiB+D,iBAAiB71B,EAExEjG,KAAKw6D,aACLwE,GAAM5E,EAAcriC,iBAAiB+D,iBAAiB71B,GAEtDjG,KAAK66D,WACLoE,GAAM7E,EAAcsB,iBAAiB3jC,iBAAiB+D,iBAAiB71B,GAI3E,MAAMi5D,GAA2E,EAAxD9f,EAAwB+f,qBAAqBH,EAAIC,GACpEG,EAAmBhgB,EAAwBigB,wBAAwBL,EAAIC,GAAM3gB,EAAUtV,YAGzFhpC,KAAKs7D,UADL8D,EAAWF,EACM,EAAAt6B,cAAckb,MACT,EAAAlb,cAAcwb,OAWxCub,mBAAmB1W,EAAiBv8C,EAAe41C,EAAsBc,GAC7E,MAAMic,EAAqB,GAC3B,IAAI5K,EAAqBrR,EAAwBkgB,uBAAuBra,EAAMh/C,EAAGq4C,EAAUmf,QAAQ38D,QAC/F68D,EAAmBve,EAAwBse,sBAAsBh1D,EAAIzC,EAAGq4C,EAAUmf,QAAQ38D,QAE1F2vD,EAAa,IACbA,EAAa,GAEbkN,GAAYrf,EAAUmf,QAAQ38D,SAC9B68D,EAAWrf,EAAUmf,QAAQ38D,OAAS,GAG1C,IAAK,IAAIL,EAAYgwD,EAAYhwD,EAAIk9D,EAAUl9D,IAAK,CAChD,MAAM8+D,EAAuBjhB,EAAUmf,QAAQh9D,GAE/C,GAAqB,IAAjB8+D,EAAoB,CACpB,MAAM1yC,EAAkB,IAAI,EAAAC,UAAU,GAAMrsB,GAAK2+C,EAAwBlX,aAAcq3B,GACvFlE,EAAO95D,KAAKsrB,IAIpB,OAAOwuC,EAUH4C,sBAAsBhZ,EAAiBv8C,EAAe41C,EAAsBc,GAChF,MAAMic,EAAqB,GAG3B,IAAI5K,EAAqBrR,EAAwBkgB,uBAAuBra,EAAMh/C,EAAGq4C,EAAU6f,WAAWr9D,QAClG68D,EAAmBve,EAAwBse,sBAAsBh1D,EAAIzC,EAAGq4C,EAAU6f,WAAWr9D,QAC7F2vD,EAAa,IACbA,EAAa,GAEbkN,GAAYrf,EAAU6f,WAAWr9D,SACjC68D,EAAWrf,EAAU6f,WAAWr9D,OAAS,GAG7C,IAAK,IAAIL,EAAYgwD,EAAYhwD,EAAIk9D,EAAUl9D,IAAK,CAChD,MAAM++D,EAA0BlhB,EAAU6f,WAAW19D,GAGrD,GAAwB,IAApB++D,EAAuB,CACvB,MAAM3yC,EAAkB,IAAI,EAAAC,UAAU,GAAMrsB,GAAK2+C,EAAwBlX,aAAcs3B,GACvFnE,EAAO95D,KAAKsrB,IAIpB,OAAOwuC,EASHkB,sBAAsBlB,EAAoBpW,EAAiBv8C,GAC/D,IAAI+2D,GAAiB7hC,OAAOC,UAC5B,MAAM53B,EAAYg/C,EAAMh/C,EAClBH,EAAYm/C,EAAMn/C,EAExB,IAAK,IAAIrF,EAAY,EAAGA,EAAI46D,EAAOv6D,OAAQL,IACnCgO,KAAKiF,IAAI2nD,EAAO56D,GAAGqF,EAAI83B,OAAOC,WAAa,MAAUpvB,KAAKiF,IAAI2nD,EAAO56D,GAAGqF,IAAM83B,OAAOC,WAAc,OAGvG4hC,EAAQhxD,KAAKN,IAAIsxD,GAAQpE,EAAO56D,GAAGqF,EAAIA,IAAMu1D,EAAO56D,GAAGwF,EAAIA,KAQ/D,OAJAw5D,EAAQhxD,KAAKN,IAAIsxD,EAAOhxD,KAAKiF,IAAIhL,EAAI5C,EAAIA,IAAM4C,EAAIzC,EAAIA,IAEvDw5D,EAAQhxD,KAAKC,IAAI+wD,EAAO,QAEjBA,EASHhD,uBAAuBpB,EAAoBpW,EAAiBv8C,GAChE,IAAI+2D,EAAgB7hC,OAAOC,UAC3B,MAAM53B,EAAYyC,EAAIzC,EAChBH,EAAY4C,EAAI5C,EAEtB,IAAK,IAAIrF,EAAY,EAAGA,EAAI46D,EAAOv6D,OAAQL,IACnCgO,KAAKiF,IAAI2nD,EAAO56D,GAAGqF,EAAI83B,OAAOC,WAAa,MAAUpvB,KAAKiF,IAAI2nD,EAAO56D,GAAGqF,IAAM83B,OAAOC,WAAc,OAGvG4hC,EAAQhxD,KAAKC,IAAI+wD,GAAQ35D,EAAIu1D,EAAO56D,GAAGqF,IAAMG,EAAIo1D,EAAO56D,GAAGwF,KAQ/D,OAJAw5D,EAAQhxD,KAAKC,IAAI+wD,GAAQ35D,EAAIm/C,EAAMn/C,IAAMG,EAAIg/C,EAAMh/C,IAEnDw5D,EAAQhxD,KAAKN,IAAIsxD,GAAQ,QAElBA,EAOHC,iBAAiBrE,GACrB,IAAIltD,GAAeyvB,OAAOC,UAE1B,IAAK,IAAIP,EAAc,EAAGC,EAAc89B,EAAOv6D,OAAQw8B,EAAMC,IAAOD,EAAK,CACrE,MAAMzQ,EAAkBwuC,EAAO/9B,GAC3B7uB,KAAKiF,IAAImZ,EAAM/mB,IAAM83B,OAAOC,WAAc,MAAUpvB,KAAKiF,IAAImZ,EAAM/mB,EAAI83B,OAAOC,WAAa,OAG/F1vB,EAAMM,KAAKN,IAAIA,EAAK0e,EAAM/mB,IAG9B,OAAOqI,EAUHkuD,4CAA4ChB,EAAoB7a,EAAgBya,EAAgBgB,GACpG,MAAMG,EAAgC,GACtC,IAAK,IAAI37D,EAAY,EAAGA,EAAI46D,EAAOv6D,OAAQL,IAAK,CAC5C,GAAIgO,KAAKiF,IAAI2nD,EAAO56D,GAAGqF,EAAI83B,OAAOC,WAAa,MAAUpvB,KAAKiF,IAAI2nD,EAAO56D,GAAGqF,IAAM83B,OAAOC,WAAc,KACnG,SAGJ,IAAIhR,EAAkB,IAAI,EAAAC,SAASuuC,EAAO56D,GAAGwF,EAAIu6C,IAAU6a,EAAO56D,GAAGqF,EAAIm1D,IACzEpuC,EAAQovC,EAAervC,qBAAqBC,GAC5CuvC,EAAkB76D,KAAKsrB,GAG3B,OAAOuvC,EAUH8B,4CAA4C7C,EAAoB7a,EAAgBya,EAAgBgB,GACpG,MAAMG,EAAgC,GACtC,IAAK,IAAI37D,EAAY,EAAGA,EAAI46D,EAAOv6D,OAAQL,IAAK,CAC5C,GAAIgO,KAAKiF,IAAI2nD,EAAO56D,GAAGqF,EAAI83B,OAAOC,WAAa,MAAUpvB,KAAKiF,IAAI2nD,EAAO56D,GAAGqF,IAAM83B,OAAOC,WAAc,KACnG,SAEJ,IAAIhR,EAAkB,IAAI,EAAAC,SAASuuC,EAAO56D,GAAGwF,EAAIu6C,EAAQ6a,EAAO56D,GAAGqF,EAAIm1D,GACvEpuC,EAAQovC,EAAervC,qBAAqBC,GAC5CuvC,EAAkB76D,KAAKsrB,GAG3B,OAAOuvC,EASHW,0BAA0Btc,EAAc4a,GAC5C,OAAsB,IAAlBA,EAAOv6D,OACA,EAIS2N,KAAKN,IAAI,EAAGnO,KAAK0/D,iBAAiBrE,IAEzC5a,EAUT6c,uBAAuB7c,EAAcyc,EAAoBC,EAClC9B,EAAoByB,EACpB7B,EAAgBC,GAE3C,IAAIyE,EAAuB3/D,KAAKk4B,MAAMiY,iBAClCyvB,EAA6B,EACjC,MAAMC,EAAsB7/D,KAAKk4B,MAAMoY,sCACjCwvB,EAAsB9/D,KAAKk4B,MAAMqY,sCAEnC2sB,EAAa2C,GAAepf,EAAOqf,IAEnCF,GAAsBnf,EAAO,GAAKzgD,KAAKk4B,MAAMkY,wCAC7CwvB,GAAsB,EAAK1C,EAAa,GAAKl9D,KAAKk4B,MAAMmY,wCAExDsvB,GAAgBC,GAmBpB,MAAMG,EAAsBtxD,KAAKC,IAAI,GAAKD,KAAKN,IAAI,GAAK,IAAM+uD,EAAa,GAAKyC,EAAelxD,KAAK8b,IAAI9b,KAAKN,IAAI2uD,EAAkB,KAAO,MACpIkD,EAAoBvxD,KAAKC,IAAI,GAAKD,KAAKN,IAAI,GAAK,KAAQgvD,EAAY,GAAKwC,EAAelxD,KAAK8b,IAAI9b,KAAKN,IAAI2uD,EAAkB,KAAO,MAEnIS,EAA8B,IAAI,EAAAzwC,SACxCywC,EAAkBt3D,EAAIw6C,EAAOsf,EAActxD,KAAK6d,IAAI4wC,EAAarD,EAAcoG,wBAC/E1C,EAAkBz3D,EAAI26C,EAAOsf,EAActxD,KAAK8d,IAAI2wC,EAAarD,EAAcoG,wBAE/E,MAAMzC,EAA4B,IAAI,EAAA1wC,SACtC0wC,EAAgBv3D,EAAIw6C,EAAQA,EAAOuf,EAAYvxD,KAAK6d,IAAI6wC,EAAWtD,EAAcoG,wBACjFzC,EAAgB13D,GAAM26C,EAAOuf,EAAYvxD,KAAK8d,IAAI4wC,EAAWtD,EAAcoG,wBAE3E,IAAIC,EAA4B3C,EAAkBz3D,EAAI03D,EAAgB13D,EACtE,KAAO9F,KAAKk4B,MAAMuY,kCACXhiC,KAAKiF,IAAIwsD,GAAqBlgE,KAAKk4B,MAAMuY,kCACxCyvB,EAAoB,GACpB3C,EAAkBz3D,GAAK,EACvB03D,EAAgB13D,GAAK,IAErBy3D,EAAkBz3D,GAAK,EACvB03D,EAAgB13D,GAAK,GAEzBo6D,EAAoB3C,EAAkBz3D,EAAI03D,EAAgB13D,EAE9D,MAAO,CAACy3D,kBAAmBA,EAAmBC,gBAAiBA,GAW3DJ,gBAAgBjC,EAAkBmB,EAAwBE,EAAsBpB,GAKpF,IAAI+E,EAA+B1xD,KAAKqtD,KAAKQ,GAAkBzC,EAAcoG,uBACzE3D,EAAiB,EACjB6D,GAJkB,GAMlBA,GANkB,GAStB,IAAIC,EAA6B3xD,KAAKqtD,KAAKU,GAAgB3C,EAAcoG,uBAUzE,OATIzD,EAAe,EACf4D,GAXkB,GAalBA,GAbkB,GAmBf,CAAC,WAFkB3xD,KAAKC,IAAID,KAAKN,IAAIgtD,EAAUgF,GAAuB/E,GAE5C,SADN3sD,KAAKN,IAAIM,KAAKC,KAAKysD,EAAUiF,IAAsBhF,KAx7BtF,kBA47BmB,EAAA6E,uBAAiCxxD,KAAK4xD,GAAK,+GC38B9D,gBACA,UAOA,UAOA,UAEA,UAQA,MAAsBC,UAA4B,EAAA/oC,gBAC9ClgB,YAAYugB,EAAiCgxB,EAAgD8S,GACzF/jC,QAiBG,KAAA4oC,yBAA4D,GAU5D,KAAAC,mBAAqCl6C,EACrC,KAAAm6C,eAAyB,EAExB,KAAAC,sBAAwD,GACzD,KAAAC,KAAc,GACb,KAAAC,cAAgC,GAChC,KAAAC,cAAuC,GAhC3C7gE,KAAK43B,cAAgBA,EACrB53B,KAAKkqD,sBAAwB,GAC7BlqD,KAAK4oD,iBAAmBA,EACpB8S,GACA17D,KAAK07D,iBAAmBA,EACxB17D,KAAK8gE,wBAA0BpF,EAAiBoF,wBAChD9gE,KAAK+3B,iBAAmB,IAAI,EAAAD,YAAY93B,KAAM07D,EAAiB3jC,mBAE/D/3B,KAAK+3B,iBAAmB,IAAI,EAAAD,YAAY93B,KAAM43B,EAAcG,kBAE5D6wB,IACA5oD,KAAKyoD,sBAAwBG,EAAiB8O,WAElD13D,KAAK+gE,iBAAmB,GAsBjBC,4BACP,OAAOhhE,KAAK0gE,sBAGLO,oBACP,OAAOjhE,KAAK4gE,cAGL9B,oBACP,OAAO9+D,KAAK6gE,cAGL/B,kBAAclsD,GACrB5S,KAAK6gE,cAAgBjuD,EAOlBk2C,uBACH,MAAMr3C,EAAmBzR,KAAK43B,cAAc6rB,oBAAoB8M,kBAAkBhnD,QAIlF,OAHIvJ,KAAKyoD,uBACLh3C,EAAOqY,IAAI9pB,KAAKyoD,uBAEbh3C,EAQJyvD,6BAA6BC,GAChC,IAAK,MAAMlX,KAAOjqD,KAAKkqD,sBACnB,IAAK,MAAMzwB,KAAiBwwB,EAAIG,MAAO,CACnC,MAAMh7B,EAAaqK,EAAc2+B,WACjC,IAAKhpC,EAAKgyC,UACHhyC,EAAKX,MAAMqD,kBAAoBqvC,EAAQ1yC,MAAMqD,iBAC7C1C,EAAKX,MAAMoD,SAAWsvC,EAAQ1yC,MAAMoD,QACpCzC,EAAK05B,uBAAuB99B,OAAOm2C,EAAQrY,wBAC9C,OAAOrvB,GAahBihC,gDAAgDyG,EAAerH,GAClE,GAAKqH,EAGL,IAAK,MAAMlX,KAAOjqD,KAAKkqD,sBACnB,GAAID,EAAIE,mBAAqBgX,EAAQvC,iBAGrC,IAAK,MAAMnlC,KAAiBwwB,EAAIG,MAAO,CACnC,MAAMh7B,EAAaqK,EAAc2+B,WACjC,GAAIhpC,EAAKiyC,UAA6C,IAAlCjyC,EAAKkyC,UAAUt/D,QAAQ83D,GACvC,OAAOrgC,GAOhBghC,+BAA+B8G,GAClC,GAAKA,EAGL,IAAK,MAAMtX,KAAOjqD,KAAKkqD,sBACnB,GAAID,EAAIE,mBAAqBoX,EAAU3C,iBAGvC,IAAK,MAAMnlC,KAAiBwwB,EAAIG,MAC5B,GAAI3wB,EAAc2+B,aAAemJ,EAC7B,OAAO9nC,EAOhB6gC,0BAA0BlrC,GAC7B,GAAKA,EAGL,IAAK,MAAM66B,KAAOjqD,KAAKkqD,sBACnB,GAAID,EAAIE,mBAAqB/6B,EAAKwvC,iBAGlC,IAAK,MAAMnlC,KAAiBwwB,EAAIG,MAC5B,GAAI3wB,EAAc2+B,aAAehpC,GAAQpvB,KAAK8oD,uBAAuB99B,OAAOoE,EAAK05B,wBAC7E,OAAOrvB,EAOhB+nC,kCAAkCzX,GACrC,IAAK,MAAME,KAAOjqD,KAAKkqD,sBACnB,GAAID,EAAIE,iBAAiBT,cAAgBK,EAGzC,OAAOE,EAAIG,MAAM,GAAGC,oBAExB,OAAO,IAAI,EAAArhC,SAAS,EAAG,GAQpBy4C,6BAA6BhY,GAChC,IAAK,MAAMQ,KAAOjqD,KAAKkqD,sBACnB,GAAID,EAAIE,mBAAqBV,EACzB,OAAOQ,EAAIG,MAWhBsX,mCAAmCjY,GACtC,GAAIzpD,KAAK4oD,iBAAiB+Y,KACtB,IAAK,IAAIrkC,EAAc,EAAGC,EAAcv9B,KAAK4oD,iBAAiB+Y,KAAKC,iBAAiB9gE,OAAQw8B,EAAMC,IAAOD,EAAK,CAC1G,MAAMukC,EAA2B7hE,KAAK4oD,iBAAiB+Y,KAAKC,iBAAiBtkC,GAC7E,IAAiD,IAA7CukC,EAAOrY,aAAaxnD,QAAQynD,IAAsBoY,IAAW7hE,KAAK4oD,iBAClE,OAAO,EAInB,OAAO,EAOJK,8BACH,IAAI6Y,EAAsB,IAAI,EAAA94C,SAAS4U,OAAOC,UAAW,GACzD,IAAK,MAAMosB,KAAOjqD,KAAKkqD,sBACnB,IAAK,MAAMzwB,KAAiBwwB,EAAIG,MAAO,CACnC,MAAM2X,EAAuBtoC,EAAc4wB,oBACvC0X,EAAW52C,GAAG22C,IAAcC,EAAW73C,uBAAyB,IAChE43C,EAAYC,GAIxB,OAAOD,EAGJ7J,8BACH,IAAIF,EAAsB,IAAI,EAAA/uC,SAAS,EAAG,GAC1C,IAAK,MAAMihC,KAAOjqD,KAAKkqD,sBACnB,IAAK,MAAMzwB,KAAiBwwB,EAAIG,MAAO,CACnC,MAAM2X,EAAuBtoC,EAAc4wB,oBACvC0N,EAAU5sC,GAAG42C,IAAgBA,EAAW73C,uBAAyB,IACjE6tC,EAAYgK,GAIxB,OAAOhK,EAQJiK,gCAAgCvY,GACnC,IAAK,MAAMQ,KAAOjqD,KAAKkqD,sBACnB,GAAID,EAAIE,mBAAqBV,EACzB,OAAOQ,EAIf,MAAMgY,EAA2C,EAAAloC,qBAAqBC,cAAckoC,iBAAiBzY,EAAYzpD,MAGjH,OAFAA,KAAKkqD,sBAAsB3oD,KAAK0gE,GAEzBA,EAQJE,iDAAiD1oC,GACpD,IAAK,MAAMwwB,KAAOjqD,KAAKkqD,sBACnB,GAAID,IAAQxwB,EAAc0wB,iBACtB,OAAOF,EAIf,MAAMgY,EAA2C,EAAAloC,qBAAqBC,cAAckoC,iBAAiBzoC,EAAc2+B,WAAWwG,iBAAkB5+D,MAGhJ,OAFAA,KAAKkqD,sBAAsB3oD,KAAK0gE,GAEzBA,EAUJG,yCAAyCnY,EAA0BxwB,GACtE,MAAM4oC,EAAkCpY,EAAIG,MAC5C,GAA8B,IAA1BiY,EAAevhE,QACf24B,EAAc1B,iBAAiB+D,iBAAiBh2B,EAAI,EAAAqqD,eAAentC,KAAKq/C,GAAgBtqC,iBAAiB+D,iBAAiBh2B,EAC1Hu8D,EAAe9gE,KAAKk4B,QAEpB,IAAK,IAAIh5B,EAAY4hE,EAAevhE,OAAS,EAAGL,GAAK,EAAGA,IAAK,CACzD,GAAI4hE,EAAe5hE,GAAGs3B,iBAAiB+D,iBAAiBh2B,EAAI2zB,EAAc1B,iBAAiB+D,iBAAiBh2B,EAAG,CAC3Gu8D,EAAej9C,OAAO3kB,EAAI,EAAG,EAAGg5B,GAChC,MAEJ,GAAU,IAANh5B,EAAS,CACT4hE,EAAej9C,OAAO,EAAG,EAAGqU,GAC5B,QASTotB,eAEH,IAAK,MAAMoD,KAAOjqD,KAAKkqD,sBACnB,IAAK,MAAMzwB,KAAiBwwB,EAAIG,MAE5B,IADmB3wB,EAAc2+B,WACvBgJ,SACN,OAAO,EAInB,OAT8B,EAY3BkB,sBACH,MAAMC,EAAiE,QAAlB,EAAAviE,KAAK43B,qBAAa,eAAEU,gBAAgB+mB,wBACzF,IAAKkjB,EACD,OAEJ,MAAOtd,EAAOv8C,GAAO1I,KAAKwiE,yBAC1B,OAAOD,EAAoBpD,qBAAqBla,EAAOv8C,GAIpD+5D,qBAEH,OADsBziE,KAAK43B,cAAcU,gBAAgBP,iBAAiB8D,iBAAiB/1B,EAC5E9F,KAAKsiE,gBAIjBI,oBAEH,OADsB1iE,KAAK43B,cAAcU,gBAAgBP,iBAAiB8D,iBAAiB/1B,EAC5E9F,KAAK2iE,mBAGjBA,yBACH,MAAMJ,EAAiE,QAAlB,EAAAviE,KAAK43B,qBAAa,eAAEU,gBAAgB+mB,wBACzF,IAAKkjB,EACD,OAEJ,MAAOtd,EAAOv8C,GAAO1I,KAAKwiE,yBAC1B,OAAOD,EAAoBlD,wBAAwBpa,EAAOv8C,GAGvD85D,yBACH,IAAIvd,EAAgBjlD,KAAK+3B,iBAAiB8D,iBAAiB51B,EAG3D,OAFAg/C,GAASjlD,KAAK43B,cAAcU,gBAAgBP,iBAAiB8D,iBAAiB51B,EAEvE,CAACg/C,EADYA,EAAQjlD,KAAK+3B,iBAAiBhE,KAAKH,QAtU/D,qIClBA,gCAGIvc,YAAYurD,GADJ,KAAAC,4BAAqD,GAEzD7iE,KAAK4iE,eAAiBA,EACtB5iE,KAAKomD,aAEE0c,wBACP,OAAO9iE,KAAK4iE,eAELG,kCACP,OAAO/iE,KAAK6iE,4BAELE,gCAA4BnwD,GACnC5S,KAAK6iE,4BAA8BjwD,EAEhC2zC,WACH,IAAK,IAAI9lD,EAAY,EAAGA,EAAIT,KAAK6iE,4BAA4B/hE,OAAQL,IACjE,IAAKT,KAAK6iE,4BAA4BpiE,GAClC,OAAO,EAGf,OAAO,EAQJuiE,oCAAoCzd,GACvC,IAAuE,IAAnEvlD,KAAK6iE,4BAA4B7gE,QAAQujD,GAA6B,CACtE,MAAM6E,EAAyB,GAC/B,IAAK,IAAI9sB,EAAc,EAAGC,EAAcv9B,KAAK6iE,4BAA4B/hE,OAAQw8B,EAAMC,IAAOD,EAAK,CAC/F,MAAM2lC,EAAiDjjE,KAAK6iE,4BAA4BvlC,GACxF,IAAK,MAAM2sB,KAAOgZ,EAA0B/Y,sBACxC,IAAK,MAAMzwB,KAAiBwwB,EAAIG,MACxB3wB,EAAc2+B,WAAW8K,iBAAiBvB,MACvCloC,EAAc2+B,WAAWwG,mBAAqB5+D,KAAK4iE,eAAeO,eACrE/Y,EAAM7oD,KAAKk4B,GAK3B,OAAO2wB,GAIPhE,aACJ,IAAK,IAAI9oB,EAAc,EAAGC,EAAcv9B,KAAK4iE,eAAehB,iBAAiB9gE,OAAQw8B,EAAMC,IAAOD,EAC9Ft9B,KAAK6iE,4BAA4BthE,UAAK+kB,uGClDlD,qBAMIjP,YAAY+rD,EAAUne,EAAkCv8C,GACpD1I,KAAKojE,IAAMA,EACXpjE,KAAKqjE,UAAYpe,EACjBjlD,KAAKsjE,QAAU56D,EAGR66D,iBACP,OAAQvjE,KAAKwjE,MAAcnuC,aAAa,MAGjCouC,aACP,OAAOzjE,KAAKojE,IAEL7I,gBACP,OAAOv6D,KAAKqjE,UAELK,UACP,OAAO1jE,KAAKojE,IAEL7I,cAAU3nD,GACjB5S,KAAKqjE,UAAYzwD,EAEVgoD,cACP,OAAO56D,KAAKsjE,QAEL1I,YAAQhoD,GACf5S,KAAKsjE,QAAU1wD,gNCrCvB,gBACA,UAGA,aAGA,MAAa+wD,UAAmC,EAAArsC,4BAG5CjgB,YAAYinC,EAAsBjmB,EAAuBijC,EAA0B5jC,EACvEksC,GACRjsC,MAAM2mB,EAAW,IAAI,EAAAulB,mBAAmBvI,GAAY5jC,GACpD13B,KAAKq4B,MAAQA,EACbr4B,KAAK4jE,sBAAwBA,EAG1BzkB,sBAEH,MAAMC,EAAmDp/C,KAAKg4B,gBAAgBqnB,wBACxEC,EAAet/C,KAAKq4B,MAAMN,iBAAiB+D,iBAAiB71B,EAAIjG,KAAKq4B,MAAMN,iBAAiBwE,iBAC5FgjB,EAAgBv/C,KAAKq4B,MAAMN,iBAAiB+D,iBAAiB71B,EAAIjG,KAAKq4B,MAAMN,iBAAiB0E,kBACnG,OAAQz8B,KAAKw4B,WACT,KAAK,EAAAoM,cAAckb,MACf,MAAMgkB,EAAsB9jE,KAAKq4B,MAAMN,iBAAiB2E,gBAAkB18B,KAAKq4B,MAAMN,iBAAiB+D,iBAAiBh2B,EACvHs5C,EAAwBY,qBAAqBV,EAAMC,EAAOukB,GAC1D,MACJ,KAAK,EAAAl/B,cAAcwb,MACf,MAAM2jB,EAAsB/jE,KAAKq4B,MAAMN,iBAAiB4E,mBAAqB38B,KAAKq4B,MAAMN,iBAAiB+D,iBAAiBh2B,EAC1Hs5C,EAAwBiB,wBAAwBf,EAAMC,EAAOwkB,GAC7D,MACJ,QACI,UAAIp7D,MAAM,yDAzB1B,0ICVA,gBAEA,UAIA,UAKA,MAAakqD,UAA4B,EAAAt7B,gBACrClgB,YAAY8yC,EAA8B2I,GACtCn7B,QACA33B,KAAKmqD,iBAAmBA,EACxBnqD,KAAK8yD,iBAAmBA,EACxB9yD,KAAK+3B,iBAAmB,IAAI,EAAAD,YAAY93B,KAAM8yD,EAAmBA,EAAiB/6B,sBAAmBzR,GAAW,GAChHtmB,KAAKoqD,MAAQ,GACbpqD,KAAKk4B,MAAQ46B,EACGA,EAAiBl7B,cAAc6rB,oBAAoB7b,MAAQ,IAAI,EAAApJ,eAe5EwlC,OAKH,OAJAhkE,KAAKoqD,MAAM4Z,MAAK,CAAC9jE,EAAG0F,iBAChB,OAAyC,QAAjC,EAAkB,QAAlB,EAAAA,EAAEwyD,WAAW3pC,aAAK,eAAE0D,qBAAa,QAAI,IAAuC,QAAjC,EAAkB,QAAlB,EAAAjyB,EAAEk4D,WAAW3pC,aAAK,eAAE0D,qBAAa,QAAI,MAGrFnyB,KAAKoqD,MAQT6Z,iBAIH,OAHAjkE,KAAKoqD,MAAM4Z,MAAK,CAAC9jE,EAAG0F,eAChB,OAAyC,QAAjC,EAAkB,QAAlB,EAAA1F,EAAEk4D,WAAW3pC,aAAK,eAAE0D,qBAAa,QAAI,IAAsC,QAAhC,EAAAvsB,EAAEwyD,WAAW3pC,MAAM0D,qBAAa,QAAI,MAEpFnyB,KAAKoqD,MAaThR,UArDX,0SCTA,gBAGA,UACA,UAGA,SAMA,UACA,SASA,UAGA,UACA,UAGA,UACA,UAEA,UAIA,UACA,UAIA,UACA,UACA,SAGA,aACA,UAGA,UACA,UAEA,SAEA,UAEA,UACA,UACA,SAIA,UACA,SACA,QAEA,UAMA,MAAsBrf,EAAtB,cAMc,KAAAmqC,8BAAuD,GACvD,KAAAC,0BAAmD,GACnD,KAAAC,6BAAsD,GACtD,KAAAC,yBAAwC,GAExC,KAAAC,oBAA4C,GAM9C,KAAAC,mCAA6C,4BAk6F3C,KAAAC,qBAAiD,IAAIC,IAh6F7ChgB,0BACd,OAAO1qB,EAAqB2qC,aAGdjgB,wBAAa7xC,GAC3BmnB,EAAqB2qC,aAAe9xD,EAG1By5C,gBACV,OAAOrsD,KAAK6tD,oBAAoBD,UAG1BtkC,uCAAuC6lC,EAA8BwV,GAC3E,IAAK,IAAIrnC,EAAc,EAAGC,EAAc4xB,EAASruD,OAAQw8B,EAAMC,IAAOD,EAAK,CACvE,MAAM5F,EAA4By3B,EAAS7xB,GACvC5F,IACAA,EAAQitC,yBAA2BA,IAKxCve,WAAWyH,GACd7tD,KAAK6tD,oBAAsBA,EAC3B7tD,KAAKk4B,MAAQ21B,EAAoBtB,iBAAiB3kB,MAClD5nC,KAAKk4B,MAAM8hB,yBACXh6C,KAAK4kE,6BAQFA,6BAIH,MAAM7Y,EAAyB/rD,KAAK6tD,oBAAoBtB,iBAExDvsD,KAAKkkE,8BAAgC,GACrClkE,KAAKmkE,0BAA4B,GACjCnkE,KAAKokE,6BAA+B,GACpCpkE,KAAKqkE,yBAA2B,GAGhCrkE,KAAK6tD,oBAAoBE,aACzB,MAAM7B,EAAoClsD,KAAK6tD,oBAAoBnB,YAG7DmY,EAAgD7kE,KAAK8kE,8BAGrDvV,EAAiCvvD,KAAK6tD,oBAAoByB,wBAG1DyV,EAA0B,GAE1BC,EAAiCjZ,EAAWkZ,4BAG5CC,EAAwC,GAG9C,IAAK,IAAIzkE,EAAY,EAAGA,EAAIukE,EAAwBvkE,IAChDykE,EAAiB3jE,UAAK+kB,GAI1B,IAAK,IAAIgX,EAAc,EAAGC,EAAcwuB,EAAWoZ,eAAerkE,OAAQw8B,EAAMC,IAAOD,EAAK,CACxF,MAAMytB,EAA+BgB,EAAWoZ,eAAe7nC,GACzD2xB,EAAwCjvD,KAAKolE,wCAC/Cra,EACA8Z,EACAE,EACAG,EACA3V,GAGJ,GADArD,EAAY3qD,KAAK0tD,GACblE,EAAcsa,qBAAuB,GAAKrlE,KAAKk4B,MAAMoe,2BAA4B,CAEjFyU,EAAcua,sBAAuB,EACrCva,EAAcwa,0BAA4B,EAC1C,MAAMC,EAAyBza,EAAcsa,qBAAuB,EAEpE/nC,GAAOkoC,EACP,IAAK,IAAIlc,EAAe,EAAGA,GAAQkc,EAAgBlc,IAAQ,CACvD,MAAMmc,EAAmC1Z,EAAWoZ,eAAepa,EAAclL,cAAgB,EAAIyJ,GAErGmc,EAAkBF,0BAA4Bjc,EAAO,EACrDmc,EAAkBH,sBAAuB,EACzCpZ,EAAY3qD,KAAK,MAAC+kB,MAO9B,GAAItmB,KAAKk4B,MAAMqe,iDAAmDv2C,KAAKk4B,MAAMoe,2BAA4B,CAErG,IAAIovB,EACAC,EAAyB,EAE7B,IAAK,IAAIroC,EAAc,EAAGC,EAAcwuB,EAAWoZ,eAAerkE,OAAQw8B,EAAMC,IAAOD,EAAK,CACxF,MAAMytB,EAA+BgB,EAAWoZ,eAAe7nC,GAE/D,IAAKytB,EAAcua,sBAAwBva,EAAc6a,0BAErD,GAAID,EAAiB,EAAG,CACpBD,EAAsBJ,sBAAuB,EAC7CI,EAAsBH,0BAA4B,EAClDI,IACA5a,EAAcwa,0BAA4BI,EAC1C5a,EAAcua,sBAAuB,EAErC,IAAK,IAAIhc,EAAe,EAAGA,EAAO4C,EAAY5uB,GAAKx8B,OAAQwoD,IACvD4C,EAAY5uB,GAAKgsB,QAAQhjC,OAG7Bo/C,EAAwB3a,EACxB4a,EAAiB,OAGrB,GAAIA,EAAiB,EAAG,CACpBD,EAAsBL,qBAAuBM,EAE7C,MAAM1W,EAAwCjvD,KAAKolE,wCAC/CM,EACAb,EACAE,EACAG,EACA3V,GAEJrD,EAAYwZ,EAAsBG,kBAAoB5W,EACtD0W,EAAiB,EACjBD,OAAwBp/C,OAExBq/C,EAAiB,EACjBD,OAAwBp/C,EAKpC,GAAIq/C,EAAiB,EAAG,CACpBD,EAAsBL,qBAAuBM,EAC7CD,EAAsBJ,sBAAuB,EAE7C,MAAMrW,EAAwCjvD,KAAKolE,wCAC/CM,EACAb,EACAE,EACAG,EACA3V,GAEJrD,EAAYwZ,EAAsBG,kBAAoB5W,EACtD0W,EAAiB,EACjBD,OAAwBp/C,GAIhC,MAAMw/C,EACUvW,EAAYwW,KAAIre,GAASA,EAAKse,WAAa,EAAAC,SAASC,aAEpElmE,KAAKmmE,mBAAmBL,GACxB9lE,KAAKomE,kCACLpmE,KAAKqmE,0CAMFpY,YACHjuD,KAAKurD,aAAe,GAEpBvrD,KAAKsmE,0BAGLtmE,KAAKumE,wBAILvmE,KAAKwmE,sBAGLxmE,KAAKymE,mCACLzmE,KAAK0mE,iBAAiB1mE,KAAK6tD,oBAAqB7tD,KAAK2mE,2BAGrD3mE,KAAK6tD,oBAAoBpB,WAAW3rD,OAAS,EAG7Cd,KAAK4mE,wBAML,EAAAC,oBAAoBC,oCAAoC9mE,KAAK6tD,qBAG1D6Y,iBAAiB7Y,EAA0C8Y,GAO9D,GAAI3mE,KAAK6tD,oBAAoBnB,YAAY5rD,OAAS,EAAG,CAEjD,IAAIquD,EAA+BnvD,KAAK6tD,oBAAoBnB,YAAY,GACpEiY,EAAmC3kE,KAAK+mE,wBAAwB5X,GACpEwV,EAA2B3kE,KAAKgnE,sCAAsC7X,EAAUwV,GAChF5qC,EAAqBktC,gCAAgC9X,EAAUwV,GAE/D,IAAK,IAAIlkE,EAAY,EAAGA,EAAIT,KAAK6tD,oBAAoBnB,YAAY5rD,OAAQL,IACrE0uD,EAAWnvD,KAAK6tD,oBAAoBnB,YAAYjsD,GAChDkkE,EAA2B3kE,KAAK+mE,wBAAwB5X,GACxDwV,EAA2B3kE,KAAKgnE,sCAAsC7X,EAAUwV,GAChF5qC,EAAqBktC,gCAAgC9X,EAAUwV,IAOpEqC,sCAAsCE,EAAsCC,GAC/E,MAAM,IAAIzmE,MAAMV,KAAKukE,oCAGf6C,iBACN,MAAM,IAAI1mE,MAAMV,KAAKukE,oCAQfwC,wBAAwB5X,GAC9B,MAAM,IAAIzuD,MAAMV,KAAKukE,oCAMf8C,gCACN,MAAM,IAAI3mE,MAAMV,KAAKukE,oCAGf+C,WAAW7tC,EAA8B8tC,EAAYC,GAC3D,MAAM,IAAI9mE,MAAMV,KAAKukE,oCAcfkD,wBAAwBC,EAAkCC,EAAerP,EACjDsP,EAA8BriB,EAA0CyD,EACxE6e,EAAcC,GAC5C,MAAM,IAAIpnE,MAAMV,KAAKukE,oCAGfwD,uBAAuBte,EAAwBlE,EACxByiB,GAC7B,MAAM,IAAItnE,MAAMV,KAAKukE,oCAGf0D,0BAA0BC,EAAsCze,EACtClE,GAChC,MAAM,IAAI7kD,MAAMV,KAAKukE,oCAGf4D,8BAA8BC,EACA3e,EACAJ,GACpC,MAAM,IAAI3oD,MAAMV,KAAKukE,oCASf8D,sCAAsCC,EACA7e,EAAwBJ,GACpE,MAAM,IAAI3oD,MAAMV,KAAKukE,oCAIfgE,aAAa9uC,EAA8B+uC,EAAgBC,GACjE,MAAM,IAAI/nE,MAAMV,KAAKukE,oCAGfmE,iBAAiBjf,EAAwB4Y,EACxB9c,EAA0CojB,GACjE,MAAM,IAAIjoE,MAAMV,KAAKukE,oCAGfqE,iBAAiBrjB,GACvB,MAAM,IAAI7kD,MAAMV,KAAKukE,oCAGfsE,mBAAmBzF,EAAU0F,EAA+BC,EAA6B1F,EACtEC,GACzB,MAAM,IAAI5iE,MAAMV,KAAKukE,oCAGfyE,uBAAuB1qB,GAC7B,MAAM,IAAI59C,MAAMV,KAAKukE,oCAOf0E,gCAAgCC,GACtC,MAAM5qB,EAAuB4qB,EAAYpT,WAAW,GACpD,IAAKxX,IAAcA,EAAU6qB,SAAS,GAElC,YADA,UAAI3pB,KAAK,oEAAsE0pB,EAAYE,IAG/F,IAAIC,EAAgC/qB,EAAU6qB,SAAS,GAAGtpB,cACtDypB,EAAuB,EAC3B,IAAK,IAAI7oE,EAAY,EAAGA,EAAI69C,EAAU6qB,SAASroE,OAAQL,IAAK,CACxD,GAAIT,KAAKk4B,MAAMge,uCAAyCz1C,EAAI,EACxD,OAEJ,MAAMi3B,EAA4B4mB,EAAU6qB,SAAS1oE,GACvB,IAA1Bi3B,EAAQmoB,eAAiD,IAA1BnoB,EAAQmoB,gBACvCwpB,EAAwB3xC,EAAQmoB,eAIhCypB,EADA5xC,IAAY4mB,EAAU6qB,SAAS,IAAMnpE,KAAKk4B,MAAMyW,0BACjC3uC,KAAKk4B,MAAMyW,0BAEX,EAGnB,MAAM46B,EAA0CvpE,KAAKk4B,MAAMie,sBAC7B,IAA1Bze,EAAQmoB,eAAiF,IAA1DnoB,EAAQ+rB,oBAAoB+lB,4BAC1D9xC,EAAQmoB,gBAAkBwpB,GAC3B3xC,EAAQmoB,eAAiBwpB,EAAwBrpE,KAAKk4B,MAAMwW,4BAC3DhX,EAAQ+rB,oBAAoBgmB,iBAC7BF,MAC8B,IAA1B7xC,EAAQmoB,eACmB,IAA1BnoB,EAAQmoB,eAAuBnoB,IAAY4mB,EAAU6qB,SAAS,IAC/DI,IAEAvpE,KAAK0pE,sCAAsChyC,EAAS4mB,EAAW4qB,EAAaI,GAEhFD,EAAwB3xC,EAAQmoB,gBAWpC6pB,sCAAsChyC,EAA2B4mB,EAAsB4qB,EACjDI,EAAuB,GACjE,MAAMK,EAAsBjyC,EAAQ+rB,oBAAoB+lB,0BAA0Bx9D,WAC5EqsB,EAAe,IAAI,EAAAD,MAAMuxC,GAEzB9rB,EAAiC,IAAI,EAAAD,eAAevlB,EAAOr4B,KAAKk4B,MAAMuW,yBAClB,EAAAta,kBAAkBI,WAAYv0B,KAAKk4B,OAEvFknB,EAAmDd,EAAUe,wBAGnExB,EAAemG,kCACfnG,EAAe9lB,iBAAiBY,OAASuwC,EAAYnxC,iBAGrD,MAAM6xC,EAAoBtrB,EAAUvmB,iBAAiB+D,iBAAiB71B,EAClEyxB,EAAQK,iBAAiB+D,iBAAiB71B,EAAI43C,EAAe9lB,iBAAiBwE,iBAC9E+sC,EACJ,IAAIO,EAGA5kB,EAAgB2kB,EAChBlhE,EAAckhE,EAAY/rB,EAAe9lB,iBAAiBmE,WAAa2hB,EAAe9lB,iBAAiBqE,YAE3G6oB,GAAS3G,EAAUvmB,iBAAiB+D,iBAAiB71B,EACrDyC,GAAO41C,EAAUvmB,iBAAiB+D,iBAAiB71B,EAGnD,MAAM6jE,EAA8B7kB,EAAQ,GACtC8kB,EAA4BrhE,EAAM,GAGlCshE,EAA0B5qB,EAAwB+f,qBAAqB2K,EAAqBC,GAElG,GAAIryC,IAAY4mB,EAAU6qB,SAAS,GAAI,CAEnC,IAAIc,EAA8B,EAClC,GAAIf,EAAYgB,cAAcppE,OAAS,EACnC,IAAK,MAAMqpE,KAAgBjB,EAAYgB,cACnCD,EAAsBx7D,KAAKC,IAAIu7D,EAAqBE,EAAapyC,iBAAiBsE,WAG1FwtC,EAAYp7D,KAAKC,IAAIs7D,EAAiBC,QAEtCJ,EAAYG,EAGhBH,EAAYp7D,KAAKC,IAAI,EAAGm7D,GAExBhsB,EAAe9lB,iBAAiB+D,iBAAmB,IAAI,EAAAhP,SAAS88C,EAAWC,GAC3EX,EAAYkB,oBAAoB7oE,KAAKs8C,GAGjCwsB,8BAA8BnB,GAClC,MAAM5qB,EAAuB4qB,EAAYpT,WAAW,GACpD,IAAI,MAAMwU,KAAsBpB,EAAYkB,oBAAqB,CAE7D,IAAInlB,EAAgBqlB,EAAmBvyC,iBAAiB+D,iBAAiB71B,EACrEyC,EAAcu8C,EAAQqlB,EAAmBvyC,iBAAiBmE,WAAaouC,EAAmBvyC,iBAAiBqE,YAC/G6oB,GAAS3G,EAAUvmB,iBAAiB+D,iBAAiB71B,EACrDyC,GAAO41C,EAAUvmB,iBAAiB+D,iBAAiB71B,EACnDq4C,EAAUe,wBAAwBW,qBAAqBiF,EAAOv8C,EAC1D4hE,EAAmBvyC,iBAAiB+D,iBAAiBh2B,EAAIwkE,EAAmBvyC,iBAAiB2E,kBAS/F6tC,mBAAmBnH,EAAmBoH,EAA6BC,GACzE,MAAM,IAAI/pE,MAAMV,KAAKukE,oCAQfmG,uCAAuCpsB,EAAsBqsB,GACnE,IAAIC,EAAyB,EACzBC,EAA+B7qE,KAAKk4B,MAAM8Q,YAC9C,MAAM8hC,EAAgD,GAChD1rB,EAAmDd,EAAUe,wBAGnE,IAAI9hB,EAAc+gB,EAAU6qB,SAASroE,OACrC,IAAK,IAAIw8B,EAAc,EAAGA,EAAMC,IAAOD,EAAK,CACxC,MAAM5F,EAA4B4mB,EAAU6qB,SAAS7rC,GAC/CytC,EAAoCrzC,EAAQK,iBAAiB+D,iBAC7DytB,EAAe7xB,EAAQuvB,aAAanmD,OAC1C,IAAK,IAAIwoD,EAAe,EAAGA,EAAOC,IAAQD,EAAM,CAC5C,MAAMD,EAAkC3xB,EAAQuvB,aAAaqC,GAC7D,GAAID,EAAWyV,cAAch+D,OAAS,EAAG,CACrCgqE,EAAuBvpE,KAAK8nD,GAC5BuhB,EAAiBn8D,KAAKN,IAAIy8D,EAAgBvhB,EAAWyV,cAAch+D,QAGnE,MAAMkqE,EAA8B3hB,EAAWtxB,iBAAiB+D,iBAAiB71B,EAC7E8kE,EAAwB9kE,EAE5B,IAAIi4B,EAAwBN,OAAOC,UAC/BM,EAAyBP,OAAOG,UAGpC,IAAK,IAAIt9B,EAAY,EAAGA,EAAI4oD,EAAWyV,cAAch+D,OAAQL,IAAK,CAC9D,MAAMwqE,EAAmC5hB,EAAWyV,cAAcr+D,GAAGm9C,eACrE1f,EAAgBzvB,KAAKC,IAAIwvB,EAAe8sC,EAAsBC,EAAiBlzC,iBAAiBwE,kBAChG4B,EAAiB1vB,KAAKN,IAAIgwB,EAAgB6sC,EAAsBC,EAAiBlzC,iBAAiB0E,mBAItG,MAAMyuC,EAAwB9rB,EAAwBigB,wBAAwBnhC,EAAeC,GAC7F0sC,EAAuBp8D,KAAKN,IAAI08D,EAAsBK,KAKlE,IAAIC,EAAsB,EAE1B5tC,EAAMutC,EAAuBhqE,OAC7B,IAAK,MAAMuoD,KAAcyhB,EAErB,IAAK,IAAIrqE,EAAY,EAAGA,EAAI4oD,EAAWyV,cAAch+D,OAAQL,IAAK,CAC9D,MAAM2qE,EAAkC/hB,EAAWyV,cAAcr+D,GAC3DwqE,EAAmCG,EAAWxtB,eAI9CytB,EAAsBD,EAAWtlB,YAAYwlB,YAC7CC,EAAsCZ,EAAkB3oE,QAAQqpE,GAKtE,IAAIvsC,EAJ0B+rC,EAAuB7qE,KAAKk4B,MAAM+Y,aAAejxC,KAAKk4B,MAAMiZ,8BACtFnxC,KAAKk4B,MAAMgZ,4BAGyBlxC,KAAKk4B,MAAMiZ,8BAAgCnxC,KAAKk4B,MAAM+Y,cAAgBs6B,EAC1GvrE,KAAKqsD,YACLvtB,EAAW,KAAO9+B,KAAKk4B,MAAMiZ,8BAAgCnxC,KAAKk4B,MAAM+Y,cAAgB,GAE5F,MAAMu6B,EAA4BP,EAAiBlzC,iBAAiB+D,iBAAiB71B,EACrFglE,EAAiBlzC,iBAAiB+D,iBAAmB,IAAI,EAAAhP,SAAS0+C,EAAmB1sC,GACrFqsC,EAAc18D,KAAKN,IAAIg9D,EAAarsC,GAK5C,GAAIgsC,EAAuBhqE,OAAS,EAAG,CACnC,MAAM2/C,EAAenC,EAAUvmB,iBAAiBhE,KAAKH,MACrD,IAAI4sB,EAAiBsqB,EAAuB,GAAG/yC,iBAAiB+D,iBAAiB71B,EAC7E6kE,EAAuB,GAAG/yC,iBAAiBwE,iBAC3CuuC,EAAuB,GAAGlzC,cAAcG,iBAAiB+D,iBAAiB71B,EAC9Eu6C,EAASA,EAASC,EAAOA,EAAOD,EAChCpB,EAAwBiB,wBAAwBG,EAAQC,EAAM0qB,GAElE,OAAOL,EAODW,gCAAgCC,GAEtC,IAAK,IAAIpuC,EAAc,EAAGC,EAAcmuC,EAAmB5qE,OAAQw8B,EAAMC,IAAOD,EAAK,CACjF,MAAM+rB,EAAkCqiB,EAAmBpuC,GAE3D,IAAK,IAAI78B,EAAY,EAAGA,EAAI4oD,EAAWyV,cAAch+D,OAAQL,IAAK,CAC9D,MAAM2qE,EAAkC/hB,EAAWyV,cAAcr+D,GAE7D2qE,EAAWrlB,iBACXqlB,EAAWrlB,gBAAgBO,uBAAuB8kB,EAAWrlB,gBAAgBO,uBAAuBxlD,OAAS,KAAOsqE,GACpHprE,KAAK2rE,yBAAyBP,GAG9BA,EAAWtlB,YAAYh8C,QACvB9J,KAAK4rE,qBAAqBR,KAahCS,2BAA2B9gB,EAA8B+gB,EAC9Btd,EAAsBC,GACvD,MAAM,IAAI/tD,MAAMV,KAAKukE,oCAQfwH,mCAAmCC,EACAxd,GACzC,MAAM,IAAI9tD,MAAMV,KAAKukE,oCASf0H,kCAAkCH,EAAkCtd,EAAsBC,SAEhG,MAAM9F,EAA8BmjB,EAAgBvb,kBAC9CpB,EAA+BnvD,KAAK6tD,oBAAoBnB,YAAY8B,GAC1E,IAAI0d,EAAqB,IAAI,EAAAp/C,SAE7B,GAAKg/C,EAAgBK,SAASrrE,OAAS,GAAOgrE,EAAgBM,YAAYtrE,OAAS,EAAI,CACvF,IAAIurE,EAA8B,GAClC,IAAK,IAAI/uC,EAAc,EAAGC,EAAcuuC,EAAgBQ,YAAYxrE,OAAQw8B,EAAMC,IAAOD,EAAK,CAC1F,MAAMq3B,EAA8BmX,EAAgBQ,YAAYhvC,GAC3C,KAAjBq3B,EAAM4X,SAEFF,GADuB,KAAvBA,EACsB1X,EAAM4X,OAEN,IAAM5X,EAAM4X,QAItCF,GADuB,KAAvBA,EACsB1X,EAAMt8B,MAEN,IAAMs8B,EAAMt8B,MAG1C,MAAMimB,EAAuB6Q,EAASV,GAAYn2B,gBAClD,IAAKgmB,EAED,YADA,UAAI53B,MAAM,2FAGdwlD,EAAWlsE,KAAKwsE,4CAA4C7jB,EAAmB8F,EAAYnQ,EAAWA,MAAAA,OAAS,EAATA,EAAWmuB,gCAE7Gh+D,KAAKiF,IAAIw4D,EAASjmE,EAAI,GAAK,OAC3BimE,EAASjmE,EAAIkpD,EAASV,GAAY+M,uBAAyBx7D,KAAKk4B,MAAM4S,mBAG1E,MAAMiZ,EAAqB/jD,KAAKk4B,MAAM2Z,kBAChCypB,EAA2BwQ,EAAgBY,2BAC3CC,EAA8B3sE,KAAK09C,eAAeY,EACA4tB,EAAUG,EACVP,EAAgBc,2BAChBtR,EACAvX,GAElD8oB,EAAkC,IAAI,EAAAlJ,2BACxCrlB,EAAWquB,EAAYrR,EAA+B,QAApB,EAAAnM,EAASV,UAAW,eAAEhL,oBAAqBqoB,GAGjFxtB,EAAUrmB,oBAAoB12B,KAAKsrE,IAS7BtG,wBAEN,IAAK,IAAIjpC,EAAc,EAAGC,EAAcv9B,KAAKkkE,8BAA8BpjE,OAAQw8B,EAAMC,IAAOD,EAClCt9B,KAAKkkE,8BAA8B5mC,GAChE2jC,cAAcngE,OAAS,EAExDd,KAAKkkE,8BAA8BpjE,OAAS,EAStCgsE,qBAAqBvnB,EACAwnB,GAC3B,UAAIrmD,MAAM,wCAMJkgD,wBACN,IAAK5mE,KAAK6tD,oBAAoBnB,YAC1B,OAGJ,MAAMsgB,EAAoChtE,KAAK6tD,oBAAoBnB,YACnE,IAAKsgB,EACD,OAEAhtE,KAAKk4B,MAAM2d,sBAAwBm3B,EAAYlsE,OAAS,IACxD,UAAI4lB,MAAM,qFACV1mB,KAAKk4B,MAAM2d,sBAAwBm3B,EAAYlsE,OAAS,GAI5D,MAAMmsE,EAA2C,GACjD,IAAK,IAAI3vC,EAAct9B,KAAKk4B,MAAM2d,sBAAuBtY,EAAcyvC,EAAYlsE,OAC/Ew8B,EAAMC,GAAOD,GAAOt9B,KAAKk4B,MAAM0d,wBAAyBtY,EAAK,CAC7D,MACM4vC,EAA+C,GACrD,IAAK,IAAI5jB,EAAe,EAAGC,EAFmByjB,EAAY1vC,GAEEx8B,OAAQwoD,EAAOC,IAAQD,EAAM,CACrF,MAAMsF,EAAqCoe,EAAY1vC,GAAKgsB,GAE5D,IAAIsF,MAAAA,OAAgB,EAAhBA,EAAkBjF,eAClBujB,EAAyB3rE,KAAKqtD,GAE1B5uD,KAAKk4B,MAAMgd,iBAEX,IAAK,MAAMmU,KAAcuF,EAAiB3H,aACtC,IAAK,MAAMgD,KAAOZ,EAAWa,sBACzBD,EAAI7Q,QAMxB6zB,EAAmB1rE,KAAK2rE,GAI5B,IAAIC,EAA6B,EAEjC,IAAK,IAAI7vC,EAAc,EAAGC,EAAc0vC,EAAmBnsE,OAAQw8B,EAAMC,IAAOD,EAAK,CACjF,MAAM8vC,EAA6BH,EAAmB3vC,GACtD6vC,EAAqB1+D,KAAKN,IAAIi/D,EAAOtsE,OAAQqsE,GAE7C,MAEJ,GAA2B,IAAvBA,EACA,OAKJ,MAAME,EAAyC,IAAI,EAAAC,mBA2BnD,GA1BAD,EAAmBjnB,WAAWpmD,KAAK6tD,oBAAqBof,EAAoBE,GAC5EntE,KAAKurD,aAAe8hB,EAAmBE,oBAEvCvtE,KAAKonE,iBAIApnE,KAAKqsD,YAINrsD,KAAKwtE,wBAELxtE,KAAKytE,uCACDztE,KAAKk4B,MAAM6c,aAEX/0C,KAAK0tE,sBAKb1tE,KAAK2tE,0BAEL3tE,KAAK4tE,yBAGD5tE,KAAKk4B,MAAM+d,qBACX,IAAK,IAAI3Y,EAAc,EAAGC,EAAcv9B,KAAKurD,aAAazqD,OAAQw8B,EAAMC,IAAOD,EAAK,CAChF,MAAM4rC,EAA2BlpE,KAAKurD,aAAajuB,GACnDt9B,KAAKipE,gCAAgCC,GAS7C,GANAlpE,KAAK6tE,uBAEA7tE,KAAKqsD,WAAarsD,KAAKk4B,MAAM6c,aAC9B/0C,KAAK8tE,iBAGL9tE,KAAKk4B,MAAM+d,qBACX,IAAK,IAAI3Y,EAAc,EAAGC,EAAcv9B,KAAKurD,aAAazqD,OAAQw8B,EAAMC,IAAOD,EAAK,CAChF,MAAM4rC,EAA2BlpE,KAAKurD,aAAajuB,GACnDt9B,KAAKqqE,8BAA8BnB,GAKtClpE,KAAKqsD,WACNrsD,KAAK+tE,qBAGT/tE,KAAKguE,wBACAhuE,KAAKqsD,YAENrsD,KAAKiuE,8BAELjuE,KAAKkuE,qCAELluE,KAAKmuE,iCAELnuE,KAAKouE,wBAELpuE,KAAKquE,uCAGTruE,KAAKsuE,6BAEAtuE,KAAKqsD,WACNrsD,KAAKuuE,4BAETvuE,KAAKwuE,0BAGLxuE,KAAKyuE,0BAIL,IAAK,IAAInlB,EAAe,EAAGC,EAAevpD,KAAKurD,aAAazqD,OAAQwoD,EAAOC,IAAQD,EAAM,CACrF,MAAM4f,EAA2BlpE,KAAKurD,aAAajC,GACnD,IAAK,IAAIolB,EAAe,EAAGC,EAAezF,EAAYpT,WAAWh1D,OAAQ4tE,EAAOC,IAAQD,EAAM,CAC1F,MAAMpwB,EAAuB4qB,EAAYpT,WAAW4Y,GACpD1uE,KAAKgpE,uBAAuB1qB,IAKpC+uB,EAAmBuB,yBAEnB5uE,KAAK6uE,oBAEL7uE,KAAK8uE,uBAKL,IAAK,IAAIxxC,EAAc,EAAGC,EAAcv9B,KAAK6tD,oBAAoBpB,WAAW3rD,OAAQw8B,EAAMC,IAAOD,EAAK,CAClG,MAAM6wB,EAAyCnuD,KAAK6tD,oBAAoBpB,WAAWnvB,GACnF,IAAK,IAAIgsB,EAAe,EAAGC,EAAe4E,EAAmB1C,aAAa3qD,OAAQwoD,EAAOC,IAAQD,EAAM,CACnG,MAAMylB,EAAiC,IAARzxC,GAAsB,IAATgsB,EACtC4f,EAA2B/a,EAAmB1C,aAAanC,GACjE4f,EAAY8F,gCACPhvE,KAAKqsD,UAMC6c,IAAgBA,EAAYvwC,OAAO8yB,aAAa,IACvDyd,EAAY+F,qBAAqBjvE,KAAKk4B,MAAM4a,oBAAqB9yC,KAAKk4B,MAAMmR,wBAAyB0lC,IANrG7F,EAAYgG,iDAAiDlvE,KAAKk4B,OAClEgxC,EAAY+F,qBAAqBjvE,KAAKk4B,MAAM4a,oBAAqB9yC,KAAKk4B,MAAMmR,wBAAyB0lC,GACrG7F,EAAYiG,yBAAyBnvE,KAAK6tD,oBAAoBtB,iBAAiB2K,YAAal3D,KAAKk4B,MAAM8Q,aACvGkgC,EAAYkG,oBAAoBpvE,KAAK6tD,oBAAoBtB,iBAAiB8iB,mBAAoBrvE,KAAKk4B,MAAM8Q,YAAa,GACtHkgC,EAAYoG,0BAIhBpG,EAAYqG,iBAAiBvvE,KAAKk4B,OAEtC,MAAM0lC,EAAmBzP,EAAmB1C,aAAa,GAAG1zB,iBAAiBsE,UAC7E,IAAK,IAAIitB,EAAe,EAAGC,EAAe4E,EAAmB1C,aAAa3qD,OAAQwoD,EAAOC,IAAQD,EAAM,CACnG,MAAM4f,EAA2B/a,EAAmB1C,aAAanC,GAGjE4f,EAAYnxC,iBAAiB+D,iBACzB,IAAI,EAAAhP,SAASo8C,EAAYnxC,iBAAiB+D,iBAAiB71B,EAAGijE,EAAYnxC,iBAAiB+D,iBAAiBh2B,EAAI83D,GAExH,IAAK,IAAItU,EAAe,EAAGC,EAAe4E,EAAmB1C,aAAa3qD,OAAQwoD,EAAOC,IAAQD,EAAM,CACnG,MAAM4f,EAA2B/a,EAAmB1C,aAAanC,GACjE,IAAK,IAAIolB,EAAe,EAAGC,EAAezF,EAAYpT,WAAWh1D,OAAQ4tE,EAAOC,IAAQD,EACvDxF,EAAYpT,WAAW4Y,GAC1Cc,6BAMlBrhB,EAAmBp2B,iBAAiBwG,4BAIhC4vB,IAAuBnuD,KAAK6tD,oBAAoBpB,WAAW,IAC3DzsD,KAAKyvE,oBAAoBthB,GAI7BA,EAAmBp2B,iBAAiBwG,6BAIlCuwC,wBAKAD,qBAKAb,wBACN,IAAK,MAAM9E,KAAelpE,KAAKurD,aAC3B,IAAK,MAAMjN,KAAa4qB,EAAYpT,WAAY,CAC5C,MAAMyM,EAA+CjkB,EAAUe,wBAC/D,IAAIqwB,EAAwB9xC,OAAOw1B,iBACnC,GAAIpzD,KAAKk4B,MAAMwV,uBAAmE,cAA1C1tC,KAAKk4B,MAAMyV,2BAA4C,CAE3F,MAAMgiC,EAAqD,GAC3D,IAAK,MAAMj4C,KAAW4mB,EAAU6qB,SAC5BwG,EAA4BpuE,QAAQm2B,EAAQuvB,cAEhDyoB,EAAgB1vE,KAAK4vE,mCAAmCD,EAA6BpN,GAEzF,IAAK,MAAM7qC,KAAW4mB,EAAU6qB,SAAU,CAClCnpE,KAAKk4B,MAAMwV,uBAAmE,YAA1C1tC,KAAKk4B,MAAMyV,6BAC/C+hC,EAAgB1vE,KAAK4vE,mCAAmCl4C,EAAQuvB,aAAcsb,IAElF,IAAK,MAAMlZ,KAAc3xB,EAAQuvB,aAC7B,GAAKoC,EAAWkX,0BAA2E,IAA/ClX,EAAWkX,yBAAyBz/D,OAGhF,IAAK,IAAIL,EAAY,EAAGA,EAAI4oD,EAAWkX,yBAAyBz/D,OAAQL,IAAK,CACzE,MAAMovE,EAAyDxmB,EAAWkX,yBAAyB9/D,GAC7FqvE,EAAmBzmB,EAAWtxB,iBAC9Bg4C,EAAmBF,EAAwB93C,iBAC3CktB,EAAgB8qB,EAAIxzC,iBAAmBuzC,EAAIj0C,iBAAiB51B,EAC5DyC,EAAcqnE,EAAItzC,kBAAoBqzC,EAAIj0C,iBAAiB51B,IAC5DjG,KAAKk4B,MAAMwV,uBAAyBgiC,EAAgB,KAErDA,EAAgBnN,EAAoBpD,qBAAqBla,EAAOv8C,IAEpE,IAAIsnE,EAAiB,EACX,IAANvvE,GACAuvE,GAAUhwE,KAAKk4B,MAAMsV,mBACrBwiC,GAAU,IAEVA,GAAUhwE,KAAKk4B,MAAMuV,oBAEzBuiC,IAAW,EACX,MAAMC,EAAyBJ,EAAwBjyB,eACvDqyB,EAAOl4C,iBAAiB+D,iBAAiBh2B,EAAI4pE,EAAgBM,EAC7DC,EAAOjsB,kCACPisB,EAAOl4C,iBAAiB2F,uBACxB6kC,EAAoBviB,qBAAqBiF,EAAOv8C,EAAKgnE,EAAgBO,EAAOl4C,iBAAiB2E,oBAQ3GkzC,mCAAmC3oB,EAAqCipB,GAC9E,IAAIR,EAAwB9xC,OAAOw1B,iBACnC,IAAK,MAAM/J,KAAcpC,EACrB,IAAK,MAAM4oB,KAA2BxmB,EAAWkX,yBAA0B,CACvE,MAAMuP,EAAmBzmB,EAAWtxB,iBAC9Bg4C,EAAmBF,EAAwB93C,iBAC3CktB,EAAgB8qB,EAAIxzC,iBAAmBuzC,EAAIj0C,iBAAiB51B,EAC5DyC,EAAcqnE,EAAItzC,kBAAoBqzC,EAAIj0C,iBAAiB51B,EACjEypE,EAAgBjhE,KAAKC,IAAIghE,EAAeQ,EAAI/Q,qBAAqBla,EAAOv8C,IAGhF,OAAOgnE,EASDS,2BAA2BC,EAAqB3b,EACrB/8B,IAI3B24C,YAAYhnB,IAIZinB,wBAAwBlI,EAA+B3e,EAAwBlE,IAI/EgrB,eAAeC,EAA8B/mB,EAC9BlE,IAIfkrB,8CAA8ClrB,EACAmrB,EACAC,EACAxa,EACAya,IAI9ChD,0BAIAE,kBAIA+C,8CAA8C/E,EAAkCtd,EAAsBC,IAUtGqiB,0CAA0CC,EACAC,GAEhD,MAAMrE,EAA6BoE,EAA2B34C,MACxDknB,EAAe0xB,EAAoB/qE,EAAI0mE,EAAW50C,iBAAiBwE,iBACnEgjB,EAAgByxB,EAAoB/qE,EAAI0mE,EAAW50C,iBAAiB0E,kBAEpE6+B,EAA2ByV,EAA2B/xB,kBAAkBxmB,UAExE4mB,EADuB2xB,EAA2Bz4C,gBACW+mB,wBAEnE,IAAI4xB,EACA3V,IAAc,EAAA12B,cAAcwb,OAC5B6wB,EAAgB7xB,EAAwBigB,wBAAwB/f,EAAMC,GACtEotB,EAAW50C,iBAAiB+D,iBAAmB,IAAI,EAAAhP,SAASkkD,EAAoB/qE,EAAGgrE,EAAgBtE,EAAW50C,iBAAiB2E,mBAE/Hu0C,EAAgB7xB,EAAwB+f,qBAAqB7f,EAAMC,GACnEotB,EAAW50C,iBAAiB+D,iBAAmB,IAAI,EAAAhP,SAASkkD,EAAoB/qE,EAAGgrE,EAAgBtE,EAAW50C,iBAAiB4E,qBAShIu0C,oCAAoCH,EAAkEC,SACzG,MAAMviB,EAAqBsiB,EAA2Bz4C,gBAAgB0uB,YAAYyQ,eAM5E7Y,EAA+B5+C,KAAK6tD,oBAAoBgE,6CAC1Dkf,EAA2B/xB,kBAAkBmyB,mBAAmBC,oBAAqB3iB,GACzF,IAAK7P,EAED,YADA,UAAIY,KAAK,iFAIbuxB,EAA2BpyB,WAAaC,EACxC,MAAMN,EAAuByyB,EAA2Bz4C,gBAClD+4C,EAA0BzyB,EAAWtmB,gBAGrCg5C,EAAyBD,GAAgB/yB,IAAc+yB,EAE7D,IAAI5E,GAAwC,EACxC4E,EACA5E,EAA+B4E,MAAAA,OAAY,EAAZA,EAAc5E,+BACtCnuB,IACPmuB,EAA+BnuB,MAAAA,OAAS,EAATA,EAAWmuB,gCAG9C,MAAM8E,EAAiC,EAAAvoD,SAASshC,mBAAmBymB,EAA2B/xB,kBAAkBmyB,mBAAmB5gB,mBAC7HyE,EAAkDh1D,KAAK6tD,oBAAoB2C,kCAAkC+gB,GAC7G35C,EAAkCo9B,EAAUwc,4BAA4B55C,cACxE65C,EAAuB75C,EAAcG,iBAAiB8D,iBAAiB51B,EAAI2xB,EAAcG,iBAAiBqE,YAChH,IAAIs1C,EAA0B,IAAI,EAAA1oD,SAAS,EAAG,EAAG,GACjD,IAAK,MAAMqgC,KAAc2L,EAAUC,aAAc,CAC7C,MAAM0c,EAAyD,QAA5B,EAAAtoB,MAAAA,OAAU,EAAVA,EAAYT,wBAAgB,eAAEgpB,0BAC5DD,MAAAA,OAAgB,EAAhBA,EAAkBrmD,GAAGomD,MACtBA,EAAgBC,GAGxB,MAAME,EAA8B7xE,KAAKwsE,4CACrC+E,EAAsB9iB,EAAY4iB,EAAc5E,EAA8B,GAE5EqF,EAA4B,EAAA9oD,SAASooC,KAAKmgB,EAAsBG,GAChEK,EAAmC/xE,KAAKwsE,4CAC1CsF,EAAiBrjB,EAAY4iB,EAAc5E,EAA8B,GAGzEsF,EAAuB9rE,EAAI4rE,EAAkB5rE,GAAK8rE,EAAuB9rE,EAAIwrE,EAC7EI,EAAkB5rE,IAAM8rE,EAAuB9rE,EAAI4rE,EAAkB5rE,GAAKjG,KAAKk4B,MAAM0U,wCAErFilC,EAAkB5rE,EAAIwrE,EAAezxE,KAAKk4B,MAAMsU,sBAGpD,MAAMwlC,EACFhyE,KAAKwkE,qBAAqByN,IAAIlB,EAA2B/xB,kBAAkBkzB,qBAAqB3hB,kBAAkB9mC,WAClHuoD,IACAhB,EAAoB/qE,EAAI+rE,EAAgBl2C,iBAAiB71B,EAAI+rE,EAAgBv1C,kBAAoBz8B,KAAKk4B,MAAMsU,uBAGhH,MAAM08B,EAA2B5qB,EAAUnmB,kBACrCg6C,EAAgCjJ,EAAYpT,WAAW9zD,QAAQs8C,GAC/Dc,EAAmDd,EAAUe,wBAI7Dic,EAA2ByV,EAA2B/xB,kBAAkBxmB,UAG9E,IAAI45C,EAGAd,GAAiBO,EAAkB5rE,EAAI+qE,EAAoB/qE,EAAIjG,KAAKk4B,MAAMyU,iBAC1EklC,EAAkB5rE,EAAI+qE,EAAoB/qE,EAAIjG,KAAKk4B,MAAMyU,gBAI7D,MAAM0lC,EAAsBrB,EAAoB/qE,EAC1CqsE,EAAsBjB,EAAalI,SAAS,GAAG3N,uBAAyBx7D,KAAKk4B,MAAMsU,sBAAwB,EAEjH,IAAI+lC,EAAoB,EACpBC,EAAoB,EAEnBlB,EAUDiB,EAAYV,EAAkB5rE,GAT9BssE,EAAYj0B,EAAUvmB,iBAAiBhE,KAAKH,MAC5C4+C,EAAYX,EAAkB5rE,EAG9BmsE,EAAmC,IAAI,EAAAh0B,qCACnC2yB,EAA2B/xB,kBAAmBqyB,EAAczyB,EAAW6E,qBAC3E2uB,EAAiCtzB,gBAAiB,EAClDiyB,EAA2BjyB,gBAAiB,GAMhD,IAAI2zB,EAAiB,EACjBC,EAAuB,EAE3B,GAAIpX,IAAc,EAAA12B,cAAcwb,MAAO,CAEnC,IAAIuyB,EAA6B,EAMjC,GALIR,EAAwBjJ,EAAYpT,WAAWh1D,OAAS,IACxD6xE,EAAqBR,EAAwB,GAI7CQ,EAAqBR,EAAuB,CAE5C,MAEMS,EAF2B1J,EAAYpT,WAAW6c,GAEA56C,iBAAiB+D,iBAAiBh2B,EACtFw4C,EAAUvmB,iBAAiB+D,iBAAiBh2B,EAC5C9F,KAAKk4B,MAAM8Q,YAGfypC,EAASzyE,KAAKk4B,MAAM8Q,YAAc4pC,EAA4B,OAG9DH,EAASzyE,KAAKk4B,MAAMqU,qBAIxBkmC,GAAUzyE,KAAKk4B,MAAMiU,mBAAqB,EACrCmlC,IAGDoB,EAAeD,GAInB,IAAII,EAAgDzzB,EAAwBigB,wBAAwBgT,EAAaE,GAG7GM,EAAwCJ,IACxCA,EAASI,GAIb,MAAMC,GAA6B,EAEnC,GAAIX,EAAwBjJ,EAAYpT,WAAWh1D,OAAS,EAAG,CAE3D,MAAMiyE,EAA8Cz0B,EAAU00B,sBAAsBT,GAC9EU,EAAgD30B,EAAU00B,sBAAsBX,GAEtF,GAAIY,GAA4BF,IAEyCE,EAAyBnS,wBAQ1FgS,GAAmB,CACnB,MAAMI,EAA2BhK,EAAYpT,WAAW6c,GAClDQ,EAAuCD,EAAc7zB,wBAAwB8f,qBAAqBkT,EAAaE,GAG/Ga,EAFoCF,EAAcn7C,iBAAiB+D,iBAAiBh2B,EACtFw4C,EAAUvmB,iBAAiB+D,iBAAiBh2B,EACkBqtE,EAG9DV,EADAW,EAAwBpzE,KAAKk4B,MAAMiU,mBAAqBnsC,KAAKk4B,MAAM8Q,YAC1DoqC,EAAwBpzE,KAAKk4B,MAAMuU,oBAEnCzsC,KAAKk4B,MAAM8Q,YAAchpC,KAAKk4B,MAAMiU,mBAGjD4kC,EAA2B9xB,gBAAiB,GAMnDqyB,IACDuB,EAAwCxB,EAAahyB,wBAAwBggB,wBAAwBiT,EAAaE,GAE9GK,EAAwCH,IACxCA,EAAeG,GAGnBH,GAAgB1yE,KAAKk4B,MAAMiU,mBAAqB,EAChDumC,GAAgB1yE,KAAKk4B,MAAMuU,qBAG1BqmC,IACDL,GAAUzyE,KAAKk4B,MAAMiU,mBAAqB,EAC1CsmC,GAAUzyE,KAAKk4B,MAAMuU,0BAGtB,GAAI6uB,IAAc,EAAA12B,cAAckb,MAAO,CAE1C,GAA6D,IAAzDxB,EAAU0I,YAAY4C,iBAAiBiB,OAAO/pD,OAE9C2xE,EAASzyE,KAAKk4B,MAAMoU,yBACjB,CAEH,IAAI+mC,EAAiC,EACjClB,EAAwB,IACxBkB,EAAyBlB,EAAwB,GAGrD,MAAMmB,EAA+BpK,EAAYpT,WAAWud,GAM5DZ,IAL0Cn0B,EAAUvmB,iBAAiB+D,iBAAiBh2B,EAClFwtE,EAAkBv7C,iBAAiB+D,iBAAiBh2B,EACpD9F,KAAKk4B,MAAM8Q,aAGuB,EAI1CypC,GAAUzyE,KAAKk4B,MAAMiU,mBAAqB,EACrCmlC,IACDoB,EAAeD,GAKnB,IAAIc,EAA6Cn0B,EAAwB+f,qBAAqBkT,EAAaE,GAGvGgB,EAAqCd,IACrCA,EAASc,GAEb,MAAMT,GAA6B,EAGnC,GAAIx0B,EAAU0I,YAAY4C,iBAAiBiB,OAAO/pD,OAAS,GAAKqxE,EAAwB,EAAG,CAEvF,MAAMc,EAAgD30B,EAAU00B,sBAAsBX,GAChFU,EAA8Cz0B,EAAU00B,sBAAsBT,GAEpF,GAAIU,GAA4BF,EAAwB,CAEiBE,EAAyBnS,wBAA9F,MAEM0S,EAA+BrB,EAAwB,EAM7D,GAAIW,EAAmB,CACnB,MAAMW,EAA6BvK,EAAYpT,WAAW0d,GACpDE,EAA4CD,EAAgBp0B,wBAChBggB,wBAAwBgT,EAAaE,GAIvFE,GAH0Cn0B,EAAUvmB,iBAAiB+D,iBAAiBh2B,EAClF2tE,EAAgB17C,iBAAiB+D,iBAAiBh2B,EACY4tE,EAChC1zE,KAAKk4B,MAAM8Q,aAAe,EAAIhpC,KAAKk4B,MAAM8Q,cAMlFsoC,IACDiC,EAAqClC,EAAahyB,wBAAwB8f,qBAAqBmT,EAAaE,GAExGe,EAAqCb,IACrCA,EAAea,GAGnBb,GAAgB1yE,KAAKk4B,MAAMiU,mBAAqB,GAG/C2mC,IACDL,GAAUzyE,KAAKk4B,MAAMiU,mBAAqB,EAC1CsmC,GAAUzyE,KAAKk4B,MAAMuU,qBAEpB6kC,IACDoB,GAAgB1yE,KAAKk4B,MAAMuU,qBAQnCskC,EAA2B7xB,MAAM9lB,QAC7B23C,EAA2B/xB,kBAAkBS,cAAgB,EAAAC,gBAAgBC,UACzE2xB,GACAP,EAA2BxwB,qBAAqB8xB,EAAaE,EAAWE,GACxE1B,EAA2B5uB,YAG3B4uB,EAA2B/vB,8BAA8BqxB,EAAaE,EAAWE,GACjF1B,EAA2B5uB,UAE3BiwB,EAAiClxB,+BAA+BoxB,EAAaE,EAAWE,GACxFN,EAAiCjwB,WAE9B4uB,EAA2B/xB,kBAAkBS,cAAgB,EAAAC,gBAAgBE,aAChF0xB,GACAP,EAA2BtvB,sBAAsB4wB,EAAaE,EAAWE,GACzE1B,EAA2B5uB,YAE3B4uB,EAA2BlvB,+BAA+BwwB,EAAaE,EAAWE,GAClF1B,EAA2B5uB,UAE3BiwB,EAAiCtwB,gCAAgCwwB,EAAaE,EAAWE,GACzFN,EAAiCjwB,YAGzCniD,KAAKwkE,qBAAqBh1D,IAAI+hE,EAAqB9nD,UAAWsnD,EAA2Bh5C,kBAQnF47C,iDAAiDC,EACA5C,EAA+B9gB,GAEtF,MAAM5R,EAAuBs1B,EAA8Bt7C,gBAC3D,IAAKgmB,EACD,OAGJ,MAAMgB,EAAe0xB,EAAoB/qE,EAAI2tE,EAA8B77C,iBAAiBwE,iBACtFgjB,EAAgByxB,EAAoB/qE,EAAI2tE,EAA8B77C,iBAAiB0E,kBACvF2iB,EAAmDd,EAAUe,wBACnE,IAAI4C,EAAoB,EAGxB,GAAI2xB,EAA8Bp7C,YAAc,EAAAoM,cAAckb,MAAO,CACjE,MAAM+zB,EAAuBz0B,EAAwB+f,qBAAqB7f,EAAMC,GAGhF,GAAIjB,EAAUmuB,gCAAkCnuB,EAAU0I,cAAgB1I,EAAU0I,YAAY4C,iBAAiBiB,OAAO,GAAI,CACxH,MAAM4oB,EAA6Bn1B,EAAUnmB,kBAAkB29B,WAAWxX,EAAUnmB,kBAAkB29B,WAAW9zD,QAAQs8C,GAAa,GAChIw1B,EAAqBx1B,EAAUvmB,iBAAiB+D,iBAAiBh2B,EACnE2tE,EAAgB17C,iBAAiB+D,iBAAiBh2B,EAAI9F,KAAKk4B,MAAM8Q,YAIjEiZ,EADA4xB,GAAgBC,EAAa,GAChBA,EAAa,EAEdD,EAAeD,EAA8B77C,iBAAiB4E,wBAG9EslB,EAAY4xB,EAAeD,EAA8B77C,iBAAiB4E,mBAG9Ei3C,EAA8B77C,iBAAiB+D,iBAAmB,IAAI,EAAAhP,SAASkkD,EAAoB/qE,EAAGg8C,QACnG,GAAI2xB,EAA8Bp7C,YAAc,EAAAoM,cAAcwb,MAAO,CACxE,MAAMof,EAA0BpgB,EAAwBigB,wBAAwB/f,EAAMC,GAEhFw0B,EAAmBz1B,EAAU0I,YAAY4C,iBAAiBiB,OAAOvM,EAAU0I,YAAY4C,iBAAiBiB,OAAO/pD,OAAS,GAC9H,GAAIw9C,EAAUmuB,gCAAkCnuB,EAAU0I,cAAgB+sB,EAAW,CACjF,MACMD,EAD2Bx1B,EAAUnmB,kBAAkB29B,WAAWxX,EAAUnmB,kBAAkB29B,WAAW9zD,QAAQs8C,GAAa,GAC3FvmB,iBAAiB+D,iBAAiBh2B,EACvEw4C,EAAUvmB,iBAAiB+D,iBAAiBh2B,EAAI9F,KAAKk4B,MAAM8Q,YAK3DiZ,EADAud,EAHmBoU,EAA8B77C,iBAAiB4E,mBAGvC38B,KAAKk4B,MAAM8Q,YAAc8qC,EAAa,EACrD9zE,KAAKk4B,MAAM8Q,YAAc8qC,EAAa,EAEtCtU,EAAkBoU,EAA8B77C,iBAAiB2E,qBAGjFulB,EAAYud,EAAkBoU,EAA8B77C,iBAAiB2E,gBAGjFk3C,EAA8B77C,iBAAiB+D,iBAAmB,IAAI,EAAAhP,SAASkkD,EAAoB/qE,EAAGg8C,GAE1G2xB,EAA8Bz0B,sBAGxB60B,0CAA0CC,IAa1CC,6BAA6BjvB,EAAyBv8C,EAAuByrE,EAChD7wD,EAAgB8wD,EAAmBC,IAIhE32B,eAAeY,EACA4tB,EACAoI,EACA1a,EACA0B,EACAvX,EACA3vB,EAAmC,EAAAD,kBAAkBO,cAC1E,MAAM2D,EAAe,IAAI,EAAAD,MAAMk8C,EAAgBlgD,GAC/CiE,EAAMusB,UAAYgV,EAClBvhC,EAAM0rB,WAAaA,EAGnB,MAAM4oB,EAA6B,IAAI,EAAA/uB,eAAevlB,EAAO0rB,EAAY1rB,EAAMjE,cAAep0B,KAAKk4B,MAAOomB,EAAUvmB,kBAC9Gw8C,EAAuB,IAEzBjZ,IAAc,EAAA12B,cAAcwb,QAC5BusB,EAAWv0C,MAAMhE,cAAgB,EAAAD,kBAAkBE,SAGvDs4C,EAAW3oB,kCACX2oB,EAAW50C,iBAAiB4E,oBAAsB43C,EAClD5H,EAAW50C,iBAAiB2E,iBAAmB63C,EAC/C5H,EAAW50C,iBAAiBwE,kBAAoBg4C,EAChD5H,EAAW50C,iBAAiB0E,mBAAqB83C,EAEjD,IAWItD,EAXA3xB,EAAe4sB,EAASjmE,EAAI0mE,EAAW50C,iBAAiBwE,iBACxDgjB,EAAgB2sB,EAASjmE,EAAI0mE,EAAW50C,iBAAiB0E,kBAGzD8iB,EAAQjB,EAAUvmB,iBAAiBhE,KAAKH,QACxC2rB,EAAQjB,EAAUvmB,iBAAiBhE,KAAKH,MAAQ5zB,KAAKk4B,MAAMmT,mBAC3DiU,EAAOC,EAAQotB,EAAW50C,iBAAiBgE,WAAWnI,MACtDs4C,EAASjmE,EAAIq5C,EAAOqtB,EAAW50C,iBAAiBwE,kBAKpD,MAAM6iB,EAAmDd,EAAUe,wBAgBnE,OAdI4xB,EADA3V,IAAc,EAAA12B,cAAcwb,MACZhB,EAAwBigB,wBAAwB/f,EAAMC,GAEtDH,EAAwB+f,qBAAqB7f,EAAMC,GAIvEotB,EAAW50C,iBAAiB+D,iBAAmB,IAAI,EAAAhP,SAASo/C,EAASjmE,EAAGgrE,GAGpE3V,IAAc,EAAA12B,cAAcwb,MAC5BhB,EAAwBiB,wBAAwBf,EAAMC,EAAOotB,EAAW50C,iBAAiB4E,mBAAqBs0C,GAE9G7xB,EAAwBY,qBAAqBV,EAAMC,EAAOotB,EAAW50C,iBAAiB2E,gBAAkBu0C,GAErGtE,EAGD6H,iDAAiDzpB,EAA8B0pB,EAC9BjmB,GAEvD,MAAM7F,EAA8B,EAAA3/B,SAASooC,KAAKrG,EAAcwF,kBAAmBkkB,EAAqB/c,WAClGvI,EAA+BnvD,KAAK6tD,oBAAoBnB,YAAY8B,GAC1E,IAAI0d,EAAqB,IAAI,EAAAp/C,SAE7B,GAAI2nD,EAAqBC,iBAAmBD,EAAqBE,mBAAoB,CAEjF,GAAI30E,KAAKk4B,MAAM2d,sBAAwB,EACnC,OAEJ,IAAKsZ,EAAS,GACV,OAEJ,IAAI7Q,EAAuB6Q,EAAS,GAAG72B,gBACnCs8C,EAA+BzlB,EAAS,GAAGp3B,iBAAiB+D,iBAAiB71B,EAC7E4uE,EAAwB,EAC5B,IAAK,IAAI/2D,EAAY,EAAGA,EAAIqxC,EAASruD,OAAQgd,IACzC,GAAKqxC,EAASrxC,GAAGwa,iBAAmE,IAAhD62B,EAASrxC,GAAGwa,gBAAgB6wC,SAASroE,QAIrEquD,EAASrxC,GAAGwa,gBAAgB6wC,SAASroE,OAAS,EAAG,CACjDw9C,EAAY6Q,EAASrxC,GAAGwa,gBACxBs8C,EAAuBzlB,EAASrxC,GAAGia,iBAAiB+D,iBAAiB71B,EACrE4uE,EAAgB/2D,EAChB,MAUR,GAPAouD,EAAWlsE,KAAKwsE,4CAA4C7jB,EACAksB,EACAv2B,EACAA,EAAUmuB,+BACVmI,GAGxDH,EAAqBnI,YAAYxrE,OAAS,GAC1C2zE,EAAqBnI,YAAY,GAAGwI,sBAAsB,EAAAC,+BACAN,EAAqBnI,YAAY,GAAGwI,WAC3Et8C,UAAY,EAAAoM,cAAckb,MAKzCxB,EAAU6qB,SAAS,GAAGliB,aAAanmD,OAAS,GACyD,IAArG2N,KAAKiF,IAAIw4D,EAASjmE,EAAIq4C,EAAU6qB,SAAS,GAAGliB,aAAa,GAAGlvB,iBAAiB+D,iBAAiB71B,IAC9Fq4C,EAAUnmB,oBAAsBn4B,KAAKurD,aAAa,IAAI,CACtD,MAAMypB,EAA6C12B,EAAU6qB,SAAS,GAAGhiB,2BACzE,GAAI6tB,EAAuB,CACvB,MAAMC,EAAgDD,EAAsBhU,sBAAsBh+C,OAClGkpD,EAASjmE,EAAIgvE,EAAgBl9C,iBAAiB+D,iBAAiB71B,EAE/DjG,KAAKk4B,MAAMsO,cACX0lC,EAASjmE,EAAIq4C,EAAUvmB,iBAAiB+D,iBAAiB71B,EACrDq4C,EAAU6qB,SAAS,GAAGpxC,iBAAiB+D,iBAAiB71B,GAMxE,IAAK,MAAM0uD,KAAS8f,EAAqBnI,YAAa,CAClD,IAAIl4C,EAAmC,EAAAD,kBAAkBO,aACrD10B,KAAKk4B,MAAMsO,cACXpS,EAAgB,EAAAD,kBAAkBI,YAEtC,MAAMo4C,EAA6B3sE,KAAK09C,eAAeY,EACA4tB,EACAvX,EAAMt8B,MACNo8C,EAAqB7H,2BACrBjY,EAAMmgB,WAAWt8C,UACjBx4B,KAAKk4B,MAAM2Z,kBACXzd,GAEvD,GAAIugC,EAAMmgB,sBAAsB,EAAAC,6BAA8B,CAE1D,IAAK,MAAMG,KAAQ52B,EAAUrmB,oBACrBi9C,aAAgB,EAAAtxB,wCACfsxB,EAAK38C,iBAA6CH,MAAUu8B,EAAMmgB,WAAW18C,OActF,GARkE,IAAI,EAAAwrB,sCAAsC+Q,EAAMmgB,WAAYnI,GACtGr0C,iBACpB,UAAIknB,KAAK,gCAMTx/C,KAAKk4B,MAAM+b,qBACN0gB,EAAMmgB,WAA4CK,OAAS,EAAAC,UAAUC,cAAe,CACrFr1E,KAAKs1E,oBAAqB3gB,EAAMmgB,YAChC,eAGDngB,EAAMmgB,WAAsB,EAAAS,4BAoBzCD,oBAAoBE,GAC1B,MAAM,IAAI90E,MAAMV,KAAKukE,oCAGfkR,oCAAoC/9C,IAIpC4uC,0BACN,IAAK,IAAIhpC,EAAc,EAAGC,EAAcv9B,KAAK6tD,oBAAoBpB,WAAW3rD,OAAQw8B,EAAMC,IAAOD,EAAK,CAClG,MAAM6wB,EAAyCnuD,KAAK6tD,oBAAoBpB,WAAWnvB,GACnF,IAAK,IAAIgsB,EAAe,EAAGC,EAAe4E,EAAmB1C,aAAa3qD,OAAQwoD,EAAOC,IAAQD,EAAM,CACnG,MAAM4f,EAA2B/a,EAAmB1C,aAAanC,GACjE,IAAK,IAAIolB,EAAe,EAAGC,EAAezF,EAAYpT,WAAWh1D,OAAQ4tE,EAAOC,IAAQD,EAAM,CAC1F,MAAMpwB,EAAuB4qB,EAAYpT,WAAW4Y,GACpD,IAAK,IAAIgH,EAAe,EAAGC,EAAer3B,EAAU6qB,SAASroE,OAAQ40E,EAAOC,IAAQD,EAAM,CACtF,MAAM9mB,EAAqCtQ,EAAU6qB,SAASuM,GAC9D,GAAI9mB,EAAiBzH,2BAA4B,CAC7C,MAAM95C,EAAgBuhD,EAAiB72B,iBAAiBiF,cAAch7B,QAClE4sD,EAAiBzH,2BAA2BpvB,kBAE5C1qB,GAAS,GACTuhD,EAAiB72B,iBAAiBiF,cAAc5X,OAAO/X,EAAO,GAElEuhD,EAAiBzH,gCAA6B7gC,EAC9CsoC,EAAiB4M,uBAAyB,EAE9C,GAAI5M,EAAiBvH,0BAA2B,CAC5C,MAAMh6C,EAAgBuhD,EAAiB72B,iBAAiBiF,cAAch7B,QAClE4sD,EAAiBvH,0BAA0BtvB,kBAE3C1qB,GAAS,GACTuhD,EAAiB72B,iBAAiBiF,cAAc5X,OAAO/X,EAAO,GAElEuhD,EAAiBvH,+BAA4B/gC,EAC7CsoC,EAAiBgnB,qBAAuB,GAGhDt3B,EAAU6qB,SAAW,GACrB7qB,EAAUvmB,iBAAiBiF,cAAgB,GAE/CksC,EAAYpT,WAAWh1D,OAAS,EAChCooE,EAAYnxC,iBAAiBiF,cAAgB,GAEjDmxB,EAAmB1C,aAAe,GAClC0C,EAAmBp2B,iBAAiBiF,cAAgB,GAExDh9B,KAAK6tD,oBAAoBpB,WAAa,GAGhCopB,iBAAiBpsB,EAAwBlE,EACxBuwB,EAA4C9N,EAC5C1P,EACAmQ,EAAuBjB,EACvBI,EAA8BnZ,EAC9BsnB,EACAntB,GACnBa,EAAWusB,mBAAqB,EAAA1X,kBAAkB2X,WAClDj2E,KAAKk4B,MAAM8T,kCACqB1lB,IAAhCmjC,EAAWusB,iBACPvsB,EAAWysB,oBAAsBzsB,EAAWusB,iBAEhDh2E,KAAKm2E,iCAAiC1sB,GAG1C,MAAMQ,EAA2B1E,EAAoByc,gCAAgCvY,GACrFQ,EAAI2d,iBAAmBA,EAEvB,MAAMpH,EAAqCjb,EAAoBib,cAC/D,IAAI4V,EACA5V,IACA4V,EAAyB5V,EAAcwB,gCAAgCvY,IAG3E,IAAK,IAAInsB,EAAc,EAAGC,EAAcksB,EAAW7D,MAAM9kD,OAAQw8B,EAAMC,IAAOD,EAAK,CAC/E,MAAMlO,EAAaq6B,EAAW7D,MAAMtoB,GACpC,IAAKlO,EACD,SAEJ,QAAyB9I,IAArBsiC,QAA4DtiC,IAA1BsiC,EAAiB+Y,WAAsCr7C,IAAhByvD,GAA6BA,EAAY/zE,QAAQotB,IAAS,EACnI,SAEJ,IAAIqK,EAuBJ,GAtBIgwB,EAAW4sB,QACX58C,EAAgBM,EAAqBC,cAAcs8C,gBAAgBlnD,EAAM66B,EAAKqO,EAAYt4D,KAAKk4B,MAAO0vC,IAEtGnuC,EAAgBM,EAAqBC,cAAcu8C,WAAWnnD,EAAM66B,EAAKqO,EAAYsP,EAAkB5nE,KAAKk4B,WAAO5R,GACnHyT,EAAqBy8C,wBAAwBC,UAAUh9C,IAEvDrK,EAAKX,OACLzuB,KAAK02E,uBAAuBj9C,EAAeq8C,EAAsBxd,EAAYsP,GAEjF5nE,KAAK22E,2BAA2Bl9C,EAAc1B,kBAC9CwtB,EAAoB6c,yCAAyCnY,EAAKxwB,GAClEA,EAAc1B,iBAAiB2F,uBAC1B19B,KAAKqsD,iBACgB/lC,IAAlB8I,EAAKwnD,UAA0BxnD,EAAKynD,aACpC72E,KAAKsnE,WAAW7tC,EAAerK,EAAKwnD,SAAUpP,QAE1BlhD,IAApB8I,EAAKupC,YAA4BvpC,EAAKynD,aACtC72E,KAAKuoE,aAAa9uC,EAAerK,EAAKupC,WAAY8P,IAKtD2N,EAAwB,CAExB,MAAMU,EAAkC/8C,EAAqBC,cAAcu8C,WACvEnnD,EACAgnD,EACA9d,EACAsP,EACA5nE,KAAKk4B,WACL5R,GACJk6C,EAAc4B,yCAAyCgU,EAAwBU,GAC/EA,EAAiB/+C,iBAAiB2F,uBAE7B19B,KAAKqsD,WACFj9B,EAAKupC,YACL34D,KAAKuoE,aAAauO,EAAkB1nD,EAAKupC,WAAY8P,IAiBrE,OAZIhf,EAAWstB,cAAcj2E,OAAS,GAClCd,KAAKmoE,8BAA8B1e,EAAWstB,cAAettB,EAAYlE,GAEzEkE,EAAWutB,sBAAsBl2E,OAAS,GAC1Cd,KAAKqoE,sCAAsC5e,EAAWutB,sBAAuBvtB,EAAYlE,GAEzFkE,EAAWqV,cAAc7uD,OAAS,GAClCjQ,KAAK+nE,uBAAuBte,EAAYlE,EAAqByiB,GAE7Dve,EAAWwtB,mBACXj3E,KAAKioE,0BAA0Bxe,EAAWwtB,kBAAmBxtB,EAAYlE,GAEtEqiB,EAGD+O,2BAA2Bn3C,GAC7Bx/B,KAAKqsD,YACL7sB,EAAI1D,iBAAmB,IAAI,EAAAhP,SAAS0S,EAAI1D,iBAAiB71B,EAAG,IAI1DixE,mBAAmB3xB,EAA0CkJ,GAEnE,GADAlJ,EAAoBxtB,iBAAiB+D,iBAAmB,IAAI,EAAAhP,SAAS,EAAK,IACrE9sB,KAAKqsD,UACN,IAAK,MAAMpC,KAAO1E,EAAoB2E,sBAAuB,CACzD,MAAMmY,EAAkCpY,EAAIG,MAC5C,GAA8B,IAA1BiY,EAAevhE,OACf,SAEJ,MAAM2oD,EAAyB4Y,EAAe,GAAGjK,WAAWwG,iBACtD+J,OAAiEriD,IAAvC+7C,EAAe,GAAGjK,WAAW3pC,MAC7DzuB,KAAK0oE,iBAAiBjf,EAAY4Y,EAAgB9c,EAAqBojB,IAKzEhC,gCACN,IAAIwQ,EAAyB,EAC7B,IAAK,MAAMxlB,KAAc3xD,KAAK6tD,oBAAoBtB,iBAAiB2K,YAC/D,IAAwB,QAApB,EAAAvF,EAAWylB,iBAAS,eAAEC,QAAS1lB,EAAW2lB,OAAOx2E,OAAS,GAAK6wD,EAAW2lB,OAAO,GAAGztB,QAAS,CAC7F,IAAI0tB,EAAuB5lB,EAAWylB,UACjCp3E,KAAKk4B,MAAMuP,kBACZ8vC,EAAgB,IAAI,EAAAn/C,MAAM,GAAIm/C,EAAcnjD,cAAemjD,EAAc5yB,OAE7E,MAAM9G,EAAiC,IAAI,EAAAD,eACvC25B,EAAev3E,KAAKk4B,MAAMqR,0BAA2B,EAAApV,kBAAkBG,WAAYt0B,KAAKk4B,OAC5F2lB,EAAemG,kCACfmzB,EAAiB1oE,KAAKN,IAAIgpE,EAAgBt5B,EAAe9lB,iBAAiBgE,WAAWnI,OAG7F,OAAK5zB,KAAKk4B,MAAMuP,gBAGT0vC,EAFI,EAKL1Q,mCACN,MAAM1a,EAAyB/rD,KAAK6tD,oBAAoBtB,iBAClDirB,EAA4Bx3E,KAAKk4B,MAAMwhB,kBAC7C,QAAyBpzB,IAArBylC,EAAWa,OAAuB5sD,KAAKk4B,MAAMmP,YAAa,CAC1D,MAAMwlB,EAAwB,IAAI,EAAAjP,eAAemO,EAAWa,MAAO5sD,KAAKk4B,MAAMkQ,iBAAkB,EAAAjU,kBAAkBO,aAAc10B,KAAKk4B,OACrI20B,EAAMz0B,MAAMq/C,eAAgB,EAC5B5qB,EAAMz0B,MAAM4lB,aAAew5B,EAC3Bx3E,KAAK6tD,oBAAoBjB,MAAQC,EACjCA,EAAM7I,uCACEhkD,KAAKk4B,MAAMmP,cACnBrnC,KAAK6tD,oBAAoBjB,WAAQtmC,GAErC,QAA4BA,IAAxBylC,EAAWe,UAA0B9sD,KAAKk4B,MAAMoP,eAAgB,CAChE,MAAMylB,EAA2B,IAAI,EAAAnP,eACjCmO,EAAWe,SAAU9sD,KAAKk4B,MAAMmQ,oBAAqB,EAAAlU,kBAAkBM,aAAcz0B,KAAKk4B,OAC9F60B,EAAS30B,MAAMq/C,eAAgB,EAC/B1qB,EAAS30B,MAAM4lB,aAAew5B,EAC9Bx3E,KAAK6tD,oBAAoBf,SAAWC,EACpCA,EAAS/I,uCACDhkD,KAAKk4B,MAAMoP,iBACnBtnC,KAAK6tD,oBAAoBf,cAAWxmC,GAExC,QAA4BA,IAAxBylC,EAAWiB,UAA0BhtD,KAAKk4B,MAAMqP,eAAgB,CAChE,MAAM0lB,EAA2B,IAAI,EAAArP,eACjCmO,EAAWiB,SAAUhtD,KAAKk4B,MAAMqQ,oBAAqB,EAAApU,kBAAkBS,YAAa50B,KAAKk4B,OAC7F+0B,EAAS70B,MAAMq/C,eAAgB,EAC/BxqB,EAAS70B,MAAM4lB,aAAew5B,EAC9Bx3E,KAAK6tD,oBAAoBb,SAAWC,EACpCA,EAASjJ,uCACDhkD,KAAKk4B,MAAMqP,iBACnBvnC,KAAK6tD,oBAAoBb,cAAW1mC,GAExC,QAA4BA,IAAxBylC,EAAWmB,UAA0BltD,KAAKk4B,MAAMsP,eAAgB,CAChE,MAAM2lB,EAA2B,IAAI,EAAAvP,eACjCmO,EAAWmB,SAAUltD,KAAKk4B,MAAMsQ,kBAAmB,EAAArU,kBAAkBG,WAAYt0B,KAAKk4B,OAC1Fi1B,EAAS/0B,MAAMq/C,eAAgB,EAC/BtqB,EAAS/0B,MAAM4lB,aAAew5B,EAC9Bx3E,KAAK6tD,oBAAoBX,SAAWC,EACpCA,EAASnJ,uCACDhkD,KAAKk4B,MAAMsP,iBACnBxnC,KAAK6tD,oBAAoBX,cAAW5mC,GAIlCoxD,iCACN,IAAK,IAAIpuB,EAAe,EAAGC,EAAevpD,KAAKurD,aAAazqD,OAAQwoD,EAAOC,IAAQD,EAAM,CACrF,MAAM4f,EAA2BlpE,KAAKurD,aAAajC,GACnD,IAAK,IAAIolB,EAAe,EAAGC,EAAezF,EAAYpT,WAAWh1D,OAAQ4tE,EAAOC,IAAQD,EAAM,CAC1F,MAAMpwB,EAAuB4qB,EAAYpT,WAAW4Y,GACpD,IAAK,IAAIgH,EAAe,EAAGC,EAAer3B,EAAU6qB,SAASroE,OAAQ40E,EAAOC,IAAQD,EAAM,CACtF,MAAMh+C,EAA4B4mB,EAAU6qB,SAASuM,GACrD,GAAoC,IAAhCh+C,EAAQuvB,aAAanmD,OAAc,CACnC,MAAM2zD,EAA2B/8B,EAAQuvB,aAAa,GACtD,GAAIwN,EAAIvK,sBAAsBppD,OAAS,GAAmD,IAA9C2zD,EAAIvK,sBAAsB,GAAGE,MAAMtpD,OAAc,CACzF,MAAM24B,EAA+Bg7B,EAAIvK,sBAAsB,GAAGE,MAAM,IACnE3wB,EAAc2+B,WAAW3pC,OAAS,IAAK,EAAAzF,SAAS,EAAG,GAAImC,GAAGsO,EAAc2+B,WAAWvS,SACpF7lD,KAAKmwE,2BAA2B12C,EAAeg7B,EAAK/8B,QAStEigD,0BAA0BpyB,EAA0C7tB,GAC1E,GAAyD,IAArD6tB,EAAoB2E,sBAAsBppD,OAC1C,OAEJ,MAAM82E,EAA+BryB,EAAoB2E,sBAAsB,GAAGE,MAClF,GAA2B,IAAvBwtB,EAAY92E,OACZ,OAEJ,MAAM+2E,EAA6BD,EAAY,GACzCE,EAA6BD,EAAYzf,WAAWgJ,SAC1D,GAAyD,IAArD7b,EAAoB2E,sBAAsBppD,OAAc,CACxD,IAAIi3E,GAA6B,EACjC,MAAMC,EAA+BzyB,EAAoB2E,sBAAsB,GAAGE,MAC9E4tB,EAAYl3E,OAAS,IAErBi3E,EADmCC,EAAY,GACf5f,WAAWgJ,UAE3C0W,GAAqBC,EACrB/3E,KAAKi4E,qDAAqD1yB,IACnDuyB,GAAqBC,IAC5B/3E,KAAKk4E,kEAAkE3yB,QAExE,GAAIuyB,GAAqBvyB,IAAwB7tB,EAAQuvB,aAAa,IACzE1B,IAAwB7tB,EAAQuvB,aAAavvB,EAAQuvB,aAAanmD,OAAS,GAAI,CAC/E,MAAMq3E,EAA0BzgD,EAAQuvB,aAAajlD,QAAQujD,GACvD2Q,EAA0Cx+B,EAAQuvB,aAAakxB,EAAkB,GACjFhiB,EAAsCz+B,EAAQuvB,aAAakxB,EAAkB,GACnF,GAAwD,IAApDjiB,EAAmBhM,sBAAsBppD,OAAc,CACvD,MAAM6vE,EAA8Bza,EAAmBhM,sBAAsB,GAAGE,MAAM,GACtF,QAAyC9jC,IAArCqqD,EAAavY,WAAWwe,UAA0E,IAAhDzgB,EAAejM,sBAAsBppD,OAAc,CACrG,MAAM8vE,EAA0Bza,EAAejM,sBAAsB,GAAGE,MAAM,QACzC9jC,IAAjCsqD,EAASxY,WAAWwe,UAA0BjG,EAAavY,WAAWwe,WAAahG,EAASxY,WAAWwe,WACvG52E,KAAKywE,8CACDlrB,EAAqBsyB,EAAalH,EAClCxa,EAAgBya,GAEpBrrB,EAAoBxtB,iBAAiB2F,2BAO/C8uC,4CAA4Ctc,EAAqB2kB,EAAuBv2B,EAC5C85B,EAA+BC,EAAuC,GACxH,IACIC,EACAC,EAFArM,EAAqB,IAAI,EAAAp/C,SAG7B,MAAM0rD,EAAqBx4E,KAAK6tD,oBAAoBlB,sCAAsC7rD,OACpFuM,EAAgBrN,KAAK6tD,oBAAoB+C,yCAAyCV,GAClFe,EAAoBxiD,KAAKC,IAAID,KAAKuC,MAAM3D,GAAQmrE,EAAa,GAC7DtnB,EAAqBziD,KAAKC,IAAID,KAAKinD,KAAKroD,GAAQmrE,EAAa,GACnE,GAAIvnB,EAAY,GAAK4jB,EAAgB,EACjC,OAAO3I,EAIX,GAFAoM,EAAiBt4E,KAAKy4E,2CAA2CxnB,EAAW4jB,EAAeuD,GAC3FG,EAAkBv4E,KAAK04E,4CAA4CxnB,EAAY2jB,EAAeuD,GAC1FE,GAAkBC,EAAiB,CACnC,IAAII,EAA2BL,EAAe1gD,cAAcG,iBAAiB+D,iBAAiB71B,EAC1FoyE,EAA+B,IAC/BM,EAAmBN,GAEvB,IAAIO,EAAgBN,EAAevgD,iBAAiB+D,iBAAiB71B,EAAI0yE,EACrEE,EAAiBN,EAAgBxgD,iBAAiB+D,iBAAiB71B,EAAIsyE,EAAgB3gD,cAAcG,iBAAiB+D,iBAAiB71B,EACvIoyE,EAA+B,IAC/BQ,EAASN,EAAgBxgD,iBAAiB+D,iBAAiB71B,EAAI0yE,GAEnE,IAAIG,EAA4B,EAChC,GAAIR,IAAmBC,EAAiB,CACpC,MAAMQ,EAA0BT,EAAexvB,uBACzCkwB,EAA2BT,EAAgBzvB,uBAEjDgwB,EADiC,EAAA9vD,SAASgxC,MAAM9J,EAAW6oB,GACxBtvD,UAAY,EAAAT,SAASgxC,MAAMgf,EAAgBD,GAAetvD,UAE7F6uD,EAAe1gD,cAAcU,kBAAoBigD,EAAgB3gD,cAAcU,kBAC3EggD,EAAe1gD,cAAcU,kBAAoBgmB,EACjDu6B,EAASv6B,EAAUvmB,iBAAiBhE,KAAKH,MAEzCglD,EAAQt6B,EAAUvmB,iBAAiB+D,iBAAiB71B,GAG5DimE,EAAW,IAAI,EAAAp/C,SAAS8rD,GAASC,EAASD,GAASE,EAAmB,GAE1E,OAAO5M,EAGD+M,kCAAkC/oB,GACxC,MAAMsoB,EAAqBx4E,KAAK6tD,oBAAoBlB,sCAAsC7rD,OACpFuM,EAAgBrN,KAAK6tD,oBAAoB+C,yCAAyCV,GAClFgpB,EAAwBzqE,KAAKN,IAAI,EAAGM,KAAKC,IAAID,KAAKub,MAAM3c,GAAQmrE,EAAa,IAC7E/jB,EAA2Bz0D,KAAK6tD,oBAAoBlB,sCAAsCusB,GAAe1H,4BAE/G,OADqB/c,EAAI18B,iBAAiB+D,iBAAiB71B,EAAIwuD,EAAI78B,cAAcG,iBAAiB+D,iBAAiB71B,EAI7GwpE,oBAAoB0J,SACtBn5E,KAAKk4B,MAAM6f,kCACXohC,EAAKphD,iBAAiBqE,YAAc+8C,EAAKphD,iBAAiBhE,KAAKH,MAC/DulD,EAAKphD,iBAAiB2F,uBACtB19B,KAAK6tD,oBAAoBtB,iBAAiB6sB,UAAYD,EAAKphD,iBAAiBhE,KAAKH,OAIrF,IAAIylD,EAAuC,GAC3C,GAAIF,EAAK1tB,aAAa3qD,OAAS,EAAG,CAC9B,MAAMw4E,EAAgCH,EAAK1tB,aAAa,GACxD4tB,EAA+BC,EAAiBvhD,iBAAiB+D,iBAAiBh2B,EAAIwzE,EAAiBvhD,iBAAiBsE,UAG5H,GAAIr8B,KAAK6tD,oBAAoBjB,MAAO,CAChC,MAAMC,EAAwB7sD,KAAK6tD,oBAAoBjB,MACvDC,EAAM90B,iBAAiBY,OAASwgD,EAAKphD,iBAErC,MAAMm0C,EAAqB,IAAI,EAAAp/C,SAC/Bo/C,EAASjmE,EAAIjG,KAAK6tD,oBAAoBtB,iBAAiB6sB,UAAY,EAEnElN,EAASpmE,EAAI9F,KAAKk4B,MAAM2Q,iBAAmB7oC,KAAKk4B,MAAMkQ,iBACtDykB,EAAM90B,iBAAiB+D,iBAAmBowC,EAC1CiN,EAAKztB,OAAOnqD,KAAKsrD,GAErB,GAAI7sD,KAAK6tD,oBAAoBf,SAAU,CACnC,MAAMC,EAA2B/sD,KAAK6tD,oBAAoBf,SAE1DC,EAASh1B,iBAAiBY,OAASwgD,EAAKphD,iBACxC,MAAMm0C,EAAqB,IAAI,EAAAp/C,SAC/Bo/C,EAASjmE,EAAIjG,KAAK6tD,oBAAoBtB,iBAAiB6sB,UAAY,EAEnElN,EAASpmE,EAAI9F,KAAKk4B,MAAM2Q,iBAAmB7oC,KAAKk4B,MAAMkQ,iBAAmBpoC,KAAKk4B,MAAMoQ,4CACpFykB,EAASh1B,iBAAiB+D,iBAAmBowC,EAC7CiN,EAAKztB,OAAOnqD,KAAKwrD,GAMrB,MAAME,EAA2BjtD,KAAK6tD,oBAAoBb,SAC1D,IAAIusB,EACJ,GAAItsB,EAAU,CACVA,EAASl1B,iBAAiBY,OAASwgD,EAAKphD,iBAGxCk1B,EAASjJ,kCACT,MAAMkoB,EAAqB,IAAI,EAAAp/C,SAK/Bo/C,EAASjmE,EAAIjG,KAAK6tD,oBAAoBtB,iBAAiB6sB,UAAYp5E,KAAKk4B,MAAMkP,gBAK9E8kC,EAASpmE,EAAIuzE,EAabnN,EAASpmE,GAAK9F,KAAKk4B,MAAMoR,uBACzB,MAAMha,EAAkC,QAAlB,EAAA29B,EAAS/I,iBAAS,eAAEpjD,OACtCwuB,EAAQ,IACR48C,EAASpmE,GAAKmnD,EAASl1B,iBAAiBuE,cAAgBhN,EAAQ,GAAK,GAKzEiqD,EAAoBrN,EAASpmE,EAE7BmnD,EAASl1B,iBAAiB+D,iBAAmBowC,EAC7CiN,EAAKztB,OAAOnqD,KAAK0rD,GAErB,MAAME,EAA2BntD,KAAK6tD,oBAAoBX,SAC1D,GAAIC,EAAU,CACVA,EAASp1B,iBAAiBY,OAASwgD,EAAKphD,iBACxCo1B,EAASnJ,kCACT,MAAMkoB,EAAqB,IAAI,EAAAp/C,SAC/Bo/C,EAASjmE,EAAIjG,KAAKk4B,MAAMiP,eACxB+kC,EAASpmE,EAAIuzE,EAKbnN,EAASpmE,GAAKqnD,EAASp1B,iBAAiBuE,aACxC4vC,EAASpmE,EAAI2I,KAAKC,IAAIw9D,EAASpmE,EAAGyzE,MAAAA,EAAAA,EAAqB37C,OAAOw1B,kBAK9DjG,EAASp1B,iBAAiB+D,iBAAmBowC,EAC7CiN,EAAKztB,OAAOnqD,KAAK4rD,IAIfqZ,sBACN,IAAK,IAAIhY,EAAuB,EAAGA,EAAexuD,KAAK6tD,oBAAoBtB,iBAAiB4Y,eAAerkE,OAAQ0tD,IAAgB,CAC/H,MAAMzD,EAA+B/qD,KAAK6tD,oBAAoBtB,iBAAiB4Y,eAAe3W,GAC9F,IAAK,IAAIC,EAAqB,EAAGA,EAAa1D,EAAc2E,uBAAwBjB,IAChF,IAAK,IAAI3wC,EAAY,EAAGA,EAAIitC,EAAcyuB,mCAAmC14E,OAAQgd,IAAK,CACtF,MAAM8qC,EAAqCmC,EAAcyuB,mCAAmC17D,GAAGm3C,aAAaxG,GAC5G,GAAI7F,EAAkB,CAClB,MAAMuR,EAAuCn6D,KAAK6tD,oBAAoBc,uCAClEF,EAAYD,EAAc5F,GAE1BuR,IACAA,EAAgB8G,cAAc7nC,QAC9B+gC,EAAgBwG,KAAKvnC,SAGzB,IAAK,IAAIkE,EAAc,EAAGC,EAAcqrB,EAAiBY,aAAa1oD,OAAQw8B,EAAMC,IAAOD,EAAK,CAC5F,MAAMmsB,EAAyBb,EAAiBY,aAAalsB,GAC7D,IAAK,IAAIgsB,EAAe,EAAGC,EAAeE,EAAW7D,MAAM9kD,OAAQwoD,EAAOC,IAAQD,EAAM,CACpF,MAAMl6B,EAAaq6B,EAAW7D,MAAM0D,GACpC,GAAIl6B,EAAKiyC,QAAS,CACd,MAAM+B,EAAWh0C,EAAKiyC,QACtB,GAAIjyC,IAASA,EAAKiyC,QAAQzb,MAAM5iC,OAC5B,SAEJ,GAAIm3C,EACA,IAAK,MAAMsf,KAAQtf,EAAgB8G,cAC3BwY,EAAK/V,IAKjB1jE,KAAK05E,UAAUtW,EAAKjJ,EAAiB1L,EAAYD,KAI7DxuD,KAAK25E,iBAAiBxf,MAOlCuf,UAAUtW,EAAUwW,EAA+CnrB,EAAoBD,GAC3F,IAAKorB,EAED,OAEJA,EAAyBjZ,KAAKp/D,KAAK6hE,GAEnC,IACIC,EACA0F,EACAzF,EAHAwF,EAAgC8Q,EAIpC,IAAK,IAAIn5E,EAAY,EAAGA,EAAI2iE,EAAIxd,MAAM9kD,OAAQL,IAG1C,GAFA4iE,EAAYyF,EAAS5H,6BAA6BkC,EAAIxd,MAAMnlD,EAAI,IAChEsoE,EAAS/oE,KAAK6tD,oBAAoByJ,iCAAiC8L,EAAIxd,MAAMnlD,GAAGyiE,kBAC3E6F,EAAL,CAIA,GADAzF,EAAUyF,EAAO7H,6BAA6BkC,EAAIxd,MAAMnlD,SACtC6lB,IAAd+8C,QAAuC/8C,IAAZg9C,GAAyByF,EAAQ,CAC5D,IAAK1F,EAAUjL,WAAWye,cAAgBvT,EAAQlL,WAAWye,YACzD,SAEJ,MAAMgD,EAA6B75E,KAAK6oE,mBAAmBzF,EAAK0F,EAAUC,EAAQ1F,EAAWC,GAC7FwF,EAAS7H,cAAc1/D,KAAKs4E,GACxB75E,KAAKkkE,8BAA8BliE,QAAQ8mE,IAAa,GACxD9oE,KAAKkkE,8BAA8B3iE,KAAKunE,GAGhDA,EAAWC,GAIX4Q,iBAAiBtwB,GACrB,IAAKA,EACD,OAEJ,MAAMsX,EAActX,EAAWsX,KAC/B,GAAIA,EAAK7/D,OAAS,EAAG,CACjB,IAAIg5E,EACJ,IAAK,MAAMC,KAAUpZ,EAAM,CACvB,MAAMQ,EAAgB4Y,EAAOn0B,MAAM,KAC9Bk0B,GAAe3Y,EAAQ1yC,MAAM0D,cAAgB2nD,EAAYrrD,MAAM0D,iBAChE2nD,EAAc3Y,GAGtB,IAAK,MAAM4Y,KAAUpZ,EACboZ,EAAOC,eAAiB,EAAAp1C,cAAcq1C,gBAClCF,EAAOn0B,MAAM,KAAOk0B,EACpBC,EAAOC,aAAe,EAAAp1C,cAAckb,MAEpCi6B,EAAOC,aAAe,EAAAp1C,cAAcwb,QAOhD0kB,8BACJ,MAAMD,EAAgD,GAChDrV,EAAoCxvD,KAAK6tD,oBAAoBtB,iBAAiBkD,wBACpF,GAAID,EACA,IAAK,IAAI/uD,EAAY,EAAGA,EAAI+uD,EAAmBE,uBAAwBjvD,IAAK,CACxE,MAAMq1E,EAA6C,IAAI,EAAAoE,qBAEvD,GADArV,EAAsBtjE,KAAKu0E,GACvBtmB,EAAmBI,8BAA8BnvD,GACjD,IAAK,IAAI68B,EAAc,EAAGC,EAAciyB,EAAmBI,8BAA8BnvD,GAAGovD,aAAa/uD,OAAQw8B,EAAMC,IAAOD,EAAK,CAC/H,MAAMwyB,EAA2DN,EAAmBI,8BAA8BnvD,GAAGovD,aAAavyB,GAClI,GAAIwyB,aAAuC,EAAAE,eAAgB,CACvD,MAAMxS,EAAiDsS,EACvDgmB,EAAqB98C,qBAAuBwkB,IAMhE,OAAOqnB,EAGHuB,kCACJ,MAAM+T,EAA0Bn6E,KAAK6tD,oBAAoBnB,YAAY,GAAG5rD,OACxE,IAAK,IAAIL,EAAY,EAAGA,EAAIT,KAAK6tD,oBAAoBnB,YAAY5rD,OAAQL,IACrE,IAAK,IAAIqd,EAAY,EAAGA,EAAIq8D,EAAiBr8D,IAAK,CAC9C,MAAM4Z,EAA4B13B,KAAK6tD,oBAAoBnB,YAAYjsD,GAAGqd,GAC1E,GAAK4Z,EAGL,IAAK,IAAI4F,EAAc,EAAGC,EAAc7F,EAAQuvB,aAAanmD,OAAQw8B,EAAMC,IAAOD,EAAK,CACnF,MAAMioB,EAA2C7tB,EAAQuvB,aAAa3pB,GAChE88C,EACFp6E,KAAK6tD,oBAAoBoC,6BAA6B1K,EAAoBuD,wBAC1EsxB,IACAA,EAAkBnlB,aAAan3C,GAAKynC,EACpCA,EAAoBub,wBAA0BsZ,KAO1D/T,0CACJ,IAAK,IAAI5lE,EAAY,EAAGA,EAAIT,KAAK6tD,oBAAoBlB,sCAAsC7rD,OAAQL,IAC/FT,KAAK6tD,oBAAoBlB,sCAAsClsD,GAAG45E,MAAQ55E,EAI1E2kE,wCAAwCra,EAA8B8Z,EAC9BmD,EACA9C,EAAuC3V,GACnFvvD,KAAKqnE,gCACL,MAAMiT,EAA0C,GAC1C9S,EAAoB,GACpBiB,EAAwB,GACxBsE,EAAoC,GAC1C,IAAIwN,GAAsC,EAC1C,IAAK,IAAI9rB,EAAqB,EAAGA,EAAa1D,EAAc2E,uBAAwBjB,IAAc,CAC9F,MAAM/2B,EAA4B13B,KAAKw6E,uBACnCzvB,EAAe0d,EAAajB,EAC5B3C,EAAsBpW,GAAac,EAAa2V,EAAkB8C,EAAgBvZ,EAAYse,GAElGwN,EAA6BA,GAA8B7iD,EAAQmvB,aACnEyzB,EAAoB/4E,KAAKm2B,GAO7B,OALAqzB,EAAc0vB,SAAWF,EACzBxvB,EAAcyM,oBAAsB8iB,EAI7BA,EAGHE,uBAAuBzvB,EAA8B0d,EAAuBjB,EACrDsO,EAA4CvmB,EAC5C2V,EAAuC8C,EAA6BvZ,EACpEse,mBAC3B,MAAMnmB,EAAe5mD,KAAK6tD,oBAAoBtB,iBAAiBmuB,kBAAkBjsB,GACjF,IAAI/2B,EACJ,GAAI63B,EAAYd,GAAYuX,WAAa,EAAAC,SAAS0U,IAC9C/zB,EAAM6jB,OAAQ,EACd/yC,EAAUqC,EAAqBC,cAAc4gD,sBAAsB7vB,EAAenE,QAC/E,GAAImE,EAAcsa,sBAAwBrlE,KAAKk4B,MAAMoe,2BACxD5e,EAAUqC,EAAqBC,cAAc6gD,uBAAuB9vB,EAAenE,OAChF,IAAImE,EAAcwa,0BAA4B,EACjD,OAEA7tC,EAAUqC,EAAqBC,cAAcwgD,uBAAuBzvB,EAAenE,GAIvF,GAFAlvB,EAAQojD,SAAW/vB,EAAcgwB,kBAAkBtsB,GAE/C1D,EAAc6E,8BAA8BnB,GAC5C,IAAK,IAAInxB,EAAc,EAAGC,EAAcwtB,EAAc6E,8BAA8BnB,GAAYoB,aAAa/uD,OAAQw8B,EAAMC,IAAOD,EAAK,CACnI,MAAM09C,EAA2CjwB,EAAc6E,8BAA8BnB,GAAYoB,aAAavyB,GACtH,GAAI09C,aAAuB,EAAAhrB,eAAgB,CACvC,MAAMz/B,EAAsB,EAAAy/B,eAAeirB,KAAKD,GAC1Cv9B,EAA6B/lB,EAAQyzB,yBAChB,IAAvB1N,GACA/lB,EAAQsvB,YAAY4C,iBAAiBsxB,mBAAqB,EAAAC,eAAeC,YACzErhD,EAAqB0+B,qBACrB1+B,EAAqB0+B,oBAAoB4iB,aACrC9qD,EAAKktB,GAGbq4B,EAAqB98C,qBAAuBzI,GAKxD,MAAM+qD,EAAkC,GACxC,IAAK,IAAIh+C,EAAc,EAAGC,EAAcwtB,EAAcwwB,uBAAuB9sB,GAAY3tD,OAAQw8B,EAAMC,IAAOD,EAAK,CAC/G,MAAMwuC,EAAmC/gB,EAAcwwB,uBAAuB9sB,GAAYnxB,GAC1F,GAAIwuC,EAAgB0P,iBAAkB,CAClCF,EAAa/5E,KAAKuqE,GAClB,MAAM2P,EAA+B3P,EAAgB0P,iBACrD,IAAIE,EAAiE,QAAzC,EAAAD,MAAAA,OAAe,EAAfA,EAAiBE,gCAAwB,eAAEprB,mBAClEkrB,MAAAA,OAAe,EAAfA,EAAiBE,4BAElBD,EADsC,EAAA1yD,SAASooC,KAAKrG,EAAcwF,kBAAmBxF,EAAc7B,WAMvGgc,EAAiBzW,GAAc,IAAI,EAAAmtB,kBAC/BH,EAAiB3P,MAAAA,OAAe,EAAfA,EAAiBvb,kBAClCmrB,IAKZ,IAAK,IAAIG,EAAqB,EAAGA,EAAa9wB,EAAcyuB,mCAAmC14E,OAAQ+6E,IAAc,CACjH,MAAMjzB,EAAqCmC,EAAcyuB,mCAAmCqC,GAAY5mB,aAAaxG,GAErH,GAAI7F,EAAkB,CAGlB,IAAK,IAAItrB,EAAc,EAAGC,EAAcqrB,EAAiBiH,aAAa/uD,OAAQw8B,EAAMC,IAAOD,EAAK,CAC5F,MAAMwyB,EAA2DlH,EAAiBiH,aAAavyB,GAC3FwyB,aAAuC,EAAAH,kBACvCJ,EAAYd,GAA+BqB,GAInD,MAAMvK,EAA2CxrB,EAAqBC,cAAc8hD,iBAAiBlzB,EAAkBlxB,GACnHmkD,EAAankD,EAAQuvB,aAAanmD,OAElC42B,EAAQ8yB,kCAAkCjF,GAE1C7tB,EAAQ6yB,uBAAuBhF,GAGnC,MAAMwwB,EAAsB,GACxBntB,EAAiB+Y,OACjB/Y,EAAiBmzB,gBAAgBhG,GACjC/1E,KAAK8sE,qBAAqBvnB,EAAqBwnB,IAGnD,IAAInF,EAA+B,EAAA1O,WAAWpqC,KAO9C,GANIo2C,EAAiBzW,IACbyW,EAAiBzW,GAAYutB,0BAA0B3wD,IAAIu9B,EAAiB2H,oBAC5E3H,EAAiB2H,kBAAkBllC,IAAI65C,EAAiBzW,GAAYwtB,2BACpErU,EAAmB1C,EAAiBzW,GAAYytB,mBAAmBjjB,MAGvE2O,IAAqB,EAAA1O,WAAWpqC,KAEhC,IAAK,MAAMY,KAAe4rD,EACtB,IAA4D,QAAxD,EAA4B,QAA5B,EAAA5rD,EAAY8rD,wBAAgB,eAAEW,kCAA0B,eAAE5rB,kBAAkBllC,IAAIu9B,EAAiB2H,uBAC1C,QAAtD,EAA4B,QAA5B,EAAA7gC,EAAY8rD,wBAAgB,eAAEG,gCAAwB,eAAEprB,kBAAkBplC,GAAGy9B,EAAiB2H,oBAAoB,CAC/GqX,EAAmBl4C,EAAY8rD,iBAAiBviB,KAChD,MAKhB,IAAK,IAAI37B,EAAc,EAAGC,EAAcqrB,EAAiBY,aAAa1oD,OAAQw8B,EAAMC,IAAOD,EAAK,CAC5F,MAAMmsB,EAAyBb,EAAiBY,aAAalsB,GAE7DsqC,EAAmB5nE,KAAK61E,iBACpBpsB,EAAYlE,EACZuwB,EAAsB9N,EACtBzY,EAAYd,GAAaga,EACzBjB,EAAWI,EAAkBnZ,EAC7BsnB,EAAantB,GAIrB,GAAIA,EAAiBiH,aAAa/uD,OAAS,EAAG,CAC1C,MAAMs7E,EAAoDxzB,EAAiBiH,aAAa,GACxF91B,EAAqBC,cAAcqiD,kBAAkB92B,EAAqB62B,GAE1Ep8E,KAAKk4B,MAAMme,qBAAsD,QAAhC,EAAAuS,EAAiB0zB,uBAAe,eAAEx7E,QAAS,IAC5E8nD,EAAiB5B,YAAY4C,iBAAiB2yB,iBAAkB,EAChExiD,EAAqBC,cAAcwiD,mBAC/B5zB,EACArD,EACAuwB,EAAqB98C,qBACrBh5B,KAAK6tD,oBAAoBtB,iBAAiBlB,aAO1D,GAFAyqB,EAAqB38C,+BAEjB4xB,EAAc0xB,6BAA6BhuB,GAAa,CACxD,MAAMiuB,EAAmC3xB,EAAc0xB,6BAA6BhuB,GACpF,IAAK,IAAInxB,EAAc,EAAGC,EAAcm/C,EAAe7sB,aAAa/uD,OAAQw8B,EAAMC,IAAOD,EAAK,CAC1F,MAAMwyB,EAA2D4sB,EAAe7sB,aAAavyB,GACzFwyB,aAAuC,EAAAH,kBACvCJ,EAAYd,GAA+BqB,IAIvD,IAAK,IAAIxyB,EAAc,EAAGC,EAAcwtB,EAAcwwB,uBAAuB9sB,GAAY3tD,OAAQw8B,EAAMC,IAAOD,EAAK,CAC/G,MAAMwuC,EAAmC/gB,EAAcwwB,uBAAuB9sB,GAAYnxB,QACnDhX,IAAnCwlD,EAAgB6Q,qBAAiEr2D,IAAjC4+C,EAAiBzW,IACjEqd,EAAgB6Q,iBAAmBzX,EAAiBzW,GAAYytB,qBAC5DhX,EAAiBzW,QAAcnoC,GAI3C,IAAK,MAAM+iC,KAAc3xB,EAAQuvB,aAC7B,IAAK,MAAMwC,KAAcJ,EAAWa,sBAChClqD,KAAK48E,iCAAiCnzB,EAAWU,kBAKzD,GAAInqD,KAAKk4B,MAAMwc,gCAAkC,GACT,IAAhChd,EAAQuvB,aAAanmD,OAAc,CACnC,MAAM8nD,EAAqC,IAAI,EAAAi0B,iBAC3C,IAAI,EAAAC,kCAAkCplD,EAAQ+rB,oBACR/rB,EAAQ+rB,oBAAoB8M,kBAC5B74B,EAAQ+rB,oBAAoBiM,wBAClE9I,GACE6C,EAAyB,IAAI,EAAAszB,WAAW,IAAI,EAAA/zD,SAAS,EAAG,GAAI49B,EAAM0wB,OAAO,GAAI1uB,GAC7Ex5B,EAAa,IAAI,EAAA4tD,KAAKvzB,EAAYb,EAAkB,EAAA5/B,SAASshC,mBAAmBS,EAAc7B,eAAW5iC,EAAWykC,GAC1H37B,EAAKynD,YAAc72E,KAAKk4B,MAAMwc,iCAAmC,EAAAC,gCAAgCsoC,WAEjGxzB,EAAW7D,MAAMrkD,KAAK6tB,GACtB,MAAMm2B,EAA2CxrB,EAAqBC,cAAc8hD,iBAAiBlzB,EAAkBlxB,GACvHA,EAAQ6yB,uBAAuBhF,GAC/BA,EAAoBkD,sBAAwBgB,EAAWiO,UACvD,MAAMzN,EAA2BlwB,EAAqBC,cAAckoC,iBAAiBzY,EAAYlE,GACjGA,EAAoB2E,sBAAsB3oD,KAAK0oD,GAC/C,MAAMxwB,EAA+BM,EAAqBC,cAAcu8C,WACpEnnD,EACA66B,EACA,IAAI,EAAA0F,gBACJ,EAAAuJ,WAAWpqC,UAAMxI,GACrByT,EAAqBy8C,wBAAwBC,UAAUh9C,GACvDwwB,EAAIG,MAAM7oD,KAAKk4B,GAIvB/B,EAAQmvB,cAAe,EAEvB,IAAK,MAAMtB,KAAuB7tB,EAAQuvB,aAGtC,GADAvvB,EAAQmvB,aAAetB,EAAoBsB,gBACtCnvB,EAAQmvB,aACT,MAIR,OAAOnvB,EAGHg/C,uBAAuBj9C,EAA8Bq8C,EAA4Cxd,EAC1EC,GAC3B,IAAI3oC,EAAe6J,EAAc2+B,WAAW3pC,MAC5C,MAAMgvB,EAA6BhkB,EAAc0wB,iBAAiB2I,iBAAiBl7B,cAAcuzB,yBACtE,IAAvB1N,GAA4BhkB,EAAc2+B,WAAW8K,iBAAiBlc,YAAY4C,iBAAiBsxB,mBAAqB,EAAAC,eAAeC,aACvIxrD,EAAQ6J,EAAc4xB,UAClByqB,EAAqB98C,qBAAsBs/B,EAAY7a,EAAoB8a,GAE/E9+B,EAAc2+B,WAAW8kB,gBAAkBttD,GAE/C6J,EAAc2+B,WAAWrpC,SAAWa,EAAMuC,cAC1C2jD,EAAqBt8C,gBAAgBC,EAAe7J,GAYhDu2C,mBAAmBL,GACvB,IAAK,IAAIxoC,EAAc,EAAGC,EAAcv9B,KAAK6tD,oBAAoBnB,YAAY5rD,OAAQw8B,EAAMC,IAAOD,EAAK,CACnG,MAAM6xB,EAA+BnvD,KAAK6tD,oBAAoBnB,YAAYpvB,GAC1E,IAAK,IAAIgsB,EAAe,EAAGC,EAAe4F,EAASruD,OAAQwoD,EAAOC,IAAQD,EAAM,CAC5E,MAAM5xB,EAA4By3B,EAAS7F,GAC3C,GAAK5xB,EAAL,MAI2CpR,IAAvCtmB,KAAKk4B,MAAMqS,yBAAgF,IAAvCvqC,KAAKk4B,MAAMqS,yBAE3Du7B,EAAuBxc,MAEqB,IAAxCtpD,KAAKk4B,MAAMqS,yBACXxQ,EAAqBy8C,wBAAwB2G,gCAAgC7zB,GAAQtpD,KAAKk4B,MAAMqS,2BAChG7S,EAAQsvB,YAAYo2B,eAAiB,GAIjD,IAAK,MAAM73B,KAAuB7tB,EAAQuvB,kBACI3gC,IAAtCi/B,EAAoB3tB,eACjB2tB,EAAoB2E,sBAAsBppD,OAAS,GACnDykD,EAAoB2E,sBAAsB,GAAGE,MAAMtpD,OAAS,IAC/Dd,KAAKk3E,mBAAmB3xB,EAAqB+D,GAC7CtpD,KAAK4oE,iBAAiBrjB,IAG9BvlD,KAAKy1E,oCAAoC/9C,MAK3Ci2C,2BAOAQ,kCAqBFV,uCACJ,IAAK,IAAInkB,EAAe,EAAGC,EAAevpD,KAAKurD,aAAazqD,OAAQwoD,EAAOC,IAAQD,EAAM,CACrF,MAAM+zB,EAAsBr9E,KAAKurD,aAAajC,GAC9C,IAAK,IAAIolB,EAAe,EAAGC,EAAe0O,EAAOvnB,WAAWh1D,OAAQ4tE,EAAOC,IAAQD,EAAM,CACrF,MAAMnqB,EAAkB84B,EAAOvnB,WAAW4Y,GAC1C,IAAK,IAAIgH,EAAe,EAAGC,EAAepxB,EAAK4kB,SAASroE,OAAQ40E,EAAOC,IAAQD,EAAM,CACjF,MAAMh+C,EAA4B6sB,EAAK4kB,SAASuM,GAChD,IAAK,IAAI4H,EAAe,EAAGC,EAAe7lD,EAAQuvB,aAAanmD,OAAQw8E,EAAOC,IAAQD,EAAM,CACxF,MAAM/3B,EAA2C7tB,EAAQuvB,aAAaq2B,GACtE,IAAK,IAAIE,EAAe,EAAGC,EAAel4B,EAAoBqD,iBAAiBY,aAAa1oD,OAAQ08E,EAAOC,IAAQD,EAAM,CACrH,MAAM/zB,EAAyBlE,EAAoBqD,iBAAiBY,aAAag0B,GAC7E/zB,EAAWstB,cAAcj2E,OAAS,GAClCd,KAAKswE,wBAAwB7mB,EAAWstB,cAAettB,EAAYlE,QASvFwoB,qBACJ,IAAK,IAAIzkB,EAAe,EAAGC,EAAevpD,KAAKurD,aAAazqD,OAAQwoD,EAAOC,IAAQD,EAAM,CACrF,MAAM+zB,EAAsBr9E,KAAKurD,aAAajC,GAC9C,IAAK,IAAIolB,EAAe,EAAGC,EAAe0O,EAAOvnB,WAAWh1D,OAAQ4tE,EAAOC,IAAQD,EAAM,CACrF,MAAMnqB,EAAkB84B,EAAOvnB,WAAW4Y,GAC1C,IAAK,IAAIgH,EAAe,EAAGC,EAAepxB,EAAK4kB,SAASroE,OAAQ40E,EAAOC,IAAQD,EAAM,CACjF,MAAMh+C,EAA4B6sB,EAAK4kB,SAASuM,GAChD,IAAK,IAAI4H,EAAe,EAAGC,EAAe7lD,EAAQuvB,aAAanmD,OAAQw8E,EAAOC,IAAQD,EAAM,CACxF,MAAM/3B,EAA2C7tB,EAAQuvB,aAAaq2B,GACtE,IAAK,IAAIE,EAAe,EAAGC,EAAel4B,EAAoBqD,iBAAiBY,aAAa1oD,OAAQ08E,EAAOC,IAAQD,EAAM,CACrH,MAAM/zB,EAAyBlE,EAAoBqD,iBAAiBY,aAAag0B,GACjF,GAAI/zB,EAAWwtB,kBAAmB,CAC9B,GAAIxtB,EAAWi0B,WAAan4B,EAAoBkD,sBAAsBz9B,OAAOy+B,EAAWiO,WACpF,SAEJ13D,KAAKuwE,eAAe9mB,EAAWwtB,kBAAmBxtB,EAAYlE,IACS,IAAjEvlD,KAAKmkE,0BAA0BniE,QAAQujD,IACzCvlD,KAAKmkE,0BAA0B5iE,KAAKgkD,SAU7DsoB,sBACH,GAAI7tE,KAAKk4B,MAAMyP,oBAAsB,EAAA/C,cAAc3F,MAC/Cj/B,KAAKk4B,MAAMyP,oBAAsB,EAAA/C,cAAc1F,MAGnD,IAAK,MAAMm+C,KAAUr9E,KAAKurD,aACtB,IAAK,MAAMhH,KAAQ84B,EAAOvnB,WACtB,IAAK,MAAMp+B,KAAW6sB,EAAK4kB,SAAU,CACjC,MAAM7N,EAA2B5jC,EAAQgzB,2BAA6B,EAAA9lB,cAAckb,MAAQ,EAAAlb,cAAcwb,MAC1G,IAAK,MAAMqU,KAAO/8B,EAAQuvB,aAAc,CACpCwN,EAAIsM,iBAAmB,GACvB,MAAMwB,EAA+Che,EAAKlF,wBACpD2rB,EAA8BvW,EAAI18B,iBAAiB+D,iBAAiB71B,EACtEyxB,EAAQK,iBAAiB+D,iBAAiB71B,EACxC03E,EAAqC,GAC3C,IAAK,MAAMl0B,KAAcgL,EAAIvK,sBACzB,IAAK,MAAM96B,KAAQq6B,EAAWW,MAAO,CACjC,MAAMgO,EAAmBhpC,EAAKgpC,WAC1BA,EAAWwlB,YAAcxlB,EAAWylB,aACpCF,EAAWp8E,KAAK62D,EAAWwlB,WAInCtiB,IAAc,EAAA12B,cAAcwb,OAC5Bu9B,EAAWG,UAEf,IAAK,IAAIr9E,EAAY,EAAGA,EAAIk9E,EAAW78E,OAAQL,IAAK,CAChD,MAAMs9E,EAAkCJ,EAAWl9E,GAC7CqjD,EACFwX,IAAc,EAAA12B,cAAckb,MAAQ,EAAA3rB,kBAAkBO,aAAe,EAAAP,kBAAkBK,UACrF6D,EAAe,IAAI,EAAAD,MAAM2lD,EAAUnrE,MAAOkxC,GAC1CmsB,EAAyB,IAAI,EAAAryB,eAC/BvlB,EAAOr4B,KAAKk4B,MAAMmf,kBAAmBhf,EAAMjE,cAAep0B,KAAKk4B,MAAOqsB,EAAKxsB,kBACzEimD,EAAqBhT,EAAsBiF,EAAOl4C,iBAAiBwE,iBACnE0hD,EAAsBjT,EAAsBiF,EAAOl4C,iBAAiB0E,kBAC1E,IAAIyhD,EAEAA,EADA5iB,IAAc,EAAA12B,cAAckb,MACRyiB,EAAoBpD,qBAAqB6e,EAAYC,GAErD1b,EAAoBlD,wBAAwB2e,EAAYC,GAEhF,IAAIjO,EAAiB,EACX,IAANvvE,GACAuvE,GAAUhwE,KAAKk4B,MAAMif,iBACjBmkB,IAAc,EAAA12B,cAAckb,QAC5BkwB,GAAU,KAGdA,GAAUhwE,KAAKk4B,MAAMkf,kBAErBkkB,IAAc,EAAA12B,cAAckb,QAC5BkwB,IAAW,GAEfC,EAAOl4C,iBAAiB+D,iBAAiBh2B,GAAKo4E,EAAoBlO,EAClEC,EAAOl4C,iBAAiB+D,iBAAiB71B,EAAI+kE,EAC7CiF,EAAOjsB,kCACPisB,EAAOl4C,iBAAiB2F,uBACxB+2B,EAAIsM,iBAAiBx/D,KAAK0uE,GAC1B,MAAMhrB,EAAgBgrB,EAAOl4C,iBAAiB+D,iBAAiB71B,EAAIgqE,EAAOl4C,iBAAiBmE,WAErFxzB,EAAcu8C,EAAQgrB,EAAOl4C,iBAAiBmE,WAAa+zC,EAAOl4C,iBAAiBqE,YACrFk/B,IAAc,EAAA12B,cAAckb,MAC5ByiB,EAAoBviB,qBAChBiF,EAAOv8C,EAAKunE,EAAOl4C,iBAAiB+D,iBAAiBh2B,EAAImqE,EAAOl4C,iBAAiBsE,WAC9Ei/B,IAAc,EAAA12B,cAAcwb,OACnCmiB,EAAoBliB,wBAChB4E,EAAOv8C,EAAKunE,EAAOl4C,iBAAiB+D,iBAAiBh2B,EAAImqE,EAAOl4C,iBAAiBuE,iBASzGkxC,wBACJ,IAAK,IAAIlkB,EAAe,EAAGC,EAAevpD,KAAKurD,aAAazqD,OAAQwoD,EAAOC,IAAQD,EAAM,CACrF,MAAM+zB,EAAsBr9E,KAAKurD,aAAajC,GAC9C,IAAK,IAAIolB,EAAe,EAAGC,EAAe0O,EAAOvnB,WAAWh1D,OAAQ4tE,EAAOC,IAAQD,EAAM,CACrF,MAAMnqB,EAAkB84B,EAAOvnB,WAAW4Y,GAC1C,IAAK,IAAIgH,EAAe,EAAGC,EAAepxB,EAAK4kB,SAASroE,OAAQ40E,EAAOC,IAAQD,EAAM,CACjF,MAAMh+C,EAA4B6sB,EAAK4kB,SAASuM,GAChD,IAAK,IAAI4H,EAAe,EAAGC,EAAe7lD,EAAQuvB,aAAanmD,OAAQw8E,EAAOC,IAAQD,EAAM,CACxF,MAAM/3B,EAA2C7tB,EAAQuvB,aAAaq2B,GACtEt9E,KAAK23E,0BAA0BpyB,EAAqB7tB,OAOhEugD,qDAAqD1yB,GACzD,MAAM44B,EAA+B54B,EAAoB2E,sBAAsB,GAAGE,MAAM,GAClFg0B,EAAgC74B,EAAoB2E,sBAAsB,GAAGE,MAAM,GACzFg0B,EAAermD,iBAAiB+D,iBAAmB,IAAI,EAAAhP,SAAS,EAAK,KACrEy4B,EAAoBxtB,iBAAiBsF,uDACrC8gD,EAAcpmD,iBAAiB4G,wCAC3B4mB,EAAoBxtB,iBAAkB,EAAAuC,WAAW8E,GACjD,IAAI,EAAAtS,SAAS,EAAKsxD,EAAermD,iBAAiB+D,iBAAiBh2B,IAEvE,MAAMomE,EAAqBiS,EAAcpmD,iBAAiB+D,iBAC1DowC,EAASpmE,GAAK,EACdq4E,EAAcpmD,iBAAiB+D,iBAAmBowC,EAClD3mB,EAAoBxtB,iBAAiB2F,uBAGjCw6C,kEAAkE3yB,GACtE,IAAImrB,EACArO,EACA9c,EAAoB2E,sBAAsB,GAAGE,MAAM,GAAGgO,WAAWgJ,UACjEsP,EAAWnrB,EAAoB2E,sBAAsB,GAAGE,MAAM,GAC9DiY,EAAiB9c,EAAoB2E,sBAAsB,GAAGE,QAE9DiY,EAAiB9c,EAAoB2E,sBAAsB,GAAGE,MAC9DsmB,EAAWnrB,EAAoB2E,sBAAsB,GAAGE,MAAM,IAGlE,IAAIi0B,GAAqB,EACzB94B,EAAoBxtB,iBAAiBsF,uDACrC,IAAK,IAAIC,EAAc,EAAGC,EAAc8kC,EAAevhE,OAAQw8B,EAAMC,IAAOD,EAAK,CAC7E,MAAM7D,EAA+B4oC,EAAe/kC,GACpD,GAAIozC,EAAS34C,iBAAiBkI,yBAAyBxG,EAAc1B,kBAAmB,CAGpFsmD,GAAY,EACZ,OAGR,GAAIA,EACA,GAAI3N,EAAStY,WAAWwG,iBAAiBlV,uBAAuB,EAAAmV,YAAa,CACzE,MAAMyf,EAAuBjc,EAAe,GAAGtqC,iBAAiB4E,mBAAqB0lC,EAAe,GAAGtqC,iBAAiB+D,iBAAiBh2B,EACzI4qE,EAAS34C,iBAAiB+D,iBAAmB,IAAI,EAAAhP,SAAS,EAAKwxD,EAAe5N,EAAS34C,iBAAiB2E,gBAAkB,QACvH,CACH,MAAM1Z,EAAsBq/C,EAAeA,EAAevhE,OAAS,GAC7Dy9E,EAAoBv7D,EAAK+U,iBAAiB2E,gBAAkB1Z,EAAK+U,iBAAiB+D,iBAAiBh2B,EACzG,GAAIu8D,EAAe,GAAGjK,WAAWwG,iBAAiBlV,uBAAuB,EAAAmV,YACrE6R,EAAS34C,iBAAiB+D,iBAAmB,IAAI,EAAAhP,SAAS,EAAKyxD,EAAY7N,EAAS34C,iBAAiB4E,mBAAqB,QACvH,CACH,MAAM2hD,EAAuBjc,EAAe,GAAGtqC,iBAAiB4E,mBAAqB0lC,EAAe,GAAGtqC,iBAAiB+D,iBAAiBh2B,EAErI4qE,EAAS34C,iBAAiB+D,iBAD1BwiD,EAAe,EAC8B,IAAI,EAAAxxD,SAAS,EAAKwxD,EAAe5N,EAAS34C,iBAAiB2E,gBAAkB,IAE7E,IAAI,EAAA5P,SAAS,EAAKyxD,EAAY7N,EAAS34C,iBAAiB4E,mBAAqB,IAK1I4oB,EAAoBxtB,iBAAiB2F,uBAGjCgwC,qBACJ,IAAK,MAAMxE,KAAelpE,KAAKurD,aAC3B,IAAK,MAAMjN,KAAa4qB,EAAYpT,WAChC,IAAK,MAAMp+B,KAAW4mB,EAAU6qB,SAC5B,IAAK,MAAM9f,KAAc3xB,EAAQuvB,aAC7B,IAAK,MAAM4yB,KAAgBxwB,EAAW4X,cAClC,QAA+B36C,IAA3BuzD,EAAatf,WAA2Bsf,EAAatf,UAAUpQ,iBAAiB2I,mBAAqBzJ,EAAY,CACjH,MAAMmhB,EACFqP,EAAatf,UAAUpQ,iBAAiB2I,iBAAiBl7B,cAAcU,kBACvEuhD,EAAajf,QAAQzQ,iBAAiB2I,iBAAiBl7B,cAAcU,gBAEzEt4B,KAAKuqE,mBAAmBsP,EAAcrP,EAAoB9yC,EAAQsvB,YAAYyjB,QASlGgE,0BACJ,MAAM+P,EAAsE,IAAI,EAAA3lD,WAEhF,IAAK,IAAIyE,EAAc,EAAGC,EAAcv9B,KAAK6tD,oBAAoBtB,iBAAiB2K,YAAYp2D,OAAQw8B,EAAMC,IAAOD,EAAK,CACpH,MAAMq0B,EAAyB3xD,KAAK6tD,oBAAoBtB,iBAAiB2K,YAAY55B,GACjFq0B,EAAW8sB,WAAa9sB,EAAW+sB,mBAAmB59E,OAAS,GAC/D6wD,EAAW+sB,mBAAmB1a,OAItC,IAAK,IAAI1a,EAAe,EAAGC,EAAevpD,KAAKurD,aAAazqD,OAAQwoD,EAAOC,IAAQD,EAAM,CACrF,MAAM4f,EAA2BlpE,KAAKurD,aAAajC,GACnD,IAAK,IAAIolB,EAAe,EAAGC,EAAezF,EAAYpT,WAAWh1D,OAAQ4tE,EAAOC,IAAQD,EAAM,CAC1F,MAAMpwB,EAAuB4qB,EAAYpT,WAAW4Y,GAC9ChD,EACF1rE,KAAK0qE,uCAAuCpsB,EAAWA,EAAU0I,YAAY4C,iBAAiB80B,oBAClGF,EAAsBllD,SAASglB,EAAWotB,GAC1C1rE,KAAKyrE,gCAAgC+S,EAAsBjlD,SAAS+kB,KAI5E,IAAK,IAAIgL,EAAe,EAAGC,EAAevpD,KAAKurD,aAAazqD,OAAQwoD,EAAOC,IAAQD,EAAM,CACrF,MAAM4f,EAA2BlpE,KAAKurD,aAAajC,GACnD,IAAK,IAAIolB,EAAe,EAAGC,EAAezF,EAAYpT,WAAWh1D,OAAQ4tE,EAAOC,IAAQD,EAAM,CAC1F,MAAMpwB,EAAuB4qB,EAAYpT,WAAW4Y,GACpD1uE,KAAKyrE,gCAAgC+S,EAAsBjlD,SAAS+kB,MASxEqtB,yBAAyBP,GAE7B,MAAMplB,EAAyColB,EAAWrlB,gBACpD14C,EAAgB24C,EAAmBM,uBAAuBtkD,QAAQopE,GACxE,IAAIuT,EAIJ,GAHItxE,GAAS,IACTsxE,EAAiB34B,EAAmBM,uBAAuBj5C,EAAQ,KAElEsxE,EACD,OAEJ,MAAMC,EAAuCxT,EAAWnlB,iBAAiBruB,cAAcU,gBACjF46C,EAAsCyL,EAAe14B,iBAAiBruB,cAAcU,gBACpF6hC,EAAuCiR,EAAWnlB,iBAClD44B,EAAqCF,EAAe14B,iBAG1D,GAAImlB,EAAWnlB,iBAAiBruB,cAAcU,kBAAoBqmD,EAAe14B,iBAAiBruB,cAAcU,gBAAiB,CAE7H,MAAMkoB,EAAiB2Z,EAAgBviC,cAAcG,iBAAiB+D,iBAAiB71B,EACnFk0D,EAAgBpiC,iBAAiB+D,iBAAiB71B,EAClDmlE,EAAWxtB,eAAe7lB,iBAAiB+D,iBAAiB71B,EAC5DmlE,EAAWxtB,eAAe7lB,iBAAiB0E,kBAEzCgkB,EAAeo+B,EAAcjnD,cAAcG,iBAAiB+D,iBAAiB71B,EAC/E44E,EAAc9mD,iBAAiB+D,iBAAiB71B,EAChDmlE,EAAWxtB,eAAe7lB,iBAAiB+D,iBAAiB71B,EAC5D04E,EAAe/gC,eAAe7lB,iBAAiBwE,iBAC7Cz2B,EAAYslE,EAAWxtB,eAAe7lB,iBAAiB+D,iBAAiBh2B,EAC9E,IAAIg5E,EAAyB,EACxBr+B,EAAOD,EAAoD,EAA1CxgD,KAAKk4B,MAAMsZ,+BAE7BstC,EAAiBrwE,KAAKuC,OAAOyvC,EAAOD,GAAUxgD,KAAKk4B,MAAMsZ,8BAAgC,GAGtE,IAAnBstC,EAEA9+E,KAAK++E,gCAAgCH,EAAgBp+B,EAAQC,EAAM36C,GAKnE9F,KAAKg/E,gBAAgBJ,EAAgBp+B,EAAQC,EAAM36C,OAEpD,CAGH,MAAM06C,EAAiB2Z,EAAgBviC,cAAcG,iBAAiB+D,iBAAiB71B,EACnFk0D,EAAgBpiC,iBAAiB+D,iBAAiB71B,EAClDmlE,EAAWxtB,eAAe7lB,iBAAiB0E,kBACzCwiD,EAAyCL,EAAezV,SAASyV,EAAezV,SAASroE,OAAS,GAClG2/C,EAAew+B,EAAqBlnD,iBAAiB+D,iBAAiB71B,EAAIg5E,EAAqBlnD,iBAAiBhE,KAAKH,MAC3H,IAAI9tB,EAAYslE,EAAWxtB,eAAe7lB,iBAAiB+D,iBAAiBh2B,EAM5E,GAHA9F,KAAKg/E,gBAAgBJ,EAAgBp+B,EAAQC,EAAM36C,GAG/CotE,GACAA,EAAc/J,SAAS,IACvB0V,EAAcjnD,cAAcU,kBAC1BumD,IAAkBA,EAAcjnD,cAAcqvB,aAAa,IAC7D43B,EAAcjnD,gBAAkBinD,EAAcjnD,cAAcU,gBAAgB6wC,SAAS,IAAK,CAC1F,MAAM+V,EAAuBhM,EAAc/J,SAAS,GAAGliB,aAAa,GAAGlvB,iBAAiB+D,iBAAiB71B,EACnGk5E,EAAqBN,EAAcjnD,cAAcG,iBAAiB+D,iBAAiB71B,EACrF44E,EAAc9mD,iBAAiB+D,iBAAiB71B,EAChD04E,EAAe/gC,eAAe7lB,iBAAiBwE,iBACnDz2B,EAAI64E,EAAe/gC,eAAe7lB,iBAAiB+D,iBAAiBh2B,EACpE9F,KAAKg/E,gBAAgB9L,EAAegM,EAAcC,EAAYr5E,KAYlEk5E,gBAAgB1gC,EAAsBkC,EAAgBC,EAAc36C,GACxE,IAAI83D,EAAmBnd,EAAOD,EAC9B,GAAIod,EAAqD,EAA1C59D,KAAKk4B,MAAMsZ,6BACtBxxC,KAAK++E,gCAAgCzgC,EAAWkC,EAAQC,EAAM36C,OAC3D,CAEH,MAAMg5E,EAAyBrwE,KAAKuC,MAAM4sD,EAAW59D,KAAKk4B,MAAMsZ,8BAAgC,EAC1F4tC,EAAgCxhB,GAAYkhB,EAAiB,GACnE,IAAIO,EAAkB,EAItB,IAFA7+B,GAAU4+B,EACV3+B,GAAQ2+B,EACDC,GAAW5wE,KAAKuC,MAAM8tE,EAAiB,IAAQr+B,EAAOD,GACzDod,EAAW59D,KAAKs/E,wCAAwChhC,EAAWkC,EAAQC,EAAM36C,GACjF06C,GAAU4+B,EACV3+B,GAAQ2+B,EACRC,IAMAzhB,EAAmC,EAAxBwhB,GACXp/E,KAAK++E,gCAAgCzgC,EAAWkC,EAAQC,EAAM36C,IAYlEi5E,gCAAgCzgC,EAAsBkC,EAAgBC,EAAc36C,GACxF,MAAMuyB,EAAe,IAAI,EAAAD,MAAM,KACzBmnD,EAAuB,IAAI,EAAA3hC,eAC7BvlB,EAAOr4B,KAAKk4B,MAAM+Y,aAAc,EAAA9c,kBAAkBO,aAAc10B,KAAKk4B,OACzEqnD,EAAKv7B,kCACL1F,EAAUkhC,aAAaj+E,KAAKg+E,IAC8B,IAAtDv/E,KAAKqkE,yBAAyBriE,QAAQs8C,IACtCt+C,KAAKqkE,yBAAyB9iE,KAAK+8C,GAEvCihC,EAAKxnD,iBAAiBY,OAAS2lB,EAAUvmB,iBACzC,MAAMm0C,EAAqB,IAAI,EAAAp/C,SAAS0zB,GAAUC,EAAOD,GAAU,EAAG16C,GACtEy5E,EAAKxnD,iBAAiB+D,iBAAmBowC,EAOrCN,qBAAqBR,GACzB,IAAInQ,EAAiBmQ,EAAWxtB,eAAe7lB,iBAAiB+D,iBAAiBh2B,EACjF,MAAMq0D,EAAuCiR,EAAWnlB,iBAClD24B,EAA4BzkB,EAAgBviC,cAAcU,gBAGhE,IAAI8hC,EACAiX,EACJ,MAAM5iB,EAAqB0L,EAAgBviC,cAAcovB,YAAYyQ,eACrE,IAAK,IAAIpqD,EAAgB8sD,EAAgB2G,wBAAwBuZ,MAAQ,EACrEhtE,EAAQrN,KAAK6tD,oBAAoBlB,sCAAsC7rD,SACrEuM,EAAO,CACT,MAAMonD,EAA2Bz0D,KAAK6tD,oBAAoBlB,sCAAsCt/C,GAAO4nD,aAAaxG,GACpH,GAAKgG,EAAL,CAGA,GAAIA,EAAI5N,eACJ,MAEJ,GAAI4N,EAAIqK,cAAch+D,OAAS,EAC3B,MAEJs5D,EAAgB3F,EAChB4c,EAAejX,EAAcxiC,cAAcU,gBACtC+4C,IACDA,EAAelX,EAAgBviC,cAAcU,kBAGrD,GAAK8hC,GAAkBiX,EAIvB,GAAIuN,IAAmBvN,GAAgBjX,EAAcxiC,cAAcU,gBAAiB,CAEhF,MAAMkoB,EAAiB2Z,EAAgBviC,cAAcG,iBAAiB+D,iBAAiB71B,EACnFk0D,EAAgBpiC,iBAAiB+D,iBAAiB71B,EAClDmlE,EAAWxtB,eAAe7lB,iBAAiB0E,kBAEzCgkB,EAAe2Z,EAAcxiC,cAAcG,iBAAiB+D,iBAAiB71B,EAC/Em0D,EAAcriC,iBAAiB+D,iBAAiB71B,EAChDm0D,EAAcriC,iBAAiB0E,kBAMnCw+B,GAAUmQ,EAAWxtB,eAAe7lB,iBAAiBhE,KAAKF,OAAS,EAEnE7zB,KAAKy/E,uCAAuCb,EAAgBp+B,EAAQC,EAAMwa,OACvE,CAEH,MAAMykB,EAA6Bd,EAAezV,SAASyV,EAAezV,SAASroE,OAAS,GAAGi3B,iBACzFyoB,EAAiB2Z,EAAgBviC,cAAcG,iBAAiB+D,iBAAiB71B,EACnFk0D,EAAgBpiC,iBAAiB+D,iBAAiB71B,EAClDmlE,EAAWxtB,eAAe7lB,iBAAiB0E,kBACzCgkB,EAAei/B,EAAc5jD,iBAAiB71B,EAChDy5E,EAAc3rD,KAAKH,MAKvB,GAHAqnC,GAAUmQ,EAAWxtB,eAAe7lB,iBAAiBhE,KAAKF,OAAS,EAEnE7zB,KAAKy/E,uCAAuCb,EAAgBp+B,EAAQC,EAAMwa,IACrEb,EACD,OAGJ,GAAIA,EAAcxiC,cAAcU,iBAAmB8hC,EAAcxiC,cAAcqvB,eACzEmT,IAAkBA,EAAcxiC,cAAcqvB,aAAa,IAC7DmT,EAAcxiC,gBAAkBwiC,EAAcxiC,cAAcU,gBAAgB6wC,SAAS,IAAK,CAC1F,MAAM+V,EAAuB7N,EAAalI,SAAS,GAAGliB,aAAa,GAAGlvB,iBAAiB+D,iBAAiB71B,EAClGk5E,EAAqB/kB,EAAcxiC,cAAcG,iBAAiB+D,iBAAiB71B,EACrFm0D,EAAcriC,iBAAiB+D,iBAAiB71B,EAChDm0D,EAAcriC,iBAAiB0E,kBACnCz8B,KAAKy/E,uCAAuCpO,EAAc6N,EAAcC,EAAYlkB,KAYxFwkB,uCAAuCnhC,EAAsBkC,EAAgBC,EAAc36C,GAC/F,MAAM86C,EAAsB,IAAI,EAAA9zB,SAAS0zB,EAAQ16C,GAC3Ci8C,EAAoB,IAAI,EAAAj1B,SAAS2zB,EAAM36C,GACvC65E,EAA+B,IAAI,EAAAj9B,cAAc9B,EAAWmB,EAAS/hD,KAAKk4B,MAAM2a,0BACtFyL,EAAUshC,WAAWr+E,KAAKo+E,IACgC,IAAtD3/E,KAAKqkE,yBAAyBriE,QAAQs8C,IACtCt+C,KAAKqkE,yBAAyB9iE,KAAK+8C,GAYnCghC,wCAAwChhC,EAAsBkC,EAAgBC,EAAc36C,GAChG,MAAM+5E,EAAmB,IAAI,EAAAznD,MAAM,KAC7B0nD,EAA2B,IAAI,EAAAliC,eACjCiiC,EAAW7/E,KAAKk4B,MAAM+Y,aAAc,EAAA9c,kBAAkBO,aAAc10B,KAAKk4B,OAC7E4nD,EAAS97B,kCACT1F,EAAUkhC,aAAaj+E,KAAKu+E,IAC8B,IAAtD9/E,KAAKqkE,yBAAyBriE,QAAQs8C,IACtCt+C,KAAKqkE,yBAAyB9iE,KAAK+8C,GAEvCwhC,EAAS/nD,iBAAiBY,OAAS2lB,EAAUvmB,iBAC7C,MAAMgoD,EAA6B,IAAI,EAAAjzD,SAAS0zB,EAAQ16C,GACxDg6E,EAAS/nD,iBAAiB+D,iBAAmBikD,EAE7C,MAAMC,EAAoB,IAAI,EAAA5nD,MAAM,KAC9B6nD,EAA4B,IAAI,EAAAriC,eAClCoiC,EAAYhgF,KAAKk4B,MAAM+Y,aAAc,EAAA9c,kBAAkBO,aAAc10B,KAAKk4B,OAC9E+nD,EAAUj8B,kCACV1F,EAAUkhC,aAAaj+E,KAAK0+E,GAC5BA,EAAUloD,iBAAiBY,OAAS2lB,EAAUvmB,iBAC9C,MAAMmoD,EAA8B,IAAI,EAAApzD,SAAS2zB,EAAM36C,GAEvD,OADAm6E,EAAUloD,iBAAiB+D,iBAAmBokD,EACtCD,EAAUloD,iBAAiB+D,iBAAiB71B,EAAI65E,EAAS/nD,iBAAiB+D,iBAAiB71B,EAM/FgoE,8BACJ,MAAMkS,EAAmB1xE,KAAKC,IAAI1O,KAAK6tD,oBAAoBtB,iBAAiB4Y,eAAerkE,OAAS,EAAGd,KAAKk4B,MAAM0d,uBAElH,IAAK,IAAIn1C,EADgBgO,KAAKC,IAAI1O,KAAKk4B,MAAM2d,sBAAuB71C,KAAK6tD,oBAAoBtB,iBAAiB4Y,eAAerkE,QAC9FL,GAAK0/E,EAAU1/E,IAAK,CAC/C,MAAMsqD,EAA+B/qD,KAAK6tD,oBAAoBtB,iBAAiB4Y,eAAe1kE,GAE9FT,KAAKwkE,qBAAqBprC,QAC1B,IAAK,IAAItb,EAAY,EAAGA,EAAIitC,EAAcwwB,uBAAuBz6E,OAAQgd,IACrE,GAAK9d,KAAK6tD,oBAAoBnB,YAAYjsD,IAAOT,KAAK6tD,oBAAoBnB,YAAYjsD,GAAGqd,IAIrF9d,KAAK6tD,oBAAoBnB,YAAYjsD,GAAGqd,GAAGkpC,YAAY4C,iBAAiBC,QACxE,IAAK,IAAI7jD,EAAY,EAAGA,EAAI+kD,EAAcwwB,uBAAuBz9D,GAAGhd,OAAQkF,UACAsgB,IAApEykC,EAAcwwB,uBAAuBz9D,GAAG9X,GAAGo6E,2BAC+B95D,IAAzEykC,EAAcwwB,uBAAuBz9D,GAAG9X,GAAGq6E,2BACxCt1B,EAAcwwB,uBAAuBz9D,GAAG9X,GAAGq6E,0BAA0BnO,uBACrEnnB,EAAcwwB,uBAAuBz9D,GAAG9X,IAAwE,IAAlE+kD,EAAcwwB,uBAAuBz9D,GAAG9X,GAAGomE,YAAYtrE,SAEzGd,KAAK6wE,8CAA8C9lB,EAAcwwB,uBAAuBz9D,GAAG9X,GAAIvF,EAAGqd,GAMtH9d,KAAKwkE,qBAAqBprC,QAGtBg1C,wBACJ,IAAK,IAAI3tE,EAAY,EAAGA,EAAIT,KAAK6tD,oBAAoBtB,iBAAiB4Y,eAAerkE,OAAQL,IAAK,CAC9F,MAAMsqD,EAA+B/qD,KAAK6tD,oBAAoBtB,iBAAiB4Y,eAAe1kE,GAC9F,IAAK,IAAIqd,EAAY,EAAGA,EAAIitC,EAAcwwB,uBAAuBz6E,OAAQgd,IACrE,GAAK9d,KAAK6tD,oBAAoBnB,YAAYjsD,IAAOT,KAAK6tD,oBAAoBnB,YAAYjsD,GAAGqd,IAGrF9d,KAAK6tD,oBAAoBnB,YAAYjsD,GAAGqd,GAAGkpC,YAAY4C,iBAAiBC,QACxE,IAAK,IAAI7jD,EAAY,EAAGA,EAAI+kD,EAAcwwB,uBAAuBz9D,GAAGhd,OAAQkF,IACnE+kD,EAAcwwB,uBAAuBz9D,GAAG9X,GAAmB,kBAC5DhG,KAAK6rE,2BAA2B9gB,EAAeA,EAAcwwB,uBAAuBz9D,GAAG9X,GAAIvF,EAAGqd,IAQ9G26D,2CAA2C6H,EAAyBzL,EAAuBuD,GAC/F,GAAIp4E,KAAK6tD,oBAAoBlB,sCAAsC2zB,GAAiBrrB,aAAa4f,GAC7F,OAAO70E,KAAK6tD,oBAAoBlB,sCAAsC2zB,GAAiBrrB,aAAa4f,GAExG,IAAK,IAAIp0E,EAAY6/E,EAAkB,EAAG7/E,GAAK,EAAGA,IAC9C,GAAIT,KAAK6tD,oBAAoBlB,sCAAsClsD,GAAGw0D,aAAa4f,GAC/E,OAAO70E,KAAK6tD,oBAAoBlB,sCAAsClsD,GAAGw0D,aAAa4f,GAM1F6D,4CAA4C4H,EAAyBzL,EAAuBuD,GAChG,GAAIp4E,KAAK6tD,oBAAoBlB,sCAAsC2zB,GAAiBrrB,aAAa4f,GAC7F,OAAO70E,KAAK6tD,oBAAoBlB,sCAAsC2zB,GAAiBrrB,aAAa4f,GAExG,IAAK,IAAIp0E,EAAY6/E,EAAkB,EAAG7/E,EAAIT,KAAK6tD,oBAAoBlB,sCAAsC7rD,OAAQL,IACjH,GAAIT,KAAK6tD,oBAAoBlB,sCAAsClsD,GAAGw0D,aAAa4f,GAC/E,OAAO70E,KAAK6tD,oBAAoBlB,sCAAsClsD,GAAGw0D,aAAa4f,GAM1FxG,sCACJ,IAAK,IAAI5tE,EAAY,EAAGA,EAAIT,KAAK6tD,oBAAoBtB,iBAAiB4Y,eAAerkE,OAAQL,IAAK,CAC9F,MAAMsqD,EAA+B/qD,KAAK6tD,oBAAoBtB,iBAAiB4Y,eAAe1kE,GAC9F,IAAK,IAAI68B,EAAc,EAAGC,EAAcwtB,EAAcw1B,4BAA4Bz/E,OAAQw8B,EAAMC,IAAOD,EAAK,CACxG,MAAM09C,EAAqCjwB,EAAcw1B,4BAA4BjjD,GACrFt9B,KAAK+rE,mCAAmCiP,EAAav6E,GAEzD,IAAK,IAAI68B,EAAc,EAAGC,EAAcwtB,EAAcy1B,2BAA2B1/E,OAAQw8B,EAAMC,IAAOD,EAAK,CACvG,MAAM09C,EAAqCjwB,EAAcy1B,2BAA2BljD,GACpFt9B,KAAK+rE,mCAAmCiP,EAAav6E,KAKzD6tE,6BACJ,MAAMmS,EAAyBzgF,KAAK6tD,oBAAoBtB,iBACxD,IAAK,IAAIjvB,EAAc,EAAGC,EAAckjD,EAAWC,YAAY5/E,OAAQw8B,EAAMC,IAAOD,EAAK,CACrF,MAAM22C,EAAyBwM,EAAWC,YAAYpjD,GACtDt9B,KAAKg0E,0CAA0CC,IAI/C1F,4BACJ,MAAM4R,EAAmB1xE,KAAKC,IAAI1O,KAAK6tD,oBAAoBtB,iBAAiB4Y,eAAerkE,OAAS,EAAGd,KAAKk4B,MAAM0d,uBAElH,IAAK,IAAIn1C,EADgBT,KAAKk4B,MAAM2d,sBACLp1C,GAAK0/E,EAAU1/E,IAAK,CAC/C,MAAMsqD,EAA+B/qD,KAAK6tD,oBAAoBtB,iBAAiB4Y,eAAe1kE,GAC9F,IAAK,IAAIqd,EAAY,EAAGA,EAAIitC,EAAc41B,iBAAiB7/E,OAAQgd,IAC/D9d,KAAKw0E,iDAAiDzpB,EAAeA,EAAc41B,iBAAiB7iE,GAAIrd,IAK5G+tE,0BACJ,GAAKxuE,KAAKk4B,MAAMse,qBAGhB,IAAK,MAAM9e,KAAW13B,KAAK6tD,oBAAoBtB,iBAAiB4Y,eAC5DnlE,KAAK4gF,uBAAuBlpD,GAI1BkpD,uBAAuBlpD,GAC7B,MAAM,IAAIh3B,MAAMV,KAAKukE,oCAGjB2J,qCACJ,IAAK,IAAIztE,EAAY,EAAGA,EAAIT,KAAK6tD,oBAAoBtB,iBAAiB4Y,eAAerkE,OAAQL,IAAK,CAC9F,MAAMsqD,EAA+B/qD,KAAK6tD,oBAAoBtB,iBAAiB4Y,eAAe1kE,GAC9F,IAAK,IAAIqd,EAAY,EAAGA,EAAIitC,EAAcwwB,uBAAuBz6E,OAAQgd,IACrE,GAAK9d,KAAK6tD,oBAAoBnB,YAAYjsD,IAAOT,KAAK6tD,oBAAoBnB,YAAYjsD,GAAGqd,IAGrF9d,KAAK6tD,oBAAoBnB,YAAYjsD,GAAGqd,GAAGkpC,YAAY4C,iBAAiBC,QACxE,IAAK,IAAI7jD,EAAY,EAAGA,EAAI+kD,EAAcwwB,uBAAuBz9D,GAAGhd,OAAQkF,KACnE+kD,EAAcwwB,uBAAuBz9D,GAAG9X,GAAGmmE,SAASrrE,OAAS,GAC7DiqD,EAAcwwB,uBAAuBz9D,GAAG9X,GAAGomE,YAAYtrE,OAAS,IACjEd,KAAKisE,kCAAkClhB,EAAcwwB,uBAAuBz9D,GAAG9X,GAAIvF,EAAGqd,IActGq4D,iCAAiC1sB,GAGrC,QADoEnjC,IAA3CmjC,EAAWo3B,uBAAuBlf,KAGvD,OAAIlY,IAAeA,EAAWo3B,uBAAuBr3B,aAAa,QAE9DC,EAAWysB,oBAAsB,EAAA5X,kBAAkBl/B,SAInDqqB,EAAWysB,oBAAsB,EAAA5X,kBAAkBj/B,MAInDoqB,EAAWC,uBAAuB,EAAAmV,YAElCpV,EAAWysB,oBAAsB,EAAA5X,kBAAkBj/B,KAI/CoqB,EAAWo3B,uBAAuBr3B,aAAa1oD,OAAS,IAExD2oD,EAAWysB,oBAAsB,EAAA5X,kBAAkBl/B,IAQ3Dw9C,iCAAiCnzB,GACrC,KAAMA,EAAW7D,MAAM9kD,OAAS,GAC5B,OAIJ,MAAMymE,EAAa9d,EAAW7D,MAAM,GAAGgxB,SACvC,GAAIrP,EAEA,IAAK,MAAMn4C,KAAQm4C,EAAK3hB,MAIpB,GAAIx2B,EAAKwvC,iBAAiBsX,sBAAwB,EAAA5X,kBAAkB2X,WAC5D7mD,EAAKwvC,iBAAiBiiB,uBAAuB75B,YAAYoiB,KAAO3f,EAAWo3B,uBAAuB75B,YAAYoiB,GAAI,CAElH3f,EAAWysB,oBAAsB9mD,EAAKwvC,iBAAiBsX,oBACvD,QAlnGxB,iICzEA,gBACA,UAEA,UACA,UACA,UAEA,UACA,UACA,UACA,UAMA,UACA,SAGA,UAKA,UACA,UAeA,yBAcI7+D,YAAYqtD,EACAvgC,GAXL,KAAA28C,2BAAqC,OAErC,KAAAC,gBAA0B,EAC1B,KAAAC,mBAA6B,EAK5B,KAAAC,gBAAoC,EAAAn9C,iBAAiBo9C,OAIzDlhF,KAAK0kE,aAAeA,EACpB1kE,KAAKmhF,sBAAwB,EAC7BnhF,KAAKmkC,kBAAoBA,EACzBnkC,KAAKk4B,MAAQiM,EAAkByD,MAGxBw5C,SAAKxuE,GACZ5S,KAAKihF,gBAAkBruE,EAGpByuE,UAAUxzB,GAIb,GAHA7tD,KAAK6tD,oBAAsBA,EAC3B7tD,KAAKk4B,MAAQ21B,EAAoBtB,iBAAiB3kB,MAClD5nC,KAAKshF,sBACDthF,KAAKmkC,kBAAkB2B,YACvB,IAAK,MAAMye,KAAQsJ,EAAoBT,QAAS,CAC5C,IAAK7I,EAGD,SAEJ,MAAM/kB,EAAmB,IAAI,EAAA1H,YAAYysB,GACzC/kB,EAAI3D,iBAAmB0oB,EAAKrE,MAC5B1gB,EAAIlD,aAAeioB,EAAKpE,IAAIr6C,EAAIy+C,EAAKrE,MAAMp6C,EAC3C05B,EAAIpD,YAAcmoB,EAAKc,MAAQ,EAC/B7lB,EAAItD,YAAcqoB,EAAKc,MAAQ,EAC3BrlD,KAAK2pD,UAAUnqB,IACfx/B,KAAKuhF,4BAA4Bh9B,EAAc,EAAA7iB,gBAAgB8/C,QAKvExhF,KAAKmkC,kBAAkB6B,qBACvBhmC,KAAKgmC,sBAGT,MAAMy7C,EAAsBhzE,KAAKC,IAAI1O,KAAK6tD,oBAAoBpB,WAAW3rD,OAAQd,KAAKk4B,MAAM6d,qBAC5F,IAAK,IAAIt1C,EAAY,EAAGA,EAAIghF,EAAahhF,IAAM,CAC3C,MAAM04E,EAA2Bn5E,KAAK6tD,oBAAoBpB,WAAWhsD,GACrET,KAAK0hF,SAASvI,IAIfwI,8BAA8Bp9B,EAAqBq9B,GACtD,IAAIC,EAA0B,IAAI,EAAAluD,aAAa4wB,EAAKrE,MAAMj6C,EAAGs+C,EAAKpE,IAAIr6C,EAAIy+C,EAAKc,MAAQ,EAAGd,EAAKpE,IAAIl6C,EAAIs+C,EAAKrE,MAAMj6C,EAAGs+C,EAAKc,OAC1Hw8B,EAAY7hF,KAAK8hF,iCAAiCD,GAClD7hF,KAAK+hF,gBAAgBF,EAAWD,EAAOr9B,EAAKa,QAASb,EAAKY,UAGvDo8B,4BAA4Bh9B,EAAqBq9B,GACpD,MAAMhhC,EAAsB2D,EAAKrE,MAC3B8hC,EAAoBz9B,EAAKc,MAC/B,IAAIw8B,EAA0B,IAAI,EAAAluD,aAAaitB,EAAU36C,EAAI+7E,EAAY,EAAGphC,EAAU96C,EAAGk8E,EAAWz9B,EAAKpE,IAAIr6C,EAAI86C,EAAU96C,GAC3H+7E,EAAY7hF,KAAK8hF,iCAAiCD,GAClD7hF,KAAK+hF,gBAAgBF,EAAWD,EAAOr9B,EAAKa,SAGzC68B,wCAAwC19B,EAAqBjhC,EAAkBs+D,GAClF,MAAM38B,EAAkB,IAAI,EAAAn4B,SAASy3B,EAAKrE,MAAMj6C,EAAIqd,EAAOrd,EAAGs+C,EAAKrE,MAAMp6C,EAAIwd,EAAOxd,GAC9E4C,EAAgB,IAAI,EAAAokB,SAASy3B,EAAKpE,IAAIl6C,EAAIqd,EAAOrd,EAAGs+C,EAAKpE,IAAIr6C,EAAIwd,EAAOxd,GACxE8tB,EAAgB2wB,EAAKc,MAC3B,IAAIw8B,EAA0B,IAAI,EAAAluD,aAAasxB,EAAMh/C,EAAGyC,EAAI5C,EAAI8tB,EAAQ,EAAGlrB,EAAIzC,EAAIg/C,EAAMh/C,EAAG2tB,GAC5FiuD,EAAY7hF,KAAK8hF,iCAAiCD,GAClD7hF,KAAK+hF,gBAAgBF,EAAWD,EAAOr9B,EAAKa,SAGzC88B,sCAAsC39B,EAAqBjhC,EAAkBs+D,GAChF,MAAM38B,EAAkB,IAAI,EAAAn4B,SAASy3B,EAAKrE,MAAMj6C,EAAIqd,EAAOrd,EAAGs+C,EAAKrE,MAAMp6C,EAAIwd,EAAOxd,GAC9E4C,EAAgB,IAAI,EAAAokB,SAASy3B,EAAKpE,IAAIl6C,EAAIqd,EAAOrd,EAAGs+C,EAAKpE,IAAIr6C,EAAIwd,EAAOxd,GACxE8tB,EAAgB2wB,EAAKc,MAC3B,IAAIw8B,EAA0B,IAAI,EAAAluD,aAAasxB,EAAMh/C,EAAGg/C,EAAMn/C,EAAG8tB,EAAOlrB,EAAI5C,EAAIm/C,EAAMn/C,GACtF+7E,EAAY7hF,KAAK8hF,iCAAiCD,GAClD7hF,KAAK+hF,gBAAgBF,EAAWD,EAAOr9B,EAAKa,SAGzC+8B,cAAcC,EAA0BR,GAC3C,MAAMpiD,EAAmB4iD,EAAKrqD,iBAC9B,IAAI8pD,EAA0B,IAAI,EAAAluD,aAAa6L,EAAI3D,iBAAiB51B,EAAGu5B,EAAI3D,iBAAiB/1B,EAAG05B,EAAIpD,YAAaoD,EAAIlD,cACpHulD,EAAY7hF,KAAK8hF,iCAAiCD,GAClD7hF,KAAK+hF,gBAAgBF,EAAWD,EAAeQ,EAAKxoB,OAGjDyoB,uBAAuBC,GAC1B,MAAM,IAAI5hF,MAAM,mBAGb6hF,UAAU1kC,EAAgC+jC,GAC7C,IAAK5hF,KAAK2pD,UAAU9L,EAAe9lB,kBAC/B,OAEJ,MAAMM,EAAewlB,EAAezlB,MACpC,GAA0B,KAAtBC,EAAM5W,KAAKwiC,OACX,OAEJ,MAAMu+B,EAA2BxiF,KAAKyiF,0BAA0B5kC,EAAe9lB,iBAAiB8D,kBAC1F6mD,EAA4B1iF,KAAKqiF,uBAAuBhqD,EAAM0rB,YAC9D4+B,EAAuB3iF,KAAKqiF,uBAAuBxkC,EAAe9lB,iBAAiBhE,KAAKH,OACxFgvD,EAAsBn0E,KAAKinD,KAAKitB,GAChCE,EAAuBp0E,KAAKinD,KAAKgtB,GAAqB,GAAM7kC,EAAeqG,UAAUpjD,SAE3F,OAAQu3B,EAAMjE,eAIV,KAAK,EAAAD,kBAAkBE,QACnB,MACJ,KAAK,EAAAF,kBAAkBG,WACnBkuD,EAAe18E,GAAK+8E,EAAe,EACnC,MACJ,KAAK,EAAA1uD,kBAAkBI,WACnBiuD,EAAe18E,GAAK+8E,EACpB,MACJ,KAAK,EAAA1uD,kBAAkBK,UACnBguD,EAAev8E,GAAK28E,EAAc,EAClC,MACJ,KAAK,EAAAzuD,kBAAkBM,aACnB+tD,EAAev8E,GAAK28E,EAAc,EAClCJ,EAAe18E,GAAK+8E,EAAe,EACnC,MACJ,KAAK,EAAA1uD,kBAAkBO,aACnB8tD,EAAev8E,GAAK28E,EAAc,EAClCJ,EAAe18E,GAAK+8E,EACpB,MACJ,KAAK,EAAA1uD,kBAAkBQ,SACnB6tD,EAAev8E,GAAK28E,EACpB,MACJ,KAAK,EAAAzuD,kBAAkBS,YACnB4tD,EAAev8E,GAAK28E,EACpBJ,EAAe18E,GAAK+8E,EAAe,EACnC,MACJ,KAAK,EAAA1uD,kBAAkBU,YACnB2tD,EAAev8E,GAAK28E,EACpBJ,EAAe18E,GAAK+8E,EACpB,MACJ,QACI,MAAM,IAAI,EAAAvjD,4BAA4B,IAG9C,OAAOt/B,KAAK8iF,YAAYjlC,EAAgB+jC,EAAOgB,EAAaC,EAAcH,EAAmBF,GAGvFC,0BAA0B51D,GAChC,MAAM,IAAInsB,MAAM,mBAGVqiF,2BAA2B1nB,GACjC,MAAMe,EAAgC,GACtC,IAAK,MAAMvvC,KAASwuC,EAChBe,EAAkB76D,KAAKvB,KAAKyiF,0BAA0B51D,IAE1D,OAAOuvC,EAGD0lB,iCAAiCD,GACvC,MAAM,IAAInhF,MAAM,mBAGV4gF,uBAIAS,gBAAgBF,EAAyBD,EAAex8B,EAAiBD,EAA8Bx3B,EAAgB,GAC7H,MAAM,IAAIjtB,MAAM,mBAGVslC,uBAIAJ,yBAAyBo9C,IAIzBn9C,uBAAuBm9C,IAIvBF,YAAYjlC,EAAgC+jC,EAAegB,EAC/CC,EAAsBI,EAAuBT,GAC/D,MAAM,IAAI9hF,MAAM,mBAGVwiF,qBAAqB7F,EAAqB8F,EACrBC,IAIrBC,YAAY3rD,GAClB,MAAM,IAAIh3B,MAAM,mBAGV4iF,YAAYhlC,IAIZilC,eAAejlC,IAIfklC,oBAAoBC,EAAwBpG,IAI5CqG,iBAAiBC,EAA0BtG,IAI3C1zB,UAAUnqB,GAChB,OAAO,EAGDokD,gBAAgBvG,GACtB,MAAM+F,EAA0CpjF,KAAK6jF,yBAAyBxG,GACxE8F,EAA0CnjF,KAAK8jF,4BAA4BV,GACjFpjF,KAAK+jF,0BAA0B1G,EAAQ8F,EAA2BC,GAG5DU,4BAA4BV,GAClC,MAAMD,EAA0CnjF,KAAK8hF,iCAAiCsB,GAGtF,OAFAD,EAA0Bl9E,EAAIwI,KAAKub,MAAMm5D,EAA0Bl9E,GACnEk9E,EAA0Br9E,EAAI2I,KAAKub,MAAMm5D,EAA0Br9E,GAC5Dq9E,EAGDU,yBAAyBxG,GAC/B,MAAM2G,EAAgC3G,EAAOtlD,iBAAiB6E,kBAM9D,OALgD,IAAI,EAAAjJ,aAChD0pD,EAAOtlD,iBAAiB8D,iBAAiB51B,EAAIo3E,EAAOtlD,iBAAiBmE,WAAa,EAClFmhD,EAAOtlD,iBAAiB8D,iBAAiB/1B,EAAIu3E,EAAOtlD,iBAAiBsE,UAAY,EAChF2nD,EAAgBpwD,MAAQ,EAAKowD,EAAgBnwD,OAAS,GAKrDkwD,0BAA0B7a,EAA0Bia,EAC1BC,GAChC,MAAMa,EAAwCjkF,KAAK6tD,oBAAoBR,qBACjE62B,EAAoClkF,KAAK6tD,oBAAoBN,mBAC/DvtD,KAAKmkC,kBAAkByB,+BACCtf,IAApB29D,GAAiCjkF,KAAK2pD,UAAUs6B,EAAgBlsD,mBAChE/3B,KAAK4lC,yBAAyBq+C,GAGlCjkF,KAAKmkC,kBAAkB0B,6BACDvf,IAAlB49D,GAA+BlkF,KAAK2pD,UAAUu6B,EAAcnsD,mBAC5D/3B,KAAK6lC,uBAAuBq+C,GAGpC,IAAK,MAAM5lC,KAAa4qB,EAAYpT,WAChC91D,KAAKmkF,cAAc7lC,GAEft+C,KAAKk4B,MAAMke,eAEPkI,EAAUkhC,aAAa1+E,OAAS,GAChCd,KAAKokF,WAAW9lC,EAAUkhC,cAI1BlhC,EAAUshC,WAAW9+E,OAAS,GAC9Bd,KAAKqkF,eAAe/lC,EAAUshC,WAAYthC,IAItD,IAAK,MAAMgmC,KAAcpb,EAAYqb,YACjCvkF,KAAKwkF,qBAAqBF,GAE9B,GAAIpb,EAAYvwC,SAAWuwC,EAAYvwC,OAAOA,OAAO8zB,WAAW,GAC5D,IAAK,MAAMp0B,KAAS6wC,EAAYxd,OAC5BrzB,EAAMosD,QAAUzkF,KAAKuiF,UAAUlqD,EAAe,EAAAqJ,gBAAgBkkB,OAItE,MAAM8+B,EAA4B1kF,KAAK6tD,oBAAoBtB,iBAAiB2K,YACtEytB,EAA6BD,EAAYz4E,QAAQ0lD,GAAeA,EAAW9H,UAAS/oD,OAC1F,IAAK,MAAM6iF,KAAWza,EAAY0b,mBAC9B5kF,KAAKwjF,oBAAoBG,EAASza,GAGtC,GAAIwb,EAAY5jF,OAAS,EAIrB,GAAI6jF,EAAqB,EACrB,IAAK,MAAMhB,KAAWza,EAAYgB,cAC9BlqE,KAAK0jF,iBAAiBC,EAASza,QAGnC,IAAK,MAAMya,KAAWza,EAAYgB,cAC7ByZ,EAAqC95B,SAAU,EAK5D,IAAK7pD,KAAKqsD,UACN,IAAK,MAAMie,KAAsBpB,EAAYkB,oBACzCE,EAAmBma,QAAUzkF,KAAKuiF,UAAUjY,EAA4B,EAAA5oC,gBAAgBkkB,OAGhG,IAAK,MAAMtH,KAAa4qB,EAAYpT,WAChC91D,KAAK6kF,qBAAqBvmC,GAE1Bt+C,KAAKmkC,kBAAkB+B,iBACvBlmC,KAAKkmC,gBAAgBgjC,GAErBlpE,KAAKmkC,kBAAkB8B,cACvBjmC,KAAK8kF,YAAY5b,GAIf6b,wBAAwBC,EAAkBC,EAClB9B,EAAyC+B,GACvE,OAAO,EAGDV,qBAAqBF,IAIrBH,cAAc7lC,GACpB,IAAK,MAAM5mB,KAAW4mB,EAAU6qB,SAC5BnpE,KAAKqjF,YAAY3rD,GAGjB13B,KAAKk4B,MAAMke,cACPkI,EAAUkhC,aAAa1+E,OAAS,GAChCd,KAAKokF,WAAW9lC,EAAUkhC,cAGlCx/E,KAAKmlF,iBAAiB7mC,GAEtBt+C,KAAKolF,gBAAgB9mC,GAEjBt+C,KAAK+gF,gBACL/gF,KAAKsjF,YAAYhlC,GAGjBt+C,KAAKghF,mBACLhhF,KAAKujF,eAAejlC,GAIlB+lC,eAAegB,EAA6B/mC,GAClDA,EAAUshC,WAAW52E,SAAQs8E,IAIzBA,EAAUplC,MAAMp6C,GAAKw4C,EAAUvmB,iBAAiB8D,iBAAiB/1B,EACjEw/E,EAAUnlC,IAAIr6C,GAAKw4C,EAAUvmB,iBAAiB8D,iBAAiB/1B,EAC/Dw/E,EAAUplC,MAAMj6C,GAAKq4C,EAAUvmB,iBAAiB8D,iBAAiB51B,EACjEq/E,EAAUnlC,IAAIl6C,GAAKq4C,EAAUvmB,iBAAiB8D,iBAAiB51B,EAC/DjG,KAAKulF,kBAAkBD,EAAWtlF,KAAKk4B,MAAM2a,6BAI3CuyC,gBAAgBI,IAIhBD,kBAAkB5F,EAA8BqC,EAAmByD,EAAuB,SAMhG,OAAOzlF,KAAK0lF,SAAS/F,EAAcz/B,MAAOy/B,EAAcx/B,IAAKslC,EAAczD,GAGrE0D,SAASzgC,EAAiB0gC,EAAgBvsC,EAAgB,YAAa4oC,IAUvEoC,WAAWwB,GACjBA,EAAa58E,SAAQu2E,GAAQA,EAAKkF,QAAUzkF,KAAKuiF,UAAUhD,EAAc,EAAA79C,gBAAgBkkB,SAOnFu/B,iBAAiB7mC,IAIjBunC,eAAevnC,GACrB,GAAIA,EAAUwX,WAAY,CACtB,MAAMh3B,EAAqBwf,EAAUvmB,iBAAiB8D,iBACtD,IAAK,IAAIp7B,EAAY,EAAGA,EAAI,EAAGA,IAC3BT,KAAKiiF,wCAAwC3jC,EAAUwX,WAAWr1D,GAAIq+B,EAAkB,EAAA4C,gBAAgBkkB,QAkB1GkgC,yBAAyBtiC,GAC/B,MAAM,IAAI9iD,MAAM,mBAOVqlF,sBAAsBtuD,GAC5B,MAAM,IAAI/2B,MAAM,mBAGVslF,WAAWhD,EAAqBiD,EAAsCnnD,EAC3DonD,EAAwB,EAAGtE,EAAwB,EAAAlgD,gBAAgBkkB,QAI1EyG,gBACV,OAAOrsD,KAAK6tD,oBAAoBD,UAGtBvB,cAAUz5C,GACpB5S,KAAK6tD,oBAAoBD,UAAYh7C,EAG/B8uE,SAASvI,GACf,GAAKn5E,KAAK2pD,UAAUwvB,EAAKphD,kBAAzB,CAIA,IAAK,MAAMslD,KAAUlE,EAAK1tB,aAClBzrD,KAAK2pD,UAAU0zB,EAAOtlD,mBACtB/3B,KAAK4jF,gBAAgBvG,GAG7B,GAAIlE,IAASA,EAAKxgD,OAAO8zB,WAAW,GAChC,IAAK,MAAMp0B,KAAS8gD,EAAKztB,OACrBrzB,EAAMosD,QAAUzkF,KAAKuiF,UAAUlqD,EAAe,EAAAqJ,gBAAgBkkB,OAKlE5lD,KAAK8gF,4BACL9gF,KAAKmmF,kBAAkBhN,EAAKphD,iBAAkB,EAAG/3B,KAAK8gF,6BAUtDqF,kBAAkBC,EAAuBxE,EAAgB,EAAGr1E,EAAe,OAC/E,MAAM85E,EAA4BD,EAASnpD,WAAW5lB,YAAoB7R,KAC1E,IAAI8gF,GAAqB,EACZ,QAAT/5E,EACA+5E,GAAY,EAEC,sBAAT/5E,EACA+5E,EAAYF,EAASnpD,sBAAsB,EAAAspD,kBAC3B,mBAATh6E,EACP+5E,EAAYF,EAASnpD,sBAAsB,EAAAupD,eAC3B,yBAATj6E,EACP+5E,EAAYF,EAASnpD,sBAAsB,EAAAwpD,qBAC3B,sBAATl6E,EACP+5E,EAAYF,EAASnpD,sBAAsB,EAAAypD,kBAC3B,mBAATn6E,EACP+5E,EAAYF,EAASnpD,sBAAsB,EAAA2gB,eAC3B,qBAATrxC,EACP+5E,EAAYF,EAASnpD,sBAAsB,EAAA0pD,iBAC3B,eAATp6E,EACP+5E,EAAYF,EAASnpD,sBAAsB,EAAA2pD,WAC3B,4BAATr6E,EACP+5E,EAAYF,EAASnpD,sBAAsB,EAAAyB,wBAC3B,uCAATnyB,IACP+5E,EAAYF,EAASnpD,sBAAsB,EAAA4pD,qCAG/CP,GAAaD,IAAqB95E,IAClCvM,KAAK8mF,gBAAgBV,OAAU9/D,GAAW,EAAM+/D,EAAkBzE,GAEtEA,IACAwE,EAASppD,cAAch0B,SAAQ+9E,GAAM/mF,KAAKmmF,kBAAkBY,EAAInF,EAAOr1E,KAGpEu6E,gBAAgB9hC,EACnB5L,EAA2B4tC,GAAqB,EAAOC,EAA+BrF,EAAgB,GAEtG,IAAIsF,EAAwB,IAAI,EAAAvzD,aAAaqxB,EAAKnpB,iBAAiB51B,EAAI++C,EAAKzoB,iBACxEyoB,EAAKnpB,iBAAiB/1B,EAAIk/C,EAAKtoB,gBAC/BsoB,EAAKvoB,kBAAoBuoB,EAAKzoB,iBAC9ByoB,EAAKroB,mBAAqBqoB,EAAKtoB,iBAC/BsqD,IACAhnF,KAAK2hF,8BAA8B,IAAI,EAAAj/B,cACnC,IAAI,EAAA51B,SAASk4B,EAAKnpB,iBAAiB51B,EAAI,EAAG++C,EAAKnpB,iBAAiB/1B,GAChE,IAAI,EAAAgnB,SAASk4B,EAAKnpB,iBAAiB51B,EAAI,EAAG++C,EAAKnpB,iBAAiB/1B,GAChE,GACA,EAAAy7B,wBAAwBM,iBACxBuX,GACAwoC,EAAQ,GAEZ5hF,KAAKuhF,4BAA4B,IAAI,EAAA7+B,cACjC,IAAI,EAAA51B,SAASk4B,EAAKnpB,iBAAiB51B,EAAG++C,EAAKnpB,iBAAiB/1B,EAAI,GAChE,IAAI,EAAAgnB,SAASk4B,EAAKnpB,iBAAiB51B,EAAG++C,EAAKnpB,iBAAiB/1B,EAAI,GAChE,GACA,EAAAy7B,wBAAwBM,iBACxBuX,GACAwoC,EAAQ,IAGhBsF,EAAUlnF,KAAK8hF,iCAAiCoF,GAChD,MAAMC,EAAiBnnF,KAAK+hF,gBAAgBmF,EAAiB,EAAAxlD,gBAAgB0lD,WAAYxF,EAAOxoC,EAAO,IACvG,GAAI6tC,EAAW,CACX,MAAM5uD,EAAe,IAAI,EAAAD,MAAM6uD,GAC/BjnF,KAAK8iF,YAAY,IAAI,EAAAllC,eAAevlB,EAAO,GAAK,EAAAlE,kBAAkBM,aAAcz0B,KAAKk4B,OACjF0pD,EAAOsF,EAAQtzD,MAAOszD,EAAQrzD,OAAQqzD,EAAQrzD,OAAQ,IAAI,EAAA/G,SAASo6D,EAAQjhF,EAAGihF,EAAQphF,EAAI,KAGlG,OAAOqhF,EAGHjhD,gBAAgBm3C,GACpB,IAAK,MAAMgK,KAAchK,EAAOiK,qBACxBD,IACIA,EAAW5gC,iBACXzmD,KAAKmiF,cAAckF,EAAW5gC,gBAAyB,EAAA/kB,gBAAgB0lD,YAEvEC,EAAWlpC,WACXkpC,EAAWlpC,SAASsmC,QAAUzkF,KAAKuiF,UAAU8E,EAAWlpC,SAAkB,EAAAzc,gBAAgB6lD,UAE1FF,EAAW3gC,gBACX1mD,KAAKmiF,cAAckF,EAAW3gC,eAAwB,EAAAhlB,gBAAgB0lD,YAEtEC,EAAWhvD,QACXgvD,EAAWhvD,MAAMosD,QAAUzkF,KAAKuiF,UAAU8E,EAAWhvD,MAAe,EAAAqJ,gBAAgB6lD,WAM5FzC,YAAYzH,GAChB,IAAK,MAAMz5E,KAAWy5E,EAAOmK,kBACrB5jF,IACIA,EAAQu6C,WACRv6C,EAAQu6C,SAASsmC,QAAUzkF,KAAKuiF,UAAU3+E,EAAQu6C,SAAkB,EAAAzc,gBAAgB6lD,UAEpF3jF,EAAQy0B,QACRz0B,EAAQy0B,MAAMosD,QAAUzkF,KAAKuiF,UAAU3+E,EAAQy0B,MAAe,EAAAqJ,gBAAgB6lD,WAMtF1C,qBAAqBvmC,GACzB,MAAMmpC,EAAyBnpC,EAAU0I,YAAY4C,iBAC/C89B,EAAeppC,EAAUvmB,iBAAiB8D,iBAAiB51B,EAC3D0hF,EAAerpC,EAAUvmB,iBAAiB8D,iBAAiB/1B,EAAI,EAC/Do1B,EAAsBojB,EAAUvmB,iBAAiBqE,YACnDqrD,EAAWG,WAAa5nF,KAAKmkC,kBAAkBuB,gBAC/C1lC,KAAK2hF,8BACD,IAAI,EAAAj/B,cACA,IAAI,EAAA51B,SAAS46D,EAAMC,GACnB,IAAI,EAAA76D,SAAS46D,EAAOxsD,EAAaysD,GACjC,EACA,EAAApmD,wBAAwBU,aAEpB,EAAAP,gBAAgBmmD,WAGhC,IAAIjuB,EAAiC,EAAA71B,wBAAwB7V,SACzD80D,EAAsB,EAAA3pB,YAAYyuB,KAClCC,EAAuB/nF,KAAKmkC,kBAAkB4B,oBAClD,OAAQ/lC,KAAKihF,iBACT,KAAK,EAAAn9C,iBAAiBkkD,KAClBhF,EAAS,EAAA3pB,YAAYyuB,KACjB9nF,KAAKioF,uBAAyB3pC,EAAU0I,YAAYkhC,UACpDtuB,EAAQ,EAAA71B,wBAAwBokD,iBAEpC,MACJ,KAAK,EAAArkD,iBAAiBuzB,UAClB2rB,EAAS,EAAA3pB,YAAY+uB,IACjB9pC,EAAU0I,YAAYqhC,YACtBzuB,EAAQ,EAAA71B,wBAAwBukD,eAEpC,MACJ,QACIP,GAAc,EAGtB,GAAIA,EAAa,CACb,MAAM7mF,EAAc,IAAI,EAAA4rB,SAAS46D,EAAOxsD,EAAc,EAAGysD,GACzD3nF,KAAKgmF,WAAWhD,EAAQppB,EAAO14D,GAEnC,GAAIlB,KAAKmkC,kBAAkBwB,WACvB,IAAK,MAAMjO,KAAW4mB,EAAU6qB,SAAU,CACtC,MAAMof,EAA0B7wD,EAAQK,iBAClCywD,EAAkBD,EAAW1sD,iBAAiB51B,EAC9CwiF,EAAkBF,EAAW1sD,iBAAiB/1B,EAAI,EACpD4xB,EAAQojD,UAAY96E,KAAK6tD,oBAAoBtB,iBAAiBm8B,uBAC9D1oF,KAAK2hF,8BACD,IAAI,EAAAj/B,cACA,IAAI,EAAA51B,SAAS07D,EAASC,GACtB,IAAI,EAAA37D,SAAS07D,EAAUD,EAAWnsD,YAAaqsD,GAC/C,EACA,EAAAlnD,wBAAwBW,eAEpB,EAAAR,gBAAgBinD,2CCtqBhD,IAAYtvB,yEAAAA,EAAA,EAAAA,cAAA,EAAAA,YAAW,KACnB,+CACA,+BACA,mCACA,uCACA,iDACA,qDACA,iDACA,qDACA,6CACA,iDACA,gCACA,gCACA,wBACA,wBACA,wBACA,sBACA,gCACA,kCACA,4BACA,gCACA,8BACA,oCACA,kCACA,wCACA,8CACA,4CACA,oBACA,sBACA,0BACA,kCACA,oCACA,oBACA,kBACA,kBACA,sBACA,oBACA,oBACA,kBACA,sBACA,sBACA,oBACA,kBACA,0BACA,4CACA,4BACA,wBACA,0BACA,oCACA,sDACA,cACA,cACA,cACA,cACA,cACA,cACA,sBACA,oBACA,8BACA,kCACA,sCACA,oCACA,wCACA,kCACA,sCACA,oCACA,wCACA,4BACA,0BACA,4CACA,oBACA,sCACA,gDACA,kCACA,gCACA,kBACA,kBACA,sBACA,oBACA,oBACA,oBACA,oBACA,kBACA,wCACA,4CACA,6HCpFJ,gBACA,UACA,UAGA,UAEA,UAEA,UAEA,UAEA,UACA,UAIA,UAEA,UAKA,MAAsBuvB,UAAoB,EAAArxD,gBAsBtClgB,YAAY1E,GACRglB,QAtBG,KAAAy2B,kBAA4B,EAIzB,KAAAy6B,WAA0B,GAC1B,KAAA55B,kBAA0C,GA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AAS7/D,EACVpG,KAAKiqK,UAAY,IAAI,EAAAx7I,MAAM,EAAAF,SAASnoB,EAAG,EAAIpG,KAAK6mG,aAAc,EAAAr4E,eAAeM,MAC7E9uB,KAAKmqK,oBAAuB,EAAInqK,KAAKukD,KACrC,MACJ,KAAK0hB,EAASC,WACVlmE,KAAKiqK,UAAY,IAAI,EAAAx7I,MAAM,EAAAF,SAASnoB,EAAG,EAAG,EAAAooB,eAAeM,MACzD9uB,KAAKmqK,oBAAsB,EAC3B,MACJ,KAAKlkG,EAAS0U,IACV36E,KAAKiqK,UAAY,IAAI,EAAAx7I,MAAM,EAAAF,SAAStN,EAAG,EAAG,EAAAuN,eAAeM,MACzD9uB,KAAKmqK,oBAAsB,EAC3B,MACJ,QACI,MAAM,IAAI,EAAA7qI,4BAA4B,cAKtD,IAAY2mC,EASAkV,EAjKZ,oBAwJA,SAAYlV,GACR,aACA,aACA,aACA,+BACA,iBALJ,CAAYA,EAAA,EAAAA,WAAA,EAAAA,SAAQ,KASpB,SAAYkV,GACR,oBACA,mDACA,qDACA,mDACA,2CACA,2CACA,2CACA,iCACA,2BACA,yBACA,mCACA,8BACA,gCACA,0BACA,8BACA,sCACA,4BACA,sCACA,4CACA,gCACA,oCACA,gCACA,8BACA,8BACA,0CACA,sDACA,sDACA,oDACA,sDACA,sDACA,8CACA,8CACA,4CACA,sCACA,oDACA,gDACA,sCACA,kCACA,kCACA,oCACA,oCACA,wBACA,sBACA,sBACA,gCACA,0CACA,8CACA,0CACA,0BACA,8CACA,8CACA,0CACA,0CACA,gCACA,gCACA,kCACA,sCACA,0BACA,4BACA,oBACA,sCACA,kCACA,sCACA,sCACA,sCACA,kCACA,4BACA,8BACA,oCACA,oBACA,oCACA,0BACA,4BACA,0BACA,sBACA,4BACA,8BACA,oCACA,gCACA,0BACA,0BACA,sCACA,0CACA,0CACA,oCACA,wCACA,oCACA,sCACA,4CACA,sCACA,gCACA,0CACA,kCACA,kCACA,wCACA,gCACA,kCACA,8BACA,0CACA,oCACA,0CACA,2CACA,qCACA,mCACA,iCACA,uBACA,uBACA,6BAC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","sources":["webpack://opensheetmusicdisplay/webpack/universalModuleDefinition","webpack://opensheetmusicdisplay/./node_modules/jszip/dist/jszip.min.js","webpack://opensheetmusicdisplay/./node_modules/loglevel/lib/loglevel.js","webpack://opensheetmusicdisplay/./src/Common/DataObjects/Fraction.ts","webpack://opensheetmusicdisplay/./src/Common/DataObjects/Matrix2D.ts","webpack://opensheetmusicdisplay/./src/Common/DataObjects/MusicSheetErrors.ts","webpack://opensheetmusicdisplay/./src/Common/DataObjects/OSMDColor.ts","webpack://opensheetmusicdisplay/./src/Common/DataObjects/Pitch.ts","webpack://opensheetmusicdisplay/./src/Common/DataObjects/PointF2D.ts","webpack://opensheetmusicdisplay/./src/Common/DataObjects/RectangleF2D.ts","webpack://opensheetmusicdisplay/./src/Common/DataObjects/SizeF2D.ts","webpack://opensheetmusicdisplay/./src/Common/DataObjects/index.ts","webpack://opensheetmusicdisplay/./src/Common/Enums/FontStyles.ts","webpack://opensheetmusicdisplay/./src/Common/Enums/Fonts.ts","webpack://opensheetmusicdisplay/./src/Common/Enums/TextAlignment.ts","webpack://opensheetmusicdisplay/./src/Common/Enums/TieTypes.ts","webpack://opensheetmusicdisplay/./src/Common/Enums/index.ts","webpack://opensheetmusicdisplay/./src/Common/FileIO/Mxl.ts","webpack://opensheetmusicdisplay/./src/Common/FileIO/Xml.ts","webpack://opensheetmusicdisplay/./src/Common/FileIO/index.ts","webpack://opensheetmusicdisplay/./src/Common/Strings/StringUtil.ts","webpack://opensheetmusicdisplay/./src/Common/index.ts","webpack://opensheetmusicdisplay/./src/MusicalScore/Exceptions.ts","webpack://opensheetmusicdisplay/./src/MusicalScore/Graphical/AbstractGraphicalExpression.ts","webpack://opensheetmusicdisplay/./src/MusicalScore/Graphical/AbstractGraphicalInstruction.ts","webpack://opensheetmusicdisplay/./src/MusicalScore/Graphical/AccidentalCalculator.ts","webpack://opensheetmusicdisplay/./src/MusicalScore/Graphical/BoundingBox.ts","webpack://opensheetmusicdisplay/./src/MusicalScore/Graphical/Clickable.ts","webpack://opensheetmusicdisplay/./src/MusicalScore/Graphical/DrawingEnums.ts","webpack://opensheetmusicdisplay/./src/MusicalScore/Graphical/DrawingMode.ts","webpack://opensheetmusicdisplay/./src/MusicalScore/Graphical/DrawingParameters.ts","webpack://opensheetmusicdisplay/./src/MusicalScore/Graphical/EngravingRules.ts","webpack://opensheetmusicdisplay/./src/MusicalScore/Graphical/GraphicalChordSymbolContainer.ts","webpack://opensheetmusicdisplay/./src/MusicalScore/Graphical/GraphicalComment.ts","webpack://opensheetmusicdisplay/./src/MusicalScore/Graphical/GraphicalContinuousDynamicExpression.ts","webpack://opensheetmusicdisplay/./src/MusicalScore/Graphical/GraphicalCurve.ts","webpack://opensheetmusicdisplay/./src/MusicalScore/Graphical/GraphicalInstantaneousDynamicExpression.ts","webpack://opensheetmusicdisplay/./src/MusicalScore/Graphical/GraphicalInstantaneousTempoExpression.ts","webpack://opensheetmusicdisplay/./src/MusicalScore/Graphical/GraphicalLabel.ts","webpack://opensheetmusicdisplay/./src/MusicalScore/Graphical/GraphicalLine.ts","webpack://opensheetmusicdisplay/./src/MusicalScore/Graphical/GraphicalLyricEntry.ts","webpack://opensheetmusicdisplay/./src/MusicalScore/Graphical/GraphicalLyricWord.ts","webpack://opensheetmusicdisplay/./src/MusicalScore/Graphical/GraphicalMarkedArea.ts","webpack://opensheetmusicdisplay/./src/MusicalScore/Graphical/GraphicalMeasure.ts","webpack://opensheetmusicdisplay/./src/MusicalScore/Graphical/GraphicalMusicPage.ts","webpack://opensheetmusicdisplay/./src/MusicalScore/Graphical/GraphicalMusicSheet.ts","webpack://opensheetmusicdisplay/./src/MusicalScore/Graphical/GraphicalNote.ts","webpack://opensheetmusicdisplay/./src/MusicalScore/Graphical/GraphicalObject.ts","webpack://opensheetmusicdisplay/./src/MusicalScore/Graphical/GraphicalOctaveShift.ts","webpack://opensheetmusicdisplay/./src/MusicalScore/Graphical/GraphicalRectangle.ts","webpack://opensheetmusicdisplay/./src/MusicalScore/Graphical/GraphicalSlur.ts","webpack://opensheetmusicdisplay/./src/MusicalScore/Graphical/GraphicalStaffEntry.ts","webpack://opensheetmusicdisplay/./src/MusicalScore/Graphical/GraphicalStaffEntryLink.ts","webpack://opensheetmusicdisplay/./src/MusicalScore/Graphical/GraphicalTie.ts","webpack://opensheetmusicdisplay/./src/MusicalScore/Graphical/GraphicalUnknownExpression.ts","webpack://opensheetmusicdisplay/./src/MusicalScore/Graphical/GraphicalVoiceEntry.ts","webpack://opensheetmusicdisplay/./src/MusicalScore/Graphical/MusicSheetCalculator.ts","webpack://opensheetmusicdisplay/./src/MusicalScore/Graphical/MusicSheetDrawer.ts","webpack://opensheetmusicdisplay/./src/MusicalScore/Graphical/MusicSymbol.ts","webpack://opensheetmusicdisplay/./src/MusicalScore/Graphical/MusicSystem.ts","webpack://opensheetmusicdisplay/./src/MusicalScore/Graphical/MusicSystemBuilder.ts","webpack://opensheetmusicdisplay/./src/MusicalScore/Graphical/OctaveShiftParams.ts","webpack://opensheetmusicdisplay/./src/MusicalScore/Graphical/PlainSkyBottomLineBatchCalculatorBackend.ts","webpack://opensheetmusicdisplay/./src/MusicalScore/Graphical/SelectionEndSymbol.ts","webpack://opensheetmusicdisplay/./src/MusicalScore/Graphical/SelectionStartSymbol.ts","webpack://opensheetmusicdisplay/./src/MusicalScore/Graphical/SkyBottomLineBatchCalculator.ts","webpack://opensheetmusicdisplay/./src/MusicalScore/Graphical/SkyBottomLineBatchCalculatorBackend.ts","webpack://opensheetmusicdisplay/./src/MusicalScore/Graphical/SkyBottomLineCalculationResult.ts","webpack://opensheetmusicdisplay/./src/MusicalScore/Graphical/SkyBottomLineCalculator.ts","webpack://opensheetmusicdisplay/./src/MusicalScore/Graphical/StaffLine.ts","webpack://opensheetmusicdisplay/./src/MusicalScore/Graphical/StaffLineActivitySymbol.ts","webpack://opensheetmusicdisplay/./src/MusicalScore/Graphical/SystemLine.ts","webpack://opensheetmusicdisplay/./src/MusicalScore/Graphical/SystemLinePosition.ts","webpack://opensheetmusicdisplay/./src/MusicalScore/Graphical/SystemLinesEnum.ts","webpack://opensheetmusicdisplay/./src/MusicalScore/Graphical/VerticalGraphicalStaffEntryContainer.ts","webpack://opensheetmusicdisplay/./src/MusicalScore/Graphical/VexFlow/AlignmentManager.ts","webpack://opensheetmusicdisplay/./src/MusicalScore/Graphical/VexFlow/CanvasVexFlowBackend.ts","webpack://opensheetmusicdisplay/./src/MusicalScore/Graphical/VexFlow/SvgVexFlowBackend.ts","webpack://opensheetmusicdisplay/./src/MusicalScore/Graphical/VexFlow/VexFlowBackend.ts","webpack://opensheetmusicdisplay/./src/MusicalScore/Graphical/VexFlow/VexFlowContinuousDynamicExpression.ts","webpack://opensheetmusicdisplay/./src/MusicalScore/Graphical/VexFlow/VexFlowConverter.ts","webpack://opensheetmusicdisplay/./src/MusicalScore/Graphical/VexFlow/VexFlowGraphicalNote.ts","webpack://opensheetmusicdisplay/./src/MusicalScore/Graphical/VexFlow/VexFlowGraphicalSymbolFactory.ts","webpack://opensheetmusicdisplay/./src/MusicalScore/Graphical/VexFlow/VexFlowInstantaneousDynamicExpression.ts","webpack://opensheetmusicdisplay/./src/MusicalScore/Graphical/VexFlow/VexFlowInstrumentBrace.ts","webpack://opensheetmusicdisplay/./src/MusicalScore/Graphical/VexFlow/VexFlowInstrumentBracket.ts","webpack://opensheetmusicdisplay/./src/MusicalScore/Graphical/VexFlow/VexFlowMeasure.ts","webpack://opensheetmusicdisplay/./src/MusicalScore/Graphical/VexFlow/VexFlowMultiRestMeasure.ts","webpack://opensheetmusicdisplay/./src/MusicalScore/Graphical/VexFlow/VexFlowMusicSheetCalculator.ts","webpack://opensheetmusicdisplay/./src/MusicalScore/Graphical/VexFlow/VexFlowMusicSheetDrawer.ts","webpack://opensheetmusicdisplay/./src/MusicalScore/Graphical/VexFlow/VexFlowMusicSystem.ts","webpack://opensheetmusicdisplay/./src/MusicalScore/Graphical/VexFlow/VexFlowOctaveShift.ts","webpack://opensheetmusicdisplay/./src/MusicalScore/Graphical/VexFlow/VexFlowSlur.ts","webpack://opensheetmusicdisplay/./src/MusicalScore/Graphical/VexFlow/VexFlowStaffEntry.ts","webpack://opensheetmusicdisplay/./src/MusicalScore/Graphical/VexFlow/VexFlowStaffLine.ts","webpack://opensheetmusicdisplay/./src/MusicalScore/Graphical/VexFlow/VexFlowTabMeasure.ts","webpack://opensheetmusicdisplay/./src/MusicalScore/Graphical/VexFlow/VexFlowTextMeasurer.ts","webpack://opensheetmusicdisplay/./src/MusicalScore/Graphical/VexFlow/VexFlowVoiceEntry.ts","webpack://opensheetmusicdisplay/./src/MusicalScore/Graphical/VexFlow/VexflowStafflineNoteCalculator.ts","webpack://opensheetmusicdisplay/./src/MusicalScore/Graphical/VexFlow/index.ts","webpack://opensheetmusicdisplay/./src/MusicalScore/Graphical/WebGLSkyBottomLineBatchCalculatorBackend.ts","webpack://opensheetmusicdisplay/./src/MusicalScore/Graphical/index.ts","webpack://opensheetmusicdisplay/./src/MusicalScore/Instrument.ts","webpack://opensheetmusicdisplay/./src/MusicalScore/InstrumentalGroup.ts","webpack://opensheetmusicdisplay/./src/MusicalScore/Interfaces/AClassHierarchyTrackable.ts","webpack://opensheetmusicdisplay/./src/MusicalScore/Interfaces/ITextTranslation.ts","webpack://opensheetmusicdisplay/./src/MusicalScore/Interfaces/index.ts","webpack://opensheetmusicdisplay/./src/MusicalScore/Label.ts","webpack://opensheetmusicdisplay/./src/MusicalScore/MusicParts/MusicPartManager.ts","webpack://opensheetmusicdisplay/./src/MusicalScore/MusicParts/MusicPartManagerIterator.ts","webpack://opensheetmusicdisplay/./src/MusicalScore/MusicParts/index.ts","webpack://opensheetmusicdisplay/./src/MusicalScore/MusicSheet.ts","webpack://opensheetmusicdisplay/./src/MusicalScore/MusicSource/MappingSourceMusicPart.ts","webpack://opensheetmusicdisplay/./src/MusicalScore/MusicSource/PartListEntry.ts","webpack://opensheetmusicdisplay/./src/MusicalScore/MusicSource/Repetition.ts","webpack://opensheetmusicdisplay/./src/MusicalScore/MusicSource/SourceMusicPart.ts","webpack://opensheetmusicdisplay/./src/MusicalScore/MusicSource/index.ts","webpack://opensheetmusicdisplay/./src/MusicalScore/ScoreIO/InstrumentReader.ts","webpack://opensheetmusicdisplay/./src/MusicalScore/ScoreIO/MusicSheetReader.ts","webpack://opensheetmusicdisplay/./src/MusicalScore/ScoreIO/MusicSymbolModuleFactory.ts","webpack://opensheetmusicdisplay/./src/MusicalScore/ScoreIO/MusicSymbolModules/ArticulationReader.ts","webpack://opensheetmusicdisplay/./src/MusicalScore/ScoreIO/MusicSymbolModules/ChordSymbolReader.ts","webpack://opensheetmusicdisplay/./src/MusicalScore/ScoreIO/MusicSymbolModules/ExpressionReader.ts","webpack://opensheetmusicdisplay/./src/MusicalScore/ScoreIO/MusicSymbolModules/LyricsReader.ts","webpack://opensheetmusicdisplay/./src/MusicalScore/ScoreIO/MusicSymbolModules/RepetitionCalculator.ts","webpack://opensheetmusicdisplay/./src/MusicalScore/ScoreIO/MusicSymbolModules/RepetitionInstructionReader.ts","webpack://opensheetmusicdisplay/./src/MusicalScore/ScoreIO/MusicSymbolModules/SlurReader.ts","webpack://opensheetmusicdisplay/./src/MusicalScore/ScoreIO/MusicSymbolModules/index.ts","webpack://opensheetmusicdisplay/./src/MusicalScore/ScoreIO/ReaderPluginManager.ts","webpack://opensheetmusicdisplay/./src/MusicalScore/ScoreIO/VoiceGenerator.ts","webpack://opensheetmusicdisplay/./src/MusicalScore/ScoreIO/index.ts","webpack://opensheetmusicdisplay/./src/MusicalScore/SubInstrument.ts","webpack://opensheetmusicdisplay/./src/MusicalScore/VoiceData/Arpeggio.ts","webpack://opensheetmusicdisplay/./src/MusicalScore/VoiceData/Articulation.ts","webpack://opensheetmusicdisplay/./src/MusicalScore/VoiceData/Beam.ts","webpack://opensheetmusicdisplay/./src/MusicalScore/VoiceData/ChordSymbolContainer.ts","webpack://opensheetmusicdisplay/./src/MusicalScore/VoiceData/Expressions/AbstractExpression.ts","webpack://opensheetmusicdisplay/./src/MusicalScore/VoiceData/Expressions/AbstractTempoExpression.ts","webpack://opensheetmusicdisplay/./src/MusicalScore/VoiceData/Expressions/ContinuousExpressions/ContinuousDynamicExpression.ts","webpack://opensheetmusicdisplay/./src/MusicalScore/VoiceData/Expressions/ContinuousExpressions/ContinuousTempoExpression.ts","webpack://opensheetmusicdisplay/./src/MusicalScore/VoiceData/Expressions/ContinuousExpressions/OctaveShift.ts","webpack://opensheetmusicdisplay/./src/MusicalScore/VoiceData/Expressions/ContinuousExpressions/Slur.ts","webpack://opensheetmusicdisplay/./src/MusicalScore/VoiceData/Expressions/DynamicExpressionSymbolEnum.ts","webpack://opensheetmusicdisplay/./src/MusicalScore/VoiceData/Expressions/InstantaneousDynamicExpression.ts","webpack://opensheetmusicdisplay/./src/MusicalScore/VoiceData/Expressions/InstantaneousTempoExpression.ts","webpack://opensheetmusicdisplay/./src/MusicalScore/VoiceData/Expressions/MoodExpression.ts","webpack://opensheetmusicdisplay/./src/MusicalScore/VoiceData/Expressions/MultiExpression.ts","webpack://opensheetmusicdisplay/./src/MusicalScore/VoiceData/Expressions/MultiTempoExpression.ts","webpack://opensheetmusicdisplay/./src/MusicalScore/VoiceData/Expressions/RehearsalExpression.ts","webpack://opensheetmusicdisplay/./src/MusicalScore/VoiceData/Expressions/UnknownExpression.ts","webpack://opensheetmusicdisplay/./src/MusicalScore/VoiceData/Expressions/index.ts","webpack://opensheetmusicdisplay/./src/MusicalScore/VoiceData/HelperObjects/DynamicsContainer.ts","webpack://opensheetmusicdisplay/./src/MusicalScore/VoiceData/Instructions/AbstractNotationInstruction.ts","webpack://opensheetmusicdisplay/./src/MusicalScore/VoiceData/Instructions/ClefInstruction.ts","webpack://opensheetmusicdisplay/./src/MusicalScore/VoiceData/Instructions/KeyInstruction.ts","webpack://opensheetmusicdisplay/./src/MusicalScore/VoiceData/Instructions/RepetitionInstruction.ts","webpack://opensheetmusicdisplay/./src/MusicalScore/VoiceData/Instructions/RhythmInstruction.ts","webpack://opensheetmusicdisplay/./src/MusicalScore/VoiceData/Instructions/TechnicalInstruction.ts","webpack://opensheetmusicdisplay/./src/MusicalScore/VoiceData/Instructions/index.ts","webpack://opensheetmusicdisplay/./src/MusicalScore/VoiceData/LinkedVoice.ts","webpack://opensheetmusicdisplay/./src/MusicalScore/VoiceData/Lyrics/LyricsEntry.ts","webpack://opensheetmusicdisplay/./src/MusicalScore/VoiceData/Lyrics/LyricsWord.ts","webpack://opensheetmusicdisplay/./src/MusicalScore/VoiceData/Note.ts","webpack://opensheetmusicdisplay/./src/MusicalScore/VoiceData/NoteType.ts","webpack://opensheetmusicdisplay/./src/MusicalScore/VoiceData/Notehead.ts","webpack://opensheetmusicdisplay/./src/MusicalScore/VoiceData/OrnamentContainer.ts","webpack://opensheetmusicdisplay/./src/MusicalScore/VoiceData/SourceMeasure.ts","webpack://opensheetmusicdisplay/./src/MusicalScore/VoiceData/SourceStaffEntry.ts","webpack://opensheetmusicdisplay/./src/MusicalScore/VoiceData/Staff.ts","webpack://opensheetmusicdisplay/./src/MusicalScore/VoiceData/StaffEntryLink.ts","webpack://opensheetmusicdisplay/./src/MusicalScore/VoiceData/TabNote.ts","webpack://opensheetmusicdisplay/./src/MusicalScore/VoiceData/Tie.ts","webpack://opensheetmusicdisplay/./src/MusicalScore/VoiceData/Tuplet.ts","webpack://opensheetmusicdisplay/./src/MusicalScore/VoiceData/VerticalSourceStaffEntryContainer.ts","webpack://opensheetmusicdisplay/./src/MusicalScore/VoiceData/Voice.ts","webpack://opensheetmusicdisplay/./src/MusicalScore/VoiceData/VoiceEntry.ts","webpack://opensheetmusicdisplay/./src/MusicalScore/VoiceData/index.ts","webpack://opensheetmusicdisplay/./src/MusicalScore/index.ts","webpack://opensheetmusicdisplay/./src/OpenSheetMusicDisplay/AJAX.ts","webpack://opensheetmusicdisplay/./src/OpenSheetMusicDisplay/Cursor.ts","webpack://opensheetmusicdisplay/./src/OpenSheetMusicDisplay/OSMDOptions.ts","webpack://opensheetmusicdisplay/./src/OpenSheetMusicDisplay/OpenSheetMusicDisplay.ts","webpack://opensheetmusicdisplay/./src/OpenSheetMusicDisplay/index.ts","webpack://opensheetmusicdisplay/./src/Plugins/Transpose/TransposeCalculator.ts","webpack://opensheetmusicdisplay/./src/Plugins/Transpose/index.ts","webpack://opensheetmusicdisplay/./src/Plugins/index.ts","webpack://opensheetmusicdisplay/./src/Util/CollectionUtil.ts","webpack://opensheetmusicdisplay/./src/Util/PSMath.ts","webpack://opensheetmusicdisplay/./src/Util/index.ts","webpack://opensheetmusicdisplay/./src/index.ts","webpack://opensheetmusicdisplay/./node_modules/typescript-collections/dist/lib/BSTree.js","webpack://opensheetmusicdisplay/./node_modules/typescript-collections/dist/lib/BSTreeKV.js","webpack://opensheetmusicdisplay/./node_modules/typescript-collections/dist/lib/Bag.js","webpack://opensheetmusicdisplay/./node_modules/typescript-collections/dist/lib/Dictionary.js","webpack://opensheetmusicdisplay/./node_modules/typescript-collections/dist/lib/FactoryDictionary.js","webpack://opensheetmusicdisplay/./node_modules/typescript-collections/dist/lib/Heap.js","webpack://opensheetmusicdisplay/./node_modules/typescript-collections/dist/lib/LinkedDictionary.js","webpack://opensheetmusicdisplay/./node_modules/typescript-collections/dist/lib/LinkedList.js","webpack://opensheetmusicdisplay/./node_modules/typescript-collections/dist/lib/MultiDictionary.js","webpack://opensheetmusicdisplay/./node_modules/typescript-collections/dist/lib/MultiRootTree.js","webpack://opensheetmusicdisplay/./node_modules/typescript-collections/dist/lib/PriorityQueue.js","webpack://opensheetmusicdisplay/./node_modules/typescript-collections/dist/lib/Queue.js","webpack://opensheetmusicdisplay/./node_modules/typescript-collections/dist/lib/Set.js","webpack://opensheetmusicdisplay/./node_modules/typescript-collections/dist/lib/Stack.js","webpack://opensheetmusicdisplay/./node_modules/typescript-collections/dist/lib/arrays.js","webpack://opensheetmusicdisplay/./node_modules/typescript-collections/dist/lib/index.js","webpack://opensheetmusicdisplay/./node_modules/typescript-collections/dist/lib/util.js","webpack://opensheetmusicdisplay/./node_modules/vexflow/src/vex.js","webpack://opensheetmusicdisplay/./node_modules/vexflow/src/fraction.js","webpack://opensheetmusicdisplay/./node_modules/vexflow/src/registry.js","webpack://opensheetmusicdisplay/./node_modules/vexflow/src/element.js","webpack://opensheetmusicdisplay/./node_modules/vexflow/src/boundingboxcomputation.js","webpack://opensheetmusicdisplay/./node_modules/vexflow/src/boundingbox.js","webpack://opensheetmusicdisplay/./node_modules/vexflow/src/fonts/vexflow_font.js","webpack://opensheetmusicdisplay/./node_modules/vexflow/src/glyph.js","webpack://opensheetmusicdisplay/./node_modules/vexflow/src/tables.js","webpack://opensheetmusicdisplay/./node_modules/vexflow/src/canvascontext.js","webpack://opensheetmusicdisplay/./node_modules/vexflow/src/raphaelcontext.js","webpack://opensheetmusicdisplay/./node_modules/vexflow/src/svgcontext.js","webpack://opensheetmusicdisplay/./node_modules/vexflow/src/renderer.js","webpack://opensheetmusicdisplay/./node_modules/vexflow/src/stem.js","webpack://opensheetmusicdisplay/./node_modules/vexflow/src/tuplet.js","webpack://opensheetmusicdisplay/./node_modules/vexflow/src/beam.js","webpack://opensheetmusicdisplay/./node_modules/vexflow/src/voice.js","webpack://opensheetmusicdisplay/./node_modules/vexflow/src/staveconnector.js","webpack://opensheetmusicdisplay/./node_modules/vexflow/src/tickable.js","webpack://opensheetmusicdisplay/./node_modules/vexflow/src/note.js","webpack://opensheetmusicdisplay/./node_modules/vexflow/src/notehead.js","webpack://opensheetmusicdisplay/./node_modules/vexflow/src/stemmablenote.js","webpack://opensheetmusicdisplay/./node_modules/vexflow/src/modifier.js","webpack://opensheetmusicdisplay/./node_modules/vexflow/src/dot.js","webpack://opensheetmusicdisplay/./node_modules/vexflow/src/stavenote.js","webpack://opensheetmusicdisplay/./node_modules/vexflow/src/frethandfinger.js","webpack://opensheetmusicdisplay/./node_modules/vexflow/src/music.js","webpack://opensheetmusicdisplay/./node_modules/vexflow/src/accidental.js","webpack://opensheetmusicdisplay/./node_modules/vexflow/src/notesubgroup.js","webpack://opensheetmusicdisplay/./node_modules/vexflow/src/stavetie.js","webpack://opensheetmusicdisplay/./node_modules/vexflow/src/tabtie.js","webpack://opensheetmusicdisplay/./node_modules/vexflow/src/gracenotegroup.js","webpack://opensheetmusicdisplay/./node_modules/vexflow/src/strokes.js","webpack://opensheetmusicdisplay/./node_modules/vexflow/src/stringnumber.js","webpack://opensheetmusicdisplay/./node_modules/vexflow/src/articulation.js","webpack://opensheetmusicdisplay/./node_modules/vexflow/src/tickcontext.js","webpack://opensheetmusicdisplay/./node_modules/vexflow/src/ornament.js","webpack://opensheetmusicdisplay/./node_modules/vexflow/src/annotation.js","webpack://opensheetmusicdisplay/./node_modules/vexflow/src/bend.js","webpack://opensheetmusicdisplay/./node_modules/vexflow/src/vibrato.js","webpack://opensheetmusicdisplay/./node_modules/vexflow/src/modifiercontext.js","webpack://opensheetmusicdisplay/./node_modules/vexflow/src/formatter.js","webpack://opensheetmusicdisplay/./node_modules/vexflow/src/stavemodifier.js","webpack://opensheetmusicdisplay/./node_modules/vexflow/src/stavebarline.js","webpack://opensheetmusicdisplay/./node_modules/vexflow/src/staverepetition.js","webpack://opensheetmusicdisplay/./node_modules/vexflow/src/stavesection.js","webpack://opensheetmusicdisplay/./node_modules/vexflow/src/stavetempo.js","webpack://opensheetmusicdisplay/./node_modules/vexflow/src/textnote.js","webpack://opensheetmusicdisplay/./node_modules/vexflow/src/stavetext.js","webpack://opensheetmusicdisplay/./node_modules/vexflow/src/clef.js","webpack://opensheetmusicdisplay/./node_modules/vexflow/src/keysignature.js","webpack://opensheetmusicdisplay/./node_modules/vexflow/src/timesignature.js","webpack://opensheetmusicdisplay/./node_modules/vexflow/src/stavevolta.js","webpack://opensheetmusicdisplay/./node_modules/vexflow/src/stave.js","webpack://opensheetmusicdisplay/./node_modules/vexflow/src/tabstave.js","webpack://opensheetmusicdisplay/./node_modules/vexflow/src/tabnote.js","webpack://opensheetmusicdisplay/./node_modules/vexflow/src/vibratobracket.js","webpack://opensheetmusicdisplay/./node_modules/vexflow/src/multimeasurerest.js","webpack://opensheetmusicdisplay/./node_modules/vexflow/src/clefnote.js","webpack://opensheetmusicdisplay/./node_modules/vexflow/src/keysignote.js","webpack://opensheetmusicdisplay/./node_modules/vexflow/src/timesignote.js","webpack://opensheetmusicdisplay/./node_modules/vexflow/src/tabslide.js","webpack://opensheetmusicdisplay/./node_modules/vexflow/src/gracenote.js","webpack://opensheetmusicdisplay/./node_modules/vexflow/src/gracetabnote.js","webpack://opensheetmusicdisplay/./node_modules/vexflow/src/tuning.js","webpack://opensheetmusicdisplay/./node_modules/vexflow/src/stavehairpin.js","webpack://opensheetmusicdisplay/./node_modules/vexflow/src/curve.js","webpack://opensheetmusicdisplay/./node_modules/vexflow/src/textdynamics.js","webpack://opensheetmusicdisplay/./node_modules/vexflow/src/staveline.js","webpack://opensheetmusicdisplay/./node_modules/vexflow/src/pedalmarking.js","webpack://opensheetmusicdisplay/./node_modules/vexflow/src/textbracket.js","webpack://opensheetmusicdisplay/./node_modules/vexflow/src/barnote.js","webpack://opensheetmusicdisplay/./node_modules/vexflow/src/ghostnote.js","webpack://opensheetmusicdisplay/./node_modules/vexflow/src/tremolo.js","webpack://opensheetmusicdisplay/./node_modules/vexflow/src/crescendo.js","webpack://opensheetmusicdisplay/./node_modules/vexflow/src/parser.js","webpack://opensheetmusicdisplay/./node_modules/vexflow/src/easyscore.js","webpack://opensheetmusicdisplay/./node_modules/vexflow/src/factory.js","webpack://opensheetmusicdisplay/./node_modules/vexflow/src/system.js","webpack://opensheetmusicdisplay/./node_modules/vexflow/src/index.js","webpack://opensheetmusicdisplay/./node_modules/vexflow/src/keymanager.js","webpack://opensheetmusicdisplay/webpack/bootstrap","webpack://opensheetmusicdisplay/webpack/runtime/define property getters","webpack://opensheetmusicdisplay/webpack/runtime/global","webpack://opensheetmusicdisplay/webpack/runtime/hasOwnProperty shorthand","webpack://opensheetmusicdisplay/webpack/runtime/make namespace object","webpack://opensheetmusicdisplay/webpack/startup"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"opensheetmusicdisplay\"] = factory();\n\telse\n\t\troot[\"opensheetmusicdisplay\"] = factory();\n})(this, function() {\nreturn ","/*!\n\nJSZip v3.7.1 - A JavaScript class for generating and reading zip files\n<http://stuartk.com/jszip>\n\n(c) 2009-2016 Stuart Knightley <stuart [at] stuartk.com>\nDual licenced under the MIT license or GPLv3. See https://raw.github.com/Stuk/jszip/master/LICENSE.markdown.\n\nJSZip uses the library pako released under the MIT license :\nhttps://github.com/nodeca/pako/blob/master/LICENSE\n*/\n\n!function(t){if(\"object\"==typeof exports&&\"undefined\"!=typeof module)module.exports=t();else if(\"function\"==typeof define&&define.amd)define([],t);else{(\"undefined\"!=typeof window?window:\"undefined\"!=typeof global?global:\"undefined\"!=typeof self?self:this).JSZip=t()}}(function(){return function s(a,o,h){function u(r,t){if(!o[r]){if(!a[r]){var e=\"function\"==typeof require&&require;if(!t&&e)return e(r,!0);if(l)return l(r,!0);var i=new Error(\"Cannot find module '\"+r+\"'\");throw i.code=\"MODULE_NOT_FOUND\",i}var n=o[r]={exports:{}};a[r][0].call(n.exports,function(t){var e=a[r][1][t];return u(e||t)},n,n.exports,s,a,o,h)}return o[r].exports}for(var l=\"function\"==typeof require&&require,t=0;t<h.length;t++)u(h[t]);return u}({1:[function(t,e,r){\"use strict\";var c=t(\"./utils\"),d=t(\"./support\"),p=\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";r.encode=function(t){for(var e,r,i,n,s,a,o,h=[],u=0,l=t.length,f=l,d=\"string\"!==c.getTypeOf(t);u<t.length;)f=l-u,i=d?(e=t[u++],r=u<l?t[u++]:0,u<l?t[u++]:0):(e=t.charCodeAt(u++),r=u<l?t.charCodeAt(u++):0,u<l?t.charCodeAt(u++):0),n=e>>2,s=(3&e)<<4|r>>4,a=1<f?(15&r)<<2|i>>6:64,o=2<f?63&i:64,h.push(p.charAt(n)+p.charAt(s)+p.charAt(a)+p.charAt(o));return h.join(\"\")},r.decode=function(t){var e,r,i,n,s,a,o=0,h=0,u=\"data:\";if(t.substr(0,u.length)===u)throw new Error(\"Invalid base64 input, it looks like a data url.\");var l,f=3*(t=t.replace(/[^A-Za-z0-9\\+\\/\\=]/g,\"\")).length/4;if(t.charAt(t.length-1)===p.charAt(64)&&f--,t.charAt(t.length-2)===p.charAt(64)&&f--,f%1!=0)throw new Error(\"Invalid base64 input, bad content length.\");for(l=d.uint8array?new Uint8Array(0|f):new Array(0|f);o<t.length;)e=p.indexOf(t.charAt(o++))<<2|(n=p.indexOf(t.charAt(o++)))>>4,r=(15&n)<<4|(s=p.indexOf(t.charAt(o++)))>>2,i=(3&s)<<6|(a=p.indexOf(t.charAt(o++))),l[h++]=e,64!==s&&(l[h++]=r),64!==a&&(l[h++]=i);return l}},{\"./support\":30,\"./utils\":32}],2:[function(t,e,r){\"use strict\";var i=t(\"./external\"),n=t(\"./stream/DataWorker\"),s=t(\"./stream/Crc32Probe\"),a=t(\"./stream/DataLengthProbe\");function o(t,e,r,i,n){this.compressedSize=t,this.uncompressedSize=e,this.crc32=r,this.compression=i,this.compressedContent=n}o.prototype={getContentWorker:function(){var t=new n(i.Promise.resolve(this.compressedContent)).pipe(this.compression.uncompressWorker()).pipe(new a(\"data_length\")),e=this;return t.on(\"end\",function(){if(this.streamInfo.data_length!==e.uncompressedSize)throw new Error(\"Bug : uncompressed data size mismatch\")}),t},getCompressedWorker:function(){return new n(i.Promise.resolve(this.compressedContent)).withStreamInfo(\"compressedSize\",this.compressedSize).withStreamInfo(\"uncompressedSize\",this.uncompressedSize).withStreamInfo(\"crc32\",this.crc32).withStreamInfo(\"compression\",this.compression)}},o.createWorkerFrom=function(t,e,r){return t.pipe(new s).pipe(new a(\"uncompressedSize\")).pipe(e.compressWorker(r)).pipe(new a(\"compressedSize\")).withStreamInfo(\"compression\",e)},e.exports=o},{\"./external\":6,\"./stream/Crc32Probe\":25,\"./stream/DataLengthProbe\":26,\"./stream/DataWorker\":27}],3:[function(t,e,r){\"use strict\";var i=t(\"./stream/GenericWorker\");r.STORE={magic:\"\\0\\0\",compressWorker:function(t){return new i(\"STORE compression\")},uncompressWorker:function(){return new i(\"STORE decompression\")}},r.DEFLATE=t(\"./flate\")},{\"./flate\":7,\"./stream/GenericWorker\":28}],4:[function(t,e,r){\"use strict\";var i=t(\"./utils\");var o=function(){for(var t,e=[],r=0;r<256;r++){t=r;for(var i=0;i<8;i++)t=1&t?3988292384^t>>>1:t>>>1;e[r]=t}return e}();e.exports=function(t,e){return void 0!==t&&t.length?\"string\"!==i.getTypeOf(t)?function(t,e,r,i){var n=o,s=i+r;t^=-1;for(var a=i;a<s;a++)t=t>>>8^n[255&(t^e[a])];return-1^t}(0|e,t,t.length,0):function(t,e,r,i){var n=o,s=i+r;t^=-1;for(var a=i;a<s;a++)t=t>>>8^n[255&(t^e.charCodeAt(a))];return-1^t}(0|e,t,t.length,0):0}},{\"./utils\":32}],5:[function(t,e,r){\"use strict\";r.base64=!1,r.binary=!1,r.dir=!1,r.createFolders=!0,r.date=null,r.compression=null,r.compressionOptions=null,r.comment=null,r.unixPermissions=null,r.dosPermissions=null},{}],6:[function(t,e,r){\"use strict\";var i=null;i=\"undefined\"!=typeof Promise?Promise:t(\"lie\"),e.exports={Promise:i}},{lie:37}],7:[function(t,e,r){\"use strict\";var i=\"undefined\"!=typeof Uint8Array&&\"undefined\"!=typeof Uint16Array&&\"undefined\"!=typeof Uint32Array,n=t(\"pako\"),s=t(\"./utils\"),a=t(\"./stream/GenericWorker\"),o=i?\"uint8array\":\"array\";function h(t,e){a.call(this,\"FlateWorker/\"+t),this._pako=null,this._pakoAction=t,this._pakoOptions=e,this.meta={}}r.magic=\"\\b\\0\",s.inherits(h,a),h.prototype.processChunk=function(t){this.meta=t.meta,null===this._pako&&this._createPako(),this._pako.push(s.transformTo(o,t.data),!1)},h.prototype.flush=function(){a.prototype.flush.call(this),null===this._pako&&this._createPako(),this._pako.push([],!0)},h.prototype.cleanUp=function(){a.prototype.cleanUp.call(this),this._pako=null},h.prototype._createPako=function(){this._pako=new n[this._pakoAction]({raw:!0,level:this._pakoOptions.level||-1});var e=this;this._pako.onData=function(t){e.push({data:t,meta:e.meta})}},r.compressWorker=function(t){return new h(\"Deflate\",t)},r.uncompressWorker=function(){return new h(\"Inflate\",{})}},{\"./stream/GenericWorker\":28,\"./utils\":32,pako:38}],8:[function(t,e,r){\"use strict\";function A(t,e){var r,i=\"\";for(r=0;r<e;r++)i+=String.fromCharCode(255&t),t>>>=8;return i}function i(t,e,r,i,n,s){var a,o,h=t.file,u=t.compression,l=s!==O.utf8encode,f=I.transformTo(\"string\",s(h.name)),d=I.transformTo(\"string\",O.utf8encode(h.name)),c=h.comment,p=I.transformTo(\"string\",s(c)),m=I.transformTo(\"string\",O.utf8encode(c)),_=d.length!==h.name.length,g=m.length!==c.length,b=\"\",v=\"\",y=\"\",w=h.dir,k=h.date,x={crc32:0,compressedSize:0,uncompressedSize:0};e&&!r||(x.crc32=t.crc32,x.compressedSize=t.compressedSize,x.uncompressedSize=t.uncompressedSize);var S=0;e&&(S|=8),l||!_&&!g||(S|=2048);var z=0,C=0;w&&(z|=16),\"UNIX\"===n?(C=798,z|=function(t,e){var r=t;return t||(r=e?16893:33204),(65535&r)<<16}(h.unixPermissions,w)):(C=20,z|=function(t){return 63&(t||0)}(h.dosPermissions)),a=k.getUTCHours(),a<<=6,a|=k.getUTCMinutes(),a<<=5,a|=k.getUTCSeconds()/2,o=k.getUTCFullYear()-1980,o<<=4,o|=k.getUTCMonth()+1,o<<=5,o|=k.getUTCDate(),_&&(v=A(1,1)+A(B(f),4)+d,b+=\"up\"+A(v.length,2)+v),g&&(y=A(1,1)+A(B(p),4)+m,b+=\"uc\"+A(y.length,2)+y);var E=\"\";return E+=\"\\n\\0\",E+=A(S,2),E+=u.magic,E+=A(a,2),E+=A(o,2),E+=A(x.crc32,4),E+=A(x.compressedSize,4),E+=A(x.uncompressedSize,4),E+=A(f.length,2),E+=A(b.length,2),{fileRecord:R.LOCAL_FILE_HEADER+E+f+b,dirRecord:R.CENTRAL_FILE_HEADER+A(C,2)+E+A(p.length,2)+\"\\0\\0\\0\\0\"+A(z,4)+A(i,4)+f+b+p}}var I=t(\"../utils\"),n=t(\"../stream/GenericWorker\"),O=t(\"../utf8\"),B=t(\"../crc32\"),R=t(\"../signature\");function s(t,e,r,i){n.call(this,\"ZipFileWorker\"),this.bytesWritten=0,this.zipComment=e,this.zipPlatform=r,this.encodeFileName=i,this.streamFiles=t,this.accumulate=!1,this.contentBuffer=[],this.dirRecords=[],this.currentSourceOffset=0,this.entriesCount=0,this.currentFile=null,this._sources=[]}I.inherits(s,n),s.prototype.push=function(t){var e=t.meta.percent||0,r=this.entriesCount,i=this._sources.length;this.accumulate?this.contentBuffer.push(t):(this.bytesWritten+=t.data.length,n.prototype.push.call(this,{data:t.data,meta:{currentFile:this.currentFile,percent:r?(e+100*(r-i-1))/r:100}}))},s.prototype.openedSource=function(t){this.currentSourceOffset=this.bytesWritten,this.currentFile=t.file.name;var e=this.streamFiles&&!t.file.dir;if(e){var r=i(t,e,!1,this.currentSourceOffset,this.zipPlatform,this.encodeFileName);this.push({data:r.fileRecord,meta:{percent:0}})}else this.accumulate=!0},s.prototype.closedSource=function(t){this.accumulate=!1;var e=this.streamFiles&&!t.file.dir,r=i(t,e,!0,this.currentSourceOffset,this.zipPlatform,this.encodeFileName);if(this.dirRecords.push(r.dirRecord),e)this.push({data:function(t){return R.DATA_DESCRIPTOR+A(t.crc32,4)+A(t.compressedSize,4)+A(t.uncompressedSize,4)}(t),meta:{percent:100}});else for(this.push({data:r.fileRecord,meta:{percent:0}});this.contentBuffer.length;)this.push(this.contentBuffer.shift());this.currentFile=null},s.prototype.flush=function(){for(var t=this.bytesWritten,e=0;e<this.dirRecords.length;e++)this.push({data:this.dirRecords[e],meta:{percent:100}});var r=this.bytesWritten-t,i=function(t,e,r,i,n){var s=I.transformTo(\"string\",n(i));return R.CENTRAL_DIRECTORY_END+\"\\0\\0\\0\\0\"+A(t,2)+A(t,2)+A(e,4)+A(r,4)+A(s.length,2)+s}(this.dirRecords.length,r,t,this.zipComment,this.encodeFileName);this.push({data:i,meta:{percent:100}})},s.prototype.prepareNextSource=function(){this.previous=this._sources.shift(),this.openedSource(this.previous.streamInfo),this.isPaused?this.previous.pause():this.previous.resume()},s.prototype.registerPrevious=function(t){this._sources.push(t);var e=this;return t.on(\"data\",function(t){e.processChunk(t)}),t.on(\"end\",function(){e.closedSource(e.previous.streamInfo),e._sources.length?e.prepareNextSource():e.end()}),t.on(\"error\",function(t){e.error(t)}),this},s.prototype.resume=function(){return!!n.prototype.resume.call(this)&&(!this.previous&&this._sources.length?(this.prepareNextSource(),!0):this.previous||this._sources.length||this.generatedError?void 0:(this.end(),!0))},s.prototype.error=function(t){var e=this._sources;if(!n.prototype.error.call(this,t))return!1;for(var r=0;r<e.length;r++)try{e[r].error(t)}catch(t){}return!0},s.prototype.lock=function(){n.prototype.lock.call(this);for(var t=this._sources,e=0;e<t.length;e++)t[e].lock()},e.exports=s},{\"../crc32\":4,\"../signature\":23,\"../stream/GenericWorker\":28,\"../utf8\":31,\"../utils\":32}],9:[function(t,e,r){\"use strict\";var u=t(\"../compressions\"),i=t(\"./ZipFileWorker\");r.generateWorker=function(t,a,e){var o=new i(a.streamFiles,e,a.platform,a.encodeFileName),h=0;try{t.forEach(function(t,e){h++;var r=function(t,e){var r=t||e,i=u[r];if(!i)throw new Error(r+\" is not a valid compression method !\");return i}(e.options.compression,a.compression),i=e.options.compressionOptions||a.compressionOptions||{},n=e.dir,s=e.date;e._compressWorker(r,i).withStreamInfo(\"file\",{name:t,dir:n,date:s,comment:e.comment||\"\",unixPermissions:e.unixPermissions,dosPermissions:e.dosPermissions}).pipe(o)}),o.entriesCount=h}catch(t){o.error(t)}return o}},{\"../compressions\":3,\"./ZipFileWorker\":8}],10:[function(t,e,r){\"use strict\";function i(){if(!(this instanceof i))return new i;if(arguments.length)throw new Error(\"The constructor with parameters has been removed in JSZip 3.0, please check the upgrade guide.\");this.files=Object.create(null),this.comment=null,this.root=\"\",this.clone=function(){var t=new i;for(var e in this)\"function\"!=typeof this[e]&&(t[e]=this[e]);return t}}(i.prototype=t(\"./object\")).loadAsync=t(\"./load\"),i.support=t(\"./support\"),i.defaults=t(\"./defaults\"),i.version=\"3.7.1\",i.loadAsync=function(t,e){return(new i).loadAsync(t,e)},i.external=t(\"./external\"),e.exports=i},{\"./defaults\":5,\"./external\":6,\"./load\":11,\"./object\":15,\"./support\":30}],11:[function(t,e,r){\"use strict\";var i=t(\"./utils\"),n=t(\"./external\"),o=t(\"./utf8\"),h=t(\"./zipEntries\"),s=t(\"./stream/Crc32Probe\"),u=t(\"./nodejsUtils\");function l(i){return new n.Promise(function(t,e){var r=i.decompressed.getContentWorker().pipe(new s);r.on(\"error\",function(t){e(t)}).on(\"end\",function(){r.streamInfo.crc32!==i.decompressed.crc32?e(new Error(\"Corrupted zip : CRC32 mismatch\")):t()}).resume()})}e.exports=function(t,s){var a=this;return s=i.extend(s||{},{base64:!1,checkCRC32:!1,optimizedBinaryString:!1,createFolders:!1,decodeFileName:o.utf8decode}),u.isNode&&u.isStream(t)?n.Promise.reject(new Error(\"JSZip can't accept a stream when loading a zip file.\")):i.prepareContent(\"the loaded zip file\",t,!0,s.optimizedBinaryString,s.base64).then(function(t){var e=new h(s);return e.load(t),e}).then(function(t){var e=[n.Promise.resolve(t)],r=t.files;if(s.checkCRC32)for(var i=0;i<r.length;i++)e.push(l(r[i]));return n.Promise.all(e)}).then(function(t){for(var e=t.shift(),r=e.files,i=0;i<r.length;i++){var n=r[i];a.file(n.fileNameStr,n.decompressed,{binary:!0,optimizedBinaryString:!0,date:n.date,dir:n.dir,comment:n.fileCommentStr.length?n.fileCommentStr:null,unixPermissions:n.unixPermissions,dosPermissions:n.dosPermissions,createFolders:s.createFolders})}return e.zipComment.length&&(a.comment=e.zipComment),a})}},{\"./external\":6,\"./nodejsUtils\":14,\"./stream/Crc32Probe\":25,\"./utf8\":31,\"./utils\":32,\"./zipEntries\":33}],12:[function(t,e,r){\"use strict\";var i=t(\"../utils\"),n=t(\"../stream/GenericWorker\");function s(t,e){n.call(this,\"Nodejs stream input adapter for \"+t),this._upstreamEnded=!1,this._bindStream(e)}i.inherits(s,n),s.prototype._bindStream=function(t){var e=this;(this._stream=t).pause(),t.on(\"data\",function(t){e.push({data:t,meta:{percent:0}})}).on(\"error\",function(t){e.isPaused?this.generatedError=t:e.error(t)}).on(\"end\",function(){e.isPaused?e._upstreamEnded=!0:e.end()})},s.prototype.pause=function(){return!!n.prototype.pause.call(this)&&(this._stream.pause(),!0)},s.prototype.resume=function(){return!!n.prototype.resume.call(this)&&(this._upstreamEnded?this.end():this._stream.resume(),!0)},e.exports=s},{\"../stream/GenericWorker\":28,\"../utils\":32}],13:[function(t,e,r){\"use strict\";var n=t(\"readable-stream\").Readable;function i(t,e,r){n.call(this,e),this._helper=t;var i=this;t.on(\"data\",function(t,e){i.push(t)||i._helper.pause(),r&&r(e)}).on(\"error\",function(t){i.emit(\"error\",t)}).on(\"end\",function(){i.push(null)})}t(\"../utils\").inherits(i,n),i.prototype._read=function(){this._helper.resume()},e.exports=i},{\"../utils\":32,\"readable-stream\":16}],14:[function(t,e,r){\"use strict\";e.exports={isNode:\"undefined\"!=typeof Buffer,newBufferFrom:function(t,e){if(Buffer.from&&Buffer.from!==Uint8Array.from)return Buffer.from(t,e);if(\"number\"==typeof t)throw new Error('The \"data\" argument must not be a number');return new Buffer(t,e)},allocBuffer:function(t){if(Buffer.alloc)return Buffer.alloc(t);var e=new Buffer(t);return e.fill(0),e},isBuffer:function(t){return Buffer.isBuffer(t)},isStream:function(t){return t&&\"function\"==typeof t.on&&\"function\"==typeof t.pause&&\"function\"==typeof t.resume}}},{}],15:[function(t,e,r){\"use strict\";function s(t,e,r){var i,n=u.getTypeOf(e),s=u.extend(r||{},f);s.date=s.date||new Date,null!==s.compression&&(s.compression=s.compression.toUpperCase()),\"string\"==typeof s.unixPermissions&&(s.unixPermissions=parseInt(s.unixPermissions,8)),s.unixPermissions&&16384&s.unixPermissions&&(s.dir=!0),s.dosPermissions&&16&s.dosPermissions&&(s.dir=!0),s.dir&&(t=g(t)),s.createFolders&&(i=_(t))&&b.call(this,i,!0);var a=\"string\"===n&&!1===s.binary&&!1===s.base64;r&&void 0!==r.binary||(s.binary=!a),(e instanceof d&&0===e.uncompressedSize||s.dir||!e||0===e.length)&&(s.base64=!1,s.binary=!0,e=\"\",s.compression=\"STORE\",n=\"string\");var o=null;o=e instanceof d||e instanceof l?e:p.isNode&&p.isStream(e)?new m(t,e):u.prepareContent(t,e,s.binary,s.optimizedBinaryString,s.base64);var h=new c(t,o,s);this.files[t]=h}var n=t(\"./utf8\"),u=t(\"./utils\"),l=t(\"./stream/GenericWorker\"),a=t(\"./stream/StreamHelper\"),f=t(\"./defaults\"),d=t(\"./compressedObject\"),c=t(\"./zipObject\"),o=t(\"./generate\"),p=t(\"./nodejsUtils\"),m=t(\"./nodejs/NodejsStreamInputAdapter\"),_=function(t){\"/\"===t.slice(-1)&&(t=t.substring(0,t.length-1));var e=t.lastIndexOf(\"/\");return 0<e?t.substring(0,e):\"\"},g=function(t){return\"/\"!==t.slice(-1)&&(t+=\"/\"),t},b=function(t,e){return e=void 0!==e?e:f.createFolders,t=g(t),this.files[t]||s.call(this,t,null,{dir:!0,createFolders:e}),this.files[t]};function h(t){return\"[object RegExp]\"===Object.prototype.toString.call(t)}var i={load:function(){throw new Error(\"This method has been removed in JSZip 3.0, please check the upgrade guide.\")},forEach:function(t){var e,r,i;for(e in this.files)i=this.files[e],(r=e.slice(this.root.length,e.length))&&e.slice(0,this.root.length)===this.root&&t(r,i)},filter:function(r){var i=[];return this.forEach(function(t,e){r(t,e)&&i.push(e)}),i},file:function(t,e,r){if(1!==arguments.length)return t=this.root+t,s.call(this,t,e,r),this;if(h(t)){var i=t;return this.filter(function(t,e){return!e.dir&&i.test(t)})}var n=this.files[this.root+t];return n&&!n.dir?n:null},folder:function(r){if(!r)return this;if(h(r))return this.filter(function(t,e){return e.dir&&r.test(t)});var t=this.root+r,e=b.call(this,t),i=this.clone();return i.root=e.name,i},remove:function(r){r=this.root+r;var t=this.files[r];if(t||(\"/\"!==r.slice(-1)&&(r+=\"/\"),t=this.files[r]),t&&!t.dir)delete this.files[r];else for(var e=this.filter(function(t,e){return e.name.slice(0,r.length)===r}),i=0;i<e.length;i++)delete this.files[e[i].name];return this},generate:function(t){throw new Error(\"This method has been removed in JSZip 3.0, please check the upgrade guide.\")},generateInternalStream:function(t){var e,r={};try{if((r=u.extend(t||{},{streamFiles:!1,compression:\"STORE\",compressionOptions:null,type:\"\",platform:\"DOS\",comment:null,mimeType:\"application/zip\",encodeFileName:n.utf8encode})).type=r.type.toLowerCase(),r.compression=r.compression.toUpperCase(),\"binarystring\"===r.type&&(r.type=\"string\"),!r.type)throw new Error(\"No output type specified.\");u.checkSupport(r.type),\"darwin\"!==r.platform&&\"freebsd\"!==r.platform&&\"linux\"!==r.platform&&\"sunos\"!==r.platform||(r.platform=\"UNIX\"),\"win32\"===r.platform&&(r.platform=\"DOS\");var i=r.comment||this.comment||\"\";e=o.generateWorker(this,r,i)}catch(t){(e=new l(\"error\")).error(t)}return new a(e,r.type||\"string\",r.mimeType)},generateAsync:function(t,e){return this.generateInternalStream(t).accumulate(e)},generateNodeStream:function(t,e){return(t=t||{}).type||(t.type=\"nodebuffer\"),this.generateInternalStream(t).toNodejsStream(e)}};e.exports=i},{\"./compressedObject\":2,\"./defaults\":5,\"./generate\":9,\"./nodejs/NodejsStreamInputAdapter\":12,\"./nodejsUtils\":14,\"./stream/GenericWorker\":28,\"./stream/StreamHelper\":29,\"./utf8\":31,\"./utils\":32,\"./zipObject\":35}],16:[function(t,e,r){e.exports=t(\"stream\")},{stream:void 0}],17:[function(t,e,r){\"use strict\";var i=t(\"./DataReader\");function n(t){i.call(this,t);for(var e=0;e<this.data.length;e++)t[e]=255&t[e]}t(\"../utils\").inherits(n,i),n.prototype.byteAt=function(t){return this.data[this.zero+t]},n.prototype.lastIndexOfSignature=function(t){for(var e=t.charCodeAt(0),r=t.charCodeAt(1),i=t.charCodeAt(2),n=t.charCodeAt(3),s=this.length-4;0<=s;--s)if(this.data[s]===e&&this.data[s+1]===r&&this.data[s+2]===i&&this.data[s+3]===n)return s-this.zero;return-1},n.prototype.readAndCheckSignature=function(t){var e=t.charCodeAt(0),r=t.charCodeAt(1),i=t.charCodeAt(2),n=t.charCodeAt(3),s=this.readData(4);return e===s[0]&&r===s[1]&&i===s[2]&&n===s[3]},n.prototype.readData=function(t){if(this.checkOffset(t),0===t)return[];var e=this.data.slice(this.zero+this.index,this.zero+this.index+t);return this.index+=t,e},e.exports=n},{\"../utils\":32,\"./DataReader\":18}],18:[function(t,e,r){\"use strict\";var i=t(\"../utils\");function n(t){this.data=t,this.length=t.length,this.index=0,this.zero=0}n.prototype={checkOffset:function(t){this.checkIndex(this.index+t)},checkIndex:function(t){if(this.length<this.zero+t||t<0)throw new Error(\"End of data reached (data length = \"+this.length+\", asked index = \"+t+\"). Corrupted zip ?\")},setIndex:function(t){this.checkIndex(t),this.index=t},skip:function(t){this.setIndex(this.index+t)},byteAt:function(t){},readInt:function(t){var e,r=0;for(this.checkOffset(t),e=this.index+t-1;e>=this.index;e--)r=(r<<8)+this.byteAt(e);return this.index+=t,r},readString:function(t){return i.transformTo(\"string\",this.readData(t))},readData:function(t){},lastIndexOfSignature:function(t){},readAndCheckSignature:function(t){},readDate:function(){var t=this.readInt(4);return new Date(Date.UTC(1980+(t>>25&127),(t>>21&15)-1,t>>16&31,t>>11&31,t>>5&63,(31&t)<<1))}},e.exports=n},{\"../utils\":32}],19:[function(t,e,r){\"use strict\";var i=t(\"./Uint8ArrayReader\");function n(t){i.call(this,t)}t(\"../utils\").inherits(n,i),n.prototype.readData=function(t){this.checkOffset(t);var e=this.data.slice(this.zero+this.index,this.zero+this.index+t);return this.index+=t,e},e.exports=n},{\"../utils\":32,\"./Uint8ArrayReader\":21}],20:[function(t,e,r){\"use strict\";var i=t(\"./DataReader\");function n(t){i.call(this,t)}t(\"../utils\").inherits(n,i),n.prototype.byteAt=function(t){return this.data.charCodeAt(this.zero+t)},n.prototype.lastIndexOfSignature=function(t){return this.data.lastIndexOf(t)-this.zero},n.prototype.readAndCheckSignature=function(t){return t===this.readData(4)},n.prototype.readData=function(t){this.checkOffset(t);var e=this.data.slice(this.zero+this.index,this.zero+this.index+t);return this.index+=t,e},e.exports=n},{\"../utils\":32,\"./DataReader\":18}],21:[function(t,e,r){\"use strict\";var i=t(\"./ArrayReader\");function n(t){i.call(this,t)}t(\"../utils\").inherits(n,i),n.prototype.readData=function(t){if(this.checkOffset(t),0===t)return new Uint8Array(0);var e=this.data.subarray(this.zero+this.index,this.zero+this.index+t);return this.index+=t,e},e.exports=n},{\"../utils\":32,\"./ArrayReader\":17}],22:[function(t,e,r){\"use strict\";var i=t(\"../utils\"),n=t(\"../support\"),s=t(\"./ArrayReader\"),a=t(\"./StringReader\"),o=t(\"./NodeBufferReader\"),h=t(\"./Uint8ArrayReader\");e.exports=function(t){var e=i.getTypeOf(t);return i.checkSupport(e),\"string\"!==e||n.uint8array?\"nodebuffer\"===e?new o(t):n.uint8array?new h(i.transformTo(\"uint8array\",t)):new s(i.transformTo(\"array\",t)):new a(t)}},{\"../support\":30,\"../utils\":32,\"./ArrayReader\":17,\"./NodeBufferReader\":19,\"./StringReader\":20,\"./Uint8ArrayReader\":21}],23:[function(t,e,r){\"use strict\";r.LOCAL_FILE_HEADER=\"PK\u0003\u0004\",r.CENTRAL_FILE_HEADER=\"PK\u0001\u0002\",r.CENTRAL_DIRECTORY_END=\"PK\u0005\u0006\",r.ZIP64_CENTRAL_DIRECTORY_LOCATOR=\"PK\u0006\u0007\",r.ZIP64_CENTRAL_DIRECTORY_END=\"PK\u0006\u0006\",r.DATA_DESCRIPTOR=\"PK\u0007\\b\"},{}],24:[function(t,e,r){\"use strict\";var i=t(\"./GenericWorker\"),n=t(\"../utils\");function s(t){i.call(this,\"ConvertWorker to \"+t),this.destType=t}n.inherits(s,i),s.prototype.processChunk=function(t){this.push({data:n.transformTo(this.destType,t.data),meta:t.meta})},e.exports=s},{\"../utils\":32,\"./GenericWorker\":28}],25:[function(t,e,r){\"use strict\";var i=t(\"./GenericWorker\"),n=t(\"../crc32\");function s(){i.call(this,\"Crc32Probe\"),this.withStreamInfo(\"crc32\",0)}t(\"../utils\").inherits(s,i),s.prototype.processChunk=function(t){this.streamInfo.crc32=n(t.data,this.streamInfo.crc32||0),this.push(t)},e.exports=s},{\"../crc32\":4,\"../utils\":32,\"./GenericWorker\":28}],26:[function(t,e,r){\"use strict\";var i=t(\"../utils\"),n=t(\"./GenericWorker\");function s(t){n.call(this,\"DataLengthProbe for \"+t),this.propName=t,this.withStreamInfo(t,0)}i.inherits(s,n),s.prototype.processChunk=function(t){if(t){var e=this.streamInfo[this.propName]||0;this.streamInfo[this.propName]=e+t.data.length}n.prototype.processChunk.call(this,t)},e.exports=s},{\"../utils\":32,\"./GenericWorker\":28}],27:[function(t,e,r){\"use strict\";var i=t(\"../utils\"),n=t(\"./GenericWorker\");function s(t){n.call(this,\"DataWorker\");var e=this;this.dataIsReady=!1,this.index=0,this.max=0,this.data=null,this.type=\"\",this._tickScheduled=!1,t.then(function(t){e.dataIsReady=!0,e.data=t,e.max=t&&t.length||0,e.type=i.getTypeOf(t),e.isPaused||e._tickAndRepeat()},function(t){e.error(t)})}i.inherits(s,n),s.prototype.cleanUp=function(){n.prototype.cleanUp.call(this),this.data=null},s.prototype.resume=function(){return!!n.prototype.resume.call(this)&&(!this._tickScheduled&&this.dataIsReady&&(this._tickScheduled=!0,i.delay(this._tickAndRepeat,[],this)),!0)},s.prototype._tickAndRepeat=function(){this._tickScheduled=!1,this.isPaused||this.isFinished||(this._tick(),this.isFinished||(i.delay(this._tickAndRepeat,[],this),this._tickScheduled=!0))},s.prototype._tick=function(){if(this.isPaused||this.isFinished)return!1;var t=null,e=Math.min(this.max,this.index+16384);if(this.index>=this.max)return this.end();switch(this.type){case\"string\":t=this.data.substring(this.index,e);break;case\"uint8array\":t=this.data.subarray(this.index,e);break;case\"array\":case\"nodebuffer\":t=this.data.slice(this.index,e)}return this.index=e,this.push({data:t,meta:{percent:this.max?this.index/this.max*100:0}})},e.exports=s},{\"../utils\":32,\"./GenericWorker\":28}],28:[function(t,e,r){\"use strict\";function i(t){this.name=t||\"default\",this.streamInfo={},this.generatedError=null,this.extraStreamInfo={},this.isPaused=!0,this.isFinished=!1,this.isLocked=!1,this._listeners={data:[],end:[],error:[]},this.previous=null}i.prototype={push:function(t){this.emit(\"data\",t)},end:function(){if(this.isFinished)return!1;this.flush();try{this.emit(\"end\"),this.cleanUp(),this.isFinished=!0}catch(t){this.emit(\"error\",t)}return!0},error:function(t){return!this.isFinished&&(this.isPaused?this.generatedError=t:(this.isFinished=!0,this.emit(\"error\",t),this.previous&&this.previous.error(t),this.cleanUp()),!0)},on:function(t,e){return this._listeners[t].push(e),this},cleanUp:function(){this.streamInfo=this.generatedError=this.extraStreamInfo=null,this._listeners=[]},emit:function(t,e){if(this._listeners[t])for(var r=0;r<this._listeners[t].length;r++)this._listeners[t][r].call(this,e)},pipe:function(t){return t.registerPrevious(this)},registerPrevious:function(t){if(this.isLocked)throw new Error(\"The stream '\"+this+\"' has already been used.\");this.streamInfo=t.streamInfo,this.mergeStreamInfo(),this.previous=t;var e=this;return t.on(\"data\",function(t){e.processChunk(t)}),t.on(\"end\",function(){e.end()}),t.on(\"error\",function(t){e.error(t)}),this},pause:function(){return!this.isPaused&&!this.isFinished&&(this.isPaused=!0,this.previous&&this.previous.pause(),!0)},resume:function(){if(!this.isPaused||this.isFinished)return!1;var t=this.isPaused=!1;return this.generatedError&&(this.error(this.generatedError),t=!0),this.previous&&this.previous.resume(),!t},flush:function(){},processChunk:function(t){this.push(t)},withStreamInfo:function(t,e){return this.extraStreamInfo[t]=e,this.mergeStreamInfo(),this},mergeStreamInfo:function(){for(var t in this.extraStreamInfo)this.extraStreamInfo.hasOwnProperty(t)&&(this.streamInfo[t]=this.extraStreamInfo[t])},lock:function(){if(this.isLocked)throw new Error(\"The stream '\"+this+\"' has already been used.\");this.isLocked=!0,this.previous&&this.previous.lock()},toString:function(){var t=\"Worker \"+this.name;return this.previous?this.previous+\" -> \"+t:t}},e.exports=i},{}],29:[function(t,e,r){\"use strict\";var h=t(\"../utils\"),n=t(\"./ConvertWorker\"),s=t(\"./GenericWorker\"),u=t(\"../base64\"),i=t(\"../support\"),a=t(\"../external\"),o=null;if(i.nodestream)try{o=t(\"../nodejs/NodejsStreamOutputAdapter\")}catch(t){}function l(t,o){return new a.Promise(function(e,r){var i=[],n=t._internalType,s=t._outputType,a=t._mimeType;t.on(\"data\",function(t,e){i.push(t),o&&o(e)}).on(\"error\",function(t){i=[],r(t)}).on(\"end\",function(){try{var t=function(t,e,r){switch(t){case\"blob\":return h.newBlob(h.transformTo(\"arraybuffer\",e),r);case\"base64\":return u.encode(e);default:return h.transformTo(t,e)}}(s,function(t,e){var r,i=0,n=null,s=0;for(r=0;r<e.length;r++)s+=e[r].length;switch(t){case\"string\":return e.join(\"\");case\"array\":return Array.prototype.concat.apply([],e);case\"uint8array\":for(n=new Uint8Array(s),r=0;r<e.length;r++)n.set(e[r],i),i+=e[r].length;return n;case\"nodebuffer\":return Buffer.concat(e);default:throw new Error(\"concat : unsupported type '\"+t+\"'\")}}(n,i),a);e(t)}catch(t){r(t)}i=[]}).resume()})}function f(t,e,r){var i=e;switch(e){case\"blob\":case\"arraybuffer\":i=\"uint8array\";break;case\"base64\":i=\"string\"}try{this._internalType=i,this._outputType=e,this._mimeType=r,h.checkSupport(i),this._worker=t.pipe(new n(i)),t.lock()}catch(t){this._worker=new s(\"error\"),this._worker.error(t)}}f.prototype={accumulate:function(t){return l(this,t)},on:function(t,e){var r=this;return\"data\"===t?this._worker.on(t,function(t){e.call(r,t.data,t.meta)}):this._worker.on(t,function(){h.delay(e,arguments,r)}),this},resume:function(){return h.delay(this._worker.resume,[],this._worker),this},pause:function(){return this._worker.pause(),this},toNodejsStream:function(t){if(h.checkSupport(\"nodestream\"),\"nodebuffer\"!==this._outputType)throw new Error(this._outputType+\" is not supported by this method\");return new o(this,{objectMode:\"nodebuffer\"!==this._outputType},t)}},e.exports=f},{\"../base64\":1,\"../external\":6,\"../nodejs/NodejsStreamOutputAdapter\":13,\"../support\":30,\"../utils\":32,\"./ConvertWorker\":24,\"./GenericWorker\":28}],30:[function(t,e,r){\"use strict\";if(r.base64=!0,r.array=!0,r.string=!0,r.arraybuffer=\"undefined\"!=typeof ArrayBuffer&&\"undefined\"!=typeof Uint8Array,r.nodebuffer=\"undefined\"!=typeof Buffer,r.uint8array=\"undefined\"!=typeof Uint8Array,\"undefined\"==typeof ArrayBuffer)r.blob=!1;else{var i=new ArrayBuffer(0);try{r.blob=0===new Blob([i],{type:\"application/zip\"}).size}catch(t){try{var n=new(self.BlobBuilder||self.WebKitBlobBuilder||self.MozBlobBuilder||self.MSBlobBuilder);n.append(i),r.blob=0===n.getBlob(\"application/zip\").size}catch(t){r.blob=!1}}}try{r.nodestream=!!t(\"readable-stream\").Readable}catch(t){r.nodestream=!1}},{\"readable-stream\":16}],31:[function(t,e,s){\"use strict\";for(var o=t(\"./utils\"),h=t(\"./support\"),r=t(\"./nodejsUtils\"),i=t(\"./stream/GenericWorker\"),u=new Array(256),n=0;n<256;n++)u[n]=252<=n?6:248<=n?5:240<=n?4:224<=n?3:192<=n?2:1;u[254]=u[254]=1;function a(){i.call(this,\"utf-8 decode\"),this.leftOver=null}function l(){i.call(this,\"utf-8 encode\")}s.utf8encode=function(t){return h.nodebuffer?r.newBufferFrom(t,\"utf-8\"):function(t){var e,r,i,n,s,a=t.length,o=0;for(n=0;n<a;n++)55296==(64512&(r=t.charCodeAt(n)))&&n+1<a&&56320==(64512&(i=t.charCodeAt(n+1)))&&(r=65536+(r-55296<<10)+(i-56320),n++),o+=r<128?1:r<2048?2:r<65536?3:4;for(e=h.uint8array?new Uint8Array(o):new Array(o),n=s=0;s<o;n++)55296==(64512&(r=t.charCodeAt(n)))&&n+1<a&&56320==(64512&(i=t.charCodeAt(n+1)))&&(r=65536+(r-55296<<10)+(i-56320),n++),r<128?e[s++]=r:(r<2048?e[s++]=192|r>>>6:(r<65536?e[s++]=224|r>>>12:(e[s++]=240|r>>>18,e[s++]=128|r>>>12&63),e[s++]=128|r>>>6&63),e[s++]=128|63&r);return e}(t)},s.utf8decode=function(t){return h.nodebuffer?o.transformTo(\"nodebuffer\",t).toString(\"utf-8\"):function(t){var e,r,i,n,s=t.length,a=new Array(2*s);for(e=r=0;e<s;)if((i=t[e++])<128)a[r++]=i;else if(4<(n=u[i]))a[r++]=65533,e+=n-1;else{for(i&=2===n?31:3===n?15:7;1<n&&e<s;)i=i<<6|63&t[e++],n--;1<n?a[r++]=65533:i<65536?a[r++]=i:(i-=65536,a[r++]=55296|i>>10&1023,a[r++]=56320|1023&i)}return a.length!==r&&(a.subarray?a=a.subarray(0,r):a.length=r),o.applyFromCharCode(a)}(t=o.transformTo(h.uint8array?\"uint8array\":\"array\",t))},o.inherits(a,i),a.prototype.processChunk=function(t){var e=o.transformTo(h.uint8array?\"uint8array\":\"array\",t.data);if(this.leftOver&&this.leftOver.length){if(h.uint8array){var r=e;(e=new Uint8Array(r.length+this.leftOver.length)).set(this.leftOver,0),e.set(r,this.leftOver.length)}else e=this.leftOver.concat(e);this.leftOver=null}var i=function(t,e){var r;for((e=e||t.length)>t.length&&(e=t.length),r=e-1;0<=r&&128==(192&t[r]);)r--;return r<0?e:0===r?e:r+u[t[r]]>e?r:e}(e),n=e;i!==e.length&&(h.uint8array?(n=e.subarray(0,i),this.leftOver=e.subarray(i,e.length)):(n=e.slice(0,i),this.leftOver=e.slice(i,e.length))),this.push({data:s.utf8decode(n),meta:t.meta})},a.prototype.flush=function(){this.leftOver&&this.leftOver.length&&(this.push({data:s.utf8decode(this.leftOver),meta:{}}),this.leftOver=null)},s.Utf8DecodeWorker=a,o.inherits(l,i),l.prototype.processChunk=function(t){this.push({data:s.utf8encode(t.data),meta:t.meta})},s.Utf8EncodeWorker=l},{\"./nodejsUtils\":14,\"./stream/GenericWorker\":28,\"./support\":30,\"./utils\":32}],32:[function(t,e,a){\"use strict\";var o=t(\"./support\"),h=t(\"./base64\"),r=t(\"./nodejsUtils\"),i=t(\"set-immediate-shim\"),u=t(\"./external\");function n(t){return t}function l(t,e){for(var r=0;r<t.length;++r)e[r]=255&t.charCodeAt(r);return e}a.newBlob=function(e,r){a.checkSupport(\"blob\");try{return new Blob([e],{type:r})}catch(t){try{var i=new(self.BlobBuilder||self.WebKitBlobBuilder||self.MozBlobBuilder||self.MSBlobBuilder);return i.append(e),i.getBlob(r)}catch(t){throw new Error(\"Bug : can't construct the Blob.\")}}};var s={stringifyByChunk:function(t,e,r){var i=[],n=0,s=t.length;if(s<=r)return String.fromCharCode.apply(null,t);for(;n<s;)\"array\"===e||\"nodebuffer\"===e?i.push(String.fromCharCode.apply(null,t.slice(n,Math.min(n+r,s)))):i.push(String.fromCharCode.apply(null,t.subarray(n,Math.min(n+r,s)))),n+=r;return i.join(\"\")},stringifyByChar:function(t){for(var e=\"\",r=0;r<t.length;r++)e+=String.fromCharCode(t[r]);return e},applyCanBeUsed:{uint8array:function(){try{return o.uint8array&&1===String.fromCharCode.apply(null,new Uint8Array(1)).length}catch(t){return!1}}(),nodebuffer:function(){try{return o.nodebuffer&&1===String.fromCharCode.apply(null,r.allocBuffer(1)).length}catch(t){return!1}}()}};function f(t){var e=65536,r=a.getTypeOf(t),i=!0;if(\"uint8array\"===r?i=s.applyCanBeUsed.uint8array:\"nodebuffer\"===r&&(i=s.applyCanBeUsed.nodebuffer),i)for(;1<e;)try{return s.stringifyByChunk(t,r,e)}catch(t){e=Math.floor(e/2)}return s.stringifyByChar(t)}function d(t,e){for(var r=0;r<t.length;r++)e[r]=t[r];return e}a.applyFromCharCode=f;var c={};c.string={string:n,array:function(t){return l(t,new Array(t.length))},arraybuffer:function(t){return c.string.uint8array(t).buffer},uint8array:function(t){return l(t,new Uint8Array(t.length))},nodebuffer:function(t){return l(t,r.allocBuffer(t.length))}},c.array={string:f,array:n,arraybuffer:function(t){return new Uint8Array(t).buffer},uint8array:function(t){return new Uint8Array(t)},nodebuffer:function(t){return r.newBufferFrom(t)}},c.arraybuffer={string:function(t){return f(new Uint8Array(t))},array:function(t){return d(new Uint8Array(t),new Array(t.byteLength))},arraybuffer:n,uint8array:function(t){return new Uint8Array(t)},nodebuffer:function(t){return r.newBufferFrom(new Uint8Array(t))}},c.uint8array={string:f,array:function(t){return d(t,new Array(t.length))},arraybuffer:function(t){return t.buffer},uint8array:n,nodebuffer:function(t){return r.newBufferFrom(t)}},c.nodebuffer={string:f,array:function(t){return d(t,new Array(t.length))},arraybuffer:function(t){return c.nodebuffer.uint8array(t).buffer},uint8array:function(t){return d(t,new Uint8Array(t.length))},nodebuffer:n},a.transformTo=function(t,e){if(e=e||\"\",!t)return e;a.checkSupport(t);var r=a.getTypeOf(e);return c[r][t](e)},a.getTypeOf=function(t){return\"string\"==typeof t?\"string\":\"[object Array]\"===Object.prototype.toString.call(t)?\"array\":o.nodebuffer&&r.isBuffer(t)?\"nodebuffer\":o.uint8array&&t instanceof Uint8Array?\"uint8array\":o.arraybuffer&&t instanceof ArrayBuffer?\"arraybuffer\":void 0},a.checkSupport=function(t){if(!o[t.toLowerCase()])throw new Error(t+\" is not supported by this platform\")},a.MAX_VALUE_16BITS=65535,a.MAX_VALUE_32BITS=-1,a.pretty=function(t){var e,r,i=\"\";for(r=0;r<(t||\"\").length;r++)i+=\"\\\\x\"+((e=t.charCodeAt(r))<16?\"0\":\"\")+e.toString(16).toUpperCase();return i},a.delay=function(t,e,r){i(function(){t.apply(r||null,e||[])})},a.inherits=function(t,e){function r(){}r.prototype=e.prototype,t.prototype=new r},a.extend=function(){var t,e,r={};for(t=0;t<arguments.length;t++)for(e in arguments[t])arguments[t].hasOwnProperty(e)&&void 0===r[e]&&(r[e]=arguments[t][e]);return r},a.prepareContent=function(r,t,i,n,s){return u.Promise.resolve(t).then(function(i){return o.blob&&(i instanceof Blob||-1!==[\"[object File]\",\"[object Blob]\"].indexOf(Object.prototype.toString.call(i)))&&\"undefined\"!=typeof FileReader?new u.Promise(function(e,r){var t=new FileReader;t.onload=function(t){e(t.target.result)},t.onerror=function(t){r(t.target.error)},t.readAsArrayBuffer(i)}):i}).then(function(t){var e=a.getTypeOf(t);return e?(\"arraybuffer\"===e?t=a.transformTo(\"uint8array\",t):\"string\"===e&&(s?t=h.decode(t):i&&!0!==n&&(t=function(t){return l(t,o.uint8array?new Uint8Array(t.length):new Array(t.length))}(t))),t):u.Promise.reject(new Error(\"Can't read the data of '\"+r+\"'. Is it in a supported JavaScript type (String, Blob, ArrayBuffer, etc) ?\"))})}},{\"./base64\":1,\"./external\":6,\"./nodejsUtils\":14,\"./support\":30,\"set-immediate-shim\":54}],33:[function(t,e,r){\"use strict\";var i=t(\"./reader/readerFor\"),n=t(\"./utils\"),s=t(\"./signature\"),a=t(\"./zipEntry\"),o=(t(\"./utf8\"),t(\"./support\"));function h(t){this.files=[],this.loadOptions=t}h.prototype={checkSignature:function(t){if(!this.reader.readAndCheckSignature(t)){this.reader.index-=4;var e=this.reader.readString(4);throw new Error(\"Corrupted zip or bug: unexpected signature (\"+n.pretty(e)+\", expected \"+n.pretty(t)+\")\")}},isSignature:function(t,e){var r=this.reader.index;this.reader.setIndex(t);var i=this.reader.readString(4)===e;return this.reader.setIndex(r),i},readBlockEndOfCentral:function(){this.diskNumber=this.reader.readInt(2),this.diskWithCentralDirStart=this.reader.readInt(2),this.centralDirRecordsOnThisDisk=this.reader.readInt(2),this.centralDirRecords=this.reader.readInt(2),this.centralDirSize=this.reader.readInt(4),this.centralDirOffset=this.reader.readInt(4),this.zipCommentLength=this.reader.readInt(2);var t=this.reader.readData(this.zipCommentLength),e=o.uint8array?\"uint8array\":\"array\",r=n.transformTo(e,t);this.zipComment=this.loadOptions.decodeFileName(r)},readBlockZip64EndOfCentral:function(){this.zip64EndOfCentralSize=this.reader.readInt(8),this.reader.skip(4),this.diskNumber=this.reader.readInt(4),this.diskWithCentralDirStart=this.reader.readInt(4),this.centralDirRecordsOnThisDisk=this.reader.readInt(8),this.centralDirRecords=this.reader.readInt(8),this.centralDirSize=this.reader.readInt(8),this.centralDirOffset=this.reader.readInt(8),this.zip64ExtensibleData={};for(var t,e,r,i=this.zip64EndOfCentralSize-44;0<i;)t=this.reader.readInt(2),e=this.reader.readInt(4),r=this.reader.readData(e),this.zip64ExtensibleData[t]={id:t,length:e,value:r}},readBlockZip64EndOfCentralLocator:function(){if(this.diskWithZip64CentralDirStart=this.reader.readInt(4),this.relativeOffsetEndOfZip64CentralDir=this.reader.readInt(8),this.disksCount=this.reader.readInt(4),1<this.disksCount)throw new Error(\"Multi-volumes zip are not supported\")},readLocalFiles:function(){var t,e;for(t=0;t<this.files.length;t++)e=this.files[t],this.reader.setIndex(e.localHeaderOffset),this.checkSignature(s.LOCAL_FILE_HEADER),e.readLocalPart(this.reader),e.handleUTF8(),e.processAttributes()},readCentralDir:function(){var t;for(this.reader.setIndex(this.centralDirOffset);this.reader.readAndCheckSignature(s.CENTRAL_FILE_HEADER);)(t=new a({zip64:this.zip64},this.loadOptions)).readCentralPart(this.reader),this.files.push(t);if(this.centralDirRecords!==this.files.length&&0!==this.centralDirRecords&&0===this.files.length)throw new Error(\"Corrupted zip or bug: expected \"+this.centralDirRecords+\" records in central dir, got \"+this.files.length)},readEndOfCentral:function(){var t=this.reader.lastIndexOfSignature(s.CENTRAL_DIRECTORY_END);if(t<0)throw!this.isSignature(0,s.LOCAL_FILE_HEADER)?new Error(\"Can't find end of central directory : is this a zip file ? If it is, see https://stuk.github.io/jszip/documentation/howto/read_zip.html\"):new Error(\"Corrupted zip: can't find end of central directory\");this.reader.setIndex(t);var e=t;if(this.checkSignature(s.CENTRAL_DIRECTORY_END),this.readBlockEndOfCentral(),this.diskNumber===n.MAX_VALUE_16BITS||this.diskWithCentralDirStart===n.MAX_VALUE_16BITS||this.centralDirRecordsOnThisDisk===n.MAX_VALUE_16BITS||this.centralDirRecords===n.MAX_VALUE_16BITS||this.centralDirSize===n.MAX_VALUE_32BITS||this.centralDirOffset===n.MAX_VALUE_32BITS){if(this.zip64=!0,(t=this.reader.lastIndexOfSignature(s.ZIP64_CENTRAL_DIRECTORY_LOCATOR))<0)throw new Error(\"Corrupted zip: can't find the ZIP64 end of central directory locator\");if(this.reader.setIndex(t),this.checkSignature(s.ZIP64_CENTRAL_DIRECTORY_LOCATOR),this.readBlockZip64EndOfCentralLocator(),!this.isSignature(this.relativeOffsetEndOfZip64CentralDir,s.ZIP64_CENTRAL_DIRECTORY_END)&&(this.relativeOffsetEndOfZip64CentralDir=this.reader.lastIndexOfSignature(s.ZIP64_CENTRAL_DIRECTORY_END),this.relativeOffsetEndOfZip64CentralDir<0))throw new Error(\"Corrupted zip: can't find the ZIP64 end of central directory\");this.reader.setIndex(this.relativeOffsetEndOfZip64CentralDir),this.checkSignature(s.ZIP64_CENTRAL_DIRECTORY_END),this.readBlockZip64EndOfCentral()}var r=this.centralDirOffset+this.centralDirSize;this.zip64&&(r+=20,r+=12+this.zip64EndOfCentralSize);var i=e-r;if(0<i)this.isSignature(e,s.CENTRAL_FILE_HEADER)||(this.reader.zero=i);else if(i<0)throw new Error(\"Corrupted zip: missing \"+Math.abs(i)+\" bytes.\")},prepareReader:function(t){this.reader=i(t)},load:function(t){this.prepareReader(t),this.readEndOfCentral(),this.readCentralDir(),this.readLocalFiles()}},e.exports=h},{\"./reader/readerFor\":22,\"./signature\":23,\"./support\":30,\"./utf8\":31,\"./utils\":32,\"./zipEntry\":34}],34:[function(t,e,r){\"use strict\";var i=t(\"./reader/readerFor\"),s=t(\"./utils\"),n=t(\"./compressedObject\"),a=t(\"./crc32\"),o=t(\"./utf8\"),h=t(\"./compressions\"),u=t(\"./support\");function l(t,e){this.options=t,this.loadOptions=e}l.prototype={isEncrypted:function(){return 1==(1&this.bitFlag)},useUTF8:function(){return 2048==(2048&this.bitFlag)},readLocalPart:function(t){var e,r;if(t.skip(22),this.fileNameLength=t.readInt(2),r=t.readInt(2),this.fileName=t.readData(this.fileNameLength),t.skip(r),-1===this.compressedSize||-1===this.uncompressedSize)throw new Error(\"Bug or corrupted zip : didn't get enough information from the central directory (compressedSize === -1 || uncompressedSize === -1)\");if(null===(e=function(t){for(var e in h)if(h.hasOwnProperty(e)&&h[e].magic===t)return h[e];return null}(this.compressionMethod)))throw new Error(\"Corrupted zip : compression \"+s.pretty(this.compressionMethod)+\" unknown (inner file : \"+s.transformTo(\"string\",this.fileName)+\")\");this.decompressed=new n(this.compressedSize,this.uncompressedSize,this.crc32,e,t.readData(this.compressedSize))},readCentralPart:function(t){this.versionMadeBy=t.readInt(2),t.skip(2),this.bitFlag=t.readInt(2),this.compressionMethod=t.readString(2),this.date=t.readDate(),this.crc32=t.readInt(4),this.compressedSize=t.readInt(4),this.uncompressedSize=t.readInt(4);var e=t.readInt(2);if(this.extraFieldsLength=t.readInt(2),this.fileCommentLength=t.readInt(2),this.diskNumberStart=t.readInt(2),this.internalFileAttributes=t.readInt(2),this.externalFileAttributes=t.readInt(4),this.localHeaderOffset=t.readInt(4),this.isEncrypted())throw new Error(\"Encrypted zip are not supported\");t.skip(e),this.readExtraFields(t),this.parseZIP64ExtraField(t),this.fileComment=t.readData(this.fileCommentLength)},processAttributes:function(){this.unixPermissions=null,this.dosPermissions=null;var t=this.versionMadeBy>>8;this.dir=!!(16&this.externalFileAttributes),0==t&&(this.dosPermissions=63&this.externalFileAttributes),3==t&&(this.unixPermissions=this.externalFileAttributes>>16&65535),this.dir||\"/\"!==this.fileNameStr.slice(-1)||(this.dir=!0)},parseZIP64ExtraField:function(t){if(this.extraFields[1]){var e=i(this.extraFields[1].value);this.uncompressedSize===s.MAX_VALUE_32BITS&&(this.uncompressedSize=e.readInt(8)),this.compressedSize===s.MAX_VALUE_32BITS&&(this.compressedSize=e.readInt(8)),this.localHeaderOffset===s.MAX_VALUE_32BITS&&(this.localHeaderOffset=e.readInt(8)),this.diskNumberStart===s.MAX_VALUE_32BITS&&(this.diskNumberStart=e.readInt(4))}},readExtraFields:function(t){var e,r,i,n=t.index+this.extraFieldsLength;for(this.extraFields||(this.extraFields={});t.index+4<n;)e=t.readInt(2),r=t.readInt(2),i=t.readData(r),this.extraFields[e]={id:e,length:r,value:i};t.setIndex(n)},handleUTF8:function(){var t=u.uint8array?\"uint8array\":\"array\";if(this.useUTF8())this.fileNameStr=o.utf8decode(this.fileName),this.fileCommentStr=o.utf8decode(this.fileComment);else{var e=this.findExtraFieldUnicodePath();if(null!==e)this.fileNameStr=e;else{var r=s.transformTo(t,this.fileName);this.fileNameStr=this.loadOptions.decodeFileName(r)}var i=this.findExtraFieldUnicodeComment();if(null!==i)this.fileCommentStr=i;else{var n=s.transformTo(t,this.fileComment);this.fileCommentStr=this.loadOptions.decodeFileName(n)}}},findExtraFieldUnicodePath:function(){var t=this.extraFields[28789];if(t){var e=i(t.value);return 1!==e.readInt(1)?null:a(this.fileName)!==e.readInt(4)?null:o.utf8decode(e.readData(t.length-5))}return null},findExtraFieldUnicodeComment:function(){var t=this.extraFields[25461];if(t){var e=i(t.value);return 1!==e.readInt(1)?null:a(this.fileComment)!==e.readInt(4)?null:o.utf8decode(e.readData(t.length-5))}return null}},e.exports=l},{\"./compressedObject\":2,\"./compressions\":3,\"./crc32\":4,\"./reader/readerFor\":22,\"./support\":30,\"./utf8\":31,\"./utils\":32}],35:[function(t,e,r){\"use strict\";function i(t,e,r){this.name=t,this.dir=r.dir,this.date=r.date,this.comment=r.comment,this.unixPermissions=r.unixPermissions,this.dosPermissions=r.dosPermissions,this._data=e,this._dataBinary=r.binary,this.options={compression:r.compression,compressionOptions:r.compressionOptions}}var s=t(\"./stream/StreamHelper\"),n=t(\"./stream/DataWorker\"),a=t(\"./utf8\"),o=t(\"./compressedObject\"),h=t(\"./stream/GenericWorker\");i.prototype={internalStream:function(t){var e=null,r=\"string\";try{if(!t)throw new Error(\"No output type specified.\");var i=\"string\"===(r=t.toLowerCase())||\"text\"===r;\"binarystring\"!==r&&\"text\"!==r||(r=\"string\"),e=this._decompressWorker();var n=!this._dataBinary;n&&!i&&(e=e.pipe(new a.Utf8EncodeWorker)),!n&&i&&(e=e.pipe(new a.Utf8DecodeWorker))}catch(t){(e=new h(\"error\")).error(t)}return new s(e,r,\"\")},async:function(t,e){return this.internalStream(t).accumulate(e)},nodeStream:function(t,e){return this.internalStream(t||\"nodebuffer\").toNodejsStream(e)},_compressWorker:function(t,e){if(this._data instanceof o&&this._data.compression.magic===t.magic)return this._data.getCompressedWorker();var r=this._decompressWorker();return this._dataBinary||(r=r.pipe(new a.Utf8EncodeWorker)),o.createWorkerFrom(r,t,e)},_decompressWorker:function(){return this._data instanceof o?this._data.getContentWorker():this._data instanceof h?this._data:new n(this._data)}};for(var u=[\"asText\",\"asBinary\",\"asNodeBuffer\",\"asUint8Array\",\"asArrayBuffer\"],l=function(){throw new Error(\"This method has been removed in JSZip 3.0, please check the upgrade guide.\")},f=0;f<u.length;f++)i.prototype[u[f]]=l;e.exports=i},{\"./compressedObject\":2,\"./stream/DataWorker\":27,\"./stream/GenericWorker\":28,\"./stream/StreamHelper\":29,\"./utf8\":31}],36:[function(t,l,e){(function(e){\"use strict\";var r,i,t=e.MutationObserver||e.WebKitMutationObserver;if(t){var n=0,s=new t(u),a=e.document.createTextNode(\"\");s.observe(a,{characterData:!0}),r=function(){a.data=n=++n%2}}else if(e.setImmediate||void 0===e.MessageChannel)r=\"document\"in e&&\"onreadystatechange\"in e.document.createElement(\"script\")?function(){var t=e.document.createElement(\"script\");t.onreadystatechange=function(){u(),t.onreadystatechange=null,t.parentNode.removeChild(t),t=null},e.document.documentElement.appendChild(t)}:function(){setTimeout(u,0)};else{var o=new e.MessageChannel;o.port1.onmessage=u,r=function(){o.port2.postMessage(0)}}var h=[];function u(){var t,e;i=!0;for(var r=h.length;r;){for(e=h,h=[],t=-1;++t<r;)e[t]();r=h.length}i=!1}l.exports=function(t){1!==h.push(t)||i||r()}}).call(this,\"undefined\"!=typeof global?global:\"undefined\"!=typeof self?self:\"undefined\"!=typeof window?window:{})},{}],37:[function(t,e,r){\"use strict\";var n=t(\"immediate\");function u(){}var l={},s=[\"REJECTED\"],a=[\"FULFILLED\"],i=[\"PENDING\"];function o(t){if(\"function\"!=typeof t)throw new TypeError(\"resolver must be a function\");this.state=i,this.queue=[],this.outcome=void 0,t!==u&&c(this,t)}function h(t,e,r){this.promise=t,\"function\"==typeof e&&(this.onFulfilled=e,this.callFulfilled=this.otherCallFulfilled),\"function\"==typeof r&&(this.onRejected=r,this.callRejected=this.otherCallRejected)}function f(e,r,i){n(function(){var t;try{t=r(i)}catch(t){return l.reject(e,t)}t===e?l.reject(e,new TypeError(\"Cannot resolve promise with itself\")):l.resolve(e,t)})}function d(t){var e=t&&t.then;if(t&&(\"object\"==typeof t||\"function\"==typeof t)&&\"function\"==typeof e)return function(){e.apply(t,arguments)}}function c(e,t){var r=!1;function i(t){r||(r=!0,l.reject(e,t))}function n(t){r||(r=!0,l.resolve(e,t))}var s=p(function(){t(n,i)});\"error\"===s.status&&i(s.value)}function p(t,e){var r={};try{r.value=t(e),r.status=\"success\"}catch(t){r.status=\"error\",r.value=t}return r}(e.exports=o).prototype.finally=function(e){if(\"function\"!=typeof e)return this;var r=this.constructor;return this.then(function(t){return r.resolve(e()).then(function(){return t})},function(t){return r.resolve(e()).then(function(){throw t})})},o.prototype.catch=function(t){return this.then(null,t)},o.prototype.then=function(t,e){if(\"function\"!=typeof t&&this.state===a||\"function\"!=typeof e&&this.state===s)return this;var r=new this.constructor(u);this.state!==i?f(r,this.state===a?t:e,this.outcome):this.queue.push(new h(r,t,e));return r},h.prototype.callFulfilled=function(t){l.resolve(this.promise,t)},h.prototype.otherCallFulfilled=function(t){f(this.promise,this.onFulfilled,t)},h.prototype.callRejected=function(t){l.reject(this.promise,t)},h.prototype.otherCallRejected=function(t){f(this.promise,this.onRejected,t)},l.resolve=function(t,e){var r=p(d,e);if(\"error\"===r.status)return l.reject(t,r.value);var i=r.value;if(i)c(t,i);else{t.state=a,t.outcome=e;for(var n=-1,s=t.queue.length;++n<s;)t.queue[n].callFulfilled(e)}return t},l.reject=function(t,e){t.state=s,t.outcome=e;for(var r=-1,i=t.queue.length;++r<i;)t.queue[r].callRejected(e);return t},o.resolve=function(t){if(t instanceof this)return t;return l.resolve(new this(u),t)},o.reject=function(t){var e=new this(u);return l.reject(e,t)},o.all=function(t){var r=this;if(\"[object Array]\"!==Object.prototype.toString.call(t))return this.reject(new TypeError(\"must be an array\"));var i=t.length,n=!1;if(!i)return this.resolve([]);var s=new Array(i),a=0,e=-1,o=new this(u);for(;++e<i;)h(t[e],e);return o;function h(t,e){r.resolve(t).then(function(t){s[e]=t,++a!==i||n||(n=!0,l.resolve(o,s))},function(t){n||(n=!0,l.reject(o,t))})}},o.race=function(t){var e=this;if(\"[object Array]\"!==Object.prototype.toString.call(t))return this.reject(new TypeError(\"must be an array\"));var r=t.length,i=!1;if(!r)return this.resolve([]);var n=-1,s=new this(u);for(;++n<r;)a=t[n],e.resolve(a).then(function(t){i||(i=!0,l.resolve(s,t))},function(t){i||(i=!0,l.reject(s,t))});var a;return s}},{immediate:36}],38:[function(t,e,r){\"use strict\";var i={};(0,t(\"./lib/utils/common\").assign)(i,t(\"./lib/deflate\"),t(\"./lib/inflate\"),t(\"./lib/zlib/constants\")),e.exports=i},{\"./lib/deflate\":39,\"./lib/inflate\":40,\"./lib/utils/common\":41,\"./lib/zlib/constants\":44}],39:[function(t,e,r){\"use strict\";var a=t(\"./zlib/deflate\"),o=t(\"./utils/common\"),h=t(\"./utils/strings\"),n=t(\"./zlib/messages\"),s=t(\"./zlib/zstream\"),u=Object.prototype.toString,l=0,f=-1,d=0,c=8;function p(t){if(!(this instanceof p))return new p(t);this.options=o.assign({level:f,method:c,chunkSize:16384,windowBits:15,memLevel:8,strategy:d,to:\"\"},t||{});var e=this.options;e.raw&&0<e.windowBits?e.windowBits=-e.windowBits:e.gzip&&0<e.windowBits&&e.windowBits<16&&(e.windowBits+=16),this.err=0,this.msg=\"\",this.ended=!1,this.chunks=[],this.strm=new s,this.strm.avail_out=0;var r=a.deflateInit2(this.strm,e.level,e.method,e.windowBits,e.memLevel,e.strategy);if(r!==l)throw new Error(n[r]);if(e.header&&a.deflateSetHeader(this.strm,e.header),e.dictionary){var i;if(i=\"string\"==typeof e.dictionary?h.string2buf(e.dictionary):\"[object ArrayBuffer]\"===u.call(e.dictionary)?new Uint8Array(e.dictionary):e.dictionary,(r=a.deflateSetDictionary(this.strm,i))!==l)throw new Error(n[r]);this._dict_set=!0}}function i(t,e){var r=new p(e);if(r.push(t,!0),r.err)throw r.msg||n[r.err];return r.result}p.prototype.push=function(t,e){var r,i,n=this.strm,s=this.options.chunkSize;if(this.ended)return!1;i=e===~~e?e:!0===e?4:0,\"string\"==typeof t?n.input=h.string2buf(t):\"[object ArrayBuffer]\"===u.call(t)?n.input=new Uint8Array(t):n.input=t,n.next_in=0,n.avail_in=n.input.length;do{if(0===n.avail_out&&(n.output=new o.Buf8(s),n.next_out=0,n.avail_out=s),1!==(r=a.deflate(n,i))&&r!==l)return this.onEnd(r),!(this.ended=!0);0!==n.avail_out&&(0!==n.avail_in||4!==i&&2!==i)||(\"string\"===this.options.to?this.onData(h.buf2binstring(o.shrinkBuf(n.output,n.next_out))):this.onData(o.shrinkBuf(n.output,n.next_out)))}while((0<n.avail_in||0===n.avail_out)&&1!==r);return 4===i?(r=a.deflateEnd(this.strm),this.onEnd(r),this.ended=!0,r===l):2!==i||(this.onEnd(l),!(n.avail_out=0))},p.prototype.onData=function(t){this.chunks.push(t)},p.prototype.onEnd=function(t){t===l&&(\"string\"===this.options.to?this.result=this.chunks.join(\"\"):this.result=o.flattenChunks(this.chunks)),this.chunks=[],this.err=t,this.msg=this.strm.msg},r.Deflate=p,r.deflate=i,r.deflateRaw=function(t,e){return(e=e||{}).raw=!0,i(t,e)},r.gzip=function(t,e){return(e=e||{}).gzip=!0,i(t,e)}},{\"./utils/common\":41,\"./utils/strings\":42,\"./zlib/deflate\":46,\"./zlib/messages\":51,\"./zlib/zstream\":53}],40:[function(t,e,r){\"use strict\";var d=t(\"./zlib/inflate\"),c=t(\"./utils/common\"),p=t(\"./utils/strings\"),m=t(\"./zlib/constants\"),i=t(\"./zlib/messages\"),n=t(\"./zlib/zstream\"),s=t(\"./zlib/gzheader\"),_=Object.prototype.toString;function a(t){if(!(this instanceof a))return new a(t);this.options=c.assign({chunkSize:16384,windowBits:0,to:\"\"},t||{});var e=this.options;e.raw&&0<=e.windowBits&&e.windowBits<16&&(e.windowBits=-e.windowBits,0===e.windowBits&&(e.windowBits=-15)),!(0<=e.windowBits&&e.windowBits<16)||t&&t.windowBits||(e.windowBits+=32),15<e.windowBits&&e.windowBits<48&&0==(15&e.windowBits)&&(e.windowBits|=15),this.err=0,this.msg=\"\",this.ended=!1,this.chunks=[],this.strm=new n,this.strm.avail_out=0;var r=d.inflateInit2(this.strm,e.windowBits);if(r!==m.Z_OK)throw new Error(i[r]);this.header=new s,d.inflateGetHeader(this.strm,this.header)}function o(t,e){var r=new a(e);if(r.push(t,!0),r.err)throw r.msg||i[r.err];return r.result}a.prototype.push=function(t,e){var r,i,n,s,a,o,h=this.strm,u=this.options.chunkSize,l=this.options.dictionary,f=!1;if(this.ended)return!1;i=e===~~e?e:!0===e?m.Z_FINISH:m.Z_NO_FLUSH,\"string\"==typeof t?h.input=p.binstring2buf(t):\"[object ArrayBuffer]\"===_.call(t)?h.input=new Uint8Array(t):h.input=t,h.next_in=0,h.avail_in=h.input.length;do{if(0===h.avail_out&&(h.output=new c.Buf8(u),h.next_out=0,h.avail_out=u),(r=d.inflate(h,m.Z_NO_FLUSH))===m.Z_NEED_DICT&&l&&(o=\"string\"==typeof l?p.string2buf(l):\"[object ArrayBuffer]\"===_.call(l)?new Uint8Array(l):l,r=d.inflateSetDictionary(this.strm,o)),r===m.Z_BUF_ERROR&&!0===f&&(r=m.Z_OK,f=!1),r!==m.Z_STREAM_END&&r!==m.Z_OK)return this.onEnd(r),!(this.ended=!0);h.next_out&&(0!==h.avail_out&&r!==m.Z_STREAM_END&&(0!==h.avail_in||i!==m.Z_FINISH&&i!==m.Z_SYNC_FLUSH)||(\"string\"===this.options.to?(n=p.utf8border(h.output,h.next_out),s=h.next_out-n,a=p.buf2string(h.output,n),h.next_out=s,h.avail_out=u-s,s&&c.arraySet(h.output,h.output,n,s,0),this.onData(a)):this.onData(c.shrinkBuf(h.output,h.next_out)))),0===h.avail_in&&0===h.avail_out&&(f=!0)}while((0<h.avail_in||0===h.avail_out)&&r!==m.Z_STREAM_END);return r===m.Z_STREAM_END&&(i=m.Z_FINISH),i===m.Z_FINISH?(r=d.inflateEnd(this.strm),this.onEnd(r),this.ended=!0,r===m.Z_OK):i!==m.Z_SYNC_FLUSH||(this.onEnd(m.Z_OK),!(h.avail_out=0))},a.prototype.onData=function(t){this.chunks.push(t)},a.prototype.onEnd=function(t){t===m.Z_OK&&(\"string\"===this.options.to?this.result=this.chunks.join(\"\"):this.result=c.flattenChunks(this.chunks)),this.chunks=[],this.err=t,this.msg=this.strm.msg},r.Inflate=a,r.inflate=o,r.inflateRaw=function(t,e){return(e=e||{}).raw=!0,o(t,e)},r.ungzip=o},{\"./utils/common\":41,\"./utils/strings\":42,\"./zlib/constants\":44,\"./zlib/gzheader\":47,\"./zlib/inflate\":49,\"./zlib/messages\":51,\"./zlib/zstream\":53}],41:[function(t,e,r){\"use strict\";var i=\"undefined\"!=typeof Uint8Array&&\"undefined\"!=typeof Uint16Array&&\"undefined\"!=typeof Int32Array;r.assign=function(t){for(var e=Array.prototype.slice.call(arguments,1);e.length;){var r=e.shift();if(r){if(\"object\"!=typeof r)throw new TypeError(r+\"must be non-object\");for(var i in r)r.hasOwnProperty(i)&&(t[i]=r[i])}}return t},r.shrinkBuf=function(t,e){return t.length===e?t:t.subarray?t.subarray(0,e):(t.length=e,t)};var n={arraySet:function(t,e,r,i,n){if(e.subarray&&t.subarray)t.set(e.subarray(r,r+i),n);else for(var s=0;s<i;s++)t[n+s]=e[r+s]},flattenChunks:function(t){var e,r,i,n,s,a;for(e=i=0,r=t.length;e<r;e++)i+=t[e].length;for(a=new Uint8Array(i),e=n=0,r=t.length;e<r;e++)s=t[e],a.set(s,n),n+=s.length;return a}},s={arraySet:function(t,e,r,i,n){for(var s=0;s<i;s++)t[n+s]=e[r+s]},flattenChunks:function(t){return[].concat.apply([],t)}};r.setTyped=function(t){t?(r.Buf8=Uint8Array,r.Buf16=Uint16Array,r.Buf32=Int32Array,r.assign(r,n)):(r.Buf8=Array,r.Buf16=Array,r.Buf32=Array,r.assign(r,s))},r.setTyped(i)},{}],42:[function(t,e,r){\"use strict\";var h=t(\"./common\"),n=!0,s=!0;try{String.fromCharCode.apply(null,[0])}catch(t){n=!1}try{String.fromCharCode.apply(null,new Uint8Array(1))}catch(t){s=!1}for(var u=new h.Buf8(256),i=0;i<256;i++)u[i]=252<=i?6:248<=i?5:240<=i?4:224<=i?3:192<=i?2:1;function l(t,e){if(e<65537&&(t.subarray&&s||!t.subarray&&n))return String.fromCharCode.apply(null,h.shrinkBuf(t,e));for(var r=\"\",i=0;i<e;i++)r+=String.fromCharCode(t[i]);return r}u[254]=u[254]=1,r.string2buf=function(t){var e,r,i,n,s,a=t.length,o=0;for(n=0;n<a;n++)55296==(64512&(r=t.charCodeAt(n)))&&n+1<a&&56320==(64512&(i=t.charCodeAt(n+1)))&&(r=65536+(r-55296<<10)+(i-56320),n++),o+=r<128?1:r<2048?2:r<65536?3:4;for(e=new h.Buf8(o),n=s=0;s<o;n++)55296==(64512&(r=t.charCodeAt(n)))&&n+1<a&&56320==(64512&(i=t.charCodeAt(n+1)))&&(r=65536+(r-55296<<10)+(i-56320),n++),r<128?e[s++]=r:(r<2048?e[s++]=192|r>>>6:(r<65536?e[s++]=224|r>>>12:(e[s++]=240|r>>>18,e[s++]=128|r>>>12&63),e[s++]=128|r>>>6&63),e[s++]=128|63&r);return e},r.buf2binstring=function(t){return l(t,t.length)},r.binstring2buf=function(t){for(var e=new h.Buf8(t.length),r=0,i=e.length;r<i;r++)e[r]=t.charCodeAt(r);return e},r.buf2string=function(t,e){var r,i,n,s,a=e||t.length,o=new Array(2*a);for(r=i=0;r<a;)if((n=t[r++])<128)o[i++]=n;else if(4<(s=u[n]))o[i++]=65533,r+=s-1;else{for(n&=2===s?31:3===s?15:7;1<s&&r<a;)n=n<<6|63&t[r++],s--;1<s?o[i++]=65533:n<65536?o[i++]=n:(n-=65536,o[i++]=55296|n>>10&1023,o[i++]=56320|1023&n)}return l(o,i)},r.utf8border=function(t,e){var r;for((e=e||t.length)>t.length&&(e=t.length),r=e-1;0<=r&&128==(192&t[r]);)r--;return r<0?e:0===r?e:r+u[t[r]]>e?r:e}},{\"./common\":41}],43:[function(t,e,r){\"use strict\";e.exports=function(t,e,r,i){for(var n=65535&t|0,s=t>>>16&65535|0,a=0;0!==r;){for(r-=a=2e3<r?2e3:r;s=s+(n=n+e[i++]|0)|0,--a;);n%=65521,s%=65521}return n|s<<16|0}},{}],44:[function(t,e,r){\"use strict\";e.exports={Z_NO_FLUSH:0,Z_PARTIAL_FLUSH:1,Z_SYNC_FLUSH:2,Z_FULL_FLUSH:3,Z_FINISH:4,Z_BLOCK:5,Z_TREES:6,Z_OK:0,Z_STREAM_END:1,Z_NEED_DICT:2,Z_ERRNO:-1,Z_STREAM_ERROR:-2,Z_DATA_ERROR:-3,Z_BUF_ERROR:-5,Z_NO_COMPRESSION:0,Z_BEST_SPEED:1,Z_BEST_COMPRESSION:9,Z_DEFAULT_COMPRESSION:-1,Z_FILTERED:1,Z_HUFFMAN_ONLY:2,Z_RLE:3,Z_FIXED:4,Z_DEFAULT_STRATEGY:0,Z_BINARY:0,Z_TEXT:1,Z_UNKNOWN:2,Z_DEFLATED:8}},{}],45:[function(t,e,r){\"use strict\";var o=function(){for(var t,e=[],r=0;r<256;r++){t=r;for(var i=0;i<8;i++)t=1&t?3988292384^t>>>1:t>>>1;e[r]=t}return e}();e.exports=function(t,e,r,i){var n=o,s=i+r;t^=-1;for(var a=i;a<s;a++)t=t>>>8^n[255&(t^e[a])];return-1^t}},{}],46:[function(t,e,r){\"use strict\";var h,d=t(\"../utils/common\"),u=t(\"./trees\"),c=t(\"./adler32\"),p=t(\"./crc32\"),i=t(\"./messages\"),l=0,f=4,m=0,_=-2,g=-1,b=4,n=2,v=8,y=9,s=286,a=30,o=19,w=2*s+1,k=15,x=3,S=258,z=S+x+1,C=42,E=113,A=1,I=2,O=3,B=4;function R(t,e){return t.msg=i[e],e}function T(t){return(t<<1)-(4<t?9:0)}function D(t){for(var e=t.length;0<=--e;)t[e]=0}function F(t){var e=t.state,r=e.pending;r>t.avail_out&&(r=t.avail_out),0!==r&&(d.arraySet(t.output,e.pending_buf,e.pending_out,r,t.next_out),t.next_out+=r,e.pending_out+=r,t.total_out+=r,t.avail_out-=r,e.pending-=r,0===e.pending&&(e.pending_out=0))}function N(t,e){u._tr_flush_block(t,0<=t.block_start?t.block_start:-1,t.strstart-t.block_start,e),t.block_start=t.strstart,F(t.strm)}function U(t,e){t.pending_buf[t.pending++]=e}function P(t,e){t.pending_buf[t.pending++]=e>>>8&255,t.pending_buf[t.pending++]=255&e}function L(t,e){var r,i,n=t.max_chain_length,s=t.strstart,a=t.prev_length,o=t.nice_match,h=t.strstart>t.w_size-z?t.strstart-(t.w_size-z):0,u=t.window,l=t.w_mask,f=t.prev,d=t.strstart+S,c=u[s+a-1],p=u[s+a];t.prev_length>=t.good_match&&(n>>=2),o>t.lookahead&&(o=t.lookahead);do{if(u[(r=e)+a]===p&&u[r+a-1]===c&&u[r]===u[s]&&u[++r]===u[s+1]){s+=2,r++;do{}while(u[++s]===u[++r]&&u[++s]===u[++r]&&u[++s]===u[++r]&&u[++s]===u[++r]&&u[++s]===u[++r]&&u[++s]===u[++r]&&u[++s]===u[++r]&&u[++s]===u[++r]&&s<d);if(i=S-(d-s),s=d-S,a<i){if(t.match_start=e,o<=(a=i))break;c=u[s+a-1],p=u[s+a]}}}while((e=f[e&l])>h&&0!=--n);return a<=t.lookahead?a:t.lookahead}function j(t){var e,r,i,n,s,a,o,h,u,l,f=t.w_size;do{if(n=t.window_size-t.lookahead-t.strstart,t.strstart>=f+(f-z)){for(d.arraySet(t.window,t.window,f,f,0),t.match_start-=f,t.strstart-=f,t.block_start-=f,e=r=t.hash_size;i=t.head[--e],t.head[e]=f<=i?i-f:0,--r;);for(e=r=f;i=t.prev[--e],t.prev[e]=f<=i?i-f:0,--r;);n+=f}if(0===t.strm.avail_in)break;if(a=t.strm,o=t.window,h=t.strstart+t.lookahead,u=n,l=void 0,l=a.avail_in,u<l&&(l=u),r=0===l?0:(a.avail_in-=l,d.arraySet(o,a.input,a.next_in,l,h),1===a.state.wrap?a.adler=c(a.adler,o,l,h):2===a.state.wrap&&(a.adler=p(a.adler,o,l,h)),a.next_in+=l,a.total_in+=l,l),t.lookahead+=r,t.lookahead+t.insert>=x)for(s=t.strstart-t.insert,t.ins_h=t.window[s],t.ins_h=(t.ins_h<<t.hash_shift^t.window[s+1])&t.hash_mask;t.insert&&(t.ins_h=(t.ins_h<<t.hash_shift^t.window[s+x-1])&t.hash_mask,t.prev[s&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=s,s++,t.insert--,!(t.lookahead+t.insert<x)););}while(t.lookahead<z&&0!==t.strm.avail_in)}function Z(t,e){for(var r,i;;){if(t.lookahead<z){if(j(t),t.lookahead<z&&e===l)return A;if(0===t.lookahead)break}if(r=0,t.lookahead>=x&&(t.ins_h=(t.ins_h<<t.hash_shift^t.window[t.strstart+x-1])&t.hash_mask,r=t.prev[t.strstart&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=t.strstart),0!==r&&t.strstart-r<=t.w_size-z&&(t.match_length=L(t,r)),t.match_length>=x)if(i=u._tr_tally(t,t.strstart-t.match_start,t.match_length-x),t.lookahead-=t.match_length,t.match_length<=t.max_lazy_match&&t.lookahead>=x){for(t.match_length--;t.strstart++,t.ins_h=(t.ins_h<<t.hash_shift^t.window[t.strstart+x-1])&t.hash_mask,r=t.prev[t.strstart&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=t.strstart,0!=--t.match_length;);t.strstart++}else t.strstart+=t.match_length,t.match_length=0,t.ins_h=t.window[t.strstart],t.ins_h=(t.ins_h<<t.hash_shift^t.window[t.strstart+1])&t.hash_mask;else i=u._tr_tally(t,0,t.window[t.strstart]),t.lookahead--,t.strstart++;if(i&&(N(t,!1),0===t.strm.avail_out))return A}return t.insert=t.strstart<x-1?t.strstart:x-1,e===f?(N(t,!0),0===t.strm.avail_out?O:B):t.last_lit&&(N(t,!1),0===t.strm.avail_out)?A:I}function W(t,e){for(var r,i,n;;){if(t.lookahead<z){if(j(t),t.lookahead<z&&e===l)return A;if(0===t.lookahead)break}if(r=0,t.lookahead>=x&&(t.ins_h=(t.ins_h<<t.hash_shift^t.window[t.strstart+x-1])&t.hash_mask,r=t.prev[t.strstart&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=t.strstart),t.prev_length=t.match_length,t.prev_match=t.match_start,t.match_length=x-1,0!==r&&t.prev_length<t.max_lazy_match&&t.strstart-r<=t.w_size-z&&(t.match_length=L(t,r),t.match_length<=5&&(1===t.strategy||t.match_length===x&&4096<t.strstart-t.match_start)&&(t.match_length=x-1)),t.prev_length>=x&&t.match_length<=t.prev_length){for(n=t.strstart+t.lookahead-x,i=u._tr_tally(t,t.strstart-1-t.prev_match,t.prev_length-x),t.lookahead-=t.prev_length-1,t.prev_length-=2;++t.strstart<=n&&(t.ins_h=(t.ins_h<<t.hash_shift^t.window[t.strstart+x-1])&t.hash_mask,r=t.prev[t.strstart&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=t.strstart),0!=--t.prev_length;);if(t.match_available=0,t.match_length=x-1,t.strstart++,i&&(N(t,!1),0===t.strm.avail_out))return A}else if(t.match_available){if((i=u._tr_tally(t,0,t.window[t.strstart-1]))&&N(t,!1),t.strstart++,t.lookahead--,0===t.strm.avail_out)return A}else t.match_available=1,t.strstart++,t.lookahead--}return t.match_available&&(i=u._tr_tally(t,0,t.window[t.strstart-1]),t.match_available=0),t.insert=t.strstart<x-1?t.strstart:x-1,e===f?(N(t,!0),0===t.strm.avail_out?O:B):t.last_lit&&(N(t,!1),0===t.strm.avail_out)?A:I}function M(t,e,r,i,n){this.good_length=t,this.max_lazy=e,this.nice_length=r,this.max_chain=i,this.func=n}function H(){this.strm=null,this.status=0,this.pending_buf=null,this.pending_buf_size=0,this.pending_out=0,this.pending=0,this.wrap=0,this.gzhead=null,this.gzindex=0,this.method=v,this.last_flush=-1,this.w_size=0,this.w_bits=0,this.w_mask=0,this.window=null,this.window_size=0,this.prev=null,this.head=null,this.ins_h=0,this.hash_size=0,this.hash_bits=0,this.hash_mask=0,this.hash_shift=0,this.block_start=0,this.match_length=0,this.prev_match=0,this.match_available=0,this.strstart=0,this.match_start=0,this.lookahead=0,this.prev_length=0,this.max_chain_length=0,this.max_lazy_match=0,this.level=0,this.strategy=0,this.good_match=0,this.nice_match=0,this.dyn_ltree=new d.Buf16(2*w),this.dyn_dtree=new d.Buf16(2*(2*a+1)),this.bl_tree=new d.Buf16(2*(2*o+1)),D(this.dyn_ltree),D(this.dyn_dtree),D(this.bl_tree),this.l_desc=null,this.d_desc=null,this.bl_desc=null,this.bl_count=new d.Buf16(k+1),this.heap=new d.Buf16(2*s+1),D(this.heap),this.heap_len=0,this.heap_max=0,this.depth=new d.Buf16(2*s+1),D(this.depth),this.l_buf=0,this.lit_bufsize=0,this.last_lit=0,this.d_buf=0,this.opt_len=0,this.static_len=0,this.matches=0,this.insert=0,this.bi_buf=0,this.bi_valid=0}function G(t){var e;return t&&t.state?(t.total_in=t.total_out=0,t.data_type=n,(e=t.state).pending=0,e.pending_out=0,e.wrap<0&&(e.wrap=-e.wrap),e.status=e.wrap?C:E,t.adler=2===e.wrap?0:1,e.last_flush=l,u._tr_init(e),m):R(t,_)}function K(t){var e=G(t);return e===m&&function(t){t.window_size=2*t.w_size,D(t.head),t.max_lazy_match=h[t.level].max_lazy,t.good_match=h[t.level].good_length,t.nice_match=h[t.level].nice_length,t.max_chain_length=h[t.level].max_chain,t.strstart=0,t.block_start=0,t.lookahead=0,t.insert=0,t.match_length=t.prev_length=x-1,t.match_available=0,t.ins_h=0}(t.state),e}function Y(t,e,r,i,n,s){if(!t)return _;var a=1;if(e===g&&(e=6),i<0?(a=0,i=-i):15<i&&(a=2,i-=16),n<1||y<n||r!==v||i<8||15<i||e<0||9<e||s<0||b<s)return R(t,_);8===i&&(i=9);var o=new H;return(t.state=o).strm=t,o.wrap=a,o.gzhead=null,o.w_bits=i,o.w_size=1<<o.w_bits,o.w_mask=o.w_size-1,o.hash_bits=n+7,o.hash_size=1<<o.hash_bits,o.hash_mask=o.hash_size-1,o.hash_shift=~~((o.hash_bits+x-1)/x),o.window=new d.Buf8(2*o.w_size),o.head=new d.Buf16(o.hash_size),o.prev=new d.Buf16(o.w_size),o.lit_bufsize=1<<n+6,o.pending_buf_size=4*o.lit_bufsize,o.pending_buf=new d.Buf8(o.pending_buf_size),o.d_buf=1*o.lit_bufsize,o.l_buf=3*o.lit_bufsize,o.level=e,o.strategy=s,o.method=r,K(t)}h=[new M(0,0,0,0,function(t,e){var r=65535;for(r>t.pending_buf_size-5&&(r=t.pending_buf_size-5);;){if(t.lookahead<=1){if(j(t),0===t.lookahead&&e===l)return A;if(0===t.lookahead)break}t.strstart+=t.lookahead,t.lookahead=0;var i=t.block_start+r;if((0===t.strstart||t.strstart>=i)&&(t.lookahead=t.strstart-i,t.strstart=i,N(t,!1),0===t.strm.avail_out))return A;if(t.strstart-t.block_start>=t.w_size-z&&(N(t,!1),0===t.strm.avail_out))return A}return t.insert=0,e===f?(N(t,!0),0===t.strm.avail_out?O:B):(t.strstart>t.block_start&&(N(t,!1),t.strm.avail_out),A)}),new M(4,4,8,4,Z),new M(4,5,16,8,Z),new M(4,6,32,32,Z),new M(4,4,16,16,W),new M(8,16,32,32,W),new M(8,16,128,128,W),new M(8,32,128,256,W),new M(32,128,258,1024,W),new M(32,258,258,4096,W)],r.deflateInit=function(t,e){return Y(t,e,v,15,8,0)},r.deflateInit2=Y,r.deflateReset=K,r.deflateResetKeep=G,r.deflateSetHeader=function(t,e){return t&&t.state?2!==t.state.wrap?_:(t.state.gzhead=e,m):_},r.deflate=function(t,e){var r,i,n,s;if(!t||!t.state||5<e||e<0)return t?R(t,_):_;if(i=t.state,!t.output||!t.input&&0!==t.avail_in||666===i.status&&e!==f)return R(t,0===t.avail_out?-5:_);if(i.strm=t,r=i.last_flush,i.last_flush=e,i.status===C)if(2===i.wrap)t.adler=0,U(i,31),U(i,139),U(i,8),i.gzhead?(U(i,(i.gzhead.text?1:0)+(i.gzhead.hcrc?2:0)+(i.gzhead.extra?4:0)+(i.gzhead.name?8:0)+(i.gzhead.comment?16:0)),U(i,255&i.gzhead.time),U(i,i.gzhead.time>>8&255),U(i,i.gzhead.time>>16&255),U(i,i.gzhead.time>>24&255),U(i,9===i.level?2:2<=i.strategy||i.level<2?4:0),U(i,255&i.gzhead.os),i.gzhead.extra&&i.gzhead.extra.length&&(U(i,255&i.gzhead.extra.length),U(i,i.gzhead.extra.length>>8&255)),i.gzhead.hcrc&&(t.adler=p(t.adler,i.pending_buf,i.pending,0)),i.gzindex=0,i.status=69):(U(i,0),U(i,0),U(i,0),U(i,0),U(i,0),U(i,9===i.level?2:2<=i.strategy||i.level<2?4:0),U(i,3),i.status=E);else{var a=v+(i.w_bits-8<<4)<<8;a|=(2<=i.strategy||i.level<2?0:i.level<6?1:6===i.level?2:3)<<6,0!==i.strstart&&(a|=32),a+=31-a%31,i.status=E,P(i,a),0!==i.strstart&&(P(i,t.adler>>>16),P(i,65535&t.adler)),t.adler=1}if(69===i.status)if(i.gzhead.extra){for(n=i.pending;i.gzindex<(65535&i.gzhead.extra.length)&&(i.pending!==i.pending_buf_size||(i.gzhead.hcrc&&i.pending>n&&(t.adler=p(t.adler,i.pending_buf,i.pending-n,n)),F(t),n=i.pending,i.pending!==i.pending_buf_size));)U(i,255&i.gzhead.extra[i.gzindex]),i.gzindex++;i.gzhead.hcrc&&i.pending>n&&(t.adler=p(t.adler,i.pending_buf,i.pending-n,n)),i.gzindex===i.gzhead.extra.length&&(i.gzindex=0,i.status=73)}else i.status=73;if(73===i.status)if(i.gzhead.name){n=i.pending;do{if(i.pending===i.pending_buf_size&&(i.gzhead.hcrc&&i.pending>n&&(t.adler=p(t.adler,i.pending_buf,i.pending-n,n)),F(t),n=i.pending,i.pending===i.pending_buf_size)){s=1;break}s=i.gzindex<i.gzhead.name.length?255&i.gzhead.name.charCodeAt(i.gzindex++):0,U(i,s)}while(0!==s);i.gzhead.hcrc&&i.pending>n&&(t.adler=p(t.adler,i.pending_buf,i.pending-n,n)),0===s&&(i.gzindex=0,i.status=91)}else i.status=91;if(91===i.status)if(i.gzhead.comment){n=i.pending;do{if(i.pending===i.pending_buf_size&&(i.gzhead.hcrc&&i.pending>n&&(t.adler=p(t.adler,i.pending_buf,i.pending-n,n)),F(t),n=i.pending,i.pending===i.pending_buf_size)){s=1;break}s=i.gzindex<i.gzhead.comment.length?255&i.gzhead.comment.charCodeAt(i.gzindex++):0,U(i,s)}while(0!==s);i.gzhead.hcrc&&i.pending>n&&(t.adler=p(t.adler,i.pending_buf,i.pending-n,n)),0===s&&(i.status=103)}else i.status=103;if(103===i.status&&(i.gzhead.hcrc?(i.pending+2>i.pending_buf_size&&F(t),i.pending+2<=i.pending_buf_size&&(U(i,255&t.adler),U(i,t.adler>>8&255),t.adler=0,i.status=E)):i.status=E),0!==i.pending){if(F(t),0===t.avail_out)return i.last_flush=-1,m}else if(0===t.avail_in&&T(e)<=T(r)&&e!==f)return R(t,-5);if(666===i.status&&0!==t.avail_in)return R(t,-5);if(0!==t.avail_in||0!==i.lookahead||e!==l&&666!==i.status){var o=2===i.strategy?function(t,e){for(var r;;){if(0===t.lookahead&&(j(t),0===t.lookahead)){if(e===l)return A;break}if(t.match_length=0,r=u._tr_tally(t,0,t.window[t.strstart]),t.lookahead--,t.strstart++,r&&(N(t,!1),0===t.strm.avail_out))return A}return t.insert=0,e===f?(N(t,!0),0===t.strm.avail_out?O:B):t.last_lit&&(N(t,!1),0===t.strm.avail_out)?A:I}(i,e):3===i.strategy?function(t,e){for(var r,i,n,s,a=t.window;;){if(t.lookahead<=S){if(j(t),t.lookahead<=S&&e===l)return A;if(0===t.lookahead)break}if(t.match_length=0,t.lookahead>=x&&0<t.strstart&&(i=a[n=t.strstart-1])===a[++n]&&i===a[++n]&&i===a[++n]){s=t.strstart+S;do{}while(i===a[++n]&&i===a[++n]&&i===a[++n]&&i===a[++n]&&i===a[++n]&&i===a[++n]&&i===a[++n]&&i===a[++n]&&n<s);t.match_length=S-(s-n),t.match_length>t.lookahead&&(t.match_length=t.lookahead)}if(t.match_length>=x?(r=u._tr_tally(t,1,t.match_length-x),t.lookahead-=t.match_length,t.strstart+=t.match_length,t.match_length=0):(r=u._tr_tally(t,0,t.window[t.strstart]),t.lookahead--,t.strstart++),r&&(N(t,!1),0===t.strm.avail_out))return A}return t.insert=0,e===f?(N(t,!0),0===t.strm.avail_out?O:B):t.last_lit&&(N(t,!1),0===t.strm.avail_out)?A:I}(i,e):h[i.level].func(i,e);if(o!==O&&o!==B||(i.status=666),o===A||o===O)return 0===t.avail_out&&(i.last_flush=-1),m;if(o===I&&(1===e?u._tr_align(i):5!==e&&(u._tr_stored_block(i,0,0,!1),3===e&&(D(i.head),0===i.lookahead&&(i.strstart=0,i.block_start=0,i.insert=0))),F(t),0===t.avail_out))return i.last_flush=-1,m}return e!==f?m:i.wrap<=0?1:(2===i.wrap?(U(i,255&t.adler),U(i,t.adler>>8&255),U(i,t.adler>>16&255),U(i,t.adler>>24&255),U(i,255&t.total_in),U(i,t.total_in>>8&255),U(i,t.total_in>>16&255),U(i,t.total_in>>24&255)):(P(i,t.adler>>>16),P(i,65535&t.adler)),F(t),0<i.wrap&&(i.wrap=-i.wrap),0!==i.pending?m:1)},r.deflateEnd=function(t){var e;return t&&t.state?(e=t.state.status)!==C&&69!==e&&73!==e&&91!==e&&103!==e&&e!==E&&666!==e?R(t,_):(t.state=null,e===E?R(t,-3):m):_},r.deflateSetDictionary=function(t,e){var r,i,n,s,a,o,h,u,l=e.length;if(!t||!t.state)return _;if(2===(s=(r=t.state).wrap)||1===s&&r.status!==C||r.lookahead)return _;for(1===s&&(t.adler=c(t.adler,e,l,0)),r.wrap=0,l>=r.w_size&&(0===s&&(D(r.head),r.strstart=0,r.block_start=0,r.insert=0),u=new d.Buf8(r.w_size),d.arraySet(u,e,l-r.w_size,r.w_size,0),e=u,l=r.w_size),a=t.avail_in,o=t.next_in,h=t.input,t.avail_in=l,t.next_in=0,t.input=e,j(r);r.lookahead>=x;){for(i=r.strstart,n=r.lookahead-(x-1);r.ins_h=(r.ins_h<<r.hash_shift^r.window[i+x-1])&r.hash_mask,r.prev[i&r.w_mask]=r.head[r.ins_h],r.head[r.ins_h]=i,i++,--n;);r.strstart=i,r.lookahead=x-1,j(r)}return r.strstart+=r.lookahead,r.block_start=r.strstart,r.insert=r.lookahead,r.lookahead=0,r.match_length=r.prev_length=x-1,r.match_available=0,t.next_in=o,t.input=h,t.avail_in=a,r.wrap=s,m},r.deflateInfo=\"pako deflate (from Nodeca project)\"},{\"../utils/common\":41,\"./adler32\":43,\"./crc32\":45,\"./messages\":51,\"./trees\":52}],47:[function(t,e,r){\"use strict\";e.exports=function(){this.text=0,this.time=0,this.xflags=0,this.os=0,this.extra=null,this.extra_len=0,this.name=\"\",this.comment=\"\",this.hcrc=0,this.done=!1}},{}],48:[function(t,e,r){\"use strict\";e.exports=function(t,e){var r,i,n,s,a,o,h,u,l,f,d,c,p,m,_,g,b,v,y,w,k,x,S,z,C;r=t.state,i=t.next_in,z=t.input,n=i+(t.avail_in-5),s=t.next_out,C=t.output,a=s-(e-t.avail_out),o=s+(t.avail_out-257),h=r.dmax,u=r.wsize,l=r.whave,f=r.wnext,d=r.window,c=r.hold,p=r.bits,m=r.lencode,_=r.distcode,g=(1<<r.lenbits)-1,b=(1<<r.distbits)-1;t:do{p<15&&(c+=z[i++]<<p,p+=8,c+=z[i++]<<p,p+=8),v=m[c&g];e:for(;;){if(c>>>=y=v>>>24,p-=y,0===(y=v>>>16&255))C[s++]=65535&v;else{if(!(16&y)){if(0==(64&y)){v=m[(65535&v)+(c&(1<<y)-1)];continue e}if(32&y){r.mode=12;break t}t.msg=\"invalid literal/length code\",r.mode=30;break t}w=65535&v,(y&=15)&&(p<y&&(c+=z[i++]<<p,p+=8),w+=c&(1<<y)-1,c>>>=y,p-=y),p<15&&(c+=z[i++]<<p,p+=8,c+=z[i++]<<p,p+=8),v=_[c&b];r:for(;;){if(c>>>=y=v>>>24,p-=y,!(16&(y=v>>>16&255))){if(0==(64&y)){v=_[(65535&v)+(c&(1<<y)-1)];continue r}t.msg=\"invalid distance code\",r.mode=30;break t}if(k=65535&v,p<(y&=15)&&(c+=z[i++]<<p,(p+=8)<y&&(c+=z[i++]<<p,p+=8)),h<(k+=c&(1<<y)-1)){t.msg=\"invalid distance too far back\",r.mode=30;break t}if(c>>>=y,p-=y,(y=s-a)<k){if(l<(y=k-y)&&r.sane){t.msg=\"invalid distance too far back\",r.mode=30;break t}if(S=d,(x=0)===f){if(x+=u-y,y<w){for(w-=y;C[s++]=d[x++],--y;);x=s-k,S=C}}else if(f<y){if(x+=u+f-y,(y-=f)<w){for(w-=y;C[s++]=d[x++],--y;);if(x=0,f<w){for(w-=y=f;C[s++]=d[x++],--y;);x=s-k,S=C}}}else if(x+=f-y,y<w){for(w-=y;C[s++]=d[x++],--y;);x=s-k,S=C}for(;2<w;)C[s++]=S[x++],C[s++]=S[x++],C[s++]=S[x++],w-=3;w&&(C[s++]=S[x++],1<w&&(C[s++]=S[x++]))}else{for(x=s-k;C[s++]=C[x++],C[s++]=C[x++],C[s++]=C[x++],2<(w-=3););w&&(C[s++]=C[x++],1<w&&(C[s++]=C[x++]))}break}}break}}while(i<n&&s<o);i-=w=p>>3,c&=(1<<(p-=w<<3))-1,t.next_in=i,t.next_out=s,t.avail_in=i<n?n-i+5:5-(i-n),t.avail_out=s<o?o-s+257:257-(s-o),r.hold=c,r.bits=p}},{}],49:[function(t,e,r){\"use strict\";var I=t(\"../utils/common\"),O=t(\"./adler32\"),B=t(\"./crc32\"),R=t(\"./inffast\"),T=t(\"./inftrees\"),D=1,F=2,N=0,U=-2,P=1,i=852,n=592;function L(t){return(t>>>24&255)+(t>>>8&65280)+((65280&t)<<8)+((255&t)<<24)}function s(){this.mode=0,this.last=!1,this.wrap=0,this.havedict=!1,this.flags=0,this.dmax=0,this.check=0,this.total=0,this.head=null,this.wbits=0,this.wsize=0,this.whave=0,this.wnext=0,this.window=null,this.hold=0,this.bits=0,this.length=0,this.offset=0,this.extra=0,this.lencode=null,this.distcode=null,this.lenbits=0,this.distbits=0,this.ncode=0,this.nlen=0,this.ndist=0,this.have=0,this.next=null,this.lens=new I.Buf16(320),this.work=new I.Buf16(288),this.lendyn=null,this.distdyn=null,this.sane=0,this.back=0,this.was=0}function a(t){var e;return t&&t.state?(e=t.state,t.total_in=t.total_out=e.total=0,t.msg=\"\",e.wrap&&(t.adler=1&e.wrap),e.mode=P,e.last=0,e.havedict=0,e.dmax=32768,e.head=null,e.hold=0,e.bits=0,e.lencode=e.lendyn=new I.Buf32(i),e.distcode=e.distdyn=new I.Buf32(n),e.sane=1,e.back=-1,N):U}function o(t){var e;return t&&t.state?((e=t.state).wsize=0,e.whave=0,e.wnext=0,a(t)):U}function h(t,e){var r,i;return t&&t.state?(i=t.state,e<0?(r=0,e=-e):(r=1+(e>>4),e<48&&(e&=15)),e&&(e<8||15<e)?U:(null!==i.window&&i.wbits!==e&&(i.window=null),i.wrap=r,i.wbits=e,o(t))):U}function u(t,e){var r,i;return t?(i=new s,(t.state=i).window=null,(r=h(t,e))!==N&&(t.state=null),r):U}var l,f,d=!0;function j(t){if(d){var e;for(l=new I.Buf32(512),f=new I.Buf32(32),e=0;e<144;)t.lens[e++]=8;for(;e<256;)t.lens[e++]=9;for(;e<280;)t.lens[e++]=7;for(;e<288;)t.lens[e++]=8;for(T(D,t.lens,0,288,l,0,t.work,{bits:9}),e=0;e<32;)t.lens[e++]=5;T(F,t.lens,0,32,f,0,t.work,{bits:5}),d=!1}t.lencode=l,t.lenbits=9,t.distcode=f,t.distbits=5}function Z(t,e,r,i){var n,s=t.state;return null===s.window&&(s.wsize=1<<s.wbits,s.wnext=0,s.whave=0,s.window=new I.Buf8(s.wsize)),i>=s.wsize?(I.arraySet(s.window,e,r-s.wsize,s.wsize,0),s.wnext=0,s.whave=s.wsize):(i<(n=s.wsize-s.wnext)&&(n=i),I.arraySet(s.window,e,r-i,n,s.wnext),(i-=n)?(I.arraySet(s.window,e,r-i,i,0),s.wnext=i,s.whave=s.wsize):(s.wnext+=n,s.wnext===s.wsize&&(s.wnext=0),s.whave<s.wsize&&(s.whave+=n))),0}r.inflateReset=o,r.inflateReset2=h,r.inflateResetKeep=a,r.inflateInit=function(t){return u(t,15)},r.inflateInit2=u,r.inflate=function(t,e){var r,i,n,s,a,o,h,u,l,f,d,c,p,m,_,g,b,v,y,w,k,x,S,z,C=0,E=new I.Buf8(4),A=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];if(!t||!t.state||!t.output||!t.input&&0!==t.avail_in)return U;12===(r=t.state).mode&&(r.mode=13),a=t.next_out,n=t.output,h=t.avail_out,s=t.next_in,i=t.input,o=t.avail_in,u=r.hold,l=r.bits,f=o,d=h,x=N;t:for(;;)switch(r.mode){case P:if(0===r.wrap){r.mode=13;break}for(;l<16;){if(0===o)break t;o--,u+=i[s++]<<l,l+=8}if(2&r.wrap&&35615===u){E[r.check=0]=255&u,E[1]=u>>>8&255,r.check=B(r.check,E,2,0),l=u=0,r.mode=2;break}if(r.flags=0,r.head&&(r.head.done=!1),!(1&r.wrap)||(((255&u)<<8)+(u>>8))%31){t.msg=\"incorrect header check\",r.mode=30;break}if(8!=(15&u)){t.msg=\"unknown compression method\",r.mode=30;break}if(l-=4,k=8+(15&(u>>>=4)),0===r.wbits)r.wbits=k;else if(k>r.wbits){t.msg=\"invalid window size\",r.mode=30;break}r.dmax=1<<k,t.adler=r.check=1,r.mode=512&u?10:12,l=u=0;break;case 2:for(;l<16;){if(0===o)break t;o--,u+=i[s++]<<l,l+=8}if(r.flags=u,8!=(255&r.flags)){t.msg=\"unknown compression method\",r.mode=30;break}if(57344&r.flags){t.msg=\"unknown header flags set\",r.mode=30;break}r.head&&(r.head.text=u>>8&1),512&r.flags&&(E[0]=255&u,E[1]=u>>>8&255,r.check=B(r.check,E,2,0)),l=u=0,r.mode=3;case 3:for(;l<32;){if(0===o)break t;o--,u+=i[s++]<<l,l+=8}r.head&&(r.head.time=u),512&r.flags&&(E[0]=255&u,E[1]=u>>>8&255,E[2]=u>>>16&255,E[3]=u>>>24&255,r.check=B(r.check,E,4,0)),l=u=0,r.mode=4;case 4:for(;l<16;){if(0===o)break t;o--,u+=i[s++]<<l,l+=8}r.head&&(r.head.xflags=255&u,r.head.os=u>>8),512&r.flags&&(E[0]=255&u,E[1]=u>>>8&255,r.check=B(r.check,E,2,0)),l=u=0,r.mode=5;case 5:if(1024&r.flags){for(;l<16;){if(0===o)break t;o--,u+=i[s++]<<l,l+=8}r.length=u,r.head&&(r.head.extra_len=u),512&r.flags&&(E[0]=255&u,E[1]=u>>>8&255,r.check=B(r.check,E,2,0)),l=u=0}else r.head&&(r.head.extra=null);r.mode=6;case 6:if(1024&r.flags&&(o<(c=r.length)&&(c=o),c&&(r.head&&(k=r.head.extra_len-r.length,r.head.extra||(r.head.extra=new Array(r.head.extra_len)),I.arraySet(r.head.extra,i,s,c,k)),512&r.flags&&(r.check=B(r.check,i,c,s)),o-=c,s+=c,r.length-=c),r.length))break t;r.length=0,r.mode=7;case 7:if(2048&r.flags){if(0===o)break t;for(c=0;k=i[s+c++],r.head&&k&&r.length<65536&&(r.head.name+=String.fromCharCode(k)),k&&c<o;);if(512&r.flags&&(r.check=B(r.check,i,c,s)),o-=c,s+=c,k)break t}else r.head&&(r.head.name=null);r.length=0,r.mode=8;case 8:if(4096&r.flags){if(0===o)break t;for(c=0;k=i[s+c++],r.head&&k&&r.length<65536&&(r.head.comment+=String.fromCharCode(k)),k&&c<o;);if(512&r.flags&&(r.check=B(r.check,i,c,s)),o-=c,s+=c,k)break t}else r.head&&(r.head.comment=null);r.mode=9;case 9:if(512&r.flags){for(;l<16;){if(0===o)break t;o--,u+=i[s++]<<l,l+=8}if(u!==(65535&r.check)){t.msg=\"header crc mismatch\",r.mode=30;break}l=u=0}r.head&&(r.head.hcrc=r.flags>>9&1,r.head.done=!0),t.adler=r.check=0,r.mode=12;break;case 10:for(;l<32;){if(0===o)break t;o--,u+=i[s++]<<l,l+=8}t.adler=r.check=L(u),l=u=0,r.mode=11;case 11:if(0===r.havedict)return t.next_out=a,t.avail_out=h,t.next_in=s,t.avail_in=o,r.hold=u,r.bits=l,2;t.adler=r.check=1,r.mode=12;case 12:if(5===e||6===e)break t;case 13:if(r.last){u>>>=7&l,l-=7&l,r.mode=27;break}for(;l<3;){if(0===o)break t;o--,u+=i[s++]<<l,l+=8}switch(r.last=1&u,l-=1,3&(u>>>=1)){case 0:r.mode=14;break;case 1:if(j(r),r.mode=20,6!==e)break;u>>>=2,l-=2;break t;case 2:r.mode=17;break;case 3:t.msg=\"invalid block type\",r.mode=30}u>>>=2,l-=2;break;case 14:for(u>>>=7&l,l-=7&l;l<32;){if(0===o)break t;o--,u+=i[s++]<<l,l+=8}if((65535&u)!=(u>>>16^65535)){t.msg=\"invalid stored block lengths\",r.mode=30;break}if(r.length=65535&u,l=u=0,r.mode=15,6===e)break t;case 15:r.mode=16;case 16:if(c=r.length){if(o<c&&(c=o),h<c&&(c=h),0===c)break t;I.arraySet(n,i,s,c,a),o-=c,s+=c,h-=c,a+=c,r.length-=c;break}r.mode=12;break;case 17:for(;l<14;){if(0===o)break t;o--,u+=i[s++]<<l,l+=8}if(r.nlen=257+(31&u),u>>>=5,l-=5,r.ndist=1+(31&u),u>>>=5,l-=5,r.ncode=4+(15&u),u>>>=4,l-=4,286<r.nlen||30<r.ndist){t.msg=\"too many length or distance symbols\",r.mode=30;break}r.have=0,r.mode=18;case 18:for(;r.have<r.ncode;){for(;l<3;){if(0===o)break t;o--,u+=i[s++]<<l,l+=8}r.lens[A[r.have++]]=7&u,u>>>=3,l-=3}for(;r.have<19;)r.lens[A[r.have++]]=0;if(r.lencode=r.lendyn,r.lenbits=7,S={bits:r.lenbits},x=T(0,r.lens,0,19,r.lencode,0,r.work,S),r.lenbits=S.bits,x){t.msg=\"invalid code lengths set\",r.mode=30;break}r.have=0,r.mode=19;case 19:for(;r.have<r.nlen+r.ndist;){for(;g=(C=r.lencode[u&(1<<r.lenbits)-1])>>>16&255,b=65535&C,!((_=C>>>24)<=l);){if(0===o)break t;o--,u+=i[s++]<<l,l+=8}if(b<16)u>>>=_,l-=_,r.lens[r.have++]=b;else{if(16===b){for(z=_+2;l<z;){if(0===o)break t;o--,u+=i[s++]<<l,l+=8}if(u>>>=_,l-=_,0===r.have){t.msg=\"invalid bit length repeat\",r.mode=30;break}k=r.lens[r.have-1],c=3+(3&u),u>>>=2,l-=2}else if(17===b){for(z=_+3;l<z;){if(0===o)break t;o--,u+=i[s++]<<l,l+=8}l-=_,k=0,c=3+(7&(u>>>=_)),u>>>=3,l-=3}else{for(z=_+7;l<z;){if(0===o)break t;o--,u+=i[s++]<<l,l+=8}l-=_,k=0,c=11+(127&(u>>>=_)),u>>>=7,l-=7}if(r.have+c>r.nlen+r.ndist){t.msg=\"invalid bit length repeat\",r.mode=30;break}for(;c--;)r.lens[r.have++]=k}}if(30===r.mode)break;if(0===r.lens[256]){t.msg=\"invalid code -- missing end-of-block\",r.mode=30;break}if(r.lenbits=9,S={bits:r.lenbits},x=T(D,r.lens,0,r.nlen,r.lencode,0,r.work,S),r.lenbits=S.bits,x){t.msg=\"invalid literal/lengths set\",r.mode=30;break}if(r.distbits=6,r.distcode=r.distdyn,S={bits:r.distbits},x=T(F,r.lens,r.nlen,r.ndist,r.distcode,0,r.work,S),r.distbits=S.bits,x){t.msg=\"invalid distances set\",r.mode=30;break}if(r.mode=20,6===e)break t;case 20:r.mode=21;case 21:if(6<=o&&258<=h){t.next_out=a,t.avail_out=h,t.next_in=s,t.avail_in=o,r.hold=u,r.bits=l,R(t,d),a=t.next_out,n=t.output,h=t.avail_out,s=t.next_in,i=t.input,o=t.avail_in,u=r.hold,l=r.bits,12===r.mode&&(r.back=-1);break}for(r.back=0;g=(C=r.lencode[u&(1<<r.lenbits)-1])>>>16&255,b=65535&C,!((_=C>>>24)<=l);){if(0===o)break t;o--,u+=i[s++]<<l,l+=8}if(g&&0==(240&g)){for(v=_,y=g,w=b;g=(C=r.lencode[w+((u&(1<<v+y)-1)>>v)])>>>16&255,b=65535&C,!(v+(_=C>>>24)<=l);){if(0===o)break t;o--,u+=i[s++]<<l,l+=8}u>>>=v,l-=v,r.back+=v}if(u>>>=_,l-=_,r.back+=_,r.length=b,0===g){r.mode=26;break}if(32&g){r.back=-1,r.mode=12;break}if(64&g){t.msg=\"invalid literal/length code\",r.mode=30;break}r.extra=15&g,r.mode=22;case 22:if(r.extra){for(z=r.extra;l<z;){if(0===o)break t;o--,u+=i[s++]<<l,l+=8}r.length+=u&(1<<r.extra)-1,u>>>=r.extra,l-=r.extra,r.back+=r.extra}r.was=r.length,r.mode=23;case 23:for(;g=(C=r.distcode[u&(1<<r.distbits)-1])>>>16&255,b=65535&C,!((_=C>>>24)<=l);){if(0===o)break t;o--,u+=i[s++]<<l,l+=8}if(0==(240&g)){for(v=_,y=g,w=b;g=(C=r.distcode[w+((u&(1<<v+y)-1)>>v)])>>>16&255,b=65535&C,!(v+(_=C>>>24)<=l);){if(0===o)break t;o--,u+=i[s++]<<l,l+=8}u>>>=v,l-=v,r.back+=v}if(u>>>=_,l-=_,r.back+=_,64&g){t.msg=\"invalid distance code\",r.mode=30;break}r.offset=b,r.extra=15&g,r.mode=24;case 24:if(r.extra){for(z=r.extra;l<z;){if(0===o)break t;o--,u+=i[s++]<<l,l+=8}r.offset+=u&(1<<r.extra)-1,u>>>=r.extra,l-=r.extra,r.back+=r.extra}if(r.offset>r.dmax){t.msg=\"invalid distance too far back\",r.mode=30;break}r.mode=25;case 25:if(0===h)break t;if(c=d-h,r.offset>c){if((c=r.offset-c)>r.whave&&r.sane){t.msg=\"invalid distance too far back\",r.mode=30;break}p=c>r.wnext?(c-=r.wnext,r.wsize-c):r.wnext-c,c>r.length&&(c=r.length),m=r.window}else m=n,p=a-r.offset,c=r.length;for(h<c&&(c=h),h-=c,r.length-=c;n[a++]=m[p++],--c;);0===r.length&&(r.mode=21);break;case 26:if(0===h)break t;n[a++]=r.length,h--,r.mode=21;break;case 27:if(r.wrap){for(;l<32;){if(0===o)break t;o--,u|=i[s++]<<l,l+=8}if(d-=h,t.total_out+=d,r.total+=d,d&&(t.adler=r.check=r.flags?B(r.check,n,d,a-d):O(r.check,n,d,a-d)),d=h,(r.flags?u:L(u))!==r.check){t.msg=\"incorrect data check\",r.mode=30;break}l=u=0}r.mode=28;case 28:if(r.wrap&&r.flags){for(;l<32;){if(0===o)break t;o--,u+=i[s++]<<l,l+=8}if(u!==(4294967295&r.total)){t.msg=\"incorrect length check\",r.mode=30;break}l=u=0}r.mode=29;case 29:x=1;break t;case 30:x=-3;break t;case 31:return-4;case 32:default:return U}return t.next_out=a,t.avail_out=h,t.next_in=s,t.avail_in=o,r.hold=u,r.bits=l,(r.wsize||d!==t.avail_out&&r.mode<30&&(r.mode<27||4!==e))&&Z(t,t.output,t.next_out,d-t.avail_out)?(r.mode=31,-4):(f-=t.avail_in,d-=t.avail_out,t.total_in+=f,t.total_out+=d,r.total+=d,r.wrap&&d&&(t.adler=r.check=r.flags?B(r.check,n,d,t.next_out-d):O(r.check,n,d,t.next_out-d)),t.data_type=r.bits+(r.last?64:0)+(12===r.mode?128:0)+(20===r.mode||15===r.mode?256:0),(0==f&&0===d||4===e)&&x===N&&(x=-5),x)},r.inflateEnd=function(t){if(!t||!t.state)return U;var e=t.state;return e.window&&(e.window=null),t.state=null,N},r.inflateGetHeader=function(t,e){var r;return t&&t.state?0==(2&(r=t.state).wrap)?U:((r.head=e).done=!1,N):U},r.inflateSetDictionary=function(t,e){var r,i=e.length;return t&&t.state?0!==(r=t.state).wrap&&11!==r.mode?U:11===r.mode&&O(1,e,i,0)!==r.check?-3:Z(t,e,i,i)?(r.mode=31,-4):(r.havedict=1,N):U},r.inflateInfo=\"pako inflate (from Nodeca project)\"},{\"../utils/common\":41,\"./adler32\":43,\"./crc32\":45,\"./inffast\":48,\"./inftrees\":50}],50:[function(t,e,r){\"use strict\";var D=t(\"../utils/common\"),F=[3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258,0,0],N=[16,16,16,16,16,16,16,16,17,17,17,17,18,18,18,18,19,19,19,19,20,20,20,20,21,21,21,21,16,72,78],U=[1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577,0,0],P=[16,16,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,64,64];e.exports=function(t,e,r,i,n,s,a,o){var h,u,l,f,d,c,p,m,_,g=o.bits,b=0,v=0,y=0,w=0,k=0,x=0,S=0,z=0,C=0,E=0,A=null,I=0,O=new D.Buf16(16),B=new D.Buf16(16),R=null,T=0;for(b=0;b<=15;b++)O[b]=0;for(v=0;v<i;v++)O[e[r+v]]++;for(k=g,w=15;1<=w&&0===O[w];w--);if(w<k&&(k=w),0===w)return n[s++]=20971520,n[s++]=20971520,o.bits=1,0;for(y=1;y<w&&0===O[y];y++);for(k<y&&(k=y),b=z=1;b<=15;b++)if(z<<=1,(z-=O[b])<0)return-1;if(0<z&&(0===t||1!==w))return-1;for(B[1]=0,b=1;b<15;b++)B[b+1]=B[b]+O[b];for(v=0;v<i;v++)0!==e[r+v]&&(a[B[e[r+v]]++]=v);if(c=0===t?(A=R=a,19):1===t?(A=F,I-=257,R=N,T-=257,256):(A=U,R=P,-1),b=y,d=s,S=v=E=0,l=-1,f=(C=1<<(x=k))-1,1===t&&852<C||2===t&&592<C)return 1;for(;;){for(p=b-S,_=a[v]<c?(m=0,a[v]):a[v]>c?(m=R[T+a[v]],A[I+a[v]]):(m=96,0),h=1<<b-S,y=u=1<<x;n[d+(E>>S)+(u-=h)]=p<<24|m<<16|_|0,0!==u;);for(h=1<<b-1;E&h;)h>>=1;if(0!==h?(E&=h-1,E+=h):E=0,v++,0==--O[b]){if(b===w)break;b=e[r+a[v]]}if(k<b&&(E&f)!==l){for(0===S&&(S=k),d+=y,z=1<<(x=b-S);x+S<w&&!((z-=O[x+S])<=0);)x++,z<<=1;if(C+=1<<x,1===t&&852<C||2===t&&592<C)return 1;n[l=E&f]=k<<24|x<<16|d-s|0}}return 0!==E&&(n[d+E]=b-S<<24|64<<16|0),o.bits=k,0}},{\"../utils/common\":41}],51:[function(t,e,r){\"use strict\";e.exports={2:\"need dictionary\",1:\"stream end\",0:\"\",\"-1\":\"file error\",\"-2\":\"stream error\",\"-3\":\"data error\",\"-4\":\"insufficient memory\",\"-5\":\"buffer error\",\"-6\":\"incompatible version\"}},{}],52:[function(t,e,r){\"use strict\";var n=t(\"../utils/common\"),o=0,h=1;function i(t){for(var e=t.length;0<=--e;)t[e]=0}var s=0,a=29,u=256,l=u+1+a,f=30,d=19,_=2*l+1,g=15,c=16,p=7,m=256,b=16,v=17,y=18,w=[0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0],k=[0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13],x=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7],S=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15],z=new Array(2*(l+2));i(z);var C=new Array(2*f);i(C);var E=new Array(512);i(E);var A=new Array(256);i(A);var I=new Array(a);i(I);var O,B,R,T=new Array(f);function D(t,e,r,i,n){this.static_tree=t,this.extra_bits=e,this.extra_base=r,this.elems=i,this.max_length=n,this.has_stree=t&&t.length}function F(t,e){this.dyn_tree=t,this.max_code=0,this.stat_desc=e}function N(t){return t<256?E[t]:E[256+(t>>>7)]}function U(t,e){t.pending_buf[t.pending++]=255&e,t.pending_buf[t.pending++]=e>>>8&255}function P(t,e,r){t.bi_valid>c-r?(t.bi_buf|=e<<t.bi_valid&65535,U(t,t.bi_buf),t.bi_buf=e>>c-t.bi_valid,t.bi_valid+=r-c):(t.bi_buf|=e<<t.bi_valid&65535,t.bi_valid+=r)}function L(t,e,r){P(t,r[2*e],r[2*e+1])}function j(t,e){for(var r=0;r|=1&t,t>>>=1,r<<=1,0<--e;);return r>>>1}function Z(t,e,r){var i,n,s=new Array(g+1),a=0;for(i=1;i<=g;i++)s[i]=a=a+r[i-1]<<1;for(n=0;n<=e;n++){var o=t[2*n+1];0!==o&&(t[2*n]=j(s[o]++,o))}}function W(t){var e;for(e=0;e<l;e++)t.dyn_ltree[2*e]=0;for(e=0;e<f;e++)t.dyn_dtree[2*e]=0;for(e=0;e<d;e++)t.bl_tree[2*e]=0;t.dyn_ltree[2*m]=1,t.opt_len=t.static_len=0,t.last_lit=t.matches=0}function M(t){8<t.bi_valid?U(t,t.bi_buf):0<t.bi_valid&&(t.pending_buf[t.pending++]=t.bi_buf),t.bi_buf=0,t.bi_valid=0}function H(t,e,r,i){var n=2*e,s=2*r;return t[n]<t[s]||t[n]===t[s]&&i[e]<=i[r]}function G(t,e,r){for(var i=t.heap[r],n=r<<1;n<=t.heap_len&&(n<t.heap_len&&H(e,t.heap[n+1],t.heap[n],t.depth)&&n++,!H(e,i,t.heap[n],t.depth));)t.heap[r]=t.heap[n],r=n,n<<=1;t.heap[r]=i}function K(t,e,r){var i,n,s,a,o=0;if(0!==t.last_lit)for(;i=t.pending_buf[t.d_buf+2*o]<<8|t.pending_buf[t.d_buf+2*o+1],n=t.pending_buf[t.l_buf+o],o++,0===i?L(t,n,e):(L(t,(s=A[n])+u+1,e),0!==(a=w[s])&&P(t,n-=I[s],a),L(t,s=N(--i),r),0!==(a=k[s])&&P(t,i-=T[s],a)),o<t.last_lit;);L(t,m,e)}function Y(t,e){var r,i,n,s=e.dyn_tree,a=e.stat_desc.static_tree,o=e.stat_desc.has_stree,h=e.stat_desc.elems,u=-1;for(t.heap_len=0,t.heap_max=_,r=0;r<h;r++)0!==s[2*r]?(t.heap[++t.heap_len]=u=r,t.depth[r]=0):s[2*r+1]=0;for(;t.heap_len<2;)s[2*(n=t.heap[++t.heap_len]=u<2?++u:0)]=1,t.depth[n]=0,t.opt_len--,o&&(t.static_len-=a[2*n+1]);for(e.max_code=u,r=t.heap_len>>1;1<=r;r--)G(t,s,r);for(n=h;r=t.heap[1],t.heap[1]=t.heap[t.heap_len--],G(t,s,1),i=t.heap[1],t.heap[--t.heap_max]=r,t.heap[--t.heap_max]=i,s[2*n]=s[2*r]+s[2*i],t.depth[n]=(t.depth[r]>=t.depth[i]?t.depth[r]:t.depth[i])+1,s[2*r+1]=s[2*i+1]=n,t.heap[1]=n++,G(t,s,1),2<=t.heap_len;);t.heap[--t.heap_max]=t.heap[1],function(t,e){var r,i,n,s,a,o,h=e.dyn_tree,u=e.max_code,l=e.stat_desc.static_tree,f=e.stat_desc.has_stree,d=e.stat_desc.extra_bits,c=e.stat_desc.extra_base,p=e.stat_desc.max_length,m=0;for(s=0;s<=g;s++)t.bl_count[s]=0;for(h[2*t.heap[t.heap_max]+1]=0,r=t.heap_max+1;r<_;r++)p<(s=h[2*h[2*(i=t.heap[r])+1]+1]+1)&&(s=p,m++),h[2*i+1]=s,u<i||(t.bl_count[s]++,a=0,c<=i&&(a=d[i-c]),o=h[2*i],t.opt_len+=o*(s+a),f&&(t.static_len+=o*(l[2*i+1]+a)));if(0!==m){do{for(s=p-1;0===t.bl_count[s];)s--;t.bl_count[s]--,t.bl_count[s+1]+=2,t.bl_count[p]--,m-=2}while(0<m);for(s=p;0!==s;s--)for(i=t.bl_count[s];0!==i;)u<(n=t.heap[--r])||(h[2*n+1]!==s&&(t.opt_len+=(s-h[2*n+1])*h[2*n],h[2*n+1]=s),i--)}}(t,e),Z(s,u,t.bl_count)}function X(t,e,r){var i,n,s=-1,a=e[1],o=0,h=7,u=4;for(0===a&&(h=138,u=3),e[2*(r+1)+1]=65535,i=0;i<=r;i++)n=a,a=e[2*(i+1)+1],++o<h&&n===a||(o<u?t.bl_tree[2*n]+=o:0!==n?(n!==s&&t.bl_tree[2*n]++,t.bl_tree[2*b]++):o<=10?t.bl_tree[2*v]++:t.bl_tree[2*y]++,s=n,u=(o=0)===a?(h=138,3):n===a?(h=6,3):(h=7,4))}function V(t,e,r){var i,n,s=-1,a=e[1],o=0,h=7,u=4;for(0===a&&(h=138,u=3),i=0;i<=r;i++)if(n=a,a=e[2*(i+1)+1],!(++o<h&&n===a)){if(o<u)for(;L(t,n,t.bl_tree),0!=--o;);else 0!==n?(n!==s&&(L(t,n,t.bl_tree),o--),L(t,b,t.bl_tree),P(t,o-3,2)):o<=10?(L(t,v,t.bl_tree),P(t,o-3,3)):(L(t,y,t.bl_tree),P(t,o-11,7));s=n,u=(o=0)===a?(h=138,3):n===a?(h=6,3):(h=7,4)}}i(T);var q=!1;function J(t,e,r,i){P(t,(s<<1)+(i?1:0),3),function(t,e,r,i){M(t),i&&(U(t,r),U(t,~r)),n.arraySet(t.pending_buf,t.window,e,r,t.pending),t.pending+=r}(t,e,r,!0)}r._tr_init=function(t){q||(function(){var t,e,r,i,n,s=new Array(g+1);for(i=r=0;i<a-1;i++)for(I[i]=r,t=0;t<1<<w[i];t++)A[r++]=i;for(A[r-1]=i,i=n=0;i<16;i++)for(T[i]=n,t=0;t<1<<k[i];t++)E[n++]=i;for(n>>=7;i<f;i++)for(T[i]=n<<7,t=0;t<1<<k[i]-7;t++)E[256+n++]=i;for(e=0;e<=g;e++)s[e]=0;for(t=0;t<=143;)z[2*t+1]=8,t++,s[8]++;for(;t<=255;)z[2*t+1]=9,t++,s[9]++;for(;t<=279;)z[2*t+1]=7,t++,s[7]++;for(;t<=287;)z[2*t+1]=8,t++,s[8]++;for(Z(z,l+1,s),t=0;t<f;t++)C[2*t+1]=5,C[2*t]=j(t,5);O=new D(z,w,u+1,l,g),B=new D(C,k,0,f,g),R=new D(new Array(0),x,0,d,p)}(),q=!0),t.l_desc=new F(t.dyn_ltree,O),t.d_desc=new F(t.dyn_dtree,B),t.bl_desc=new F(t.bl_tree,R),t.bi_buf=0,t.bi_valid=0,W(t)},r._tr_stored_block=J,r._tr_flush_block=function(t,e,r,i){var n,s,a=0;0<t.level?(2===t.strm.data_type&&(t.strm.data_type=function(t){var e,r=4093624447;for(e=0;e<=31;e++,r>>>=1)if(1&r&&0!==t.dyn_ltree[2*e])return o;if(0!==t.dyn_ltree[18]||0!==t.dyn_ltree[20]||0!==t.dyn_ltree[26])return h;for(e=32;e<u;e++)if(0!==t.dyn_ltree[2*e])return h;return o}(t)),Y(t,t.l_desc),Y(t,t.d_desc),a=function(t){var e;for(X(t,t.dyn_ltree,t.l_desc.max_code),X(t,t.dyn_dtree,t.d_desc.max_code),Y(t,t.bl_desc),e=d-1;3<=e&&0===t.bl_tree[2*S[e]+1];e--);return t.opt_len+=3*(e+1)+5+5+4,e}(t),n=t.opt_len+3+7>>>3,(s=t.static_len+3+7>>>3)<=n&&(n=s)):n=s=r+5,r+4<=n&&-1!==e?J(t,e,r,i):4===t.strategy||s===n?(P(t,2+(i?1:0),3),K(t,z,C)):(P(t,4+(i?1:0),3),function(t,e,r,i){var n;for(P(t,e-257,5),P(t,r-1,5),P(t,i-4,4),n=0;n<i;n++)P(t,t.bl_tree[2*S[n]+1],3);V(t,t.dyn_ltree,e-1),V(t,t.dyn_dtree,r-1)}(t,t.l_desc.max_code+1,t.d_desc.max_code+1,a+1),K(t,t.dyn_ltree,t.dyn_dtree)),W(t),i&&M(t)},r._tr_tally=function(t,e,r){return t.pending_buf[t.d_buf+2*t.last_lit]=e>>>8&255,t.pending_buf[t.d_buf+2*t.last_lit+1]=255&e,t.pending_buf[t.l_buf+t.last_lit]=255&r,t.last_lit++,0===e?t.dyn_ltree[2*r]++:(t.matches++,e--,t.dyn_ltree[2*(A[r]+u+1)]++,t.dyn_dtree[2*N(e)]++),t.last_lit===t.lit_bufsize-1},r._tr_align=function(t){P(t,2,3),L(t,m,z),function(t){16===t.bi_valid?(U(t,t.bi_buf),t.bi_buf=0,t.bi_valid=0):8<=t.bi_valid&&(t.pending_buf[t.pending++]=255&t.bi_buf,t.bi_buf>>=8,t.bi_valid-=8)}(t)}},{\"../utils/common\":41}],53:[function(t,e,r){\"use strict\";e.exports=function(){this.input=null,this.next_in=0,this.avail_in=0,this.total_in=0,this.output=null,this.next_out=0,this.avail_out=0,this.total_out=0,this.msg=\"\",this.state=null,this.data_type=2,this.adler=0}},{}],54:[function(t,e,r){\"use strict\";e.exports=\"function\"==typeof setImmediate?setImmediate:function(){var t=[].slice.apply(arguments);t.splice(1,0,0),setTimeout.apply(null,t)}},{}]},{},[10])(10)});","/*\n* loglevel - https://github.com/pimterry/loglevel\n*\n* Copyright (c) 2013 Tim Perry\n* Licensed under the MIT license.\n*/\n(function (root, definition) {\n    \"use strict\";\n    if (typeof define === 'function' && define.amd) {\n        define(definition);\n    } else if (typeof module === 'object' && module.exports) {\n        module.exports = definition();\n    } else {\n        root.log = definition();\n    }\n}(this, function () {\n    \"use strict\";\n\n    // Slightly dubious tricks to cut down minimized file size\n    var noop = function() {};\n    var undefinedType = \"undefined\";\n    var isIE = (typeof window !== undefinedType) && (typeof window.navigator !== undefinedType) && (\n        /Trident\\/|MSIE /.test(window.navigator.userAgent)\n    );\n\n    var logMethods = [\n        \"trace\",\n        \"debug\",\n        \"info\",\n        \"warn\",\n        \"error\"\n    ];\n\n    // Cross-browser bind equivalent that works at least back to IE6\n    function bindMethod(obj, methodName) {\n        var method = obj[methodName];\n        if (typeof method.bind === 'function') {\n            return method.bind(obj);\n        } else {\n            try {\n                return Function.prototype.bind.call(method, obj);\n            } catch (e) {\n                // Missing bind shim or IE8 + Modernizr, fallback to wrapping\n                return function() {\n                    return Function.prototype.apply.apply(method, [obj, arguments]);\n                };\n            }\n        }\n    }\n\n    // Trace() doesn't print the message in IE, so for that case we need to wrap it\n    function traceForIE() {\n        if (console.log) {\n            if (console.log.apply) {\n                console.log.apply(console, arguments);\n            } else {\n                // In old IE, native console methods themselves don't have apply().\n                Function.prototype.apply.apply(console.log, [console, arguments]);\n            }\n        }\n        if (console.trace) console.trace();\n    }\n\n    // Build the best logging method possible for this env\n    // Wherever possible we want to bind, not wrap, to preserve stack traces\n    function realMethod(methodName) {\n        if (methodName === 'debug') {\n            methodName = 'log';\n        }\n\n        if (typeof console === undefinedType) {\n            return false; // No method possible, for now - fixed later by enableLoggingWhenConsoleArrives\n        } else if (methodName === 'trace' && isIE) {\n            return traceForIE;\n        } else if (console[methodName] !== undefined) {\n            return bindMethod(console, methodName);\n        } else if (console.log !== undefined) {\n            return bindMethod(console, 'log');\n        } else {\n            return noop;\n        }\n    }\n\n    // These private functions always need `this` to be set properly\n\n    function replaceLoggingMethods(level, loggerName) {\n        /*jshint validthis:true */\n        for (var i = 0; i < logMethods.length; i++) {\n            var methodName = logMethods[i];\n            this[methodName] = (i < level) ?\n                noop :\n                this.methodFactory(methodName, level, loggerName);\n        }\n\n        // Define log.log as an alias for log.debug\n        this.log = this.debug;\n    }\n\n    // In old IE versions, the console isn't present until you first open it.\n    // We build realMethod() replacements here that regenerate logging methods\n    function enableLoggingWhenConsoleArrives(methodName, level, loggerName) {\n        return function () {\n            if (typeof console !== undefinedType) {\n                replaceLoggingMethods.call(this, level, loggerName);\n                this[methodName].apply(this, arguments);\n            }\n        };\n    }\n\n    // By default, we use closely bound real methods wherever possible, and\n    // otherwise we wait for a console to appear, and then try again.\n    function defaultMethodFactory(methodName, level, loggerName) {\n        /*jshint validthis:true */\n        return realMethod(methodName) ||\n               enableLoggingWhenConsoleArrives.apply(this, arguments);\n    }\n\n    function Logger(name, defaultLevel, factory) {\n      var self = this;\n      var currentLevel;\n      defaultLevel = defaultLevel == null ? \"WARN\" : defaultLevel;\n\n      var storageKey = \"loglevel\";\n      if (typeof name === \"string\") {\n        storageKey += \":\" + name;\n      } else if (typeof name === \"symbol\") {\n        storageKey = undefined;\n      }\n\n      function persistLevelIfPossible(levelNum) {\n          var levelName = (logMethods[levelNum] || 'silent').toUpperCase();\n\n          if (typeof window === undefinedType || !storageKey) return;\n\n          // Use localStorage if available\n          try {\n              window.localStorage[storageKey] = levelName;\n              return;\n          } catch (ignore) {}\n\n          // Use session cookie as fallback\n          try {\n              window.document.cookie =\n                encodeURIComponent(storageKey) + \"=\" + levelName + \";\";\n          } catch (ignore) {}\n      }\n\n      function getPersistedLevel() {\n          var storedLevel;\n\n          if (typeof window === undefinedType || !storageKey) return;\n\n          try {\n              storedLevel = window.localStorage[storageKey];\n          } catch (ignore) {}\n\n          // Fallback to cookies if local storage gives us nothing\n          if (typeof storedLevel === undefinedType) {\n              try {\n                  var cookie = window.document.cookie;\n                  var location = cookie.indexOf(\n                      encodeURIComponent(storageKey) + \"=\");\n                  if (location !== -1) {\n                      storedLevel = /^([^;]+)/.exec(cookie.slice(location))[1];\n                  }\n              } catch (ignore) {}\n          }\n\n          // If the stored level is not valid, treat it as if nothing was stored.\n          if (self.levels[storedLevel] === undefined) {\n              storedLevel = undefined;\n          }\n\n          return storedLevel;\n      }\n\n      function clearPersistedLevel() {\n          if (typeof window === undefinedType || !storageKey) return;\n\n          // Use localStorage if available\n          try {\n              window.localStorage.removeItem(storageKey);\n              return;\n          } catch (ignore) {}\n\n          // Use session cookie as fallback\n          try {\n              window.document.cookie =\n                encodeURIComponent(storageKey) + \"=; expires=Thu, 01 Jan 1970 00:00:00 UTC\";\n          } catch (ignore) {}\n      }\n\n      /*\n       *\n       * Public logger API - see https://github.com/pimterry/loglevel for details\n       *\n       */\n\n      self.name = name;\n\n      self.levels = { \"TRACE\": 0, \"DEBUG\": 1, \"INFO\": 2, \"WARN\": 3,\n          \"ERROR\": 4, \"SILENT\": 5};\n\n      self.methodFactory = factory || defaultMethodFactory;\n\n      self.getLevel = function () {\n          return currentLevel;\n      };\n\n      self.setLevel = function (level, persist) {\n          if (typeof level === \"string\" && self.levels[level.toUpperCase()] !== undefined) {\n              level = self.levels[level.toUpperCase()];\n          }\n          if (typeof level === \"number\" && level >= 0 && level <= self.levels.SILENT) {\n              currentLevel = level;\n              if (persist !== false) {  // defaults to true\n                  persistLevelIfPossible(level);\n              }\n              replaceLoggingMethods.call(self, level, name);\n              if (typeof console === undefinedType && level < self.levels.SILENT) {\n                  return \"No console available for logging\";\n              }\n          } else {\n              throw \"log.setLevel() called with invalid level: \" + level;\n          }\n      };\n\n      self.setDefaultLevel = function (level) {\n          defaultLevel = level;\n          if (!getPersistedLevel()) {\n              self.setLevel(level, false);\n          }\n      };\n\n      self.resetLevel = function () {\n          self.setLevel(defaultLevel, false);\n          clearPersistedLevel();\n      };\n\n      self.enableAll = function(persist) {\n          self.setLevel(self.levels.TRACE, persist);\n      };\n\n      self.disableAll = function(persist) {\n          self.setLevel(self.levels.SILENT, persist);\n      };\n\n      // Initialize with the right level\n      var initialLevel = getPersistedLevel();\n      if (initialLevel == null) {\n          initialLevel = defaultLevel;\n      }\n      self.setLevel(initialLevel, false);\n    }\n\n    /*\n     *\n     * Top-level API\n     *\n     */\n\n    var defaultLogger = new Logger();\n\n    var _loggersByName = {};\n    defaultLogger.getLogger = function getLogger(name) {\n        if ((typeof name !== \"symbol\" && typeof name !== \"string\") || name === \"\") {\n          throw new TypeError(\"You must supply a name when creating a logger.\");\n        }\n\n        var logger = _loggersByName[name];\n        if (!logger) {\n          logger = _loggersByName[name] = new Logger(\n            name, defaultLogger.getLevel(), defaultLogger.methodFactory);\n        }\n        return logger;\n    };\n\n    // Grab the current global log variable in case of overwrite\n    var _log = (typeof window !== undefinedType) ? window.log : undefined;\n    defaultLogger.noConflict = function() {\n        if (typeof window !== undefinedType &&\n               window.log === defaultLogger) {\n            window.log = _log;\n        }\n\n        return defaultLogger;\n    };\n\n    defaultLogger.getLoggers = function getLoggers() {\n        return _loggersByName;\n    };\n\n    // ES6 default export, for compatibility\n    defaultLogger['default'] = defaultLogger;\n\n    return defaultLogger;\n}));\n","// TODO: Check the operators' names\n// TODO: This class should probably be immutable?\n\n/**\n * A class representing mathematical fractions, which have a numerator and a denominator.\n */\nexport class Fraction {\n  private static maximumAllowedNumber: number = 46340; // sqrt(int.Max) --> signed int with 4 bytes (2^31)\n  private numerator: number = 0;\n  private denominator: number = 1;\n  private wholeValue: number = 0;\n  private realValue: number;\n\n  /**\n   * Returns the maximum of two fractions (does not clone)\n   * @param f1\n   * @param f2\n   * @returns {Fraction}\n   */\n  public static max(f1: Fraction, f2: Fraction): Fraction {\n    if (f1.RealValue > f2.RealValue) {\n      return f1;\n    } else {\n      return f2;\n    }\n  }\n\n  public static Equal(f1: Fraction, f2: Fraction): boolean {\n    return f1.wholeValue === f2.wholeValue && f1.Denominator === f2.Denominator && f1.Numerator === f2.Numerator;\n  }\n\n  /**\n   * The same as Fraction.clone\n   * @param fraction\n   * @returns {Fraction}\n   */\n  public static createFromFraction(fraction: Fraction): Fraction {\n    return new Fraction(fraction.numerator, fraction.denominator, fraction.wholeValue, false);\n  }\n\n  public static plus(f1: Fraction, f2: Fraction): Fraction {\n    const sum: Fraction = f1.clone();\n    sum.Add(f2);\n    return sum;\n  }\n\n  public static minus(f1: Fraction, f2: Fraction): Fraction {\n    const sum: Fraction = f1.clone();\n    sum.Sub(f2);\n    return sum;\n  }\n\n    public static multiply (f1: Fraction, f2: Fraction): Fraction {\n        return new Fraction ( (f1.wholeValue * f1.denominator + f1.numerator) * (f2.wholeValue * f2.denominator + f2.numerator),\n                              f1.denominator * f2.denominator);\n    }\n\n  private static greatestCommonDenominator(a: number, b: number): number {\n    if (a === 0) {\n      return b;\n    }\n\n    if (b === 1) {\n      return 1;\n    }\n\n    while (Math.abs(b) > 1e-8) { // essentially b > 0, accounts for floating point inaccuracies (0.000...01)\n      if (a > b) {\n        a -= b;\n      } else {\n        b -= a;\n      }\n    }\n\n    return Math.round(a); // prevent returning 4.000001 or something, though it doesn't happen for our samples\n  }\n\n  /**\n   *\n   * @param numerator\n   * @param denominator\n   * @param wholeValue - the integer number, needed for values greater than 1\n   * @param simplify - If simplify is true, then the fraction is simplified\n   * to make both the numerator and denominator coprime, and less than maximumAllowedNumber.\n   */\n  constructor(numerator: number = 0, denominator: number = 1, wholeValue: number = 0, simplify: boolean = true) {\n    this.numerator = numerator;\n    this.denominator = denominator;\n    this.wholeValue = wholeValue;\n\n    if (simplify) {\n      this.simplify();\n    }\n    this.setRealValue();\n  }\n\n  public toString(): string {\n    let result: string = this.numerator + \"/\" + this.denominator;\n    if (this.wholeValue !== 0) {\n      result = this.wholeValue + \" \" + result;\n    }\n\n    return result;\n  }\n\n  public clone(): Fraction {\n    return new Fraction(this.numerator, this.denominator, this.wholeValue, false);\n  }\n\n  public get Numerator(): number {\n    return this.numerator;\n  }\n\n  public set Numerator(value: number) {\n    if (this.numerator !== value) {\n      this.numerator = value;\n      this.simplify();\n      this.setRealValue();\n    }\n  }\n\n  public get Denominator(): number {\n    return this.denominator;\n  }\n\n  public set Denominator(value: number) {\n    if (this.denominator !== value) {\n      this.denominator = value;\n      // don't simplify in case of a GraceNote (need it in order to set the right symbol)\n      if (this.numerator !== 0) {\n        this.simplify();\n      }\n      this.setRealValue();\n    }\n  }\n\n  public get WholeValue(): number {\n    return this.wholeValue;\n  }\n\n  public set WholeValue(value: number) {\n    if (this.wholeValue !== value) {\n      this.wholeValue = value;\n      this.setRealValue();\n    }\n  }\n\n  /**\n   * Returns the unified numerator where the whole value will be expanded\n   * with the denominator and added to the existing numerator.\n   */\n  public GetExpandedNumerator(): number {\n    return this.wholeValue * this.denominator + this.numerator;\n  }\n\n  public calculateNumberOfNeededDots(): number {\n    let num: number = 1;\n    let product: number = 2;\n    const expandedNumerator: number = this.GetExpandedNumerator();\n    while (product < expandedNumerator) {\n      num++;\n      product = Math.pow(2, num);\n    }\n    return Math.min(3, num - 1);\n  }\n\n  public IsNegative(): boolean {\n    return this.realValue < 0;\n  }\n\n  public get RealValue(): number {\n    return this.realValue;\n  }\n\n  public expand(expansionValue: number): void {\n    this.numerator *= expansionValue;\n    this.denominator *= expansionValue;\n    if (this.wholeValue !== 0) {\n      this.numerator += this.wholeValue * this.denominator;\n      this.wholeValue = 0;\n    }\n  }\n\n  // public multiplyDenominatorWithFactor(factor: number): void {\n  //   this.denominator *= factor;\n  //   this.setRealValue();\n  // }\n\n  /**\n   * Adds a Fraction to this Fraction.\n   * Attention: This changes the already existing Fraction, which might be referenced elsewhere!\n   * Use Fraction.plus() for creating a new Fraction object being the sum of two Fractions.\n   * @param fraction the Fraction to add.\n   */\n  public Add(fraction: Fraction): Fraction {\n    // normally should check if denominator or fraction.denominator is 0 but in our case\n    // a zero denominator doesn't make sense\n    this.numerator = (this.wholeValue * this.denominator + this.numerator) * fraction.denominator +\n      (fraction.wholeValue * fraction.denominator + fraction.numerator) * this.denominator;\n    this.denominator = this.denominator * fraction.denominator;\n    this.wholeValue = 0;\n    this.simplify();\n    this.setRealValue();\n    return this;\n  }\n\n  /**\n   * Subtracts a Fraction from this Fraction.\n   * Attention: This changes the already existing Fraction, which might be referenced elsewhere!\n   * Use Fraction.minus() for creating a new Fraction object being the difference of two Fractions.\n   * @param fraction the Fraction to subtract.\n   */\n  public Sub(fraction: Fraction): Fraction {\n    // normally should check if denominator or fraction.denominator is 0 but in our case\n    // a zero denominator doesn't make sense\n    this.numerator = (this.wholeValue * this.denominator + this.numerator) * fraction.denominator -\n      (fraction.wholeValue * fraction.denominator + fraction.numerator) * this.denominator;\n    this.denominator = this.denominator * fraction.denominator;\n    this.wholeValue = 0;\n    this.simplify();\n    this.setRealValue();\n    return this;\n  }\n  /**\n   * Brute Force quanization by searching incremental with the numerator until the denominator is\n   * smaller/equal than the desired one.\n   * @param maxAllowedDenominator\n   */\n  public Quantize(maxAllowedDenominator: number): Fraction {\n    if (this.denominator <= maxAllowedDenominator) {\n      return this;\n    }\n\n    const upTestFraction: Fraction = new Fraction(this.numerator + 1, this.denominator, this.wholeValue);\n\n    while (upTestFraction.Denominator > maxAllowedDenominator) {\n      upTestFraction.Numerator++;\n    }\n\n    if (this.numerator > this.denominator) {\n      const downTestFraction: Fraction = new Fraction(this.numerator - 1, this.denominator, this.wholeValue);\n\n      while (downTestFraction.Denominator > maxAllowedDenominator) {\n        downTestFraction.Numerator--;\n      }\n\n      if (downTestFraction.Denominator < upTestFraction.Denominator) {\n        return downTestFraction;\n      }\n    }\n    return upTestFraction;\n  }\n\n  public Equals(obj: Fraction): boolean {\n    return this.realValue === obj?.realValue;\n  }\n\n  public CompareTo(obj: Fraction): number {\n    const diff: number = this.realValue - obj.realValue;\n    // Return the sign of diff\n    return diff ? diff < 0 ? -1 : 1 : 0;\n  }\n\n  public lt(frac: Fraction): boolean {\n    return this.realValue < frac.realValue;\n  }\n\n  public lte(frac: Fraction): boolean {\n    return this.realValue <= frac.realValue;\n  }\n\n  public gt(frac: Fraction): boolean {\n    return !this.lte(frac);\n  }\n\n  public gte(frac: Fraction): boolean {\n    return !this.lt(frac);\n  }\n\n  //public Equals(f: Fraction): boolean {\n  //    if (ReferenceEquals(this, f))\n  //        return true;\n  //    if (ReferenceEquals(f, undefined))\n  //        return false;\n  //    return this.numerator * f.denominator === f.numerator * this.denominator;\n  //}\n\n  private setRealValue(): void {\n    this.realValue = this.wholeValue + this.numerator / this.denominator;\n  }\n\n  private simplify(): void {\n    // don't simplify in case of a GraceNote (need it in order to set the right symbol)\n    if (this.numerator === 0) {\n      this.denominator = 1;\n      return;\n    }\n\n    // normally should check if denominator or fraction.denominator is 0 but in our case a zero denominator\n    // doesn't make sense. Could probably be optimized\n    const i: number = Fraction.greatestCommonDenominator(Math.abs(this.numerator), Math.abs(this.denominator));\n\n    this.numerator /= i;\n    this.denominator /= i;\n\n    const whole: number = Math.floor(this.numerator / this.denominator);\n    if (whole !== 0) {\n      this.wholeValue += whole;\n      this.numerator -= whole * this.denominator;\n      if (this.numerator === 0) {\n        this.denominator = 1;\n      }\n    }\n    if (this.denominator > Fraction.maximumAllowedNumber) {\n      const factor: number = this.denominator / Fraction.maximumAllowedNumber;\n      this.numerator = Math.round(this.numerator / factor);\n      this.denominator = Math.round(this.denominator / factor);\n    }\n    if (this.numerator > Fraction.maximumAllowedNumber) {\n      const factor: number = this.numerator / Fraction.maximumAllowedNumber;\n      this.numerator = Math.round(this.numerator / factor);\n      this.denominator = Math.round(this.denominator / factor);\n    }\n  }\n\n  public static FloatInaccuracyTolerance: number = 0.0001; // inaccuracy allowed when comparing Fraction.RealValues, because of floating point inaccuracy\n\n  public isOnBeat(timeSignature: Fraction): boolean { // use sourceMeasure.ActiveTimeSignature as timeSignature\n      const beatDistance: number = this.distanceFromBeat(timeSignature);\n      return Math.abs(beatDistance) < Fraction.FloatInaccuracyTolerance;\n  }\n\n  public distanceFromBeat(timeSignature: Fraction): number {\n      const beatStep: Fraction = new Fraction(1, timeSignature.Denominator);\n      const distanceFromBeat: number = this.RealValue % beatStep.RealValue; // take modulo the beat value, e.g. 1/8 in a 3/8 time signature\n      return distanceFromBeat;\n  }\n\n\n  //private static equals(f1: Fraction, f2: Fraction): boolean {\n  //    return f1.numerator * f2.denominator === f2.numerator * f1.denominator;\n  //}\n  //\n  //public static ApproximateFractionFromValue(value: number, epsilonForPrecision: number): Fraction {\n  //    let n: number = 1;\n  //    let d: number = 1;\n  //    let fraction: number = n / d;\n  //    while (Math.abs(fraction - value) > epsilonForPrecision) {\n  //        if (fraction < value) {\n  //            n++;\n  //        }\n  //        else {\n  //            d++;\n  //            n = Math.round(value * d);\n  //        }\n  //        fraction = n / d;\n  //    }\n  //    return new Fraction(n, d);\n  //}\n  //public static GetEarlierTimestamp(m1: Fraction, m2: Fraction): Fraction {\n  //    if (m1 < m2)\n  //        return m1;\n  //    else return m2;\n  //}\n\n  //public static getFraction(value: number, denominatorPrecision: number): Fraction {\n  //    let numerator: number = Math.round(value / (1.0 / denominatorPrecision));\n  //    return new Fraction(numerator, denominatorPrecision);\n  //}\n  //public static fractionMin(f1: Fraction, f2: Fraction): Fraction {\n  //    if (f1 < f2)\n  //        return f1;\n  //    else return f2;\n  //}\n\n  //public static GetMaxValue(): Fraction {\n  //    return new Fraction(Fraction.maximumAllowedNumber, 1);\n  //}\n  //public static get MaxAllowedNumerator(): number {\n  //    return Fraction.maximumAllowedNumber;\n  //}\n  //public static get MaxAllowedDenominator(): number {\n  //    return Fraction.maximumAllowedNumber;\n  //}\n  //public ToFloatingString(): string {\n  //    return this.RealValue.ToString();\n  //}\n  //public Compare(x: Fraction, y: Fraction): number {\n  //    if (x > y)\n  //        return 1;\n  //    if (x < y)\n  //        return -1;\n  //    return 0;\n  //}\n\n  //#region operators\n  //\n  //    // operator overloads must always come in pairs\n  //    // operator overload +\n  //    public static Fraction operator + (Fraction f1, Fraction f2)\n  //{\n  //    Fraction sum = new Fraction(f1);\n  //    sum.Add(f2);\n  //    return sum;\n  //}\n  //\n  //// operator overload -\n  //public static Fraction operator - (Fraction f1, Fraction f2)\n  //{\n  //    Fraction diff = new Fraction(f1);\n  //    diff.Sub(f2);\n  //    return diff;\n  //}\n  //\n  //// operator overloads must always come in pairs\n  //// operator overload >\n  //public static bool operator > (Fraction f1, Fraction f2)\n  //{\n  //    //return (long) f1.Numerator*f2._denominator > (long) f2._numerator*f1._denominator;\n  //    return f1.RealValue > f2.RealValue;\n  //}\n  //\n  //// operator overload <\n  //public static bool operator < (Fraction f1, Fraction f2)\n  //{\n  //    //return (long) f1._numerator*f2._denominator < (long) f2._numerator*f1._denominator;\n  //    return f1.RealValue < f2.RealValue;\n  //}\n  //\n  //// operator overload ==\n  //public static bool operator === (Fraction f1, Fraction f2)\n  //{\n  //    // code enhanced for performance\n  //    // System.Object.ReferenceEquals(f1, undefined) is better than if (f1)\n  //    // and comparisons between booleans are quick\n  //    bool f1IsNull = System.Object.ReferenceEquals(f1, undefined);\n  //    bool f2IsNull = System.Object.ReferenceEquals(f2, undefined);\n  //\n  //    // method returns true when both are undefined, false when only the first is undefined, otherwise the result of equals\n  //    if (f1IsNull !== f2IsNull)\n  //        return false;\n  //\n  //    if (f1IsNull /*&& f2IsNull*/)\n  //        return true;\n  //\n  //    return equals(f1, f2);\n  //}\n  //\n  //// operator overload !=\n  //public static bool operator !== (Fraction f1, Fraction f2)\n  //{\n  //    return (!(f1 === f2));\n  //}\n  //\n  //// operator overload >=\n  //public static bool operator >= (Fraction f1, Fraction f2)\n  //{\n  //    return (!(f1 < f2));\n  //}\n  //\n  //// operator overload <=\n  //public static bool operator <= (Fraction f1,Fraction f2)\n  //{\n  //    return (!(f1 > f2));\n  //}\n  //\n  //public static Fraction operator / (Fraction f, int i)\n  //{\n  //    return new Fraction(f._numerator, f._denominator *= i);\n  //}\n  //\n  //public static Fraction operator / (Fraction f1, Fraction f2)\n  //{\n  //    let res = new Fraction(f1.Numerator*f2.Denominator, f1.Denominator*f2.Numerator);\n  //    return res.Denominator === 0 ? new Fraction(0, 1) : res;\n  //}\n  //\n  //public static Fraction operator * (Fraction f1, Fraction f2)\n  //{\n  //    return new Fraction(f1.Numerator*f2.Numerator, f1.Denominator*f2.Denominator);\n  //}\n  //\n  //public static Fraction operator % (Fraction f1, Fraction f2)\n  //{\n  //    let a = f1/f2;\n  //    return new Fraction(a.Numerator%a.Denominator, a.Denominator)*f2;\n  //}\n  //\n  //#endregion operators\n}\n","import { PointF2D } from \"./PointF2D\";\n\nexport class Matrix2D {\n    private matrix: number[][];\n\n    constructor() {\n        this.matrix = [];\n        for (let i: number = 0; i < 2; i++) {\n            this.matrix[i] = [];\n            for (let j: number = 0; j < 2; j++) {\n                this.matrix[i][j] = 0;\n            }\n        }\n    }\n\n    public static getRotationMatrix(angle: number): Matrix2D {\n        const rotation: Matrix2D = new Matrix2D();\n        const cos: number = Math.cos(angle);\n        const sin: number = Math.sin(angle);\n        rotation.matrix[0][0] = cos;\n        rotation.matrix[0][1] = -sin;\n        rotation.matrix[1][0] = sin;\n        rotation.matrix[1][1] = cos;\n        return rotation;\n    }\n\n    public scalarMultiplication(scalar: number): void {\n        for (let i: number = 0; i < 2; i++) {\n            for (let j: number = 0; j < 2; j++) {\n                this.matrix[i][j] *= scalar;\n            }\n        }\n    }\n\n    public getTransposeMatrix(): Matrix2D {\n        const transpose: Matrix2D = new Matrix2D();\n        for (let i: number = 0; i < 2; i++) {\n            for (let j: number = 0; j < 2; j++) {\n                transpose.matrix[i][j] = this.matrix[j][i];\n            }\n        }\n        return transpose;\n    }\n\n    public vectorMultiplication(point: PointF2D): PointF2D {\n        const result: PointF2D = new PointF2D();\n        result.x = point.x * this.matrix[0][0] + point.y * this.matrix[0][1];\n        result.y = point.x * this.matrix[1][0] + point.y * this.matrix[1][1];\n        return result;\n    }\n\n    // public get Matrix(index: number): number[] {\n    //     return this.matrix[index];\n    // }\n    // public set Matrix(index: number, value: number[]): void {\n    //     this.matrix[index] = value;\n    // }\n}\n","// skeleton by Andrea\n\nexport class MusicSheetErrors {\n    public measureErrors: { [n: number]: string[] } = {};\n\n    private errors: string[] = [];\n    private tempErrors: string[] = [];\n\n    public finalizeMeasure(measureNumber: number): void {\n        let list: string[] = this.measureErrors[measureNumber];\n        if (!list) {\n            list = [];\n        }\n        this.measureErrors[measureNumber] = list.concat(this.tempErrors);\n        this.tempErrors = [];\n    }\n\n    public pushMeasureError(errorMsg: string): void {\n        this.tempErrors.push(errorMsg);\n    }\n\n    public push(errorMsg: string): void {\n        this.errors.push(errorMsg);\n    }\n}\n","/**\n * Represents a color in RGBA\n */\nexport class OSMDColor {\n    public alpha: number;\n    public red: number;\n    public green: number;\n    public blue: number;\n\n    /*constructor(alpha: number, red: number, green: number, blue: number) {\n        this.alpha = alpha;\n        this.red = red;\n        this.green = green;\n        this.blue = blue;\n    }*/\n\n    /*\n     * Color names are based on the definitions at https://msdn.microsoft.com/de-de/library/aa358802(vs.85).aspx\n     * ...but changed a bit by the famous Mc Overacre\n     */\n    constructor(red: number, green: number, blue: number) {\n        this.alpha = 255;\n        this.red = red;\n        this.green = green;\n        this.blue = blue;\n    }\n    public static get Black(): OSMDColor {\n        return new OSMDColor(0, 0, 0);\n    }\n    public static get DeepSkyBlue(): OSMDColor {\n        return new OSMDColor(0, 191, 255);\n    }\n    public static get Green(): OSMDColor {\n        return new OSMDColor(20, 160, 20);\n    }\n    public static get Magenta(): OSMDColor {\n        return new OSMDColor(255, 0, 255);\n    }\n    public static get Orange(): OSMDColor {\n        return new OSMDColor(255, 128, 0);\n    }\n    public static get Red(): OSMDColor {\n        return new OSMDColor(240, 20, 20);\n    }\n    public static get Disabled(): OSMDColor {\n        return new OSMDColor(225, 225, 225);\n    }\n    public static get DarkBlue(): OSMDColor {\n        return new OSMDColor(0, 0, 140);\n    }\n\n    // For debugging:\n    public static get Debug1(): OSMDColor {\n        return new OSMDColor(200, 0, 140);\n    }\n    public static get Debug2(): OSMDColor {\n        return new OSMDColor(100, 100, 200);\n    }\n    public static get Debug3(): OSMDColor {\n        return new OSMDColor(0, 50, 140);\n    }\n\n    public toString(): string {\n        return \"rgb(\" + this.red + \",\" + this.green + \",\" + this.blue + \",\" + this.alpha + \")\";\n    }\n}\n","// The value of the enum indicates the number of halftoneSteps from one note to the next\nexport enum NoteEnum {\n    C = 0,\n    D = 2,\n    E = 4,\n    F = 5,\n    G = 7,\n    A = 9,\n    B = 11\n}\n\n/** Describes Accidental types.\n * Do not use the number values of these enum members directly for calculation anymore.\n * To use these for pitch calculation, use pitch.AccidentalHalfTones()\n * or Pitch.HalfTonesFromAccidental(accidentalEnum).\n */\nexport enum AccidentalEnum {\n    SHARP,\n    FLAT,\n    NONE,\n    NATURAL,\n    DOUBLESHARP,\n    DOUBLEFLAT,\n    TRIPLESHARP,\n    TRIPLEFLAT,\n    QUARTERTONESHARP,\n    QUARTERTONEFLAT,\n    SLASHFLAT,\n    THREEQUARTERSSHARP,\n    THREEQUARTERSFLAT,\n    SLASHQUARTERSHARP,\n    SLASHSHARP,\n    DOUBLESLASHFLAT,\n    SORI,\n    KORON\n}\n\n// This class represents a musical note. The middle A (440 Hz) lies in the octave with the value 1.\nexport class Pitch {\n    public static pitchEnumValues: NoteEnum[] = [\n        NoteEnum.C, NoteEnum.D, NoteEnum.E, NoteEnum.F, NoteEnum.G, NoteEnum.A, NoteEnum.B,\n    ];\n\n    private static halftoneFactor: number = 12 / (Math.LN2 / Math.LN10);\n    private static octXmlDiff: number = 3;\n\n    // private _sourceOctave: number;\n    // private _sourceFundamentalNote: NoteEnum;\n    // private _sourceAccidental: AccidentalEnum = AccidentalEnum.NONE;\n    private octave: number;\n    private fundamentalNote: NoteEnum;\n    private accidental: AccidentalEnum = AccidentalEnum.NONE;\n    private accidentalXml: string;\n    private frequency: number;\n    private halfTone: number;\n\n    public static getNoteEnumString(note: NoteEnum): string {\n        switch (note) {\n            case NoteEnum.C:\n                return \"C\";\n            case NoteEnum.D:\n                return \"D\";\n            case NoteEnum.E:\n                return \"E\";\n            case NoteEnum.F:\n                return \"F\";\n            case NoteEnum.G:\n                return \"G\";\n            case NoteEnum.A:\n                return \"A\";\n            case NoteEnum.B:\n                return \"B\";\n            default:\n                return \"\";\n        }\n    }\n\n    /** Changes a note x lines/steps up (+) or down (-) from a NoteEnum on a staffline/keyboard (white keys).\n     * E.g. Two lines down (-2) from a D is a B.\n     * Two lines up from an A is a C.\n     *   (e.g. in the treble/violin clef, going one line up: E -> F (semitone), F -> G (2 semitones)).\n     * Returns new NoteEnum and the octave shift (e.g. -1 = new octave is one octave down). */\n    public static lineShiftFromNoteEnum(noteEnum: NoteEnum, lines: number): [NoteEnum, number] {\n        if (lines === 0) {\n            return [noteEnum, 0];\n        }\n        const enums: NoteEnum[] = Pitch.pitchEnumValues;\n        const originalIndex: number = enums.indexOf(noteEnum);\n        let octaveShift: number = 0;\n        let newIndex: number = (originalIndex + lines) % enums.length; // modulo only handles positive overflow\n        if (originalIndex + lines > enums.length - 1) {\n            octaveShift = 1;\n        }\n        if (newIndex < 0) {\n            newIndex = enums.length + newIndex; // handle underflow, e.g. - 1: enums.length + (-1) = last element\n            octaveShift = -1;\n        }\n        return [enums[newIndex], octaveShift];\n    }\n\n    /**\n     * @param the input pitch\n     * @param the number of halftones to transpose with\n     * @returns ret[0] = the transposed fundamental.\n     * ret[1] = the octave shift (not the new octave!)\n     * @constructor\n     */\n    public static CalculateTransposedHalfTone(pitch: Pitch, transpose: number): { halftone: number, overflow: number } {\n        const newHalfTone: number = <number>pitch.fundamentalNote + pitch.AccidentalHalfTones + transpose;\n        return Pitch.WrapAroundCheck(newHalfTone, 12);\n    }\n\n    public static WrapAroundCheck(value: number, limit: number): { halftone: number, overflow: number } {\n        let overflow: number = 0;\n\n        while (value < 0) {\n            value += limit;\n            overflow--; // the octave change\n        }\n        while (value >= limit) {\n            value -= limit;\n            overflow++; // the octave change\n        }\n        return {overflow: overflow, halftone: value};\n    }\n\n    //public static calcFrequency(pitch: Pitch): number;\n\n    //public static calcFrequency(fractionalKey: number): number;\n\n    public static calcFrequency(obj: Pitch|number): number {\n        let octaveSteps: number = 0;\n        let halfToneSteps: number;\n        if (obj instanceof Pitch) {\n            // obj is a pitch\n            const pitch: Pitch = obj;\n            octaveSteps = pitch.octave - 1;\n            halfToneSteps = <number>pitch.fundamentalNote - <number>NoteEnum.A + pitch.AccidentalHalfTones;\n        } else if (typeof obj === \"number\") {\n            // obj is a fractional key\n            const fractionalKey: number = obj;\n            halfToneSteps = fractionalKey - 57.0;\n        }\n        // Return frequency:\n        return 440.0 * Math.pow(2, octaveSteps) * Math.pow(2, halfToneSteps / 12.0);\n    }\n\n    public static calcFractionalKey(frequency: number): number {\n        // Return half-tone frequency:\n        return Math.log(frequency / 440.0) / Math.LN10 * Pitch.halftoneFactor + 57.0;\n    }\n\n    public static fromFrequency(frequency: number): Pitch {\n        const key: number = Pitch.calcFractionalKey(frequency) + 0.5;\n        const octave: number = Math.floor(key / 12) - Pitch.octXmlDiff;\n        const halftone: number = Math.floor(key) % 12;\n        let fundamentalNote: NoteEnum = <NoteEnum>halftone;\n        let accidental: AccidentalEnum = AccidentalEnum.NONE;\n        if (this.pitchEnumValues.indexOf(fundamentalNote) === -1) {\n            fundamentalNote = <NoteEnum>(halftone - 1);\n            accidental = AccidentalEnum.SHARP;\n        }\n        return new Pitch(fundamentalNote, octave, accidental);\n    }\n\n    public static fromHalftone(halftone: number): Pitch {\n        const octave: number = Math.floor(halftone / 12) - Pitch.octXmlDiff;\n        const halftoneInOctave: number = halftone % 12;\n        let fundamentalNote: NoteEnum = <NoteEnum>halftoneInOctave;\n        let accidental: AccidentalEnum = AccidentalEnum.NONE;\n        if (this.pitchEnumValues.indexOf(fundamentalNote) === -1) {\n            fundamentalNote = <NoteEnum>(halftoneInOctave - 1);\n            accidental = AccidentalEnum.SHARP;\n        }\n        return new Pitch(fundamentalNote, octave, accidental);\n    }\n\n    public static ceiling(halftone: number): NoteEnum {\n        halftone = (halftone) % 12;\n        let fundamentalNote: NoteEnum = <NoteEnum>halftone;\n        if (this.pitchEnumValues.indexOf(fundamentalNote) === -1) {\n            fundamentalNote = <NoteEnum>(halftone + 1);\n        }\n        return fundamentalNote;\n    }\n\n    public static floor(halftone: number): NoteEnum {\n        halftone = halftone % 12;\n        let fundamentalNote: NoteEnum = <NoteEnum>halftone;\n        if (this.pitchEnumValues.indexOf(fundamentalNote) === -1) {\n            fundamentalNote = <NoteEnum>(halftone - 1);\n        }\n        return fundamentalNote;\n    }\n\n    constructor(fundamentalNote: NoteEnum, octave: number, accidental: AccidentalEnum, accidentalXml: string = undefined) {\n        this.fundamentalNote = fundamentalNote;\n        this.octave = octave;\n        this.accidental = accidental;\n        this.accidentalXml = accidentalXml;\n        this.halfTone = <number>(fundamentalNote) + (octave + Pitch.octXmlDiff) * 12 +\n            Pitch.HalfTonesFromAccidental(accidental);\n        this.frequency = Pitch.calcFrequency(this);\n    }\n\n    /** Turns an AccidentalEnum into half tone steps for pitch calculation.\n     *\n     */\n    public static HalfTonesFromAccidental(accidental: AccidentalEnum): number {\n        // about equal performance to hashmap/dictionary. could be turned into hashmap for convenience\n        // switch is very slightly faster, but both are negligibly short anyways.\n        switch (accidental) {\n            // ordered from most to least common to improve average runtime\n            case AccidentalEnum.NONE:\n                return 0;\n            case AccidentalEnum.SHARP:\n                return 1;\n            case AccidentalEnum.FLAT:\n                return -1;\n            case AccidentalEnum.NATURAL:\n                return 0;\n            case AccidentalEnum.DOUBLESHARP:\n                return 2;\n            case AccidentalEnum.DOUBLEFLAT:\n                return -2;\n            case AccidentalEnum.TRIPLESHARP: // very rare, in some classical pieces\n                return 3;\n            case AccidentalEnum.TRIPLEFLAT:\n                return -3;\n            case AccidentalEnum.QUARTERTONESHARP:\n                return 0.5;\n            case AccidentalEnum.QUARTERTONEFLAT:\n                return -0.5;\n            case AccidentalEnum.SLASHFLAT:\n                return -0.51; // TODO currently necessary for quarter tone flat rendering after slash flat\n            case AccidentalEnum.THREEQUARTERSSHARP:\n                return 1.5;\n            case AccidentalEnum.THREEQUARTERSFLAT:\n                return -1.5;\n            case AccidentalEnum.SLASHQUARTERSHARP:\n                return 0.0013; // tmp for identification\n            case AccidentalEnum.SLASHSHARP:\n                return 0.0014; // tmp for identification\n            case AccidentalEnum.DOUBLESLASHFLAT:\n                return -0.0015; // tmp for identification\n            case AccidentalEnum.SORI:\n                return 0.0016; // tmp for identification\n            case AccidentalEnum.KORON:\n                return 0.0017; // tmp for identification\n            default:\n                throw new Error(\"Unhandled AccidentalEnum value\");\n                // return 0;\n        }\n    }\n\n    public static AccidentalFromHalfTones(halfTones: number): AccidentalEnum {\n        switch (halfTones) {\n            case 0:\n                // for enharmonic change, we won't get a Natural accidental. Maybe there are edge cases though?\n                return AccidentalEnum.NONE;\n            case 1:\n                return AccidentalEnum.SHARP;\n            case -1:\n                return AccidentalEnum.FLAT;\n            case 2:\n                return AccidentalEnum.DOUBLESHARP;\n            case -2:\n                return AccidentalEnum.DOUBLEFLAT;\n            case 3:\n                return AccidentalEnum.TRIPLESHARP;\n            case -3:\n                return AccidentalEnum.TRIPLEFLAT;\n            case 0.5:\n                return AccidentalEnum.QUARTERTONESHARP;\n            case -0.5:\n                return AccidentalEnum.QUARTERTONEFLAT;\n            case 1.5:\n                return AccidentalEnum.THREEQUARTERSSHARP;\n            case -1.5:\n                return AccidentalEnum.THREEQUARTERSFLAT;\n            default:\n                if (halfTones > 0 && halfTones < 1) {\n                    return AccidentalEnum.QUARTERTONESHARP;\n                } else if (halfTones < 0 && halfTones > -1) {\n                    return AccidentalEnum.QUARTERTONEFLAT;\n                }\n                // potentially unhandled or broken accidental halfTone value\n                return AccidentalEnum.QUARTERTONESHARP; // to signal unhandled value\n        }\n    }\n\n    /**\n     * Converts AccidentalEnum to a string which represents an accidental in VexFlow\n     * Can also be useful in other cases, but has to match Vexflow accidental codes.\n     * @param accidental\n     * @returns {string} Vexflow Accidental code\n     */\n    public static accidentalVexflow(accidental: AccidentalEnum): string {\n        let acc: string;\n        switch (accidental) {\n            case AccidentalEnum.NATURAL:\n                acc = \"n\";\n                break;\n            case AccidentalEnum.FLAT:\n                acc = \"b\";\n                break;\n            case AccidentalEnum.SHARP:\n                acc = \"#\";\n                break;\n            case AccidentalEnum.DOUBLESHARP:\n                acc = \"##\";\n                break;\n            case AccidentalEnum.TRIPLESHARP:\n                acc = \"###\";\n                break;\n            case AccidentalEnum.DOUBLEFLAT:\n                acc = \"bb\";\n                break;\n            case AccidentalEnum.TRIPLEFLAT:\n                acc = \"bbs\"; // there is no \"bbb\" in VexFlow yet, unfortunately.\n                break;\n            case AccidentalEnum.QUARTERTONESHARP:\n                acc = \"+\";\n                break;\n            case AccidentalEnum.QUARTERTONEFLAT:\n                acc = \"d\";\n                break;\n            case AccidentalEnum.SLASHFLAT:\n                acc = \"bs\";\n                break;\n            case AccidentalEnum.THREEQUARTERSSHARP:\n                acc = \"++\";\n                break;\n            case AccidentalEnum.THREEQUARTERSFLAT:\n                acc = \"db\";\n                break;\n            case AccidentalEnum.SLASHQUARTERSHARP:\n                acc = \"+-\";\n                break;\n            case AccidentalEnum.SLASHSHARP:\n                acc = \"++-\";\n                break;\n            case AccidentalEnum.DOUBLESLASHFLAT:\n                acc = \"bss\";\n                break;\n            case AccidentalEnum.SORI:\n                acc = \"o\";\n                break;\n            case AccidentalEnum.KORON:\n                acc = \"k\";\n                break;\n            default:\n        }\n        return acc;\n    }\n\n    public get AccidentalHalfTones(): number {\n        return Pitch.HalfTonesFromAccidental(this.accidental);\n    }\n\n    public get Octave(): number {\n        return this.octave;\n    }\n\n    public get FundamentalNote(): NoteEnum {\n        return this.fundamentalNote;\n    }\n\n    public get Accidental(): AccidentalEnum {\n        return this.accidental;\n    }\n\n    public get AccidentalXml(): string {\n        return this.accidentalXml;\n    }\n\n    public get Frequency(): number {\n        return this.frequency;\n    }\n\n    public static get OctaveXmlDifference(): number {\n        return Pitch.octXmlDiff;\n    }\n\n    public getHalfTone(): number {\n        return this.halfTone;\n    }\n\n    // This method returns a new Pitch transposed by the given factor\n    public getTransposedPitch(factor: number): Pitch {\n        if (factor > 12) {\n            throw new Error(\"rewrite this method to handle bigger octave changes or don't use is with bigger octave changes!\");\n        }\n        if (factor > 0) {\n            return this.getHigherPitchByTransposeFactor(factor);\n        }\n        if (factor < 0) {\n            return this.getLowerPitchByTransposeFactor(-factor);\n        }\n        return this;\n    }\n\n    public DoEnharmonicChange(): void {\n        switch (this.accidental) {\n            case AccidentalEnum.FLAT:\n            case AccidentalEnum.DOUBLEFLAT:\n                this.fundamentalNote = this.getPreviousFundamentalNote(this.fundamentalNote);\n                this.accidental = Pitch.AccidentalFromHalfTones(this.halfTone - (<number>(this.fundamentalNote) +\n                (this.octave + Pitch.octXmlDiff) * 12));\n                break;\n            case AccidentalEnum.SHARP:\n            case AccidentalEnum.DOUBLESHARP:\n                this.fundamentalNote = this.getNextFundamentalNote(this.fundamentalNote);\n                this.accidental = Pitch.AccidentalFromHalfTones(this.halfTone - (<number>(this.fundamentalNote) +\n                (this.octave + Pitch.octXmlDiff) * 12));\n                break;\n            default:\n                return;\n        }\n    }\n\n    public ToString(): string {\n        let accidentalString: string = Pitch.accidentalVexflow(this.accidental);\n        if (!accidentalString) {\n            accidentalString = \"\";\n        }\n        return \"Key: \" + Pitch.getNoteEnumString(this.fundamentalNote) + accidentalString +\n        \", Note: \" + this.fundamentalNote + \", octave: \" + this.octave.toString();\n    }\n\n    public OperatorEquals(p2: Pitch): boolean {\n        const p1: Pitch = this;\n        // if (ReferenceEquals(p1, p2)) {\n        //     return true;\n        // }\n        if (!p1 || !p2) {\n            return false;\n        }\n        return (p1.FundamentalNote === p2.FundamentalNote && p1.Octave === p2.Octave && p1.Accidental === p2.Accidental);\n    }\n\n    public OperatorNotEqual(p2: Pitch): boolean {\n        const p1: Pitch = this;\n        return !(p1 === p2);\n    }\n\n    //These don't take into account accidentals! which isn't needed for our current purpose\n    public OperatorFundamentalGreaterThan(p2: Pitch): boolean {\n        const p1: Pitch = this;\n        if (p1.Octave === p2.Octave) {\n            return p1.FundamentalNote > p2.FundamentalNote;\n        } else {\n            return p1.Octave > p2.Octave;\n        }\n    }\n\n    public OperatorFundamentalLessThan(p2: Pitch): boolean {\n        const p1: Pitch = this;\n        if (p1.Octave === p2.Octave) {\n            return p1.FundamentalNote < p2.FundamentalNote;\n        } else {\n            return p1.Octave < p2.Octave;\n        }\n    }\n\n    // This method returns a new Pitch factor-Halftones higher than the current Pitch\n    private getHigherPitchByTransposeFactor(factor: number): Pitch {\n        const noteEnumIndex: number = Pitch.pitchEnumValues.indexOf(this.fundamentalNote);\n        let newOctave: number = this.octave;\n        let newNoteEnum: NoteEnum;\n        if (noteEnumIndex + factor > Pitch.pitchEnumValues.length - 1) {\n            newNoteEnum = Pitch.pitchEnumValues[noteEnumIndex + factor - Pitch.pitchEnumValues.length];\n            newOctave++;\n        } else {\n            newNoteEnum = Pitch.pitchEnumValues[noteEnumIndex + factor];\n        }\n        return new Pitch(newNoteEnum, newOctave, AccidentalEnum.NONE);\n    }\n\n    private getLowerPitchByTransposeFactor(factor: number): Pitch {\n        const noteEnumIndex: number = Pitch.pitchEnumValues.indexOf(this.fundamentalNote);\n        let newOctave: number = this.octave;\n        let newNoteEnum: NoteEnum;\n        if (noteEnumIndex - factor < 0) {\n            newNoteEnum = Pitch.pitchEnumValues[Pitch.pitchEnumValues.length + noteEnumIndex - factor];\n            newOctave--;\n        } else {\n            newNoteEnum = Pitch.pitchEnumValues[noteEnumIndex - factor];\n        }\n        return new Pitch(newNoteEnum, newOctave, AccidentalEnum.NONE);\n    }\n\n    private getNextFundamentalNote(fundamental: NoteEnum): NoteEnum {\n        let i: number = Pitch.pitchEnumValues.indexOf(fundamental);\n        i = (i + 1) % Pitch.pitchEnumValues.length;\n        return Pitch.pitchEnumValues[i];\n    }\n\n    private getPreviousFundamentalNote(fundamental: NoteEnum): NoteEnum {\n        const i: number = Pitch.pitchEnumValues.indexOf(fundamental);\n        if (i > 0) {\n            return Pitch.pitchEnumValues[i - 1];\n        } else {\n            return Pitch.pitchEnumValues[Pitch.pitchEnumValues.length - 1];\n        }\n    }\n}\n","// Represent a point on a plane, with (x,y) coordinates\nexport class PointF2D {\n    public x: number = 0;\n    public y: number = 0;\n\n    constructor(x: number = 0, y: number = 0) {\n        this.x = x;\n        this.y = y;\n    }\n\n    public static get Empty(): PointF2D {\n        return new PointF2D();\n    }\n    public static pointsAreEqual(p1: PointF2D, p2: PointF2D): boolean {\n        return (p1.x === p2.x && p1.y === p2.y);\n    }\n    public ToString(): string {\n        return \"[\" + this.x + \", \" + this.y + \"]\";\n    }\n}\n","import {SizeF2D} from \"./SizeF2D\";\nimport {PointF2D} from \"./PointF2D\";\n\n/**\n * Represent a rectangle on a plane\n */\nexport class RectangleF2D {\n    public x: number = 0;\n    public y: number = 0;\n    public width: number = 0;\n    public height: number = 0;\n\n    /**\n     *\n     * @param x\n     * @param y\n     * @param width\n     * @param height\n     */\n    constructor(x: number, y: number, width: number, height: number) {\n        this.x = x;\n        this.y = y;\n        this.width = width;\n        this.height = height;\n    }\n\n    public static createFromLocationAndSize(location: PointF2D, size: SizeF2D): RectangleF2D {\n        return new RectangleF2D(location.x, location.y, size.width, size.height);\n    }\n    public get Location(): PointF2D {\n        return new PointF2D(this.x, this.y);\n    }\n    public get Size(): SizeF2D {\n        return new SizeF2D(this.width, this.height);\n    }\n}\n","/**\n * Represent the size of a 2D object, with (width, height)\n */\nexport class SizeF2D {\n    public width: number;\n    public height: number;\n\n    constructor(width: number = 0, height: number = 0) {\n        this.width = width;\n        this.height = height;\n    }\n}\n","// created from 'create-ts-index'\n\nexport * from \"./Fraction\";\nexport * from \"./Matrix2D\";\nexport * from \"./MusicSheetErrors\";\nexport * from \"./OSMDColor\";\nexport * from \"./Pitch\";\nexport * from \"./PointF2D\";\nexport * from \"./RectangleF2D\";\nexport * from \"./SizeF2D\";\n","/**\n * The styles available to write text on the music sheet\n */\nexport enum FontStyles {\n    Regular = 0,\n    Bold = 1,\n    Italic = 2,\n    BoldItalic = 3,\n    Underlined = 4\n}\n","/**\n * The fonts available for writing on the sheet music\n */\nexport enum Fonts {\n    TimesNewRoman,\n    Kokila\n}\n","/**\n * The Alignment of a TextLabel.\n * Specifically the label's position coordinates within the Bounding Box.\n * For LeftBottom, the label's position is at the left bottom corner of its Bounding Box.\n * (used for example with title, composer, author, etc.)\n * (see Show Bounding Box For -> Labels in the local demo)\n */\nexport enum TextAlignmentEnum {\n    LeftTop,\n    LeftCenter,\n    LeftBottom,\n    CenterTop,\n    CenterCenter,\n    CenterBottom,\n    RightTop,\n    RightCenter,\n    RightBottom\n}\n/*\n * TODO this could be split into two alignments, e.g. <Left, Top> for LeftTop.\n * A function like IsLeft would be easier with the split.\n * On the other hand, accessing these values will be more complex\n*/\n\nexport class TextAlignment {\n    public static IsLeft(textAlignment: TextAlignmentEnum): boolean {\n        return textAlignment === TextAlignmentEnum.LeftTop\n            || textAlignment === TextAlignmentEnum.LeftCenter\n            || textAlignment === TextAlignmentEnum.LeftBottom;\n    }\n\n    public static IsCenterAligned(textAlignment: TextAlignmentEnum): boolean {\n        return textAlignment === TextAlignmentEnum.CenterTop\n            || textAlignment === TextAlignmentEnum.CenterCenter\n            || textAlignment === TextAlignmentEnum.CenterBottom;\n    }\n\n    public static IsRight(textAlignment: TextAlignmentEnum): boolean {\n        return textAlignment === TextAlignmentEnum.RightTop\n            || textAlignment === TextAlignmentEnum.RightCenter\n            || textAlignment === TextAlignmentEnum.RightBottom;\n    }\n}\n","/**\n * The types of ties available\n */\nexport enum TieTypes {\n    \"SIMPLE\" = \"\",\n    \"HAMMERON\" = \"H\",\n    \"PULLOFF\" = \"P\",\n    \"SLIDE\" = \"S\",\n    \"TAPPING\" = \"T\"\n}\n","// created from 'create-ts-index'\n\nexport * from \"./FontStyles\";\nexport * from \"./Fonts\";\nexport * from \"./TextAlignment\";\nexport * from \"./TieTypes\";\n","import { IXmlElement } from \"./Xml\";\nimport JSZip from \"jszip\";\nimport log from \"loglevel\";\n\n/**\n * Some helper methods to handle MXL files.\n */\nexport class MXLHelper {\n    /**\n     *\n     * @param data\n     * @returns {Promise<IXmlElement>}\n     * @constructor\n     */\n    public static MXLtoIXmlElement(data: string): Promise<IXmlElement> {\n        // starting with jszip 3.4.0, JSZip.JSZip is not found,\n        //    probably because of new possibly conflicting TypeScript definitions\n        const zip: JSZip = new JSZip();\n        // asynchronously load zip file and process it - with Promises\n        const zipLoadedAsync: Promise<JSZip> = zip.loadAsync(data);\n        const text: Promise<string> = zipLoadedAsync.then(\n            (_: JSZip) => {\n                return zip.file(\"META-INF/container.xml\").async(\"text\");\n            },\n            (err: any) => {\n                throw err;\n            }\n        );\n        return text.then(\n            (content: string) => {\n                const parser: DOMParser = new DOMParser();\n                const doc: Document = parser.parseFromString(content, \"text/xml\");\n                const rootFile: string = doc.getElementsByTagName(\"rootfile\")[0].getAttribute(\"full-path\");\n                return zip.file(rootFile).async(\"text\");\n            },\n            (err: any) => {\n                throw err;\n            }\n        ).then(\n            (content: string) => {\n                const parser: DOMParser = new DOMParser();\n                const xml: Document = parser.parseFromString(content, \"text/xml\");\n                const doc: IXmlElement = new IXmlElement(xml.documentElement);\n                return Promise.resolve(doc);\n            },\n            (err: any) => {\n                throw err;\n            }\n        ).then(\n            (content: IXmlElement) => {\n                return content;\n            },\n            (err: any) => {\n                throw new Error(\"extractSheetFromMxl: \" + err.message);\n            }\n        );\n    }\n\n    public static MXLtoXMLstring(data: string): Promise<string> {\n        const zip:  JSZip = new JSZip();\n        // asynchronously load zip file and process it - with Promises\n        return zip.loadAsync(data).then(\n            (_: any) => {\n                return zip.file(\"META-INF/container.xml\").async(\"text\");\n            },\n            (err: any) => {\n                // log jszip error. for some reason this isn't done in OSMD where this method is used.\n                log.error(err);\n                throw err;\n            }\n        ).then(\n            (content: string) => {\n                const parser: DOMParser = new DOMParser();\n                const doc: Document = parser.parseFromString(content, \"text/xml\");\n                const rootFile: string = doc.getElementsByTagName(\"rootfile\")[0].getAttribute(\"full-path\");\n                return zip.file(rootFile).async(\"text\");\n            },\n            (err: any) => {\n                throw err;\n            }\n        );\n    }\n}\n","/**\n * IXmlAttribute is just the standard Attr\n */\nexport type IXmlAttribute = Attr;\n\n/**\n * Just a wrapper for an XML Element object.\n * It facilitates handling of XML elements by OSMD\n */\nexport class IXmlElement {\n    public name: string;\n    public value: string;\n    public hasAttributes: boolean = false;\n    public firstAttribute: IXmlAttribute;\n    public hasElements: boolean;\n\n    private attrs: IXmlAttribute[];\n    private elem: Element;\n\n    /**\n     * Wraps 'elem' Element in a IXmlElement\n     * @param elem\n     */\n    constructor(elem: Element) {\n        if (!elem) {\n            throw new Error(\"IXmlElement: expected Element, got undefined\");\n        }\n        this.elem = elem;\n        this.name = elem.nodeName.toLowerCase();\n\n        if (elem.hasAttributes()) {\n            this.hasAttributes = true;\n            this.firstAttribute = elem.attributes[0];\n        }\n        this.hasElements = elem.hasChildNodes();\n        // Look for a value\n        if (elem.childNodes.length === 1 && elem.childNodes[0].nodeType === Node.TEXT_NODE) {\n            this.value = elem.childNodes[0].nodeValue;\n        } else {\n            this.value = \"\";\n        }\n    }\n\n    /**\n     * Get the attribute with the given name\n     * @param attributeName\n     * @returns {Attr}\n     */\n    public attribute(attributeName: string): IXmlAttribute {\n        return this.elem.attributes.getNamedItem(attributeName);\n    }\n\n    /**\n     * Get all attributes\n     * @returns {IXmlAttribute[]}\n     */\n    public attributes(): IXmlAttribute[] {\n        if (!this.attrs) {\n            const attributes: NamedNodeMap = this.elem.attributes;\n            const attrs: IXmlAttribute[] = [];\n            for (let i: number = 0; i < attributes.length; i += 1) {\n                attrs.push(attributes[i]);\n            }\n            this.attrs = attrs;\n        }\n        return this.attrs;\n    }\n\n    /**\n     * Get the first child element with the given node name\n     * @param elementName\n     * @returns {IXmlElement}\n     */\n    public element(elementName: string): IXmlElement {\n        const nodes: NodeList = this.elem.childNodes;\n        for (let i: number = 0, length: number = nodes.length; i < length; i += 1) {\n            const node: Node = nodes[i];\n            if (node.nodeType === Node.ELEMENT_NODE && node.nodeName.toLowerCase() === elementName) {\n                return new IXmlElement(node as Element);\n            }\n        }\n    }\n\n    /**\n     * Get the children with the given node name (if given, otherwise all child elements)\n     * @param nodeName\n     * @returns {IXmlElement[]}\n     */\n    public elements(nodeName?: string): IXmlElement[] {\n        const nodes: NodeList = this.elem.childNodes;\n        const ret: IXmlElement[] = [];\n        const nameUnset: boolean = !nodeName;\n        if (!nameUnset) {\n            nodeName = nodeName.toLowerCase();\n        }\n        for (let i: number = 0; i < nodes.length; i += 1) {\n            const node: Node = nodes[i];\n            if (node.nodeType === Node.ELEMENT_NODE &&\n                (nameUnset || node.nodeName.toLowerCase() === nodeName)\n            ) {\n                ret.push(new IXmlElement(node as Element));\n            }\n        }\n        return ret;\n    }\n}\n","// created from 'create-ts-index'\n\nexport * from \"./Mxl\";\nexport * from \"./Xml\";\n","export class StringUtil {\n  public static StringContainsSeparatedWord(str: string, wordRegExString: string, ignoreCase: boolean = false): boolean {\n    const regExp: RegExp = new RegExp(\"( |^)\" + wordRegExString + \"([ .]|$)\", ignoreCase ? \"i\" : undefined);\n    return regExp.test(str);\n  }\n}\n","export * from \"./DataObjects\";\nexport * from \"./Enums\";\nexport * from \"./FileIO\";\n","\nexport class MusicSheetReadingException implements Error {\n    public name: string;\n    public message: string;\n    constructor(message: string, e?: Error) {\n        //super(message);\n        this.message = message;\n        if (e) {\n            this.message += \" \" + e.toString();\n        }\n    }\n}\n\n\nexport class ArgumentOutOfRangeException implements Error {\n    public name: string;\n    public message: string;\n    constructor(message: string) {\n        //super(message);\n        this.message = message;\n    }\n}\n\nexport class InvalidEnumArgumentException implements Error {\n    public name: string;\n    public message: string;\n    constructor(message: string) {\n        this.message = message;\n    }\n}\n","import { GraphicalObject } from \"./GraphicalObject\";\nimport { GraphicalLabel } from \"./GraphicalLabel\";\nimport { StaffLine } from \"./StaffLine\";\nimport { BoundingBox } from \"./BoundingBox\";\nimport { AbstractExpression, PlacementEnum } from \"../VoiceData/Expressions/AbstractExpression\";\nimport { EngravingRules } from \"./EngravingRules\";\nimport { SourceMeasure } from \"../VoiceData/SourceMeasure\";\n\nexport abstract class AbstractGraphicalExpression extends GraphicalObject {\n    protected label: GraphicalLabel;\n    protected parentStaffLine: StaffLine;\n    /** Internal cache of read expression */\n    protected expression: AbstractExpression;\n    /** EngravingRules for positioning */\n    protected rules: EngravingRules;\n    protected parentMeasure: SourceMeasure;\n\n    constructor(parentStaffline: StaffLine, expression: AbstractExpression, measure: SourceMeasure) {\n        super();\n        this.expression = expression;\n        this.parentMeasure = measure; // could be undefined!\n        this.boundingBox = new BoundingBox(this, parentStaffline.PositionAndShape);\n        this.parentStaffLine = parentStaffline;\n        this.parentStaffLine.AbstractExpressions.push(this);\n        this.rules = parentStaffline.ParentMusicSystem.rules;\n    }\n\n    /** Graphical label of the expression if available */\n    get Label(): GraphicalLabel { return this.label; }\n    /** Staffline where the expression is attached to */\n    public get ParentStaffLine(): StaffLine { return this.parentStaffLine; }\n    public get SourceExpression(): AbstractExpression { return this.expression; }\n    public get Placement(): PlacementEnum { return this.expression.Placement; }\n\n    //#region abstract methods\n    public abstract updateSkyBottomLine(): void;\n    //#endregion\n}\n","import {GraphicalStaffEntry} from \"./GraphicalStaffEntry\";\nimport {GraphicalObject} from \"./GraphicalObject\";\n\nexport abstract class AbstractGraphicalInstruction extends GraphicalObject {\n    protected parent: GraphicalStaffEntry;\n    constructor(parent: GraphicalStaffEntry) {\n        super();\n        this.parent = parent;\n    }\n    public get Parent(): GraphicalStaffEntry {\n        return this.parent;\n    }\n    public set Parent(value: GraphicalStaffEntry) {\n        this.parent = value;\n    }\n}\n","import {AccidentalEnum} from \"../../Common/DataObjects/Pitch\";\nimport {KeyInstruction} from \"../VoiceData/Instructions/KeyInstruction\";\nimport {GraphicalNote} from \"./GraphicalNote\";\nimport {Pitch} from \"../../Common/DataObjects/Pitch\";\nimport {NoteEnum} from \"../../Common/DataObjects/Pitch\";\nimport { Dictionary } from \"typescript-collections\";\n// import { Dictionary } from \"typescript-collections/dist/lib\";\nimport { MusicSheetCalculator } from \"./MusicSheetCalculator\";\n\n/**\n * Compute the accidentals for notes according to the current key instruction\n */\nexport class AccidentalCalculator {\n    private keySignatureNoteAlterationsDict: Dictionary<number, AccidentalEnum> = new Dictionary<number, AccidentalEnum>();\n    private currentAlterationsComparedToKeyInstructionList: number[] = [];\n    private currentInMeasureNoteAlterationsDict: Dictionary<number, AccidentalEnum> = new Dictionary<number, AccidentalEnum>();\n    private activeKeyInstruction: KeyInstruction;\n\n    public get ActiveKeyInstruction(): KeyInstruction {\n        return this.activeKeyInstruction;\n    }\n\n    public set ActiveKeyInstruction(value: KeyInstruction) {\n        this.activeKeyInstruction = value;\n        this.reactOnKeyInstructionChange();\n    }\n\n    /**\n     * This method is called after each Measure\n     * It clears the in-measure alterations dict for the next measure\n     * and pre-loads with the alterations of the key signature\n     */\n    public doCalculationsAtEndOfMeasure(): void {\n        this.currentInMeasureNoteAlterationsDict.clear();\n        this.currentAlterationsComparedToKeyInstructionList.clear();\n        for (const key of this.keySignatureNoteAlterationsDict.keys()) {\n            this.currentInMeasureNoteAlterationsDict.setValue(key, this.keySignatureNoteAlterationsDict.getValue(key));\n        }\n    }\n\n    public checkAccidental(graphicalNote: GraphicalNote, pitch: Pitch): void {\n        if (!pitch) {\n            return;\n        }\n        const pitchKey: number = <number>pitch.FundamentalNote + pitch.Octave * 12;\n        /*let pitchKeyGivenInMeasureDict: boolean = this.currentInMeasureNoteAlterationsDict.containsKey(pitchKey);\n        if (\n            (pitchKeyGivenInMeasureDict && this.currentInMeasureNoteAlterationsDict.getValue(pitchKey) !== pitch.Accidental)\n            || (!pitchKeyGivenInMeasureDict && pitch.Accidental !== AccidentalEnum.NONE)\n        ) {\n            if (this.currentAlterationsComparedToKeyInstructionList.indexOf(pitchKey) === -1) {\n                this.currentAlterationsComparedToKeyInstructionList.push(pitchKey);\n            }\n            this.currentInMeasureNoteAlterationsDict.setValue(pitchKey, pitch.Accidental);\n            this.symbolFactory.addGraphicalAccidental(graphicalNote, pitch);\n        } else if (\n            this.currentAlterationsComparedToKeyInstructionList.indexOf(pitchKey) !== -1\n            && ((pitchKeyGivenInMeasureDict && this.currentInMeasureNoteAlterationsDict.getValue(pitchKey) !== pitch.Accidental)\n            || (!pitchKeyGivenInMeasureDict && pitch.Accidental === AccidentalEnum.NONE))\n        ) {\n            this.currentAlterationsComparedToKeyInstructionList.splice(this.currentAlterationsComparedToKeyInstructionList.indexOf(pitchKey), 1);\n            this.currentInMeasureNoteAlterationsDict.setValue(pitchKey, pitch.Accidental);\n            this.symbolFactory.addGraphicalAccidental(graphicalNote, pitch);\n        }*/\n\n        const isInCurrentAlterationsToKeyList: boolean = this.currentAlterationsComparedToKeyInstructionList.indexOf(pitchKey) >= 0;\n        if (this.currentInMeasureNoteAlterationsDict.containsKey(pitchKey)) {\n            if (isInCurrentAlterationsToKeyList) {\n                this.currentAlterationsComparedToKeyInstructionList.splice(this.currentAlterationsComparedToKeyInstructionList.indexOf(pitchKey), 1);\n            }\n            if (this.currentInMeasureNoteAlterationsDict.getValue(pitchKey) !== pitch.AccidentalHalfTones) {\n                if (this.keySignatureNoteAlterationsDict.containsKey(pitchKey) &&\n                    this.keySignatureNoteAlterationsDict.getValue(pitchKey) !== pitch.AccidentalHalfTones) {\n                    this.currentAlterationsComparedToKeyInstructionList.push(pitchKey);\n                    this.currentInMeasureNoteAlterationsDict.setValue(pitchKey, pitch.AccidentalHalfTones);\n                } else if (pitch.Accidental !== AccidentalEnum.NONE) {\n                    this.currentInMeasureNoteAlterationsDict.remove(pitchKey);\n                }\n\n                const inMeasureAlterationAccidental: AccidentalEnum = this.currentInMeasureNoteAlterationsDict.getValue(pitchKey);\n                if (pitch.Accidental === AccidentalEnum.NONE) {\n                    if (Math.abs(inMeasureAlterationAccidental) === 0.5) {\n                        // fix to remember quartersharp and quarterflat and not make them natural on following notes\n                        pitch = new Pitch(pitch.FundamentalNote, pitch.Octave, AccidentalEnum.NONE);\n                    } else {\n                        // If an AccidentalEnum.NONE is given, it would not be rendered.\n                        // We need here to convert to a AccidentalEnum.NATURAL:\n                        pitch = new Pitch(pitch.FundamentalNote, pitch.Octave, AccidentalEnum.NATURAL);\n                    }\n                }\n                if (this.isAlterAmbiguousAccidental(pitch.Accidental) && ! pitch.AccidentalXml) {\n                    return; // only display accidental if it was given as an accidental in the XML\n                }\n                MusicSheetCalculator.symbolFactory.addGraphicalAccidental(graphicalNote, pitch);\n            }\n        } else { // pitchkey not in measure dict:\n            if (pitch.Accidental !== AccidentalEnum.NONE) {\n                if (!isInCurrentAlterationsToKeyList) {\n                    this.currentAlterationsComparedToKeyInstructionList.push(pitchKey);\n                }\n                this.currentInMeasureNoteAlterationsDict.setValue(pitchKey, pitch.AccidentalHalfTones);\n                if (this.isAlterAmbiguousAccidental(pitch.Accidental) && ! pitch.AccidentalXml) {\n                    return;\n                }\n                MusicSheetCalculator.symbolFactory.addGraphicalAccidental(graphicalNote, pitch);\n            } else {\n                if (isInCurrentAlterationsToKeyList) {\n                    // we need here a AccidentalEnum.NATURAL now to get it rendered - AccidentalEnum.NONE would not be rendered\n                    pitch = new Pitch(pitch.FundamentalNote, pitch.Octave, AccidentalEnum.NATURAL);\n                    this.currentAlterationsComparedToKeyInstructionList.splice(this.currentAlterationsComparedToKeyInstructionList.indexOf(pitchKey), 1);\n                    MusicSheetCalculator.symbolFactory.addGraphicalAccidental(graphicalNote, pitch);\n                }\n            }\n        }\n    }\n\n    private isAlterAmbiguousAccidental(accidental: AccidentalEnum): boolean {\n        return accidental === AccidentalEnum.SLASHFLAT || accidental === AccidentalEnum.QUARTERTONEFLAT;\n    }\n\n    private reactOnKeyInstructionChange(): void {\n        const noteEnums: NoteEnum[] = this.activeKeyInstruction.AlteratedNotes;\n        let keyAccidentalType: AccidentalEnum;\n        if (this.activeKeyInstruction.Key > 0) {\n            keyAccidentalType = AccidentalEnum.SHARP;\n        } else {\n            keyAccidentalType = AccidentalEnum.FLAT;\n        }\n        this.keySignatureNoteAlterationsDict.clear();\n        this.currentAlterationsComparedToKeyInstructionList.length = 0;\n        for (let octave: number = -9; octave < 9; octave++) {\n            for (let i: number = 0; i < noteEnums.length; i++) {\n                this.keySignatureNoteAlterationsDict.setValue(<number>noteEnums[i] + octave * 12, Pitch.HalfTonesFromAccidental(keyAccidentalType));\n            }\n        }\n        this.doCalculationsAtEndOfMeasure();\n    }\n}\n","import log from \"loglevel\";\nimport {ArgumentOutOfRangeException} from \"../Exceptions\";\nimport {PointF2D} from \"../../Common/DataObjects/PointF2D\";\nimport {SizeF2D} from \"../../Common/DataObjects/SizeF2D\";\nimport {RectangleF2D} from \"../../Common/DataObjects/RectangleF2D\";\nimport { StaffLineActivitySymbol } from \"./StaffLineActivitySymbol\";\nimport { EngravingRules } from \"./EngravingRules\";\nimport { GraphicalObject } from \"./GraphicalObject\";\n\n/**\n * A bounding box delimits an area on the 2D plane.\n * @param dataObject Graphical object where the bounding box will be attached\n * @param parent Parent bounding box of an object in a higher hierarchy position\n * @param connectChildToParent Create a child to parent relationship too. Will be true by default\n */\nexport class BoundingBox {\n    protected isSymbol: boolean = false;\n    protected relativePositionHasBeenSet: boolean = false;\n    protected xBordersHaveBeenSet: boolean = false;\n    protected yBordersHaveBeenSet: boolean = false;\n    protected absolutePosition: PointF2D = new PointF2D();\n    protected relativePosition: PointF2D = new PointF2D();\n    protected size: SizeF2D = new SizeF2D();\n    protected marginSize: SizeF2D = new SizeF2D();\n    protected upperLeftCorner: PointF2D = new PointF2D();\n    protected upperLeftMarginCorner: PointF2D = new PointF2D();\n    protected borderLeft: number = 0;\n    protected borderRight: number = 0;\n    protected borderTop: number = 0;\n    protected borderBottom: number = 0;\n    protected borderMarginLeft: number = 0;\n    protected borderMarginRight: number = 0;\n    protected borderMarginTop: number = 0;\n    protected borderMarginBottom: number = 0;\n    protected boundingRectangle: RectangleF2D;\n    protected boundingMarginRectangle: RectangleF2D;\n    protected childElements: BoundingBox[] = [];\n    protected parent: BoundingBox;\n    protected dataObject: Object;\n    /**\n     * Create a bounding box\n     * @param dataObject Graphical object where the bounding box will be attached\n     * @param parent Parent bounding box of an object in a higher hierarchy position\n     * @param isSymbol Defines the bounding box to be symbol thus not calculating its boundaries by itself. NOTE: Borders need to be set!\n     */\n    constructor(dataObject: Object = undefined, parent: BoundingBox = undefined, isSymbol: boolean = false) {\n        this.parent = parent;\n        this.dataObject = dataObject;\n        this.isSymbol = isSymbol;\n        this.xBordersHaveBeenSet = false;\n        this.yBordersHaveBeenSet = false;\n        if (parent) {\n            this.Parent = parent;\n        }\n    }\n\n    public get RelativePositionHasBeenSet(): boolean {\n        return this.relativePositionHasBeenSet;\n    }\n\n    public get XBordersHaveBeenSet(): boolean {\n        return this.xBordersHaveBeenSet;\n    }\n\n    public set XBordersHaveBeenSet(value: boolean) {\n        this.xBordersHaveBeenSet = value;\n    }\n\n    public get YBordersHaveBeenSet(): boolean {\n        return this.yBordersHaveBeenSet;\n    }\n\n    public set YBordersHaveBeenSet(value: boolean) {\n        this.yBordersHaveBeenSet = value;\n    }\n\n    public get AbsolutePosition(): PointF2D {\n        return this.absolutePosition;\n    }\n\n    public set AbsolutePosition(value: PointF2D) {\n        this.absolutePosition = value;\n    }\n\n    public get RelativePosition(): PointF2D {\n        return this.relativePosition;\n    }\n\n    public set RelativePosition(value: PointF2D) {\n        this.relativePosition = value;\n        this.relativePositionHasBeenSet = true;\n    }\n\n    public get Size(): SizeF2D {\n        return this.size;\n    }\n\n    public set Size(value: SizeF2D) {\n        this.size = value;\n    }\n\n    public get MarginSize(): SizeF2D {\n        return this.marginSize;\n    }\n\n    public get UpperLeftCorner(): PointF2D {\n        return this.upperLeftCorner;\n    }\n\n    public get UpperLeftMarginCorner(): PointF2D {\n        return this.upperLeftMarginCorner;\n    }\n\n    public get BorderLeft(): number {\n        return this.borderLeft;\n    }\n\n    public set BorderLeft(value: number) {\n        this.borderLeft = value;\n        this.calculateRectangle();\n    }\n\n    public get BorderRight(): number {\n        return this.borderRight;\n    }\n\n    public set BorderRight(value: number) {\n        this.borderRight = value;\n        this.calculateRectangle();\n    }\n\n    public get BorderTop(): number {\n        return this.borderTop;\n    }\n\n    public set BorderTop(value: number) {\n        this.borderTop = value;\n        this.calculateRectangle();\n    }\n\n    public get BorderBottom(): number {\n        return this.borderBottom;\n    }\n\n    public set BorderBottom(value: number) {\n        this.borderBottom = value;\n        this.calculateRectangle();\n    }\n\n    public get BorderMarginLeft(): number {\n        return this.borderMarginLeft > this.borderLeft ? this.borderLeft : this.borderMarginLeft;\n    }\n\n    public set BorderMarginLeft(value: number) {\n        this.borderMarginLeft = value;\n        this.calculateMarginRectangle();\n    }\n\n    public get BorderMarginRight(): number {\n        return this.borderMarginRight < this.borderRight ? this.borderRight : this.borderMarginRight;\n    }\n\n    public set BorderMarginRight(value: number) {\n        this.borderMarginRight = value;\n        this.calculateMarginRectangle();\n    }\n\n    public get BorderMarginTop(): number {\n        return this.borderMarginTop > this.borderTop ? this.borderTop : this.borderMarginTop;\n    }\n\n    public set BorderMarginTop(value: number) {\n        this.borderMarginTop = value;\n        this.calculateMarginRectangle();\n    }\n\n    public get BorderMarginBottom(): number {\n        return this.borderMarginBottom < this.borderBottom ? this.borderBottom : this.borderMarginBottom;\n    }\n\n    public set BorderMarginBottom(value: number) {\n        this.borderMarginBottom = value;\n        this.calculateMarginRectangle();\n    }\n\n    public get BoundingRectangle(): RectangleF2D {\n        return this.boundingRectangle;\n    }\n\n    public get BoundingMarginRectangle(): RectangleF2D {\n        return this.boundingMarginRectangle;\n    }\n\n    public get ChildElements(): BoundingBox[] {\n        return this.childElements;\n    }\n\n    public set ChildElements(value: BoundingBox[]) {\n        this.childElements = value;\n    }\n\n    public get Parent(): BoundingBox {\n        return this.parent;\n    }\n\n    public set Parent(value: BoundingBox) {\n        if (this.parent) {\n            // remove from old parent\n            const index: number = this.parent.ChildElements.indexOf(this, 0);\n            if (index > -1) {\n                this.parent.ChildElements.splice(index, 1);\n            }\n        }\n        this.parent = value;\n        // add to new parent\n        if (this.parent.ChildElements.indexOf(this) > -1) {\n            log.error(\"BoundingBox of \" + (this.dataObject.constructor as any).name +\n            \" already in children list of \" + (this.parent.dataObject.constructor as any).name + \"'s BoundingBox\");\n        } else {\n            this.parent.ChildElements.push(this);\n        }\n    }\n\n    public get DataObject(): Object {\n        return this.dataObject;\n    }\n\n\n    /**\n     * Get the center of a bounding box\n     * @param boundingBox Bounding box to check\n     */\n    public get Center(): PointF2D {\n        return new PointF2D(this.RelativePosition.x + (this.BorderMarginRight + this.BorderMarginLeft),\n                            this.RelativePosition.y + (this.BorderMarginBottom + this.BorderMarginTop));\n    }\n\n    public setAbsolutePositionFromParent(): void {\n        if (this.parent) {\n            this.absolutePosition.x = this.parent.AbsolutePosition.x + this.relativePosition.x;\n            this.absolutePosition.y = this.parent.AbsolutePosition.y + this.relativePosition.y;\n        } else {\n            this.absolutePosition = this.relativePosition;\n        }\n    }\n\n    /**\n     * Calculate the the absolute position by adding up all relative positions of all parents (including the own rel. pos.)\n     */\n    public calculateAbsolutePosition(): void {\n      this.absolutePosition.x = this.relativePosition.x;\n      this.absolutePosition.y = this.relativePosition.y;\n      let parent: BoundingBox = this.parent;\n      while (parent) {\n        this.absolutePosition.x += parent.relativePosition.x;\n        this.absolutePosition.y += parent.relativePosition.y;\n        parent = parent.parent;\n      }\n    }\n\n    /**\n     * This method calculates the Absolute Positions recursively\n     */\n    public calculateAbsolutePositionsRecursiveWithoutTopelement(): void {\n        this.absolutePosition.x = 0.0;\n        this.absolutePosition.y = 0.0;\n        for (let idx: number = 0, len: number = this.ChildElements.length; idx < len; ++idx) {\n            const child: BoundingBox = this.ChildElements[idx];\n            child.calculateAbsolutePositionsRecursive(this.absolutePosition.x, this.absolutePosition.y);\n        }\n    }\n\n    /**\n     * This method calculates the Absolute Positions recursively\n     * from the root element down to the leaf elements\n     * @param x\n     * @param y\n     */\n    public calculateAbsolutePositionsRecursive(x: number, y: number): void {\n        this.absolutePosition.x = this.relativePosition.x + x;\n        this.absolutePosition.y = this.relativePosition.y + y;\n        for (let idx: number = 0, len: number = this.ChildElements.length; idx < len; ++idx) {\n            const child: BoundingBox = this.ChildElements[idx];\n            child.calculateAbsolutePositionsRecursive(this.absolutePosition.x, this.absolutePosition.y);\n        }\n    }\n\n    /**\n     * calculates the absolute positions of all children of this boundingBox\n     */\n    public calculateAbsolutePositionsOfChildren(): void {\n      for (let idx: number = 0, len: number = this.ChildElements.length; idx < len; ++idx) {\n        const child: BoundingBox = this.ChildElements[idx];\n        child.calculateAbsolutePositionsRecursive(this.absolutePosition.x, this.absolutePosition.y);\n      }\n    }\n\n    /**\n     * This method calculates the BoundingBoxes\n     */\n    public calculateBoundingBox(): void {\n        if (this.childElements.length === 0) {\n            return;\n        }\n        for (let idx: number = 0, len: number = this.ChildElements.length; idx < len; ++idx) {\n            const childElement: BoundingBox = this.ChildElements[idx];\n            childElement.calculateBoundingBox();\n        }\n\n        // initialize with max/min values\n        let minLeft: number = Number.MAX_VALUE;\n        let maxRight: number = Number.MIN_VALUE;\n        let minTop: number = Number.MAX_VALUE;\n        let maxBottom: number = Number.MIN_VALUE;\n        let minMarginLeft: number = Number.MAX_VALUE;\n        let maxMarginRight: number = Number.MIN_VALUE;\n        let minMarginTop: number = Number.MAX_VALUE;\n        let maxMarginBottom: number = Number.MIN_VALUE;\n\n        // apart from symbol elements, where we initialize with the symbol's borders\n        if (this.isSymbol) {\n            minLeft = this.borderLeft;\n            maxRight = this.borderRight;\n            minTop = this.borderTop;\n            maxBottom = this.borderBottom;\n            minMarginLeft = this.borderMarginLeft;\n            maxMarginRight = this.borderMarginRight;\n            minMarginTop = this.borderMarginTop;\n            maxMarginBottom = this.borderMarginBottom;\n        }\n\n        // ChildElements will have their borders calculated, so calculate current borders\n        for (let idx: number = 0, len: number = this.ChildElements.length; idx < len; ++idx) {\n            const childElement: BoundingBox = this.ChildElements[idx];\n            minLeft = Math.min(minLeft, childElement.relativePosition.x + childElement.borderLeft);\n            maxRight = Math.max(maxRight, childElement.relativePosition.x + childElement.borderRight);\n            minTop = Math.min(minTop, childElement.relativePosition.y + childElement.borderTop);\n            maxBottom = Math.max(maxBottom, childElement.relativePosition.y + childElement.borderBottom);\n            minMarginLeft = Math.min(minMarginLeft, childElement.relativePosition.x + childElement.borderMarginLeft);\n            maxMarginRight = Math.max(maxMarginRight, childElement.relativePosition.x + childElement.borderMarginRight);\n            minMarginTop = Math.min(minMarginTop, childElement.relativePosition.y + childElement.borderMarginTop);\n            maxMarginBottom = Math.max(maxMarginBottom, childElement.relativePosition.y + childElement.borderMarginBottom);\n        }\n\n        // ChildElements will have their borders calculated, so calculate current borders\n        this.borderLeft = minLeft;\n        this.borderRight = maxRight;\n        this.borderTop = minTop;\n        this.borderBottom = maxBottom;\n        this.borderMarginLeft = minMarginLeft;\n        this.borderMarginRight = maxMarginRight;\n        this.borderMarginTop = minMarginTop;\n        this.borderMarginBottom = maxMarginBottom;\n        this.calculateRectangle();\n        this.calculateMarginRectangle();\n        this.xBordersHaveBeenSet = true;\n        this.yBordersHaveBeenSet = true;\n    }\n\n    public calculateTopBottomBorders(): void {\n        if (this.childElements.length === 0) {\n            return;\n        }\n        for (let idx: number = 0, len: number = this.ChildElements.length; idx < len; ++idx) {\n            const childElement: BoundingBox = this.ChildElements[idx];\n            childElement.calculateTopBottomBorders();\n        }\n        let minTop: number = Number.MAX_VALUE;\n        let maxBottom: number = Number.MIN_VALUE;\n        let minMarginTop: number = Number.MAX_VALUE;\n        let maxMarginBottom: number = Number.MIN_VALUE;\n        if (this.yBordersHaveBeenSet) {\n            minTop = this.borderTop;\n            maxBottom = this.borderBottom;\n            minMarginTop = this.borderMarginTop;\n            maxMarginBottom = this.borderMarginBottom;\n        }\n        for (let idx: number = 0, len: number = this.ChildElements.length; idx < len; ++idx) {\n            const childElement: BoundingBox = this.ChildElements[idx];\n            minTop = Math.min(minTop, childElement.relativePosition.y + childElement.borderTop);\n            if (!EngravingRules.FixStafflineBoundingBox || !(childElement.dataObject instanceof StaffLineActivitySymbol)) {\n                maxBottom = Math.max(maxBottom, childElement.relativePosition.y + childElement.borderBottom);\n                // TODO there's a problem with the bottom bounding box of many stafflines, often caused by StaffLineActivitySymbol,\n                // often leading to the page SVG canvas being unnecessarily long in y-direction. This seems to be remedied by this workaround.\n                // see #643\n            }\n            minMarginTop = Math.min(minMarginTop, childElement.relativePosition.y + childElement.borderMarginTop);\n            maxMarginBottom = Math.max(maxMarginBottom, childElement.relativePosition.y + childElement.borderMarginBottom);\n        }\n        this.borderTop = minTop;\n        this.borderBottom = maxBottom;\n        this.borderMarginTop = minMarginTop;\n        this.borderMarginBottom = maxMarginBottom;\n        this.calculateRectangle();\n        this.calculateMarginRectangle();\n    }\n\n    /**\n     * This method computes the first non-overlapping position in the placementPsi Element for the current (this) positionAndShapeInfo\n     * @param placementPsi\n     * @param direction\n     * @param position\n     */\n    public computeNonOverlappingPositionWithMargin(placementPsi: BoundingBox, direction: ColDirEnum, position: PointF2D): void {\n        this.RelativePosition = new PointF2D(position.x, position.y);\n        this.setAbsolutePositionFromParent();\n        let currentPosition: number = 0.0;\n        let hasBeenMoved: boolean = false;\n        do {\n            switch (direction) {\n                case ColDirEnum.Left:\n                case ColDirEnum.Right:\n                    currentPosition = this.relativePosition.x;\n                    placementPsi.calculateMarginPositionAlongDirection(this, direction);\n                    hasBeenMoved = Math.abs(currentPosition - this.relativePosition.x) > 0.001;\n                    break;\n                case ColDirEnum.Up:\n                case ColDirEnum.Down:\n                    currentPosition = this.relativePosition.y;\n                    placementPsi.calculateMarginPositionAlongDirection(this, direction);\n                    hasBeenMoved = Math.abs(currentPosition - this.relativePosition.y) > 0.001;\n                    break;\n                default:\n                    throw new ArgumentOutOfRangeException(\"direction\");\n            }\n        }\n        while (hasBeenMoved);\n    }\n\n    /**\n     * This method detects a collision (without margins)\n     * @param psi\n     * @returns {boolean}\n     */\n    public collisionDetection(psi: BoundingBox): boolean {\n        const overlapWidth: number = Math.min(this.AbsolutePosition.x + this.borderRight, psi.absolutePosition.x + psi.borderRight)\n            - Math.max(this.AbsolutePosition.x + this.borderLeft, psi.absolutePosition.x + psi.borderLeft);\n        const overlapHeight: number = Math.min(this.AbsolutePosition.y + this.borderBottom, psi.absolutePosition.y + psi.borderBottom)\n            - Math.max(this.AbsolutePosition.y + this.borderTop, psi.absolutePosition.y + psi.borderTop);\n        if (overlapWidth > 0 && overlapHeight > 0) {\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * This method checks if the given Psi's Margins lie inside the current Psi's Margins.\n     * @param psi\n     * @returns {boolean}\n     */\n    public liesInsideBorders(psi: BoundingBox): boolean {\n        const leftBorderInside: boolean = (this.AbsolutePosition.x + this.borderLeft) <= (psi.absolutePosition.x + psi.borderLeft)\n            && (psi.absolutePosition.x + psi.borderLeft) <= (this.AbsolutePosition.x + this.borderRight);\n        const rightBorderInside: boolean = (this.AbsolutePosition.x + this.borderLeft) <= (psi.absolutePosition.x + psi.borderRight)\n            && (psi.absolutePosition.x + psi.borderRight) <= (this.AbsolutePosition.x + this.borderRight);\n        if (leftBorderInside && rightBorderInside) {\n            const topBorderInside: boolean = (this.AbsolutePosition.y + this.borderTop) <= (psi.absolutePosition.y + psi.borderTop)\n                && (psi.absolutePosition.y + psi.borderTop) <= (this.AbsolutePosition.y + this.borderBottom);\n            const bottomBorderInside: boolean = (this.AbsolutePosition.y + this.borderTop) <= (psi.absolutePosition.y + psi.borderBottom)\n                && (psi.absolutePosition.y + psi.borderBottom) <= (this.AbsolutePosition.y + this.borderBottom);\n            if (topBorderInside && bottomBorderInside) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    public pointLiesInsideBorders(position: PointF2D): boolean {\n        const xInside: boolean = (this.AbsolutePosition.x + this.borderLeft) <= position.x && position.x <= (this.AbsolutePosition.x + this.borderRight);\n        if (xInside) {\n            const yInside: boolean = (this.AbsolutePosition.y + this.borderTop) <= position.y && position.y <= (this.AbsolutePosition.y + this.borderBottom);\n            if (yInside) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * This method detects a collision (margin-wide)\n     * @param psi\n     * @returns {boolean}\n     */\n    public marginCollisionDetection(psi: BoundingBox): boolean {\n        const overlapWidth: number = Math.min(this.AbsolutePosition.x + this.borderMarginRight, psi.absolutePosition.x + psi.borderMarginRight)\n            - Math.max(this.AbsolutePosition.x + this.borderMarginLeft, psi.absolutePosition.x + psi.borderMarginLeft);\n        const overlapHeight: number = Math.min(this.AbsolutePosition.y + this.borderMarginBottom, psi.absolutePosition.y + psi.borderMarginBottom)\n            - Math.max(this.AbsolutePosition.y + this.borderMarginTop, psi.absolutePosition.y + psi.borderMarginTop);\n        if (overlapWidth > 0 && overlapHeight > 0) {\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * This method checks if the given Psi's Margins lie inside the current Psi's Margins\n     * @param psi\n     * @returns {boolean}\n     */\n    public liesInsideMargins(psi: BoundingBox): boolean {\n        const leftMarginInside: boolean = (this.AbsolutePosition.x + this.borderMarginLeft) <= (psi.absolutePosition.x + psi.borderMarginLeft)\n            && (psi.absolutePosition.x + psi.borderMarginLeft) <= (this.AbsolutePosition.x + this.borderMarginRight);\n        const rightMarginInside: boolean = (this.AbsolutePosition.x + this.borderMarginLeft) <= (psi.absolutePosition.x + psi.borderMarginRight)\n            && (psi.absolutePosition.x + psi.borderMarginRight) <= (this.AbsolutePosition.x + this.borderMarginRight);\n        if (leftMarginInside && rightMarginInside) {\n            const topMarginInside: boolean = (this.AbsolutePosition.y + this.borderMarginTop) <= (psi.absolutePosition.y + psi.borderMarginTop)\n                && (psi.absolutePosition.y + psi.borderMarginTop) <= (this.AbsolutePosition.y + this.borderMarginBottom);\n            const bottomMarginInside: boolean = (this.AbsolutePosition.y + this.borderMarginTop) <= (psi.absolutePosition.y + psi.borderMarginBottom)\n                && (psi.absolutePosition.y + psi.borderMarginBottom) <= (this.AbsolutePosition.y + this.borderMarginBottom);\n            if (topMarginInside && bottomMarginInside) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    public pointLiesInsideMargins(position: PointF2D): boolean {\n        const xInside: boolean = (this.AbsolutePosition.x + this.borderMarginLeft) <= position.x\n            && position.x <= (this.AbsolutePosition.x + this.borderMarginRight);\n        if (xInside) {\n            const yInside: boolean = (this.AbsolutePosition.y + this.borderMarginTop) <= position.y\n                && position.y <= (this.AbsolutePosition.y + this.borderMarginBottom);\n            if (yInside) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * This method computes the first non-overlapping position in the placementPsi Element for the current (this) positionAndShapeInfo\n     * @param placementPsi\n     * @param direction\n     * @param position\n     */\n    public computeNonOverlappingPosition(placementPsi: BoundingBox, direction: ColDirEnum, position: PointF2D): void {\n        this.RelativePosition = new PointF2D(position.x, position.y);\n        this.setAbsolutePositionFromParent();\n        let currentPosition: number = 0.0;\n        let hasBeenMoved: boolean = false;\n        do {\n            switch (direction) {\n                case ColDirEnum.Left:\n                case ColDirEnum.Right:\n                    currentPosition = this.relativePosition.x;\n                    placementPsi.calculatePositionAlongDirection(this, direction);\n                    hasBeenMoved = Math.abs(currentPosition - this.relativePosition.x) > 0.0001;\n                    break;\n                case ColDirEnum.Up:\n                case ColDirEnum.Down:\n                    currentPosition = this.relativePosition.y;\n                    placementPsi.calculatePositionAlongDirection(this, direction);\n                    hasBeenMoved = Math.abs(currentPosition - this.relativePosition.y) > 0.0001;\n                    break;\n                default:\n                    throw new ArgumentOutOfRangeException(\"direction\");\n            }\n        } while (hasBeenMoved); // as long as the element is moved\n    }\n\n    public getClickedObjectOfType<T>(clickPosition: PointF2D): T {\n        const obj: Object = this.dataObject;\n        if (this.pointLiesInsideBorders(clickPosition) && (<T>obj)) {\n            return (obj as T);\n        }\n        for (let idx: number = 0, len: number = this.childElements.length; idx < len; ++idx) {\n            const psi: BoundingBox = this.childElements[idx];\n            const innerObject: Object = psi.getClickedObjectOfType<T>(clickPosition);\n            if (innerObject) {\n                return (innerObject as T);\n            }\n        }\n        return undefined;\n    }\n\n    //Generics don't work like this in TS. Casting doesn't filter out objects.\n    //instanceof doesn't work either with generic types. Hopefully instanceof becomes available at some point, for now we have to do annoyingly\n    //specific implementations after calling this to filter the objects.\n    public getObjectsInRegion<T extends GraphicalObject>(region: BoundingBox, liesInside: boolean = true,\n                                                         className: string = GraphicalObject.name): T[] {\n        let result: T[] = [];\n        for (const child of this.childElements) {\n            result = result.concat(child.getObjectsInRegion<T>(region, liesInside, className));\n        }\n\n        //if (!result || result.length === 0) {\n        // audioplayer: this.dataObject as T\n        if (this.dataObject && (this.dataObject as T).isInstanceOfClass(className)) {\n            if (liesInside) {\n                if (region.liesInsideBorders(this)) {\n                    result.push(this.dataObject as T);\n                }\n            } else {\n                if (region.collisionDetection(this)) {\n                    result.push(this.dataObject as T);\n                }\n            }\n            // FIXME Andrea: add here \"return []\"?\n        }\n        //}\n        return result;\n        //return this.childElements.SelectMany(psi => psi.getObjectsInRegion<T>(region, liesInside));\n    }\n\n    protected calculateRectangle(): void {\n        this.upperLeftCorner = new PointF2D(this.BorderLeft, this.BorderTop);\n        this.size = new SizeF2D(this.BorderRight - this.BorderLeft, this.BorderBottom - this.BorderTop);\n        this.boundingRectangle = RectangleF2D.createFromLocationAndSize(this.upperLeftCorner, this.size);\n    }\n\n    protected calculateMarginRectangle(): void {\n        this.upperLeftMarginCorner = new PointF2D(this.BorderMarginLeft, this.BorderMarginTop);\n        this.marginSize = new SizeF2D(this.BorderMarginRight - this.BorderMarginLeft, this.BorderMarginBottom - this.BorderMarginTop);\n        this.boundingMarginRectangle = RectangleF2D.createFromLocationAndSize(this.upperLeftMarginCorner, this.marginSize);\n    }\n\n    /**\n     * This method calculates the margin border along the given direction so that no collision takes place along this direction\n     * @param toBePlaced\n     * @param direction\n     */\n    private calculateMarginPositionAlongDirection(toBePlaced: BoundingBox, direction: ColDirEnum): void {\n        // now this will be the \"known\" Element, about to get bigger with the toBePlaced\n        // eg toBePlaced will always be in the PositionAndShape hierarchy a Child of this\n        // example: this = StaffEntry, toBePlaced = Accidental\n\n        // logical return\n        if (this === toBePlaced) {\n            return;\n        }\n\n        // check for collision only at symbols and return border\n        if (this.isSymbol && this.marginCollisionDetection(toBePlaced)) {\n            let shiftDistance: number = 0;\n            switch (direction) {\n                case ColDirEnum.Left:\n                    shiftDistance = (this.absolutePosition.x + this.borderMarginLeft) - (toBePlaced.absolutePosition.x + toBePlaced.borderMarginRight);\n                    toBePlaced.relativePosition.x += shiftDistance;\n                    toBePlaced.absolutePosition.x += shiftDistance;\n                    return;\n                case ColDirEnum.Right:\n                    shiftDistance = (this.absolutePosition.x + this.borderMarginRight) - (toBePlaced.absolutePosition.x + toBePlaced.borderMarginLeft);\n                    toBePlaced.relativePosition.x += shiftDistance;\n                    toBePlaced.absolutePosition.x += shiftDistance;\n                    return;\n                case ColDirEnum.Up:\n                    shiftDistance = (this.absolutePosition.y + this.borderMarginTop) - (toBePlaced.absolutePosition.y + toBePlaced.borderMarginBottom);\n                    toBePlaced.relativePosition.y += shiftDistance;\n                    toBePlaced.absolutePosition.y += shiftDistance;\n                    return;\n                case ColDirEnum.Down:\n                    shiftDistance = (this.absolutePosition.y + this.borderMarginBottom) - (toBePlaced.absolutePosition.y + toBePlaced.borderMarginTop);\n                    toBePlaced.relativePosition.y += shiftDistance;\n                    toBePlaced.absolutePosition.y += shiftDistance;\n                    return;\n                default:\n                    throw new ArgumentOutOfRangeException(\"direction\");\n            }\n        }\n\n        // perform check for all children iteratively and return border from children symbols\n        for (let idx: number = 0, len: number = this.ChildElements.length; idx < len; ++idx) {\n            const childElement: BoundingBox = this.ChildElements[idx];\n            childElement.calculateMarginPositionAlongDirection(toBePlaced, direction);\n        }\n    }\n\n    /**\n     * This method calculates the border along the given direction so that no collision takes place along this direction\n     * @param toBePlaced\n     * @param direction\n     */\n    private calculatePositionAlongDirection(toBePlaced: BoundingBox, direction: ColDirEnum): void {\n        // now this will be the \"known\" Element, about to get bigger with the toBePlaced\n        // eg toBePlaced will always be in the PositionAndShape hierarchy a Child of this\n        // example: this = StaffEntry, toBePlaced = Accidental\n\n        // logical return\n        if (this === toBePlaced) {\n            return;\n        }\n\n        // check for collision only at symbols and return border\n        if (this.isSymbol && this.collisionDetection(toBePlaced)) {\n            let shiftDistance: number;\n            switch (direction) {\n                case ColDirEnum.Left:\n                    shiftDistance = (this.absolutePosition.x + this.borderLeft) - (toBePlaced.absolutePosition.x + toBePlaced.borderRight);\n                    toBePlaced.relativePosition.x += shiftDistance;\n                    toBePlaced.absolutePosition.x += shiftDistance;\n                    return;\n                case ColDirEnum.Right:\n                    shiftDistance = (this.absolutePosition.x + this.borderRight) - (toBePlaced.absolutePosition.x + toBePlaced.borderLeft);\n                    toBePlaced.relativePosition.x += shiftDistance;\n                    toBePlaced.absolutePosition.x += shiftDistance;\n                    return;\n                case ColDirEnum.Up:\n                    shiftDistance = (this.absolutePosition.y + this.borderTop) - (toBePlaced.absolutePosition.y + toBePlaced.borderBottom);\n                    toBePlaced.relativePosition.y += shiftDistance;\n                    toBePlaced.absolutePosition.y += shiftDistance;\n                    return;\n                case ColDirEnum.Down:\n                    shiftDistance = (this.absolutePosition.y + this.borderBottom) - (toBePlaced.absolutePosition.y + toBePlaced.borderTop);\n                    toBePlaced.relativePosition.y += shiftDistance;\n                    toBePlaced.absolutePosition.y += shiftDistance;\n                    return;\n                default:\n                    throw new ArgumentOutOfRangeException(\"direction\");\n            }\n        }\n\n        // perform check for all children iteratively and return border from children symbols\n        for (let idx: number = 0, len: number = this.ChildElements.length; idx < len; ++idx) {\n            const childElement: BoundingBox = this.ChildElements[idx];\n            childElement.calculatePositionAlongDirection(toBePlaced, direction);\n        }\n    }\n}\n\nexport enum ColDirEnum {\n    Left = 0,\n    Right = 1,\n    Up = 2,\n    Down = 3\n}\n","import {GraphicalObject} from \"./GraphicalObject\";\n\nexport class Clickable extends GraphicalObject {\n    public dataObject: Object;\n}\n","// import * as Collections from \"typescript-collections\";\n// import Collections = require(\"typescript-collections\");\nimport { Dictionary } from \"typescript-collections\";\n\n/**\n * The supported styles to draw a rectangle on the music sheet\n */\nexport enum OutlineAndFillStyleEnum {\n    BaseWritingColor,\n    FollowingCursor,\n    AlternativeFollowingCursor,\n    PlaybackCursor,\n    Highlighted,\n    ErrorUnderlay,\n    Selected,\n    SelectionSymbol,\n    DebugColor1,\n    DebugColor2,\n    DebugColor3,\n    SplitScreenDivision,\n    GreyTransparentOverlay,\n    MarkedArea1,\n    MarkedArea2,\n    MarkedArea3,\n    MarkedArea4,\n    MarkedArea5,\n    MarkedArea6,\n    MarkedArea7,\n    MarkedArea8,\n    MarkedArea9,\n    MarkedArea10,\n    Comment1,\n    Comment2,\n    Comment3,\n    Comment4,\n    Comment5,\n    Comment6,\n    Comment7,\n    Comment8,\n    Comment9,\n    Comment10\n}\n\nexport const OUTLINE_AND_FILL_STYLE_DICT: Dictionary<OutlineAndFillStyleEnum, string> =\n    new Dictionary<OutlineAndFillStyleEnum, string>();\nOUTLINE_AND_FILL_STYLE_DICT.setValue(OutlineAndFillStyleEnum.BaseWritingColor, \"Thistle\");\nOUTLINE_AND_FILL_STYLE_DICT.setValue(OutlineAndFillStyleEnum.FollowingCursor, \"Aqua\");\nOUTLINE_AND_FILL_STYLE_DICT.setValue(OutlineAndFillStyleEnum.AlternativeFollowingCursor, \"Azure\");\nOUTLINE_AND_FILL_STYLE_DICT.setValue(OutlineAndFillStyleEnum.PlaybackCursor, \"Bisque\");\nOUTLINE_AND_FILL_STYLE_DICT.setValue(OutlineAndFillStyleEnum.Highlighted, \"CadetBlue\");\nOUTLINE_AND_FILL_STYLE_DICT.setValue(OutlineAndFillStyleEnum.ErrorUnderlay, \"DarkBlue\");\nOUTLINE_AND_FILL_STYLE_DICT.setValue(OutlineAndFillStyleEnum.Selected, \"DarkGoldenRod\");\nOUTLINE_AND_FILL_STYLE_DICT.setValue(OutlineAndFillStyleEnum.SelectionSymbol, \"BlanchedAlmond\");\nOUTLINE_AND_FILL_STYLE_DICT.setValue(OutlineAndFillStyleEnum.DebugColor1, \"Chartreuse\");\nOUTLINE_AND_FILL_STYLE_DICT.setValue(OutlineAndFillStyleEnum.DebugColor2, \"DarkGreen\");\nOUTLINE_AND_FILL_STYLE_DICT.setValue(OutlineAndFillStyleEnum.DebugColor3, \"DarkOrange\");\nOUTLINE_AND_FILL_STYLE_DICT.setValue(OutlineAndFillStyleEnum.SplitScreenDivision, \"FireBrick\");\nOUTLINE_AND_FILL_STYLE_DICT.setValue(OutlineAndFillStyleEnum.GreyTransparentOverlay, \"DarkSalmon\");\nOUTLINE_AND_FILL_STYLE_DICT.setValue(OutlineAndFillStyleEnum.MarkedArea1, \"DarkSeaGreen\");\nOUTLINE_AND_FILL_STYLE_DICT.setValue(OutlineAndFillStyleEnum.MarkedArea2, \"DarkOrchid\");\nOUTLINE_AND_FILL_STYLE_DICT.setValue(OutlineAndFillStyleEnum.MarkedArea3, \"Aquamarine\");\nOUTLINE_AND_FILL_STYLE_DICT.setValue(OutlineAndFillStyleEnum.MarkedArea4, \"DarkKhaki\");\nOUTLINE_AND_FILL_STYLE_DICT.setValue(OutlineAndFillStyleEnum.MarkedArea5, \"ForestGreen\");\nOUTLINE_AND_FILL_STYLE_DICT.setValue(OutlineAndFillStyleEnum.MarkedArea6, \"AliceBlue\");\nOUTLINE_AND_FILL_STYLE_DICT.setValue(OutlineAndFillStyleEnum.MarkedArea7, \"DeepPink\");\nOUTLINE_AND_FILL_STYLE_DICT.setValue(OutlineAndFillStyleEnum.MarkedArea8, \"Coral\");\nOUTLINE_AND_FILL_STYLE_DICT.setValue(OutlineAndFillStyleEnum.MarkedArea9, \"DarkOliveGreen\");\nOUTLINE_AND_FILL_STYLE_DICT.setValue(OutlineAndFillStyleEnum.MarkedArea10, \"Chocolate\");\nOUTLINE_AND_FILL_STYLE_DICT.setValue(OutlineAndFillStyleEnum.Comment1, \"DodgerBlue\");\nOUTLINE_AND_FILL_STYLE_DICT.setValue(OutlineAndFillStyleEnum.Comment2, \"Blue\");\nOUTLINE_AND_FILL_STYLE_DICT.setValue(OutlineAndFillStyleEnum.Comment3, \"Beige\");\nOUTLINE_AND_FILL_STYLE_DICT.setValue(OutlineAndFillStyleEnum.Comment4, \"Crimson\");\nOUTLINE_AND_FILL_STYLE_DICT.setValue(OutlineAndFillStyleEnum.Comment5, \"Fuchsia\");\nOUTLINE_AND_FILL_STYLE_DICT.setValue(OutlineAndFillStyleEnum.Comment6, \"Brown\");\nOUTLINE_AND_FILL_STYLE_DICT.setValue(OutlineAndFillStyleEnum.Comment7, \"BlanchedAlmond\");\nOUTLINE_AND_FILL_STYLE_DICT.setValue(OutlineAndFillStyleEnum.Comment8, \"CornflowerBlue\");\nOUTLINE_AND_FILL_STYLE_DICT.setValue(OutlineAndFillStyleEnum.Comment9, \"Cornsilk\");\nOUTLINE_AND_FILL_STYLE_DICT.setValue(OutlineAndFillStyleEnum.Comment10, \"DarkGrey\");\n\nexport enum StyleSets {\n    MarkedArea,\n    Comment\n}\n\n/**\n * The layers which one can draw on (not supported)\n */\nexport enum GraphicalLayers {\n    Background,\n    Highlight,\n    MeasureError,\n    SelectionSymbol,\n    Cursor,\n    PSI_Debug,\n    Notes,\n    Comment,\n    Debug_above\n}\n\nexport enum NoteState {\n    Normal,\n    Selected,\n    Follow_Confirmed,\n    QFeedback_NotFound,\n    QFeedback_OK,\n    QFeedback_Perfect,\n    Debug1,\n    Debug2,\n    Debug3\n}\n\nexport enum AutoColorSet {\n    /* different (boomwhacker-like) color set*/\n    C = \"#d82c6b\",\n    D = \"#F89D15\",\n    E = \"#FFE21A\",\n    F = \"#4dbd5c\",\n    G = \"#009D96\",\n    A = \"#43469d\",\n    B = \"#76429c\",\n    Rest = \"#000000\"\n\n    // color set from MuseScore Color notehead plugin version 1.1 by Werner Schweer and others\n    /*C = \"#eeee00\",\n    D = \"#9b30ff\",\n    E = \"#ee9a00\",\n    F = \"#8b4513\",\n    G = \"#ff0000\",\n    A = \"#1e90ff\",\n    B = \"#00ff00\"*/\n}\n","export enum DrawingMode {\n    All,\n    NoOverlays,\n    Leadsheet\n}\n\nexport enum MusicSymbolDrawingStyle {\n    Normal,\n    Disabled,\n    Selected,\n    Clickable,\n    PlaybackSymbols,\n    FollowSymbols,\n    QFeedbackNotFound,\n    QFeedbackOk,\n    QFeedbackPerfect,\n    Debug1,\n    Debug2,\n    Debug3\n}\n\nexport enum PhonicScoreModes {\n    Following,\n    Midi,\n    Manual\n}\n","import { EngravingRules } from \"./EngravingRules\";\nimport { PlacementEnum } from \"../VoiceData/Expressions/AbstractExpression\";\n\nexport enum ColoringModes {\n    XML = 0,\n    AutoColoring = 1,\n    CustomColorSet = 2\n}\n\nexport enum DrawingParametersEnum {\n    allon = \"allon\",\n    compact = \"compact\",\n    compacttight = \"compacttight\",\n    default = \"default\",\n    leadsheet = \"leadsheet\",\n    preview = \"preview\",\n    thumbnail = \"thumbnail\",\n}\n\n/** Internal drawing/rendering parameters and broad modes like compact and thumbnail. Overlap with EngravingRules. */\nexport class DrawingParameters {\n    /** will set other settings if changed with set method */\n    private drawingParametersEnum: DrawingParametersEnum;\n    private rules: EngravingRules = new EngravingRules();\n    public drawHighlights: boolean;\n    public drawErrors: boolean;\n    public drawSelectionStartSymbol: boolean;\n    public drawSelectionEndSymbol: boolean;\n    public drawCursors: boolean;\n    public drawActivitySymbols: boolean;\n    public drawScrollIndicator: boolean;\n    public drawComments: boolean;\n    public drawMarkedAreas: boolean;\n    public drawTitle: boolean = true;\n    public drawSubtitle: boolean = true;\n    public drawLyricist: boolean = true;\n    public drawComposer: boolean = true;\n    public drawCredits: boolean = true;\n    public drawPartNames: boolean = true;\n    public coloringMode: ColoringModes;\n    public fingeringPosition: PlacementEnum = PlacementEnum.Left;\n    /** Draw notes set to be invisible (print-object=\"no\" in XML). */\n    public drawHiddenNotes: boolean = false;\n\n    constructor(drawingParameters: DrawingParametersEnum = DrawingParametersEnum.default) {\n        this.DrawingParametersEnum = drawingParameters;\n    }\n\n    /** Sets drawing parameters enum and changes settings flags accordingly. */\n    public set DrawingParametersEnum(drawingParametersEnum: DrawingParametersEnum) {\n        this.drawingParametersEnum = drawingParametersEnum;\n        switch (drawingParametersEnum) {\n            case DrawingParametersEnum.allon:\n                this.setForAllOn();\n                break;\n            case DrawingParametersEnum.thumbnail:\n                this.setForThumbnail();\n                break;\n            case DrawingParametersEnum.leadsheet:\n                this.setForLeadsheet();\n                break;\n            case DrawingParametersEnum.compact:\n                this.setForCompactMode();\n                break;\n            case DrawingParametersEnum.compacttight:\n                this.setForCompactTightMode();\n                break;\n            case DrawingParametersEnum.default:\n            default:\n                this.setForDefault();\n        }\n    }\n\n    public get DrawingParametersEnum(): DrawingParametersEnum {\n        return this.drawingParametersEnum;\n    }\n\n    public setForAllOn(): void {\n        this.drawHighlights = true;\n        this.drawErrors = true;\n        this.drawSelectionStartSymbol = true;\n        this.drawSelectionEndSymbol = true;\n        this.drawCursors = true;\n        this.drawActivitySymbols = true;\n        this.drawScrollIndicator = true;\n        this.drawComments = true;\n        this.drawMarkedAreas = true;\n        this.DrawTitle = true;\n        this.DrawSubtitle = true;\n        this.DrawComposer = true;\n        this.DrawLyricist = true;\n        this.drawCredits = true;\n        this.DrawPartNames = true;\n        this.drawHiddenNotes = true;\n        this.rules.CompactMode = false;\n    }\n\n    public setForDefault(): void {\n        this.rules.loadDefaultValues(); // this is not ideal, but it's hard to reset compactTight mode properly\n        this.setForAllOn();\n        this.drawHiddenNotes = false;\n    }\n\n    public setForThumbnail(): void {\n        this.drawHighlights = false;\n        this.drawErrors = false;\n        this.drawSelectionStartSymbol = false;\n        this.drawSelectionStartSymbol = false;\n        this.drawCursors = false;\n        this.drawActivitySymbols = false;\n        this.drawScrollIndicator = false;\n        this.drawComments = true;\n        this.drawMarkedAreas = true;\n        this.drawHiddenNotes = false;\n    }\n\n    public setForCompactMode(): void {\n        // this.setForDefault(); // this would reset all EngravingRules to default values.\n        this.rules.CompactMode = true;\n        this.DrawCredits = false; // sets DrawComposer, DrawTitle, DrawLyricist to false\n        // this.DrawPartNames = true; // unnecessary\n        this.drawHiddenNotes = false;\n    }\n\n    public setForCompactTightMode(): void {\n        this.setForCompactMode(); // also sets CompactMode = true\n        this.DrawPartNames = false;\n\n        this.rules.VoiceSpacingMultiplierVexflow = 0.65;\n        this.rules.VoiceSpacingAddendVexflow = 2.0;\n\n        // tight rendering mode, lower margins and safety distances between systems, staffs etc. may cause overlap.\n        // these options can afterwards be finetuned by setting osmd.rules.BetweenStaffDistance for example\n        this.rules.MinSkyBottomDistBetweenStaves = 1.0; // default 1.0. this can cause collisions with slurs and dynamics sometimes\n        this.rules.MinSkyBottomDistBetweenSystems = 1.0; // default 5.0\n        // note that this.rules === osmd.rules, since it's passed as a reference\n\n        this.rules.BetweenStaffDistance = 2.5;\n        this.rules.StaffDistance = 3.5;\n        this.rules.MinimumDistanceBetweenSystems = 1;\n        // this.rules.PageTopMargin = 0.0; // see this.rules.PageTopMarginNarrow used in compact mode\n        this.rules.PageBottomMargin = 0.0;\n        this.rules.PageLeftMargin = 2.0;\n        this.rules.PageRightMargin = 2.0;\n        // this.BetweenStaffDistance = 2.5 // etc needs to be set in OSMD.rules\n        // this.StaffDistance = 3.5\n        // this.MinimumDistanceBetweenSystems = 1\n    }\n\n    public setForLeadsheet(): void {\n        this.drawHighlights = false;\n        this.drawErrors = false;\n        this.drawSelectionStartSymbol = true;\n        this.drawSelectionEndSymbol = true;\n        this.drawCursors = true;\n        this.drawActivitySymbols = false;\n        this.drawScrollIndicator = true;\n        this.drawComments = true;\n        this.drawMarkedAreas = true;\n    }\n\n    //#region GETTER / SETTER\n    public get DrawCredits(): boolean {\n        return this.drawCredits;\n    }\n\n    public set DrawCredits(value: boolean) {\n        this.drawCredits = value;\n        this.DrawComposer = value;\n        this.DrawTitle = value;\n        this.DrawSubtitle = value;\n        this.DrawLyricist = value;\n    }\n    // TODO these drawCredits settings are duplicate in drawingParameters and EngravingRules. Maybe we only need them in EngravingRules.\n    // this sets the parameter in DrawingParameters, which in turn sets the parameter in EngravingRules.\n    // see settings below that don't call drawingParameters for the immediate approach.\n    // on the other hand, DrawingParameters has the added option of setting broad modes (e.g. compact), though they aren't that useful\n\n    public get DrawTitle(): boolean {\n        return this.drawTitle;\n    }\n\n    /** Enable or disable drawing the Title of the piece. If disabled, will disable drawing Subtitle as well. */\n    public set DrawTitle(value: boolean) {\n        this.drawTitle = value;\n        this.rules.RenderTitle = value;\n        if (!value) { // don't draw subtitle if title isn't drawn\n            this.DrawSubtitle = false;\n        }\n    }\n\n    public get DrawSubtitle(): boolean {\n        return this.drawSubtitle;\n    }\n\n    /** Enable or disable drawing the Subtitle of the piece. If enabled, will enable drawing Title as well. */\n    public set DrawSubtitle(value: boolean) {\n        this.drawSubtitle = value;\n        this.rules.RenderSubtitle = value;\n        if (value) {\n            this.DrawTitle = true; // if subtitle is drawn, title needs to be drawn as well\n        }\n    }\n\n    public get DrawComposer(): boolean {\n        return this.drawComposer;\n    }\n\n    /** Enable or disable drawing a label for the Composer of the piece. */\n    public set DrawComposer(value: boolean) {\n        this.drawComposer = value;\n        this.rules.RenderComposer = value;\n    }\n\n    public get DrawLyricist(): boolean {\n        return this.drawLyricist;\n    }\n\n    public set DrawLyricist(value: boolean) {\n        this.drawLyricist = value;\n        this.rules.RenderLyricist = value;\n    }\n\n    public get DrawPartNames(): boolean {\n        return this.drawPartNames;\n    }\n\n    public set DrawPartNames(value: boolean) {\n        this.drawPartNames = value;\n        this.rules.RenderPartNames = value;\n        if (!this.rules.RenderPartNames) {\n            this.rules.RenderPartAbbreviations = false;\n        }\n    }\n\n    public get FingeringPosition(): PlacementEnum {\n        return this.fingeringPosition;\n    }\n\n    public set FingeringPosition(value: PlacementEnum) {\n        this.fingeringPosition = value;\n        this.rules.FingeringPosition = value;\n    }\n\n    public get Rules(): EngravingRules {\n        return this.rules;\n    }\n\n    public set Rules(value: EngravingRules) {\n        this.rules = value;\n    }\n}\n","import { PagePlacementEnum } from \"./GraphicalMusicPage\";\n//import {MusicSymbol} from \"./MusicSymbol\";\nimport log from \"loglevel\";\nimport { TextAlignmentEnum } from \"../../Common/Enums/TextAlignment\";\nimport { PlacementEnum } from \"../VoiceData/Expressions/AbstractExpression\";\nimport {\n    AutoBeamOptions,\n    AlignRestOption,\n    FillEmptyMeasuresWithWholeRests,\n    SkyBottomLineBatchCalculatorBackendType\n} from \"../../OpenSheetMusicDisplay/OSMDOptions\";\nimport { ColoringModes as ColoringMode } from \"./DrawingParameters\";\nimport { Dictionary } from \"typescript-collections\";\nimport { FontStyles } from \"../../Common/Enums\";\nimport { NoteEnum, AccidentalEnum } from \"../../Common/DataObjects/Pitch\";\nimport { ChordSymbolEnum, CustomChord, DegreesInfo } from \"../../MusicalScore/VoiceData/ChordSymbolContainer\";\nimport { GraphicalNote } from \"./GraphicalNote\";\nimport { Note } from \"../VoiceData/Note\";\n\n/** Rendering and Engraving options, more fine-grained than [[IOSMDOptions]].\n *  Not all of these options are meant to be modified by users of the library,\n *  full support is only given for [[IOSMDOptions]].\n *  Nevertheless, there are many useful options here,\n *  like Render* to (not) render certain elements (e.g. osmd.rules.RenderRehearsalMarks = false)\n */\nexport class EngravingRules {\n    /** A unit of distance. 1.0 is the distance between lines of a stave for OSMD, which is 10 pixels in Vexflow. */\n    public static unit: number = 1.0;\n    public SamplingUnit: number;\n    public StaccatoShorteningFactor: number;\n    /** Height (size) of the sheet title. */\n    public SheetTitleHeight: number;\n    public SheetSubtitleHeight: number;\n    public SheetMinimumDistanceBetweenTitleAndSubtitle: number;\n    public SheetComposerHeight: number;\n    public SheetAuthorHeight: number;\n    public CompactMode: boolean;\n    public PagePlacementEnum: PagePlacementEnum;\n    public PageHeight: number;\n    public PageTopMargin: number;\n    public PageTopMarginNarrow: number;\n    public PageBottomMargin: number;\n    public PageLeftMargin: number;\n    public PageRightMargin: number;\n    public TitleTopDistance: number;\n    public TitleBottomDistance: number;\n    public SystemLeftMargin: number;\n    public SystemRightMargin: number;\n    public SystemLabelsRightMargin: number;\n    public SystemComposerDistance: number;\n    public InstrumentLabelTextHeight: number;\n    public MinimumDistanceBetweenSystems: number;\n    public MinSkyBottomDistBetweenSystems: number;\n    public LastSystemMaxScalingFactor: number;\n    public StaffDistance: number;\n    public BetweenStaffDistance: number;\n    public StaffHeight: number;\n    public TabStaffInterlineHeight: number;\n    public BetweenStaffLinesDistance: number;\n    /** Whether to automatically beam notes that don't already have beams in XML. */\n    public AutoBeamNotes: boolean;\n    /** Options for autoBeaming like whether to beam over rests. See AutoBeamOptions interface. */\n    public AutoBeamOptions: AutoBeamOptions;\n    public AutoBeamTabs: boolean;\n    public BeamWidth: number;\n    public BeamSpaceWidth: number;\n    public BeamForwardLength: number;\n    public FlatBeams: boolean;\n    public FlatBeamOffset: number;\n    public FlatBeamOffsetPerBeam: number;\n    public ClefLeftMargin: number;\n    public ClefRightMargin: number;\n    /** How many unique note positions a percussion score needs to have to not be rendered on one line. */\n    public PercussionOneLineCutoff: number;\n    public PercussionForceVoicesOneLineCutoff: number;\n    public PercussionUseXMLDisplayStep: boolean;\n    public PercussionXMLDisplayStepNoteValueShift: number;\n    public PercussionOneLineXMLDisplayStepOctaveOffset: number;\n    public BetweenKeySymbolsDistance: number;\n    public KeyRightMargin: number;\n    public RhythmRightMargin: number;\n    public ShowRhythmAgainAfterPartEndOrFinalBarline: boolean;\n    public NewPartAndSystemAfterFinalBarline: boolean;\n    public InStaffClefScalingFactor: number;\n    public DistanceBetweenNaturalAndSymbolWhenCancelling: number;\n    public NoteHelperLinesOffset: number;\n    public MeasureLeftMargin: number;\n    public MeasureRightMargin: number;\n    public DistanceBetweenLastInstructionAndRepetitionBarline: number;\n    public ArpeggioDistance: number;\n    public IdealStemLength: number;\n    public StemNoteHeadBorderYOffset: number;\n    public StemWidth: number;\n    public StemMargin: number;\n    public StemMinLength: number;\n    public StemMaxLength: number;\n    public BeamSlopeMaxAngle: number;\n    public StemMinAllowedDistanceBetweenNoteHeadAndBeamLine: number;\n    public SetWantedStemDirectionByXml: boolean;\n    public GraceNoteScalingFactor: number;\n    public GraceNoteXOffset: number;\n    public WedgeOpeningLength: number;\n    public WedgeMeasureEndOpeningLength: number;\n    public WedgeMeasureBeginOpeningLength: number;\n    public WedgePlacementAboveY: number;\n    public WedgePlacementBelowY: number;\n    public WedgeHorizontalMargin: number;\n    public WedgeVerticalMargin: number;\n    public DistanceOffsetBetweenTwoHorizontallyCrossedWedges: number;\n    public WedgeMinLength: number;\n    public WedgeEndDistanceBetweenTimestampsFactor: number;\n    public DistanceBetweenAdjacentDynamics: number;\n    public TempoChangeMeasureValidity: number;\n    public TempoContinousFactor: number;\n    public StaccatoScalingFactor: number;\n    public BetweenDotsDistance: number;\n    public OrnamentAccidentalScalingFactor: number;\n    public ChordSymbolTextHeight: number;\n    public ChordSymbolTextAlignment: TextAlignmentEnum;\n    public ChordSymbolRelativeXOffset: number;\n    public ChordSymbolXSpacing: number;\n    public ChordOverlapAllowedIntoNextMeasure: number;\n    public ChordSymbolYOffset: number;\n    public ChordSymbolYPadding: number;\n    public ChordSymbolYAlignment: boolean;\n    public ChordSymbolYAlignmentScope: string;\n    public ChordSymbolLabelTexts: Dictionary<ChordSymbolEnum, string>;\n    public ChordAccidentalTexts: Dictionary<AccidentalEnum, string>;\n    public CustomChords: CustomChord[];\n    public RepetitionSymbolsYOffset: number;\n    public RehearsalMarkXOffset: number;\n    public RehearsalMarkXOffsetDefault: number;\n    public RehearsalMarkXOffsetSystemStartMeasure: number;\n    public RehearsalMarkYOffset: number;\n    public RehearsalMarkYOffsetDefault: number;\n    public RehearsalMarkFontSize: number;\n    public MeasureNumberLabelHeight: number;\n    public MeasureNumberLabelOffset: number;\n    public MeasureNumberLabelXOffset: number;\n    /** Whether tuplets should display ratio (3:2 instead of 3 for triplet). Default false. */\n    public TupletsRatioed: boolean;\n    /** Whether all tuplets should be bracketed (e.g. |--5--| instead of 5). Default false.\n     * If false, only tuplets given as bracketed in XML (bracket=\"yes\") will be bracketed.\n     * (If not given in XML, bracketing is implementation-dependent according to standard)\n     */\n    public TupletsBracketed: boolean;\n    /** Whether all triplets should be bracketed. Overrides tupletsBracketed for triplets.\n     * If false, only triplets given as bracketed in XML (bracket=\"yes\") will be bracketed.\n     * (Bracketing all triplets can be cluttering)\n     */\n    public TripletsBracketed: boolean;\n    public TupletNumberLabelHeight: number;\n    public TupletNumberYOffset: number;\n    public LabelMarginBorderFactor: number;\n    public TupletVerticalLineLength: number;\n    public TupletNumbersInTabs: boolean;\n\n    public RepetitionEndingLabelHeight: number;\n    public RepetitionEndingLabelXOffset: number;\n    public RepetitionEndingLabelYOffset: number;\n    public RepetitionEndingLineYLowerOffset: number;\n    public RepetitionEndingLineYUpperOffset: number;\n    public VoltaOffset: number;\n    /** Default alignment of lyrics.\n     * Left alignments will extend text to the right of the bounding box,\n     * which facilitates spacing by extending measure width.\n     */\n    public LyricsAlignmentStandard: TextAlignmentEnum;\n    public LyricsHeight: number;\n    public LyricsYOffsetToStaffHeight: number;\n    public VerticalBetweenLyricsDistance: number;\n    public HorizontalBetweenLyricsDistance: number;\n    public BetweenSyllableMaximumDistance: number;\n    public BetweenSyllableMinimumDistance: number;\n    public LyricOverlapAllowedIntoNextMeasure: number;\n    public MinimumDistanceBetweenDashes: number;\n    public MaximumLyricsElongationFactor: number;\n\n    public SlurPlacementFromXML: boolean;\n    public BezierCurveStepSize: number;\n    public TPower3: number[];\n    public OneMinusTPower3: number[];\n    public FactorOne: number[];\n    public FactorTwo: number[];\n    public TieGhostObjectWidth: number;\n    public TieYPositionOffsetFactor: number;\n    public MinimumNeededXspaceForTieGhostObject: number;\n    public TieHeightMinimum: number;\n    public TieHeightMaximum: number;\n    public TieHeightInterpolationK: number;\n    public TieHeightInterpolationD: number;\n    public SlurNoteHeadYOffset: number;\n    public SlurStemXOffset: number;\n    public SlurSlopeMaxAngle: number;\n    public SlurTangentMinAngle: number;\n    public SlurTangentMaxAngle: number;\n    public SlurHeightFactor: number;\n    public SlurHeightFlattenLongSlursFactorByWidth: number;\n    public SlurHeightFlattenLongSlursFactorByAngle: number;\n    public SlurHeightFlattenLongSlursCutoffAngle: number;\n    public SlurHeightFlattenLongSlursCutoffWidth: number;\n    public SlursStartingAtSameStaffEntryYOffset: number;\n    public SlurMaximumYControlPointDistance: number;\n    public InstantaneousTempoTextHeight: number;\n    public ContinuousDynamicTextHeight: number;\n    public MoodTextHeight: number;\n    public UnknownTextHeight: number;\n    public ContinuousTempoTextHeight: number;\n    public VexFlowDefaultNotationFontScale: number;\n    public VexFlowDefaultTabFontScale: number;\n    public TremoloStrokeScale: number;\n    public TremoloYSpacingScale: number;\n    public StaffLineWidth: number;\n    public StaffLineColor: string;\n    public LedgerLineWidth: number;\n    public LedgerLineStrokeStyle: string;\n    public LedgerLineColorDefault: string;\n    public WedgeLineWidth: number;\n    public TupletLineWidth: number;\n    public LyricUnderscoreLineWidth: number;\n    public SystemThinLineWidth: number;\n    public SystemBoldLineWidth: number;\n    public SystemRepetitionEndingLineWidth: number;\n    public SystemDotWidth: number;\n    public MultipleRestMeasureDefaultWidth: number;\n    public DistanceBetweenVerticalSystemLines: number;\n    public DistanceBetweenDotAndLine: number;\n    public RepeatEndStartPadding: number;\n    public OctaveShiftLineWidth: number;\n    public OctaveShiftVerticalLineLength: number;\n    public GraceLineWidth: number;\n    public MinimumStaffLineDistance: number;\n    public MinSkyBottomDistBetweenStaves: number;\n    public MinimumCrossedBeamDifferenceMargin: number;\n\n    /** Maximum width of sheet / HTMLElement containing the score. Canvas is limited to 32767 in current browsers, though SVG isn't.\n     *  Setting this to > 32767 will break the canvas backend (no problem if you only use SVG).\n     */\n    public SheetMaximumWidth: number;\n\n    public VoiceSpacingMultiplierVexflow: number;\n    public VoiceSpacingAddendVexflow: number;\n    public PickupMeasureWidthMultiplier: number;\n    public DisplacedNoteMargin: number;\n    public MinNoteDistance: number;\n    public SubMeasureXSpacingThreshold: number;\n    public MeasureDynamicsMaxScalingFactor: number;\n    public WholeRestXShiftVexflow: number;\n    public MetronomeMarksDrawn: boolean;\n    public MetronomeMarkXShift: number;\n    public MetronomeMarkYShift: number;\n    public SoftmaxFactorVexFlow: number;\n    /** Stagger (x-shift) whole notes that are the same note, but in different voices (show 2 instead of 1). */\n    public StaggerSameWholeNotes: boolean;\n    public MaxInstructionsConstValue: number;\n    public NoteDistances: number[] = [1.0, 1.0, 1.3, 1.6, 2.0, 2.5, 3.0, 4.0];\n    public NoteDistancesScalingFactors: number[] = [1.0, 2.0, 4.0, 8.0, 16.0, 32.0, 64.0, 128.0];\n    public DurationDistanceDict: {[_: number]: number } = {};\n    public DurationScalingDistanceDict: {[_: number]: number } = {};\n\n    /** Whether to align rests. 0 = Never, 1 = Always, 2 = Auto.\n     * Currently not recommended because rests are now positioned to avoid collisions with notes. */\n    public AlignRests: AlignRestOption; // 0 = false, 1 = true, 2 = auto\n    public RestCollisionYPadding: number;\n    public FillEmptyMeasuresWithWholeRest: FillEmptyMeasuresWithWholeRests | number;\n    public ArpeggiosGoAcrossVoices: boolean;\n    public RenderArpeggios: boolean;\n    public RenderSlurs: boolean;\n    public ColoringMode: ColoringMode;\n    public ColoringEnabled: boolean;\n    public ColorStemsLikeNoteheads: boolean;\n    public ColorFlags: boolean;\n    public ColorBeams: boolean;\n    public ColoringSetCurrent: Dictionary<NoteEnum|number, string>;\n    /** Default color for all musical elements including key signature etc. Default undefined. */\n    public DefaultColorMusic: string;\n    public DefaultColorNotehead: string;\n    public DefaultColorRest: string;\n    public DefaultColorStem: string;\n    public DefaultColorLabel: string;\n    public DefaultColorChordSymbol: string;\n    public DefaultColorTitle: string;\n    public DefaultColorCursor: string;\n    public DefaultFontFamily: string;\n    public DefaultFontStyle: FontStyles;\n    public DefaultVexFlowNoteFont: string;\n    public MaxMeasureToDrawIndex: number;\n    public MinMeasureToDrawIndex: number;\n    public MaxPageToDrawNumber: number;\n    public MaxSystemToDrawNumber: number;\n\n    /** Whether to render a label for the composer of the piece at the top of the sheet. */\n    public RenderComposer: boolean;\n    public RenderTitle: boolean;\n    public RenderSubtitle: boolean;\n    public RenderLyricist: boolean;\n    public RenderPartNames: boolean;\n    public RenderPartAbbreviations: boolean;\n    public RenderFingerings: boolean;\n    public RenderMeasureNumbers: boolean;\n    public RenderMeasureNumbersOnlyAtSystemStart: boolean;\n    public UseXMLMeasureNumbers: boolean;\n    public RenderLyrics: boolean;\n    public RenderChordSymbols: boolean;\n    public RenderMultipleRestMeasures: boolean;\n    public AutoGenerateMutipleRestMeasuresFromRestMeasures: boolean;\n    public RenderRehearsalMarks: boolean;\n    public RenderClefsAtBeginningOfStaffline: boolean;\n    public RenderKeySignatures: boolean;\n    public RenderTimeSignatures: boolean;\n    public DynamicExpressionMaxDistance: number;\n    public DynamicExpressionSpacer: number;\n    public ArticulationPlacementFromXML: boolean;\n    /** Where to draw fingerings (Above, Below, AboveOrBelow, Left, Right, or Auto).\n     * Default AboveOrBelow. Auto experimental. */\n    public FingeringPosition: PlacementEnum;\n    public FingeringPositionFromXML: boolean;\n    public FingeringPositionGrace: PlacementEnum;\n    public FingeringInsideStafflines: boolean;\n    public FingeringLabelFontHeight: number;\n    public FingeringOffsetX: number;\n    public FingeringOffsetY: number;\n    public FingeringPaddingY: number;\n    public FingeringTextSize: number;\n    /** Whether to render string numbers in classical scores, i.e. not the string numbers in tabs, but e.g. for violin. */\n    public RenderStringNumbersClassical: boolean;\n    /** This is not for tabs, but for classical scores, especially violin. */\n    public StringNumberOffsetY: number;\n    public NewSystemAtXMLNewSystemAttribute: boolean;\n    public NewPageAtXMLNewPageAttribute: boolean;\n    public PageFormat: PageFormat;\n    public PageBackgroundColor: string; // vexflow-color-string (#FFFFFF). Default undefined/transparent.\n    public RenderSingleHorizontalStaffline: boolean;\n    public RestoreCursorAfterRerender: boolean;\n    public StretchLastSystemLine: boolean;\n    public SpacingBetweenTextLines: number;\n\n    public NoteToGraphicalNoteMap: Dictionary<number, GraphicalNote>;\n    // this is basically a WeakMap, except we save the id in the Note instead of using a WeakMap.\n    public NoteToGraphicalNoteMapObjectCount: number = 0;\n\n    public static FixStafflineBoundingBox: boolean; // TODO temporary workaround\n\n    /** The skyline and bottom-line batch calculation algorithm to use.\n     *  Note that this can be overridden if AlwaysSetPreferredSkyBottomLineBackendAutomatically is true (which is the default).\n     */\n    public PreferredSkyBottomLineBatchCalculatorBackend: SkyBottomLineBatchCalculatorBackendType;\n    /** Whether to consider using WebGL in Firefox in EngravingRules.setPreferredSkyBottomLineBackendAutomatically() */\n    public DisableWebGLInFirefox: boolean;\n    /** Whether to consider using WebGL in Safari/iOS in EngravingRules.setPreferredSkyBottomLineBackendAutomatically() */\n    public DisableWebGLInSafariAndIOS: boolean;\n\n    /** The minimum number of measures in the sheet where the skyline and bottom-line batch calculation is enabled.\n     *  Batch is faster for medium to large size scores, but slower for very short scores.\n     */\n    public SkyBottomLineBatchMinMeasures: number;\n    /** The minimum number of measures in the sheet where WebGL will be used. WebGL is slower for short scores, but much faster for large ones.\n     * Note that WebGL is currently never used in Safari and Firefox, because it's always slower there.\n     */\n    public SkyBottomLineWebGLMinMeasures: number;\n    /** Whether to always set preferred backend (WebGL or Plain) automatically, depending on browser and number of measures. */\n    public AlwaysSetPreferredSkyBottomLineBackendAutomatically: boolean;\n\n    constructor() {\n        this.loadDefaultValues();\n    }\n\n    public loadDefaultValues(): void {\n        // global variables\n        this.SamplingUnit = EngravingRules.unit * 3;\n\n        // Page Label Variables\n        this.SheetTitleHeight = 4.0;\n        this.SheetSubtitleHeight = 2.0;\n        this.SheetMinimumDistanceBetweenTitleAndSubtitle = 1.0;\n        this.SheetComposerHeight = 2.0;\n        this.SheetAuthorHeight = 2.0;\n\n        // Staff sizing Variables\n        this.CompactMode = false;\n        this.PagePlacementEnum = PagePlacementEnum.Down;\n        this.PageHeight = 100001.0;\n        this.PageTopMargin = 5.0;\n        this.PageTopMarginNarrow = 0.0; // for compact mode\n        this.PageBottomMargin = 5.0;\n        this.PageLeftMargin = 5.0;\n        this.PageRightMargin = 5.0;\n        this.TitleTopDistance = 5.0;\n        this.TitleBottomDistance = 1.0;\n        this.StaffDistance = 7.0;\n        this.BetweenStaffDistance = 5.0;\n        this.MinimumStaffLineDistance = 4.0;\n        this.MinSkyBottomDistBetweenStaves = 1.0; // default. compacttight mode sets it to 1.0 (as well).\n\n        // System Sizing and Label Variables\n        this.StaffHeight = 4.0;\n        this.TabStaffInterlineHeight = 1.1111;\n        this.BetweenStaffLinesDistance = EngravingRules.unit;\n        this.SystemLeftMargin = 0.0;\n        this.SystemRightMargin = 0.0;\n        this.SystemLabelsRightMargin = 2.0;\n        this.SystemComposerDistance = 2.0;\n        this.InstrumentLabelTextHeight = 2;\n        this.MinimumDistanceBetweenSystems = 7.0;\n        this.MinSkyBottomDistBetweenSystems = 5.0;\n        this.LastSystemMaxScalingFactor = 1.4;\n\n        // autoBeam options\n        this.AutoBeamNotes = false;\n        this.AutoBeamOptions = {\n            beam_middle_rests_only: false,\n            beam_rests: false,\n            maintain_stem_directions: false\n        };\n        this.AutoBeamTabs = false;\n\n        // Beam Sizing Variables\n        this.BeamWidth = EngravingRules.unit / 2.0;\n        this.BeamSpaceWidth = EngravingRules.unit / 3.0;\n        this.BeamForwardLength = 1.25 * EngravingRules.unit;\n\n        this.FlatBeams = false;\n        this.FlatBeamOffset = 20;\n        this.FlatBeamOffsetPerBeam = 10;\n\n        // Beam Sizing Variables\n        this.ClefLeftMargin = 0.5;\n        this.ClefRightMargin = 0.75;\n        this.PercussionOneLineCutoff = 3; // percussion parts with <3 unique note positions rendered on one line\n        this.PercussionForceVoicesOneLineCutoff = 1;\n        this.PercussionUseXMLDisplayStep = true;\n        this.PercussionXMLDisplayStepNoteValueShift = 0;\n        this.PercussionOneLineXMLDisplayStepOctaveOffset = 0;\n        this.BetweenKeySymbolsDistance = 0.2;\n        this.KeyRightMargin = 0.75;\n        this.RhythmRightMargin = 1.25;\n        this.ShowRhythmAgainAfterPartEndOrFinalBarline = true;\n        this.NewPartAndSystemAfterFinalBarline = false;\n        this.InStaffClefScalingFactor = 0.8;\n        this.DistanceBetweenNaturalAndSymbolWhenCancelling = 0.4;\n\n        // Beam Sizing Variables\n        this.NoteHelperLinesOffset = 0.25;\n        this.MeasureLeftMargin = 0.7;\n        this.MeasureRightMargin = 0.0;\n        this.DistanceBetweenLastInstructionAndRepetitionBarline = 1.0;\n        this.ArpeggioDistance = 0.6;\n\n        // Stems Variables\n        this.StaccatoShorteningFactor = 2;\n        this.IdealStemLength = 3.0;\n        this.StemNoteHeadBorderYOffset = 0.2;\n        this.StemMargin = 0.2;\n        this.StemMinLength = 2.5;\n        this.StemMaxLength = 4.5;\n        this.BeamSlopeMaxAngle = 10.0;\n        this.StemMinAllowedDistanceBetweenNoteHeadAndBeamLine = 1.0;\n        this.SetWantedStemDirectionByXml = true;\n        // also see stemwidth further below\n\n        // GraceNote Variables\n        this.GraceNoteScalingFactor = 0.6;\n        this.GraceNoteXOffset = 0.2;\n\n        // Wedge Variables\n        this.WedgeOpeningLength = 1.2;\n        this.WedgeMeasureEndOpeningLength = 0.75;\n        this.WedgeMeasureBeginOpeningLength = 0.75;\n        this.WedgePlacementAboveY = -1.5;\n        this.WedgePlacementBelowY = 1.5;\n        this.WedgeHorizontalMargin = 0.6;\n        this.WedgeVerticalMargin = 0.5;\n        this.DistanceOffsetBetweenTwoHorizontallyCrossedWedges = 0.3;\n        this.WedgeMinLength = 2.0;\n        this.WedgeEndDistanceBetweenTimestampsFactor = 1.75;\n        this.DistanceBetweenAdjacentDynamics = 0.75;\n\n        // Tempo Variables\n        this.TempoChangeMeasureValidity = 4;\n        this.TempoContinousFactor = 0.7;\n\n        // various\n        this.StaccatoScalingFactor = 0.8;\n        this.BetweenDotsDistance = 0.8;\n        this.OrnamentAccidentalScalingFactor = 0.65;\n        this.ChordSymbolTextHeight = 2.0;\n        this.ChordSymbolTextAlignment = TextAlignmentEnum.LeftBottom;\n        this.ChordSymbolRelativeXOffset = -1.0;\n        this.ChordSymbolXSpacing = 1.0;\n        this.ChordOverlapAllowedIntoNextMeasure = 0;\n        this.ChordSymbolYOffset = 0.1;\n        this.ChordSymbolYPadding = 0.0;\n        this.ChordSymbolYAlignment = true;\n        this.ChordSymbolYAlignmentScope = \"staffline\"; // \"measure\" or \"staffline\"\n        this.ChordAccidentalTexts = new Dictionary<AccidentalEnum, string>();\n        this.resetChordAccidentalTexts(this.ChordAccidentalTexts, false);\n        this.ChordSymbolLabelTexts = new Dictionary<ChordSymbolEnum, string>();\n        this.resetChordSymbolLabelTexts(this.ChordSymbolLabelTexts);\n        this.CustomChords = [];\n        this.resetChordNames();\n        this.RepetitionSymbolsYOffset = 0;\n        this.RehearsalMarkXOffsetDefault = 10; // avoid collision with metronome number\n        this.RehearsalMarkXOffset = 0; // user defined\n        this.RehearsalMarkXOffsetSystemStartMeasure = -20; // good test: Haydn Concertante\n        this.RehearsalMarkYOffsetDefault = -15;\n        this.RehearsalMarkYOffset = 0; // user defined\n        this.RehearsalMarkFontSize = 10; // vexflow default: 12, too big with chord symbols\n\n        // Tuplets, MeasureNumber and TupletNumber Labels\n        this.MeasureNumberLabelHeight = 1.5 * EngravingRules.unit;\n        this.MeasureNumberLabelOffset = 2;\n        this.MeasureNumberLabelXOffset = -0.5;\n        this.TupletsRatioed = false;\n        this.TupletsBracketed = false;\n        this.TripletsBracketed = false; // special setting for triplets, overrides tuplet setting (for triplets only)\n        this.TupletNumberLabelHeight = 1.5 * EngravingRules.unit;\n        this.TupletNumberYOffset = 0.5;\n        this.LabelMarginBorderFactor = 0.1;\n        this.TupletVerticalLineLength = 0.5;\n        this.TupletNumbersInTabs = false; // disabled by default, nonstandard in tabs, at least how we show them in non-tabs.\n\n        // Slur and Tie variables\n        this.SlurPlacementFromXML = true;\n        this.BezierCurveStepSize = 1000;\n        this.calculateCurveParametersArrays();\n        this.TieGhostObjectWidth = 0.75;\n        this.TieYPositionOffsetFactor = 0.3;\n        this.MinimumNeededXspaceForTieGhostObject = 1.0;\n        this.TieHeightMinimum = 0.28;\n        this.TieHeightMaximum = 1.2;\n        this.TieHeightInterpolationK = 0.0288;\n        this.TieHeightInterpolationD = 0.136;\n        this.SlurNoteHeadYOffset = 0.5;\n        this.SlurStemXOffset = 0.3;\n        this.SlurSlopeMaxAngle = 15.0;\n        this.SlurTangentMinAngle = 30.0;\n        this.SlurTangentMaxAngle = 80.0;\n        this.SlurHeightFactor = 1; // 1 = 100% (standard height). 2 = 100% flattening of all slurs.\n        this.SlurHeightFlattenLongSlursFactorByWidth = 0.24; // additional flattening for long slurs the longer they are.\n        this.SlurHeightFlattenLongSlursFactorByAngle = 0.36; // when one of these factors is high, increasing the other has a very strong effect.\n        this.SlurHeightFlattenLongSlursCutoffAngle = 47;\n        this.SlurHeightFlattenLongSlursCutoffWidth = 16; // 15 ~ slur between measure's first notes in 4/4. 14 -> problem with test_slurs_highNotes\n        this.SlursStartingAtSameStaffEntryYOffset = 0.8;\n        //Maximum y difference between control points. Forces slurs to have less 'weight' either way in the x direction\n        this.SlurMaximumYControlPointDistance = undefined;\n\n        // Repetitions\n        this.RepetitionEndingLabelHeight = 2.0;\n        this.RepetitionEndingLabelXOffset = 0.5;\n        this.RepetitionEndingLabelYOffset = 0.3;\n        this.RepetitionEndingLineYLowerOffset = 0.5;\n        this.RepetitionEndingLineYUpperOffset = 0.3;\n        this.VoltaOffset = 2.5;\n\n        // Lyrics\n        this.LyricsAlignmentStandard = TextAlignmentEnum.LeftBottom; // CenterBottom and LeftBottom tested, spacing-optimized\n        this.LyricsHeight = 2.0; // actually size of lyrics\n        this.LyricsYOffsetToStaffHeight = 0.0; // distance between lyrics and staff. could partly be even lower/dynamic\n        this.VerticalBetweenLyricsDistance = 0.5;\n        this.HorizontalBetweenLyricsDistance = 0.2;\n        this.BetweenSyllableMaximumDistance = 10.0;\n        this.BetweenSyllableMinimumDistance = 0.5; // + 1.0 for CenterAlignment added in lyrics spacing\n        this.LyricOverlapAllowedIntoNextMeasure = 3.4; // optimal for dashed last lyric, see Land der Berge\n        this.MinimumDistanceBetweenDashes = 10;\n        this.MaximumLyricsElongationFactor = 2.5;\n\n        // expressions variables\n        this.InstantaneousTempoTextHeight = 2.3;\n        this.ContinuousDynamicTextHeight = 2.3;\n        this.MoodTextHeight = 2.3;\n        this.UnknownTextHeight = 2.0;\n        this.ContinuousTempoTextHeight = 2.3;\n        this.DynamicExpressionMaxDistance = 2;\n        this.DynamicExpressionSpacer = 0.5;\n\n        // Line Widths\n        this.VexFlowDefaultNotationFontScale = 39; // scales notes, including rests. default value 39 in Vexflow.\n        this.VexFlowDefaultTabFontScale = 39;\n        this.TremoloStrokeScale = 1;\n        this.TremoloYSpacingScale = 1;\n        this.StemWidth = 0.15; // originally 0.13. vexflow default 0.15. should probably be adjusted when increasing vexFlowDefaultNotationFontScale,\n        this.StaffLineWidth = 0.10; // originally 0.12, but this will be pixels in Vexflow (*10).\n        this.StaffLineColor = undefined; // if undefined, vexflow default (grey). not a width, but affects visual line clarity.\n        this.LedgerLineWidth = 1; // vexflow units (pixels). if not undefined, the vexflow default will be overwritten\n        this.LedgerLineStrokeStyle = undefined; // if not undefined, the vexflow default will be overwritten\n        this.LedgerLineColorDefault = \"#000000\"; // black, previously grey by default\n        this.WedgeLineWidth = 0.12;\n        this.TupletLineWidth = 0.12;\n        this.LyricUnderscoreLineWidth = 0.12;\n        this.SystemThinLineWidth = 0.12;\n        this.SystemBoldLineWidth = EngravingRules.unit / 2.0;\n        this.SystemRepetitionEndingLineWidth = 0.12;\n        this.SystemDotWidth = EngravingRules.unit / 2.0;\n        this.DistanceBetweenVerticalSystemLines = 0.35;\n        this.DistanceBetweenDotAndLine = 0.7;\n        this.RepeatEndStartPadding = 2.0; // set to 0.0 to restore old padding/width with :||: measures\n        this.OctaveShiftLineWidth = 0.12;\n        this.OctaveShiftVerticalLineLength = EngravingRules.unit;\n        this.GraceLineWidth = this.StaffLineWidth * this.GraceNoteScalingFactor;\n\n        this.MultipleRestMeasureDefaultWidth = 4;\n\n        // Line Widths\n        this.MinimumCrossedBeamDifferenceMargin = 0.0001;\n\n        // Canvas is limited to 32767 in most browsers, though SVG isn't.\n        this.SheetMaximumWidth = 32767;\n\n        // xSpacing Variables\n        this.VoiceSpacingMultiplierVexflow = 0.85;\n        this.VoiceSpacingAddendVexflow = 3.0;\n        this.PickupMeasureWidthMultiplier = 1.0;\n        this.DisplacedNoteMargin = 0.1;\n        this.MinNoteDistance = 2.0;\n        this.SubMeasureXSpacingThreshold = 35;\n        this.MeasureDynamicsMaxScalingFactor = 2.5;\n        this.WholeRestXShiftVexflow = -1.5; // VexFlow draws rest notes too far to the right\n        this.MetronomeMarksDrawn = true;\n        this.MetronomeMarkXShift = -6; // our unit, is taken * unitInPixels\n        this.MetronomeMarkYShift = -0.5;\n        this.SoftmaxFactorVexFlow = 15; // only applies to Vexflow 3.x. 15 seems like the sweet spot. Vexflow default is 100.\n        // if too high, score gets too big, especially half notes. with half note quarter quarter, the quarters get squeezed.\n        // if too low, smaller notes aren't positioned correctly.\n        this.StaggerSameWholeNotes = true;\n\n        // Render options (whether to render specific or invisible elements)\n        this.AlignRests = AlignRestOption.Never; // 0 = false, 1 = true, 2 = auto\n        this.RestCollisionYPadding = 0.0; // 1.0 = half distance between staff lines (e.g. E to F). will be rounded to whole numbers.\n        this.FillEmptyMeasuresWithWholeRest = FillEmptyMeasuresWithWholeRests.No;\n        this.ArpeggiosGoAcrossVoices = false; // safe option, as otherwise arpeggios will always go across all voices in Vexflow, which is often unwanted\n        this.RenderArpeggios = true;\n        this.RenderSlurs = true;\n        this.ColoringMode = ColoringMode.XML;\n        this.ColoringEnabled = true;\n        this.ColorStemsLikeNoteheads = false;\n        this.ColorBeams = true;\n        this.ColorFlags = true;\n        this.applyDefaultColorMusic(\"#000000\"); // black. undefined is only black if a note's color hasn't been changed before.\n        this.DefaultColorCursor = \"#33e02f\"; // green\n        this.DefaultFontFamily = \"Times New Roman\"; // what OSMD was initially optimized for\n        this.DefaultFontStyle = FontStyles.Regular;\n        this.DefaultVexFlowNoteFont = \"gonville\"; // was the default vexflow font up to vexflow 1.2.93, now it's Bravura, which is more cursive/bold\n        this.MaxMeasureToDrawIndex = Number.MAX_VALUE;\n        this.MinMeasureToDrawIndex = 0;\n        this.MaxSystemToDrawNumber = Number.MAX_VALUE;\n        this.MaxPageToDrawNumber = Number.MAX_VALUE;\n        this.RenderComposer = true;\n        this.RenderTitle = true;\n        this.RenderSubtitle = true;\n        this.RenderLyricist = true;\n        this.RenderPartNames = true;\n        this.RenderPartAbbreviations = true;\n        this.RenderFingerings = true;\n        this.RenderMeasureNumbers = true;\n        this.RenderMeasureNumbersOnlyAtSystemStart = false;\n        this.UseXMLMeasureNumbers = true;\n        this.RenderLyrics = true;\n        this.RenderChordSymbols = true;\n        this.RenderMultipleRestMeasures = true;\n        this.AutoGenerateMutipleRestMeasuresFromRestMeasures = true;\n        this.RenderRehearsalMarks = true;\n        this.RenderClefsAtBeginningOfStaffline = true;\n        this.RenderKeySignatures = true;\n        this.RenderTimeSignatures = true;\n        this.ArticulationPlacementFromXML = true;\n        this.FingeringPosition = PlacementEnum.AboveOrBelow; // AboveOrBelow = correct bounding boxes\n        this.FingeringPositionFromXML = true;\n        this.FingeringPositionGrace = PlacementEnum.Left;\n        this.FingeringInsideStafflines = false;\n        this.FingeringLabelFontHeight = 1.7;\n        this.FingeringOffsetX = 0.0;\n        this.FingeringOffsetY = 0.0;\n        this.FingeringPaddingY = -0.2;\n        this.FingeringTextSize = 1.5;\n        this.RenderStringNumbersClassical = true;\n        this.StringNumberOffsetY = 0.0;\n        this.NewSystemAtXMLNewSystemAttribute = false;\n        this.NewPageAtXMLNewPageAttribute = false;\n        this.RestoreCursorAfterRerender = true;\n        this.StretchLastSystemLine = false;\n\n        EngravingRules.FixStafflineBoundingBox = false; // TODO temporary workaround\n\n        this.PageFormat = PageFormat.UndefinedPageFormat; // default: undefined / 'infinite' height page, using the canvas'/container's width and height\n        this.PageBackgroundColor = undefined; // default: transparent. half-transparent white: #FFFFFF88\"\n        this.RenderSingleHorizontalStaffline = false;\n        this.SpacingBetweenTextLines = 0;\n\n        this.NoteToGraphicalNoteMap = new Dictionary<number, GraphicalNote>();\n        this.NoteToGraphicalNoteMapObjectCount = 0;\n\n        this.SkyBottomLineBatchMinMeasures = 5;\n        this.SkyBottomLineWebGLMinMeasures = 80;\n        this.AlwaysSetPreferredSkyBottomLineBackendAutomatically = true;\n        this.DisableWebGLInFirefox = true;\n        this.DisableWebGLInSafariAndIOS = true;\n        this.setPreferredSkyBottomLineBackendAutomatically();\n\n        // this.populateDictionaries(); // these values aren't used currently\n        try {\n            this.MaxInstructionsConstValue = this.ClefLeftMargin + this.ClefRightMargin + this.KeyRightMargin + this.RhythmRightMargin + 11;\n            //if (FontInfo.Info) {\n            //    this.maxInstructionsConstValue += FontInfo.Info.getBoundingBox(MusicSymbol.G_CLEF).width\n            //        + FontInfo.Info.getBoundingBox(MusicSymbol.FOUR).width\n            //        + 7 * FontInfo.Info.getBoundingBox(MusicSymbol.SHARP).width;\n            //}\n        } catch (ex) {\n            log.info(\"EngravingRules()\", ex);\n        }\n    }\n\n    public setPreferredSkyBottomLineBackendAutomatically(numberOfGraphicalMeasures: number = -1): void {\n        const vendor: string = globalThis.navigator?.vendor ?? \"\";\n        const userAgent: string = globalThis.navigator?.userAgent ?? \"\";\n        let alwaysUsePlain: boolean = false;\n        if (this.DisableWebGLInSafariAndIOS && (/apple/i).test(vendor)) { // doesn't apply to Chrome on MacOS\n            alwaysUsePlain = true;\n        } else if (this.DisableWebGLInFirefox && userAgent.includes(\"Firefox\")) {\n            alwaysUsePlain = true;\n        }\n        // In Safari (/iOS) and Firefox, the plain version is always faster (currently, Safari 15).\n        //   WebGL is faster for large scores in Chrome and Edge (both Chromium based). See #1158\n        this.PreferredSkyBottomLineBatchCalculatorBackend = SkyBottomLineBatchCalculatorBackendType.Plain;\n        if (!alwaysUsePlain) {\n            if (numberOfGraphicalMeasures >= this.SkyBottomLineWebGLMinMeasures) {\n                this.PreferredSkyBottomLineBatchCalculatorBackend = SkyBottomLineBatchCalculatorBackendType.WebGL;\n            }\n        }\n    }\n\n    /** Makes it so that all musical elements (including key/time signature)\n     *  are colored with the given color by default,\n     *  unless an element has a different color set (e.g. VoiceEntry.StemColor).\n     */\n    public applyDefaultColorMusic(color: string): void {\n        this.DefaultColorMusic = color;\n        this.DefaultColorNotehead = this.DefaultColorMusic;\n        this.DefaultColorRest = this.DefaultColorNotehead;\n        this.DefaultColorStem = this.DefaultColorNotehead;\n        this.DefaultColorLabel = this.DefaultColorNotehead;\n        this.DefaultColorTitle = this.DefaultColorNotehead;\n        this.LedgerLineColorDefault = this.DefaultColorNotehead;\n    }\n\n    public addGraphicalNoteToNoteMap(note: Note, graphicalNote: GraphicalNote): void {\n        note.NoteToGraphicalNoteObjectId = this.NoteToGraphicalNoteMapObjectCount;\n        this.NoteToGraphicalNoteMap.setValue(note.NoteToGraphicalNoteObjectId, graphicalNote);\n        this.NoteToGraphicalNoteMapObjectCount++;\n    }\n\n    /** Returns the GraphicalNote corresponding to (its) note. Also used by Cursor.GNotesUnderCursor().\n     *  We don't want to save a GraphicalNote reference in Note, see Note.NoteToGraphicalNoteObjectId.\n     */\n    public GNote(note: Note): GraphicalNote {\n        return GraphicalNote.FromNote(note, this);\n    }\n\n    /** This should be done before a new sheet is loaded, not each re-render (otherwise the map would end empty). */\n    public clearMusicSheetObjects(): void {\n        this.NoteToGraphicalNoteMap = new Dictionary<number, GraphicalNote>();\n        this.NoteToGraphicalNoteMapObjectCount = 0;\n    }\n\n    public resetChordAccidentalTexts(chordAccidentalTexts: Dictionary<AccidentalEnum, string>, useChordAccidentalsUnicode: boolean): void {\n        chordAccidentalTexts.setValue(AccidentalEnum.SHARP, useChordAccidentalsUnicode ? \"♯\" : \"#\");\n        chordAccidentalTexts.setValue(AccidentalEnum.FLAT, useChordAccidentalsUnicode ? \"♭\" : \"b\");\n        chordAccidentalTexts.setValue(AccidentalEnum.DOUBLEFLAT, useChordAccidentalsUnicode ? \"𝄫\" : \"bb\");\n        chordAccidentalTexts.setValue(AccidentalEnum.DOUBLESHARP, useChordAccidentalsUnicode ? \"𝄪\" : \"x\");\n    }\n\n    public setChordSymbolLabelText(key: ChordSymbolEnum, value: string): void {\n        this.ChordSymbolLabelTexts.setValue(key, value);\n    }\n    public resetChordSymbolLabelTexts(chordtexts: Dictionary<ChordSymbolEnum, string>): Dictionary<ChordSymbolEnum, string> {\n        chordtexts.setValue(ChordSymbolEnum.minor, \"m\");\n        chordtexts.setValue(ChordSymbolEnum.augmented, \"aug\");\n        chordtexts.setValue(ChordSymbolEnum.diminished, \"dim\");\n        chordtexts.setValue(ChordSymbolEnum.dominant, \"7\");\n        chordtexts.setValue(ChordSymbolEnum.majorseventh, \"maj7\");\n        chordtexts.setValue(ChordSymbolEnum.minorseventh, \"m7\");\n        chordtexts.setValue(ChordSymbolEnum.diminishedseventh, \"dim7\");\n        chordtexts.setValue(ChordSymbolEnum.augmentedseventh, \"aug7\");\n        chordtexts.setValue(ChordSymbolEnum.halfdiminished, `m7${this.ChordAccidentalTexts.getValue(AccidentalEnum.FLAT)}5`);\n        chordtexts.setValue(ChordSymbolEnum.majorminor, \"m(maj7)\");\n        chordtexts.setValue(ChordSymbolEnum.majorsixth, \"maj6\");\n        chordtexts.setValue(ChordSymbolEnum.minorsixth, \"m6\");\n        chordtexts.setValue(ChordSymbolEnum.dominantninth, \"9\");\n        chordtexts.setValue(ChordSymbolEnum.majorninth, \"maj9\");\n        chordtexts.setValue(ChordSymbolEnum.minorninth, \"m9\");\n        chordtexts.setValue(ChordSymbolEnum.dominant11th, \"11\");\n        chordtexts.setValue(ChordSymbolEnum.major11th, \"maj11\");\n        chordtexts.setValue(ChordSymbolEnum.minor11th, \"m11\");\n        chordtexts.setValue(ChordSymbolEnum.dominant13th, \"13\");\n        chordtexts.setValue(ChordSymbolEnum.major13th, \"maj13\");\n        chordtexts.setValue(ChordSymbolEnum.minor13th, \"m13\");\n        chordtexts.setValue(ChordSymbolEnum.suspendedsecond, \"sus2\");\n        chordtexts.setValue(ChordSymbolEnum.suspendedfourth, \"sus4\");\n        chordtexts.setValue(ChordSymbolEnum.power, \"5\");\n        chordtexts.setValue(ChordSymbolEnum.none, \"N.C.\");\n\n        return chordtexts;\n    }\n\n    public addChordName(\n        altName: string,\n        chordKindText: string,\n        adds: string[],\n        alts: string[],\n        subs: string[],\n    ): void {\n        if (ChordSymbolEnum[chordKindText] !== undefined) {\n            const degrees: DegreesInfo = {\n                adds,\n                alts,\n                subs,\n            };\n            this.CustomChords.push(CustomChord.createCustomChord(altName, ChordSymbolEnum[chordKindText], degrees));\n        }\n    }\n\n    public renameChord(altName: string, newAltName: string): void {\n        CustomChord.renameCustomChord(altName, newAltName, this.CustomChords);\n    }\n\n    public resetChordNames(): void {\n        const sharp: string = this.ChordAccidentalTexts.getValue(AccidentalEnum.SHARP);\n        const flat: string = this.ChordAccidentalTexts.getValue(AccidentalEnum.FLAT);\n        // addChordName(alternateName, chordKindText, adds, alters, subtracts)\n        this.addChordName(\"alt\", \"major\", [`${sharp}5`, `${flat}9`, `${sharp}9`], [`${flat}5`], []);\n        this.addChordName(\"7alt\", \"dominant\", [`${sharp}5`, `${flat}9`, `${sharp}9`], [`${flat}5`], []);\n        this.addChordName(\"7sus4\", \"dominant\", [\"4\"], [], [\"3\"]);\n        this.addChordName(\"7sus4\", \"suspendedfourth\", [\"7\"], [], []);\n        this.addChordName(\"9sus4\", \"dominantninth\", [\"4\"], [], [\"3\"]);\n        this.addChordName(\"9sus4\", \"suspendedfourth\", [\"9\"], [], []);\n        this.addChordName(\"11sus4\", \"dominant11th\", [\"4\"], [], [\"3\"]);\n        this.addChordName(\"11sus4\", \"suspendedfourth\", [\"11\"], [], []);\n        this.addChordName(\"13sus4\", \"dominant13th\", [\"4\"], [], [\"3\"]);\n        this.addChordName(\"13sus4\", \"suspendedfourth\", [\"13\"], [], []);\n        this.addChordName(\"7sus2\", \"dominant\", [\"2\"], [], [\"3\"]);\n        this.addChordName(\"7sus2\", \"suspendedsecond\", [\"7\"], [], []);\n        this.addChordName(`m7${flat}5`, \"minorseventh\", [], [`${flat}5`], []);\n        this.addChordName(\"9sus2\", \"dominantninth\", [\"2\"], [], [\"3\"]);\n        this.addChordName(\"9sus2\", \"suspendedsecond\", [\"9\"], [], []);\n        this.addChordName(\"11sus2\", \"dominant11th\", [\"2\"], [], [\"3\"]);\n        this.addChordName(\"11sus2\", \"suspendedsecond\", [\"11\"], [], []);\n        this.addChordName(\"13sus2\", \"dominant13th\", [\"2\"], [], [\"3\"]);\n        this.addChordName(\"13sus2\", \"suspendedsecond\", [\"13\"], [], []);\n        this.addChordName(\"m(maj9)\", \"majorminor\", [\"9\"], [], []);\n        this.addChordName(\"m(maj11)\", \"majorminor\", [\"11\"], [], []);\n        this.addChordName(\"m(maj13)\", \"majorminor\", [\"13\"], [], []);\n        this.addChordName(\"69\", \"majorsixth\", [\"9\"], [], []);\n        this.addChordName(\"mi69\", \"minorsixth\", [\"9\"], [], []);\n    }\n\n    /**\n     * This method maps NoteDurations to Distances and DistancesScalingFactors.\n     */\n    // private populateDictionaries(): void {\n    //     for (let i: number = 0; i < this.NoteDistances.length; i++) {\n    //         switch (i) {\n    //             case 0:\n    //                 this.DurationDistanceDict[0.015625] = this.NoteDistances[i];\n    //                 this.DurationScalingDistanceDict[0.015625] = this.NoteDistancesScalingFactors[i];\n    //                 break;\n    //             case 1:\n    //                 this.DurationDistanceDict[0.03125] = this.NoteDistances[i];\n    //                 this.DurationScalingDistanceDict[0.03125] = this.NoteDistancesScalingFactors[i];\n    //                 break;\n    //             case 2:\n    //                 this.DurationDistanceDict[0.0625] = this.NoteDistances[i];\n    //                 this.DurationScalingDistanceDict[0.0625] = this.NoteDistancesScalingFactors[i];\n    //                 break;\n    //             case 3:\n    //                 this.DurationDistanceDict[0.125] = this.NoteDistances[i];\n    //                 this.DurationScalingDistanceDict[0.125] = this.NoteDistancesScalingFactors[i];\n    //                 break;\n    //             case 4:\n    //                 this.DurationDistanceDict[0.25] = this.NoteDistances[i];\n    //                 this.DurationScalingDistanceDict[0.25] = this.NoteDistancesScalingFactors[i];\n    //                 break;\n    //             case 5:\n    //                 this.DurationDistanceDict[0.5] = this.NoteDistances[i];\n    //                 this.DurationScalingDistanceDict[0.5] = this.NoteDistancesScalingFactors[i];\n    //                 break;\n    //             case 6:\n    //                 this.DurationDistanceDict[1.0] = this.NoteDistances[i];\n    //                 this.DurationScalingDistanceDict[1.0] = this.NoteDistancesScalingFactors[i];\n    //                 break;\n    //             case 7:\n    //                 this.DurationDistanceDict[2.0] = this.NoteDistances[i];\n    //                 this.DurationScalingDistanceDict[2.0] = this.NoteDistancesScalingFactors[i];\n    //                 break;\n    //             default:\n    //                 // FIXME\n    //         }\n    //     }\n    // }\n\n    /**\n     * Calculate Curve-independend factors, to be used later in the Slur- and TieCurvePoints calculation\n     */\n    private calculateCurveParametersArrays(): void {\n        this.TPower3 = new Array(this.BezierCurveStepSize);\n        this.OneMinusTPower3 = new Array(this.BezierCurveStepSize);\n        this.FactorOne = new Array(this.BezierCurveStepSize);\n        this.FactorTwo = new Array(this.BezierCurveStepSize);\n        for (let i: number = 0; i < this.BezierCurveStepSize; i++) {\n            const t: number = i / this.BezierCurveStepSize;\n            this.TPower3[i] = Math.pow(t, 3);\n            this.OneMinusTPower3[i] = Math.pow((1 - t), 3);\n            this.FactorOne[i] = 3 * Math.pow((1 - t), 2) * t;\n            this.FactorTwo[i] = 3 * (1 - t) * Math.pow(t, 2);\n        }\n    }\n}\n\n// TODO maybe this should be moved to OSMDOptions. Also see OpenSheetMusicDisplay.PageFormatStandards\nexport class PageFormat {\n    constructor(width: number, height: number, idString: string = \"noIdStringGiven\") {\n        this.width = width;\n        this.height = height;\n        this.idString = idString;\n    }\n    public width: number;\n    public height: number;\n    public idString: string;\n    public get aspectRatio(): number {\n        if (!this.IsUndefined) {\n            return this.width / this.height;\n        } else {\n            return 0; // infinite page height\n        }\n    }\n    /** Undefined page format: use default page format. */\n    public get IsUndefined(): boolean {\n        return this.width === undefined || this.height === undefined || this.height === 0 || this.width === 0;\n    }\n    public static get UndefinedPageFormat(): PageFormat {\n        return new PageFormat(0, 0);\n    }\n    public Equals(otherPageFormat: PageFormat): boolean {\n        if (!otherPageFormat) {\n            return false;\n        }\n        return otherPageFormat.width === this.width && otherPageFormat.height === this.height;\n    }\n}\n","import {Label} from \"../Label\";\nimport {GraphicalLabel} from \"./GraphicalLabel\";\nimport {ChordSymbolContainer} from \"../VoiceData/ChordSymbolContainer\";\nimport {BoundingBox} from \"./BoundingBox\";\nimport {GraphicalObject} from \"./GraphicalObject\";\nimport {PointF2D} from \"../../Common/DataObjects/PointF2D\";\nimport {EngravingRules} from \"./EngravingRules\";\nimport { KeyInstruction } from \"../VoiceData/Instructions/KeyInstruction\";\n\nexport class GraphicalChordSymbolContainer extends GraphicalObject {\n    private chordSymbolContainer: ChordSymbolContainer;\n    private graphicalLabel: GraphicalLabel;\n    private rules: EngravingRules;\n\n    constructor(chordSymbolContainer: ChordSymbolContainer, parent: BoundingBox, textHeight: number,\n                keyInstruction: KeyInstruction, transposeHalftones: number, rules: EngravingRules) {\n        super();\n        this.chordSymbolContainer = chordSymbolContainer;\n        this.boundingBox = new BoundingBox(this, parent);\n        this.rules = rules;\n        this.calculateLabel(textHeight, transposeHalftones, keyInstruction);\n    }\n    public get GetChordSymbolContainer(): ChordSymbolContainer {\n        return this.chordSymbolContainer;\n    }\n    public get GraphicalLabel(): GraphicalLabel {\n        return this.graphicalLabel;\n    }\n    private calculateLabel(textHeight: number, transposeHalftones: number, keyInstruction: KeyInstruction): void {\n        const text: string = ChordSymbolContainer.calculateChordText(this.chordSymbolContainer, transposeHalftones, keyInstruction);\n        this.graphicalLabel = new GraphicalLabel(new Label(text), textHeight, this.rules.ChordSymbolTextAlignment, this.rules, this.boundingBox);\n        this.graphicalLabel.PositionAndShape.RelativePosition = new PointF2D(this.rules.ChordSymbolRelativeXOffset, 0.0);\n        this.graphicalLabel.Label.colorDefault = this.rules.DefaultColorChordSymbol;\n    }\n}\n","import {GraphicalLabel} from \"./GraphicalLabel\";\n\nexport class GraphicalComment {\n    constructor(label: GraphicalLabel, settingsLabel: GraphicalLabel) {\n        this.label = label;\n        this.settings = settingsLabel;\n    }\n    public label: GraphicalLabel;\n    public settings: GraphicalLabel;\n}\n","import { GraphicalLine } from \"./GraphicalLine\";\nimport { StaffLine } from \"./StaffLine\";\nimport { GraphicalMeasure } from \"./GraphicalMeasure\";\nimport { ContDynamicEnum, ContinuousDynamicExpression } from \"../VoiceData/Expressions/ContinuousExpressions/ContinuousDynamicExpression\";\nimport { PointF2D } from \"../../Common/DataObjects/PointF2D\";\nimport { AbstractGraphicalExpression } from \"./AbstractGraphicalExpression\";\nimport { PlacementEnum } from \"../VoiceData/Expressions/AbstractExpression\";\nimport { SkyBottomLineCalculator } from \"./SkyBottomLineCalculator\";\nimport { ISqueezable } from \"./ISqueezable\";\nimport log from \"loglevel\";\nimport { SourceMeasure } from \"../VoiceData/SourceMeasure\";\n\n/**\n * This class prepares the graphical elements for a continuous expression. It calculates the wedges and\n * wrappings if they are split over system breaks.\n */\nexport class GraphicalContinuousDynamicExpression extends AbstractGraphicalExpression implements ISqueezable {\n    /** True if expression is split over system borders */\n    private isSplittedPart: boolean;\n    /** True if this expression should not be removed if re-rendered */\n    private notToBeRemoved: boolean;\n    /** Holds the line objects that can be drawn via implementation */\n    private lines: GraphicalLine[] = [];\n    private startMeasure: GraphicalMeasure;\n    private endMeasure: GraphicalMeasure;\n\n    /**\n     * Create a new instance of the GraphicalContinuousDynamicExpression\n     * @param continuousDynamic The continuous dynamic instruction read via ExpressionReader\n     * @param staffLine The staffline where the expression is attached\n     */\n    constructor(continuousDynamic: ContinuousDynamicExpression, staffLine: StaffLine, measure: SourceMeasure) {\n        super(staffLine, continuousDynamic, measure);\n\n        this.isSplittedPart = false;\n        this.notToBeRemoved = false;\n    }\n\n    //#region Getter / Setter\n\n    /** The graphical measure where the parent continuous dynamic expression starts */\n    public get StartMeasure(): GraphicalMeasure { return this.startMeasure; }\n    public set StartMeasure(value: GraphicalMeasure) { this.startMeasure = value; }\n    /** The graphical measure where the parent continuous dynamic expression ends */\n    public get EndMeasure(): GraphicalMeasure { return this.endMeasure; }\n    public set EndMeasure(value: GraphicalMeasure) { this.endMeasure = value; }\n    /** The staff lin where the graphical dynamic expressions ends */\n    public get EndStaffLine(): StaffLine { return this.endMeasure ? this.endMeasure.ParentStaffLine : undefined; }\n    /**  Is true if this continuous expression is a wedge, that reaches over a system border and needs to be split into two. */\n    public get IsSplittedPart(): boolean { return this.isSplittedPart; }\n    public set IsSplittedPart(value: boolean) { this.isSplittedPart = value; }\n    /**  Is true if the dynamic is not a symbol but a text instruction. E.g. \"decrescendo\" */\n    public get IsVerbal(): boolean { return this.ContinuousDynamic.Label && this.ContinuousDynamic.Label.length > 0; }\n    /** True if this expression should not be removed if re-rendered */\n    public get NotToBeRemoved(): boolean { return this.notToBeRemoved; }\n    public set NotToBeRemoved(value: boolean) { this.notToBeRemoved = value; }\n    /** Holds the line objects that can be drawn via implementation */\n    public get Lines(): GraphicalLine[] { return this.lines; }\n\n    public get ContinuousDynamic(): ContinuousDynamicExpression { return this.SourceExpression as ContinuousDynamicExpression; }\n    //#endregion\n\n    //#region Public methods\n\n    public updateSkyBottomLine(): void {\n        // update Sky-BottomLine\n        const skyBottomLineCalculator: SkyBottomLineCalculator = this.parentStaffLine.SkyBottomLineCalculator;\n        const left: number = this.IsVerbal ? this.label.PositionAndShape.RelativePosition.x + this.label.PositionAndShape.BorderMarginLeft : 0;\n        const right: number = this.IsVerbal ? this.label.PositionAndShape.RelativePosition.x + this.label.PositionAndShape.BorderMarginRight : 0;\n        if (!this.IsVerbal && this.lines.length < 2) {\n            log.warn(\"Not enough lines for SkyBottomLine calculation\");\n        }\n        if (!this.IsVerbal) {\n            if (this.ContinuousDynamic.DynamicType !== ContDynamicEnum.crescendo &&\n                this.ContinuousDynamic.DynamicType !== ContDynamicEnum.diminuendo) {\n                // for now there is only crescendo or decrescendo anyways, but this will catch errors when we add new types in the future\n                log.warn(\"GraphicalContinuousDynamicExpression.updateSkyBottomLine(): \" +\n                    \"unhandled continuous dynamic type. start measure: \" + this.startMeasure?.MeasureNumber);\n            }\n        }\n        switch (this.Placement) {\n            case PlacementEnum.Above:\n                if (!this.IsVerbal) {\n                    if (this.ContinuousDynamic.DynamicType === ContDynamicEnum.crescendo) {\n                        skyBottomLineCalculator.updateSkyLineWithWedge(this.lines[0].Start, this.lines[0].End);\n                    } else if (this.ContinuousDynamic.DynamicType === ContDynamicEnum.diminuendo) {\n                        skyBottomLineCalculator.updateSkyLineWithWedge(this.lines[0].End, this.lines[0].Start);\n                    } // else covered with the log.warn above\n                } else {\n                    const yValue: number = this.label.PositionAndShape.BorderMarginTop + this.label.PositionAndShape.RelativePosition.y;\n                    skyBottomLineCalculator.updateSkyLineInRange(left, right, yValue);\n                }\n                break;\n            case PlacementEnum.Below:\n                if (!this.IsVerbal) {\n                    // console.log(`id: ${this.parentStaffLine.ParentStaff.Id}`);\n                    if (this.ContinuousDynamic.DynamicType === ContDynamicEnum.crescendo) {\n                        skyBottomLineCalculator.updateBottomLineWithWedge(this.lines[1].Start, this.lines[1].End);\n                    } else if (this.ContinuousDynamic.DynamicType === ContDynamicEnum.diminuendo) {\n                        skyBottomLineCalculator.updateBottomLineWithWedge(this.lines[1].End, this.lines[1].Start);\n                    } // else covered with the log.warn above\n                } else {\n                    const yValue: number = this.label.PositionAndShape.BorderMarginBottom + this.label.PositionAndShape.RelativePosition.y;\n                    skyBottomLineCalculator.updateBottomLineInRange(left, right, yValue);\n                }\n                break;\n            default:\n                log.error(\"Placement for GraphicalContinuousDynamicExpression is unknown\");\n        }\n    }\n\n    /**\n     * Calculate crescendo lines for (full).\n     * @param startX left most starting point\n     * @param endX right mist ending point\n     * @param y y placement\n     * @param wedgeOpeningLength length of the opening\n     * @param wedgeLineWidth line width of the wedge\n     */\n    public createCrescendoLines(startX: number, endX: number, y: number,\n                                wedgeOpeningLength: number = this.rules.WedgeOpeningLength, wedgeLineWidth: number = this.rules.WedgeLineWidth): void {\n        const lineStart: PointF2D = new PointF2D(startX, y);\n        const upperLineEnd: PointF2D = new PointF2D(endX, y - wedgeOpeningLength / 2);\n        const lowerLineEnd: PointF2D = new PointF2D(endX, y + wedgeOpeningLength / 2);\n        this.addWedgeLines(lineStart, upperLineEnd, lowerLineEnd, wedgeLineWidth);\n    }\n\n    /**\n     * Calculate crescendo lines for system break (first part).\n     * @param startX left most starting point\n     * @param endX right mist ending point\n     * @param y y placement\n     * @param wedgeMeasureEndOpeningLength length of opening at measure end\n     * @param wedgeOpeningLength length of the opening\n     * @param wedgeLineWidth line width of the wedge\n     */\n    public createFirstHalfCrescendoLines(startX: number, endX: number, y: number,\n                                         wedgeMeasureEndOpeningLength: number = this.rules.WedgeMeasureEndOpeningLength,\n                                         wedgeLineWidth: number = this.rules.WedgeLineWidth): void {\n        const lineStart: PointF2D = new PointF2D(startX, y);\n        const upperLineEnd: PointF2D = new PointF2D(endX, y - wedgeMeasureEndOpeningLength / 2);\n        const lowerLineEnd: PointF2D = new PointF2D(endX, y + wedgeMeasureEndOpeningLength / 2);\n        this.addWedgeLines(lineStart, upperLineEnd, lowerLineEnd, wedgeLineWidth);\n    }\n\n\n    /**\n     * Calculate crescendo lines for system break (second part).\n     * @param startX left most starting point\n     * @param endX right mist ending point\n     * @param y y placement\n     * @param wedgeMeasureBeginOpeningLength length of opening at measure start\n     * @param wedgeOpeningLength length of the opening\n     * @param wedgeLineWidth line width of the wedge\n     */\n    public createSecondHalfCrescendoLines(startX: number, endX: number, y: number,\n                                          wedgeMeasureBeginOpeningLength: number = this.rules.WedgeMeasureBeginOpeningLength,\n                                          wedgeOpeningLength: number = this.rules.WedgeOpeningLength,\n                                          wedgeLineWidth: number = this.rules.WedgeLineWidth): void {\n        const upperLineStart: PointF2D = new PointF2D(startX, y - wedgeMeasureBeginOpeningLength / 2);\n        const lowerLineStart: PointF2D = new PointF2D(startX, y + wedgeMeasureBeginOpeningLength / 2);\n        const upperLineEnd: PointF2D = new PointF2D(endX, y - wedgeOpeningLength / 2);\n        const lowerLineEnd: PointF2D = new PointF2D(endX, y + wedgeOpeningLength / 2);\n        this.addDoubleLines(upperLineStart, upperLineEnd, lowerLineStart, lowerLineEnd, wedgeLineWidth);\n    }\n\n    /**\n     * This method recalculates the Crescendo Lines (for all cases).\n     * @param startX left most starting point\n     * @param endX right most ending point\n     * @param y y placement\n     */\n    public recalculateCrescendoLines(startX: number, endX: number, y: number): void {\n        const isSecondHalfSplit: boolean = Math.abs(this.lines[0].Start.y - this.lines[1].Start.y) > 0.0001;\n        this.lines.clear();\n\n        if (isSecondHalfSplit) {\n            this.createSecondHalfCrescendoLines(startX, endX, y);\n        } else if (this.isSplittedPart) {\n            this.createFirstHalfCrescendoLines(startX, endX, y);\n        } else {\n            this.createCrescendoLines(startX, endX, y);\n        }\n    }\n\n    /**\n     * Calculate diminuendo lines for system break (full).\n     * @param startX left most starting point\n     * @param endX right mist ending point\n     * @param y y placement\n     * @param wedgeOpeningLength length of the opening\n     * @param wedgeLineWidth line width of the wedge\n     */\n    public createDiminuendoLines(startX: number, endX: number, y: number,\n                                 wedgeOpeningLength: number = this.rules.WedgeOpeningLength, wedgeLineWidth: number = this.rules.WedgeLineWidth): void {\n        const upperWedgeStart: PointF2D = new PointF2D(startX, y - wedgeOpeningLength / 2);\n        const lowerWedgeStart: PointF2D = new PointF2D(startX, y + wedgeOpeningLength / 2);\n        const wedgeEnd: PointF2D = new PointF2D(endX, y);\n        this.addWedgeLines(wedgeEnd, upperWedgeStart, lowerWedgeStart, wedgeLineWidth);\n    }\n\n    /**\n     * Calculate diminuendo lines for system break (first part).\n     * @param startX left most starting point\n     * @param endX right mist ending point\n     * @param y y placement\n     * @param wedgeOpeningLength length of the opening\n     * @param wedgeMeasureEndOpeningLength length of opening at measure end\n     * @param wedgeLineWidth line width of the wedge\n     */\n    public createFirstHalfDiminuendoLines(startX: number, endX: number, y: number,\n                                          wedgeOpeningLength: number = this.rules.WedgeOpeningLength,\n                                          wedgeMeasureEndOpeningLength: number = this.rules.WedgeMeasureEndOpeningLength,\n                                          wedgeLineWidth: number = this.rules.WedgeLineWidth): void {\n        const upperLineStart: PointF2D = new PointF2D(startX, y - wedgeOpeningLength / 2);\n        const lowerLineStart: PointF2D = new PointF2D(startX, y + wedgeOpeningLength / 2);\n        const upperLineEnd: PointF2D = new PointF2D(endX, y - wedgeMeasureEndOpeningLength / 2);\n        const lowerLineEnd: PointF2D = new PointF2D(endX, y + wedgeMeasureEndOpeningLength / 2);\n        this.addDoubleLines(upperLineStart, upperLineEnd, lowerLineStart, lowerLineEnd, wedgeLineWidth);\n    }\n\n    /**\n     * Calculate diminuendo lines for system break (second part).\n     * @param startX left most starting point\n     * @param endX right mist ending point\n     * @param y y placement\n     * @param wedgeMeasureBeginOpeningLength length of opening at measure start\n     * @param wedgeLineWidth line width of the wedge\n     */\n    public createSecondHalfDiminuendoLines(startX: number, endX: number, y: number,\n                                           wedgeMeasureBeginOpeningLength: number = this.rules.WedgeMeasureBeginOpeningLength,\n                                           wedgeLineWidth: number = this.rules.WedgeLineWidth): void {\n        const upperLineStart: PointF2D = new PointF2D(startX, y - wedgeMeasureBeginOpeningLength / 2);\n        const lowerLineStart: PointF2D = new PointF2D(startX, y + wedgeMeasureBeginOpeningLength / 2);\n        const lineEnd: PointF2D = new PointF2D(endX, y);\n        this.addWedgeLines(lineEnd, upperLineStart, lowerLineStart, wedgeLineWidth);\n    }\n\n    /**\n     * This method recalculates the diminuendo lines (for all cases).\n     * @param startX left most starting point\n     * @param endX right most ending point\n     * @param y y placement\n     */\n    public recalculateDiminuendoLines(startX: number, endX: number, yPosition: number): void {\n        const isFirstHalfSplit: boolean = Math.abs(this.lines[0].End.y - this.lines[1].End.y) > 0.0001;\n        this.lines.clear();\n        if (isFirstHalfSplit) {\n            this.createFirstHalfDiminuendoLines(startX, endX, yPosition);\n        } else if (this.isSplittedPart) {\n            this.createSecondHalfDiminuendoLines(startX, endX, yPosition);\n        } else {\n            this.createDiminuendoLines(startX, endX, yPosition);\n        }\n    }\n\n    /**\n     * Calculate the BoundingBox (as a box around the Wedge).\n     */\n    public calcPsi(): void {\n        if (this.IsVerbal) {\n            this.PositionAndShape.calculateBoundingBox();\n            return;\n        }\n        this.PositionAndShape.RelativePosition = this.lines[0].Start;\n        this.PositionAndShape.BorderMarginTop = this.lines[0].End.y - this.lines[0].Start.y;\n        this.PositionAndShape.BorderMarginBottom = this.lines[1].End.y - this.lines[1].Start.y;\n        this.PositionAndShape.Center.y = (this.PositionAndShape.BorderMarginTop + this.PositionAndShape.BorderMarginBottom) / 2;\n        // TODO is the center position correct? it wasn't set before, important for AlignmentManager.alignDynamicExpressions()\n        // console.log(`relative y, center y: ${this.PositionAndShape.RelativePosition.y},${this.PositionAndShape.Center.y})`);\n\n\n        if (this.ContinuousDynamic.DynamicType === ContDynamicEnum.crescendo) {\n            this.PositionAndShape.BorderMarginLeft = 0;\n            this.PositionAndShape.BorderMarginRight = this.lines[0].End.x - this.lines[0].Start.x;\n        } else {\n            this.PositionAndShape.BorderMarginLeft = this.lines[0].End.x - this.lines[0].Start.x;\n            this.PositionAndShape.BorderMarginRight = 0;\n        }\n    }\n\n    /**\n     * Clear Lines\n     */\n    public cleanUp(): void {\n        this.lines.clear();\n    }\n\n    /**\n     * Shift wedge in y position\n     * @param shift Number to shift\n     */\n    public shiftYPosition(shift: number): void {\n        if (this.IsVerbal) {\n            this.PositionAndShape.RelativePosition.y += shift;\n            this.PositionAndShape.calculateBoundingBox();\n        } else {\n            this.lines[0].Start.y += shift;\n            this.lines[0].End.y += shift;\n            this.lines[1].End.y += shift;\n        }\n    }\n\n    public squeeze(value: number): void {\n        // Verbal expressions are not squeezable and squeezing below the width is also not possible\n        if (this.IsVerbal) {\n            return;\n        }\n        const width: number = Math.abs(this.lines[0].End.x - this.lines[0].Start.x);\n        if (width < Math.abs(value)) {\n            return;\n        }\n        if (this.ContinuousDynamic.DynamicType === ContDynamicEnum.crescendo) {\n            if (value > 0) {\n                this.lines[0].Start.x += value;\n            } else {\n                this.lines[0].End.x += value;\n                this.lines[1].End.x += value;\n            }\n        } else {\n            if (value < 0) {\n                this.lines[0].Start.x += value;\n            } else {\n                this.lines[0].End.x += value;\n                this.lines[1].End.x += value;\n            }\n        }\n        this.calcPsi();\n    }\n\n    //#endregion\n\n    //#region Private methods\n\n    /**\n     * Create lines from points and add them to the memory\n     * @param wedgePoint start of the expression\n     * @param upperWedgeEnd end of the upper line\n     * @param lowerWedgeEnd end of lower line\n     * @param wedgeLineWidth line width\n     */\n    private addWedgeLines(wedgePoint: PointF2D, upperWedgeEnd: PointF2D, lowerWedgeEnd: PointF2D, wedgeLineWidth: number): void {\n        const upperLine: GraphicalLine = new GraphicalLine(wedgePoint, upperWedgeEnd, wedgeLineWidth);\n        const lowerLine: GraphicalLine = new GraphicalLine(wedgePoint, lowerWedgeEnd, wedgeLineWidth);\n\n        this.lines.push(upperLine);\n        this.lines.push(lowerLine);\n    }\n\n    /**\n     * Create top and bottom lines for continuing wedges\n     * @param upperLineStart start of the upper line\n     * @param upperLineEnd end of the upper line\n     * @param lowerLineStart start of the lower line\n     * @param lowerLineEnd end of lower line\n     * @param wedgeLineWidth line width\n     */\n    private addDoubleLines(upperLineStart: PointF2D, upperLineEnd: PointF2D, lowerLineStart: PointF2D, lowerLineEnd: PointF2D, wedgeLineWidth: number): void {\n        const upperLine: GraphicalLine = new GraphicalLine(upperLineStart, upperLineEnd, wedgeLineWidth);\n        const lowerLine: GraphicalLine = new GraphicalLine(lowerLineStart, lowerLineEnd, wedgeLineWidth);\n\n        this.lines.push(upperLine);\n        this.lines.push(lowerLine);\n    }\n\n    //#endregion\n}\n","import { PointF2D } from \"../../Common/DataObjects/PointF2D\";\n\nexport class GraphicalCurve {\n    private static bezierCurveStepSize: number = 1000;\n    private static tPow3: number[];\n    private static oneMinusTPow3: number[];\n    private static bezierFactorOne: number[];\n    private static bezierFactorTwo: number[];\n\n    // Pre-calculate Curve-independend factors, to be used later in the Slur- and TieCurvePoints calculation.\n    constructor() {\n        GraphicalCurve.tPow3 = new Array(GraphicalCurve.bezierCurveStepSize);\n        GraphicalCurve.oneMinusTPow3 = new Array(GraphicalCurve.bezierCurveStepSize);\n        GraphicalCurve.bezierFactorOne = new Array(GraphicalCurve.bezierCurveStepSize);\n        GraphicalCurve.bezierFactorTwo = new Array(GraphicalCurve.bezierCurveStepSize);\n        for (let i: number = 0; i < GraphicalCurve.bezierCurveStepSize; i++) {\n            const t: number =  i / GraphicalCurve.bezierCurveStepSize;\n\n            GraphicalCurve.tPow3[i] = Math.pow(t, 3);\n            GraphicalCurve.oneMinusTPow3[i] = Math.pow((1 - t), 3);\n            GraphicalCurve.bezierFactorOne[i] = 3 * Math.pow((1 - t), 2) * t;\n            GraphicalCurve.bezierFactorTwo[i] = 3 * (1 - t) * Math.pow(t, 2);\n        }\n    }\n\n    public bezierStartPt: PointF2D;\n    public bezierStartControlPt: PointF2D;\n    public bezierEndControlPt: PointF2D;\n    public bezierEndPt: PointF2D;\n\n    /**\n     *\n     * @param relativePosition\n     */\n    public calculateCurvePointAtIndex(relativePosition: number): PointF2D {\n        const index: number =  Math.round(relativePosition * GraphicalCurve.bezierCurveStepSize);\n        if (index < 0 || index >= GraphicalCurve.bezierCurveStepSize) {\n            return new PointF2D();\n        }\n\n        return new PointF2D(  (GraphicalCurve.oneMinusTPow3[index] * this.bezierStartPt.x\n            + GraphicalCurve.bezierFactorOne[index] * this.bezierStartControlPt.x\n            + GraphicalCurve.bezierFactorTwo[index] * this.bezierEndControlPt.x\n            + GraphicalCurve.tPow3[index] * this.bezierEndPt.x)\n            ,                 (GraphicalCurve.oneMinusTPow3[index] * this.bezierStartPt.y\n            + GraphicalCurve.bezierFactorOne[index] * this.bezierStartControlPt.y\n            + GraphicalCurve.bezierFactorTwo[index] * this.bezierEndControlPt.y + GraphicalCurve.tPow3[index] * this.bezierEndPt.y));\n    }\n}\n","import { StaffLine } from \"./StaffLine\";\nimport { InstantaneousDynamicExpression } from \"../VoiceData/Expressions/InstantaneousDynamicExpression\";\nimport { GraphicalMeasure } from \"./GraphicalMeasure\";\nimport { AbstractGraphicalExpression } from \"./AbstractGraphicalExpression\";\nimport { SkyBottomLineCalculator } from \"./SkyBottomLineCalculator\";\nimport { PlacementEnum } from \"../VoiceData/Expressions/AbstractExpression\";\nimport log from \"loglevel\";\n\nexport class GraphicalInstantaneousDynamicExpression extends AbstractGraphicalExpression {\n    protected mInstantaneousDynamicExpression: InstantaneousDynamicExpression;\n    protected mMeasure: GraphicalMeasure;\n\n    constructor(instantaneousDynamic: InstantaneousDynamicExpression, staffLine: StaffLine, measure: GraphicalMeasure) {\n        super(staffLine, instantaneousDynamic, measure.parentSourceMeasure);\n        this.mInstantaneousDynamicExpression = instantaneousDynamic;\n        this.mMeasure = measure;\n    }\n\n    public updateSkyBottomLine(): void {\n        const skyBottomLineCalculator: SkyBottomLineCalculator = this.parentStaffLine.SkyBottomLineCalculator;\n        const left: number = this.PositionAndShape.RelativePosition.x + this.PositionAndShape.BorderMarginLeft;\n        const right: number = this.PositionAndShape.RelativePosition.x + this.PositionAndShape.BorderMarginRight;\n        let yValue: number = 0;\n        switch (this.Placement) {\n            case PlacementEnum.Above:\n                yValue = this.PositionAndShape.RelativePosition.y + this.PositionAndShape.BorderMarginTop;\n                skyBottomLineCalculator.updateSkyLineInRange(left, right, yValue);\n                break;\n            case PlacementEnum.Below:\n                yValue = this.PositionAndShape.RelativePosition.y + this.PositionAndShape.BorderMarginBottom;\n                skyBottomLineCalculator.updateBottomLineInRange(left, right, yValue);\n                break;\n            default:\n                log.error(\"Placement for GraphicalInstantaneousDynamicExpression is unknown\");\n        }\n    }\n}\n","\nimport { StaffLine } from \"./StaffLine\";\nimport { AbstractTempoExpression } from \"../VoiceData/Expressions/AbstractTempoExpression\";\nimport { GraphicalLabel } from \"./GraphicalLabel\";\nimport { AbstractGraphicalExpression } from \"./AbstractGraphicalExpression\";\n\nexport class GraphicalInstantaneousTempoExpression extends AbstractGraphicalExpression {\n\n    constructor(tempoExpresssion: AbstractTempoExpression, label: GraphicalLabel) {\n        super((label.PositionAndShape.Parent.DataObject as StaffLine), tempoExpresssion, tempoExpresssion.parentMeasure);\n        this.label = label;\n    }\n\n    public get GraphicalLabel(): GraphicalLabel {\n        return this.label;\n    }\n\n    public updateSkyBottomLine(): void {\n        // Not implemented\n    }\n}\n","import { TextAlignmentEnum } from \"../../Common/Enums/TextAlignment\";\nimport { Label } from \"../Label\";\nimport { BoundingBox } from \"./BoundingBox\";\nimport { Clickable } from \"./Clickable\";\nimport { EngravingRules } from \"./EngravingRules\";\nimport { MusicSheetCalculator } from \"./MusicSheetCalculator\";\n\n/**\n * The graphical counterpart of a Label\n */\nexport class GraphicalLabel extends Clickable {\n    private label: Label;\n    private rules: EngravingRules;\n    public TextLines: {text: string, xOffset: number, width: number}[];\n    /** A reference to the Node in the SVG, if SVGBackend, otherwise undefined.\n     *  Allows manipulation without re-rendering, e.g. for dynamics, lyrics, etc.\n     *  For the Canvas backend, this is unfortunately not possible.\n     */\n    public SVGNode: Node;\n\n    /**\n     * Creates a new GraphicalLabel from a Label\n     * @param label  label object containing text\n     * @param textHeight Height of text\n     * @param alignment Alignement like left, right, top, ...\n     * @param parent Parent Bounding Box where the label is attached to\n     */\n    constructor(label: Label, textHeight: number, alignment: TextAlignmentEnum, rules: EngravingRules,\n                parent: BoundingBox = undefined, ) {\n        super();\n        this.label = label;\n        this.boundingBox = new BoundingBox(this, parent);\n        this.label.fontHeight = textHeight;\n        this.label.textAlignment = alignment;\n        this.rules = rules;\n    }\n\n    public get Label(): Label {\n        return this.label;\n    }\n\n    public toString(): string {\n        return `${this.label.text} (${this.boundingBox.RelativePosition.x},${this.boundingBox.RelativePosition.y})`;\n    }\n\n    /**\n     * Calculate GraphicalLabel's Borders according to its Alignment\n     * Create also the text-lines and their offsets here\n     */\n    public setLabelPositionAndShapeBorders(): void {\n        if (this.Label.text.trim() === \"\") {\n            return;\n        }\n        this.TextLines = [];\n        const labelMarginBorderFactor: number = this.rules?.LabelMarginBorderFactor ?? 0.1;\n        const lines: string[] = this.Label.text.split(/[\\n\\r]+/g);\n        const numOfLines: number = lines.length;\n        let maxWidth: number = 0;\n        for (let i: number = 0; i < numOfLines; i++) {\n            const line: string = lines[i].trim();\n            const widthToHeightRatio: number =\n            MusicSheetCalculator.TextMeasurer.computeTextWidthToHeightRatio(\n               line, this.Label.font, this.Label.fontStyle, this.label.fontFamily);\n            const currWidth: number = this.Label.fontHeight * widthToHeightRatio;\n            maxWidth = Math.max(maxWidth, currWidth);\n            // here push only text and width of the text:\n            this.TextLines.push({text: line, xOffset: 0, width: currWidth});\n        }\n\n        // maxWidth is calculated ->\n        // now also set the x-offsets:\n        for (const line of this.TextLines) {\n            let xOffset: number = 0;\n            switch (this.Label.textAlignment) {\n                case TextAlignmentEnum.RightBottom:\n                case TextAlignmentEnum.RightCenter:\n                case TextAlignmentEnum.RightTop:\n                    xOffset = maxWidth - line.width;\n                    break;\n                case TextAlignmentEnum.CenterBottom:\n                case TextAlignmentEnum.CenterCenter:\n                case TextAlignmentEnum.CenterTop:\n                    xOffset = (maxWidth - line.width) / 2;\n                    break;\n                default:\n                    break;\n            }\n            line.xOffset = xOffset;\n        }\n\n        let height: number = this.Label.fontHeight * numOfLines;\n        if (this.rules.SpacingBetweenTextLines > 0 && this.TextLines.length > 1) {\n            height += (this.rules.SpacingBetweenTextLines * numOfLines) / 10;\n        }\n        const bbox: BoundingBox = this.PositionAndShape;\n\n        switch (this.Label.textAlignment) {\n            case TextAlignmentEnum.CenterBottom:\n                bbox.BorderTop = -height;\n                bbox.BorderLeft = -maxWidth / 2;\n                bbox.BorderBottom = 0;\n                bbox.BorderRight = maxWidth / 2;\n                break;\n            case TextAlignmentEnum.CenterCenter:\n                bbox.BorderTop = -height / 2;\n                bbox.BorderLeft = -maxWidth / 2;\n                bbox.BorderBottom = height / 2;\n                bbox.BorderRight = maxWidth / 2;\n                break;\n            case TextAlignmentEnum.CenterTop:\n                bbox.BorderTop = 0;\n                bbox.BorderLeft = -maxWidth / 2;\n                bbox.BorderBottom = height;\n                bbox.BorderRight = maxWidth / 2;\n                break;\n            case TextAlignmentEnum.LeftBottom:\n                bbox.BorderTop = -height;\n                bbox.BorderLeft = 0;\n                bbox.BorderBottom = 0;\n                bbox.BorderRight = maxWidth;\n                break;\n            case TextAlignmentEnum.LeftCenter:\n                bbox.BorderTop = -height / 2;\n                bbox.BorderLeft = 0;\n                bbox.BorderBottom = height / 2;\n                bbox.BorderRight = maxWidth;\n                break;\n            case TextAlignmentEnum.LeftTop:\n                bbox.BorderTop = 0;\n                bbox.BorderLeft = 0;\n                bbox.BorderBottom = height;\n                bbox.BorderRight = maxWidth;\n                break;\n            case TextAlignmentEnum.RightBottom:\n                bbox.BorderTop = -height;\n                bbox.BorderLeft = -maxWidth;\n                bbox.BorderBottom = 0;\n                bbox.BorderRight = 0;\n                break;\n            case TextAlignmentEnum.RightCenter:\n                bbox.BorderTop = -height / 2;\n                bbox.BorderLeft = -maxWidth;\n                bbox.BorderBottom = height / 2;\n                bbox.BorderRight = 0;\n                break;\n            case TextAlignmentEnum.RightTop:\n                bbox.BorderTop = 0;\n                bbox.BorderLeft = -maxWidth;\n                bbox.BorderBottom = height;\n                bbox.BorderRight = 0;\n                break;\n            default:\n        }\n        bbox.BorderMarginTop = bbox.BorderTop - height * labelMarginBorderFactor;\n        bbox.BorderMarginLeft = bbox.BorderLeft - height * labelMarginBorderFactor;\n        bbox.BorderMarginBottom = bbox.BorderBottom + height * labelMarginBorderFactor;\n        bbox.BorderMarginRight = bbox.BorderRight + height * labelMarginBorderFactor;\n    }\n}\n","\nimport {OutlineAndFillStyleEnum} from \"./DrawingEnums\";\nimport {PointF2D} from \"../../Common/DataObjects/PointF2D\";\n\nexport class GraphicalLine {\n    constructor(start: PointF2D, end: PointF2D, width: number = 0,\n        styleEnum: OutlineAndFillStyleEnum = OutlineAndFillStyleEnum.BaseWritingColor,\n        colorHex: string = undefined) {\n        this.start = start;\n        this.end = end;\n        this.width = width;\n        this.styleId = <number>styleEnum;\n        this.colorHex = colorHex;\n    }\n    public styleId: number;\n\n    private start: PointF2D;\n    private end: PointF2D;\n    private width: number;\n    public colorHex: string; // will override styleId if not undefined\n\n    public get Start(): PointF2D {\n        return this.start;\n    }\n    public set Start(value: PointF2D) {\n        this.start = value;\n    }\n    public get End(): PointF2D {\n        return this.end;\n    }\n    public set End(value: PointF2D) {\n        this.end = value;\n    }\n    public get Width(): number {\n        return this.width;\n    }\n    public set Width(value: number) {\n        this.width = value;\n    }\n}\n","import {LyricsEntry} from \"../VoiceData/Lyrics/LyricsEntry\";\nimport {GraphicalLyricWord} from \"./GraphicalLyricWord\";\nimport {GraphicalLabel} from \"./GraphicalLabel\";\nimport {GraphicalStaffEntry} from \"./GraphicalStaffEntry\";\nimport {Label} from \"../Label\";\nimport {PointF2D} from \"../../Common/DataObjects/PointF2D\";\nimport {TextAlignmentEnum} from \"../../Common/Enums/TextAlignment\";\n\n/**\n * The graphical counterpart of a [[LyricsEntry]]\n */\nexport class GraphicalLyricEntry {\n    private lyricsEntry: LyricsEntry;\n    private graphicalLyricWord: GraphicalLyricWord;\n    private graphicalLabel: GraphicalLabel;\n    private graphicalStaffEntry: GraphicalStaffEntry;\n\n    constructor(lyricsEntry: LyricsEntry, graphicalStaffEntry: GraphicalStaffEntry, lyricsHeight: number, staffHeight: number) {\n        this.lyricsEntry = lyricsEntry;\n        this.graphicalStaffEntry = graphicalStaffEntry;\n        const lyricsTextAlignment: TextAlignmentEnum = graphicalStaffEntry.parentMeasure.parentSourceMeasure.Rules.LyricsAlignmentStandard;\n        // for small notes with long text, use center alignment\n        // TODO use this, fix center+left alignment combination spacing\n        if (lyricsEntry.Text.length >= 4\n            && lyricsEntry.Parent.Notes[0].Length.Denominator > 4\n            && lyricsTextAlignment === TextAlignmentEnum.LeftBottom) {\n            // lyricsTextAlignment = TextAlignmentAndPlacement.CenterBottom;\n        }\n        const label: Label = new Label(lyricsEntry.Text);\n        this.graphicalLabel = new GraphicalLabel(\n            label,\n            lyricsHeight,\n            lyricsTextAlignment,\n            this.graphicalStaffEntry.parentMeasure.parentSourceMeasure.Rules,\n            graphicalStaffEntry.PositionAndShape,\n        );\n        this.graphicalLabel.PositionAndShape.RelativePosition = new PointF2D(0, staffHeight);\n        if (lyricsTextAlignment === TextAlignmentEnum.LeftBottom) {\n            this.graphicalLabel.PositionAndShape.RelativePosition.x -= 1; // make lyrics optically left-aligned\n        }\n    }\n\n    public get LyricsEntry(): LyricsEntry {\n        return this.lyricsEntry;\n    }\n    public get ParentLyricWord(): GraphicalLyricWord {\n        return this.graphicalLyricWord;\n    }\n    public set ParentLyricWord(value: GraphicalLyricWord) {\n        this.graphicalLyricWord = value;\n    }\n    public get GraphicalLabel(): GraphicalLabel {\n        return this.graphicalLabel;\n    }\n    public set GraphicalLabel(value: GraphicalLabel) {\n        this.graphicalLabel = value;\n    }\n    public get StaffEntryParent(): GraphicalStaffEntry {\n        return this.graphicalStaffEntry;\n    }\n    public set StaffEntryParent(value: GraphicalStaffEntry) {\n        this.graphicalStaffEntry = value;\n    }\n}\n","import {LyricWord} from \"../VoiceData/Lyrics/LyricsWord\";\nimport {GraphicalLyricEntry} from \"./GraphicalLyricEntry\";\n\n/**\n * The graphical counterpart of a [[LyricWord]]\n */\nexport class GraphicalLyricWord {\n    private lyricWord: LyricWord;\n    private graphicalLyricsEntries: GraphicalLyricEntry[] = [];\n\n    constructor(lyricWord: LyricWord) {\n        this.lyricWord = lyricWord;\n        this.initialize();\n    }\n\n    public get GetLyricWord(): LyricWord {\n        return this.lyricWord;\n    }\n\n    public get GraphicalLyricsEntries(): GraphicalLyricEntry[] {\n        return this.graphicalLyricsEntries;\n    }\n\n    public set GraphicalLyricsEntries(value: GraphicalLyricEntry[]) {\n        this.graphicalLyricsEntries = value;\n    }\n\n    public isFilled(): boolean {\n        for (let i: number = 0; i < this.graphicalLyricsEntries.length; i++) {\n            if (!this.graphicalLyricsEntries[i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    private initialize(): void {\n        // FIXME: This is actually not needed in Javascript as we have dynamic memory allication?\n        for (let i: number = 0; i < this.lyricWord.Syllables.length; i++) {\n            this.graphicalLyricsEntries.push(undefined);\n        }\n    }\n}\n","import {GraphicalLabel} from \"./GraphicalLabel\";\nimport {GraphicalRectangle} from \"./GraphicalRectangle\";\n\nexport class GraphicalMarkedArea {\n    constructor(systemRectangle: GraphicalRectangle, labelRectangle: GraphicalRectangle = undefined, label: GraphicalLabel = undefined,\n                settingsLabel: GraphicalLabel = undefined) {\n        this.systemRectangle = systemRectangle;\n        this.labelRectangle = labelRectangle;\n        this.label = label;\n        this.settings = settingsLabel;\n    }\n\n    public systemRectangle: GraphicalRectangle;\n    public labelRectangle: GraphicalRectangle;\n    public label: GraphicalLabel;\n    public settings: GraphicalLabel;\n}\n","import {MusicSystem} from \"./MusicSystem\";\nimport {GraphicalStaffEntry} from \"./GraphicalStaffEntry\";\nimport {SourceMeasure} from \"../VoiceData/SourceMeasure\";\nimport {StaffLine} from \"./StaffLine\";\nimport {Staff} from \"../VoiceData/Staff\";\nimport {GraphicalObject} from \"./GraphicalObject\";\nimport {ClefInstruction} from \"../VoiceData/Instructions/ClefInstruction\";\nimport {KeyInstruction} from \"../VoiceData/Instructions/KeyInstruction\";\nimport {RhythmInstruction} from \"../VoiceData/Instructions/RhythmInstruction\";\nimport {Fraction} from \"../../Common/DataObjects/Fraction\";\nimport {Voice} from \"../VoiceData/Voice\";\nimport {VoiceEntry} from \"../VoiceData/VoiceEntry\";\nimport {SystemLinesEnum} from \"./SystemLinesEnum\";\nimport {BoundingBox} from \"./BoundingBox\";\nimport {PointF2D} from \"../../Common/DataObjects/PointF2D\";\n\n/**\n * Represents a measure in the music sheet (one measure in one staff line)\n */\nexport abstract class GraphicalMeasure extends GraphicalObject {\n    protected firstInstructionStaffEntry: GraphicalStaffEntry;\n    protected lastInstructionStaffEntry: GraphicalStaffEntry;\n\n    constructor(staff: Staff = undefined, parentSourceMeasure: SourceMeasure = undefined, staffLine: StaffLine = undefined) {\n        super();\n        this.parentStaff = staff;\n        this.parentSourceMeasure = parentSourceMeasure;\n        this.parentStaffLine = staffLine;\n        if (staffLine) {\n            this.parentStaff = staffLine.ParentStaff;\n            this.PositionAndShape = new BoundingBox(this, staffLine.PositionAndShape);\n        } else {\n            this.PositionAndShape = new BoundingBox(this);\n        }\n        this.PositionAndShape.BorderBottom = 4;\n        if (this.parentSourceMeasure) {\n            this.measureNumber = this.parentSourceMeasure.MeasureNumber;\n        }\n\n        this.staffEntries = [];\n    }\n\n    public parentSourceMeasure: SourceMeasure;\n    public staffEntries: GraphicalStaffEntry[];\n    /**\n     * The x-width of possibly existing: repetition start line, clef, key, rhythm.\n     */\n    public beginInstructionsWidth: number;\n    /**\n     * The minimum possible x-width of all staff entries without overlapping.\n     */\n    public minimumStaffEntriesWidth: number;\n    /**\n     * Will be set by music system builder while building systems.\n     */\n    public staffEntriesScaleFactor: number;\n    /**\n     * The x-width of possibly existing: repetition end line, clef.\n     */\n    public endInstructionsWidth: number;\n    public hasError: boolean;\n    /**\n     * Whether or not this measure is nothing but rest(s).\n     * Also see SourceMeasure.allRests, which is not the same, because a source measure can have multiple staffs/graphicalMeasures.\n     */\n    public hasOnlyRests: boolean = false;\n\n    private parentStaff: Staff;\n    private parentMusicSystem: MusicSystem;\n    private measureNumber: number = -1;\n    private parentStaffLine: StaffLine;\n    /** Used to show key, rhythm changes at the end of the system, has MeasureNumber < 0, because never set. */\n    public IsExtraGraphicalMeasure: boolean;\n    public ExtraGraphicalMeasurePreviousMeasure: GraphicalMeasure;\n    public ShowTimeSignature: boolean = true;\n\n    public get ParentStaff(): Staff {\n        return this.parentStaff;\n    }\n\n    public get ParentMusicSystem(): MusicSystem {\n        return this.parentMusicSystem;\n    }\n\n    public set ParentMusicSystem(value: MusicSystem) {\n        this.parentMusicSystem = value;\n    }\n\n    public get MeasureNumber(): number {\n        return this.measureNumber;\n    }\n\n    public get FirstInstructionStaffEntry(): GraphicalStaffEntry {\n        return this.firstInstructionStaffEntry;\n    }\n\n    public set FirstInstructionStaffEntry(value: GraphicalStaffEntry) {\n        this.firstInstructionStaffEntry = value;\n    }\n\n    public get LastInstructionStaffEntry(): GraphicalStaffEntry {\n        return this.lastInstructionStaffEntry;\n    }\n\n    public set LastInstructionStaffEntry(value: GraphicalStaffEntry) {\n        this.lastInstructionStaffEntry = value;\n    }\n\n    public get ParentStaffLine(): StaffLine {\n        return this.parentStaffLine;\n    }\n\n    public set ParentStaffLine(value: StaffLine) {\n        this.parentStaffLine = value;\n        if (this.parentStaffLine) {\n            this.PositionAndShape.Parent = this.parentStaffLine.PositionAndShape;\n        }\n    }\n\n    /**\n     * Reset all the geometric values and parameters of this measure and put it in an initialized state.\n     * This is needed to evaluate a measure a second time by system builder.\n     */\n    public resetLayout(): void {\n        throw new Error(\"not implemented\");\n    }\n\n    /**\n     * Return the x-width of a given measure line.\n     * @param line\n     */\n    public getLineWidth(line: SystemLinesEnum): number {\n        throw new Error(\"not implemented\");\n    }\n\n    /**\n     * Add the given clef to the begin of the measure.\n     * This has to update/increase BeginInstructionsWidth.\n     * @param clef\n     */\n    public addClefAtBegin(clef: ClefInstruction): void {\n        throw new Error(\"not implemented\");\n    }\n\n    /**\n     * Add the given key to the begin of the measure.\n     * This has to update/increase BeginInstructionsWidth.\n     * @param currentKey - The new valid key.\n     * @param previousKey - The old cancelled key. Needed to show which accidentals are not valid any more.\n     * @param currentClef - The valid clef. Needed to put the accidentals on the right y-positions.\n     */\n    public addKeyAtBegin(currentKey: KeyInstruction, previousKey: KeyInstruction, currentClef: ClefInstruction): void {\n        throw new Error(\"not implemented\");\n    }\n\n    /**\n     * Add the given rhythm to the begin of the measure.\n     * This has to update/increase BeginInstructionsWidth.\n     * @param rhythm\n     */\n    public addRhythmAtBegin(rhythm: RhythmInstruction): void {\n        throw new Error(\"not implemented\");\n    }\n\n    /**\n     * Add the given clef to the end of the measure.\n     * This has to update/increase EndInstructionsWidth.\n     * @param clef\n     */\n    public addClefAtEnd(clef: ClefInstruction, visible: boolean = true): void {\n        throw new Error(\"not implemented\");\n    }\n\n    /**\n     * Set the x-position relative to the staffline (y-Position is always 0 relative to the staffline).\n     * @param xPos\n     */\n    public setPositionInStaffline(xPos: number): void {\n        this.PositionAndShape.RelativePosition = new PointF2D(xPos, 0);\n    }\n\n    /**\n     * Set the overall x-width of the measure.\n     * @param width\n     */\n    public setWidth(width: number): void {\n        this.PositionAndShape.BorderRight = width;\n    }\n\n    /**\n     * This method is called after the StaffEntriesScaleFactor has been set.\n     * Here the final x-positions of the staff entries have to be set.\n     * (multiply the minimal positions with the scaling factor, considering the BeginInstructionsWidth).\n     */\n    public layoutSymbols(): void {\n        throw new Error(\"not implemented\");\n    }\n\n    public findGraphicalStaffEntryFromTimestamp(relativeTimestamp: Fraction): GraphicalStaffEntry {\n        for (let idx: number = 0, len: number = this.staffEntries.length; idx < len; ++idx) {\n            const graphicalStaffEntry: GraphicalStaffEntry = this.staffEntries[idx];\n            if (graphicalStaffEntry.relInMeasureTimestamp?.Equals(relativeTimestamp)) {\n                return graphicalStaffEntry;\n            }\n        }\n        return undefined;\n    }\n\n    /**\n     * Iterate from start to end and find the [[GraphicalStaffEntry]] with the same absolute timestamp.\n     * @param absoluteTimestamp\n     * @returns {any}\n     */\n    public findGraphicalStaffEntryFromVerticalContainerTimestamp(absoluteTimestamp: Fraction): GraphicalStaffEntry {\n        for (let idx: number = 0, len: number = this.staffEntries.length; idx < len; ++idx) {\n            const graphicalStaffEntry: GraphicalStaffEntry = this.staffEntries[idx];\n            if (graphicalStaffEntry.sourceStaffEntry.VerticalContainerParent.getAbsoluteTimestamp().Equals(absoluteTimestamp)) {\n                return graphicalStaffEntry;\n            }\n        }\n        return undefined;\n    }\n\n    /**\n     * Check if the all the [[GraphicalMeasure]]'s [[StaffEntry]]s (their minimum Length) have the same duration with the [[SourceMeasure]].\n     * @returns {boolean}\n     */\n    public hasSameDurationWithSourceMeasureParent(): boolean {\n        const duration: Fraction = new Fraction(0, 1);\n        for (let idx: number = 0, len: number = this.staffEntries.length; idx < len; ++idx) {\n            const graphicalStaffEntry: GraphicalStaffEntry = this.staffEntries[idx];\n            duration.Add(graphicalStaffEntry.findStaffEntryMinNoteLength());\n        }\n        return duration.Equals(this.parentSourceMeasure.Duration);\n    }\n\n    /**\n     * Check a whole [[Measure]] for the presence of multiple Voices (used for Stem direction).\n     * @returns {boolean}\n     */\n    public hasMultipleVoices(): boolean {\n        if (this.staffEntries.length === 0) {\n            return false;\n        }\n        const voices: Voice[] = [];\n        for (let idx: number = 0, len: number = this.staffEntries.length; idx < len; ++idx) {\n            const staffEntry: GraphicalStaffEntry = this.staffEntries[idx];\n            for (let idx2: number = 0, len2: number = staffEntry.sourceStaffEntry.VoiceEntries.length; idx2 < len2; ++idx2) {\n                const voiceEntry: VoiceEntry = staffEntry.sourceStaffEntry.VoiceEntries[idx2];\n                if (voices.indexOf(voiceEntry.ParentVoice) < 0) {\n                    voices.push(voiceEntry.ParentVoice);\n                }\n            }\n        }\n        if (voices.length > 1) {\n            return true;\n        }\n        return false;\n    }\n\n    public isVisible(): boolean {\n        return this.ParentStaff.ParentInstrument.Visible;\n    }\n\n    public getGraphicalMeasureDurationFromStaffEntries(): Fraction {\n        let duration: Fraction = new Fraction(0, 1);\n        const voices: Voice[] = [];\n        for (let idx: number = 0, len: number = this.staffEntries.length; idx < len; ++idx) {\n            const graphicalStaffEntry: GraphicalStaffEntry = this.staffEntries[idx];\n            for (let idx2: number = 0, len2: number = graphicalStaffEntry.sourceStaffEntry.VoiceEntries.length; idx2 < len2; ++idx2) {\n                const voiceEntry: VoiceEntry = graphicalStaffEntry.sourceStaffEntry.VoiceEntries[idx2];\n                if (voices.indexOf(voiceEntry.ParentVoice) < 0) {\n                    voices.push(voiceEntry.ParentVoice);\n                }\n            }\n        }\n        for (let idx: number = 0, len: number = voices.length; idx < len; ++idx) {\n            const voice: Voice = voices[idx];\n            const voiceDuration: Fraction = new Fraction(0, 1);\n            for (const graphicalStaffEntry of this.staffEntries) {\n                for (const gve of graphicalStaffEntry.graphicalVoiceEntries) {\n                    if (gve.parentVoiceEntry.ParentVoice === voice && gve.notes.length > 0) {\n                        voiceDuration.Add(gve.notes[0].graphicalNoteLength);\n                    }\n                }\n            }\n            if (duration.lt(voiceDuration)) {\n                duration = Fraction.createFromFraction(voiceDuration);\n            }\n        }\n        return duration;\n    }\n\n    public addGraphicalStaffEntry(graphicalStaffEntry: GraphicalStaffEntry): void {\n        this.staffEntries.push(graphicalStaffEntry);\n    }\n\n    /**\n     * Add a [[StaffEntry]] (along with its [[BoundingBox]]) to the current Measure.\n     * @param staffEntry\n     */\n    public addGraphicalStaffEntryAtTimestamp(staffEntry: GraphicalStaffEntry): void {\n        if (staffEntry) {\n            if (this.staffEntries.length === 0 || this.staffEntries[this.staffEntries.length - 1].relInMeasureTimestamp.lt(staffEntry.relInMeasureTimestamp)) {\n                this.staffEntries.push(staffEntry);\n            } else {\n                for (let i: number = this.staffEntries.length - 1; i >= 0; i--) {\n                    if (this.staffEntries[i].relInMeasureTimestamp.lt(staffEntry.relInMeasureTimestamp)) {\n                        this.staffEntries.splice(i + 1, 0, staffEntry);\n                        break;\n                    }\n                    if (i === 0) {\n                        this.staffEntries.splice(i, 0, staffEntry);\n                    }\n                }\n            }\n        }\n    }\n\n    public isPianoRightHand(): boolean {\n        return this.isUpperStaffOfInstrument();\n    }\n\n    public isPianoLeftHand(): boolean {\n        return this.isLowerStaffOfInstrument();\n    }\n\n    public isUpperStaffOfInstrument(): boolean {\n        if (this.parentStaff.ParentInstrument.Staves.length === 1) {\n            return true;\n        }\n        return this.ParentStaff === this.parentStaff.ParentInstrument.Staves[0];\n    }\n\n    public isLowerStaffOfInstrument(): boolean {\n        if (this.parentStaff.ParentInstrument.Staves.length === 1) {\n            return false; // technically this could be true as well, but we want this to be treated as upper and not return the same value.\n            // e.g. for a violin, fingerings should go above.\n        }\n        return this.ParentStaff === this.ParentStaff.ParentInstrument.Staves.last();\n    }\n\n    public beginsWithLineRepetition(): boolean {\n        const sourceMeasure: SourceMeasure = this.parentSourceMeasure;\n        if (!sourceMeasure) {\n            return false;\n        }\n        return sourceMeasure.beginsWithLineRepetition();\n    }\n\n    /**\n     * Check if this Measure is a Repetition Ending.\n     * @returns {boolean}\n     */\n    public endsWithLineRepetition(): boolean {\n        const sourceMeasure: SourceMeasure = this.parentSourceMeasure;\n        if (!sourceMeasure) {\n            return false;\n        }\n        return sourceMeasure.endsWithLineRepetition();\n    }\n\n    /**\n     * Check if a Repetition starts at the next Measure.\n     * @returns {boolean}\n     */\n    public beginsWithWordRepetition(): boolean {\n        const sourceMeasure: SourceMeasure = this.parentSourceMeasure;\n        if (!sourceMeasure) {\n            return false;\n        }\n        return sourceMeasure.beginsWithWordRepetition();\n    }\n\n    /**\n     * Check if this Measure is a Repetition Ending.\n     */\n    public endsWithWordRepetition(): boolean {\n        const sourceMeasure: SourceMeasure = this.parentSourceMeasure;\n        if (!sourceMeasure) {\n            return false;\n        }\n        return sourceMeasure.endsWithWordRepetition();\n    }\n\n    public getTransposedHalftones(): number {\n        const transposeHalftones: number = this.parentStaff.ParentInstrument.GetMusicSheet.Transpose +\n            this.parentStaff.ParentInstrument.Transpose;\n        // if (!transposeHalftones) {\n        //     transposeHalftones = this.parentStaff.ParentInstrument.Transpose;\n        // }\n        return transposeHalftones;\n    }\n}\n\n","import {BoundingBox} from \"./BoundingBox\";\nimport {GraphicalObject} from \"./GraphicalObject\";\nimport {GraphicalLabel} from \"./GraphicalLabel\";\nimport {MusicSystem} from \"./MusicSystem\";\nimport {EngravingRules} from \"./EngravingRules\";\nimport {PointF2D} from \"../../Common/DataObjects/PointF2D\";\nimport {GraphicalMusicSheet} from \"./GraphicalMusicSheet\";\n\nexport class GraphicalMusicPage extends GraphicalObject {\n    private musicSystems: MusicSystem[] = [];\n    private labels: GraphicalLabel[] = [];\n    private parent: GraphicalMusicSheet;\n    private pageNumber: number;\n\n    constructor(parent: GraphicalMusicSheet) {\n        super();\n        this.parent = parent;\n        this.boundingBox = new BoundingBox(this, undefined);\n    }\n\n    public get MusicSystems(): MusicSystem[] {\n        return this.musicSystems;\n    }\n\n    public set MusicSystems(value: MusicSystem[]) {\n        this.musicSystems = value;\n    }\n\n    public get Labels(): GraphicalLabel[] {\n        return this.labels;\n    }\n\n    public set Labels(value: GraphicalLabel[]) {\n        this.labels = value;\n    }\n\n    public get Parent(): GraphicalMusicSheet {\n        return this.parent;\n    }\n\n    public set Parent(value: GraphicalMusicSheet) {\n        this.parent = value;\n    }\n\n    public get PageNumber(): number {\n        return this.pageNumber;\n    }\n\n    public set PageNumber(value: number) {\n        this.pageNumber = value;\n    }\n\n    /**\n     * This method calculates the absolute Position of each GraphicalMusicPage according to a given placement\n     * @param pageIndex\n     * @param rules\n     * @returns {PointF2D}\n     */\n    public setMusicPageAbsolutePosition(pageIndex: number, rules: EngravingRules): PointF2D {\n        return new PointF2D(0.0, 0.0);\n\n        // use this code if pages are rendered on only one canvas:\n        // if (rules.PagePlacement === PagePlacementEnum.Down) {\n        //     return new PointF2D(0.0, pageIndex * rules.PageHeight);\n        // } else if (rules.PagePlacement === PagePlacementEnum.Right) {\n        //     return new PointF2D(pageIndex * this.parent.ParentMusicSheet.pageWidth, 0.0);\n        // } else {\n        //     // placement RightDown\n        //     if (pageIndex % 2 === 0) {\n        //         if (pageIndex === 0) {\n        //             return new PointF2D(0.0, pageIndex * rules.PageHeight);\n        //         } else {\n        //             return new PointF2D(0.0, (pageIndex - 1) * rules.PageHeight);\n        //         }\n        //     } else {\n        //         if (pageIndex === 1) {\n        //             return new PointF2D(this.parent.ParentMusicSheet.pageWidth, (pageIndex - 1) * rules.PageHeight);\n        //         } else {\n        //             return new PointF2D(this.parent.ParentMusicSheet.pageWidth, (pageIndex - 2) * rules.PageHeight);\n        //         }\n        //     }\n        // }\n    }\n}\n\nexport enum PagePlacementEnum {\n    Down,\n    Right,\n    RightDown\n}\n","import {MusicSheet} from \"../MusicSheet\";\nimport {SourceMeasure} from \"../VoiceData/SourceMeasure\";\nimport {GraphicalMeasure} from \"./GraphicalMeasure\";\nimport {GraphicalMusicPage} from \"./GraphicalMusicPage\";\nimport {VerticalGraphicalStaffEntryContainer} from \"./VerticalGraphicalStaffEntryContainer\";\nimport {GraphicalLabel} from \"./GraphicalLabel\";\nimport {GraphicalLine} from \"./GraphicalLine\";\nimport {MusicSystem} from \"./MusicSystem\";\nimport {GraphicalStaffEntry} from \"./GraphicalStaffEntry\";\nimport {SourceStaffEntry} from \"../VoiceData/SourceStaffEntry\";\nimport {PointF2D} from \"../../Common/DataObjects/PointF2D\";\nimport {ClefInstruction} from \"../VoiceData/Instructions/ClefInstruction\";\nimport {AbstractNotationInstruction} from \"../VoiceData/Instructions/AbstractNotationInstruction\";\nimport {KeyInstruction} from \"../VoiceData/Instructions/KeyInstruction\";\nimport {Fraction} from \"../../Common/DataObjects/Fraction\";\nimport {GraphicalNote} from \"./GraphicalNote\";\nimport {Instrument} from \"../Instrument\";\nimport {BoundingBox} from \"./BoundingBox\";\nimport {MusicSheetCalculator} from \"./MusicSheetCalculator\";\nimport log from \"loglevel\";\n//import { Dictionary } from \"typescript-collections\"; // unused for now\nimport {CollectionUtil} from \"../../Util/CollectionUtil\";\nimport {SelectionStartSymbol} from \"./SelectionStartSymbol\";\nimport {SelectionEndSymbol} from \"./SelectionEndSymbol\";\nimport {OutlineAndFillStyleEnum} from \"./DrawingEnums\";\nimport { MusicSheetDrawer } from \"./MusicSheetDrawer\";\nimport { GraphicalVoiceEntry } from \"./GraphicalVoiceEntry\";\nimport { GraphicalObject } from \"./GraphicalObject\";\n// import { VexFlowMusicSheetDrawer } from \"./VexFlow/VexFlowMusicSheetDrawer\";\n// import { SvgVexFlowBackend } from \"./VexFlow/SvgVexFlowBackend\"; // causes build problem with npm start\n\n/**\n * The graphical counterpart of a [[MusicSheet]]\n */\nexport class GraphicalMusicSheet {\n    constructor(musicSheet: MusicSheet, calculator: MusicSheetCalculator) {\n        this.musicSheet = musicSheet;\n        this.numberOfStaves = this.musicSheet.Staves.length;\n        this.calculator = calculator;\n        this.calculator.initialize(this);\n    }\n\n    private musicSheet: MusicSheet;\n    //private fontInfo: FontInfo = FontInfo.Info;\n    private calculator: MusicSheetCalculator;\n    public drawer: MusicSheetDrawer;\n    private musicPages: GraphicalMusicPage[] = [];\n    /** measures (i,j) where i is the measure number and j the staff index (e.g. staff indices 0, 1 for two piano parts) */\n    private measureList: GraphicalMeasure[][] = [];\n    private verticalGraphicalStaffEntryContainers: VerticalGraphicalStaffEntryContainer[] = [];\n    private title: GraphicalLabel;\n    private subtitle: GraphicalLabel;\n    private composer: GraphicalLabel;\n    private lyricist: GraphicalLabel;\n    private cursors: GraphicalLine[] = [];\n    private selectionStartSymbol: SelectionStartSymbol;\n    private selectionEndSymbol: SelectionEndSymbol;\n    private minAllowedSystemWidth: number;\n    //private systemImages: Dictionary<MusicSystem, SystemImageProperties> = new Dictionary<MusicSystem, SystemImageProperties>();\n    private numberOfStaves: number;\n    private leadSheet: boolean = false;\n\n    public get ParentMusicSheet(): MusicSheet {\n        return this.musicSheet;\n    }\n\n    public get GetCalculator(): MusicSheetCalculator {\n        return this.calculator;\n    }\n\n    public get MusicPages(): GraphicalMusicPage[] {\n        return this.musicPages;\n    }\n\n    public set MusicPages(value: GraphicalMusicPage[]) {\n        this.musicPages = value;\n    }\n\n    //public get FontInfo(): FontInfo {\n    //    return this.fontInfo;\n    //}\n\n    public get MeasureList(): GraphicalMeasure[][] {\n        return this.measureList;\n    }\n\n    public set MeasureList(value: GraphicalMeasure[][]) {\n        this.measureList = value;\n    }\n\n    public get VerticalGraphicalStaffEntryContainers(): VerticalGraphicalStaffEntryContainer[] {\n        return this.verticalGraphicalStaffEntryContainers;\n    }\n\n    public set VerticalGraphicalStaffEntryContainers(value: VerticalGraphicalStaffEntryContainer[]) {\n        this.verticalGraphicalStaffEntryContainers = value;\n    }\n\n    public get Title(): GraphicalLabel {\n        return this.title;\n    }\n\n    public set Title(value: GraphicalLabel) {\n        this.title = value;\n    }\n\n    public get Subtitle(): GraphicalLabel {\n        return this.subtitle;\n    }\n\n    public set Subtitle(value: GraphicalLabel) {\n        this.subtitle = value;\n    }\n\n    public get Composer(): GraphicalLabel {\n        return this.composer;\n    }\n\n    public set Composer(value: GraphicalLabel) {\n        this.composer = value;\n    }\n\n    public get Lyricist(): GraphicalLabel {\n        return this.lyricist;\n    }\n\n    public set Lyricist(value: GraphicalLabel) {\n        this.lyricist = value;\n    }\n\n    public get Cursors(): GraphicalLine[] {\n        return this.cursors;\n    }\n\n    public get SelectionStartSymbol(): SelectionStartSymbol {\n        return this.selectionStartSymbol;\n    }\n\n    public get SelectionEndSymbol(): SelectionEndSymbol {\n        return this.selectionEndSymbol;\n    }\n\n    public get MinAllowedSystemWidth(): number {\n        return this.minAllowedSystemWidth;\n    }\n\n    public set MinAllowedSystemWidth(value: number) {\n        this.minAllowedSystemWidth = value;\n    }\n\n    // public get SystemImages(): Dictionary<MusicSystem, SystemImageProperties> {\n    //     return this.systemImages;\n    // }\n\n    public get NumberOfStaves(): number {\n        return this.numberOfStaves;\n    }\n\n    public get LeadSheet(): boolean {\n        return this.leadSheet;\n    }\n\n    public set LeadSheet(value: boolean) {\n        this.leadSheet = value;\n    }\n\n    /**\n     * Calculate the Absolute Positions from the Relative Positions.\n     * @param graphicalMusicSheet\n     */\n    public static transformRelativeToAbsolutePosition(graphicalMusicSheet: GraphicalMusicSheet): void {\n        for (let i: number = 0; i < graphicalMusicSheet.MusicPages.length; i++) {\n            const pageAbsolute: PointF2D = graphicalMusicSheet.MusicPages[i].setMusicPageAbsolutePosition(i, graphicalMusicSheet.ParentMusicSheet.Rules);\n            const page: GraphicalMusicPage = graphicalMusicSheet.MusicPages[i];\n            page.PositionAndShape.calculateAbsolutePositionsRecursive(pageAbsolute.x, pageAbsolute.y);\n        }\n    }\n\n    public Initialize(): void {\n        this.verticalGraphicalStaffEntryContainers = [];\n        this.musicPages = [];\n        this.measureList = [];\n    }\n\n    public reCalculate(): void {\n        this.calculator.calculate();\n    }\n\n    // unused method\n    // public prepare(): void {\n    //     this.calculator.prepareGraphicalMusicSheet();\n    // }\n\n    public EnforceRedrawOfMusicSystems(): void {\n        for (let idx: number = 0, len: number = this.musicPages.length; idx < len; ++idx) {\n            const graphicalMusicPage: GraphicalMusicPage = this.musicPages[idx];\n            for (let idx2: number = 0, len2: number = graphicalMusicPage.MusicSystems.length; idx2 < len2; ++idx2) {\n                const musicSystem: MusicSystem = graphicalMusicPage.MusicSystems[idx2];\n                musicSystem.needsToBeRedrawn = true;\n            }\n        }\n    }\n\n    public getClickedObject<T>(positionOnMusicSheet: PointF2D): T {\n        for (let idx: number = 0, len: number = this.MusicPages.length; idx < len; ++idx) {\n            const graphicalMusicPage: GraphicalMusicPage = this.MusicPages[idx];\n            return graphicalMusicPage.PositionAndShape.getClickedObjectOfType<T>(positionOnMusicSheet);\n        }\n        return undefined;\n    }\n\n    public findGraphicalMeasure(measureIndex: number, staffIndex: number): GraphicalMeasure {\n        for (let i: number = measureIndex; i >= 0; i--) {\n            const gMeasure: GraphicalMeasure = this.measureList[i][staffIndex];\n            if (gMeasure) {\n                return gMeasure;\n            }\n            // else look backwards (previous measures). this is only really valid for MultipleRestMeasures of course.\n        }\n        return undefined; // shouldn't happen\n    }\n\n    /**\n     * Search the MeasureList for a certain GraphicalStaffEntry with the given SourceStaffEntry,\n     * at a certain verticalIndex (eg a corresponding Staff), starting at a specific horizontalIndex (eg specific GraphicalMeasure).\n     * @param staffIndex\n     * @param measureIndex\n     * @param sourceStaffEntry\n     * @returns {any}\n     */\n    public findGraphicalStaffEntryFromMeasureList(staffIndex: number, measureIndex: number, sourceStaffEntry: SourceStaffEntry): GraphicalStaffEntry {\n        for (let i: number = measureIndex; i < this.measureList.length; i++) {\n            const graphicalMeasure: GraphicalMeasure = this.measureList[i][staffIndex];\n            if (!graphicalMeasure) {\n                continue;\n            }\n            for (let idx: number = 0, len: number = graphicalMeasure.staffEntries.length; idx < len; ++idx) {\n                const graphicalStaffEntry: GraphicalStaffEntry = graphicalMeasure.staffEntries[idx];\n                if (graphicalStaffEntry.sourceStaffEntry === sourceStaffEntry) {\n                    return graphicalStaffEntry;\n                }\n            }\n        }\n        return undefined;\n    }\n\n    /**\n     * Return the next (to the right) not null GraphicalStaffEntry from a given Index.\n     * @param staffIndex\n     * @param measureIndex\n     * @param graphicalStaffEntry\n     * @returns {any}\n     */\n    public findNextGraphicalStaffEntry(staffIndex: number, measureIndex: number, graphicalStaffEntry: GraphicalStaffEntry): GraphicalStaffEntry {\n        const graphicalMeasure: GraphicalMeasure = graphicalStaffEntry.parentMeasure;\n        const graphicalStaffEntryIndex: number = graphicalMeasure.staffEntries.indexOf(graphicalStaffEntry);\n        if (graphicalStaffEntryIndex < graphicalMeasure.staffEntries.length - 1) {\n            return graphicalMeasure.staffEntries[graphicalStaffEntryIndex + 1];\n        } else if (measureIndex < this.measureList.length - 1) {\n            const nextMeasure: GraphicalMeasure = this.measureList[measureIndex + 1][staffIndex];\n            if (nextMeasure.staffEntries.length > 0) {\n                return nextMeasure.staffEntries[0];\n            }\n        }\n        return undefined;\n    }\n\n    public getFirstVisibleMeasuresListFromIndices(start: number, end: number): GraphicalMeasure[] {\n        const graphicalMeasures: GraphicalMeasure[] = [];\n        const numberOfStaves: number = this.measureList[0].length;\n        for (let i: number = start; i <= end; i++) {\n            for (let j: number = 0; j < numberOfStaves; j++) {\n                if (this.measureList[i][j].isVisible()) {\n                    graphicalMeasures.push(this.measureList[i][j]);\n                    break;\n                }\n            }\n        }\n        return graphicalMeasures;\n    }\n\n    public orderMeasuresByStaffLine(measures: GraphicalMeasure[]): GraphicalMeasure[][] {\n        const orderedMeasures: GraphicalMeasure[][] = [];\n        let mList: GraphicalMeasure[] = [];\n        orderedMeasures.push(mList);\n        for (let i: number = 0; i < measures.length; i++) {\n            if (i === 0) {\n                mList.push(measures[0]);\n            } else {\n                if (measures[i].ParentStaffLine === measures[i - 1].ParentStaffLine) {\n                    mList.push(measures[i]);\n                } else {\n                    if (orderedMeasures.indexOf(mList) === -1) {\n                        orderedMeasures.push(mList);\n                    }\n                    mList = [];\n                    orderedMeasures.push(mList);\n                    mList.push(measures[i]);\n                }\n            }\n        }\n        return orderedMeasures;\n    }\n\n    /**\n     * Return the active Clefs at the start of the first SourceMeasure.\n     * @returns {ClefInstruction[]}\n     */\n    public initializeActiveClefs(): ClefInstruction[] {\n        const activeClefs: ClefInstruction[] = [];\n        const firstSourceMeasure: SourceMeasure = this.musicSheet.getFirstSourceMeasure();\n        if (firstSourceMeasure) {\n            for (let i: number = 0; i < firstSourceMeasure.CompleteNumberOfStaves; i++) {\n                let clef: ClefInstruction = new ClefInstruction();\n                if (firstSourceMeasure.FirstInstructionsStaffEntries[i]) {\n                    for (let idx: number = 0, len: number = firstSourceMeasure.FirstInstructionsStaffEntries[i].Instructions.length; idx < len; ++idx) {\n                        const abstractNotationInstruction: AbstractNotationInstruction = firstSourceMeasure.FirstInstructionsStaffEntries[i].Instructions[idx];\n                        if (abstractNotationInstruction instanceof ClefInstruction) {\n                            clef = <ClefInstruction>abstractNotationInstruction;\n\n                        }\n                    }\n                }\n                activeClefs.push(clef);\n            }\n        }\n        return activeClefs;\n    }\n\n    public GetMainKey(): KeyInstruction {\n        const firstSourceMeasure: SourceMeasure = this.musicSheet.getFirstSourceMeasure();\n        if (firstSourceMeasure) {\n            for (let i: number = 0; i < firstSourceMeasure.CompleteNumberOfStaves; i++) {\n                for (let idx: number = 0, len: number = firstSourceMeasure.FirstInstructionsStaffEntries[i].Instructions.length; idx < len; ++idx) {\n                    const abstractNotationInstruction: AbstractNotationInstruction = firstSourceMeasure.FirstInstructionsStaffEntries[i].Instructions[idx];\n                    if (abstractNotationInstruction instanceof KeyInstruction) {\n                        return <KeyInstruction>abstractNotationInstruction;\n                    }\n                }\n            }\n        }\n        return undefined;\n    }\n\n    /**\n     * Create the VerticalContainer and adds it to the List at the correct Timestamp position.\n     * @param timestamp\n     * @returns {any}\n     */\n    public getOrCreateVerticalContainer(timestamp: Fraction): VerticalGraphicalStaffEntryContainer {\n        if (this.verticalGraphicalStaffEntryContainers.length === 0 ||\n            (CollectionUtil.getLastElement(this.verticalGraphicalStaffEntryContainers).AbsoluteTimestamp).lt(timestamp)) {\n            const verticalGraphicalStaffEntryContainer: VerticalGraphicalStaffEntryContainer =\n                new VerticalGraphicalStaffEntryContainer(this.numberOfStaves, timestamp);\n            this.verticalGraphicalStaffEntryContainers.push(verticalGraphicalStaffEntryContainer);\n            return verticalGraphicalStaffEntryContainer;\n        }\n        for (let i: number = this.verticalGraphicalStaffEntryContainers.length - 1; i >= 0; i--) {\n            if (this.verticalGraphicalStaffEntryContainers[i].AbsoluteTimestamp.lt(timestamp)) {\n                const verticalGraphicalStaffEntryContainer: VerticalGraphicalStaffEntryContainer =\n                    new VerticalGraphicalStaffEntryContainer(this.numberOfStaves, timestamp);\n                this.verticalGraphicalStaffEntryContainers.splice(i + 1, 0, verticalGraphicalStaffEntryContainer);\n                return verticalGraphicalStaffEntryContainer;\n            }\n            if (this.verticalGraphicalStaffEntryContainers[i].AbsoluteTimestamp.Equals(timestamp)) {\n                return this.verticalGraphicalStaffEntryContainers[i];\n            }\n        }\n        return undefined;\n    }\n\n    /**\n     * Does a binary search on the container list and returns the VerticalContainer with the given Timestamp.\n     * The search begins at startIndex, if given.\n     * If the timestamp cannot be found, null is returned.\n     * @param timestamp - The timestamp for which the container shall be found.\n     * @param startIndex - The index from which the search starts in the container list.\n     * @returns {any}\n     * @constructor\n     */\n    public GetVerticalContainerFromTimestamp(timestamp: Fraction, startIndex: number = 0): VerticalGraphicalStaffEntryContainer {\n        const index: number = CollectionUtil.binarySearch(this.verticalGraphicalStaffEntryContainers,\n                                                          new VerticalGraphicalStaffEntryContainer(0, timestamp),\n                                                          VerticalGraphicalStaffEntryContainer.compareByTimestamp,\n                                                          startIndex);\n        if (index >= 0) {\n            return this.verticalGraphicalStaffEntryContainers[index];\n        }\n        return undefined;\n    }\n\n    /**\n     * Perform a binary search for the absolute given Timestamp in all the GraphicalVerticalContainers.\n     * @param musicTimestamp\n     * @returns {number}\n     * @constructor\n     */\n    public GetInterpolatedIndexInVerticalContainers(musicTimestamp: Fraction): number {\n        const containers: VerticalGraphicalStaffEntryContainer[] = this.verticalGraphicalStaffEntryContainers;\n        let leftIndex: number = 0;\n        let rightIndex: number = containers.length - 1;\n        let leftTS: Fraction = undefined;\n        let rightTS: Fraction = undefined;\n        if (musicTimestamp.lte(containers[containers.length - 1].AbsoluteTimestamp)) {\n            while (rightIndex - leftIndex > 1) {\n                const middleIndex: number = Math.floor((rightIndex + leftIndex) / 2);\n                if (containers[leftIndex].AbsoluteTimestamp.Equals(musicTimestamp)) {\n                    rightIndex = leftIndex;\n                    break;\n                } else if (containers[rightIndex].AbsoluteTimestamp.Equals(musicTimestamp)) {\n                    leftIndex = rightIndex;\n                    break;\n                } else if (containers[middleIndex].AbsoluteTimestamp.Equals(musicTimestamp)) {\n                    return this.verticalGraphicalStaffEntryContainers.indexOf(containers[middleIndex]);\n                } else if (musicTimestamp.lt(containers[middleIndex].AbsoluteTimestamp)) {\n                    rightIndex = middleIndex;\n                } else {\n                    leftIndex = middleIndex;\n                }\n            }\n\n            // no interpolation needed\n            if (leftIndex === rightIndex) {\n                return this.verticalGraphicalStaffEntryContainers.indexOf(containers[leftIndex]);\n            }\n            leftTS = containers[leftIndex].AbsoluteTimestamp;\n            rightTS = containers[rightIndex].AbsoluteTimestamp;\n        } else {\n            leftTS = containers[containers.length - 1].AbsoluteTimestamp;\n            rightTS = Fraction.plus(this.getLongestStaffEntryDuration(containers.length - 1), leftTS);\n            rightIndex = containers.length;\n        }\n        const diff: number = rightTS.RealValue - leftTS.RealValue;\n        const diffTS: number = rightTS.RealValue - musicTimestamp.RealValue;\n\n        // estimate the interpolated index\n        const foundIndex: number = rightIndex - (diffTS / diff);\n        return Math.min(foundIndex, this.verticalGraphicalStaffEntryContainers.length);\n    }\n\n    /**\n     * Get a List with the indices of all the visible GraphicalMeasures and calculates their\n     * corresponding indices in the first SourceMeasure, taking into account Instruments with multiple Staves.\n     * @param visibleMeasures\n     * @returns {number[]}\n     */\n    public getVisibleStavesIndicesFromSourceMeasure(visibleMeasures: GraphicalMeasure[]): number[] {\n        const visibleInstruments: Instrument[] = [];\n        const visibleStavesIndices: number[] = [];\n        for (let idx: number = 0, len: number = visibleMeasures.length; idx < len; ++idx) {\n            const graphicalMeasure: GraphicalMeasure = visibleMeasures[idx];\n            const instrument: Instrument = graphicalMeasure.ParentStaff.ParentInstrument;\n            if (visibleInstruments.indexOf(instrument) === -1) {\n                visibleInstruments.push(instrument);\n            }\n        }\n        for (let idx: number = 0, len: number = visibleInstruments.length; idx < len; ++idx) {\n            const instrument: Instrument = visibleInstruments[idx];\n            const index: number = this.musicSheet.getGlobalStaffIndexOfFirstStaff(instrument);\n            for (let j: number = 0; j < instrument.Staves.length; j++) {\n                visibleStavesIndices.push(index + j);\n            }\n        }\n        return visibleStavesIndices;\n    }\n\n    /**\n     * Returns the GraphicalMeasure with the given SourceMeasure as Parent at the given staff index.\n     * @param sourceMeasure\n     * @param staffIndex\n     * @returns {any}\n     */\n    public getGraphicalMeasureFromSourceMeasureAndIndex(sourceMeasure: SourceMeasure, staffIndex: number): GraphicalMeasure {\n        for (let i: number = 0; i < this.measureList.length; i++) {\n            if (this.measureList[i][0]?.parentSourceMeasure === sourceMeasure) {\n                return this.measureList[i][staffIndex];\n            }\n        }\n        return undefined;\n    }\n\n    public getLastGraphicalMeasureFromIndex(staffIndex: number, lastRendered: boolean = true): GraphicalMeasure {\n        let measureIndex: number = this.measureList.length - 1;\n        if (lastRendered) {\n            measureIndex = Math.min(measureIndex, this.musicSheet.Rules.MaxMeasureToDrawIndex);\n        }\n        return this.measureList[measureIndex][staffIndex];\n    }\n\n    public getMeasureIndex(graphicalMeasure: GraphicalMeasure, measureIndex: number, inListIndex: number): boolean {\n        measureIndex = 0;\n        inListIndex = 0;\n        for (; measureIndex < this.measureList.length; measureIndex++) {\n            for (let idx: number = 0, len: number = this.measureList[measureIndex].length; idx < len; ++idx) {\n                const measure: GraphicalMeasure = this.measureList[measureIndex][idx];\n                if (measure === graphicalMeasure) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Generic method to find graphical objects on the sheet at a given location.\n     * @param clickPosition Position in units where we are searching on the sheet\n     * @param className String representation of the class we want to find. Must extend GraphicalObject\n     * @param startSearchArea The area in units around our point to look for our graphical object, default 5\n     * @param maxSearchArea The max area we want to search around our point\n     * @param searchAreaIncrement The amount we expand our search area for each iteration that we don't find an object of the given type\n     * @param shouldBeIncludedTest A callback that determines if the object should be included in our results- return false for no, true for yes\n     */\n    private GetNearestGraphicalObject<T extends GraphicalObject>(\n        clickPosition: PointF2D, className: string = GraphicalObject.name,\n        startSearchArea: number = 5, maxSearchArea: number = 20, searchAreaIncrement: number = 5,\n        shouldBeIncludedTest: (objectToTest: T) => boolean = undefined): T {\n        const foundEntries: T[] = [];\n        //Loop until we find some, or our search area is out of bounds\n        while (foundEntries.length === 0 && startSearchArea <= maxSearchArea) {\n            //Prepare search area\n            const region: BoundingBox = new BoundingBox(undefined);\n            region.BorderLeft = clickPosition.x - startSearchArea;\n            region.BorderTop = clickPosition.y - startSearchArea;\n            region.BorderRight = clickPosition.x + startSearchArea;\n            region.BorderBottom = clickPosition.y + startSearchArea;\n            region.AbsolutePosition = new PointF2D(clickPosition.x, clickPosition.y);\n            region.calculateAbsolutePosition();\n            //Loop through music pages\n            for (let idx: number = 0, len: number = this.MusicPages.length; idx < len; ++idx) {\n                const graphicalMusicPage: GraphicalMusicPage = this.MusicPages[idx];\n                const entries: T[] = graphicalMusicPage.PositionAndShape.getObjectsInRegion<T>(region, false, className);\n                //If we have no entries on this page, skip to next (if exists)\n                if (!entries || entries.length === 0) {\n                    continue;\n                } else {\n                    //Otherwise test all our entries if applicable, store on our found list\n                    for (let idx2: number = 0, len2: number = entries.length; idx2 < len2; ++idx2) {\n                        if (!shouldBeIncludedTest) {\n                            foundEntries.push(entries[idx2]);\n                        } else if (shouldBeIncludedTest(entries[idx2])) {\n                            foundEntries.push(entries[idx2]);\n                        }\n                    }\n                }\n            }\n            //Expand search area, we haven't found anything yet\n            startSearchArea += searchAreaIncrement;\n        }\n        // Get closest entry\n        let closest: T = undefined;\n        for (let idx: number = 0, len: number = foundEntries.length; idx < len; ++idx) {\n            const object: T = foundEntries[idx];\n            if (closest === undefined) {\n                closest = object;\n            } else {\n                const deltaNew: number = this.CalculateDistance(object.PositionAndShape.AbsolutePosition, clickPosition);\n                const deltaOld: number = this.CalculateDistance(closest.PositionAndShape.AbsolutePosition, clickPosition);\n                if (deltaNew < deltaOld) {\n                    closest = object;\n                }\n            }\n        }\n        if (closest) {\n            return closest;\n        }\n        return undefined;\n    }\n\n    public GetNearestVoiceEntry(clickPosition: PointF2D): GraphicalVoiceEntry {\n        return this.GetNearestGraphicalObject<GraphicalVoiceEntry>(clickPosition, GraphicalVoiceEntry.name, 5, 20, 5,\n                                                                   (object: GraphicalVoiceEntry) =>\n                                                                        object.parentStaffEntry?.relInMeasureTimestamp !== undefined);\n    }\n\n    public GetNearestNote(clickPosition: PointF2D, maxClickDist: PointF2D): GraphicalNote {\n        const nearestVoiceEntry: GraphicalVoiceEntry = this.GetNearestVoiceEntry(clickPosition);\n        if (!nearestVoiceEntry) {\n            return undefined;\n        }\n        let closestNote: GraphicalNote;\n        let closestDist: number = Number.MAX_SAFE_INTEGER;\n        // debug: show position in sheet. line starts from the click position, until clickposition.x + 2\n        // (this.drawer as any).DrawOverlayLine( // as VexFlowMusicSheetDrawer\n        //     clickPosition,\n        //     new PointF2D(clickPosition.x + 2, clickPosition.y),\n        //     this.MusicPages[0]);\n        for (const note of nearestVoiceEntry.notes) {\n            const posY: number = note.PositionAndShape.AbsolutePosition.y;\n            const distX: number = Math.abs(note.PositionAndShape.AbsolutePosition.x - clickPosition.x);\n            const distY: number = Math.abs(posY - clickPosition.y);\n            // console.log(\"note: \" + note.sourceNote.Pitch.ToString());\n            if (distX + distY < closestDist) {\n                closestNote = note;\n                closestDist = distX + distY;\n            }\n        }\n        return closestNote;\n    }\n\n    public domToSvg(point: PointF2D): PointF2D {\n        return this.domToSvgTransform(point, true);\n    }\n\n    public svgToDom(point: PointF2D): PointF2D {\n        return this.domToSvgTransform(point, false);\n    }\n\n    public svgToOsmd(point: PointF2D): PointF2D {\n        const pt: PointF2D = new PointF2D(point.x, point.y);\n        pt.x /= 10; // unitInPixels would need to be imported from VexFlowMusicSheetDrawer\n        pt.y /= 10;\n        return pt;\n    }\n\n    // TODO move to VexFlowMusicSheetDrawer? better fit for imports\n    private domToSvgTransform(point: PointF2D, inverse: boolean): PointF2D {\n        const svgBackend: any = (this.drawer as any).Backends[0]; // as SvgVexFlowBackend;\n        // TODO importing SvgVexFlowBackend here causes build problems. Importing VexFlowMusicSheetDrawer seems to be fine, but unnecessary.\n        // if (!(svgBackend instanceof SvgVexFlowBackend)) {\n        //     return undefined;\n        // }\n        const svg: SVGSVGElement = svgBackend.getSvgElement() as SVGSVGElement;\n        const pt: SVGPoint = svg.createSVGPoint();\n        pt.x = point.x;\n        pt.y = point.y;\n        let transformMatrix: DOMMatrix = svg.getScreenCTM();\n        if (inverse) {\n            transformMatrix = transformMatrix.inverse();\n        }\n        const sp: SVGPoint = pt.matrixTransform(transformMatrix);\n        return new PointF2D(sp.x, sp.y);\n    }\n\n    public GetClickableLabel(clickPosition: PointF2D): GraphicalLabel {\n        const initialSearchAreaX: number = 4;\n        const initialSearchAreaY: number = 4;\n        // Prepare search area\n        const region: BoundingBox = new BoundingBox();\n        region.BorderLeft = clickPosition.x - initialSearchAreaX;\n        region.BorderTop = clickPosition.y - initialSearchAreaY;\n        region.BorderRight = clickPosition.x + initialSearchAreaX;\n        region.BorderBottom = clickPosition.y + initialSearchAreaY;\n        region.AbsolutePosition = new PointF2D(0, 0);\n        for (let idx: number = 0, len: number = this.MusicPages.length; idx < len; ++idx) {\n            const graphicalMusicPage: GraphicalMusicPage = this.MusicPages[idx];\n            const entries: GraphicalLabel[] = graphicalMusicPage.PositionAndShape.getObjectsInRegion<GraphicalLabel>(region);\n            if (entries.length !== 1) {\n                continue;\n            } else {\n                for (let idx2: number = 0, len2: number = entries.length; idx2 < len2; ++idx2) {\n                    const clickedLabel: GraphicalLabel = entries[idx2];\n                    return clickedLabel;\n                }\n            }\n        }\n        return undefined;\n    }\n\n    public GetNearestStaffEntry(clickPosition: PointF2D): GraphicalStaffEntry {\n        const initialSearchArea: number = 10;\n        const foundEntries: GraphicalStaffEntry[] = [];\n        // Prepare search area\n        const region: BoundingBox = new BoundingBox(undefined);\n        region.BorderLeft = clickPosition.x - initialSearchArea;\n        region.BorderTop = clickPosition.y - initialSearchArea;\n        region.BorderRight = clickPosition.x + initialSearchArea;\n        region.BorderBottom = clickPosition.y + initialSearchArea;\n        region.AbsolutePosition = new PointF2D(0, 0);\n        // Search for StaffEntries in region\n        for (let idx: number = 0, len: number = this.MusicPages.length; idx < len; ++idx) {\n            const graphicalMusicPage: GraphicalMusicPage = this.MusicPages[idx];\n            const entries: GraphicalStaffEntry[] = graphicalMusicPage.PositionAndShape.getObjectsInRegion<GraphicalStaffEntry>(region, false);\n            if (!entries || entries.length === 0) {\n                continue;\n            } else {\n                for (let idx2: number = 0, len2: number = entries.length; idx2 < len2; ++idx2) {\n                    const gse: GraphicalStaffEntry = entries[idx2];\n                    foundEntries.push(gse);\n                }\n            }\n        }\n        // Get closest entry\n        let closest: GraphicalStaffEntry = undefined;\n        for (let idx: number = 0, len: number = foundEntries.length; idx < len; ++idx) {\n            const gse: GraphicalStaffEntry = foundEntries[idx];\n            if (closest === undefined) {\n                closest = gse;\n            } else {\n                if (!gse.relInMeasureTimestamp) {\n                    continue;\n                }\n                const deltaNew: number = this.CalculateDistance(gse.PositionAndShape.AbsolutePosition, clickPosition);\n                const deltaOld: number = this.CalculateDistance(closest.PositionAndShape.AbsolutePosition, clickPosition);\n                if (deltaNew < deltaOld) {\n                    closest = gse;\n                }\n            }\n        }\n        if (closest) {\n            return closest;\n        }\n        // TODO No staff entry was found. Feedback?\n        // throw new ArgumentException(\"No staff entry found\");\n        return undefined;\n    }\n\n    public GetPossibleCommentAnchor(clickPosition: PointF2D): SourceStaffEntry {\n        const entry: GraphicalStaffEntry = this.GetNearestStaffEntry(clickPosition);\n        if (!entry) {\n            return undefined;\n        }\n        return entry.sourceStaffEntry;\n    }\n\n    public getClickedObjectOfType<T>(positionOnMusicSheet: PointF2D): T {\n        for (let idx: number = 0, len: number = this.musicPages.length; idx < len; ++idx) {\n            const page: GraphicalMusicPage = this.musicPages[idx];\n            const o: Object = page.PositionAndShape.getClickedObjectOfType<T>(positionOnMusicSheet);\n            if (o) {\n                return (o as T);\n            }\n        }\n        return undefined;\n    }\n\n    public tryGetTimestampFromPosition(positionOnMusicSheet: PointF2D): Fraction {\n        const entry: GraphicalStaffEntry = this.getClickedObjectOfType<GraphicalStaffEntry>(positionOnMusicSheet);\n        if (!entry) {\n            return undefined;\n        }\n        return entry.getAbsoluteTimestamp();\n    }\n\n    public tryGetClickableLabel(positionOnMusicSheet: PointF2D): GraphicalLabel {\n        try {\n            return this.GetClickableLabel(positionOnMusicSheet);\n        } catch (ex) {\n            log.info(\"GraphicalMusicSheet.tryGetClickableObject\", \"positionOnMusicSheet: \" + positionOnMusicSheet, ex);\n        }\n\n        return undefined;\n    }\n\n    public tryGetTimeStampFromPosition(positionOnMusicSheet: PointF2D): Fraction {\n        try {\n            const entry: GraphicalStaffEntry = this.GetNearestStaffEntry(positionOnMusicSheet);\n            if (!entry) {\n                return undefined;\n            }\n            return entry.getAbsoluteTimestamp();\n        } catch (ex) {\n            log.info(\n                \"GraphicalMusicSheet.tryGetTimeStampFromPosition\",\n                \"positionOnMusicSheet: \" + positionOnMusicSheet, ex\n            );\n        }\n\n        return undefined;\n    }\n\n    /**\n     * Get visible staffentry for the container given by the index.\n     * @param index\n     * @returns {GraphicalStaffEntry}\n     */\n    public getStaffEntry(index: number): GraphicalStaffEntry {\n        const container: VerticalGraphicalStaffEntryContainer = this.VerticalGraphicalStaffEntryContainers[index];\n        let staffEntry: GraphicalStaffEntry = undefined;\n        try {\n            for (let idx: number = 0, len: number = container.StaffEntries.length; idx < len; ++idx) {\n                const entry: GraphicalStaffEntry = container.StaffEntries[idx];\n                if (!entry || !entry.sourceStaffEntry.ParentStaff.ParentInstrument.Visible) {\n                    continue;\n                }\n                if (!staffEntry) {\n                    staffEntry = entry;\n                } else if (entry.PositionAndShape && staffEntry.PositionAndShape) {\n                    if (staffEntry.PositionAndShape.RelativePosition.x > entry.PositionAndShape.RelativePosition.x) {\n                        staffEntry = entry;\n                    }\n                }\n            }\n        } catch (ex) {\n            log.info(\"GraphicalMusicSheet.getStaffEntry\", ex);\n        }\n\n        return staffEntry;\n    }\n\n    /**\n     * Returns the index of the closest previous (earlier) vertical container which has at least some visible staff entry, with respect to the given index.\n     * @param index\n     * @returns {number}\n     * @constructor\n     */\n    public GetPreviousVisibleContainerIndex(index: number): number {\n        for (let i: number = index - 1; i >= 0; i--) {\n            const entries: GraphicalStaffEntry[] = this.verticalGraphicalStaffEntryContainers[i].StaffEntries;\n            for (let idx: number = 0, len: number = entries.length; idx < len; ++idx) {\n                const entry: GraphicalStaffEntry = entries[idx];\n                if (entry && entry.sourceStaffEntry.ParentStaff.ParentInstrument.Visible) {\n                    return i;\n                }\n            }\n        }\n        return -1;\n    }\n\n    /**\n     * Returns the index of the closest next (later) vertical container which has at least some visible staff entry, with respect to the given index.\n     * @param index\n     * @returns {number}\n     * @constructor\n     */\n    public GetNextVisibleContainerIndex(index: number): number {\n        for (let i: number = index + 1; i < this.verticalGraphicalStaffEntryContainers.length; ++i) {\n            const entries: GraphicalStaffEntry[] = this.verticalGraphicalStaffEntryContainers[i].StaffEntries;\n            for (let idx: number = 0, len: number = entries.length; idx < len; ++idx) {\n                const entry: GraphicalStaffEntry = entries[idx];\n                if (entry && entry.sourceStaffEntry.ParentStaff.ParentInstrument.Visible) {\n                    return i;\n                }\n            }\n        }\n        return -1;\n    }\n\n    public findClosestLeftStaffEntry(fractionalIndex: number, searchOnlyVisibleEntries: boolean): GraphicalStaffEntry {\n        let foundEntry: GraphicalStaffEntry = undefined;\n        let leftIndex: number = Math.floor(fractionalIndex);\n        leftIndex = Math.min(this.VerticalGraphicalStaffEntryContainers.length - 1, leftIndex);\n        for (let i: number = leftIndex; i >= 0; i--) {\n            foundEntry = this.getStaffEntry(i);\n            if (foundEntry) {\n                if (searchOnlyVisibleEntries) {\n                    if (foundEntry.sourceStaffEntry.ParentStaff.ParentInstrument.Visible) {\n                        return foundEntry;\n                    }\n                } else {\n                    return foundEntry;\n                }\n            }\n        }\n        return undefined;\n    }\n\n    public findClosestRightStaffEntry(fractionalIndex: number, returnOnlyVisibleEntries: boolean): GraphicalStaffEntry {\n        let foundEntry: GraphicalStaffEntry = undefined;\n        const rightIndex: number = Math.max(0, Math.ceil(fractionalIndex));\n        for (let i: number = rightIndex; i < this.VerticalGraphicalStaffEntryContainers.length; i++) {\n            foundEntry = this.getStaffEntry(i);\n            if (foundEntry) {\n                if (returnOnlyVisibleEntries) {\n                    if (foundEntry.sourceStaffEntry.ParentStaff.ParentInstrument.Visible) {\n                        return foundEntry;\n                    }\n                } else {\n                    return foundEntry;\n                }\n            }\n        }\n        return undefined;\n    }\n\n    public calculateCursorLineAtTimestamp(musicTimestamp: Fraction, styleEnum: OutlineAndFillStyleEnum): GraphicalLine {\n        const result: [number, MusicSystem] = this.calculateXPositionFromTimestamp(musicTimestamp);\n        const xPos: number = result[0];\n        const correspondingMusicSystem: MusicSystem = result[1];\n        if (!correspondingMusicSystem || correspondingMusicSystem.StaffLines.length === 0) {\n            return undefined;\n        }\n        const yCoordinate: number = correspondingMusicSystem.PositionAndShape.AbsolutePosition.y;\n        const height: number = CollectionUtil.last(correspondingMusicSystem.StaffLines).PositionAndShape.RelativePosition.y + 4;\n        return new GraphicalLine(new PointF2D(xPos, yCoordinate), new PointF2D(xPos, yCoordinate + height), 3, styleEnum);\n    }\n\n    public calculateXPositionFromTimestamp(timeStamp: Fraction): [number, MusicSystem] {\n        let currentMusicSystem: MusicSystem = undefined;\n        const fractionalIndex: number = this.GetInterpolatedIndexInVerticalContainers(timeStamp);\n        const previousStaffEntry: GraphicalStaffEntry = this.findClosestLeftStaffEntry(fractionalIndex, true);\n        const nextStaffEntry: GraphicalStaffEntry = this.findClosestRightStaffEntry(fractionalIndex, true);\n        const currentTimeStamp: number = timeStamp.RealValue;\n        if (!previousStaffEntry && !nextStaffEntry) {\n            return [0, undefined];\n        }\n        let previousStaffEntryMusicSystem: MusicSystem = undefined;\n        if (previousStaffEntry) {\n            // TODO sometimes one of these ParentStaffLine is undefined, either fix this or handle it here\n            previousStaffEntryMusicSystem = previousStaffEntry.parentMeasure.ParentStaffLine?.ParentMusicSystem;\n        } else {\n            previousStaffEntryMusicSystem = nextStaffEntry.parentMeasure.ParentStaffLine?.ParentMusicSystem;\n        }\n        let nextStaffEntryMusicSystem: MusicSystem = undefined;\n        if (nextStaffEntry) {\n            nextStaffEntryMusicSystem = nextStaffEntry.parentMeasure.ParentStaffLine?.ParentMusicSystem;\n        } else {\n            nextStaffEntryMusicSystem = previousStaffEntry.parentMeasure.ParentStaffLine?.ParentMusicSystem;\n        }\n        if (previousStaffEntryMusicSystem === nextStaffEntryMusicSystem) {\n            currentMusicSystem = previousStaffEntryMusicSystem;\n            let fraction: number;\n            let previousStaffEntryPositionX: number;\n            let nextStaffEntryPositionX: number;\n            if (!previousStaffEntry) {\n                previousStaffEntryPositionX = nextStaffEntryPositionX = nextStaffEntry.PositionAndShape.AbsolutePosition.x;\n                fraction = 0;\n            } else if (!nextStaffEntry) {\n                previousStaffEntryPositionX = previousStaffEntry.PositionAndShape.AbsolutePosition.x;\n                nextStaffEntryPositionX = currentMusicSystem.GetRightBorderAbsoluteXPosition();\n                const sm: SourceMeasure = previousStaffEntry.parentMeasure.parentSourceMeasure;\n                fraction = (currentTimeStamp - previousStaffEntry.getAbsoluteTimestamp().RealValue) / (\n                    Fraction.plus(sm.AbsoluteTimestamp, sm.Duration).RealValue - previousStaffEntry.getAbsoluteTimestamp().RealValue);\n            } else {\n                previousStaffEntryPositionX = previousStaffEntry.PositionAndShape.AbsolutePosition.x;\n                nextStaffEntryPositionX = nextStaffEntry.PositionAndShape.AbsolutePosition.x;\n                if (previousStaffEntry === nextStaffEntry) {\n                    fraction = 0;\n                } else {\n                    fraction = (currentTimeStamp - previousStaffEntry.getAbsoluteTimestamp().RealValue) /\n                        (nextStaffEntry.getAbsoluteTimestamp().RealValue - previousStaffEntry.getAbsoluteTimestamp().RealValue);\n                }\n            }\n            fraction = Math.min(1, Math.max(0, fraction));\n            const interpolatedXPosition: number = previousStaffEntryPositionX + fraction * (nextStaffEntryPositionX - previousStaffEntryPositionX);\n            return [interpolatedXPosition, currentMusicSystem];\n        } else {\n            const nextSystemLeftBorderTimeStamp: number = nextStaffEntry.parentMeasure.parentSourceMeasure.AbsoluteTimestamp.RealValue;\n            let fraction: number;\n            let interpolatedXPosition: number;\n            if (currentTimeStamp < nextSystemLeftBorderTimeStamp) {\n                currentMusicSystem = previousStaffEntryMusicSystem;\n                const previousStaffEntryPositionX: number = previousStaffEntry.PositionAndShape.AbsolutePosition.x;\n                const previousSystemRightBorderX: number = currentMusicSystem.GetRightBorderAbsoluteXPosition();\n                fraction = (currentTimeStamp - previousStaffEntry.getAbsoluteTimestamp().RealValue) /\n                    (nextSystemLeftBorderTimeStamp - previousStaffEntry.getAbsoluteTimestamp().RealValue);\n                fraction = Math.min(1, Math.max(0, fraction));\n                interpolatedXPosition = previousStaffEntryPositionX + fraction * (previousSystemRightBorderX - previousStaffEntryPositionX);\n            } else {\n                currentMusicSystem = nextStaffEntryMusicSystem;\n                const nextStaffEntryPositionX: number = nextStaffEntry.PositionAndShape.AbsolutePosition.x;\n                const nextSystemLeftBorderX: number = currentMusicSystem.GetLeftBorderAbsoluteXPosition();\n                fraction = (currentTimeStamp - nextSystemLeftBorderTimeStamp) /\n                    (nextStaffEntry.getAbsoluteTimestamp().RealValue - nextSystemLeftBorderTimeStamp);\n                fraction = Math.min(1, Math.max(0, fraction));\n                interpolatedXPosition = nextSystemLeftBorderX + fraction * (nextStaffEntryPositionX - nextSystemLeftBorderX);\n            }\n            return [interpolatedXPosition, currentMusicSystem];\n        }\n    }\n\n    public GetNumberOfVisibleInstruments(): number {\n        let visibleInstrumentCount: number = 0;\n        for (let idx: number = 0, len: number = this.musicSheet.Instruments.length; idx < len; ++idx) {\n            const instrument: Instrument = this.musicSheet.Instruments[idx];\n            if (instrument.Visible === true) {\n                visibleInstrumentCount++;\n            }\n        }\n        return visibleInstrumentCount;\n    }\n\n    public GetNumberOfFollowedInstruments(): number {\n        let followedInstrumentCount: number = 0;\n        for (let idx: number = 0, len: number = this.musicSheet.Instruments.length; idx < len; ++idx) {\n            const instrument: Instrument = this.musicSheet.Instruments[idx];\n            if (instrument.Following === true) {\n                followedInstrumentCount++;\n            }\n        }\n        return followedInstrumentCount;\n    }\n\n    /*public GetGraphicalFromSourceMeasure(sourceMeasure: SourceMeasure): GraphicalMeasure[] {\n        return this.sourceToGraphicalMeasureLinks.getValue(sourceMeasure); // TODO gets wrong measure because sourceMeasure is not a valid key\n    }*/\n\n    public GetGraphicalFromSourceStaffEntry(sourceStaffEntry: SourceStaffEntry): GraphicalStaffEntry {\n        if (!sourceStaffEntry.VerticalContainerParent.ParentMeasure?.VerticalMeasureList) {\n            return undefined;\n        }\n        const graphicalMeasure: GraphicalMeasure = sourceStaffEntry.VerticalContainerParent.ParentMeasure.VerticalMeasureList\n            [sourceStaffEntry.ParentStaff.idInMusicSheet];\n        return graphicalMeasure?.findGraphicalStaffEntryFromTimestamp(sourceStaffEntry.Timestamp);\n    }\n\n    private CalculateDistance(pt1: PointF2D, pt2: PointF2D): number {\n        const deltaX: number = pt1.x - pt2.x;\n        const deltaY: number = pt1.y - pt2.y;\n        return (deltaX * deltaX) + (deltaY * deltaY);\n    }\n\n    /**\n     * Return the longest StaffEntry duration from a GraphicalVerticalContainer.\n     * @param index the index of the vertical container\n     * @returns {Fraction}\n     */\n    private getLongestStaffEntryDuration(index: number): Fraction {\n        let maxLength: Fraction = new Fraction(0, 1);\n        for (const graphicalStaffEntry of this.verticalGraphicalStaffEntryContainers[index].StaffEntries) {\n            if (!graphicalStaffEntry) {\n                continue;\n            }\n            const maxLengthInStaffEntry: Fraction = graphicalStaffEntry.findStaffEntryMaxNoteLength();\n            if (maxLength.lt(maxLengthInStaffEntry)) {\n                maxLength = maxLengthInStaffEntry;\n            }\n        }\n        return maxLength;\n    }\n}\n\nexport class SystemImageProperties {\n    public positionInPixels: PointF2D;\n    public systemImageId: number;\n    public system: MusicSystem;\n}\n","import {Note} from \"../VoiceData/Note\";\nimport {Fraction} from \"../../Common/DataObjects/Fraction\";\nimport {KeyInstruction} from \"../VoiceData/Instructions/KeyInstruction\";\nimport {ClefInstruction} from \"../VoiceData/Instructions/ClefInstruction\";\nimport {OctaveEnum} from \"../VoiceData/Expressions/ContinuousExpressions/OctaveShift\";\nimport {AccidentalEnum, Pitch} from \"../../Common/DataObjects/Pitch\";\nimport {GraphicalObject} from \"./GraphicalObject\";\nimport {MusicSheetCalculator} from \"./MusicSheetCalculator\";\nimport {BoundingBox} from \"./BoundingBox\";\nimport {GraphicalVoiceEntry} from \"./GraphicalVoiceEntry\";\nimport {GraphicalMusicPage} from \"./GraphicalMusicPage\";\nimport { EngravingRules } from \"./EngravingRules\";\n\n/**\n * The graphical counterpart of a [[Note]]\n */\nexport class GraphicalNote extends GraphicalObject {\n    constructor(note: Note, parent: GraphicalVoiceEntry, rules: EngravingRules, graphicalNoteLength: Fraction = undefined) {\n        super();\n        this.sourceNote = note;\n        this.parentVoiceEntry = parent;\n        this.PositionAndShape = new BoundingBox(this, parent.PositionAndShape);\n        if (graphicalNoteLength) {\n            this.graphicalNoteLength = graphicalNoteLength;\n        } else {\n            this.graphicalNoteLength = note.Length;\n        }\n\n        this.numberOfDots = this.calculateNumberOfNeededDots(this.graphicalNoteLength);\n        this.rules = rules;\n        this.rules.addGraphicalNoteToNoteMap(note, this);\n    }\n\n    public sourceNote: Note;\n    public DrawnAccidental: AccidentalEnum = AccidentalEnum.NONE;\n    public graphicalNoteLength: Fraction;\n    public parentVoiceEntry: GraphicalVoiceEntry;\n    public numberOfDots: number;\n    public rules: EngravingRules;\n    public staffLine: number;\n    public baseFingeringXOffset: number;\n    public baseStringNumberXOffset: number;\n    public lineShift: number = 0;\n\n    public Transpose(keyInstruction: KeyInstruction, activeClef: ClefInstruction, halfTones: number, octaveEnum: OctaveEnum): Pitch {\n        let transposedPitch: Pitch = this.sourceNote.Pitch;\n        if (MusicSheetCalculator.transposeCalculator) {\n            transposedPitch = MusicSheetCalculator.transposeCalculator.transposePitch(this.sourceNote.Pitch, keyInstruction, halfTones);\n        }\n        return transposedPitch;\n    }\n\n    /**\n     * Return the number of dots needed to represent the given fraction.\n     * @param fraction\n     * @returns {number}\n     */\n    private calculateNumberOfNeededDots(fraction: Fraction): number {\n      if (!this.sourceNote || !this.sourceNote.NoteTuplet) {\n        return fraction.calculateNumberOfNeededDots();\n      }\n      return 0;\n    }\n\n    public get ParentMusicPage(): GraphicalMusicPage {\n      return this.parentVoiceEntry.parentStaffEntry.parentMeasure.ParentMusicSystem.Parent;\n    }\n\n    /** Get a GraphicalNote from a Note. Use osmd.rules as the second parameter (instance reference).\n     *  Also more easily available via osmd.rules.GNote(note). */\n    public static FromNote(note: Note, rules: EngravingRules): GraphicalNote {\n      return rules.NoteToGraphicalNoteMap.getValue(note.NoteToGraphicalNoteObjectId);\n    }\n}\n","import { AClassHierarchyTrackable } from \"../Interfaces/AClassHierarchyTrackable\";\nimport {BoundingBox} from \"./BoundingBox\";\n\nexport class GraphicalObject extends AClassHierarchyTrackable {\n\n    protected boundingBox: BoundingBox;\n\n    public get PositionAndShape(): BoundingBox {\n        return this.boundingBox;\n    }\n\n    public set PositionAndShape(value: BoundingBox) {\n        this.boundingBox = value;\n    }\n\n}\n","import {GraphicalObject} from \"./GraphicalObject\";\nimport {OctaveShift, OctaveEnum} from \"../VoiceData/Expressions/ContinuousExpressions/OctaveShift\";\nimport {BoundingBox} from \"./BoundingBox\";\nimport {MusicSymbol} from \"./MusicSymbol\";\nimport {ArgumentOutOfRangeException} from \"../Exceptions\";\nimport {PointF2D} from \"../../Common/DataObjects/PointF2D\";\n\n/**\n * The graphical counterpart of an [[OctaveShift]]\n */\nexport class GraphicalOctaveShift extends GraphicalObject {\n\n    constructor(octaveShift: OctaveShift, parent: BoundingBox) {\n        super();\n        this.getOctaveShift = octaveShift;\n        this.setSymbol();\n        // ToDo: set the size again due to the given symbol...\n        //this.PositionAndShape = new BoundingBox(parent, this.octaveSymbol, this);\n        this.PositionAndShape = new BoundingBox(this, parent);\n    }\n\n    public getOctaveShift: OctaveShift;\n    public octaveSymbol: MusicSymbol;\n    public dashesStart: PointF2D;\n    public dashesEnd: PointF2D;\n    public endsOnDifferentStaffLine: boolean;\n    public isFirstPart: boolean;\n    public isSecondPart: boolean;\n\n    private setSymbol(): void {\n        switch (this.getOctaveShift.Type) {\n            case OctaveEnum.VA8:\n                this.octaveSymbol = MusicSymbol.VA8;\n                break;\n            case OctaveEnum.VB8:\n                this.octaveSymbol = MusicSymbol.VB8;\n                break;\n            case OctaveEnum.MA15:\n                this.octaveSymbol = MusicSymbol.MA15;\n                break;\n            case OctaveEnum.MB15:\n                this.octaveSymbol = MusicSymbol.MB15;\n                break;\n            default:\n                throw new ArgumentOutOfRangeException(\"\");\n        }\n    }\n\n}\n","import {OutlineAndFillStyleEnum} from \"./DrawingEnums\";\nimport {BoundingBox} from \"./BoundingBox\";\nimport {PointF2D} from \"../../Common/DataObjects/PointF2D\";\nimport {GraphicalObject} from \"./GraphicalObject\";\n\nexport class GraphicalRectangle extends GraphicalObject {\n\n    constructor(upperLeftPoint: PointF2D, lowerRightPoint: PointF2D, parent: BoundingBox, style: OutlineAndFillStyleEnum) {\n        super();\n        this.boundingBox = new BoundingBox(parent);\n        this.boundingBox.RelativePosition = upperLeftPoint;\n        this.boundingBox.BorderRight = lowerRightPoint.x - upperLeftPoint.x;\n        this.boundingBox.BorderBottom = lowerRightPoint.y - upperLeftPoint.y;\n        this.style = style;\n    }\n\n    public style: OutlineAndFillStyleEnum;\n}\n","\nimport { PointF2D } from \"../../Common/DataObjects/PointF2D\";\nimport { GraphicalNote } from \"./GraphicalNote\";\nimport { GraphicalCurve } from \"./GraphicalCurve\";\nimport { Slur } from \"../VoiceData/Expressions/ContinuousExpressions/Slur\";\nimport { PlacementEnum } from \"../VoiceData/Expressions/AbstractExpression\";\nimport { EngravingRules } from \"./EngravingRules\";\nimport { StaffLine } from \"./StaffLine\";\nimport { SkyBottomLineCalculator } from \"./SkyBottomLineCalculator\";\nimport { Matrix2D } from \"../../Common/DataObjects/Matrix2D\";\nimport { LinkedVoice } from \"../VoiceData/LinkedVoice\";\nimport { GraphicalVoiceEntry } from \"./GraphicalVoiceEntry\";\nimport { GraphicalStaffEntry } from \"./GraphicalStaffEntry\";\nimport { Fraction } from \"../../Common/DataObjects/Fraction\";\nimport { StemDirectionType } from \"../VoiceData/VoiceEntry\";\n\nexport class GraphicalSlur extends GraphicalCurve {\n    // private intersection: PointF2D;\n\n    constructor(slur: Slur, rules: EngravingRules) {\n        super();\n        this.slur = slur;\n        this.rules = rules;\n    }\n\n    public slur: Slur;\n    public staffEntries: GraphicalStaffEntry[] = [];\n    public placement: PlacementEnum;\n    public graceStart: boolean;\n    public graceEnd: boolean;\n    private rules: EngravingRules;\n    public SVGElement: Node;\n\n    /**\n     * Compares the timespan of two Graphical Slurs\n     * @param x\n     * @param y\n     */\n    public static Compare (x: GraphicalSlur, y: GraphicalSlur ): number {\n        if (x.staffEntries.length < 1) { // x.staffEntries[i] can return undefined in Beethoven Moonlight Sonata sample\n            return -1;\n        } else if (y.staffEntries.length < 1) {\n            return 1;\n        }\n        const xTimestampSpan: Fraction = Fraction.minus(x.staffEntries[x.staffEntries.length - 1].getAbsoluteTimestamp(),\n                                                        x.staffEntries[0].getAbsoluteTimestamp());\n        const yTimestampSpan: Fraction = Fraction.minus(y.staffEntries[y.staffEntries.length - 1].getAbsoluteTimestamp(),\n                                                        y.staffEntries[0].getAbsoluteTimestamp());\n\n        if (xTimestampSpan.RealValue > yTimestampSpan.RealValue) {\n            return 1;\n        }\n\n        if (yTimestampSpan.RealValue > xTimestampSpan.RealValue) {\n            return -1;\n        }\n\n        return 0;\n    }\n\n    /**\n     *\n     * @param rules\n     */\n    public calculateCurve(rules: EngravingRules): void {\n\n        // single GraphicalSlur means a single Curve, eg each GraphicalSlurObject is meant to be on the same StaffLine\n        // a Slur can span more than one GraphicalSlurObjects\n        const startStaffEntry: GraphicalStaffEntry = this.staffEntries[0];\n        const endStaffEntry: GraphicalStaffEntry = this.staffEntries[this.staffEntries.length - 1];\n\n        // where the Slur (not the graphicalObject) starts and ends (could belong to another StaffLine)\n        let slurStartNote: GraphicalNote = startStaffEntry.findGraphicalNoteFromNote(this.slur.StartNote);\n        if (!slurStartNote && this.graceStart) {\n            slurStartNote = startStaffEntry.findGraphicalNoteFromGraceNote(this.slur.StartNote);\n        }\n        if (!slurStartNote) {\n            slurStartNote = startStaffEntry.findEndTieGraphicalNoteFromNoteWithStartingSlur(this.slur.StartNote, this.slur);\n        }\n        let slurEndNote: GraphicalNote = endStaffEntry.findGraphicalNoteFromNote(this.slur.EndNote);\n        if (!slurEndNote && this.graceEnd) {\n            slurEndNote = endStaffEntry.findGraphicalNoteFromGraceNote(this.slur.EndNote);\n        }\n\n        const staffLine: StaffLine = startStaffEntry.parentMeasure.ParentStaffLine;\n        const skyBottomLineCalculator: SkyBottomLineCalculator = staffLine.SkyBottomLineCalculator;\n\n        this.calculatePlacement(skyBottomLineCalculator, staffLine);\n\n        // the Start- and End Reference Points for the Sky-BottomLine\n        const startEndPoints: {startX: number, startY: number, endX: number, endY: number} =\n            this.calculateStartAndEnd(slurStartNote, slurEndNote, staffLine, rules, skyBottomLineCalculator);\n\n        const startX: number = startEndPoints.startX;\n        const endX: number = startEndPoints.endX;\n        let startY: number = startEndPoints.startY;\n        let endY: number = startEndPoints.endY;\n        const minAngle: number = rules.SlurTangentMinAngle;\n        const maxAngle: number = rules.SlurTangentMaxAngle;\n        let points: PointF2D[];\n\n        if (this.placement === PlacementEnum.Above) {\n            startY -= rules.SlurNoteHeadYOffset;\n            endY -= rules.SlurNoteHeadYOffset;\n            const startUpperRight: PointF2D = new PointF2D(this.staffEntries[0].parentMeasure.PositionAndShape.RelativePosition.x\n                                                           + this.staffEntries[0].PositionAndShape.RelativePosition.x,\n                                                           startY);\n            if (slurStartNote) {\n                    startUpperRight.x += this.staffEntries[0].PositionAndShape.BorderRight;\n            } else  {\n                    // continuing Slur from previous StaffLine - must start after last Instruction of first Measure\n                    startUpperRight.x = this.staffEntries[0].parentMeasure.beginInstructionsWidth;\n            }\n\n            // must also add the GraceStaffEntry's ParentStaffEntry Position\n            if (this.graceStart) {\n                startUpperRight.x += endStaffEntry.PositionAndShape.RelativePosition.x;\n            }\n\n            const endUpperLeft: PointF2D = new PointF2D(this.staffEntries[this.staffEntries.length - 1].parentMeasure.PositionAndShape.RelativePosition.x\n                                                        + this.staffEntries[this.staffEntries.length - 1].PositionAndShape.RelativePosition.x,\n                                                        endY);\n            if (slurEndNote) {\n                    endUpperLeft.x += this.staffEntries[this.staffEntries.length - 1].PositionAndShape.BorderLeft;\n            } else {\n                    // Slur continues to next StaffLine - must reach the end of current StaffLine\n                    endUpperLeft.x = this.staffEntries[this.staffEntries.length - 1].parentMeasure.PositionAndShape.RelativePosition.x\n                    + this.staffEntries[this.staffEntries.length - 1].parentMeasure.PositionAndShape.Size.width;\n            }\n\n            // must also add the GraceStaffEntry's ParentStaffEntry Position\n            if (this.graceEnd) {\n                endUpperLeft.x += endStaffEntry.staffEntryParent.PositionAndShape.RelativePosition.x;\n            }\n\n            // SkyLinePointsList between firstStaffEntry startUpperRightPoint and lastStaffentry endUpperLeftPoint\n            points = this.calculateTopPoints(startUpperRight, endUpperLeft, staffLine, skyBottomLineCalculator);\n\n            if (points.length === 0) {\n                const pointF: PointF2D = new PointF2D((endUpperLeft.x - startUpperRight.x) / 2 + startUpperRight.x,\n                                                      (endUpperLeft.y - startUpperRight.y) / 2 + startUpperRight.y);\n                points.push(pointF);\n            }\n\n            // Angle between original x-Axis and Line from Start-Point to End-Point\n            const startEndLineAngleRadians: number = (Math.atan((endY - startY) / (endX - startX)));\n\n            // translate origin at Start (positiveY from Bottom to Top => change sign for Y)\n            const start2: PointF2D = new PointF2D(0, 0);\n            let end2: PointF2D = new PointF2D(endX - startX, -(endY - startY));\n\n            // and Rotate at new Origin startEndLineAngle degrees\n                // clockwise/counterclockwise Rotation\n                // after Rotation end2.Y must be 0\n                // Inverse of RotationMatrix = TransposeMatrix of RotationMatrix\n            const rotationMatrix: Matrix2D = Matrix2D.getRotationMatrix(startEndLineAngleRadians);\n            const transposeMatrix: Matrix2D = rotationMatrix.getTransposeMatrix();\n            end2 = rotationMatrix.vectorMultiplication(end2);\n            const transformedPoints: PointF2D[] = this.calculateTranslatedAndRotatedPointListAbove(points, startX, startY, rotationMatrix);\n\n            // calculate tangent Lines maximum Slopes between StartPoint and EndPoint to all Points in SkyLine\n                // and tangent Lines characteristica\n            const startLineSlope: number = this.calculateMaxLeftSlope(transformedPoints, start2, end2);\n            const endLineSlope: number = this.calculateMaxRightSlope(transformedPoints, start2, end2);\n            const startLineD: number = start2.y - start2.x * startLineSlope;\n            const endLineD: number = end2.y - end2.x * endLineSlope;\n\n            // calculate IntersectionPoint of the 2 Lines\n                // if same Slope, then Point.X between Start and End and Point.Y fixed\n            const intersectionPoint: PointF2D = new PointF2D();\n            let sameSlope: boolean = false;\n            if (Math.abs(Math.abs(startLineSlope) - Math.abs(endLineSlope)) < 0.0001) {\n                intersectionPoint.x = end2.x / 2;\n                intersectionPoint.y = 0;\n                sameSlope = true;\n            } else {\n                intersectionPoint.x = (endLineD - startLineD) / (startLineSlope - endLineSlope);\n                intersectionPoint.y = startLineSlope * intersectionPoint.x + startLineD;\n            }\n\n            // calculate HeightWidthRatio between the MaxYpoint (from the points between StartPoint and EndPoint)\n            // and the X-distance from StartPoint to EndPoint\n            const heightWidthRatio: number = this.calculateHeightWidthRatio(end2.x, transformedPoints);\n\n            // Shift start- or endPoint and corresponding controlPoint away from note, if needed:\n            // e.g. if there is a close object creating a high slope, better shift it away to reduce the slope:\n            // idea is to compare the half heightWidthRatio of the bounding box of the skyline points with the slope (which is also a ratio: k/1)\n            // if the slope is greater than the half heightWidthRatio (which will 99% be the case),\n            // then add a y-offset to reduce the slope to the same value as the half heightWidthRatio of the bounding box\n            const startYOffset: number = 0;\n            const endYOffset: number = 0;\n            /*if (Math.abs(heightWidthRatio) > 0.001) {\n                // 1. start side:\n                const startSlopeRatio: number = Math.abs(startLineSlope / (heightWidthRatio * 2));\n                const maxLeftYOffset: number = Math.abs(startLineSlope);\n                startYOffset = Math.max(0, maxLeftYOffset * (Math.min(10, startSlopeRatio - 1) / 10));\n                // slope has to be adapted now due to the y-offset:\n                startLineSlope -= startYOffset;\n\n                // 2. end side:\n                const endSlopeRatio: number = Math.abs(endLineSlope / (heightWidthRatio * 2));\n                const maxRightYOffset: number = Math.abs(endLineSlope);\n                endYOffset = Math.max(0, maxRightYOffset * (Math.min(10, endSlopeRatio - 1) / 10));\n                // slope has to be adapted now due to the y-offset:\n                endLineSlope += endYOffset;\n            }*/\n\n\n\n            // calculate tangent Lines Angles\n                // (using the calculated Slopes and the Ratio from the IntersectionPoint's distance to the MaxPoint in the SkyLine)\n            let startAngle: number = minAngle;\n            let endAngle: number = -minAngle;\n            // if the calculated Slopes (start and end) are equal, then Angles have fixed values\n            if (!sameSlope) {\n                const result: {startAngle: number, endAngle: number} =\n                    this.calculateAngles(minAngle, startLineSlope, endLineSlope, maxAngle);\n                startAngle = result.startAngle;\n                endAngle = result.endAngle;\n            }\n\n            // calculate Curve's Control Points\n            const controlPoints: {startControlPoint: PointF2D, endControlPoint: PointF2D} =\n                this.calculateControlPoints(end2.x, startAngle, endAngle, transformedPoints, heightWidthRatio, startY, endY);\n\n            let startControlPoint: PointF2D = controlPoints.startControlPoint;\n            let endControlPoint: PointF2D = controlPoints.endControlPoint;\n\n            // transform ControlPoints to original Coordinate System\n                // (rotate back and translate back)\n            startControlPoint = transposeMatrix.vectorMultiplication(startControlPoint);\n            startControlPoint.x += startX;\n            startControlPoint.y = -startControlPoint.y + startY;\n            endControlPoint = transposeMatrix.vectorMultiplication(endControlPoint);\n            endControlPoint.x += startX;\n            endControlPoint.y = -endControlPoint.y + startY;\n            // middleControlPoint.x = (startControlPoint.x + endControlPoint.x) / 2;\n            // middleControlPoint.y = (startControlPoint.y + endControlPoint.y) / 2 + 1.0;\n\n            /* for DEBUG only */\n            // this.intersection = transposeMatrix.vectorMultiplication(intersectionPoint);\n            // this.intersection.x += startX;\n            // this.intersection.y = -this.intersection.y + startY;\n            /* for DEBUG only */\n\n            // set private members\n            this.bezierStartPt = new PointF2D(startX, startY - startYOffset);\n            this.bezierStartControlPt = new PointF2D(startControlPoint.x, startControlPoint.y - startYOffset);\n            this.bezierEndControlPt = new PointF2D(endControlPoint.x, endControlPoint.y - endYOffset);\n            this.bezierEndPt = new PointF2D(endX, endY - endYOffset);\n\n            // calculate slur Curvepoints and update Skyline\n            const length: number = staffLine.SkyLine.length;\n            const startIndex: number = skyBottomLineCalculator.getLeftIndexForPointX(this.bezierStartPt.x, length);\n            const endIndex: number = skyBottomLineCalculator.getLeftIndexForPointX(this.bezierEndPt.x, length);\n            const distance: number = this.bezierEndPt.x - this.bezierStartPt.x;\n            const samplingUnit: number = skyBottomLineCalculator.SamplingUnit;\n            for (let i: number = startIndex; i < endIndex; i++) {\n                // get the right distance ratio and index on the curve\n                const diff: number = i / samplingUnit - this.bezierStartPt.x;\n                const curvePoint: PointF2D = this.calculateCurvePointAtIndex(Math.abs(diff) / distance);\n\n                // update left- and rightIndex for better accuracy\n                let index: number = skyBottomLineCalculator.getLeftIndexForPointX(curvePoint.x, length);\n                // update SkyLine with final slur curve:\n                if (index >= startIndex) {\n                    staffLine.SkyLine[index] = Math.min(staffLine.SkyLine[index], curvePoint.y);\n                }\n                index++;\n                if (index < length) {\n                    staffLine.SkyLine[index] = Math.min(staffLine.SkyLine[index], curvePoint.y);\n                }\n            }\n        } else {\n            startY += rules.SlurNoteHeadYOffset;\n            endY += rules.SlurNoteHeadYOffset;\n\n            // firstStaffEntry startLowerRightPoint and lastStaffentry endLowerLeftPoint\n            const startLowerRight: PointF2D = new PointF2D(this.staffEntries[0].parentMeasure.PositionAndShape.RelativePosition.x\n                                                           + this.staffEntries[0].PositionAndShape.RelativePosition.x,\n                                                           startY);\n            if (slurStartNote) {\n                startLowerRight.x += this.staffEntries[0].PositionAndShape.BorderRight;\n            } else {\n                // continuing Slur from previous StaffLine - must start after last Instruction of first Measure\n                startLowerRight.x = this.staffEntries[0].parentMeasure.beginInstructionsWidth;\n            }\n\n            // must also add the GraceStaffEntry's ParentStaffEntry Position\n            if (this.graceStart) {\n                startLowerRight.x += endStaffEntry.PositionAndShape.RelativePosition.x;\n            }\n            const endLowerLeft: PointF2D = new PointF2D(this.staffEntries[this.staffEntries.length - 1].parentMeasure.PositionAndShape.RelativePosition.x\n                                                        + this.staffEntries[this.staffEntries.length - 1].PositionAndShape.RelativePosition.x,\n                                                        endY);\n            if (slurEndNote) {\n                endLowerLeft.x += this.staffEntries[this.staffEntries.length - 1].PositionAndShape.BorderLeft;\n            } else {\n                // Slur continues to next StaffLine - must reach the end of current StaffLine\n                endLowerLeft.x = this.staffEntries[this.staffEntries.length - 1].parentMeasure.PositionAndShape.RelativePosition.x\n                    + this.staffEntries[this.staffEntries.length - 1].parentMeasure.PositionAndShape.Size.width;\n            }\n\n            // must also add the GraceStaffEntry's ParentStaffEntry Position\n            if (this.graceEnd) {\n                endLowerLeft.x += endStaffEntry.staffEntryParent.PositionAndShape.RelativePosition.x;\n            }\n\n            // BottomLinePointsList between firstStaffEntry startLowerRightPoint and lastStaffentry endLowerLeftPoint\n            points = this.calculateBottomPoints(startLowerRight, endLowerLeft, staffLine, skyBottomLineCalculator);\n\n            if (points.length === 0) {\n                const pointF: PointF2D = new PointF2D((endLowerLeft.x - startLowerRight.x) / 2 + startLowerRight.x,\n                                                      (endLowerLeft.y - startLowerRight.y) / 2 + startLowerRight.y);\n                points.push(pointF);\n            }\n\n            // Angle between original x-Axis and Line from Start-Point to End-Point\n            const startEndLineAngleRadians: number = Math.atan((endY - startY) / (endX - startX));\n            // translate origin at Start\n            const start2: PointF2D = new PointF2D(0, 0);\n            let end2: PointF2D = new PointF2D(endX - startX, endY - startY);\n\n            // and Rotate at new Origin startEndLineAngle degrees\n            // clockwise/counterclockwise Rotation\n            // after Rotation end2.Y must be 0\n            // Inverse of RotationMatrix = TransposeMatrix of RotationMatrix\n            const rotationMatrix: Matrix2D = Matrix2D.getRotationMatrix(-startEndLineAngleRadians);\n            const transposeMatrix: Matrix2D = rotationMatrix.getTransposeMatrix();\n            end2 = rotationMatrix.vectorMultiplication(end2);\n            const transformedPoints: PointF2D[] = this.calculateTranslatedAndRotatedPointListBelow(points, startX, startY, rotationMatrix);\n\n            // calculate tangent Lines maximum Slopes between StartPoint and EndPoint to all Points in BottomLine\n            // and tangent Lines characteristica\n            const startLineSlope: number = this.calculateMaxLeftSlope(transformedPoints, start2, end2);\n            const endLineSlope: number = this.calculateMaxRightSlope(transformedPoints, start2, end2);\n            const startLineD: number = start2.y - start2.x * startLineSlope;\n            const endLineD: number = end2.y - end2.x * endLineSlope;\n\n            // calculate IntersectionPoint of the 2 Lines\n            // if same Slope, then Point.X between Start and End and Point.Y fixed\n            const intersectionPoint: PointF2D = new PointF2D();\n            let sameSlope: boolean = false;\n            if (Math.abs(Math.abs(startLineSlope) - Math.abs(endLineSlope)) < 0.0001) {\n                intersectionPoint.x = end2.x / 2;\n                intersectionPoint.y = 0;\n                sameSlope = true;\n            } else {\n                intersectionPoint.x = (endLineD - startLineD) / (startLineSlope - endLineSlope);\n                intersectionPoint.y = startLineSlope * intersectionPoint.x + startLineD;\n            }\n\n            // calculate HeightWidthRatio between the MaxYpoint (from the points between StartPoint and EndPoint)\n            // and the X-distance from StartPoint to EndPoint\n            const heightWidthRatio: number = this.calculateHeightWidthRatio(end2.x, transformedPoints);\n\n            // Shift start- or endPoint and corresponding controlPoint away from note, if needed:\n            // e.g. if there is a close object creating a high slope, better shift it away to reduce the slope:\n            // idea is to compare the half heightWidthRatio of the bounding box of the skyline points with the slope (which is also a ratio: k/1)\n            // if the slope is greater than the half heightWidthRatio (which will 99% be the case),\n            // then add a y-offset to reduce the slope to the same value as the half heightWidthRatio of the bounding box\n            const startYOffset: number = 0;\n            const endYOffset: number = 0;\n            /*if (Math.abs(heightWidthRatio) > 0.001) {\n                // 1. start side:\n                const startSlopeRatio: number = Math.abs(startLineSlope / (heightWidthRatio * 2));\n                const maxLeftYOffset: number = Math.abs(startLineSlope);\n                startYOffset = Math.max(0, maxLeftYOffset * (Math.min(10, startSlopeRatio - 1) / 10));\n                // slope has to be adapted now due to the y-offset:\n                startLineSlope -= startYOffset;\n                // 2. end side:\n                const endSlopeRatio: number = Math.abs(endLineSlope / (heightWidthRatio * 2));\n                const maxRightYOffset: number = Math.abs(endLineSlope);\n                endYOffset = Math.max(0, maxRightYOffset * (Math.min(10, endSlopeRatio - 1) / 10));\n                // slope has to be adapted now due to the y-offset:\n                endLineSlope += endYOffset;\n            } */\n\n            // calculate tangent Lines Angles\n            // (using the calculated Slopes and the Ratio from the IntersectionPoint's distance to the MaxPoint in the SkyLine)\n            let startAngle: number = minAngle;\n            let endAngle: number = -minAngle;\n            // if the calculated Slopes (start and end) are equal, then Angles have fixed values\n            if (!sameSlope) {\n                const result: {startAngle: number, endAngle: number} =\n                    this.calculateAngles(minAngle, startLineSlope, endLineSlope, maxAngle);\n                startAngle = result.startAngle;\n                endAngle = result.endAngle;\n            }\n\n            // calculate Curve's Control Points\n            const controlPoints: {startControlPoint: PointF2D, endControlPoint: PointF2D} =\n                this.calculateControlPoints(end2.x, startAngle, endAngle, transformedPoints, heightWidthRatio, startY, endY);\n            let startControlPoint: PointF2D = controlPoints.startControlPoint;\n            let endControlPoint: PointF2D = controlPoints.endControlPoint;\n\n            // transform ControlPoints to original Coordinate System\n            // (rotate back and translate back)\n            startControlPoint = transposeMatrix.vectorMultiplication(startControlPoint);\n            startControlPoint.x += startX;\n            startControlPoint.y += startY;\n            endControlPoint = transposeMatrix.vectorMultiplication(endControlPoint);\n            endControlPoint.x += startX;\n            endControlPoint.y += startY;\n\n            // set private members\n            this.bezierStartPt = new PointF2D(startX, startY + startYOffset);\n            this.bezierStartControlPt = new PointF2D(startControlPoint.x, startControlPoint.y + startYOffset);\n            this.bezierEndControlPt = new PointF2D(endControlPoint.x, endControlPoint.y + endYOffset);\n            this.bezierEndPt = new PointF2D(endX, endY + endYOffset);\n\n            /* for DEBUG only */\n            // this.intersection = transposeMatrix.vectorMultiplication(intersectionPoint);\n            // this.intersection.x += startX;\n            // this.intersection.y += startY;\n            /* for DEBUG only */\n\n            // calculate CurvePoints\n            const length: number = staffLine.BottomLine.length;\n            const startIndex: number = skyBottomLineCalculator.getLeftIndexForPointX(this.bezierStartPt.x, length);\n            const endIndex: number = skyBottomLineCalculator.getLeftIndexForPointX(this.bezierEndPt.x, length);\n            const distance: number = this.bezierEndPt.x - this.bezierStartPt.x;\n            const samplingUnit: number = skyBottomLineCalculator.SamplingUnit;\n            for (let i: number = startIndex; i < endIndex; i++) {\n                // get the right distance ratio and index on the curve\n                const diff: number = i / samplingUnit - this.bezierStartPt.x;\n                const curvePoint: PointF2D = this.calculateCurvePointAtIndex(Math.abs(diff) / distance);\n\n                // update start- and endIndex for better accuracy\n                let index: number = skyBottomLineCalculator.getLeftIndexForPointX(curvePoint.x, length);\n                // update BottomLine with final slur curve:\n                if (index >= startIndex) {\n                    staffLine.BottomLine[index] = Math.max(staffLine.BottomLine[index], curvePoint.y);\n                }\n                index++;\n                if (index < length) {\n                    staffLine.BottomLine[index] = Math.max(staffLine.BottomLine[index], curvePoint.y);\n                }\n            }\n        }\n    }\n\n\n    /**\n     * This method calculates the Start and End Positions of the Slur Curve.\n     * @param slurStartNote\n     * @param slurEndNote\n     * @param staffLine\n     * @param startX\n     * @param startY\n     * @param endX\n     * @param endY\n     * @param rules\n     * @param skyBottomLineCalculator\n     */\n    private calculateStartAndEnd(   slurStartNote: GraphicalNote,\n                                    slurEndNote: GraphicalNote,\n                                    staffLine: StaffLine,\n                                    rules: EngravingRules,\n                                    skyBottomLineCalculator: SkyBottomLineCalculator): {startX: number, startY: number, endX: number, endY: number} {\n        let startX: number = 0;\n        let startY: number = 0;\n        let endX: number = 0;\n        let endY: number = 0;\n\n        if (slurStartNote) {\n            // must be relative to StaffLine\n            startX = slurStartNote.PositionAndShape.RelativePosition.x + slurStartNote.parentVoiceEntry.parentStaffEntry.PositionAndShape.RelativePosition.x\n                                            + slurStartNote.parentVoiceEntry.parentStaffEntry.parentMeasure.PositionAndShape.RelativePosition.x;\n\n            // If Slur starts on a Gracenote\n            if (this.graceStart) {\n                startX += slurStartNote.parentVoiceEntry.parentStaffEntry.staffEntryParent.PositionAndShape.RelativePosition.x;\n            }\n\n            //const first: GraphicalNote = slurStartNote.parentVoiceEntry.notes[0];\n\n            // Determine Start/End Point coordinates with the VoiceEntry of the Start/EndNote of the slur\n            const slurStartVE: GraphicalVoiceEntry = slurStartNote.parentVoiceEntry;\n\n            if (this.placement === PlacementEnum.Above) {\n                startY = slurStartVE.PositionAndShape.RelativePosition.y + slurStartVE.PositionAndShape.BorderTop;\n            } else {\n                startY = slurStartVE.PositionAndShape.RelativePosition.y + slurStartVE.PositionAndShape.BorderBottom;\n            }\n\n            // If the stem points towards the starting point of the slur, shift the slur by a small amount to start (approximately) at the x-position\n            // of the notehead. Note: an exact calculation using the position of the note is too complicate for the payoff\n            if ( slurStartVE.parentVoiceEntry.StemDirection === StemDirectionType.Down && this.placement === PlacementEnum.Below ) {\n                startX -= 0.5;\n            }\n            if (slurStartVE.parentVoiceEntry.StemDirection === StemDirectionType.Up && this.placement === PlacementEnum.Above) {\n                startX += 0.5;\n            }\n            // if (first.NoteStem && first.NoteStem.Direction === StemEnum.StemUp && this.placement === PlacementEnum.Above) {\n            //     startX += first.NoteStem.PositionAndShape.RelativePosition.x;\n            //     startY = skyBottomLineCalculator.getSkyLineMinAtPoint(staffLine, startX);\n            // } else {\n            //     const last: GraphicalNote = <GraphicalNote>slurStartNote[slurEndNote.parentVoiceEntry.notes.length - 1];\n            //     if (last.NoteStem && last.NoteStem.Direction === StemEnum.StemDown && this.placement === PlacementEnum.Below) {\n            //         startX += last.NoteStem.PositionAndShape.RelativePosition.x;\n            //         startY = skyBottomLineCalculator.getBottomLineMaxAtPoint(staffLine, startX);\n            //     } else {\n            //     }\n            // }\n        } else {\n            startX = 0;\n        }\n\n        if (slurEndNote) {\n            endX = slurEndNote.PositionAndShape.RelativePosition.x + slurEndNote.parentVoiceEntry.parentStaffEntry.PositionAndShape.RelativePosition.x\n                + slurEndNote.parentVoiceEntry.parentStaffEntry.parentMeasure.PositionAndShape.RelativePosition.x;\n\n            // If Slur ends in a Gracenote\n            if (this.graceEnd) {\n                endX += slurEndNote.parentVoiceEntry.parentStaffEntry.staffEntryParent.PositionAndShape.RelativePosition.x;\n            }\n\n            const slurEndVE: GraphicalVoiceEntry = slurEndNote.parentVoiceEntry;\n            if (this.placement === PlacementEnum.Above) {\n                endY = slurEndVE.PositionAndShape.RelativePosition.y + slurEndVE.PositionAndShape.BorderTop;\n            } else {\n                endY = slurEndVE.PositionAndShape.RelativePosition.y + slurEndVE.PositionAndShape.BorderBottom;\n            }\n\n            // If the stem points towards the endpoint of the slur, shift the slur by a small amount to start (approximately) at the x-position\n            // of the notehead. Note: an exact calculation using the position of the note is too complicate for the payoff\n            if ( slurEndVE.parentVoiceEntry.StemDirection === StemDirectionType.Down && this.placement === PlacementEnum.Below ) {\n                endX -= 0.5;\n            }\n            if (slurEndVE.parentVoiceEntry.StemDirection === StemDirectionType.Up && this.placement === PlacementEnum.Above) {\n                endX += 0.5;\n            }\n            // const first: GraphicalNote = <GraphicalNote>slurEndNote.parentVoiceEntry.notes[0];\n            // if (first.NoteStem && first.NoteStem.Direction === StemEnum.StemUp && this.placement === PlacementEnum.Above) {\n            //     endX += first.NoteStem.PositionAndShape.RelativePosition.x;\n            //     endY = skyBottomLineCalculator.getSkyLineMinAtPoint(staffLine, endX);\n            // } else {\n            //     const last: GraphicalNote = <GraphicalNote>slurEndNote.parentVoiceEntry.notes[slurEndNote.parentVoiceEntry.notes.length - 1];\n            //     if (last.NoteStem && last.NoteStem.Direction === StemEnum.StemDown && this.placement === PlacementEnum.Below) {\n            //         endX += last.NoteStem.PositionAndShape.RelativePosition.x;\n            //         endY = skyBottomLineCalculator.getBottomLineMaxAtPoint(staffLine, endX);\n            //     } else {\n            //         if (this.placement === PlacementEnum.Above) {\n            //             const highestNote: GraphicalNote = last;\n            //             endY = highestNote.PositionAndShape.RelativePosition.y;\n            //             if (highestNote.NoteHead) {\n            //                 endY += highestNote.NoteHead.PositionAndShape.BorderMarginTop;\n            //             } else { endY += highestNote.PositionAndShape.BorderTop; }\n            //         } else {\n            //             const lowestNote: GraphicalNote = first;\n            //             endY = lowestNote.parentVoiceEntry\n            //             lowestNote.PositionAndShape.RelativePosition.y;\n            //             if (lowestNote.NoteHead) {\n            //                 endY += lowestNote.NoteHead.PositionAndShape.BorderMarginBottom;\n            //             } else { endY += lowestNote.PositionAndShape.BorderBottom; }\n            //         }\n            //     }\n            // }\n        } else {\n            endX = staffLine.PositionAndShape.Size.width;\n        }\n\n        // if GraphicalSlur breaks over System, then the end/start of the curve is at the corresponding height with the known start/end\n        if (!slurStartNote && !slurEndNote) {\n            startY = -1.5;\n            endY = -1.5;\n        }\n        if (!slurStartNote) {\n            if (this.placement === PlacementEnum.Above) {\n                startY = endY - 1;\n            } else {\n                startY = endY + 1;\n            }\n        }\n        if (!slurEndNote) {\n            if (this.placement === PlacementEnum.Above) {\n                endY = startY - 1;\n            } else {\n                endY = startY + 1;\n            }\n        }\n\n        // if two slurs start/end at the same GraphicalNote, then the second gets an offset\n        if (this.slur.startNoteHasMoreStartingSlurs() && this.slur.isSlurLonger()) {\n            if (this.placement === PlacementEnum.Above) {\n                startY -= rules.SlursStartingAtSameStaffEntryYOffset;\n            } else { startY += rules.SlursStartingAtSameStaffEntryYOffset; }\n        }\n        if (this.slur.endNoteHasMoreEndingSlurs() && this.slur.isSlurLonger()) {\n            if (this.placement === PlacementEnum.Above) {\n                endY -= rules.SlursStartingAtSameStaffEntryYOffset;\n            } else { endY += rules.SlursStartingAtSameStaffEntryYOffset; }\n        }\n\n        if (this.placement === PlacementEnum.Above) {\n            startY = Math.min(startY, 1.5);\n            endY = Math.min(endY, 1.5);\n        } else {\n            startY = Math.max(startY, staffLine.StaffHeight - 1.5);\n            endY = Math.max(endY, staffLine.StaffHeight - 1.5);\n        }\n\n        return {startX, startY, endX, endY};\n    }\n\n    /**\n     * This method calculates the placement of the Curve.\n     * @param skyBottomLineCalculator\n     * @param staffLine\n     */\n    private calculatePlacement(skyBottomLineCalculator: SkyBottomLineCalculator, staffLine: StaffLine): void {\n        // old version: when lyrics are given place above:\n        // if ( !this.slur.StartNote.ParentVoiceEntry.LyricsEntries.isEmpty || (this.slur.EndNote\n        //                                     && !this.slur.EndNote.ParentVoiceEntry.LyricsEntries.isEmpty) ) {\n        //     this.placement = PlacementEnum.Above;\n        //     return;\n        // }\n\n        if (this.rules.SlurPlacementFromXML) {\n            this.placement = this.slur.PlacementXml;\n            return;\n        }\n\n        // if any StaffEntry belongs to a Measure with multiple Voices, than\n        // if Slur's Start- or End-Note belongs to a LinkedVoice Below else Above\n        for (let idx: number = 0, len: number = this.staffEntries.length; idx < len; ++idx) {\n            const graphicalStaffEntry: GraphicalStaffEntry = this.staffEntries[idx];\n            if (graphicalStaffEntry.parentMeasure.hasMultipleVoices()) {\n                if (this.slur.StartNote.ParentVoiceEntry.ParentVoice instanceof LinkedVoice ||\n                    this.slur.EndNote.ParentVoiceEntry.ParentVoice instanceof LinkedVoice) {\n                    this.placement = PlacementEnum.Below;\n                } else { this.placement = PlacementEnum.Above; }\n                return;\n            }\n        }\n\n        // when lyrics are given place above:\n        for (let idx: number = 0, len: number = this.staffEntries.length; idx < len; ++idx) {\n            const graphicalStaffEntry: GraphicalStaffEntry = this.staffEntries[idx];\n            if (graphicalStaffEntry.LyricsEntries.length > 0) {\n                this.placement = PlacementEnum.Above;\n                return;\n            }\n        }\n        const startStaffEntry: GraphicalStaffEntry = this.staffEntries[0];\n        const endStaffEntry: GraphicalStaffEntry = this.staffEntries[this.staffEntries.length - 1];\n\n        // single Voice, opposite to StemDirection\n        // here should only be one voiceEntry, so we can take graphicalVoiceEntries[0]:\n        const startStemDirection: StemDirectionType = startStaffEntry.graphicalVoiceEntries[0].parentVoiceEntry.StemDirection;\n        const endStemDirection: StemDirectionType = endStaffEntry.graphicalVoiceEntries[0].parentVoiceEntry.StemDirection;\n        if (startStemDirection  ===\n            endStemDirection) {\n            this.placement = (startStemDirection === StemDirectionType.Up) ? PlacementEnum.Below : PlacementEnum.Above;\n        } else {\n            // Placement at the side with the minimum border\n            let sX: number = startStaffEntry.PositionAndShape.BorderLeft + startStaffEntry.PositionAndShape.RelativePosition.x\n                        + startStaffEntry.parentMeasure.PositionAndShape.RelativePosition.x;\n            let eX: number = endStaffEntry.PositionAndShape.BorderRight + endStaffEntry.PositionAndShape.RelativePosition.x\n                        + endStaffEntry.parentMeasure.PositionAndShape.RelativePosition.x;\n\n            if (this.graceStart) {\n                sX += endStaffEntry.PositionAndShape.RelativePosition.x;\n            }\n            if (this.graceEnd) {\n                eX += endStaffEntry.staffEntryParent.PositionAndShape.RelativePosition.x;\n            }\n\n            // get SkyBottomLine borders\n            const minAbove: number = skyBottomLineCalculator.getSkyLineMinInRange(sX, eX) * -1;\n            const maxBelow: number = skyBottomLineCalculator.getBottomLineMaxInRange(sX, eX) - staffLine.StaffHeight;\n\n            if (maxBelow > minAbove) {\n                this.placement = PlacementEnum.Above;\n            } else { this.placement = PlacementEnum.Below; }\n        }\n    }\n\n    /**\n     * This method calculates the Points between Start- and EndPoint (case above).\n     * @param start\n     * @param end\n     * @param staffLine\n     * @param skyBottomLineCalculator\n     */\n    private calculateTopPoints(start: PointF2D, end: PointF2D, staffLine: StaffLine, skyBottomLineCalculator: SkyBottomLineCalculator): PointF2D[] {\n        const points: PointF2D[] = [];\n        let startIndex: number = skyBottomLineCalculator.getRightIndexForPointX(start.x, staffLine.SkyLine.length);\n        let endIndex: number = skyBottomLineCalculator.getLeftIndexForPointX(end.x, staffLine.SkyLine.length);\n\n        if (startIndex < 0) {\n            startIndex = 0;\n        }\n        if (endIndex >= staffLine.SkyLine.length) {\n            endIndex = staffLine.SkyLine.length - 1;\n        }\n\n        for (let i: number = startIndex; i < endIndex; i++) {\n            const skylineValue: number = staffLine.SkyLine[i];\n            // ignore default value (= 0) which is upper border of staffline\n            if (skylineValue !== 0) {\n                const point: PointF2D = new PointF2D((0.5 + i) / skyBottomLineCalculator.SamplingUnit, skylineValue);\n                points.push(point);\n            }\n        }\n\n        return points;\n    }\n\n    /**\n     * This method calculates the Points between Start- and EndPoint (case below).\n     * @param start\n     * @param end\n     * @param staffLine\n     * @param skyBottomLineCalculator\n     */\n    private calculateBottomPoints(start: PointF2D, end: PointF2D, staffLine: StaffLine, skyBottomLineCalculator: SkyBottomLineCalculator): PointF2D[] {\n        const points: PointF2D[] = [];\n\n        // get BottomLine indices\n        let startIndex: number = skyBottomLineCalculator.getRightIndexForPointX(start.x, staffLine.BottomLine.length);\n        let endIndex: number = skyBottomLineCalculator.getLeftIndexForPointX(end.x, staffLine.BottomLine.length);\n        if (startIndex < 0) {\n            startIndex = 0;\n        }\n        if (endIndex >= staffLine.BottomLine.length) {\n            endIndex = staffLine.BottomLine.length - 1;\n        }\n\n        for (let i: number = startIndex; i < endIndex; i++) {\n            const bottomLineValue: number = staffLine.BottomLine[i];\n\n            // ignore default value (= 4) which is lower border of staffline\n            if (bottomLineValue !== 0) {\n                const point: PointF2D = new PointF2D((0.5 + i) / skyBottomLineCalculator.SamplingUnit, bottomLineValue);\n                points.push(point);\n            }\n        }\n\n        return points;\n    }\n\n    /**\n     * This method calculates the maximum slope between StartPoint and BetweenPoints.\n     * @param points\n     * @param start\n     * @param end\n     */\n    private calculateMaxLeftSlope(points: PointF2D[], start: PointF2D, end: PointF2D): number {\n        let slope: number = -Number.MAX_VALUE;\n        const x: number = start.x;\n        const y: number = start.y;\n\n        for (let i: number = 0; i < points.length; i++) {\n            if (Math.abs(points[i].y - Number.MAX_VALUE) < 0.0001 || Math.abs(points[i].y - (-Number.MAX_VALUE)) < 0.0001) {\n                continue;\n            }\n            slope = Math.max(slope, (points[i].y - y) / (points[i].x - x));\n        }\n\n        // in case all Points don't have a meaningful value or the slope between Start- and EndPoint is just bigger\n        slope = Math.max(slope, Math.abs(end.y - y) / (end.x - x));\n        //limit to 80 degrees\n        slope = Math.min(slope, 5.6713);\n\n        return slope;\n    }\n\n    /**\n     * This method calculates the maximum slope between EndPoint and BetweenPoints.\n     * @param points\n     * @param start\n     * @param end\n     */\n    private calculateMaxRightSlope(points: PointF2D[], start: PointF2D, end: PointF2D): number {\n        let slope: number = Number.MAX_VALUE;\n        const x: number = end.x;\n        const y: number = end.y;\n\n        for (let i: number = 0; i < points.length; i++) {\n            if (Math.abs(points[i].y - Number.MAX_VALUE) < 0.0001 || Math.abs(points[i].y - (-Number.MAX_VALUE)) < 0.0001) {\n                continue;\n            }\n            slope = Math.min(slope, (y - points[i].y) / (x - points[i].x));\n        }\n\n        // in case no Point has a meaningful value or the slope between Start- and EndPoint is just smaller\n        slope = Math.min(slope, (y - start.y) / (x - start.x));\n        //limit to 80 degrees\n        slope = Math.max(slope, -5.6713);\n\n        return slope;\n    }\n\n    /**\n     * This method returns the maximum (meaningful) points.Y.\n     * @param points\n     */\n    private getPointListMaxY(points: PointF2D[]): number {\n        let max: number = -Number.MAX_VALUE;\n\n        for (let idx: number = 0, len: number = points.length; idx < len; ++idx) {\n            const point: PointF2D = points[idx];\n            if (Math.abs(point.y - (-Number.MAX_VALUE)) < 0.0001 || Math.abs(point.y - Number.MAX_VALUE) < 0.0001) {\n                continue;\n            }\n            max = Math.max(max, point.y);\n        }\n\n        return max;\n    }\n\n    /**\n     * This method calculates the translated and rotated PointsList (case above).\n     * @param points\n     * @param startX\n     * @param startY\n     * @param rotationMatrix\n     */\n    private calculateTranslatedAndRotatedPointListAbove(points: PointF2D[], startX: number, startY: number, rotationMatrix: Matrix2D): PointF2D[] {\n        const transformedPoints: PointF2D[] = [];\n        for (let i: number = 0; i < points.length; i++) {\n            if (Math.abs(points[i].y - Number.MAX_VALUE) < 0.0001 || Math.abs(points[i].y - (-Number.MAX_VALUE)) < 0.0001) {\n                continue;\n            }\n\n            let point: PointF2D = new PointF2D(points[i].x - startX, -(points[i].y - startY));\n            point = rotationMatrix.vectorMultiplication(point);\n            transformedPoints.push(point);\n        }\n\n        return transformedPoints;\n    }\n\n    /**\n     * This method calculates the translated and rotated PointsList (case below).\n     * @param points\n     * @param startX\n     * @param startY\n     * @param rotationMatrix\n     */\n    private calculateTranslatedAndRotatedPointListBelow(points: PointF2D[], startX: number, startY: number, rotationMatrix: Matrix2D): PointF2D[] {\n        const transformedPoints: PointF2D[] = [];\n        for (let i: number = 0; i < points.length; i++) {\n            if (Math.abs(points[i].y - Number.MAX_VALUE) < 0.0001 || Math.abs(points[i].y - (-Number.MAX_VALUE)) < 0.0001) {\n                continue;\n            }\n            let point: PointF2D = new PointF2D(points[i].x - startX, points[i].y - startY);\n            point = rotationMatrix.vectorMultiplication(point);\n            transformedPoints.push(point);\n        }\n\n        return transformedPoints;\n    }\n\n    /**\n     * This method calculates the HeightWidthRatio between the MaxYpoint (from the points between StartPoint and EndPoint)\n     * and the X-distance from StartPoint to EndPoint.\n     * @param endX\n     * @param points\n     */\n    private calculateHeightWidthRatio(endX: number, points: PointF2D[]): number {\n        if (points.length === 0) {\n            return 0;\n        }\n\n        // in case of negative points\n        const max: number = Math.max(0, this.getPointListMaxY(points));\n\n        return max / endX;\n    }\n\n    /**\n     * This method calculates the 2 ControlPoints of the SlurCurve.\n     * @param endX\n     * @param startAngle\n     * @param endAngle\n     * @param points\n     */\n    private calculateControlPoints(endX: number, startAngle: number, endAngle: number,\n                                   points: PointF2D[], heightWidthRatio: number,\n                                   startY: number, endY: number\n    ): { startControlPoint: PointF2D, endControlPoint: PointF2D } {\n        let heightFactor: number = this.rules.SlurHeightFactor;\n        let widthFlattenFactor: number = 1;\n        const cutoffAngle: number = this.rules.SlurHeightFlattenLongSlursCutoffAngle;\n        const cutoffWidth: number = this.rules.SlurHeightFlattenLongSlursCutoffWidth;\n        // console.log(\"width: \" + endX);\n        if (startAngle > cutoffAngle && endX > cutoffWidth) { // steep and wide slurs\n            // console.log(\"steep angle: \" + startAngle);\n            widthFlattenFactor += endX / 70 * this.rules.SlurHeightFlattenLongSlursFactorByWidth; // double flattening for width = 70, factorByWidth = 1\n            widthFlattenFactor *= 1 + (startAngle / 30 * this.rules.SlurHeightFlattenLongSlursFactorByAngle); // flatten more for higher angles.\n            // TODO use sin or cos instead of startAngle directly\n            heightFactor /= widthFlattenFactor; // flatten long slurs more\n        }\n        // TODO also offer a widthFlattenFactor for smaller slurs?\n\n        // debug:\n        // const measureNumber: number = this.staffEntries[0].parentMeasure.MeasureNumber; // debug\n        // if (measureNumber === 10) {\n        //     console.log(\"endX: \" + endX);\n        //     console.log(\"widthFlattenFactor: \" + widthFlattenFactor);\n        //     console.log(\"heightFactor: \" + heightFactor);\n        //     console.log(\"startAngle: \" + startAngle);\n        //     console.log(\"heightWidthRatio: \" + heightWidthRatio);\n        // }\n\n        // calculate HeightWidthRatio between the MaxYpoint (from the points between StartPoint and EndPoint)\n        // and the X-distance from StartPoint to EndPoint\n        // use this HeightWidthRatio to get a \"normalized\" Factor (based on tested parameters)\n        // this Factor denotes the Length of the TangentLine of the Curve (a proportion of the X-distance from StartPoint to EndPoint)\n        // finally from this Length and the calculated Angles we get the coordinates of the Control Points\n        const factorStart: number = Math.min(0.5, Math.max(0.1, 1.7 * startAngle / 80 * heightFactor * Math.pow(Math.max(heightWidthRatio, 0.05), 0.4)));\n        const factorEnd: number = Math.min(0.5, Math.max(0.1, 1.7 * (-endAngle) / 80 * heightFactor * Math.pow(Math.max(heightWidthRatio, 0.05), 0.4)));\n\n        const startControlPoint: PointF2D = new PointF2D();\n        startControlPoint.x = endX * factorStart * Math.cos(startAngle * GraphicalSlur.degreesToRadiansFactor);\n        startControlPoint.y = endX * factorStart * Math.sin(startAngle * GraphicalSlur.degreesToRadiansFactor);\n\n        const endControlPoint: PointF2D = new PointF2D();\n        endControlPoint.x = endX - (endX * factorEnd * Math.cos(endAngle * GraphicalSlur.degreesToRadiansFactor));\n        endControlPoint.y = -(endX * factorEnd * Math.sin(endAngle * GraphicalSlur.degreesToRadiansFactor));\n        //Soften the slur in a \"brute-force\" way\n        let controlPointYDiff: number = startControlPoint.y - endControlPoint.y;\n        while (this.rules.SlurMaximumYControlPointDistance &&\n               Math.abs(controlPointYDiff) > this.rules.SlurMaximumYControlPointDistance) {\n            if (controlPointYDiff < 0) {\n                startControlPoint.y += 1;\n                endControlPoint.y -= 1;\n            } else {\n                startControlPoint.y -= 1;\n                endControlPoint.y += 1;\n            }\n            controlPointYDiff = startControlPoint.y - endControlPoint.y;\n        }\n        return {startControlPoint: startControlPoint, endControlPoint: endControlPoint};\n    }\n\n    /**\n     * This method calculates the angles for the Curve's Tangent Lines.\n     * @param leftAngle\n     * @param rightAngle\n     * @param startLineSlope\n     * @param endLineSlope\n     * @param maxAngle\n     */\n    private calculateAngles(minAngle: number, startLineSlope: number, endLineSlope: number, maxAngle: number):\n    {startAngle: number, endAngle: number} {\n        // calculate Angles from the calculated Slopes, adding also a given angle\n        const angle: number = 20;\n\n        let calculatedStartAngle: number = Math.atan(startLineSlope) / GraphicalSlur.degreesToRadiansFactor;\n        if (startLineSlope > 0) {\n            calculatedStartAngle += angle;\n        } else {\n            calculatedStartAngle -= angle;\n        }\n\n        let calculatedEndAngle: number = Math.atan(endLineSlope) / GraphicalSlur.degreesToRadiansFactor;\n        if (endLineSlope < 0) {\n            calculatedEndAngle -= angle;\n        } else {\n            calculatedEndAngle += angle;\n        }\n\n        // +/- 80 is the max/min allowed Angle\n        const leftAngle: number = Math.min(Math.max(minAngle, calculatedStartAngle), maxAngle);\n        const rightAngle: number = Math.max(Math.min(-minAngle, calculatedEndAngle), -maxAngle);\n        return {\"startAngle\": leftAngle, \"endAngle\": rightAngle};\n    }\n\n    private static degreesToRadiansFactor: number = Math.PI / 180;\n}\n","import {SourceStaffEntry} from \"../VoiceData/SourceStaffEntry\";\nimport {BoundingBox} from \"./BoundingBox\";\nimport {Fraction} from \"../../Common/DataObjects/Fraction\";\nimport {VerticalGraphicalStaffEntryContainer} from \"./VerticalGraphicalStaffEntryContainer\";\nimport {Note} from \"../VoiceData/Note\";\nimport {Slur} from \"../VoiceData/Expressions/ContinuousExpressions/Slur\";\nimport {Voice} from \"../VoiceData/Voice\";\nimport {VoiceEntry} from \"../VoiceData/VoiceEntry\";\nimport {GraphicalTie} from \"./GraphicalTie\";\nimport {GraphicalObject} from \"./GraphicalObject\";\nimport {GraphicalMeasure} from \"./GraphicalMeasure\";\nimport {GraphicalNote} from \"./GraphicalNote\";\nimport {GraphicalChordSymbolContainer} from \"./GraphicalChordSymbolContainer\";\nimport {GraphicalLyricEntry} from \"./GraphicalLyricEntry\";\nimport {AbstractGraphicalInstruction} from \"./AbstractGraphicalInstruction\";\nimport {GraphicalStaffEntryLink} from \"./GraphicalStaffEntryLink\";\nimport {CollectionUtil} from \"../../Util/CollectionUtil\";\nimport { GraphicalVoiceEntry } from \"./GraphicalVoiceEntry\";\nimport { MusicSheetCalculator } from \"./MusicSheetCalculator\";\nimport { Tie } from \"../VoiceData/Tie\";\nimport { GraphicalLabel } from \"./GraphicalLabel\";\nimport { SkyBottomLineCalculator } from \"./SkyBottomLineCalculator\";\n\n/**\n * The graphical counterpart of a [[SourceStaffEntry]].\n */\nexport abstract class GraphicalStaffEntry extends GraphicalObject {\n    constructor(parentMeasure: GraphicalMeasure, sourceStaffEntry: SourceStaffEntry = undefined, staffEntryParent: GraphicalStaffEntry = undefined) {\n        super();\n        this.parentMeasure = parentMeasure;\n        this.graphicalVoiceEntries = [];\n        this.sourceStaffEntry = sourceStaffEntry;\n        if (staffEntryParent) {\n            this.staffEntryParent = staffEntryParent;\n            this.parentVerticalContainer = staffEntryParent.parentVerticalContainer;\n            this.PositionAndShape = new BoundingBox(this, staffEntryParent.PositionAndShape);\n        } else {\n            this.PositionAndShape = new BoundingBox(this, parentMeasure.PositionAndShape);\n        }\n        if (sourceStaffEntry) {\n            this.relInMeasureTimestamp = sourceStaffEntry.Timestamp;\n        }\n        this.FingeringEntries = [];\n    }\n\n    public graphicalChordContainers: GraphicalChordSymbolContainer[] = [];\n    public graphicalLink: GraphicalStaffEntryLink;\n\n    // Extra member needed, as tie notes have no direct source entry with the right time stamp.\n    public relInMeasureTimestamp: Fraction;\n    public sourceStaffEntry: SourceStaffEntry;\n    public parentMeasure: GraphicalMeasure;\n    public graphicalVoiceEntries: GraphicalVoiceEntry[];\n    public staffEntryParent: GraphicalStaffEntry;\n    public parentVerticalContainer: VerticalGraphicalStaffEntryContainer;\n    public tabStaffEntry: GraphicalStaffEntry = undefined;\n    public MaxAccidentals: number = 0;\n\n    private graphicalInstructions: AbstractGraphicalInstruction[] = [];\n    public ties: Tie[] = [];\n    private graphicalTies: GraphicalTie[] = [];\n    private lyricsEntries: GraphicalLyricEntry[] = [];\n    public FingeringEntries: GraphicalLabel[];\n\n    public get GraphicalInstructions(): AbstractGraphicalInstruction[] {\n        return this.graphicalInstructions;\n    }\n\n    public get GraphicalTies(): GraphicalTie[] {\n        return this.graphicalTies;\n    }\n\n    public get LyricsEntries(): GraphicalLyricEntry[] {\n        return this.lyricsEntries;\n    }\n\n    public set LyricsEntries(value: GraphicalLyricEntry[]) {\n        this.lyricsEntries = value;\n    }\n\n    /**\n     * Calculate the absolute Timestamp.\n     * @returns {Fraction}\n     */\n    public getAbsoluteTimestamp(): Fraction {\n        const result: Fraction = this.parentMeasure.parentSourceMeasure.AbsoluteTimestamp.clone();\n        if (this.relInMeasureTimestamp) {\n            result.Add(this.relInMeasureTimestamp);\n        }\n        return result;\n    }\n\n    /**\n     * Search through all the GraphicalNotes to find the suitable one for a TieEndNote.\n     * @param tieNote\n     * @returns {any}\n     */\n    public findTieGraphicalNoteFromNote(tieNote: Note): GraphicalNote {\n        for (const gve of this.graphicalVoiceEntries) {\n            for (const graphicalNote of gve.notes) {\n                const note: Note = graphicalNote.sourceNote;\n                if (!note.isRest()\n                    && note.Pitch.FundamentalNote === tieNote.Pitch.FundamentalNote\n                    && note.Pitch.Octave === tieNote.Pitch.Octave\n                    && note.getAbsoluteTimestamp().Equals(tieNote.getAbsoluteTimestamp())) {\n                    return graphicalNote;\n                }\n            }\n        }\n        return undefined;\n    }\n\n    /**\n     * Search through all [[GraphicalNote]]s to find the suitable one for an StartSlurNote (that 's also an EndTieNote).\n     * @param tieNote\n     * @param slur\n     * @returns {any}\n     */\n    public findEndTieGraphicalNoteFromNoteWithStartingSlur(tieNote: Note, slur: Slur): GraphicalNote {\n        if (!tieNote) {\n            return undefined;\n        }\n        for (const gve of this.graphicalVoiceEntries) {\n            if (gve.parentVoiceEntry !== tieNote.ParentVoiceEntry) {\n                continue;\n            }\n            for (const graphicalNote of gve.notes) {\n                const note: Note = graphicalNote.sourceNote;\n                if (note.NoteTie && note.NoteSlurs.indexOf(slur) !== -1) {\n                    return graphicalNote;\n                }\n            }\n        }\n        return undefined;\n    }\n\n    public findGraphicalNoteFromGraceNote(graceNote: Note): GraphicalNote {\n        if (!graceNote) {\n            return undefined;\n        }\n        for (const gve of this.graphicalVoiceEntries) {\n            if (gve.parentVoiceEntry !== graceNote.ParentVoiceEntry) {\n                continue;\n            }\n            for (const graphicalNote of gve.notes) {\n                if (graphicalNote.sourceNote === graceNote) {\n                    return graphicalNote;\n                }\n            }\n        }\n        return undefined;\n    }\n\n    public findGraphicalNoteFromNote(note: Note): GraphicalNote {\n        if (!note) {\n            return undefined;\n        }\n        for (const gve of this.graphicalVoiceEntries) {\n            if (gve.parentVoiceEntry !== note.ParentVoiceEntry) {\n                continue;\n            }\n            for (const graphicalNote of gve.notes) {\n                if (graphicalNote.sourceNote === note && this.getAbsoluteTimestamp().Equals(note.getAbsoluteTimestamp())) {\n                    return graphicalNote;\n                }\n            }\n        }\n        return undefined;\n    }\n\n    public getGraphicalNoteDurationFromVoice(voice: Voice): Fraction {\n        for (const gve of this.graphicalVoiceEntries) {\n            if (gve.parentVoiceEntry.ParentVoice !== voice) {\n                continue;\n            }\n            return gve.notes[0].graphicalNoteLength;\n        }\n        return new Fraction(0, 1);\n    }\n\n    /**\n     * Find the [[StaffEntry]]'s [[GraphicalNote]]s that correspond to the given [[VoiceEntry]]'s [[Note]]s.\n     * @param voiceEntry\n     * @returns {any}\n     */\n    public findVoiceEntryGraphicalNotes(voiceEntry: VoiceEntry): GraphicalNote[] {\n        for (const gve of this.graphicalVoiceEntries) {\n            if (gve.parentVoiceEntry === voiceEntry) {\n                return gve.notes;\n            }\n        }\n        return undefined;\n    }\n\n    /**\n     * Check if the given [[VoiceEntry]] is part of the [[StaffEntry]]'s Linked [[VoiceEntry]].\n     * @param voiceEntry\n     * @returns {boolean}\n     */\n    public isVoiceEntryPartOfLinkedVoiceEntry(voiceEntry: VoiceEntry): boolean {\n        if (this.sourceStaffEntry.Link) {\n            for (let idx: number = 0, len: number = this.sourceStaffEntry.Link.LinkStaffEntries.length; idx < len; ++idx) {\n                const sEntry: SourceStaffEntry = this.sourceStaffEntry.Link.LinkStaffEntries[idx];\n                if (sEntry.VoiceEntries.indexOf(voiceEntry) !== -1 && sEntry !== this.sourceStaffEntry) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Return the [[StaffEntry]]'s Minimum NoteLength.\n     * @returns {Fraction}\n     */\n    public findStaffEntryMinNoteLength(): Fraction {\n        let minLength: Fraction = new Fraction(Number.MAX_VALUE, 1);\n        for (const gve of this.graphicalVoiceEntries) {\n            for (const graphicalNote of gve.notes) {\n                const calNoteLen: Fraction = graphicalNote.graphicalNoteLength;\n                if (calNoteLen.lt(minLength) && calNoteLen.GetExpandedNumerator() > 0) {\n                    minLength = calNoteLen;\n                }\n            }\n        }\n        return minLength;\n    }\n\n    public findStaffEntryMaxNoteLength(): Fraction {\n        let maxLength: Fraction = new Fraction(0, 1);\n        for (const gve of this.graphicalVoiceEntries) {\n            for (const graphicalNote of gve.notes) {\n                const calNoteLen: Fraction = graphicalNote.graphicalNoteLength;\n                if (maxLength.lt(calNoteLen)  && calNoteLen.GetExpandedNumerator() > 0) {\n                    maxLength = calNoteLen;\n                }\n            }\n        }\n        return maxLength;\n    }\n\n    /**\n     * Find or creates the list of [[GraphicalNote]]s in case of a [[VoiceEntry]] (not from TiedNote).\n     * @param voiceEntry\n     * @returns {GraphicalNote[]}\n     */\n    public findOrCreateGraphicalVoiceEntry(voiceEntry: VoiceEntry): GraphicalVoiceEntry {\n        for (const gve of this.graphicalVoiceEntries) {\n            if (gve.parentVoiceEntry === voiceEntry) {\n                return gve;\n            }\n        }\n        // if not found in list, create new one and add to list:\n        const graphicalVoiceEntry: GraphicalVoiceEntry = MusicSheetCalculator.symbolFactory.createVoiceEntry(voiceEntry, this);\n        this.graphicalVoiceEntries.push(graphicalVoiceEntry);\n\n        return graphicalVoiceEntry;\n    }\n\n    /**\n     * Find or creates the list of [[GraphicalNote]]s in case of a TiedNote.\n     * @param graphicalNote\n     * @returns {GraphicalNote[]}\n     */\n    public findOrCreateGraphicalVoiceEntryFromGraphicalNote(graphicalNote: GraphicalNote): GraphicalVoiceEntry {\n        for (const gve of this.graphicalVoiceEntries) {\n            if (gve === graphicalNote.parentVoiceEntry) {\n                return gve;\n            }\n        }\n        // if not found in list, create new one and add to list:\n        const graphicalVoiceEntry: GraphicalVoiceEntry = MusicSheetCalculator.symbolFactory.createVoiceEntry(graphicalNote.sourceNote.ParentVoiceEntry, this);\n        this.graphicalVoiceEntries.push(graphicalVoiceEntry);\n\n        return graphicalVoiceEntry;\n    }\n\n    /**\n     * Insert the [[GraphicalNote]] to the correct index of the [[GraphicalNote]]s list,\n     * so that the order of the [[GraphicalNote]]'s in the list corresponds to the [[VoiceEntry]]'s [[Note]]s order.\n     * (needed when adding Tie-EndNotes).\n     * @param graphicalNotes\n     * @param graphicalNote\n     */\n    public addGraphicalNoteToListAtCorrectYPosition(gve: GraphicalVoiceEntry, graphicalNote: GraphicalNote): void {\n        const graphicalNotes: GraphicalNote[] = gve.notes;\n        if (graphicalNotes.length === 0 ||\n            graphicalNote.PositionAndShape.RelativePosition.y < CollectionUtil.last(graphicalNotes).PositionAndShape.RelativePosition.y) {\n            graphicalNotes.push(graphicalNote);\n        } else {\n            for (let i: number = graphicalNotes.length - 1; i >= 0; i--) {\n                if (graphicalNotes[i].PositionAndShape.RelativePosition.y > graphicalNote.PositionAndShape.RelativePosition.y) {\n                    graphicalNotes.splice(i + 1, 0, graphicalNote);\n                    break;\n                }\n                if (i === 0) {\n                    graphicalNotes.splice(0, 0, graphicalNote);\n                    break;\n                }\n            }\n        }\n    }\n\n    /**\n     * Returns true if this staff entry has only rests\n     */\n    public hasOnlyRests(): boolean {\n        const hasOnlyRests: boolean = true;\n        for (const gve of this.graphicalVoiceEntries) {\n            for (const graphicalNote of gve.notes) {\n                const note: Note = graphicalNote.sourceNote;\n                if (!note.isRest()) {\n                    return false;\n                }\n            }\n        }\n        return hasOnlyRests;\n    }\n\n    public getSkylineMin(): number {\n        const skybottomcalculator: SkyBottomLineCalculator = this.parentMeasure?.ParentStaffLine.SkyBottomLineCalculator;\n        if (!skybottomcalculator) {\n            return undefined;\n        }\n        const [start, end] = this.getAbsoluteStartAndEnd();\n        return skybottomcalculator.getSkyLineMinInRange(start, end);\n    }\n\n    /** Highest Y around the staff entry and notes in OSMD units (pixels / 10). Note that negative y is up. */\n    public getHighestYAtEntry(): number {\n        const baseY: number = this.parentMeasure.ParentStaffLine.PositionAndShape.AbsolutePosition.y;\n        return baseY + this.getSkylineMin();\n    }\n\n    /** Lowest Y around the staff entry and notes in OSMD units (pixels / 10). Note that positive y is down. */\n    public getLowestYAtEntry(): number {\n        const baseY: number = this.parentMeasure.ParentStaffLine.PositionAndShape.AbsolutePosition.y;\n        return baseY + this.getBottomlineMax();\n    }\n\n    public getBottomlineMax(): number {\n        const skybottomcalculator: SkyBottomLineCalculator = this.parentMeasure?.ParentStaffLine.SkyBottomLineCalculator;\n        if (!skybottomcalculator) {\n            return undefined;\n        }\n        const [start, end] = this.getAbsoluteStartAndEnd();\n        return skybottomcalculator.getBottomLineMaxInRange(start, end);\n    }\n\n    public getAbsoluteStartAndEnd(): [number, number] {\n        let start: number = this.PositionAndShape.AbsolutePosition.x;\n        start -= this.parentMeasure.ParentStaffLine.PositionAndShape.AbsolutePosition.x;\n        const end: number = start + this.PositionAndShape.Size.width;\n        return [start, end];\n    }\n}\n","import {StaffEntryLink} from \"../VoiceData/StaffEntryLink\";\nimport {GraphicalStaffEntry} from \"./GraphicalStaffEntry\";\nimport {GraphicalNote} from \"./GraphicalNote\";\n\n/**\n * The graphical counterpart of a [[StaffEntryLink]].\n * Used for linked voices.\n */\nexport class GraphicalStaffEntryLink {\n    private staffEntryLink: StaffEntryLink;\n    private graphicalLinkedStaffEntries: GraphicalStaffEntry[] = [];\n    constructor(staffEntryLink: StaffEntryLink) {\n        this.staffEntryLink = staffEntryLink;\n        this.initialize();\n    }\n    public get GetStaffEntryLink(): StaffEntryLink {\n        return this.staffEntryLink;\n    }\n    public get GraphicalLinkedStaffEntries(): GraphicalStaffEntry[] {\n        return this.graphicalLinkedStaffEntries;\n    }\n    public set GraphicalLinkedStaffEntries(value: GraphicalStaffEntry[]) {\n        this.graphicalLinkedStaffEntries = value;\n    }\n    public isFilled(): boolean {\n        for (let i: number = 0; i < this.graphicalLinkedStaffEntries.length; i++) {\n            if (!this.graphicalLinkedStaffEntries[i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    /**\n     * Return all the [[GraphicalNote]]s that correspond to the [[LinkedVoiceEntry]] (the one saved in [[StaffEntryLink]]).\n     * @param graphicalStaffEntry\n     * @returns {any}\n     */\n    public getLinkedStaffEntriesGraphicalNotes(graphicalStaffEntry: GraphicalStaffEntry): GraphicalNote[] {\n        if (this.graphicalLinkedStaffEntries.indexOf(graphicalStaffEntry) !== -1) {\n            const notes: GraphicalNote[] = [];\n            for (let idx: number = 0, len: number = this.graphicalLinkedStaffEntries.length; idx < len; ++idx) {\n                const graphicalLinkedStaffEntry: GraphicalStaffEntry = this.graphicalLinkedStaffEntries[idx];\n                for (const gve of graphicalLinkedStaffEntry.graphicalVoiceEntries) {\n                    for (const graphicalNote of gve.notes) {\n                        if (graphicalNote.sourceNote.ParentStaffEntry.Link\n                            && graphicalNote.sourceNote.ParentVoiceEntry === this.staffEntryLink.GetVoiceEntry) {\n                            notes.push(graphicalNote);\n                        }\n                    }\n                }\n            }\n            return notes;\n        }\n        return undefined;\n    }\n    private initialize(): void {\n        for (let idx: number = 0, len: number = this.staffEntryLink.LinkStaffEntries.length; idx < len; ++idx) {\n            this.graphicalLinkedStaffEntries.push(undefined);\n        }\n    }\n}\n","import {Tie} from \"../VoiceData/Tie\";\nimport {GraphicalNote} from \"./GraphicalNote\";\nimport Vex from \"vexflow\";\nimport VF = Vex.Flow;\n\n/**\n * The graphical counterpart of a [[Tie]].\n */\nexport class GraphicalTie {\n    private tie: Tie;\n    private startNote: GraphicalNote;\n    private endNote: GraphicalNote;\n    public vfTie: VF.StaveTie;\n\n    constructor(tie: Tie, start: GraphicalNote = undefined, end: GraphicalNote = undefined) {\n        this.tie = tie;\n        this.startNote = start;\n        this.endNote = end;\n    }\n\n    public get SVGElement(): HTMLElement {\n        return (this.vfTie as any).getAttribute(\"el\");\n    }\n\n    public get GetTie(): Tie {\n        return this.tie;\n    }\n    public get StartNote(): GraphicalNote {\n        return this.startNote;\n    }\n    public get Tie(): Tie {\n        return this.tie;\n    }\n    public set StartNote(value: GraphicalNote) {\n        this.startNote = value;\n    }\n    public get EndNote(): GraphicalNote {\n        return this.endNote;\n    }\n    public set EndNote(value: GraphicalNote) {\n        this.endNote = value;\n    }\n\n}\n","\nimport { StaffLine } from \"./StaffLine\";\nimport { GraphicalLabel } from \"./GraphicalLabel\";\nimport { AbstractGraphicalExpression } from \"./AbstractGraphicalExpression\";\nimport { PlacementEnum, AbstractExpression } from \"../VoiceData/Expressions/AbstractExpression\";\nimport { MultiExpression } from \"../VoiceData/Expressions/MultiExpression\";\nimport { SkyBottomLineCalculator } from \"./SkyBottomLineCalculator\";\nimport log from \"loglevel\";\nimport { SourceMeasure } from \"../VoiceData/SourceMeasure\";\n\nexport class GraphicalUnknownExpression extends AbstractGraphicalExpression {\n    public sourceMultiExpression: MultiExpression;\n\n    constructor(staffLine: StaffLine, label: GraphicalLabel, placement: PlacementEnum, measure: SourceMeasure,\n                sourceMultiExpression: MultiExpression = undefined) {\n        super(staffLine, new AbstractExpression(placement), measure);\n        this.label = label;\n        this.sourceMultiExpression = sourceMultiExpression;\n    }\n\n    public updateSkyBottomLine(): void {\n        // update Sky-BottomLine\n        const skyBottomLineCalculator: SkyBottomLineCalculator = this.parentStaffLine.SkyBottomLineCalculator;\n        const left: number = this.label.PositionAndShape.RelativePosition.x + this.label.PositionAndShape.BorderMarginLeft;\n        const right: number = this.label.PositionAndShape.RelativePosition.x + this.label.PositionAndShape.BorderMarginRight;\n        switch (this.Placement) {\n            case PlacementEnum.Above:\n                const yValueAbove: number = this.label.PositionAndShape.BorderMarginTop + this.label.PositionAndShape.RelativePosition.y;\n                skyBottomLineCalculator.updateSkyLineInRange(left, right, yValueAbove);\n                break;\n            case PlacementEnum.Below:\n                const yValueBelow: number = this.label.PositionAndShape.BorderMarginBottom + this.label.PositionAndShape.RelativePosition.y;\n                skyBottomLineCalculator.updateBottomLineInRange(left, right, yValueBelow);\n                break;\n            default:\n                log.error(\"Placement for GraphicalUnknownExpression is unknown\");\n        }\n    }\n}\n","import { GraphicalObject } from \"./GraphicalObject\";\nimport { VoiceEntry } from \"../VoiceData/VoiceEntry\";\nimport { BoundingBox } from \"./BoundingBox\";\nimport { GraphicalNote } from \"./GraphicalNote\";\nimport { GraphicalStaffEntry } from \"./GraphicalStaffEntry\";\nimport { OctaveEnum } from \"../VoiceData/Expressions/ContinuousExpressions/OctaveShift\";\nimport { EngravingRules } from \"./EngravingRules\";\n\n/**\n * The graphical counterpart of a [[VoiceEntry]].\n */\nexport class GraphicalVoiceEntry extends GraphicalObject {\n    constructor(parentVoiceEntry: VoiceEntry, parentStaffEntry: GraphicalStaffEntry) {\n        super();\n        this.parentVoiceEntry = parentVoiceEntry;\n        this.parentStaffEntry = parentStaffEntry;\n        this.PositionAndShape = new BoundingBox(this, parentStaffEntry ? parentStaffEntry.PositionAndShape : undefined, true);\n        this.notes = [];\n        this.rules = parentStaffEntry ?\n                        parentStaffEntry.parentMeasure.parentSourceMeasure.Rules : new EngravingRules();\n    }\n\n    public parentVoiceEntry: VoiceEntry;\n    public parentStaffEntry: GraphicalStaffEntry;\n    public notes: GraphicalNote[];\n    /** Contains octave shifts affecting this voice entry, caused by octave brackets. */\n    public octaveShiftValue: OctaveEnum;\n    protected rules: EngravingRules;\n    public GraceSlash: boolean;\n\n    /** Sort this entry's notes by pitch.\n     * Notes need to be sorted for Vexflow StaveNote creation.\n     * Note that Vexflow needs the reverse order, see VexFlowConverter.StaveNote().\n     */\n    public sort(): GraphicalNote[] {\n        this.notes.sort((a, b) => {\n            return (b.sourceNote.Pitch?.getHalfTone() ?? 0) - (a.sourceNote.Pitch?.getHalfTone() ?? 0);\n        });\n        // note that this is the reverse order of what vexflow needs\n        return this.notes;\n    }\n\n    /** Sort notes for vexflow (bottom to top), which needs them in the reverse order OSMD likes to have them.\n     *  Note that sort() and reverse() replace the array in place,\n     *  so to avoid changing the array one could copy it first, see sortedNotesCopyForVexflow() (commented),\n     *  though copying the array is also unnecessary (time+memory) for now.\n     */\n    public sortForVexflow(): GraphicalNote[] {\n        this.notes.sort((a, b) => {\n            return (a.sourceNote.Pitch?.getHalfTone() ?? 0) - (b.sourceNote.Pitch.getHalfTone() ?? 0);\n        });\n        return this.notes;\n    }\n\n    // probably unnecessary, can just go through the array in reverse\n    // public sortedNotesCopyForVexflow(): GraphicalNote[] {\n    //     // we need a copy since sort replaces the array (in place sorting)\n    //     let sortedArray = Array.from(this.notes.sort());\n    //     sortedArray.reverse();\n    //     return sortedArray;\n    // }\n\n    /** (Re-)color notes and stems\n     */\n    public color(): void {\n        // override\n    }\n}\n","import { GraphicalStaffEntry } from \"./GraphicalStaffEntry\";\nimport { StaffLine } from \"./StaffLine\";\nimport { GraphicalMusicSheet } from \"./GraphicalMusicSheet\";\nimport { EngravingRules } from \"./EngravingRules\";\nimport { Tie } from \"../VoiceData/Tie\";\nimport { Fraction } from \"../../Common/DataObjects/Fraction\";\nimport { Note } from \"../VoiceData/Note\";\nimport { MusicSheet } from \"../MusicSheet\";\nimport { GraphicalMeasure } from \"./GraphicalMeasure\";\nimport {ClefInstruction, ClefEnum} from \"../VoiceData/Instructions/ClefInstruction\";\nimport { LyricWord } from \"../VoiceData/Lyrics/LyricsWord\";\nimport { SourceMeasure } from \"../VoiceData/SourceMeasure\";\nimport { GraphicalMusicPage } from \"./GraphicalMusicPage\";\nimport { GraphicalNote } from \"./GraphicalNote\";\nimport { Beam } from \"../VoiceData/Beam\";\nimport { OctaveEnum } from \"../VoiceData/Expressions/ContinuousExpressions/OctaveShift\";\nimport { VoiceEntry, StemDirectionType } from \"../VoiceData/VoiceEntry\";\nimport { OrnamentContainer } from \"../VoiceData/OrnamentContainer\";\nimport { Articulation } from \"../VoiceData/Articulation\";\nimport { Tuplet } from \"../VoiceData/Tuplet\";\nimport { MusicSystem } from \"./MusicSystem\";\nimport { GraphicalTie } from \"./GraphicalTie\";\nimport { RepetitionInstruction } from \"../VoiceData/Instructions/RepetitionInstruction\";\nimport { MultiExpression, MultiExpressionEntry } from \"../VoiceData/Expressions/MultiExpression\";\nimport { StaffEntryLink } from \"../VoiceData/StaffEntryLink\";\nimport { MusicSystemBuilder } from \"./MusicSystemBuilder\";\nimport { MultiTempoExpression } from \"../VoiceData/Expressions/MultiTempoExpression\";\nimport { Repetition } from \"../MusicSource/Repetition\";\nimport { PointF2D } from \"../../Common/DataObjects/PointF2D\";\nimport { SourceStaffEntry } from \"../VoiceData/SourceStaffEntry\";\nimport { BoundingBox } from \"./BoundingBox\";\nimport { Instrument } from \"../Instrument\";\nimport { GraphicalLabel } from \"./GraphicalLabel\";\nimport { TextAlignmentEnum } from \"../../Common/Enums/TextAlignment\";\nimport { VerticalGraphicalStaffEntryContainer } from \"./VerticalGraphicalStaffEntryContainer\";\nimport { KeyInstruction } from \"../VoiceData/Instructions/KeyInstruction\";\nimport { AbstractNotationInstruction } from \"../VoiceData/Instructions/AbstractNotationInstruction\";\nimport { TechnicalInstruction } from \"../VoiceData/Instructions/TechnicalInstruction\";\nimport { Pitch } from \"../../Common/DataObjects/Pitch\";\nimport { LinkedVoice } from \"../VoiceData/LinkedVoice\";\nimport { ColDirEnum } from \"./BoundingBox\";\nimport { IGraphicalSymbolFactory } from \"../Interfaces/IGraphicalSymbolFactory\";\nimport { ITextMeasurer } from \"../Interfaces/ITextMeasurer\";\nimport { ITransposeCalculator } from \"../Interfaces/ITransposeCalculator\";\nimport { OctaveShiftParams } from \"./OctaveShiftParams\";\nimport { AccidentalCalculator } from \"./AccidentalCalculator\";\nimport { MidiInstrument } from \"../VoiceData/Instructions/ClefInstruction\";\nimport { Staff } from \"../VoiceData/Staff\";\nimport { OctaveShift } from \"../VoiceData/Expressions/ContinuousExpressions/OctaveShift\";\nimport log from \"loglevel\";\nimport { Dictionary } from \"typescript-collections\";\nimport { GraphicalLyricEntry } from \"./GraphicalLyricEntry\";\nimport { GraphicalLyricWord } from \"./GraphicalLyricWord\";\nimport { GraphicalLine } from \"./GraphicalLine\";\nimport { Label } from \"../Label\";\nimport { GraphicalVoiceEntry } from \"./GraphicalVoiceEntry\";\nimport { VerticalSourceStaffEntryContainer } from \"../VoiceData/VerticalSourceStaffEntryContainer\";\nimport { SkyBottomLineCalculator } from \"./SkyBottomLineCalculator\";\nimport { PlacementEnum } from \"../VoiceData/Expressions/AbstractExpression\";\nimport { AbstractGraphicalInstruction } from \"./AbstractGraphicalInstruction\";\nimport { GraphicalInstantaneousTempoExpression } from \"./GraphicalInstantaneousTempoExpression\";\nimport { InstantaneousTempoExpression, TempoEnum } from \"../VoiceData/Expressions/InstantaneousTempoExpression\";\nimport { ContinuousTempoExpression } from \"../VoiceData/Expressions/ContinuousExpressions/ContinuousTempoExpression\";\nimport { FontStyles } from \"../../Common/Enums/FontStyles\";\nimport { AbstractTempoExpression } from \"../VoiceData/Expressions/AbstractTempoExpression\";\nimport { GraphicalInstantaneousDynamicExpression } from \"./GraphicalInstantaneousDynamicExpression\";\nimport { ContDynamicEnum } from \"../VoiceData/Expressions/ContinuousExpressions/ContinuousDynamicExpression\";\nimport { GraphicalContinuousDynamicExpression } from \"./GraphicalContinuousDynamicExpression\";\nimport { FillEmptyMeasuresWithWholeRests } from \"../../OpenSheetMusicDisplay/OSMDOptions\";\nimport { IStafflineNoteCalculator } from \"../Interfaces/IStafflineNoteCalculator\";\nimport { GraphicalUnknownExpression } from \"./GraphicalUnknownExpression\";\nimport { GraphicalChordSymbolContainer } from \".\";\n\n/**\n * Class used to do all the calculations in a MusicSheet, which in the end populates a GraphicalMusicSheet.\n */\nexport abstract class MusicSheetCalculator {\n    public static symbolFactory: IGraphicalSymbolFactory;\n    public static transposeCalculator: ITransposeCalculator;\n    public static stafflineNoteCalculator: IStafflineNoteCalculator;\n    protected static textMeasurer: ITextMeasurer;\n\n    protected staffEntriesWithGraphicalTies: GraphicalStaffEntry[] = [];\n    protected staffEntriesWithOrnaments: GraphicalStaffEntry[] = [];\n    protected staffEntriesWithChordSymbols: GraphicalStaffEntry[] = [];\n    protected staffLinesWithLyricWords: StaffLine[] = [];\n\n    protected graphicalLyricWords: GraphicalLyricWord[] = [];\n\n    protected graphicalMusicSheet: GraphicalMusicSheet;\n    protected rules: EngravingRules;\n    protected musicSystems: MusicSystem[];\n\n    private abstractNotImplementedErrorMessage: string = \"abstract, not implemented\";\n\n    public static get TextMeasurer(): ITextMeasurer {\n        return MusicSheetCalculator.textMeasurer;\n    }\n\n    public static set TextMeasurer(value: ITextMeasurer) {\n        MusicSheetCalculator.textMeasurer = value;\n    }\n\n    protected get leadSheet(): boolean {\n        return this.graphicalMusicSheet.LeadSheet;\n    }\n\n    protected static setMeasuresMinStaffEntriesWidth(measures: GraphicalMeasure[], minimumStaffEntriesWidth: number): void {\n        for (let idx: number = 0, len: number = measures.length; idx < len; ++idx) {\n            const measure: GraphicalMeasure = measures[idx];\n            if (measure) {\n                measure.minimumStaffEntriesWidth = minimumStaffEntriesWidth;\n            }\n        }\n    }\n\n    public initialize(graphicalMusicSheet: GraphicalMusicSheet): void {\n        this.graphicalMusicSheet = graphicalMusicSheet;\n        this.rules = graphicalMusicSheet.ParentMusicSheet.Rules;\n        this.rules.clearMusicSheetObjects();\n        this.prepareGraphicalMusicSheet();\n        //this.calculate();\n    }\n\n    /**\n     * Build the 2D [[GraphicalMeasure]] list needed for the [[MusicSheetCalculator]].\n     * Internally it creates [[GraphicalMeasure]]s, [[GraphicalStaffEntry]]'s and [[GraphicalNote]]s.\n     */\n    public prepareGraphicalMusicSheet(): void {\n        // Clear the stored system images dict - all systems have to be redrawn.\n        // Not necessary now. TODO Check\n        // this.graphicalMusicSheet.SystemImages.length = 0;\n        const musicSheet: MusicSheet = this.graphicalMusicSheet.ParentMusicSheet;\n\n        this.staffEntriesWithGraphicalTies = [];\n        this.staffEntriesWithOrnaments = [];\n        this.staffEntriesWithChordSymbols = [];\n        this.staffLinesWithLyricWords = [];\n        // this.staffLinesWithGraphicalExpressions = [];\n\n        this.graphicalMusicSheet.Initialize();\n        const measureList: GraphicalMeasure[][] = this.graphicalMusicSheet.MeasureList;\n\n        // one AccidentalCalculator for each Staff (regardless of Instrument)\n        const accidentalCalculators: AccidentalCalculator[] = this.createAccidentalCalculators();\n\n        // List of Active ClefInstructions\n        const activeClefs: ClefInstruction[] = this.graphicalMusicSheet.initializeActiveClefs();\n\n        // LyricWord - GraphicalLyricWord Lists\n        const lyricWords: LyricWord[] = [];\n\n        const completeNumberOfStaves: number = musicSheet.getCompleteNumberOfStaves();\n\n        // Octave Shifts List\n        const openOctaveShifts: OctaveShiftParams[] = [];\n\n        // TieList - timestampsArray\n        for (let i: number = 0; i < completeNumberOfStaves; i++) {\n            openOctaveShifts.push(undefined);\n        }\n\n        // go through all SourceMeasures (taking into account normal SourceMusicParts and Repetitions)\n        for (let idx: number = 0, len: number = musicSheet.SourceMeasures.length; idx < len; ++idx) {\n            const sourceMeasure: SourceMeasure = musicSheet.SourceMeasures[idx];\n            const graphicalMeasures: GraphicalMeasure[] = this.createGraphicalMeasuresForSourceMeasure(\n                sourceMeasure,\n                accidentalCalculators,\n                lyricWords,\n                openOctaveShifts,\n                activeClefs\n            );\n            measureList.push(graphicalMeasures);\n            if (sourceMeasure.multipleRestMeasures > 0 && this.rules.RenderMultipleRestMeasures) {\n                // multiRest given in XML, skip the next measures included\n                sourceMeasure.isReducedToMultiRest = true;\n                sourceMeasure.multipleRestMeasureNumber = 1;\n                const measuresToSkip: number = sourceMeasure.multipleRestMeasures - 1;\n                // console.log(`skipping ${measuresToSkip} measures for measure #${sourceMeasure.MeasureNumber}.`);\n                idx += measuresToSkip;\n                for (let idx2: number = 1; idx2 <= measuresToSkip; idx2++) {\n                    const nextSourceMeasure: SourceMeasure = musicSheet.SourceMeasures[sourceMeasure.MeasureNumber - 1 + idx2];\n                    // TODO handle the case that a measure after the first multiple rest measure can't be reduced\n                    nextSourceMeasure.multipleRestMeasureNumber = idx2 + 1;\n                    nextSourceMeasure.isReducedToMultiRest = true;\n                    measureList.push([undefined]);\n                    // TODO we could push an object here or push nothing entirely,\n                    //   but then the index doesn't correspond to measure numbers anymore.\n                }\n            }\n        }\n\n        if (this.rules.AutoGenerateMutipleRestMeasuresFromRestMeasures && this.rules.RenderMultipleRestMeasures) {\n            //track number of multirests\n            let beginMultiRestMeasure: SourceMeasure = undefined;\n            let multiRestCount: number = 0;\n            //go through all source measures again. Need to calc auto-multi-rests\n            for (let idx: number = 0, len: number = musicSheet.SourceMeasures.length; idx < len; ++idx) {\n                const sourceMeasure: SourceMeasure = musicSheet.SourceMeasures[idx];\n                // console.log(sourceMeasure.MeasureNumber + \" can be reduced: \" + sourceMeasure.canBeReducedToMultiRest());\n                if (!sourceMeasure.isReducedToMultiRest && sourceMeasure.canBeReducedToMultiRest()) {\n                    //we've already been initialized, we are in the midst of a multirest sequence\n                    if (multiRestCount > 0) {\n                        beginMultiRestMeasure.isReducedToMultiRest = true;\n                        beginMultiRestMeasure.multipleRestMeasureNumber = 1;\n                        multiRestCount++;\n                        sourceMeasure.multipleRestMeasureNumber = multiRestCount;\n                        sourceMeasure.isReducedToMultiRest = true;\n                        //clear out these measures. We know now that we are in multirest mode\n                        for (let idx2: number = 0; idx2 < measureList[idx].length; idx2++) {\n                            measureList[idx][idx2] = undefined;\n                        }\n                    } else { //else this is the (potential) beginning\n                        beginMultiRestMeasure = sourceMeasure;\n                        multiRestCount = 1;\n                    }\n                } else { //not multirest measure\n                    if (multiRestCount > 1) { //Actual multirest sequence just happened. Process\n                        beginMultiRestMeasure.multipleRestMeasures = multiRestCount;\n                        //regen graphical measures for this source measure\n                        const graphicalMeasures: GraphicalMeasure[] = this.createGraphicalMeasuresForSourceMeasure(\n                            beginMultiRestMeasure,\n                            accidentalCalculators,\n                            lyricWords,\n                            openOctaveShifts,\n                            activeClefs\n                        );\n                        measureList[beginMultiRestMeasure.measureListIndex] = graphicalMeasures;\n                        multiRestCount = 0;\n                        beginMultiRestMeasure = undefined;\n                    } else { //had a potential multirest sequence, but didn't pan out. only one measure was rests\n                        multiRestCount = 0;\n                        beginMultiRestMeasure = undefined;\n                    }\n                }\n            }\n            //If we reached the end of the sheet and have pending multirest measure, process\n            if (multiRestCount > 1) {\n                beginMultiRestMeasure.multipleRestMeasures = multiRestCount;\n                beginMultiRestMeasure.isReducedToMultiRest = true;\n                //regen graphical measures for this source measure\n                const graphicalMeasures: GraphicalMeasure[] = this.createGraphicalMeasuresForSourceMeasure(\n                    beginMultiRestMeasure,\n                    accidentalCalculators,\n                    lyricWords,\n                    openOctaveShifts,\n                    activeClefs\n                );\n                measureList[beginMultiRestMeasure.measureListIndex] = graphicalMeasures;\n                multiRestCount = 0;\n                beginMultiRestMeasure = undefined;\n            }\n        }\n\n        const staffIsPercussionArray: Array<boolean> =\n                        activeClefs.map(clef => (clef.ClefType === ClefEnum.percussion));\n\n        this.handleStaffEntries(staffIsPercussionArray);\n        this.calculateVerticalContainersList();\n        this.setIndicesToVerticalGraphicalContainers();\n    }\n\n    /**\n     * The main method for the Calculator.\n     */\n    public calculate(): void {\n        this.musicSystems = [];\n\n        this.clearSystemsAndMeasures();\n\n        // delete graphicalObjects (currently: ties) that will be recalculated, newly create GraphicalObjects streching over a single StaffEntry\n        this.clearRecreatedObjects();\n\n        // this.graphicalMusicSheet.initializeActiveClefs(); // could have been changed since last render?\n\n        this.createGraphicalTies();\n\n        // calculate SheetLabelBoundingBoxes\n        this.calculateSheetLabelBoundingBoxes();\n        this.calculateXLayout(this.graphicalMusicSheet, this.maxInstrNameLabelLength());\n\n        // create List<MusicPage>\n        this.graphicalMusicSheet.MusicPages.length = 0;\n\n        // create new MusicSystems and StaffLines (as many as necessary) and populate them with Measures from measureList\n        this.calculateMusicSystems();\n\n        // Add some white space at the end of the piece:\n        //this.graphicalMusicSheet.MusicPages[0].PositionAndShape.BorderMarginBottom += 9;\n\n        // transform Relative to Absolute Positions\n        GraphicalMusicSheet.transformRelativeToAbsolutePosition(this.graphicalMusicSheet);\n    }\n\n    public calculateXLayout(graphicalMusicSheet: GraphicalMusicSheet, maxInstrNameLabelLength: number): void {\n        // for each inner List in big Measure List calculate new Positions for the StaffEntries\n        // and adjust Measures sizes\n        // calculate max measure length for maximum zoom in.\n\n        // let minLength: number = 0; // currently unused\n        // const maxInstructionsLength: number = this.rules.MaxInstructionsConstValue;\n        if (this.graphicalMusicSheet.MeasureList.length > 0) {\n            /** list of vertically ordered measures belonging to one bar */\n            let measures: GraphicalMeasure[] = this.graphicalMusicSheet.MeasureList[0];\n            let minimumStaffEntriesWidth: number = this.calculateMeasureXLayout(measures);\n            minimumStaffEntriesWidth = this.calculateMeasureWidthFromStaffEntries(measures, minimumStaffEntriesWidth);\n            MusicSheetCalculator.setMeasuresMinStaffEntriesWidth(measures, minimumStaffEntriesWidth);\n            // minLength = minimumStaffEntriesWidth * 1.2 + maxInstrNameLabelLength + maxInstructionsLength;\n            for (let i: number = 1; i < this.graphicalMusicSheet.MeasureList.length; i++) {\n                measures = this.graphicalMusicSheet.MeasureList[i];\n                minimumStaffEntriesWidth = this.calculateMeasureXLayout(measures);\n                minimumStaffEntriesWidth = this.calculateMeasureWidthFromStaffEntries(measures, minimumStaffEntriesWidth);\n                MusicSheetCalculator.setMeasuresMinStaffEntriesWidth(measures, minimumStaffEntriesWidth);\n                // minLength = Math.max(minLength, minimumStaffEntriesWidth * 1.2 + maxInstructionsLength);\n            }\n        }\n        // this.graphicalMusicSheet.MinAllowedSystemWidth = minLength; // currently unused\n    }\n\n    public calculateMeasureWidthFromStaffEntries(measuresVertical: GraphicalMeasure[], oldMinimumStaffEntriesWidth: number): number {\n        throw new Error(this.abstractNotImplementedErrorMessage);\n    }\n\n    protected formatMeasures(): void {\n        throw new Error(this.abstractNotImplementedErrorMessage);\n    }\n\n    /**\n     * Calculates the x layout of the staff entries within the staff measures belonging to one source measure.\n     * All staff entries are x-aligned throughout all the measures.\n     * @param measures - The minimum required x width of the source measure\n     */\n    protected calculateMeasureXLayout(measures: GraphicalMeasure[]): number {\n        throw new Error(this.abstractNotImplementedErrorMessage);\n    }\n\n    /**\n     * Called for every source measure when generating the list of staff measures for it.\n     */\n    protected initGraphicalMeasuresCreation(): void {\n        throw new Error(this.abstractNotImplementedErrorMessage);\n    }\n\n    protected handleBeam(graphicalNote: GraphicalNote, beam: Beam, openBeams: Beam[]): void {\n        throw new Error(this.abstractNotImplementedErrorMessage);\n    }\n\n    /**\n     * Check if the tied graphical note belongs to any beams or tuplets and react accordingly.\n     * @param tiedGraphicalNote\n     * @param beams\n     * @param activeClef\n     * @param octaveShiftValue\n     * @param graphicalStaffEntry\n     * @param duration\n     * @param openTie\n     * @param isLastTieNote\n     */\n    protected handleTiedGraphicalNote(tiedGraphicalNote: GraphicalNote, beams: Beam[], activeClef: ClefInstruction,\n                                      octaveShiftValue: OctaveEnum, graphicalStaffEntry: GraphicalStaffEntry, duration: Fraction,\n                                      openTie: Tie, isLastTieNote: boolean): void {\n        throw new Error(this.abstractNotImplementedErrorMessage);\n    }\n\n    protected handleVoiceEntryLyrics(voiceEntry: VoiceEntry, graphicalStaffEntry: GraphicalStaffEntry,\n                                     openLyricWords: LyricWord[]): void {\n        throw new Error(this.abstractNotImplementedErrorMessage);\n    }\n\n    protected handleVoiceEntryOrnaments(ornamentContainer: OrnamentContainer, voiceEntry: VoiceEntry,\n                                        graphicalStaffEntry: GraphicalStaffEntry): void {\n        throw new Error(this.abstractNotImplementedErrorMessage);\n    }\n\n    protected handleVoiceEntryArticulations(articulations: Articulation[],\n                                            voiceEntry: VoiceEntry,\n                                            staffEntry: GraphicalStaffEntry): void {\n        throw new Error(this.abstractNotImplementedErrorMessage);\n    }\n\n    /**\n     * Adds a technical instruction at the given staff entry.\n     * @param technicalInstructions\n     * @param voiceEntry\n     * @param staffEntry\n     */\n    protected handleVoiceEntryTechnicalInstructions(technicalInstructions: TechnicalInstruction[],\n                                                    voiceEntry: VoiceEntry, staffEntry: GraphicalStaffEntry): void {\n        throw new Error(this.abstractNotImplementedErrorMessage);\n    }\n\n\n    protected handleTuplet(graphicalNote: GraphicalNote, tuplet: Tuplet, openTuplets: Tuplet[]): void {\n        throw new Error(this.abstractNotImplementedErrorMessage);\n    }\n\n    protected layoutVoiceEntry(voiceEntry: VoiceEntry, graphicalNotes: GraphicalNote[],\n                               graphicalStaffEntry: GraphicalStaffEntry, hasPitchedNote: boolean): void {\n        throw new Error(this.abstractNotImplementedErrorMessage);\n    }\n\n    protected layoutStaffEntry(graphicalStaffEntry: GraphicalStaffEntry): void {\n        throw new Error(this.abstractNotImplementedErrorMessage);\n    }\n\n    protected createGraphicalTie(tie: Tie, startGse: GraphicalStaffEntry, endGse: GraphicalStaffEntry, startNote: GraphicalNote,\n                                 endNote: GraphicalNote): GraphicalTie {\n        throw new Error(this.abstractNotImplementedErrorMessage);\n    }\n\n    protected updateStaffLineBorders(staffLine: StaffLine): void {\n        throw new Error(this.abstractNotImplementedErrorMessage);\n    }\n\n    /**\n     * Iterate through all Measures and calculates the MeasureNumberLabels.\n     * @param musicSystem\n     */\n    protected calculateMeasureNumberPlacement(musicSystem: MusicSystem): void {\n        const staffLine: StaffLine = musicSystem.StaffLines[0];\n        if (!staffLine || !staffLine.Measures[0]) {\n            log.warn(\"calculateMeasureNumberPlacement: measure undefined for system.Id \" + musicSystem.Id);\n            return; // TODO apparently happens in script sometimes (mp #70)\n        }\n        let previousMeasureNumber: number = staffLine.Measures[0].MeasureNumber;\n        let labelOffsetX: number = 0;\n        for (let i: number = 0; i < staffLine.Measures.length; i++) {\n            if (this.rules.RenderMeasureNumbersOnlyAtSystemStart && i > 0) {\n                return; // no more measures number labels need to be rendered for this system, so we can just return instead of continue.\n            }\n            const measure: GraphicalMeasure = staffLine.Measures[i];\n            if (measure.MeasureNumber === 0 || measure.MeasureNumber === 1) {\n                previousMeasureNumber = measure.MeasureNumber;\n                // for the first measure, this label still needs to be created. Afterwards, this variable will hold the previous label's measure number.\n            }\n            if (measure !== staffLine.Measures[0] && this.rules.MeasureNumberLabelXOffset) {\n                labelOffsetX = this.rules.MeasureNumberLabelXOffset;\n            } else {\n                labelOffsetX = 0; // don't offset label for first measure in staffline\n            }\n\n            const isFirstMeasureAndNotPrintedOne: boolean = this.rules.UseXMLMeasureNumbers &&\n                measure.MeasureNumber === 1 && measure.parentSourceMeasure.getPrintedMeasureNumber() !== 1;\n            if ((measure.MeasureNumber === previousMeasureNumber ||\n                measure.MeasureNumber >= previousMeasureNumber + this.rules.MeasureNumberLabelOffset) &&\n                !measure.parentSourceMeasure.ImplicitMeasure ||\n                isFirstMeasureAndNotPrintedOne) {\n                if (measure.MeasureNumber !== 1 ||\n                    (measure.MeasureNumber === 1 && measure !== staffLine.Measures[0]) ||\n                    isFirstMeasureAndNotPrintedOne\n                    ) {\n                    this.calculateSingleMeasureNumberPlacement(measure, staffLine, musicSystem, labelOffsetX);\n                }\n                previousMeasureNumber = measure.MeasureNumber;\n            }\n        }\n    }\n\n    /// <summary>\n    /// This method calculates a single MeasureNumberLabel and adds it to the graphical label list of the music system\n    /// </summary>\n    /// <param name=\"measure\"></param>\n    /// <param name=\"staffLine\"></param>\n    /// <param name=\"musicSystem\"></param>\n    private calculateSingleMeasureNumberPlacement(measure: GraphicalMeasure, staffLine: StaffLine, musicSystem: MusicSystem,\n                                                  labelOffsetX: number = 0): void {\n        const labelNumber: string = measure.parentSourceMeasure.getPrintedMeasureNumber().toString();\n        const label: Label = new Label(labelNumber);\n        // maybe give rules as argument instead of just setting fontStyle and maybe other settings manually afterwards\n        const graphicalLabel: GraphicalLabel = new GraphicalLabel(label, this.rules.MeasureNumberLabelHeight,\n                                                                  TextAlignmentEnum.LeftBottom, this.rules);\n\n        const skyBottomLineCalculator: SkyBottomLineCalculator = staffLine.SkyBottomLineCalculator;\n\n        // calculate LabelBoundingBox and set PSI parent\n        graphicalLabel.setLabelPositionAndShapeBorders();\n        graphicalLabel.PositionAndShape.Parent = musicSystem.PositionAndShape;\n\n        // calculate relative Position\n        const relativeX: number = staffLine.PositionAndShape.RelativePosition.x +\n            measure.PositionAndShape.RelativePosition.x - graphicalLabel.PositionAndShape.BorderMarginLeft +\n            labelOffsetX;\n        let relativeY: number;\n\n        // and the corresponding SkyLine indices\n        let start: number = relativeX;\n        let end: number = relativeX - graphicalLabel.PositionAndShape.BorderLeft + graphicalLabel.PositionAndShape.BorderRight;\n\n        start -= staffLine.PositionAndShape.RelativePosition.x;\n        end -= staffLine.PositionAndShape.RelativePosition.x;\n\n        // correct for hypersensitive collision checks, notes having skyline extend too far to left and right\n        const startCollisionCheck: number = start + 0.5;\n        const endCollisionCheck: number = end - 0.5;\n\n        // get the minimum corresponding SkyLine value\n        const skyLineMinValue: number = skyBottomLineCalculator.getSkyLineMinInRange(startCollisionCheck, endCollisionCheck);\n\n        if (measure === staffLine.Measures[0]) {\n            // must take into account possible MusicSystem Brackets\n            let minBracketTopBorder: number = 0;\n            if (musicSystem.GroupBrackets.length > 0) {\n                for (const groupBracket of musicSystem.GroupBrackets) {\n                    minBracketTopBorder = Math.min(minBracketTopBorder, groupBracket.PositionAndShape.BorderTop);\n                }\n            }\n            relativeY = Math.min(skyLineMinValue, minBracketTopBorder);\n        } else {\n            relativeY = skyLineMinValue;\n        }\n\n        relativeY = Math.min(0, relativeY);\n\n        graphicalLabel.PositionAndShape.RelativePosition = new PointF2D(relativeX, relativeY);\n        musicSystem.MeasureNumberLabels.push(graphicalLabel);\n    }\n    //So we can apply slurs first, then do these\n    private calculateMeasureNumberSkyline(musicSystem: MusicSystem): void {\n        const staffLine: StaffLine = musicSystem.StaffLines[0];\n        for(const measureNumberLabel of musicSystem.MeasureNumberLabels) {\n            // and the corresponding SkyLine indices\n            let start: number = measureNumberLabel.PositionAndShape.RelativePosition.x;\n            let end: number = start - measureNumberLabel.PositionAndShape.BorderLeft + measureNumberLabel.PositionAndShape.BorderRight;\n            start -= staffLine.PositionAndShape.RelativePosition.x;\n            end -= staffLine.PositionAndShape.RelativePosition.x;\n            staffLine.SkyBottomLineCalculator.updateSkyLineInRange(start, end,\n                measureNumberLabel.PositionAndShape.RelativePosition.y + measureNumberLabel.PositionAndShape.BorderMarginTop);\n        }\n    }\n\n    /**\n     * Calculate the shape (Bézier curve) for this tie.\n     * @param tie\n     * @param tieIsAtSystemBreak\n     */\n    protected layoutGraphicalTie(tie: GraphicalTie, tieIsAtSystemBreak: boolean, isTab: boolean): void {\n        throw new Error(this.abstractNotImplementedErrorMessage);\n    }\n\n    /**\n     * Calculate the Lyrics YPositions for a single [[StaffLine]].\n     * @param staffLine\n     * @param lyricVersesNumber\n     */\n    protected calculateSingleStaffLineLyricsPosition(staffLine: StaffLine, lyricVersesNumber: number[]): GraphicalStaffEntry[] {\n        let numberOfVerses: number = 0;\n        let lyricsStartYPosition: number = this.rules.StaffHeight; // Add offset to prevent collision\n        const lyricsStaffEntriesList: GraphicalStaffEntry[] = [];\n        const skyBottomLineCalculator: SkyBottomLineCalculator = staffLine.SkyBottomLineCalculator;\n\n        // first find maximum Ycoordinate for the whole StaffLine\n        let len: number = staffLine.Measures.length;\n        for (let idx: number = 0; idx < len; ++idx) {\n            const measure: GraphicalMeasure = staffLine.Measures[idx];\n            const measureRelativePosition: PointF2D = measure.PositionAndShape.RelativePosition;\n            const len2: number = measure.staffEntries.length;\n            for (let idx2: number = 0; idx2 < len2; ++idx2) {\n                const staffEntry: GraphicalStaffEntry = measure.staffEntries[idx2];\n                if (staffEntry.LyricsEntries.length > 0) {\n                    lyricsStaffEntriesList.push(staffEntry);\n                    numberOfVerses = Math.max(numberOfVerses, staffEntry.LyricsEntries.length);\n\n                    // Position of Staffentry relative to StaffLine\n                    const staffEntryPositionX: number = staffEntry.PositionAndShape.RelativePosition.x +\n                        measureRelativePosition.x;\n\n                    let minMarginLeft: number = Number.MAX_VALUE;\n                    let maxMarginRight: number = Number.MIN_VALUE;\n\n                    // if more than one LyricEntry in StaffEntry, find minMarginLeft, maxMarginRight of all corresponding Labels\n                    for (let i: number = 0; i < staffEntry.LyricsEntries.length; i++) {\n                        const lyricsEntryLabel: GraphicalLabel = staffEntry.LyricsEntries[i].GraphicalLabel;\n                        minMarginLeft = Math.min(minMarginLeft, staffEntryPositionX + lyricsEntryLabel.PositionAndShape.BorderMarginLeft);\n                        maxMarginRight = Math.max(maxMarginRight, staffEntryPositionX + lyricsEntryLabel.PositionAndShape.BorderMarginRight);\n                    }\n\n                    // check BottomLine in this range and take the maximum between the two values\n                    const bottomLineMax: number = skyBottomLineCalculator.getBottomLineMaxInRange(minMarginLeft, maxMarginRight);\n                    lyricsStartYPosition = Math.max(lyricsStartYPosition, bottomLineMax);\n                }\n            }\n        }\n\n        let maxPosition: number = 0;\n        // iterate again through the Staffentries with LyricEntries\n        len = lyricsStaffEntriesList.length;\n        for (const staffEntry of lyricsStaffEntriesList) {\n            // set LyricEntryLabel RelativePosition\n            for (let i: number = 0; i < staffEntry.LyricsEntries.length; i++) {\n                const lyricEntry: GraphicalLyricEntry = staffEntry.LyricsEntries[i];\n                const lyricsEntryLabel: GraphicalLabel = lyricEntry.GraphicalLabel;\n\n                // read the verseNumber and get index of this number in the sorted LyricVerseNumbersList of Instrument\n                // eg verseNumbers: 2,3,4,6 => 1,2,3,4\n                const verseNumber: number = lyricEntry.LyricsEntry.VerseNumber;\n                const sortedLyricVerseNumberIndex: number = lyricVersesNumber.indexOf(verseNumber);\n                const firstPosition: number = lyricsStartYPosition + this.rules.LyricsHeight + this.rules.VerticalBetweenLyricsDistance +\n                    this.rules.LyricsYOffsetToStaffHeight;\n\n                // Y-position calculated according to aforementioned mapping\n                let position: number = firstPosition + (this.rules.VerticalBetweenLyricsDistance + this.rules.LyricsHeight) * sortedLyricVerseNumberIndex;\n                if (this.leadSheet) {\n                    position = 3.4 + (this.rules.VerticalBetweenLyricsDistance + this.rules.LyricsHeight) * (sortedLyricVerseNumberIndex);\n                }\n                const previousRelativeX: number = lyricsEntryLabel.PositionAndShape.RelativePosition.x;\n                lyricsEntryLabel.PositionAndShape.RelativePosition = new PointF2D(previousRelativeX, position);\n                maxPosition = Math.max(maxPosition, position);\n            }\n        }\n\n        // update BottomLine (on the whole StaffLine's length)\n        if (lyricsStaffEntriesList.length > 0) {\n            const endX: number = staffLine.PositionAndShape.Size.width;\n            let startX: number = lyricsStaffEntriesList[0].PositionAndShape.RelativePosition.x +\n                lyricsStaffEntriesList[0].PositionAndShape.BorderMarginLeft +\n                lyricsStaffEntriesList[0].parentMeasure.PositionAndShape.RelativePosition.x;\n            startX = startX > endX ? endX : startX;\n            skyBottomLineCalculator.updateBottomLineInRange(startX, endX, maxPosition);\n        }\n        return lyricsStaffEntriesList;\n    }\n\n    /**\n     * calculates the dashes of lyric words and the extending underscore lines of syllables sung on more than one note.\n     * @param lyricsStaffEntries\n     */\n    protected calculateLyricsExtendsAndDashes(lyricsStaffEntries: GraphicalStaffEntry[]): void {\n        // iterate again to create now the extend lines and dashes for words\n        for (let idx: number = 0, len: number = lyricsStaffEntries.length; idx < len; ++idx) {\n            const staffEntry: GraphicalStaffEntry = lyricsStaffEntries[idx];\n            // set LyricEntryLabel RelativePosition\n            for (let i: number = 0; i < staffEntry.LyricsEntries.length; i++) {\n                const lyricEntry: GraphicalLyricEntry = staffEntry.LyricsEntries[i];\n                // calculate LyricWord's Dashes and underscoreLine\n                if (lyricEntry.ParentLyricWord &&\n                    lyricEntry.ParentLyricWord.GraphicalLyricsEntries[lyricEntry.ParentLyricWord.GraphicalLyricsEntries.length - 1] !== lyricEntry) {\n                    this.calculateSingleLyricWord(lyricEntry);\n                }\n                // calculate the underscore line extend if needed\n                if (lyricEntry.LyricsEntry.extend) {\n                    this.calculateLyricExtend(lyricEntry);\n                }\n            }\n        }\n    }\n\n    /**\n     * Calculate a single OctaveShift for a [[MultiExpression]].\n     * @param sourceMeasure\n     * @param multiExpression\n     * @param measureIndex\n     * @param staffIndex\n     */\n    protected calculateSingleOctaveShift(sourceMeasure: SourceMeasure, multiExpression: MultiExpression,\n                                         measureIndex: number, staffIndex: number): void {\n        throw new Error(this.abstractNotImplementedErrorMessage);\n    }\n\n    /**\n     * Calculate all the textual [[RepetitionInstruction]]s (e.g. dal segno) for a single [[SourceMeasure]].\n     * @param repetitionInstruction\n     * @param measureIndex\n     */\n    protected calculateWordRepetitionInstruction(repetitionInstruction: RepetitionInstruction,\n                                                 measureIndex: number): void {\n        throw new Error(this.abstractNotImplementedErrorMessage);\n    }\n\n    /**\n     * Calculate all the Mood and Unknown Expressions for a single [[MultiExpression]].\n     * @param multiExpression\n     * @param measureIndex\n     * @param staffIndex\n     */\n    protected calculateMoodAndUnknownExpression(multiExpression: MultiExpression, measureIndex: number, staffIndex: number): void {\n        // calculate absolute Timestamp\n        const absoluteTimestamp: Fraction = multiExpression.AbsoluteTimestamp;\n        const measures: GraphicalMeasure[] = this.graphicalMusicSheet.MeasureList[measureIndex];\n        let relative: PointF2D = new PointF2D();\n\n        if ((multiExpression.MoodList.length > 0) || (multiExpression.UnknownList.length > 0)) {\n        let combinedExprString: string  = \"\";\n        for (let idx: number = 0, len: number = multiExpression.EntriesList.length; idx < len; ++idx) {\n            const entry: MultiExpressionEntry = multiExpression.EntriesList[idx];\n            if (entry.prefix !== \"\") {\n                if (combinedExprString === \"\") {\n                    combinedExprString += entry.prefix;\n                } else {\n                    combinedExprString += \" \" + entry.prefix;\n                }\n            }\n            if (combinedExprString === \"\") {\n                combinedExprString += entry.label;\n            } else {\n                combinedExprString += \" \" + entry.label;\n            }\n        }\n        const staffLine: StaffLine = measures[staffIndex].ParentStaffLine;\n        if (!staffLine) {\n            log.debug(\"MusicSheetCalculator.calculateMoodAndUnknownExpression: staffLine undefined. Returning.\");\n            return;\n        }\n        relative = this.getRelativePositionInStaffLineFromTimestamp(absoluteTimestamp, staffIndex, staffLine, staffLine?.isPartOfMultiStaffInstrument());\n\n        if (Math.abs(relative.x - 0) < 0.0001) {\n            relative.x = measures[staffIndex].beginInstructionsWidth + this.rules.RhythmRightMargin;\n        }\n\n        const fontHeight: number = this.rules.UnknownTextHeight;\n        const placement: PlacementEnum = multiExpression.getPlacementOfFirstEntry();\n        const graphLabel: GraphicalLabel  = this.calculateLabel(staffLine,\n                                                                relative, combinedExprString,\n                                                                multiExpression.getFontstyleOfFirstEntry(),\n                                                                placement,\n                                                                fontHeight);\n\n        const gue: GraphicalUnknownExpression = new GraphicalUnknownExpression(\n            staffLine, graphLabel, placement, measures[staffIndex]?.parentSourceMeasure, multiExpression);\n        //    multiExpression); // TODO would be nice to hand over and save reference to original expression,\n        //                         but MultiExpression is not an AbstractExpression.\n        staffLine.AbstractExpressions.push(gue);\n        }\n    }\n\n    /**\n     * Delete all Objects that must be recalculated.\n     * If graphicalMusicSheet.reCalculate has been called, then this method will be called to reset or remove all flexible\n     * graphical music symbols (e.g. Ornaments, Lyrics, Slurs) graphicalMusicSheet will have MusicPages, they will have MusicSystems etc...\n     */\n    protected clearRecreatedObjects(): void {\n        // Clear StaffEntries with GraphicalTies\n        for (let idx: number = 0, len: number = this.staffEntriesWithGraphicalTies.length; idx < len; ++idx) {\n            const staffEntriesWithGraphicalTie: GraphicalStaffEntry = this.staffEntriesWithGraphicalTies[idx];\n            staffEntriesWithGraphicalTie.GraphicalTies.length = 0;\n        }\n        this.staffEntriesWithGraphicalTies.length = 0;\n        return;\n    }\n\n    /**\n     * This method handles a [[StaffEntryLink]].\n     * @param graphicalStaffEntry\n     * @param staffEntryLinks\n     */\n    protected handleStaffEntryLink(graphicalStaffEntry: GraphicalStaffEntry,\n                                   staffEntryLinks: StaffEntryLink[]): void {\n        log.debug(\"handleStaffEntryLink not implemented\");\n    }\n\n    /**\n     * Store the newly computed [[Measure]]s in newly created [[MusicSystem]]s.\n     */\n    protected calculateMusicSystems(): void {\n        if (!this.graphicalMusicSheet.MeasureList) {\n            return;\n        }\n\n        const allMeasures: GraphicalMeasure[][] = this.graphicalMusicSheet.MeasureList;\n        if (!allMeasures) {\n            return;\n        }\n        if (this.rules.MinMeasureToDrawIndex > allMeasures.length - 1) {\n            log.debug(\"minimum measure to draw index out of range. resetting min measure index to limit.\");\n            this.rules.MinMeasureToDrawIndex = allMeasures.length - 1;\n        }\n\n        // visible 2D-MeasureList\n        const visibleMeasureList: GraphicalMeasure[][] = [];\n        for (let idx: number = this.rules.MinMeasureToDrawIndex, len: number = allMeasures.length;\n            idx < len && idx <= this.rules.MaxMeasureToDrawIndex; ++idx) {\n            const graphicalMeasures: GraphicalMeasure[] = allMeasures[idx];\n            const visiblegraphicalMeasures: GraphicalMeasure[] = [];\n            for (let idx2: number = 0, len2: number = graphicalMeasures.length; idx2 < len2; ++idx2) {\n                const graphicalMeasure: GraphicalMeasure = allMeasures[idx][idx2];\n\n                if (graphicalMeasure?.isVisible()) {\n                    visiblegraphicalMeasures.push(graphicalMeasure);\n\n                    if (this.rules.ColoringEnabled) {\n                        // (re-)color notes\n                        for (const staffEntry of graphicalMeasure.staffEntries) {\n                            for (const gve of staffEntry.graphicalVoiceEntries) {\n                                gve.color();\n                            }\n                        }\n                    }\n                }\n            }\n            visibleMeasureList.push(visiblegraphicalMeasures);\n        }\n\n        // find out how many StaffLine Instances we need\n        let numberOfStaffLines: number = 0;\n\n        for (let idx: number = 0, len: number = visibleMeasureList.length; idx < len; ++idx) {\n            const gmlist: GraphicalMeasure[] = visibleMeasureList[idx];\n            numberOfStaffLines = Math.max(gmlist.length, numberOfStaffLines);\n\n            break;\n        }\n        if (numberOfStaffLines === 0) {\n            return;\n        }\n\n\n        // build the MusicSystems\n        const musicSystemBuilder: MusicSystemBuilder = new MusicSystemBuilder();\n        musicSystemBuilder.initialize(this.graphicalMusicSheet, visibleMeasureList, numberOfStaffLines);\n        this.musicSystems = musicSystemBuilder.buildMusicSystems();\n\n        this.formatMeasures();\n\n        // check for Measures with only WholeRestNotes and correct their X-Position (middle of Measure)\n        // this.checkMeasuresForWholeRestNotes(); // this currently does nothing\n        if (!this.leadSheet) {\n            // calculate Beam Placement\n            // this.calculateBeams(); // does nothing for now, because layoutBeams() is an empty method\n            // possible Displacement of RestNotes\n            this.optimizeRestPlacement();\n            // possible Displacement of RestNotes\n            this.calculateStaffEntryArticulationMarks();\n            if (this.rules.RenderSlurs) { // technically we should separate slurs and ties, but shouldn't be relevant for now\n                // calculate Ties\n                this.calculateTieCurves();\n            }\n        }\n        // calculate Sky- and BottomLine\n        // will have reasonable values only between ObjectsBorders (eg StaffEntries)\n        this.calculateSkyBottomLines();\n        // calculate TupletsNumbers\n        this.calculateTupletNumbers();\n\n        // calculate MeasureNumbers\n        if (this.rules.RenderMeasureNumbers) {\n            for (let idx: number = 0, len: number = this.musicSystems.length; idx < len; ++idx) {\n                const musicSystem: MusicSystem = this.musicSystems[idx];\n                this.calculateMeasureNumberPlacement(musicSystem);\n            }\n        }\n        this.calculateFingerings(); // if this is done after slurs, fingerings can be on top of slurs\n        // calculate Slurs\n        if (!this.leadSheet && this.rules.RenderSlurs) {\n            this.calculateSlurs();\n        }\n        //Calculate measure number skyline AFTER slurs\n        if (this.rules.RenderMeasureNumbers) {\n            for (let idx: number = 0, len: number = this.musicSystems.length; idx < len; ++idx) {\n                const musicSystem: MusicSystem = this.musicSystems[idx];\n                this.calculateMeasureNumberSkyline(musicSystem);\n            }\n        }\n        // calculate StaffEntry Ornaments\n        // (must come after Slurs)\n        if (!this.leadSheet) {\n            this.calculateOrnaments();\n        }\n        // calculate StaffEntry ChordSymbols\n        this.calculateChordSymbols();\n        if (!this.leadSheet) {\n            // calculate all Instantaneous/Continuous Dynamics Expressions\n            this.calculateDynamicExpressions();\n            // calculate all Mood and Unknown Expression\n            this.calculateMoodAndUnknownExpressions();\n            // Calculate the alignment of close expressions\n            this.calculateExpressionAlignements();\n            // calculate all OctaveShifts\n            this.calculateOctaveShifts();\n            // calcualte RepetitionInstructions (Dal Segno, Coda, etc)\n            this.calculateWordRepetitionInstructions();\n        }\n        // calculate endings last, so they appear above measure numbers\n        this.calculateRepetitionEndings();\n        // calcualte all Tempo Expressions\n        if (!this.leadSheet) {\n            this.calculateTempoExpressions();\n        }\n        this.calculateRehearsalMarks();\n\n        // calculate all LyricWords Positions\n        this.calculateLyricsPosition();\n\n        // update all StaffLine's Borders\n        // create temporary Object, just to call the methods (in order to avoid declaring them static)\n        for (let idx2: number = 0, len2: number = this.musicSystems.length; idx2 < len2; ++idx2) {\n            const musicSystem: MusicSystem = this.musicSystems[idx2];\n            for (let idx3: number = 0, len3: number = musicSystem.StaffLines.length; idx3 < len3; ++idx3) {\n                const staffLine: StaffLine = musicSystem.StaffLines[idx3];\n                this.updateStaffLineBorders(staffLine);\n            }\n        }\n\n        // calculate Y-spacing -> MusicPages are created here\n        musicSystemBuilder.calculateSystemYLayout();\n        // calculate Comments for each Staffline\n        this.calculateComments();\n        // calculate marked Areas for Systems\n        this.calculateMarkedAreas();\n\n        // the following must be done after Y-spacing, when the MusicSystems's final Dimensions are set\n        // set the final yPositions of Objects such as SystemLabels and SystemLinesContainers,\n        // create all System Lines, Brackets and MeasureNumbers (for all systems and for all pages)\n        for (let idx: number = 0, len: number = this.graphicalMusicSheet.MusicPages.length; idx < len; ++idx) {\n            const graphicalMusicPage: GraphicalMusicPage = this.graphicalMusicSheet.MusicPages[idx];\n            for (let idx2: number = 0, len2: number = graphicalMusicPage.MusicSystems.length; idx2 < len2; ++idx2) {\n                const isFirstSystem: boolean = idx === 0 && idx2 === 0;\n                const musicSystem: MusicSystem = graphicalMusicPage.MusicSystems[idx2];\n                musicSystem.setMusicSystemLabelsYPosition();\n                if (!this.leadSheet) {\n                    musicSystem.setYPositionsToVerticalLineObjectsAndCreateLines(this.rules);\n                    musicSystem.createSystemLeftLine(this.rules.SystemThinLineWidth, this.rules.SystemLabelsRightMargin, isFirstSystem);\n                    musicSystem.createInstrumentBrackets(this.graphicalMusicSheet.ParentMusicSheet.Instruments, this.rules.StaffHeight);\n                    musicSystem.createGroupBrackets(this.graphicalMusicSheet.ParentMusicSheet.InstrumentalGroups, this.rules.StaffHeight, 0);\n                    musicSystem.alignBeginInstructions();\n                } else if (musicSystem === musicSystem.Parent.MusicSystems[0]) {\n                    musicSystem.createSystemLeftLine(this.rules.SystemThinLineWidth, this.rules.SystemLabelsRightMargin, isFirstSystem);\n                }\n                musicSystem.calculateBorders(this.rules);\n            }\n            const distance: number = graphicalMusicPage.MusicSystems[0].PositionAndShape.BorderTop;\n            for (let idx2: number = 0, len2: number = graphicalMusicPage.MusicSystems.length; idx2 < len2; ++idx2) {\n                const musicSystem: MusicSystem = graphicalMusicPage.MusicSystems[idx2];\n                // let newPosition: PointF2D = new PointF2D(musicSystem.PositionAndShape.RelativePosition.x,\n                // musicSystem.PositionAndShape.RelativePosition.y - distance);\n                musicSystem.PositionAndShape.RelativePosition =\n                    new PointF2D(musicSystem.PositionAndShape.RelativePosition.x, musicSystem.PositionAndShape.RelativePosition.y - distance);\n            }\n            for (let idx2: number = 0, len2: number = graphicalMusicPage.MusicSystems.length; idx2 < len2; ++idx2) {\n                const musicSystem: MusicSystem = graphicalMusicPage.MusicSystems[idx2];\n                for (let idx3: number = 0, len3: number = musicSystem.StaffLines.length; idx3 < len3; ++idx3) {\n                    const staffLine: StaffLine = musicSystem.StaffLines[idx3];\n                    staffLine.addActivitySymbolClickArea();\n                }\n            }\n\n            // calculate TopBottom Borders for all elements recursively\n            //   necessary for composer label (page labels) for high notes in first system\n            graphicalMusicPage.PositionAndShape.calculateTopBottomBorders();\n            // TODO how much performance does this cost? can we reduce the amount of calculations, e.g. only checking top?\n\n            // calculate all Labels's Positions for the first Page\n            if (graphicalMusicPage === this.graphicalMusicSheet.MusicPages[0]) {\n                this.calculatePageLabels(graphicalMusicPage);\n            }\n\n            // calculate TopBottom Borders for all elements recursively\n            graphicalMusicPage.PositionAndShape.calculateTopBottomBorders(); // this is where top bottom borders were originally calculated (only once)\n        }\n    }\n\n    protected calculateMarkedAreas(): void {\n        //log.debug(\"calculateMarkedAreas not implemented\");\n        return;\n    }\n\n    protected calculateComments(): void {\n        //log.debug(\"calculateComments not implemented\");\n        return;\n    }\n\n    protected calculateChordSymbols(): void {\n        for (const musicSystem of this.musicSystems) {\n            for (const staffLine of musicSystem.StaffLines) {\n                const skybottomcalculator: SkyBottomLineCalculator = staffLine.SkyBottomLineCalculator;\n                let minimumOffset: number = Number.MAX_SAFE_INTEGER; // only calculated if option set\n                if (this.rules.ChordSymbolYAlignment && this.rules.ChordSymbolYAlignmentScope === \"staffline\") {\n                    // get the max y position of all chord symbols in the staffline in advance\n                    const alignmentScopedStaffEntries: GraphicalStaffEntry[] = [];\n                    for (const measure of staffLine.Measures) {\n                        alignmentScopedStaffEntries.push(...measure.staffEntries);\n                    }\n                    minimumOffset = this.calculateAlignedChordSymbolsOffset(alignmentScopedStaffEntries, skybottomcalculator);\n                }\n                for (const measure of staffLine.Measures) {\n                    if (this.rules.ChordSymbolYAlignment && this.rules.ChordSymbolYAlignmentScope === \"measure\") {\n                        minimumOffset = this.calculateAlignedChordSymbolsOffset(measure.staffEntries, skybottomcalculator);\n                    }\n                    for (const staffEntry of measure.staffEntries) {\n                        if (!staffEntry.graphicalChordContainers || staffEntry.graphicalChordContainers.length === 0) {\n                            continue;\n                        }\n                        for (let i: number = 0; i < staffEntry.graphicalChordContainers.length; i++) {\n                            const graphicalChordContainer: GraphicalChordSymbolContainer = staffEntry.graphicalChordContainers[i];\n                            const sps: BoundingBox = staffEntry.PositionAndShape;\n                            const gps: BoundingBox = graphicalChordContainer.PositionAndShape;\n                            const start: number = gps.BorderMarginLeft + sps.AbsolutePosition.x;\n                            const end: number = gps.BorderMarginRight + sps.AbsolutePosition.x;\n                            if (!this.rules.ChordSymbolYAlignment || minimumOffset > 0) {\n                                //minimumOffset = this.calculateAlignedChordSymbolsOffset([staffEntry], skybottomcalculator);\n                                minimumOffset = skybottomcalculator.getSkyLineMinInRange(start, end); // same as above, less code executed\n                            }\n                            let yShift: number = 0;\n                            if (i === 0) {\n                                yShift += this.rules.ChordSymbolYOffset;\n                                yShift += 0.1; // above is a bit closer to the notes than below ones for some reason\n                            } else {\n                                yShift += this.rules.ChordSymbolYPadding;\n                            }\n                            yShift *= -1;\n                            const gLabel: GraphicalLabel = graphicalChordContainer.GraphicalLabel;\n                            gLabel.PositionAndShape.RelativePosition.y = minimumOffset + yShift;\n                            gLabel.setLabelPositionAndShapeBorders();\n                            gLabel.PositionAndShape.calculateBoundingBox();\n                            skybottomcalculator.updateSkyLineInRange(start, end, minimumOffset + gLabel.PositionAndShape.BorderMarginTop);\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    protected calculateAlignedChordSymbolsOffset(staffEntries: GraphicalStaffEntry[], sbc: SkyBottomLineCalculator): number {\n        let minimumOffset: number = Number.MAX_SAFE_INTEGER;\n        for (const staffEntry of staffEntries) {\n            for (const graphicalChordContainer of staffEntry.graphicalChordContainers) {\n                const sps: BoundingBox = staffEntry.PositionAndShape;\n                const gps: BoundingBox = graphicalChordContainer.PositionAndShape;\n                const start: number = gps.BorderMarginLeft + sps.AbsolutePosition.x;\n                const end: number = gps.BorderMarginRight + sps.AbsolutePosition.x;\n                minimumOffset = Math.min(minimumOffset, sbc.getSkyLineMinInRange(start, end));\n            }\n        }\n        return minimumOffset;\n    }\n\n    /**\n     * Do layout on staff measures which only consist of a full rest.\n     * @param rest\n     * @param gse\n     * @param measure\n     */\n    protected layoutMeasureWithWholeRest(rest: GraphicalNote, gse: GraphicalStaffEntry,\n                                         measure: GraphicalMeasure): void {\n        return;\n    }\n\n    protected layoutBeams(staffEntry: GraphicalStaffEntry): void {\n        return;\n    }\n\n    protected layoutArticulationMarks(articulations: Articulation[], voiceEntry: VoiceEntry, graphicalStaffEntry: GraphicalStaffEntry): void {\n        return;\n    }\n\n    protected layoutOrnament(ornaments: OrnamentContainer, voiceEntry: VoiceEntry,\n                             graphicalStaffEntry: GraphicalStaffEntry): void {\n        return;\n    }\n\n    protected calculateRestNotePlacementWithinGraphicalBeam(graphicalStaffEntry: GraphicalStaffEntry,\n                                                            restNote: GraphicalNote,\n                                                            previousNote: GraphicalNote,\n                                                            nextStaffEntry: GraphicalStaffEntry,\n                                                            nextNote: GraphicalNote): void {\n        return;\n    }\n\n    protected calculateTupletNumbers(): void {\n        return;\n    }\n\n    protected calculateSlurs(): void {\n        return;\n    }\n\n    protected calculateDynamicExpressionsForMultiExpression(multiExpression: MultiExpression, measureIndex: number, staffIndex: number): void {\n        return;\n    }\n\n\n    /**\n     * This method calculates the RelativePosition of a single verbal GraphicalContinuousDynamic.\n     * @param graphicalContinuousDynamic Graphical continous dynamic to be calculated\n     * @param startPosInStaffline Starting point in staff line\n     */\n    protected calculateGraphicalVerbalContinuousDynamic(graphicalContinuousDynamic: GraphicalContinuousDynamicExpression,\n                                                        startPosInStaffline: PointF2D): void {\n        // if ContinuousDynamicExpression is given from words\n        const graphLabel: GraphicalLabel = graphicalContinuousDynamic.Label;\n        const left: number = startPosInStaffline.x + graphLabel.PositionAndShape.BorderMarginLeft;\n        const right: number = startPosInStaffline.x + graphLabel.PositionAndShape.BorderMarginRight;\n        // placement always below the currentStaffLine, with the exception of Voice Instrument (-> above)\n        const placement: PlacementEnum = graphicalContinuousDynamic.ContinuousDynamic.Placement;\n        const staffLine: StaffLine = graphicalContinuousDynamic.ParentStaffLine;\n        const skyBottomLineCalculator: SkyBottomLineCalculator = staffLine.SkyBottomLineCalculator;\n\n        let drawingHeight: number;\n        if (placement === PlacementEnum.Below) {\n            drawingHeight = skyBottomLineCalculator.getBottomLineMaxInRange(left, right);    // Bottom line\n            graphLabel.PositionAndShape.RelativePosition = new PointF2D(startPosInStaffline.x, drawingHeight - graphLabel.PositionAndShape.BorderMarginTop);\n        } else {\n            drawingHeight = skyBottomLineCalculator.getSkyLineMinInRange(left, right);\n            graphLabel.PositionAndShape.RelativePosition = new PointF2D(startPosInStaffline.x, drawingHeight - graphLabel.PositionAndShape.BorderMarginBottom);\n        }\n    }\n\n   /**\n    * This method calculates the RelativePosition of a single GraphicalContinuousDynamic.\n    * @param graphicalContinuousDynamic Graphical continous dynamic to be calculated\n    * @param startPosInStaffline Starting point in staff line\n    */\n    public calculateGraphicalContinuousDynamic(graphicalContinuousDynamic: GraphicalContinuousDynamicExpression, startPosInStaffline: PointF2D): void {\n        const staffIndex: number = graphicalContinuousDynamic.ParentStaffLine.ParentStaff.idInMusicSheet;\n        // TODO: Previously the staffIndex was passed down. BUT you can (and this function actually does this) get it from\n        // the musicSystem OR from the ParentStaffLine. Is this the same index?\n        // const staffIndex: number = musicSystem.StaffLines.indexOf(staffLine);\n\n        // We know we have an end measure because otherwise we won't be called\n        const endMeasure: GraphicalMeasure = this.graphicalMusicSheet.getGraphicalMeasureFromSourceMeasureAndIndex(\n            graphicalContinuousDynamic.ContinuousDynamic.EndMultiExpression.SourceMeasureParent, staffIndex);\n        if (!endMeasure) {\n            log.warn(\"MusicSheetCalculator.calculateGraphicalContinuousDynamic: No endMeasure found\");\n            return;\n        }\n\n        graphicalContinuousDynamic.EndMeasure = endMeasure;\n        const staffLine: StaffLine = graphicalContinuousDynamic.ParentStaffLine;\n        const endStaffLine: StaffLine = endMeasure.ParentStaffLine;\n\n        // check if Expression spreads over the same StaffLine or not\n        const sameStaffLine: boolean = endStaffLine && staffLine === endStaffLine;\n\n        let isPartOfMultiStaffInstrument: boolean = false;\n        if (endStaffLine) { // unfortunately we can't do something like (endStaffLine?.check() || staffLine?.check()) in this typescript version\n            isPartOfMultiStaffInstrument = endStaffLine?.isPartOfMultiStaffInstrument();\n        } else if (staffLine) {\n            isPartOfMultiStaffInstrument = staffLine?.isPartOfMultiStaffInstrument();\n        }\n\n        const endAbsoluteTimestamp: Fraction = Fraction.createFromFraction(graphicalContinuousDynamic.ContinuousDynamic.EndMultiExpression.AbsoluteTimestamp);\n        const container: VerticalGraphicalStaffEntryContainer = this.graphicalMusicSheet.GetVerticalContainerFromTimestamp(endAbsoluteTimestamp);\n        const parentMeasure: GraphicalMeasure = container.getFirstNonNullStaffEntry().parentMeasure;\n        const endOfMeasure: number = parentMeasure.PositionAndShape.AbsolutePosition.x + parentMeasure.PositionAndShape.BorderRight;\n        let maxNoteLength: Fraction = new Fraction(0, 0, 0);\n        for (const staffEntry of container.StaffEntries) {\n            const currentMaxLength: Fraction = staffEntry?.sourceStaffEntry?.calculateMaxNoteLength();\n            if ( currentMaxLength?.gt(maxNoteLength) ) {\n                maxNoteLength = currentMaxLength;\n            }\n        }\n        const endPosInStaffLine: PointF2D = this.getRelativePositionInStaffLineFromTimestamp(\n            endAbsoluteTimestamp, staffIndex, endStaffLine, isPartOfMultiStaffInstrument, 0);\n\n        const beginOfNextNote: Fraction = Fraction.plus(endAbsoluteTimestamp, maxNoteLength);\n        const nextNotePosInStaffLine: PointF2D = this.getRelativePositionInStaffLineFromTimestamp(\n            beginOfNextNote, staffIndex, endStaffLine, isPartOfMultiStaffInstrument, 0);\n        //If the next note position is not on the next staffline\n        //extend close to the next note\n        if (nextNotePosInStaffLine.x > endPosInStaffLine.x && nextNotePosInStaffLine.x < endOfMeasure) {\n            endPosInStaffLine.x += (nextNotePosInStaffLine.x - endPosInStaffLine.x) / this.rules.WedgeEndDistanceBetweenTimestampsFactor;\n        } else { //Otherwise extend to the end of the measure\n            endPosInStaffLine.x = endOfMeasure - this.rules.WedgeHorizontalMargin;\n        }\n\n        const startCollideBox: BoundingBox =\n            this.dynamicExpressionMap.get(graphicalContinuousDynamic.ContinuousDynamic.StartMultiExpression.AbsoluteTimestamp.RealValue);\n        if (startCollideBox) {\n            startPosInStaffline.x = startCollideBox.RelativePosition.x + startCollideBox.BorderMarginRight + this.rules.WedgeHorizontalMargin;\n        }\n        //currentMusicSystem and currentStaffLine\n        const musicSystem: MusicSystem = staffLine.ParentMusicSystem;\n        const currentStaffLineIndex: number = musicSystem.StaffLines.indexOf(staffLine);\n        const skyBottomLineCalculator: SkyBottomLineCalculator = staffLine.SkyBottomLineCalculator;\n        // let expressionIndex: number;\n\n        // placement always below the currentStaffLine, with the exception of Voice Instrument (-> above)\n        const placement: PlacementEnum = graphicalContinuousDynamic.ContinuousDynamic.Placement;\n\n        // if ContinuousDynamicExpression is given from wedge\n        let secondGraphicalContinuousDynamic: GraphicalContinuousDynamicExpression = undefined;\n\n        // last length check\n        if (sameStaffLine && endPosInStaffLine.x - startPosInStaffline.x < this.rules.WedgeMinLength) {\n            endPosInStaffLine.x = startPosInStaffline.x + this.rules.WedgeMinLength;\n        }\n\n        // Upper staff wedge always starts at the given position and the lower staff wedge always starts at the begin of measure\n        const upperStartX: number = startPosInStaffline.x;\n        const lowerStartX: number = endStaffLine.Measures[0].beginInstructionsWidth - this.rules.WedgeHorizontalMargin - 2;\n        //TODO fix this when a range of measures to draw is given that doesn't include all the dynamic's measures (e.g. for crescendo)\n        let upperEndX: number = 0;\n        let lowerEndX: number = 0;\n\n        if (!sameStaffLine) {\n            upperEndX = staffLine.PositionAndShape.Size.width;\n            lowerEndX = endPosInStaffLine.x;\n\n            // must create a new Wedge\n            secondGraphicalContinuousDynamic = new GraphicalContinuousDynamicExpression(\n                graphicalContinuousDynamic.ContinuousDynamic, endStaffLine, endMeasure.parentSourceMeasure);\n            secondGraphicalContinuousDynamic.IsSplittedPart = true;\n            graphicalContinuousDynamic.IsSplittedPart = true;\n        } else {\n            upperEndX = endPosInStaffLine.x;\n        }\n\n        // the Height of the Expression's placement\n        let idealY: number = 0;\n        let secondIdealY: number = 0;\n\n        if (placement === PlacementEnum.Below) {\n            // can be a single Staff Instrument or an Instrument with 2 Staves\n            let nextStaffLineIndex: number = 0;\n            if (currentStaffLineIndex < musicSystem.StaffLines.length - 1) {\n                nextStaffLineIndex = currentStaffLineIndex + 1;\n            }\n\n            // check, maybe currentStaffLine is the last of the MusicSystem (and it has a ContinuousDynamicExpression with placement below)\n            if (nextStaffLineIndex > currentStaffLineIndex) {\n                // currentStaffLine isn't the last of the MusicSystem\n                const nextStaffLine: StaffLine = musicSystem.StaffLines[nextStaffLineIndex];\n\n                const distanceBetweenStaffLines: number = nextStaffLine.PositionAndShape.RelativePosition.y -\n                    staffLine.PositionAndShape.RelativePosition.y -\n                    this.rules.StaffHeight;\n\n                // ideal Height is exactly between the two StaffLines\n                idealY = this.rules.StaffHeight + distanceBetweenStaffLines / 2;\n            } else {\n                // currentStaffLine is the MusicSystem's last\n                idealY = this.rules.WedgePlacementBelowY;\n            }\n\n            // must consider the upperWedge starting/ending tip for the comparison with the BottomLine\n            idealY -= this.rules.WedgeOpeningLength / 2;\n            if (!sameStaffLine) {\n                // Set the value for the splitted y position to the ideal position before we check and modify it with\n                // the skybottom calculator detection\n                secondIdealY = idealY;\n            }\n            // must check BottomLine for possible collisions within the Length of the Expression\n            // find the corresponding max value for the given Length\n            let maxBottomLineValueForExpressionLength: number = skyBottomLineCalculator.getBottomLineMaxInRange(upperStartX, upperEndX);\n\n            // if collisions, then set the Height accordingly\n            if (maxBottomLineValueForExpressionLength > idealY) {\n                idealY = maxBottomLineValueForExpressionLength;\n            }\n\n            // special case - wedge must be drawn within the boundaries of a crossedBeam\n            const withinCrossedBeam: boolean = false;\n\n            if (currentStaffLineIndex < musicSystem.StaffLines.length - 1) {\n                // find GraphicalStaffEntries closest to wedge's xPositions\n                const closestToEndStaffEntry: GraphicalStaffEntry = staffLine.findClosestStaffEntry(upperEndX);\n                const closestToStartStaffEntry: GraphicalStaffEntry = staffLine.findClosestStaffEntry(upperStartX);\n\n                if (closestToStartStaffEntry && closestToEndStaffEntry) {\n                    // must check both StaffLines\n                    const startVerticalContainer: VerticalGraphicalStaffEntryContainer = closestToStartStaffEntry.parentVerticalContainer;\n                    // const endVerticalContainer: VerticalGraphicalStaffEntryContainer = closestToEndStaffEntry.parentVerticalContainer;\n                    if (startVerticalContainer) {\n                        // TODO: Needs to be implemented?\n                        // withinCrossedBeam = areStaffEntriesWithinCrossedBeam(startVerticalContainer,\n                        // endVerticalContainer, currentStaffLineIndex, nextStaffLineIndex);\n                    }\n\n                    if (withinCrossedBeam) {\n                        const nextStaffLine: StaffLine = musicSystem.StaffLines[nextStaffLineIndex];\n                        const nextStaffLineMinSkyLineValue: number = nextStaffLine.SkyBottomLineCalculator.getSkyLineMinInRange(upperStartX, upperEndX);\n                        const distanceBetweenStaffLines: number = nextStaffLine.PositionAndShape.RelativePosition.y -\n                            staffLine.PositionAndShape.RelativePosition.y;\n                        const relativeSkyLineHeight: number = distanceBetweenStaffLines + nextStaffLineMinSkyLineValue;\n\n                        if (relativeSkyLineHeight - this.rules.WedgeOpeningLength > this.rules.StaffHeight) {\n                            idealY = relativeSkyLineHeight - this.rules.WedgeVerticalMargin;\n                        } else {\n                            idealY = this.rules.StaffHeight + this.rules.WedgeOpeningLength;\n                        }\n\n                        graphicalContinuousDynamic.NotToBeRemoved = true;\n                    }\n                }\n            }\n\n            // do the same in case of a Wedge ending at another StaffLine\n            if (!sameStaffLine) {\n                maxBottomLineValueForExpressionLength = endStaffLine.SkyBottomLineCalculator.getBottomLineMaxInRange(lowerStartX, lowerEndX);\n\n                if (maxBottomLineValueForExpressionLength > secondIdealY) {\n                    secondIdealY = maxBottomLineValueForExpressionLength;\n                }\n\n                secondIdealY += this.rules.WedgeOpeningLength / 2;\n                secondIdealY += this.rules.WedgeVerticalMargin;\n            }\n\n            if (!withinCrossedBeam) {\n                idealY += this.rules.WedgeOpeningLength / 2;\n                idealY += this.rules.WedgeVerticalMargin;\n            }\n\n        } else if (placement === PlacementEnum.Above) {\n            // single Staff Instrument (eg Voice)\n            if (staffLine.ParentStaff.ParentInstrument.Staves.length === 1) {\n                // single Staff Voice Instrument\n                idealY = this.rules.WedgePlacementAboveY;\n            } else {\n                // Staff = not the first Staff of a 2-staved Instrument\n                let previousStaffLineIndex: number = 0;\n                if (currentStaffLineIndex > 0) {\n                    previousStaffLineIndex = currentStaffLineIndex - 1;\n                }\n\n                const previousStaffLine: StaffLine = musicSystem.StaffLines[previousStaffLineIndex];\n                const distanceBetweenStaffLines: number = staffLine.PositionAndShape.RelativePosition.y -\n                    previousStaffLine.PositionAndShape.RelativePosition.y -\n                    this.rules.StaffHeight;\n\n                // ideal Height is exactly between the two StaffLines\n                idealY = -distanceBetweenStaffLines / 2;\n            }\n\n            // must consider the upperWedge starting/ending tip for the comparison with the SkyLine\n            idealY += this.rules.WedgeOpeningLength / 2;\n            if (!sameStaffLine) {\n                secondIdealY = idealY;\n            }\n\n            // must check SkyLine for possible collisions within the Length of the Expression\n            // find the corresponding min value for the given Length\n            let minSkyLineValueForExpressionLength: number = skyBottomLineCalculator.getSkyLineMinInRange(upperStartX, upperEndX);\n\n            // if collisions, then set the Height accordingly\n            if (minSkyLineValueForExpressionLength < idealY) {\n                idealY = minSkyLineValueForExpressionLength;\n            }\n            const withinCrossedBeam: boolean = false;\n\n            // special case - wedge must be drawn within the boundaries of a crossedBeam\n            if (staffLine.ParentStaff.ParentInstrument.Staves.length > 1 && currentStaffLineIndex > 0) {\n                // find GraphicalStaffEntries closest to wedge's xPositions\n                const closestToStartStaffEntry: GraphicalStaffEntry = staffLine.findClosestStaffEntry(upperStartX);\n                const closestToEndStaffEntry: GraphicalStaffEntry = staffLine.findClosestStaffEntry(upperEndX);\n\n                if (closestToStartStaffEntry && closestToEndStaffEntry) {\n                    // must check both StaffLines\n                    const startVerticalContainer: VerticalGraphicalStaffEntryContainer = closestToStartStaffEntry.parentVerticalContainer;\n                    // const endVerticalContainer: VerticalGraphicalStaffEntryContainer = closestToEndStaffEntry.parentVerticalContainer;\n                    const formerStaffLineIndex: number = currentStaffLineIndex - 1;\n                    if (startVerticalContainer) {\n                        // withinCrossedBeam = this.areStaffEntriesWithinCrossedBeam(startVerticalContainer,\n                        // endVerticalContainer, currentStaffLineIndex, formerStaffLineIndex);\n                    }\n\n                    if (withinCrossedBeam) {\n                        const formerStaffLine: StaffLine = musicSystem.StaffLines[formerStaffLineIndex];\n                        const formerStaffLineMaxBottomLineValue: number = formerStaffLine.SkyBottomLineCalculator.\n                                                                          getBottomLineMaxInRange(upperStartX, upperEndX);\n                        const distanceBetweenStaffLines: number = staffLine.PositionAndShape.RelativePosition.y -\n                            formerStaffLine.PositionAndShape.RelativePosition.y;\n                        const relativeSkyLineHeight: number = distanceBetweenStaffLines - formerStaffLineMaxBottomLineValue;\n                        idealY = (relativeSkyLineHeight - this.rules.StaffHeight) / 2 + this.rules.StaffHeight;\n                    }\n                }\n            }\n\n            // do the same in case of a Wedge ending at another StaffLine\n            if (!sameStaffLine) {\n                minSkyLineValueForExpressionLength = endStaffLine.SkyBottomLineCalculator.getSkyLineMinInRange(lowerStartX, lowerEndX);\n\n                if (minSkyLineValueForExpressionLength < secondIdealY) {\n                    secondIdealY = minSkyLineValueForExpressionLength;\n                }\n\n                secondIdealY -= this.rules.WedgeOpeningLength / 2;\n            }\n\n            if (!withinCrossedBeam) {\n                idealY -= this.rules.WedgeOpeningLength / 2;\n                idealY -= this.rules.WedgeVerticalMargin;\n            }\n            if (!sameStaffLine) {\n                secondIdealY -= this.rules.WedgeVerticalMargin;\n            }\n        }\n\n        // now we have the correct placement Height for the Expression\n        // the idealY is calculated relative to the currentStaffLine\n\n        // Crescendo (point to the left, opening to the right)\n        graphicalContinuousDynamic.Lines.clear();\n        if (graphicalContinuousDynamic.ContinuousDynamic.DynamicType === ContDynamicEnum.crescendo) {\n            if (sameStaffLine) {\n                graphicalContinuousDynamic.createCrescendoLines(upperStartX, upperEndX, idealY);\n                graphicalContinuousDynamic.calcPsi();\n            } else {\n                // two different Wedges\n                graphicalContinuousDynamic.createFirstHalfCrescendoLines(upperStartX, upperEndX, idealY);\n                graphicalContinuousDynamic.calcPsi();\n\n                secondGraphicalContinuousDynamic.createSecondHalfCrescendoLines(lowerStartX, lowerEndX, secondIdealY);\n                secondGraphicalContinuousDynamic.calcPsi();\n            }\n        } else if (graphicalContinuousDynamic.ContinuousDynamic.DynamicType === ContDynamicEnum.diminuendo) {\n            if (sameStaffLine) {\n                graphicalContinuousDynamic.createDiminuendoLines(upperStartX, upperEndX, idealY);\n                graphicalContinuousDynamic.calcPsi();\n            } else {\n                graphicalContinuousDynamic.createFirstHalfDiminuendoLines(upperStartX, upperEndX, idealY);\n                graphicalContinuousDynamic.calcPsi();\n\n                secondGraphicalContinuousDynamic.createSecondHalfDiminuendoLines(lowerStartX, lowerEndX, secondIdealY);\n                secondGraphicalContinuousDynamic.calcPsi();\n            }\n        } //End Diminuendo\n        this.dynamicExpressionMap.set(endAbsoluteTimestamp.RealValue, graphicalContinuousDynamic.PositionAndShape);\n    }\n\n    /**\n     * This method calculates the RelativePosition of a single GraphicalInstantaneousDynamicExpression.\n     * @param graphicalInstantaneousDynamic Dynamic expression to be calculated\n     * @param startPosInStaffline Starting point in staff line\n     */\n    protected calculateGraphicalInstantaneousDynamicExpression(graphicalInstantaneousDynamic: GraphicalInstantaneousDynamicExpression,\n                                                               startPosInStaffline: PointF2D, timestamp: Fraction): void {\n        // get Margin Dimensions\n        const staffLine: StaffLine = graphicalInstantaneousDynamic.ParentStaffLine;\n        if (!staffLine) {\n            return; // TODO can happen when drawing range modified (osmd.setOptions({drawFromMeasureNumber...}))\n        }\n\n        const left: number = startPosInStaffline.x + graphicalInstantaneousDynamic.PositionAndShape.BorderMarginLeft;\n        const right: number = startPosInStaffline.x + graphicalInstantaneousDynamic.PositionAndShape.BorderMarginRight;\n        const skyBottomLineCalculator: SkyBottomLineCalculator = staffLine.SkyBottomLineCalculator;\n        let yPosition: number = 0;\n\n        // calculate yPosition according to Placement\n        if (graphicalInstantaneousDynamic.Placement === PlacementEnum.Above) {\n            const skyLineValue: number = skyBottomLineCalculator.getSkyLineMinInRange(left, right);\n\n            // if StaffLine part of multiStaff Instrument and not the first one, ideal yPosition middle of distance between Staves\n            if (staffLine.isPartOfMultiStaffInstrument() && staffLine.ParentStaff !== staffLine.ParentStaff.ParentInstrument.Staves[0]) {\n                const formerStaffLine: StaffLine = staffLine.ParentMusicSystem.StaffLines[staffLine.ParentMusicSystem.StaffLines.indexOf(staffLine) - 1];\n                const difference: number = staffLine.PositionAndShape.RelativePosition.y -\n                    formerStaffLine.PositionAndShape.RelativePosition.y - this.rules.StaffHeight;\n\n                // take always into account the size of the Dynamic\n                if (skyLineValue > -difference / 2) {\n                    yPosition = -difference / 2;\n                } else {\n                    yPosition = skyLineValue - graphicalInstantaneousDynamic.PositionAndShape.BorderMarginBottom;\n                }\n            } else {\n                yPosition = skyLineValue - graphicalInstantaneousDynamic.PositionAndShape.BorderMarginBottom;\n            }\n\n            graphicalInstantaneousDynamic.PositionAndShape.RelativePosition = new PointF2D(startPosInStaffline.x, yPosition);\n        } else if (graphicalInstantaneousDynamic.Placement === PlacementEnum.Below) {\n            const bottomLineValue: number = skyBottomLineCalculator.getBottomLineMaxInRange(left, right);\n            // if StaffLine part of multiStaff Instrument and not the last one, ideal yPosition middle of distance between Staves\n            const lastStaff: Staff = staffLine.ParentStaff.ParentInstrument.Staves[staffLine.ParentStaff.ParentInstrument.Staves.length - 1];\n            if (staffLine.isPartOfMultiStaffInstrument() && staffLine.ParentStaff !== lastStaff) {\n                const nextStaffLine: StaffLine = staffLine.ParentMusicSystem.StaffLines[staffLine.ParentMusicSystem.StaffLines.indexOf(staffLine) + 1];\n                const difference: number = nextStaffLine.PositionAndShape.RelativePosition.y -\n                    staffLine.PositionAndShape.RelativePosition.y - this.rules.StaffHeight;\n                const border: number = graphicalInstantaneousDynamic.PositionAndShape.BorderMarginBottom;\n\n                // take always into account the size of the Dynamic\n                if (bottomLineValue + border < this.rules.StaffHeight + difference / 2) {\n                    yPosition = this.rules.StaffHeight + difference / 2;\n                } else {\n                    yPosition = bottomLineValue - graphicalInstantaneousDynamic.PositionAndShape.BorderMarginTop;\n                }\n            } else {\n                yPosition = bottomLineValue - graphicalInstantaneousDynamic.PositionAndShape.BorderMarginTop;\n            }\n\n            graphicalInstantaneousDynamic.PositionAndShape.RelativePosition = new PointF2D(startPosInStaffline.x, yPosition);\n        }\n        graphicalInstantaneousDynamic.updateSkyBottomLine();\n    }\n\n    protected calcGraphicalRepetitionEndingsRecursively(repetition: Repetition): void {\n        return;\n    }\n\n    /**\n     * Calculate a single GraphicalRepetition.\n     * @param start\n     * @param end\n     * @param numberText\n     * @param offset\n     * @param leftOpen\n     * @param rightOpen\n     */\n    protected layoutSingleRepetitionEnding(start: GraphicalMeasure, end: GraphicalMeasure, numberText: string,\n                                           offset: number, leftOpen: boolean, rightOpen: boolean): void {\n        return;\n    }\n\n    protected calculateLabel(staffLine: StaffLine,\n                             relative: PointF2D,\n                             combinedString: string,\n                             style: FontStyles,\n                             placement: PlacementEnum,\n                             fontHeight: number,\n                             textAlignment: TextAlignmentEnum = TextAlignmentEnum.CenterBottom): GraphicalLabel {\n        const label: Label = new Label(combinedString, textAlignment);\n        label.fontStyle = style;\n        label.fontHeight = fontHeight;\n\n        // TODO_RR: TextHeight from first Entry\n        const graphLabel: GraphicalLabel = new GraphicalLabel(label, fontHeight, label.textAlignment, this.rules, staffLine.PositionAndShape);\n        const marginFactor: number = 1.1;\n\n        if (placement === PlacementEnum.Below) {\n            graphLabel.Label.textAlignment = TextAlignmentEnum.LeftTop;\n        }\n\n        graphLabel.setLabelPositionAndShapeBorders();\n        graphLabel.PositionAndShape.BorderMarginBottom *= marginFactor;\n        graphLabel.PositionAndShape.BorderMarginTop *= marginFactor;\n        graphLabel.PositionAndShape.BorderMarginLeft *= marginFactor;\n        graphLabel.PositionAndShape.BorderMarginRight *= marginFactor;\n\n        let left: number = relative.x + graphLabel.PositionAndShape.BorderMarginLeft;\n        let right: number = relative.x + graphLabel.PositionAndShape.BorderMarginRight;\n\n        // check if GraphicalLabel exceeds the StaffLine's borders.\n        if (right > staffLine.PositionAndShape.Size.width) {\n            right = staffLine.PositionAndShape.Size.width - this.rules.MeasureRightMargin;\n            left = right - graphLabel.PositionAndShape.MarginSize.width;\n            relative.x = left - graphLabel.PositionAndShape.BorderMarginLeft;\n        }\n\n        // find allowed position (where the Label can be positioned) from Sky- BottomLine\n        let drawingHeight: number;\n        const skyBottomLineCalculator: SkyBottomLineCalculator = staffLine.SkyBottomLineCalculator;\n        if (placement === PlacementEnum.Below) {\n            drawingHeight = skyBottomLineCalculator.getBottomLineMaxInRange(left, right);\n        } else {\n            drawingHeight = skyBottomLineCalculator.getSkyLineMinInRange(left, right);\n        }\n\n        // set RelativePosition\n        graphLabel.PositionAndShape.RelativePosition = new PointF2D(relative.x, drawingHeight);\n\n        // update Sky- BottomLine\n        if (placement === PlacementEnum.Below) {\n            skyBottomLineCalculator.updateBottomLineInRange(left, right, graphLabel.PositionAndShape.BorderMarginBottom + drawingHeight);\n        } else {\n            skyBottomLineCalculator.updateSkyLineInRange(left, right, graphLabel.PositionAndShape.BorderMarginTop + drawingHeight);\n        }\n        return graphLabel;\n    }\n\n    protected calculateTempoExpressionsForMultiTempoExpression(sourceMeasure: SourceMeasure, multiTempoExpression: MultiTempoExpression,\n                                                               measureIndex: number): void {\n        // calculate absolute Timestamp\n        const absoluteTimestamp: Fraction = Fraction.plus(sourceMeasure.AbsoluteTimestamp, multiTempoExpression.Timestamp);\n        const measures: GraphicalMeasure[] = this.graphicalMusicSheet.MeasureList[measureIndex];\n        let relative: PointF2D = new PointF2D();\n\n        if (multiTempoExpression.ContinuousTempo || multiTempoExpression.InstantaneousTempo) {\n            // TempoExpressions always on the first visible System's StaffLine // TODO is it though?\n            if (this.rules.MinMeasureToDrawIndex > 0) {\n                return; // assuming that the tempo is always in measure 1 (idx 0), adding the expression causes issues when we don't draw measure 1\n            }\n            if (!measures[0]) {\n                return;\n            }\n            let staffLine: StaffLine = measures[0].ParentStaffLine;\n            let firstVisibleMeasureX: number = measures[0].PositionAndShape.RelativePosition.x;\n            let verticalIndex: number = 0;\n            for (let j: number = 0; j < measures.length; j++) {\n                if (!measures[j].ParentStaffLine || measures[j].ParentStaffLine.Measures.length === 0) {\n                    continue;\n                }\n\n                if (measures[j].ParentStaffLine.Measures.length > 0) {\n                    staffLine = measures[j].ParentStaffLine;\n                    firstVisibleMeasureX = measures[j].PositionAndShape.RelativePosition.x;\n                    verticalIndex = j;\n                    break;\n                }\n            }\n            relative = this.getRelativePositionInStaffLineFromTimestamp(absoluteTimestamp,\n                                                                        verticalIndex,\n                                                                        staffLine,\n                                                                        staffLine.isPartOfMultiStaffInstrument(),\n                                                                        firstVisibleMeasureX);\n\n            // also placement Above\n            if (multiTempoExpression.EntriesList.length > 0 &&\n                multiTempoExpression.EntriesList[0].Expression instanceof InstantaneousTempoExpression) {\n                const instantaniousTempo: InstantaneousTempoExpression = (multiTempoExpression.EntriesList[0].Expression as InstantaneousTempoExpression);\n                instantaniousTempo.Placement = PlacementEnum.Above;\n\n                // if an InstantaniousTempoExpression exists at the very beginning then\n                // check if expression is positioned at first ever StaffEntry and\n                // check if MusicSystem is first MusicSystem\n                if (staffLine.Measures[0].staffEntries.length > 0 &&\n                    Math.abs(relative.x - staffLine.Measures[0].staffEntries[0].PositionAndShape.RelativePosition.x) === 0 &&\n                    staffLine.ParentMusicSystem === this.musicSystems[0]) {\n                    const firstInstructionEntry: GraphicalStaffEntry = staffLine.Measures[0].FirstInstructionStaffEntry;\n                    if (firstInstructionEntry) {\n                        const lastInstruction: AbstractGraphicalInstruction = firstInstructionEntry.GraphicalInstructions.last();\n                        relative.x = lastInstruction.PositionAndShape.RelativePosition.x;\n                    }\n                    if (this.rules.CompactMode) {\n                        relative.x = staffLine.PositionAndShape.RelativePosition.x +\n                            staffLine.Measures[0].PositionAndShape.RelativePosition.x;\n                    }\n                }\n            }\n\n            // const addAtLastList: GraphicalObject[] = [];\n            for (const entry of multiTempoExpression.EntriesList) {\n                let textAlignment: TextAlignmentEnum = TextAlignmentEnum.CenterBottom;\n                if (this.rules.CompactMode) {\n                    textAlignment = TextAlignmentEnum.LeftBottom;\n                }\n                const graphLabel: GraphicalLabel = this.calculateLabel(staffLine,\n                                                                       relative,\n                                                                       entry.label,\n                                                                       multiTempoExpression.getFontstyleOfFirstEntry(),\n                                                                       entry.Expression.Placement,\n                                                                       this.rules.UnknownTextHeight,\n                                                                       textAlignment);\n\n                if (entry.Expression instanceof InstantaneousTempoExpression) {\n                    //already added?\n                    for (const expr of staffLine.AbstractExpressions) {\n                        if (expr instanceof GraphicalInstantaneousTempoExpression &&\n                            (expr.SourceExpression as AbstractTempoExpression).Label === entry.Expression.Label) {\n                            //already added\n                            continue;\n                        }\n                    }\n\n                    const graphicalTempoExpr: GraphicalInstantaneousTempoExpression = new GraphicalInstantaneousTempoExpression(entry.Expression, graphLabel);\n                    if (!graphicalTempoExpr.ParentStaffLine) {\n                        log.warn(\"Adding staffline didn't work\");\n                        // I am actually fooling the linter here and use the created object. This method needs refactoring,\n                        // all graphical expression creations should be in one place and have basic stuff like labels, lines, ...\n                        // in their constructor\n                    }\n                    // in case of metronome mark:\n                    if (this.rules.MetronomeMarksDrawn) {\n                        if ((entry.Expression as InstantaneousTempoExpression).Enum === TempoEnum.metronomeMark) {\n                            this.createMetronomeMark((entry.Expression as InstantaneousTempoExpression));\n                            continue;\n                        }\n                    }\n                } else if (entry.Expression instanceof ContinuousTempoExpression) {\n                    // FIXME: Not yet implemented\n                    // let alreadyAdded: boolean = false;\n                    // for (const expr of staffLine.AbstractExpressions) {\n                    //     if (expr instanceof GraphicalContinuousTempoExpression &&\n                    //         expr.GetContinuousTempoExpression.Label === entry.Expression.Label) {\n                    //         alreadyAdded = true;\n                    //     }\n                    // }\n\n                    // if (alreadyAdded) {\n                    //     continue;\n                    // }\n\n                    // staffLine.AbstractExpressions.push(new GraphicalContinuousTempoExpression((ContinuousTempoExpression)(entry.Expression), graphLabel));\n                }\n            }\n        }\n    }\n\n    protected createMetronomeMark(metronomeExpression: InstantaneousTempoExpression): void {\n        throw new Error(this.abstractNotImplementedErrorMessage);\n    }\n\n    protected graphicalMeasureCreatedCalculations(measure: GraphicalMeasure): void {\n        return;\n    }\n\n    protected clearSystemsAndMeasures(): void {\n        for (let idx: number = 0, len: number = this.graphicalMusicSheet.MusicPages.length; idx < len; ++idx) {\n            const graphicalMusicPage: GraphicalMusicPage = this.graphicalMusicSheet.MusicPages[idx];\n            for (let idx2: number = 0, len2: number = graphicalMusicPage.MusicSystems.length; idx2 < len2; ++idx2) {\n                const musicSystem: MusicSystem = graphicalMusicPage.MusicSystems[idx2];\n                for (let idx3: number = 0, len3: number = musicSystem.StaffLines.length; idx3 < len3; ++idx3) {\n                    const staffLine: StaffLine = musicSystem.StaffLines[idx3];\n                    for (let idx4: number = 0, len4: number = staffLine.Measures.length; idx4 < len4; ++idx4) {\n                        const graphicalMeasure: GraphicalMeasure = staffLine.Measures[idx4];\n                        if (graphicalMeasure.FirstInstructionStaffEntry) {\n                            const index: number = graphicalMeasure.PositionAndShape.ChildElements.indexOf(\n                                graphicalMeasure.FirstInstructionStaffEntry.PositionAndShape\n                            );\n                            if (index > -1) {\n                                graphicalMeasure.PositionAndShape.ChildElements.splice(index, 1);\n                            }\n                            graphicalMeasure.FirstInstructionStaffEntry = undefined;\n                            graphicalMeasure.beginInstructionsWidth = 0.0;\n                        }\n                        if (graphicalMeasure.LastInstructionStaffEntry) {\n                            const index: number = graphicalMeasure.PositionAndShape.ChildElements.indexOf(\n                                graphicalMeasure.LastInstructionStaffEntry.PositionAndShape\n                            );\n                            if (index > -1) {\n                                graphicalMeasure.PositionAndShape.ChildElements.splice(index, 1);\n                            }\n                            graphicalMeasure.LastInstructionStaffEntry = undefined;\n                            graphicalMeasure.endInstructionsWidth = 0.0;\n                        }\n                    }\n                    staffLine.Measures = [];\n                    staffLine.PositionAndShape.ChildElements = [];\n                }\n                musicSystem.StaffLines.length = 0;\n                musicSystem.PositionAndShape.ChildElements = [];\n            }\n            graphicalMusicPage.MusicSystems = [];\n            graphicalMusicPage.PositionAndShape.ChildElements = [];\n        }\n        this.graphicalMusicSheet.MusicPages = [];\n    }\n\n    protected handleVoiceEntry(voiceEntry: VoiceEntry, graphicalStaffEntry: GraphicalStaffEntry,\n                               accidentalCalculator: AccidentalCalculator, openLyricWords: LyricWord[],\n                               activeClef: ClefInstruction,\n                               openTuplets: Tuplet[], openBeams: Beam[],\n                               octaveShiftValue: OctaveEnum, staffIndex: number,\n                               linkedNotes: Note[] = undefined,\n                               sourceStaffEntry: SourceStaffEntry = undefined): OctaveEnum {\n        if (voiceEntry.StemDirectionXml !== StemDirectionType.Undefined &&\n            this.rules.SetWantedStemDirectionByXml &&\n            voiceEntry.StemDirectionXml !== undefined) {\n                voiceEntry.WantedStemDirection = voiceEntry.StemDirectionXml;\n        } else {\n            this.calculateStemDirectionFromVoices(voiceEntry);\n        }\n        // if GraphicalStaffEntry has been created earlier (because of Tie), then the GraphicalNotesLists have also been created\n        const gve: GraphicalVoiceEntry = graphicalStaffEntry.findOrCreateGraphicalVoiceEntry(voiceEntry);\n        gve.octaveShiftValue = octaveShiftValue;\n        // check for Tabs:\n        const tabStaffEntry: GraphicalStaffEntry = graphicalStaffEntry.tabStaffEntry;\n        let graphicalTabVoiceEntry: GraphicalVoiceEntry;\n        if (tabStaffEntry) {\n            graphicalTabVoiceEntry = tabStaffEntry.findOrCreateGraphicalVoiceEntry(voiceEntry);\n        }\n\n        for (let idx: number = 0, len: number = voiceEntry.Notes.length; idx < len; ++idx) {\n            const note: Note = voiceEntry.Notes[idx];\n            if (!note) {\n                continue;\n            }\n            if (sourceStaffEntry !== undefined && sourceStaffEntry.Link !== undefined && linkedNotes !== undefined && linkedNotes.indexOf(note) > -1) {\n                continue;\n            }\n            let graphicalNote: GraphicalNote;\n            if (voiceEntry.IsGrace) {\n                graphicalNote = MusicSheetCalculator.symbolFactory.createGraceNote(note, gve, activeClef, this.rules, octaveShiftValue);\n            } else {\n                graphicalNote = MusicSheetCalculator.symbolFactory.createNote(note, gve, activeClef, octaveShiftValue, this.rules, undefined);\n                MusicSheetCalculator.stafflineNoteCalculator.trackNote(graphicalNote);\n            }\n            if (note.Pitch) {\n                this.checkNoteForAccidental(graphicalNote, accidentalCalculator, activeClef, octaveShiftValue);\n            }\n            this.resetYPositionForLeadSheet(graphicalNote.PositionAndShape);\n            graphicalStaffEntry.addGraphicalNoteToListAtCorrectYPosition(gve, graphicalNote);\n            graphicalNote.PositionAndShape.calculateBoundingBox();\n            if (!this.leadSheet) {\n                if (note.NoteBeam !== undefined && note.PrintObject) {\n                    this.handleBeam(graphicalNote, note.NoteBeam, openBeams);\n                }\n                if (note.NoteTuplet !== undefined && note.PrintObject) {\n                    this.handleTuplet(graphicalNote, note.NoteTuplet, openTuplets);\n                }\n            }\n\n            // handle TabNotes:\n            if (graphicalTabVoiceEntry) {\n                // notes should be either TabNotes or RestNotes -> add all:\n                const graphicalTabNote: GraphicalNote = MusicSheetCalculator.symbolFactory.createNote(\n                    note,\n                    graphicalTabVoiceEntry,\n                    activeClef,\n                    octaveShiftValue,\n                    this.rules,\n                    undefined);\n                tabStaffEntry.addGraphicalNoteToListAtCorrectYPosition(graphicalTabVoiceEntry, graphicalTabNote);\n                graphicalTabNote.PositionAndShape.calculateBoundingBox();\n\n                if (!this.leadSheet) {\n                    if (note.NoteTuplet) {\n                        this.handleTuplet(graphicalTabNote, note.NoteTuplet, openTuplets);\n                    }\n                }\n            }\n        }\n        if (voiceEntry.Articulations.length > 0) {\n            this.handleVoiceEntryArticulations(voiceEntry.Articulations, voiceEntry, graphicalStaffEntry);\n        }\n        if (voiceEntry.TechnicalInstructions.length > 0) {\n            this.handleVoiceEntryTechnicalInstructions(voiceEntry.TechnicalInstructions, voiceEntry, graphicalStaffEntry);\n        }\n        if (voiceEntry.LyricsEntries.size() > 0) {\n            this.handleVoiceEntryLyrics(voiceEntry, graphicalStaffEntry, openLyricWords);\n        }\n        if (voiceEntry.OrnamentContainer) {\n            this.handleVoiceEntryOrnaments(voiceEntry.OrnamentContainer, voiceEntry, graphicalStaffEntry);\n        }\n        return octaveShiftValue;\n    }\n\n    protected resetYPositionForLeadSheet(psi: BoundingBox): void {\n        if (this.leadSheet) {\n            psi.RelativePosition = new PointF2D(psi.RelativePosition.x, 0.0);\n        }\n    }\n\n    protected layoutVoiceEntries(graphicalStaffEntry: GraphicalStaffEntry, staffIndex: number): void {\n        graphicalStaffEntry.PositionAndShape.RelativePosition = new PointF2D(0.0, 0.0);\n        if (!this.leadSheet) {\n            for (const gve of graphicalStaffEntry.graphicalVoiceEntries) {\n                const graphicalNotes: GraphicalNote[] = gve.notes;\n                if (graphicalNotes.length === 0) {\n                    continue;\n                }\n                const voiceEntry: VoiceEntry = graphicalNotes[0].sourceNote.ParentVoiceEntry;\n                const hasPitchedNote: boolean = graphicalNotes[0].sourceNote.Pitch !== undefined;\n                this.layoutVoiceEntry(voiceEntry, graphicalNotes, graphicalStaffEntry, hasPitchedNote);\n            }\n        }\n    }\n\n    protected maxInstrNameLabelLength(): number {\n        let maxLabelLength: number = 0.0;\n        for (const instrument of this.graphicalMusicSheet.ParentMusicSheet.Instruments) {\n            if (instrument.NameLabel?.print && instrument.Voices.length > 0 && instrument.Voices[0].Visible) {\n                let renderedLabel: Label = instrument.NameLabel;\n                if (!this.rules.RenderPartNames) {\n                    renderedLabel = new Label(\"\", renderedLabel.textAlignment, renderedLabel.font);\n                }\n                const graphicalLabel: GraphicalLabel = new GraphicalLabel(\n                    renderedLabel, this.rules.InstrumentLabelTextHeight, TextAlignmentEnum.LeftCenter, this.rules);\n                graphicalLabel.setLabelPositionAndShapeBorders();\n                maxLabelLength = Math.max(maxLabelLength, graphicalLabel.PositionAndShape.MarginSize.width);\n            }\n        }\n        if (!this.rules.RenderPartNames) {\n            return 0;\n        }\n        return maxLabelLength;\n    }\n\n    protected calculateSheetLabelBoundingBoxes(): void {\n        const musicSheet: MusicSheet = this.graphicalMusicSheet.ParentMusicSheet;\n        const defaultColorTitle: string = this.rules.DefaultColorTitle; // can be undefined => black\n        if (musicSheet.Title !== undefined && this.rules.RenderTitle) {\n            const title: GraphicalLabel = new GraphicalLabel(musicSheet.Title, this.rules.SheetTitleHeight, TextAlignmentEnum.CenterBottom, this.rules);\n            title.Label.IsCreditLabel = true;\n            title.Label.colorDefault = defaultColorTitle;\n            this.graphicalMusicSheet.Title = title;\n            title.setLabelPositionAndShapeBorders();\n        } else if (!this.rules.RenderTitle) {\n            this.graphicalMusicSheet.Title = undefined; // clear label if rendering it was disabled after last render\n        }\n        if (musicSheet.Subtitle !== undefined && this.rules.RenderSubtitle) {\n            const subtitle: GraphicalLabel = new GraphicalLabel(\n                musicSheet.Subtitle, this.rules.SheetSubtitleHeight, TextAlignmentEnum.CenterCenter, this.rules);\n            subtitle.Label.IsCreditLabel = true;\n            subtitle.Label.colorDefault = defaultColorTitle;\n            this.graphicalMusicSheet.Subtitle = subtitle;\n            subtitle.setLabelPositionAndShapeBorders();\n        } else if (!this.rules.RenderSubtitle) {\n            this.graphicalMusicSheet.Subtitle = undefined;\n        }\n        if (musicSheet.Composer !== undefined && this.rules.RenderComposer) {\n            const composer: GraphicalLabel = new GraphicalLabel(\n                musicSheet.Composer, this.rules.SheetComposerHeight, TextAlignmentEnum.RightCenter, this.rules);\n            composer.Label.IsCreditLabel = true;\n            composer.Label.colorDefault = defaultColorTitle;\n            this.graphicalMusicSheet.Composer = composer;\n            composer.setLabelPositionAndShapeBorders();\n        } else if (!this.rules.RenderComposer) {\n            this.graphicalMusicSheet.Composer = undefined;\n        }\n        if (musicSheet.Lyricist !== undefined && this.rules.RenderLyricist) {\n            const lyricist: GraphicalLabel = new GraphicalLabel(\n                musicSheet.Lyricist, this.rules.SheetAuthorHeight, TextAlignmentEnum.LeftCenter, this.rules);\n            lyricist.Label.IsCreditLabel = true;\n            lyricist.Label.colorDefault = defaultColorTitle;\n            this.graphicalMusicSheet.Lyricist = lyricist;\n            lyricist.setLabelPositionAndShapeBorders();\n        } else if (!this.rules.RenderLyricist) {\n            this.graphicalMusicSheet.Lyricist = undefined;\n        }\n    }\n\n    protected checkMeasuresForWholeRestNotes(): void {\n        for (let idx2: number = 0, len2: number = this.musicSystems.length; idx2 < len2; ++idx2) {\n            const musicSystem: MusicSystem = this.musicSystems[idx2];\n            for (let idx3: number = 0, len3: number = musicSystem.StaffLines.length; idx3 < len3; ++idx3) {\n                const staffLine: StaffLine = musicSystem.StaffLines[idx3];\n                for (let idx4: number = 0, len4: number = staffLine.Measures.length; idx4 < len4; ++idx4) {\n                    const measure: GraphicalMeasure = staffLine.Measures[idx4];\n                    if (measure.staffEntries.length === 1) {\n                        const gse: GraphicalStaffEntry = measure.staffEntries[0];\n                        if (gse.graphicalVoiceEntries.length > 0 && gse.graphicalVoiceEntries[0].notes.length === 1) {\n                            const graphicalNote: GraphicalNote = gse.graphicalVoiceEntries[0].notes[0];\n                            if (!graphicalNote.sourceNote.Pitch && (new Fraction(1, 2)).lt(graphicalNote.sourceNote.Length)) {\n                                this.layoutMeasureWithWholeRest(graphicalNote, gse, measure);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    protected optimizeRestNotePlacement(graphicalStaffEntry: GraphicalStaffEntry, measure: GraphicalMeasure): void {\n        if (graphicalStaffEntry.graphicalVoiceEntries.length === 0) {\n            return;\n        }\n        const voice1Notes: GraphicalNote[] = graphicalStaffEntry.graphicalVoiceEntries[0].notes;\n        if (voice1Notes.length === 0) {\n            return;\n        }\n        const voice1Note1: GraphicalNote = voice1Notes[0];\n        const voice1Note1IsRest: boolean = voice1Note1.sourceNote.isRest();\n        if (graphicalStaffEntry.graphicalVoiceEntries.length === 2) {\n            let voice2Note1IsRest: boolean = false;\n            const voice2Notes: GraphicalNote[] = graphicalStaffEntry.graphicalVoiceEntries[1].notes;\n            if (voice2Notes.length > 0) {\n                const voice2Note1: GraphicalNote = voice2Notes[0];\n                voice2Note1IsRest = voice2Note1.sourceNote.isRest();\n            }\n            if (voice1Note1IsRest && voice2Note1IsRest) {\n                this.calculateTwoRestNotesPlacementWithCollisionDetection(graphicalStaffEntry);\n            } else if (voice1Note1IsRest || voice2Note1IsRest) {\n                this.calculateRestNotePlacementWithCollisionDetectionFromGraphicalNote(graphicalStaffEntry);\n            }\n        } else if (voice1Note1IsRest && graphicalStaffEntry !== measure.staffEntries[0] &&\n            graphicalStaffEntry !== measure.staffEntries[measure.staffEntries.length - 1]) {\n            const staffEntryIndex: number = measure.staffEntries.indexOf(graphicalStaffEntry);\n            const previousStaffEntry: GraphicalStaffEntry = measure.staffEntries[staffEntryIndex - 1];\n            const nextStaffEntry: GraphicalStaffEntry = measure.staffEntries[staffEntryIndex + 1];\n            if (previousStaffEntry.graphicalVoiceEntries.length === 1) {\n                const previousNote: GraphicalNote = previousStaffEntry.graphicalVoiceEntries[0].notes[0];\n                if (previousNote.sourceNote.NoteBeam !== undefined && nextStaffEntry.graphicalVoiceEntries.length === 1) {\n                    const nextNote: GraphicalNote = nextStaffEntry.graphicalVoiceEntries[0].notes[0];\n                    if (nextNote.sourceNote.NoteBeam !== undefined && previousNote.sourceNote.NoteBeam === nextNote.sourceNote.NoteBeam) {\n                        this.calculateRestNotePlacementWithinGraphicalBeam(\n                            graphicalStaffEntry, voice1Note1, previousNote,\n                            nextStaffEntry, nextNote\n                        );\n                        graphicalStaffEntry.PositionAndShape.calculateBoundingBox();\n                    }\n                }\n            }\n        }\n    }\n\n    protected getRelativePositionInStaffLineFromTimestamp(timestamp: Fraction, verticalIndex: number, staffLine: StaffLine,\n                                                          multiStaffInstrument: boolean, firstVisibleMeasureRelativeX: number = 0.0): PointF2D {\n        let relative: PointF2D = new PointF2D();\n        let leftStaffEntry: GraphicalStaffEntry = undefined;\n        let rightStaffEntry: GraphicalStaffEntry = undefined;\n        const numEntries: number = this.graphicalMusicSheet.VerticalGraphicalStaffEntryContainers.length;\n        const index: number = this.graphicalMusicSheet.GetInterpolatedIndexInVerticalContainers(timestamp);\n        const leftIndex: number = Math.min(Math.floor(index), numEntries - 1);\n        const rightIndex: number = Math.min(Math.ceil(index), numEntries - 1);\n        if (leftIndex < 0 || verticalIndex < 0) {\n            return relative;\n        }\n        leftStaffEntry = this.getFirstLeftNotNullStaffEntryFromContainer(leftIndex, verticalIndex, multiStaffInstrument);\n        rightStaffEntry = this.getFirstRightNotNullStaffEntryFromContainer(rightIndex, verticalIndex, multiStaffInstrument);\n        if (leftStaffEntry && rightStaffEntry) {\n            let measureRelativeX: number = leftStaffEntry.parentMeasure.PositionAndShape.RelativePosition.x;\n            if (firstVisibleMeasureRelativeX > 0) {\n                measureRelativeX = firstVisibleMeasureRelativeX;\n            }\n            let leftX: number = leftStaffEntry.PositionAndShape.RelativePosition.x + measureRelativeX;\n            let rightX: number = rightStaffEntry.PositionAndShape.RelativePosition.x + rightStaffEntry.parentMeasure.PositionAndShape.RelativePosition.x;\n            if (firstVisibleMeasureRelativeX > 0) {\n                rightX = rightStaffEntry.PositionAndShape.RelativePosition.x + measureRelativeX;\n            }\n            let timestampQuotient: number = 0.0;\n            if (leftStaffEntry !== rightStaffEntry) {\n                const leftTimestamp: Fraction = leftStaffEntry.getAbsoluteTimestamp();\n                const rightTimestamp: Fraction = rightStaffEntry.getAbsoluteTimestamp();\n                const leftDifference: Fraction = Fraction.minus(timestamp, leftTimestamp);\n                timestampQuotient = leftDifference.RealValue / Fraction.minus(rightTimestamp, leftTimestamp).RealValue;\n            }\n            if (leftStaffEntry.parentMeasure.ParentStaffLine !== rightStaffEntry.parentMeasure.ParentStaffLine) {\n                if (leftStaffEntry.parentMeasure.ParentStaffLine === staffLine) {\n                    rightX = staffLine.PositionAndShape.Size.width;\n                } else {\n                    leftX = staffLine.PositionAndShape.RelativePosition.x;\n                }\n            }\n            relative = new PointF2D(leftX + (rightX - leftX) * timestampQuotient, 0.0);\n        }\n        return relative;\n    }\n\n    protected getRelativeXPositionFromTimestamp(timestamp: Fraction): number {\n        const numEntries: number = this.graphicalMusicSheet.VerticalGraphicalStaffEntryContainers.length;\n        const index: number = this.graphicalMusicSheet.GetInterpolatedIndexInVerticalContainers(timestamp);\n        const discreteIndex: number = Math.max(0, Math.min(Math.round(index), numEntries - 1));\n        const gse: GraphicalStaffEntry = this.graphicalMusicSheet.VerticalGraphicalStaffEntryContainers[discreteIndex].getFirstNonNullStaffEntry();\n        const posX: number = gse.PositionAndShape.RelativePosition.x + gse.parentMeasure.PositionAndShape.RelativePosition.x;\n        return posX;\n    }\n\n    protected calculatePageLabels(page: GraphicalMusicPage): void {\n        if (this.rules.RenderSingleHorizontalStaffline) {\n            page.PositionAndShape.BorderRight = page.PositionAndShape.Size.width;\n            page.PositionAndShape.calculateBoundingBox();\n            this.graphicalMusicSheet.ParentMusicSheet.pageWidth = page.PositionAndShape.Size.width;\n        }\n        // The PositionAndShape child elements of page need to be manually connected to the lyricist, composer, subtitle, etc.\n        // because the page is only available now\n        let firstSystemAbsoluteTopMargin: number = 10;\n        if (page.MusicSystems.length > 0) {\n            const firstMusicSystem: MusicSystem = page.MusicSystems[0];\n            firstSystemAbsoluteTopMargin = firstMusicSystem.PositionAndShape.RelativePosition.y + firstMusicSystem.PositionAndShape.BorderTop;\n        }\n        //const firstStaffLine: StaffLine = this.graphicalMusicSheet.MusicPages[0].MusicSystems[0].StaffLines[0];\n        if (this.graphicalMusicSheet.Title) {\n            const title: GraphicalLabel = this.graphicalMusicSheet.Title;\n            title.PositionAndShape.Parent = page.PositionAndShape;\n            //title.PositionAndShape.Parent = firstStaffLine.PositionAndShape;\n            const relative: PointF2D = new PointF2D();\n            relative.x = this.graphicalMusicSheet.ParentMusicSheet.pageWidth / 2;\n            //relative.x = firstStaffLine.PositionAndShape.RelativePosition.x + firstStaffLine.PositionAndShape.Size.width / 2; // half of first staffline width\n            relative.y = this.rules.TitleTopDistance + this.rules.SheetTitleHeight;\n            title.PositionAndShape.RelativePosition = relative;\n            page.Labels.push(title);\n        }\n        if (this.graphicalMusicSheet.Subtitle) {\n            const subtitle: GraphicalLabel = this.graphicalMusicSheet.Subtitle;\n            //subtitle.PositionAndShape.Parent = firstStaffLine.PositionAndShape;\n            subtitle.PositionAndShape.Parent = page.PositionAndShape;\n            const relative: PointF2D = new PointF2D();\n            relative.x = this.graphicalMusicSheet.ParentMusicSheet.pageWidth / 2;\n            //relative.x = firstStaffLine.PositionAndShape.RelativePosition.x + firstStaffLine.PositionAndShape.Size.width / 2; // half of first staffline width\n            relative.y = this.rules.TitleTopDistance + this.rules.SheetTitleHeight + this.rules.SheetMinimumDistanceBetweenTitleAndSubtitle;\n            subtitle.PositionAndShape.RelativePosition = relative;\n            page.Labels.push(subtitle);\n        }\n        // Get the first system, first staffline skybottomcalculator\n        // const topStaffline: StaffLine = page.MusicSystems[0].StaffLines[0];\n        // const skyBottomLineCalculator: SkyBottomLineCalculator = topStaffline.SkyBottomLineCalculator;\n        //   we don't need a skybottomcalculator currently, labels are put above system skyline anyways.\n        const composer: GraphicalLabel = this.graphicalMusicSheet.Composer;\n        let composerRelativeY: number;\n        if (composer) {\n            composer.PositionAndShape.Parent = page.PositionAndShape; // if using pageWidth. (which can currently be too wide) TODO fix pageWidth (#578)\n            //composer.PositionAndShape.Parent = topStaffline.PositionAndShape; // if using firstStaffLine...width.\n            //      y-collision problems, harder to y-align with lyrics\n            composer.setLabelPositionAndShapeBorders();\n            const relative: PointF2D = new PointF2D();\n            //const firstStaffLineEndX: number = this.rules.PageLeftMargin + this.rules.SystemLeftMargin + this.rules.left\n            //    firstStaffLine.PositionAndShape.RelativePosition.x + firstStaffLine.PositionAndShape.Size.width;\n            //relative.x = Math.min(this.graphicalMusicSheet.ParentMusicSheet.pageWidth - this.rules.PageRightMargin,\n            //  firstStaffLineEndX); // awkward with 2-bar score\n            relative.x = this.graphicalMusicSheet.ParentMusicSheet.pageWidth - this.rules.PageRightMargin;\n            //relative.x = firstStaffLine.PositionAndShape.Size.width;\n            //when this is less, goes higher.\n            //So 0 is top of the sheet, 22 or so is touching the music system margin\n\n            relative.y = firstSystemAbsoluteTopMargin;\n            //relative.y = - this.rules.SystemComposerDistance;\n            //relative.y = -firstStaffLine.PositionAndShape.Size.height;\n            // TODO only add measure label height if rendering labels and composer measure has label\n            // TODO y-align with lyricist? which is harder if they have different bbox parents (page and firstStaffLine).\n            // when the pageWidth gets fixed, we could use page as parent again.\n\n            //Sufficient for now to just use the longest composer entry instead of bottom.\n            //Otherwise we need to construct a 'bottom line' for the text block\n            // const endX: number = topStaffline.PositionAndShape.BorderMarginRight;\n            // const startX: number = endX - composer.PositionAndShape.Size.width;\n            // const currentMin: number = skyBottomLineCalculator.getSkyLineMinInRange(startX, endX);\n\n            relative.y -= this.rules.SystemComposerDistance;\n            const lines: number = composer.TextLines?.length;\n            if (lines > 1) { //Don't want to affect existing behavior. but this doesn't check bboxes for clip\n                relative.y -= composer.PositionAndShape.BorderBottom * (lines - 1) / (lines);\n            }\n            //const newSkylineY: number = currentMin; // don't add composer label height to skyline\n            //- firstSystemAbsoluteTopMargin - this.rules.SystemComposerDistance - composer.PositionAndShape.MarginSize.height;\n            //skyBottomLineCalculator.updateSkyLineInRange(startX, endX, newSkylineY); // this can fix skyline for generateImages for some reason\n            composerRelativeY = relative.y; // for lyricist label\n\n            composer.PositionAndShape.RelativePosition = relative;\n            page.Labels.push(composer);\n        }\n        const lyricist: GraphicalLabel = this.graphicalMusicSheet.Lyricist;\n        if (lyricist) {\n            lyricist.PositionAndShape.Parent = page.PositionAndShape;\n            lyricist.setLabelPositionAndShapeBorders();\n            const relative: PointF2D = new PointF2D();\n            relative.x = this.rules.PageLeftMargin;\n            relative.y = firstSystemAbsoluteTopMargin;\n            // const startX: number = topStaffline.PositionAndShape.BorderMarginLeft - relative.x;\n            // const endX: number = startX + lyricist.PositionAndShape.Size.width;\n            // const currentMin: number = skyBottomLineCalculator.getSkyLineMinInRange(startX, endX);\n\n            relative.y += lyricist.PositionAndShape.BorderBottom;\n            relative.y = Math.min(relative.y, composerRelativeY ?? Number.MAX_SAFE_INTEGER);\n            // same height as composer label (at least not lower). ?? prevents undefined -> Math.min returns NaN\n\n            //skyBottomLineCalculator.updateSkyLineInRange(startX, endX, currentMin - lyricist.PositionAndShape.MarginSize.height);\n            //relative.y = Math.max(relative.y, composer.PositionAndShape.RelativePosition.y);\n            lyricist.PositionAndShape.RelativePosition = relative;\n            page.Labels.push(lyricist);\n        }\n    }\n\n    protected createGraphicalTies(): void {\n        for (let measureIndex: number = 0; measureIndex < this.graphicalMusicSheet.ParentMusicSheet.SourceMeasures.length; measureIndex++) {\n            const sourceMeasure: SourceMeasure = this.graphicalMusicSheet.ParentMusicSheet.SourceMeasures[measureIndex];\n            for (let staffIndex: number = 0; staffIndex < sourceMeasure.CompleteNumberOfStaves; staffIndex++) {\n                for (let j: number = 0; j < sourceMeasure.VerticalSourceStaffEntryContainers.length; j++) {\n                    const sourceStaffEntry: SourceStaffEntry = sourceMeasure.VerticalSourceStaffEntryContainers[j].StaffEntries[staffIndex];\n                    if (sourceStaffEntry) {\n                        const startStaffEntry: GraphicalStaffEntry = this.graphicalMusicSheet.findGraphicalStaffEntryFromMeasureList(\n                            staffIndex, measureIndex, sourceStaffEntry\n                        );\n                        if (startStaffEntry) {\n                            startStaffEntry.GraphicalTies.clear(); // don't duplicate ties when calling render() again\n                            startStaffEntry.ties.clear();\n                        }\n\n                        for (let idx: number = 0, len: number = sourceStaffEntry.VoiceEntries.length; idx < len; ++idx) {\n                            const voiceEntry: VoiceEntry = sourceStaffEntry.VoiceEntries[idx];\n                            for (let idx2: number = 0, len2: number = voiceEntry.Notes.length; idx2 < len2; ++idx2) {\n                                const note: Note = voiceEntry.Notes[idx2];\n                                if (note.NoteTie) {\n                                    const tie: Tie = note.NoteTie;\n                                    if (note === note.NoteTie.Notes.last()) {\n                                        continue; // nothing to do on last note. don't create last tie twice.\n                                    }\n                                    if (startStaffEntry) {\n                                        for (const gTie of startStaffEntry.GraphicalTies) {\n                                            if (gTie.Tie === tie) {\n                                                continue; // don't handle the same tie on the same startStaffEntry twice\n                                            }\n                                        }\n                                    }\n                                    this.handleTie(tie, startStaffEntry, staffIndex, measureIndex);\n                                }\n                            }\n                        }\n                        this.setTieDirections(startStaffEntry);\n                    }\n                }\n            }\n        }\n    }\n\n    private handleTie(tie: Tie, startGraphicalStaffEntry: GraphicalStaffEntry, staffIndex: number, measureIndex: number): void {\n        if (!startGraphicalStaffEntry) {\n            // console.log('tie not found in measure number ' + measureIndex - 1);\n            return;\n        }\n        startGraphicalStaffEntry.ties.push(tie);\n\n        let startGse: GraphicalStaffEntry = startGraphicalStaffEntry;\n        let startNote: GraphicalNote = undefined;\n        let endGse: GraphicalStaffEntry = undefined;\n        let endNote: GraphicalNote = undefined;\n        for (let i: number = 1; i < tie.Notes.length; i++) {\n            startNote = startGse.findTieGraphicalNoteFromNote(tie.Notes[i - 1]);\n            endGse = this.graphicalMusicSheet.GetGraphicalFromSourceStaffEntry(tie.Notes[i].ParentStaffEntry);\n            if (!endGse) {\n                continue;\n            }\n            endNote = endGse.findTieGraphicalNoteFromNote(tie.Notes[i]);\n            if (startNote !== undefined && endNote !== undefined && endGse) {\n                if (!startNote.sourceNote.PrintObject || !endNote.sourceNote.PrintObject) {\n                    continue;\n                }\n                const graphicalTie: GraphicalTie = this.createGraphicalTie(tie, startGse, endGse, startNote, endNote);\n                startGse.GraphicalTies.push(graphicalTie);\n                if (this.staffEntriesWithGraphicalTies.indexOf(startGse) >= 0) {\n                    this.staffEntriesWithGraphicalTies.push(startGse);\n                }\n            }\n            startGse = endGse;\n        }\n    }\n\n    private setTieDirections(staffEntry: GraphicalStaffEntry): void {\n        if (!staffEntry) {\n            return;\n        }\n        const ties: Tie[] = staffEntry.ties;\n        if (ties.length > 1) {\n            let highestNote: Note = undefined;\n            for (const gseTie of ties) {\n                const tieNote: Note = gseTie.Notes[0];\n                if (!highestNote || tieNote.Pitch.getHalfTone() > highestNote.Pitch.getHalfTone()) {\n                    highestNote = tieNote;\n                }\n            }\n            for (const gseTie of ties) {\n                if (gseTie.TieDirection === PlacementEnum.NotYetDefined) { // only set/change if not already set by xml\n                    if (gseTie.Notes[0] === highestNote) {\n                        gseTie.TieDirection = PlacementEnum.Above;\n                    } else {\n                        gseTie.TieDirection = PlacementEnum.Below;\n                    }\n                }\n            }\n        }\n    }\n\n    private createAccidentalCalculators(): AccidentalCalculator[] {\n        const accidentalCalculators: AccidentalCalculator[] = [];\n        const firstSourceMeasure: SourceMeasure = this.graphicalMusicSheet.ParentMusicSheet.getFirstSourceMeasure();\n        if (firstSourceMeasure) {\n            for (let i: number = 0; i < firstSourceMeasure.CompleteNumberOfStaves; i++) {\n                const accidentalCalculator: AccidentalCalculator = new AccidentalCalculator();\n                accidentalCalculators.push(accidentalCalculator);\n                if (firstSourceMeasure.FirstInstructionsStaffEntries[i]) {\n                    for (let idx: number = 0, len: number = firstSourceMeasure.FirstInstructionsStaffEntries[i].Instructions.length; idx < len; ++idx) {\n                        const abstractNotationInstruction: AbstractNotationInstruction = firstSourceMeasure.FirstInstructionsStaffEntries[i].Instructions[idx];\n                        if (abstractNotationInstruction instanceof KeyInstruction) {\n                            const keyInstruction: KeyInstruction = <KeyInstruction>abstractNotationInstruction;\n                            accidentalCalculator.ActiveKeyInstruction = keyInstruction;\n                        }\n                    }\n                }\n            }\n        }\n        return accidentalCalculators;\n    }\n\n    private calculateVerticalContainersList(): void {\n        const numberOfEntries: number = this.graphicalMusicSheet.MeasureList[0].length;\n        for (let i: number = 0; i < this.graphicalMusicSheet.MeasureList.length; i++) {\n            for (let j: number = 0; j < numberOfEntries; j++) {\n                const measure: GraphicalMeasure = this.graphicalMusicSheet.MeasureList[i][j];\n                if (!measure) {\n                    continue;\n                }\n                for (let idx: number = 0, len: number = measure.staffEntries.length; idx < len; ++idx) {\n                    const graphicalStaffEntry: GraphicalStaffEntry = measure.staffEntries[idx];\n                    const verticalContainer: VerticalGraphicalStaffEntryContainer =\n                        this.graphicalMusicSheet.getOrCreateVerticalContainer(graphicalStaffEntry.getAbsoluteTimestamp());\n                    if (verticalContainer) {\n                        verticalContainer.StaffEntries[j] = graphicalStaffEntry;\n                        graphicalStaffEntry.parentVerticalContainer = verticalContainer;\n                    }\n                }\n            }\n        }\n    }\n\n    private setIndicesToVerticalGraphicalContainers(): void {\n        for (let i: number = 0; i < this.graphicalMusicSheet.VerticalGraphicalStaffEntryContainers.length; i++) {\n            this.graphicalMusicSheet.VerticalGraphicalStaffEntryContainers[i].Index = i;\n        }\n    }\n\n    private createGraphicalMeasuresForSourceMeasure(sourceMeasure: SourceMeasure, accidentalCalculators: AccidentalCalculator[],\n                                                    openLyricWords: LyricWord[],\n                                                    openOctaveShifts: OctaveShiftParams[], activeClefs: ClefInstruction[]): GraphicalMeasure[] {\n        this.initGraphicalMeasuresCreation();\n        const verticalMeasureList: GraphicalMeasure[] = []; // (VexFlowMeasure, extends GraphicalMeasure)\n        const openBeams: Beam[] = [];\n        const openTuplets: Tuplet[] = [];\n        const staffEntryLinks: StaffEntryLink[] = [];\n        let restInAllGraphicalMeasures: boolean = true;\n        for (let staffIndex: number = 0; staffIndex < sourceMeasure.CompleteNumberOfStaves; staffIndex++) {\n            const measure: GraphicalMeasure = this.createGraphicalMeasure( // (VexFlowMeasure)\n                sourceMeasure, openTuplets, openBeams,\n                accidentalCalculators[staffIndex], activeClefs, openOctaveShifts, openLyricWords, staffIndex, staffEntryLinks\n            );\n            restInAllGraphicalMeasures = restInAllGraphicalMeasures && measure.hasOnlyRests;\n            verticalMeasureList.push(measure);\n        }\n        sourceMeasure.allRests = restInAllGraphicalMeasures;\n        sourceMeasure.VerticalMeasureList = verticalMeasureList; // much easier way to link sourceMeasure to graphicalMeasures than Dictionary\n        //this.graphicalMusicSheet.sourceToGraphicalMeasureLinks.setValue(sourceMeasure, verticalMeasureList); // overwrites entries because:\n        //this.graphicalMusicSheet.sourceToGraphicalMeasureLinks[sourceMeasure] = verticalMeasureList; // can't use SourceMeasure as key.\n        // to save the reference by dictionary we would need two Dictionaries, id -> sourceMeasure and id -> GraphicalMeasure.\n        return verticalMeasureList;\n    }\n\n    private createGraphicalMeasure(sourceMeasure: SourceMeasure, openTuplets: Tuplet[], openBeams: Beam[],\n                                   accidentalCalculator: AccidentalCalculator, activeClefs: ClefInstruction[],\n                                   openOctaveShifts: OctaveShiftParams[], openLyricWords: LyricWord[], staffIndex: number,\n                                   staffEntryLinks: StaffEntryLink[]): GraphicalMeasure {\n        const staff: Staff = this.graphicalMusicSheet.ParentMusicSheet.getStaffFromIndex(staffIndex);\n        let measure: GraphicalMeasure = undefined;\n        if (activeClefs[staffIndex].ClefType === ClefEnum.TAB) {\n            staff.isTab = true;\n            measure = MusicSheetCalculator.symbolFactory.createTabStaffMeasure(sourceMeasure, staff);\n        } else if (sourceMeasure.multipleRestMeasures && this.rules.RenderMultipleRestMeasures) {\n            measure = MusicSheetCalculator.symbolFactory.createMultiRestMeasure(sourceMeasure, staff);\n        } else if (sourceMeasure.multipleRestMeasureNumber > 1) {\n            return undefined; // don't need to create a graphical measure that is within a multiple rest measure\n        } else {\n            measure = MusicSheetCalculator.symbolFactory.createGraphicalMeasure(sourceMeasure, staff);\n        }\n        measure.hasError = sourceMeasure.getErrorInMeasure(staffIndex);\n        // check for key instruction changes\n        if (sourceMeasure.FirstInstructionsStaffEntries[staffIndex]) {\n            for (let idx: number = 0, len: number = sourceMeasure.FirstInstructionsStaffEntries[staffIndex].Instructions.length; idx < len; ++idx) {\n                const instruction: AbstractNotationInstruction = sourceMeasure.FirstInstructionsStaffEntries[staffIndex].Instructions[idx];\n                if (instruction instanceof KeyInstruction) {\n                    const key: KeyInstruction = KeyInstruction.copy(instruction);\n                    const transposeHalftones: number = measure.getTransposedHalftones();\n                    if (transposeHalftones !== 0 &&\n                        measure.ParentStaff.ParentInstrument.MidiInstrumentId !== MidiInstrument.Percussion &&\n                        MusicSheetCalculator.transposeCalculator) {\n                        MusicSheetCalculator.transposeCalculator.transposeKey(\n                            key, transposeHalftones\n                        );\n                    }\n                    accidentalCalculator.ActiveKeyInstruction = key;\n                }\n            }\n        }\n        // check for octave shifts\n        const octaveShifts: MultiExpression[] = [];\n        for (let idx: number = 0, len: number = sourceMeasure.StaffLinkedExpressions[staffIndex].length; idx < len; ++idx) {\n            const multiExpression: MultiExpression = sourceMeasure.StaffLinkedExpressions[staffIndex][idx];\n            if (multiExpression.OctaveShiftStart) {\n                octaveShifts.push(multiExpression);\n                const openOctaveShift: OctaveShift = multiExpression.OctaveShiftStart;\n                let absoluteEnd: Fraction = openOctaveShift?.ParentEndMultiExpression?.AbsoluteTimestamp;\n                if (!openOctaveShift?.ParentEndMultiExpression) {\n                    const measureEndTimestamp: Fraction = Fraction.plus(sourceMeasure.AbsoluteTimestamp, sourceMeasure.Duration);\n                    absoluteEnd = measureEndTimestamp;\n                    // TODO better handling if end expression missing\n                    // old comment:\n                    // TODO check if octaveshift end exists, otherwise set to last measure end. only necessary if xml was cut manually and is incomplete\n                }\n                openOctaveShifts[staffIndex] = new OctaveShiftParams(\n                    openOctaveShift, multiExpression?.AbsoluteTimestamp,\n                    absoluteEnd\n                );\n            }\n        }\n        // create GraphicalStaffEntries - always check for possible null Entry\n        for (let entryIndex: number = 0; entryIndex < sourceMeasure.VerticalSourceStaffEntryContainers.length; entryIndex++) {\n            const sourceStaffEntry: SourceStaffEntry = sourceMeasure.VerticalSourceStaffEntryContainers[entryIndex].StaffEntries[staffIndex];\n            // is there a SourceStaffEntry at this Index\n            if (sourceStaffEntry) {\n                // a SourceStaffEntry exists\n                // is there an inStaff ClefInstruction? -> update activeClef\n                for (let idx: number = 0, len: number = sourceStaffEntry.Instructions.length; idx < len; ++idx) {\n                    const abstractNotationInstruction: AbstractNotationInstruction = sourceStaffEntry.Instructions[idx];\n                    if (abstractNotationInstruction instanceof ClefInstruction) {\n                        activeClefs[staffIndex] = <ClefInstruction>abstractNotationInstruction;\n                    }\n                }\n                // create new GraphicalStaffEntry\n                const graphicalStaffEntry: GraphicalStaffEntry = MusicSheetCalculator.symbolFactory.createStaffEntry(sourceStaffEntry, measure);\n                if (entryIndex < measure.staffEntries.length) {\n                    // a GraphicalStaffEntry has been inserted already at this Index (from Tie)\n                    measure.addGraphicalStaffEntryAtTimestamp(graphicalStaffEntry);\n                } else {\n                    measure.addGraphicalStaffEntry(graphicalStaffEntry);\n                }\n\n                const linkedNotes: Note[] = [];\n                if (sourceStaffEntry.Link) {\n                    sourceStaffEntry.findLinkedNotes(linkedNotes);\n                    this.handleStaffEntryLink(graphicalStaffEntry, staffEntryLinks);\n                }\n                // check for possible OctaveShift\n                let octaveShiftValue: OctaveEnum = OctaveEnum.NONE;\n                if (openOctaveShifts[staffIndex]) {\n                    if (openOctaveShifts[staffIndex].getAbsoluteStartTimestamp.lte(sourceStaffEntry.AbsoluteTimestamp) &&\n                        sourceStaffEntry.AbsoluteTimestamp.lte(openOctaveShifts[staffIndex].getAbsoluteEndTimestamp)) {\n                        octaveShiftValue = openOctaveShifts[staffIndex].getOpenOctaveShift.Type;\n                    }\n                }\n                if (octaveShiftValue === OctaveEnum.NONE) {\n                    // check for existing octave shifts outside openOctaveShifts\n                    for (const octaveShift of octaveShifts) {\n                        if (octaveShift.OctaveShiftStart?.ParentStartMultiExpression?.AbsoluteTimestamp.lte(sourceStaffEntry.AbsoluteTimestamp) &&\n                            !octaveShift.OctaveShiftStart?.ParentEndMultiExpression?.AbsoluteTimestamp.lt(sourceStaffEntry.AbsoluteTimestamp)) {\n                                octaveShiftValue = octaveShift.OctaveShiftStart.Type;\n                                break;\n                            }\n                    }\n                }\n                // for each visible Voice create the corresponding GraphicalNotes\n                for (let idx: number = 0, len: number = sourceStaffEntry.VoiceEntries.length; idx < len; ++idx) {\n                    const voiceEntry: VoiceEntry = sourceStaffEntry.VoiceEntries[idx];\n                    // Normal Notes...\n                    octaveShiftValue = this.handleVoiceEntry(\n                        voiceEntry, graphicalStaffEntry,\n                        accidentalCalculator, openLyricWords,\n                        activeClefs[staffIndex], openTuplets,\n                        openBeams, octaveShiftValue, staffIndex,\n                        linkedNotes, sourceStaffEntry\n                    );\n                }\n                // SourceStaffEntry has inStaff ClefInstruction -> create graphical clef\n                if (sourceStaffEntry.Instructions.length > 0) {\n                    const clefInstruction: ClefInstruction = <ClefInstruction>sourceStaffEntry.Instructions[0];\n                    MusicSheetCalculator.symbolFactory.createInStaffClef(graphicalStaffEntry, clefInstruction);\n                }\n                if (this.rules.RenderChordSymbols && sourceStaffEntry.ChordContainers?.length > 0) {\n                    sourceStaffEntry.ParentStaff.ParentInstrument.HasChordSymbols = true;\n                    MusicSheetCalculator.symbolFactory.createChordSymbols(\n                        sourceStaffEntry,\n                        graphicalStaffEntry,\n                        accidentalCalculator.ActiveKeyInstruction,\n                        this.graphicalMusicSheet.ParentMusicSheet.Transpose);\n                }\n            }\n        }\n\n        accidentalCalculator.doCalculationsAtEndOfMeasure();\n        // update activeClef given at end of measure if needed\n        if (sourceMeasure.LastInstructionsStaffEntries[staffIndex]) {\n            const lastStaffEntry: SourceStaffEntry = sourceMeasure.LastInstructionsStaffEntries[staffIndex];\n            for (let idx: number = 0, len: number = lastStaffEntry.Instructions.length; idx < len; ++idx) {\n                const abstractNotationInstruction: AbstractNotationInstruction = lastStaffEntry.Instructions[idx];\n                if (abstractNotationInstruction instanceof ClefInstruction) {\n                    activeClefs[staffIndex] = <ClefInstruction>abstractNotationInstruction;\n                }\n            }\n        }\n        for (let idx: number = 0, len: number = sourceMeasure.StaffLinkedExpressions[staffIndex].length; idx < len; ++idx) {\n            const multiExpression: MultiExpression = sourceMeasure.StaffLinkedExpressions[staffIndex][idx];\n            if (multiExpression.OctaveShiftEnd !== undefined && openOctaveShifts[staffIndex] !== undefined &&\n                multiExpression.OctaveShiftEnd === openOctaveShifts[staffIndex].getOpenOctaveShift) {\n                    openOctaveShifts[staffIndex] = undefined;\n            }\n        }\n        // check wantedStemDirections of beam notes at end of measure (e.g. for beam with grace notes)\n        for (const staffEntry of measure.staffEntries) {\n            for (const voiceEntry of staffEntry.graphicalVoiceEntries) {\n                this.setBeamNotesWantedStemDirections(voiceEntry.parentVoiceEntry);\n            }\n        }\n        // if there are no staffEntries in this measure, create a rest for the whole measure:\n        // check OSMDOptions.fillEmptyMeasuresWithWholeRest\n        if (this.rules.FillEmptyMeasuresWithWholeRest >= 1) { // fill measures with no notes given with whole rests, visible (1) or invisible (2)\n            if (measure.staffEntries.length === 0) {\n                const sourceStaffEntry: SourceStaffEntry = new SourceStaffEntry(\n                    new VerticalSourceStaffEntryContainer(measure.parentSourceMeasure,\n                                                          measure.parentSourceMeasure.AbsoluteTimestamp,\n                                                          measure.parentSourceMeasure.CompleteNumberOfStaves),\n                    staff);\n                const voiceEntry: VoiceEntry = new VoiceEntry(new Fraction(0, 1), staff.Voices[0], sourceStaffEntry);\n                const note: Note = new Note(voiceEntry, sourceStaffEntry, Fraction.createFromFraction(sourceMeasure.Duration), undefined, sourceMeasure);\n                note.PrintObject = this.rules.FillEmptyMeasuresWithWholeRest === FillEmptyMeasuresWithWholeRests.YesVisible;\n                  // don't display whole rest that wasn't given in XML, only for layout/voice completion\n                voiceEntry.Notes.push(note);\n                const graphicalStaffEntry: GraphicalStaffEntry = MusicSheetCalculator.symbolFactory.createStaffEntry(sourceStaffEntry, measure);\n                measure.addGraphicalStaffEntry(graphicalStaffEntry);\n                graphicalStaffEntry.relInMeasureTimestamp = voiceEntry.Timestamp;\n                const gve: GraphicalVoiceEntry = MusicSheetCalculator.symbolFactory.createVoiceEntry(voiceEntry, graphicalStaffEntry);\n                graphicalStaffEntry.graphicalVoiceEntries.push(gve);\n                const graphicalNote: GraphicalNote = MusicSheetCalculator.symbolFactory.createNote(\n                    note,\n                    gve,\n                    new ClefInstruction(),\n                    OctaveEnum.NONE, undefined);\n                MusicSheetCalculator.stafflineNoteCalculator.trackNote(graphicalNote);\n                gve.notes.push(graphicalNote);\n            }\n        }\n\n        measure.hasOnlyRests = true;\n        //if staff entries empty, loop will not start. so true is valid\n        for (const graphicalStaffEntry of measure.staffEntries) {\n            //Loop until we get just one false\n            measure.hasOnlyRests = graphicalStaffEntry.hasOnlyRests();\n            if (!measure.hasOnlyRests) {\n                break;\n            }\n        }\n\n        return measure;\n    }\n\n    private checkNoteForAccidental(graphicalNote: GraphicalNote, accidentalCalculator: AccidentalCalculator, activeClef: ClefInstruction,\n                                   octaveEnum: OctaveEnum): void {\n        let pitch: Pitch = graphicalNote.sourceNote.Pitch;\n        const transposeHalftones: number = graphicalNote.parentVoiceEntry.parentStaffEntry.parentMeasure.getTransposedHalftones();\n        if (transposeHalftones !== 0 && graphicalNote.sourceNote.ParentStaffEntry.ParentStaff.ParentInstrument.MidiInstrumentId !== MidiInstrument.Percussion) {\n            pitch = graphicalNote.Transpose(\n                accidentalCalculator.ActiveKeyInstruction, activeClef, transposeHalftones, octaveEnum\n            );\n            graphicalNote.sourceNote.TransposedPitch = pitch;\n        }\n        graphicalNote.sourceNote.halfTone = pitch.getHalfTone();\n        accidentalCalculator.checkAccidental(graphicalNote, pitch);\n    }\n\n    // private createStaffEntryForTieNote(measure: StaffMeasure, absoluteTimestamp: Fraction, openTie: Tie): GraphicalStaffEntry {\n    //     let graphicalStaffEntry: GraphicalStaffEntry;\n    //     graphicalStaffEntry = MusicSheetCalculator.symbolFactory.createStaffEntry(openTie.Start.ParentStaffEntry, measure);\n    //     graphicalStaffEntry.relInMeasureTimestamp = Fraction.minus(absoluteTimestamp, measure.parentSourceMeasure.AbsoluteTimestamp);\n    //     this.resetYPositionForLeadSheet(graphicalStaffEntry.PositionAndShape);\n    //     measure.addGraphicalStaffEntryAtTimestamp(graphicalStaffEntry);\n    //     return graphicalStaffEntry;\n    // }\n\n    private handleStaffEntries(staffIsPercussionArray: Array<boolean>): void {\n        for (let idx: number = 0, len: number = this.graphicalMusicSheet.MeasureList.length; idx < len; ++idx) {\n            const measures: GraphicalMeasure[] = this.graphicalMusicSheet.MeasureList[idx];\n            for (let idx2: number = 0, len2: number = measures.length; idx2 < len2; ++idx2) {\n                const measure: GraphicalMeasure = measures[idx2];\n                if (!measure) {\n                    continue;\n                }\n                //This property is active...\n                if (this.rules.PercussionOneLineCutoff !== undefined && this.rules.PercussionOneLineCutoff !== 0) {\n                    //We have a percussion clef, check to see if this property applies...\n                    if (staffIsPercussionArray[idx2]) {\n                        //-1 means always trigger, or we are under the cutoff number specified\n                        if (this.rules.PercussionOneLineCutoff === -1 ||\n                            MusicSheetCalculator.stafflineNoteCalculator.getStafflineUniquePositionCount(idx2) < this.rules.PercussionOneLineCutoff) {\n                            measure.ParentStaff.StafflineCount = 1;\n                        }\n                    }\n                }\n                for (const graphicalStaffEntry of measure.staffEntries) {\n                    if (graphicalStaffEntry.parentMeasure !== undefined\n                        && graphicalStaffEntry.graphicalVoiceEntries.length > 0\n                        && graphicalStaffEntry.graphicalVoiceEntries[0].notes.length > 0) {\n                        this.layoutVoiceEntries(graphicalStaffEntry, idx2);\n                        this.layoutStaffEntry(graphicalStaffEntry);\n                    }\n                }\n                this.graphicalMeasureCreatedCalculations(measure);\n            }\n        }\n    }\n\n    protected calculateSkyBottomLines(): void {\n        // override\n    }\n\n    /**\n     * Re-adjust the x positioning of expressions.\n     */\n    protected calculateExpressionAlignements(): void {\n        // override\n    }\n\n    // does nothing for now, because layoutBeams() is an empty method\n    // private calculateBeams(): void {\n    //     for (let idx2: number = 0, len2: number = this.musicSystems.length; idx2 < len2; ++idx2) {\n    //         const musicSystem: MusicSystem = this.musicSystems[idx2];\n    //         for (let idx3: number = 0, len3: number = musicSystem.StaffLines.length; idx3 < len3; ++idx3) {\n    //             const staffLine: StaffLine = musicSystem.StaffLines[idx3];\n    //             for (let idx4: number = 0, len4: number = staffLine.Measures.length; idx4 < len4; ++idx4) {\n    //                 const measure: GraphicalMeasure = staffLine.Measures[idx4];\n    //                 for (let idx5: number = 0, len5: number = measure.staffEntries.length; idx5 < len5; ++idx5) {\n    //                     const staffEntry: GraphicalStaffEntry = measure.staffEntries[idx5];\n    //                     this.layoutBeams(staffEntry);\n    //                 }\n    //             }\n    //         }\n    //     }\n    // }\n\n    private calculateStaffEntryArticulationMarks(): void {\n        for (let idx2: number = 0, len2: number = this.musicSystems.length; idx2 < len2; ++idx2) {\n            const system: MusicSystem = this.musicSystems[idx2];\n            for (let idx3: number = 0, len3: number = system.StaffLines.length; idx3 < len3; ++idx3) {\n                const line: StaffLine = system.StaffLines[idx3];\n                for (let idx4: number = 0, len4: number = line.Measures.length; idx4 < len4; ++idx4) {\n                    const measure: GraphicalMeasure = line.Measures[idx4];\n                    for (let idx5: number = 0, len5: number = measure.staffEntries.length; idx5 < len5; ++idx5) {\n                        const graphicalStaffEntry: GraphicalStaffEntry = measure.staffEntries[idx5];\n                        for (let idx6: number = 0, len6: number = graphicalStaffEntry.sourceStaffEntry.VoiceEntries.length; idx6 < len6; ++idx6) {\n                            const voiceEntry: VoiceEntry = graphicalStaffEntry.sourceStaffEntry.VoiceEntries[idx6];\n                            if (voiceEntry.Articulations.length > 0) {\n                                this.layoutArticulationMarks(voiceEntry.Articulations, voiceEntry, graphicalStaffEntry);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    private calculateOrnaments(): void {\n        for (let idx2: number = 0, len2: number = this.musicSystems.length; idx2 < len2; ++idx2) {\n            const system: MusicSystem = this.musicSystems[idx2];\n            for (let idx3: number = 0, len3: number = system.StaffLines.length; idx3 < len3; ++idx3) {\n                const line: StaffLine = system.StaffLines[idx3];\n                for (let idx4: number = 0, len4: number = line.Measures.length; idx4 < len4; ++idx4) {\n                    const measure: GraphicalMeasure = line.Measures[idx4];\n                    for (let idx5: number = 0, len5: number = measure.staffEntries.length; idx5 < len5; ++idx5) {\n                        const graphicalStaffEntry: GraphicalStaffEntry = measure.staffEntries[idx5];\n                        for (let idx6: number = 0, len6: number = graphicalStaffEntry.sourceStaffEntry.VoiceEntries.length; idx6 < len6; ++idx6) {\n                            const voiceEntry: VoiceEntry = graphicalStaffEntry.sourceStaffEntry.VoiceEntries[idx6];\n                            if (voiceEntry.OrnamentContainer) {\n                                if (voiceEntry.hasTie() && !graphicalStaffEntry.relInMeasureTimestamp.Equals(voiceEntry.Timestamp)) {\n                                    continue;\n                                }\n                                this.layoutOrnament(voiceEntry.OrnamentContainer, voiceEntry, graphicalStaffEntry);\n                                if (!(this.staffEntriesWithOrnaments.indexOf(graphicalStaffEntry) !== -1)) {\n                                    this.staffEntriesWithOrnaments.push(graphicalStaffEntry);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    public calculateFingerings(): void {\n        if (this.rules.FingeringPosition === PlacementEnum.Left ||\n            this.rules.FingeringPosition === PlacementEnum.Right) {\n                return;\n        }\n        for (const system of this.musicSystems) {\n            for (const line of system.StaffLines) {\n                for (const measure of line.Measures) {\n                    const placement: PlacementEnum = measure.isUpperStaffOfInstrument() ? PlacementEnum.Above : PlacementEnum.Below;\n                    for (const gse of measure.staffEntries) {\n                        gse.FingeringEntries = [];\n                        const skybottomcalculator: SkyBottomLineCalculator = line.SkyBottomLineCalculator;\n                        const staffEntryPositionX: number = gse.PositionAndShape.RelativePosition.x +\n                            measure.PositionAndShape.RelativePosition.x;\n                        const fingerings: TechnicalInstruction[] = [];\n                        for (const voiceEntry of gse.graphicalVoiceEntries) {\n                            for (const note of voiceEntry.notes) {\n                                const sourceNote: Note = note.sourceNote;\n                                if (sourceNote.Fingering && !sourceNote.IsGraceNote) {\n                                    fingerings.push(sourceNote.Fingering);\n                                }\n                            }\n                        }\n                        if (placement === PlacementEnum.Below) {\n                            fingerings.reverse();\n                        }\n                        for (let i: number = 0; i < fingerings.length; i++) {\n                            const fingering: TechnicalInstruction = fingerings[i];\n                            const alignment: TextAlignmentEnum =\n                                placement === PlacementEnum.Above ? TextAlignmentEnum.CenterBottom : TextAlignmentEnum.CenterTop;\n                            const label: Label = new Label(fingering.value, alignment);\n                            const gLabel: GraphicalLabel = new GraphicalLabel(\n                                label, this.rules.FingeringTextSize, label.textAlignment, this.rules, line.PositionAndShape);\n                            const marginLeft: number = staffEntryPositionX + gLabel.PositionAndShape.BorderMarginLeft;\n                            const marginRight: number = staffEntryPositionX + gLabel.PositionAndShape.BorderMarginRight;\n                            let skybottomFurthest: number = undefined;\n                            if (placement === PlacementEnum.Above) {\n                                skybottomFurthest = skybottomcalculator.getSkyLineMinInRange(marginLeft, marginRight);\n                            } else {\n                                skybottomFurthest = skybottomcalculator.getBottomLineMaxInRange(marginLeft, marginRight);\n                            }\n                            let yShift: number = 0;\n                            if (i === 0) {\n                                yShift += this.rules.FingeringOffsetY;\n                                if (placement === PlacementEnum.Above) {\n                                    yShift += 0.1; // above fingerings are a bit closer to the notes than below ones for some reason\n                                }\n                            } else {\n                                yShift += this.rules.FingeringPaddingY;\n                            }\n                            if (placement === PlacementEnum.Above) {\n                                yShift *= -1;\n                            }\n                            gLabel.PositionAndShape.RelativePosition.y += skybottomFurthest + yShift;\n                            gLabel.PositionAndShape.RelativePosition.x = staffEntryPositionX;\n                            gLabel.setLabelPositionAndShapeBorders();\n                            gLabel.PositionAndShape.calculateBoundingBox();\n                            gse.FingeringEntries.push(gLabel);\n                            const start: number = gLabel.PositionAndShape.RelativePosition.x + gLabel.PositionAndShape.BorderLeft;\n                            //start -= line.PositionAndShape.RelativePosition.x;\n                            const end: number = start - gLabel.PositionAndShape.BorderLeft + gLabel.PositionAndShape.BorderRight;\n                            if (placement === PlacementEnum.Above) {\n                                skybottomcalculator.updateSkyLineInRange(\n                                    start, end, gLabel.PositionAndShape.RelativePosition.y + gLabel.PositionAndShape.BorderTop); // BorderMarginTop too much\n                            } else if (placement === PlacementEnum.Below) {\n                                skybottomcalculator.updateBottomLineInRange(\n                                    start, end, gLabel.PositionAndShape.RelativePosition.y + gLabel.PositionAndShape.BorderBottom);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    private optimizeRestPlacement(): void {\n        for (let idx2: number = 0, len2: number = this.musicSystems.length; idx2 < len2; ++idx2) {\n            const system: MusicSystem = this.musicSystems[idx2];\n            for (let idx3: number = 0, len3: number = system.StaffLines.length; idx3 < len3; ++idx3) {\n                const line: StaffLine = system.StaffLines[idx3];\n                for (let idx4: number = 0, len4: number = line.Measures.length; idx4 < len4; ++idx4) {\n                    const measure: GraphicalMeasure = line.Measures[idx4];\n                    for (let idx5: number = 0, len5: number = measure.staffEntries.length; idx5 < len5; ++idx5) {\n                        const graphicalStaffEntry: GraphicalStaffEntry = measure.staffEntries[idx5];\n                        this.optimizeRestNotePlacement(graphicalStaffEntry, measure);\n                    }\n                }\n            }\n        }\n    }\n\n    private calculateTwoRestNotesPlacementWithCollisionDetection(graphicalStaffEntry: GraphicalStaffEntry): void {\n        const firstRestNote: GraphicalNote = graphicalStaffEntry.graphicalVoiceEntries[0].notes[0];\n        const secondRestNote: GraphicalNote = graphicalStaffEntry.graphicalVoiceEntries[1].notes[0];\n        secondRestNote.PositionAndShape.RelativePosition = new PointF2D(0.0, 2.5);\n        graphicalStaffEntry.PositionAndShape.calculateAbsolutePositionsRecursiveWithoutTopelement();\n        firstRestNote.PositionAndShape.computeNonOverlappingPositionWithMargin(\n            graphicalStaffEntry.PositionAndShape, ColDirEnum.Up,\n            new PointF2D(0.0, secondRestNote.PositionAndShape.RelativePosition.y)\n        );\n        const relative: PointF2D = firstRestNote.PositionAndShape.RelativePosition;\n        relative.y -= 1.0;\n        firstRestNote.PositionAndShape.RelativePosition = relative;\n        graphicalStaffEntry.PositionAndShape.calculateBoundingBox();\n    }\n\n    private calculateRestNotePlacementWithCollisionDetectionFromGraphicalNote(graphicalStaffEntry: GraphicalStaffEntry): void {\n        let restNote: GraphicalNote;\n        let graphicalNotes: GraphicalNote[];\n        if (graphicalStaffEntry.graphicalVoiceEntries[0].notes[0].sourceNote.isRest()) {\n            restNote = graphicalStaffEntry.graphicalVoiceEntries[0].notes[0];\n            graphicalNotes = graphicalStaffEntry.graphicalVoiceEntries[1].notes;\n        } else {\n            graphicalNotes = graphicalStaffEntry.graphicalVoiceEntries[0].notes;\n            restNote = graphicalStaffEntry.graphicalVoiceEntries[1].notes[0];\n        }\n        //restNote.parallelVoiceEntryNotes = graphicalNotes; // TODO maybe save potentially colliding notes, check them in VexFlowConverter.StaveNote\n        let collision: boolean = false;\n        graphicalStaffEntry.PositionAndShape.calculateAbsolutePositionsRecursiveWithoutTopelement();\n        for (let idx: number = 0, len: number = graphicalNotes.length; idx < len; ++idx) {\n            const graphicalNote: GraphicalNote = graphicalNotes[idx];\n            if (restNote.PositionAndShape.marginCollisionDetection(graphicalNote.PositionAndShape)) {\n                // TODO bounding box of graphical note isn't set correctly yet.\n                // we could do manual collision checking here\n                collision = true;\n                break;\n            }\n        }\n        if (collision) {\n            if (restNote.sourceNote.ParentVoiceEntry.ParentVoice instanceof LinkedVoice) {\n                const bottomBorder: number = graphicalNotes[0].PositionAndShape.BorderMarginBottom + graphicalNotes[0].PositionAndShape.RelativePosition.y;\n                restNote.PositionAndShape.RelativePosition = new PointF2D(0.0, bottomBorder - restNote.PositionAndShape.BorderMarginTop + 0.5);\n            } else {\n                const last: GraphicalNote = graphicalNotes[graphicalNotes.length - 1];\n                const topBorder: number = last.PositionAndShape.BorderMarginTop + last.PositionAndShape.RelativePosition.y;\n                if (graphicalNotes[0].sourceNote.ParentVoiceEntry.ParentVoice instanceof LinkedVoice) {\n                    restNote.PositionAndShape.RelativePosition = new PointF2D(0.0, topBorder - restNote.PositionAndShape.BorderMarginBottom - 0.5);\n                } else {\n                    const bottomBorder: number = graphicalNotes[0].PositionAndShape.BorderMarginBottom + graphicalNotes[0].PositionAndShape.RelativePosition.y;\n                    if (bottomBorder < 2.0) {\n                        restNote.PositionAndShape.RelativePosition = new PointF2D(0.0, bottomBorder - restNote.PositionAndShape.BorderMarginTop + 0.5);\n                    } else {\n                        restNote.PositionAndShape.RelativePosition = new PointF2D(0.0, topBorder - restNote.PositionAndShape.BorderMarginBottom - 0.0);\n                    }\n                }\n            }\n        }\n        graphicalStaffEntry.PositionAndShape.calculateBoundingBox();\n    }\n\n    private calculateTieCurves(): void {\n        for (const musicSystem of this.musicSystems) {\n            for (const staffLine of musicSystem.StaffLines) {\n                for (const measure of staffLine.Measures) {\n                    for (const staffEntry of measure.staffEntries) {\n                        for (const graphicalTie of staffEntry.GraphicalTies) {\n                            if (graphicalTie.StartNote !== undefined && graphicalTie.StartNote.parentVoiceEntry.parentStaffEntry === staffEntry) {\n                                const tieIsAtSystemBreak: boolean = (\n                                    graphicalTie.StartNote.parentVoiceEntry.parentStaffEntry.parentMeasure.ParentStaffLine !==\n                                    graphicalTie.EndNote.parentVoiceEntry.parentStaffEntry.parentMeasure.ParentStaffLine\n                                );\n                                this.layoutGraphicalTie(graphicalTie, tieIsAtSystemBreak, measure.ParentStaff.isTab);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    private calculateLyricsPosition(): void {\n        const lyricStaffEntriesDict: Dictionary<StaffLine, GraphicalStaffEntry[]> = new Dictionary<StaffLine, GraphicalStaffEntry[]>();\n        // sort the lyriceVerseNumbers for every Instrument that has Lyrics\n        for (let idx: number = 0, len: number = this.graphicalMusicSheet.ParentMusicSheet.Instruments.length; idx < len; ++idx) {\n            const instrument: Instrument = this.graphicalMusicSheet.ParentMusicSheet.Instruments[idx];\n            if (instrument.HasLyrics && instrument.LyricVersesNumbers.length > 0) {\n                instrument.LyricVersesNumbers.sort();\n            }\n        }\n        // first calc lyrics text positions\n        for (let idx2: number = 0, len2: number = this.musicSystems.length; idx2 < len2; ++idx2) {\n            const musicSystem: MusicSystem = this.musicSystems[idx2];\n            for (let idx3: number = 0, len3: number = musicSystem.StaffLines.length; idx3 < len3; ++idx3) {\n                const staffLine: StaffLine = musicSystem.StaffLines[idx3];\n                const lyricsStaffEntries: GraphicalStaffEntry[] =\n                    this.calculateSingleStaffLineLyricsPosition(staffLine, staffLine.ParentStaff.ParentInstrument.LyricVersesNumbers);\n                lyricStaffEntriesDict.setValue(staffLine, lyricsStaffEntries);\n                this.calculateLyricsExtendsAndDashes(lyricStaffEntriesDict.getValue(staffLine));\n            }\n        }\n        // then fill in the lyric word dashes and lyrics extends/underscores\n        for (let idx2: number = 0, len2: number = this.musicSystems.length; idx2 < len2; ++idx2) {\n            const musicSystem: MusicSystem = this.musicSystems[idx2];\n            for (let idx3: number = 0, len3: number = musicSystem.StaffLines.length; idx3 < len3; ++idx3) {\n                const staffLine: StaffLine = musicSystem.StaffLines[idx3];\n                this.calculateLyricsExtendsAndDashes(lyricStaffEntriesDict.getValue(staffLine));\n            }\n        }\n    }\n\n    /**\n     * This method calculates the dashes within the syllables of a LyricWord\n     * @param lyricEntry\n     */\n    private calculateSingleLyricWord(lyricEntry: GraphicalLyricEntry): void {\n        // const skyBottomLineCalculator: SkyBottomLineCalculator = new SkyBottomLineCalculator (this.rules);\n        const graphicalLyricWord: GraphicalLyricWord = lyricEntry.ParentLyricWord;\n        const index: number = graphicalLyricWord.GraphicalLyricsEntries.indexOf(lyricEntry);\n        let nextLyricEntry: GraphicalLyricEntry = undefined;\n        if (index >= 0) {\n            nextLyricEntry = graphicalLyricWord.GraphicalLyricsEntries[index + 1];\n        }\n        if (!nextLyricEntry) {\n            return;\n        }\n        const startStaffLine: StaffLine = <StaffLine>lyricEntry.StaffEntryParent.parentMeasure.ParentStaffLine;\n        const nextStaffLine: StaffLine = <StaffLine>nextLyricEntry.StaffEntryParent.parentMeasure.ParentStaffLine;\n        const startStaffEntry: GraphicalStaffEntry = lyricEntry.StaffEntryParent;\n        const endStaffentry: GraphicalStaffEntry = nextLyricEntry.StaffEntryParent;\n\n        // if on the same StaffLine\n        if (lyricEntry.StaffEntryParent.parentMeasure.ParentStaffLine === nextLyricEntry.StaffEntryParent.parentMeasure.ParentStaffLine) {\n            // start- and End margins from the text Labels\n            const startX: number = startStaffEntry.parentMeasure.PositionAndShape.RelativePosition.x +\n                startStaffEntry.PositionAndShape.RelativePosition.x +\n                lyricEntry.GraphicalLabel.PositionAndShape.RelativePosition.x +\n                lyricEntry.GraphicalLabel.PositionAndShape.BorderMarginRight;\n\n            const endX: number = endStaffentry.parentMeasure.PositionAndShape.RelativePosition.x +\n                endStaffentry.PositionAndShape.RelativePosition.x +\n                lyricEntry.GraphicalLabel.PositionAndShape.RelativePosition.x +\n                nextLyricEntry.GraphicalLabel.PositionAndShape.BorderMarginLeft;\n            const y: number = lyricEntry.GraphicalLabel.PositionAndShape.RelativePosition.y;\n            let numberOfDashes: number = 1;\n            if ((endX - startX) > this.rules.MinimumDistanceBetweenDashes * 3) {\n                // *3: need distance between word to first dash, dash to dash, dash to next word\n                numberOfDashes = Math.floor((endX - startX) / this.rules.MinimumDistanceBetweenDashes) - 1;\n            }\n            // check distance and create the adequate number of Dashes\n            if (numberOfDashes === 1) {\n                // distance between the two GraphicalLyricEntries is big for only one Dash, position in the middle\n                this.calculateSingleDashForLyricWord(startStaffLine, startX, endX, y);\n            } else {\n                // distance is big enough for more Dashes\n                // calculate the adequate number of Dashes from the distance between the two LyricEntries\n                // distance between the Dashes should be equal\n                this.calculateDashes(startStaffLine, startX, endX, y);\n            }\n        } else {\n            // start and end on different StaffLines\n            // start margin from the text Label until the End of StaffLine\n            const startX: number = startStaffEntry.parentMeasure.PositionAndShape.RelativePosition.x +\n                startStaffEntry.PositionAndShape.RelativePosition.x +\n                lyricEntry.GraphicalLabel.PositionAndShape.BorderMarginRight;\n            const lastGraphicalMeasure: GraphicalMeasure = startStaffLine.Measures[startStaffLine.Measures.length - 1];\n            const endX: number = lastGraphicalMeasure.PositionAndShape.RelativePosition.x + lastGraphicalMeasure.PositionAndShape.Size.width;\n            let y: number = lyricEntry.GraphicalLabel.PositionAndShape.RelativePosition.y;\n\n            // calculate Dashes for the first StaffLine\n            this.calculateDashes(startStaffLine, startX, endX, y);\n\n            // calculate Dashes for the second StaffLine (only if endStaffEntry isn't the first StaffEntry of the StaffLine)\n            if (nextStaffLine && // check for undefined objects e.g. when drawingRange given\n                nextStaffLine.Measures[0] &&\n                endStaffentry.parentMeasure.ParentStaffLine &&\n                !(endStaffentry === endStaffentry.parentMeasure.staffEntries[0] &&\n                endStaffentry.parentMeasure === endStaffentry.parentMeasure.ParentStaffLine.Measures[0])) {\n                const secondStartX: number = nextStaffLine.Measures[0].staffEntries[0].PositionAndShape.RelativePosition.x;\n                const secondEndX: number = endStaffentry.parentMeasure.PositionAndShape.RelativePosition.x +\n                    endStaffentry.PositionAndShape.RelativePosition.x +\n                    nextLyricEntry.GraphicalLabel.PositionAndShape.BorderMarginLeft;\n                y = nextLyricEntry.GraphicalLabel.PositionAndShape.RelativePosition.y;\n                this.calculateDashes(nextStaffLine, secondStartX, secondEndX, y);\n            }\n        }\n    }\n\n    /**\n     * This method calculates Dashes for a LyricWord.\n     * @param staffLine\n     * @param startX\n     * @param endX\n     * @param y\n     */\n    private calculateDashes(staffLine: StaffLine, startX: number, endX: number, y: number): void {\n        let distance: number = endX - startX;\n        if (distance < this.rules.MinimumDistanceBetweenDashes * 3) {\n            this.calculateSingleDashForLyricWord(staffLine, startX, endX, y);\n        } else {\n            // enough distance for more Dashes\n            const numberOfDashes: number = Math.floor(distance / this.rules.MinimumDistanceBetweenDashes) - 1;\n            const distanceBetweenDashes: number = distance / (numberOfDashes + 1);\n            let counter: number = 0;\n\n            startX += distanceBetweenDashes;\n            endX -= distanceBetweenDashes;\n            while (counter <= Math.floor(numberOfDashes / 2.0) && endX > startX) {\n                distance = this.calculateRightAndLeftDashesForLyricWord(staffLine, startX, endX, y);\n                startX += distanceBetweenDashes;\n                endX -= distanceBetweenDashes;\n                counter++;\n            }\n\n            // if the remaining distance isn't big enough for two Dashes,\n            // but long enough for a middle dash inbetween,\n            // then put the last Dash in the middle of the remaining distance\n            if (distance > distanceBetweenDashes * 2) {\n                this.calculateSingleDashForLyricWord(staffLine, startX, endX, y);\n            }\n        }\n    }\n\n    /**\n     * This method calculates a single Dash for a LyricWord, positioned in the middle of the given distance.\n     * @param {StaffLine} staffLine\n     * @param {number} startX\n     * @param {number} endX\n     * @param {number} y\n     */\n    private calculateSingleDashForLyricWord(staffLine: StaffLine, startX: number, endX: number, y: number): void {\n        const label: Label = new Label(\"-\");\n        const dash: GraphicalLabel = new GraphicalLabel(\n            label, this.rules.LyricsHeight, TextAlignmentEnum.CenterBottom, this.rules);\n        dash.setLabelPositionAndShapeBorders();\n        staffLine.LyricsDashes.push(dash);\n        if (this.staffLinesWithLyricWords.indexOf(staffLine) === -1) {\n            this.staffLinesWithLyricWords.push(staffLine);\n        }\n        dash.PositionAndShape.Parent = staffLine.PositionAndShape;\n        const relative: PointF2D = new PointF2D(startX + (endX - startX) / 2, y);\n        dash.PositionAndShape.RelativePosition = relative;\n    }\n\n    /**\n     * Layouts the underscore line when a lyric entry is marked as extend\n     * @param {GraphicalLyricEntry} lyricEntry\n     */\n    private calculateLyricExtend(lyricEntry: GraphicalLyricEntry): void {\n        let startY: number = lyricEntry.GraphicalLabel.PositionAndShape.RelativePosition.y;\n        const startStaffEntry: GraphicalStaffEntry = lyricEntry.StaffEntryParent;\n        const startStaffLine: StaffLine = startStaffEntry.parentMeasure.ParentStaffLine;\n\n        // find endstaffEntry and staffLine\n        let endStaffEntry: GraphicalStaffEntry = undefined;\n        let endStaffLine: StaffLine = undefined;\n        const staffIndex: number = startStaffEntry.parentMeasure.ParentStaff.idInMusicSheet;\n        for (let index: number = startStaffEntry.parentVerticalContainer.Index + 1;\n            index < this.graphicalMusicSheet.VerticalGraphicalStaffEntryContainers.length;\n            ++index) {\n            const gse: GraphicalStaffEntry = this.graphicalMusicSheet.VerticalGraphicalStaffEntryContainers[index].StaffEntries[staffIndex];\n            if (!gse) {\n                continue;\n            }\n            if (gse.hasOnlyRests()) {\n                break;\n            }\n            if (gse.LyricsEntries.length > 0) {\n                break;\n            }\n            endStaffEntry = gse;\n            endStaffLine = endStaffEntry.parentMeasure.ParentStaffLine;\n            if (!endStaffLine) {\n                endStaffLine = startStaffEntry.parentMeasure.ParentStaffLine;\n            }\n        }\n        if (!endStaffEntry || !endStaffLine) {\n            return;\n        }\n        // if on the same StaffLine\n        if (startStaffLine === endStaffLine && endStaffEntry.parentMeasure.ParentStaffLine) {\n            // start- and End margins from the text Labels\n            const startX: number = startStaffEntry.parentMeasure.PositionAndShape.RelativePosition.x +\n                startStaffEntry.PositionAndShape.RelativePosition.x +\n                lyricEntry.GraphicalLabel.PositionAndShape.BorderMarginRight;\n            // + startStaffLine.PositionAndShape.AbsolutePosition.x; // doesn't work, done in drawer\n            const endX: number = endStaffEntry.parentMeasure.PositionAndShape.RelativePosition.x +\n                endStaffEntry.PositionAndShape.RelativePosition.x +\n                endStaffEntry.PositionAndShape.BorderMarginRight;\n            // + endStaffLine.PositionAndShape.AbsolutePosition.x; // doesn't work, done in drawer\n            // TODO maybe add half-width of following note.\n            // though we don't have the vexflow note's bbox yet and extend layouting is unconstrained,\n            // we have more room for spacing without it.\n            // needed in order to line up with the Label's text bottom line (is the y position of the underscore)\n            startY -= lyricEntry.GraphicalLabel.PositionAndShape.Size.height / 4;\n            // create a Line (as underscore after the LyricLabel's End)\n            this.calculateSingleLyricWordWithUnderscore(startStaffLine, startX, endX, startY);\n        } else { // start and end on different StaffLines\n            // start margin from the text Label until the End of StaffLine\n            const lastMeasureBb: BoundingBox = startStaffLine.Measures[startStaffLine.Measures.length - 1].PositionAndShape;\n            const startX: number = startStaffEntry.parentMeasure.PositionAndShape.RelativePosition.x +\n                startStaffEntry.PositionAndShape.RelativePosition.x +\n                lyricEntry.GraphicalLabel.PositionAndShape.BorderMarginRight;\n            const endX: number = lastMeasureBb.RelativePosition.x +\n                lastMeasureBb.Size.width;\n            // needed in order to line up with the Label's text bottom line\n            startY -= lyricEntry.GraphicalLabel.PositionAndShape.Size.height / 4;\n            // first Underscore until the StaffLine's End\n            this.calculateSingleLyricWordWithUnderscore(startStaffLine, startX, endX, startY);\n            if (!endStaffEntry) {\n                return;\n            }\n            // second Underscore in the endStaffLine until endStaffEntry (if endStaffEntry isn't the first StaffEntry of the StaffLine))\n            if (endStaffEntry.parentMeasure.ParentStaffLine && endStaffEntry.parentMeasure.staffEntries &&\n                !(endStaffEntry === endStaffEntry.parentMeasure.staffEntries[0] &&\n                endStaffEntry.parentMeasure === endStaffEntry.parentMeasure.ParentStaffLine.Measures[0])) {\n                const secondStartX: number = endStaffLine.Measures[0].staffEntries[0].PositionAndShape.RelativePosition.x;\n                const secondEndX: number = endStaffEntry.parentMeasure.PositionAndShape.RelativePosition.x +\n                    endStaffEntry.PositionAndShape.RelativePosition.x +\n                    endStaffEntry.PositionAndShape.BorderMarginRight;\n                this.calculateSingleLyricWordWithUnderscore(endStaffLine, secondStartX, secondEndX, startY);\n            }\n        }\n    }\n\n    /**\n     * This method calculates a single underscoreLine.\n     * @param staffLine\n     * @param startX\n     * @param end\n     * @param y\n     */\n    private calculateSingleLyricWordWithUnderscore(staffLine: StaffLine, startX: number, endX: number, y: number): void {\n        const lineStart: PointF2D = new PointF2D(startX, y);\n        const lineEnd: PointF2D = new PointF2D(endX, y);\n        const graphicalLine: GraphicalLine = new GraphicalLine(lineStart, lineEnd, this.rules.LyricUnderscoreLineWidth);\n        staffLine.LyricLines.push(graphicalLine);\n        if (this.staffLinesWithLyricWords.indexOf(staffLine) === -1) {\n            this.staffLinesWithLyricWords.push(staffLine);\n        }\n    }\n\n    /**\n     * This method calculates two Dashes for a LyricWord, positioned at the the two ends of the given distance.\n     * @param {StaffLine} staffLine\n     * @param {number} startX\n     * @param {number} endX\n     * @param {number} y\n     * @returns {number}\n     */\n    private calculateRightAndLeftDashesForLyricWord(staffLine: StaffLine, startX: number, endX: number, y: number): number {\n        const leftLabel: Label = new Label(\"-\");\n        const leftDash: GraphicalLabel = new GraphicalLabel(\n            leftLabel, this.rules.LyricsHeight, TextAlignmentEnum.CenterBottom, this.rules);\n        leftDash.setLabelPositionAndShapeBorders();\n        staffLine.LyricsDashes.push(leftDash);\n        if (this.staffLinesWithLyricWords.indexOf(staffLine) === -1) {\n            this.staffLinesWithLyricWords.push(staffLine);\n        }\n        leftDash.PositionAndShape.Parent = staffLine.PositionAndShape;\n        const leftDashRelative: PointF2D = new PointF2D(startX, y);\n        leftDash.PositionAndShape.RelativePosition = leftDashRelative;\n\n        const rightLabel: Label = new Label(\"-\");\n        const rightDash: GraphicalLabel = new GraphicalLabel(\n            rightLabel, this.rules.LyricsHeight, TextAlignmentEnum.CenterBottom, this.rules);\n        rightDash.setLabelPositionAndShapeBorders();\n        staffLine.LyricsDashes.push(rightDash);\n        rightDash.PositionAndShape.Parent = staffLine.PositionAndShape;\n        const rightDashRelative: PointF2D = new PointF2D(endX, y);\n        rightDash.PositionAndShape.RelativePosition = rightDashRelative;\n        return (rightDash.PositionAndShape.RelativePosition.x - leftDash.PositionAndShape.RelativePosition.x);\n    }\n\n    //So we can track shared notes bounding boxes to avoid collision + skyline issues\n    protected dynamicExpressionMap: Map<number, BoundingBox> = new Map<number, BoundingBox>();\n\n    private calculateDynamicExpressions(): void {\n        const maxIndex: number = Math.min(this.graphicalMusicSheet.ParentMusicSheet.SourceMeasures.length - 1, this.rules.MaxMeasureToDrawIndex);\n        const minIndex: number = Math.min(this.rules.MinMeasureToDrawIndex, this.graphicalMusicSheet.ParentMusicSheet.SourceMeasures.length);\n        for (let i: number = minIndex; i <= maxIndex; i++) {\n            const sourceMeasure: SourceMeasure = this.graphicalMusicSheet.ParentMusicSheet.SourceMeasures[i];\n            //Reset, beginning of new measure\n            this.dynamicExpressionMap.clear();\n            for (let j: number = 0; j < sourceMeasure.StaffLinkedExpressions.length; j++) {\n                if (!this.graphicalMusicSheet.MeasureList[i] || !this.graphicalMusicSheet.MeasureList[i][j]) {\n                    continue;\n                }\n\n                if (this.graphicalMusicSheet.MeasureList[i][j].ParentStaff.ParentInstrument.Visible) {\n                    for (let k: number = 0; k < sourceMeasure.StaffLinkedExpressions[j].length; k++) {\n                        if (sourceMeasure.StaffLinkedExpressions[j][k].InstantaneousDynamic !== undefined ||\n                            (sourceMeasure.StaffLinkedExpressions[j][k].StartingContinuousDynamic !== undefined &&\n                                sourceMeasure.StaffLinkedExpressions[j][k].StartingContinuousDynamic.StartMultiExpression ===\n                                sourceMeasure.StaffLinkedExpressions[j][k] && sourceMeasure.StaffLinkedExpressions[j][k].UnknownList.length === 0)\n                        ) {\n                            this.calculateDynamicExpressionsForMultiExpression(sourceMeasure.StaffLinkedExpressions[j][k], i, j);\n                        }\n                    }\n                }\n            }\n        }\n        this.dynamicExpressionMap.clear();\n    }\n\n    private calculateOctaveShifts(): void {\n        for (let i: number = 0; i < this.graphicalMusicSheet.ParentMusicSheet.SourceMeasures.length; i++) {\n            const sourceMeasure: SourceMeasure = this.graphicalMusicSheet.ParentMusicSheet.SourceMeasures[i];\n            for (let j: number = 0; j < sourceMeasure.StaffLinkedExpressions.length; j++) {\n                if (!this.graphicalMusicSheet.MeasureList[i] || !this.graphicalMusicSheet.MeasureList[i][j]) {\n                    continue;\n                }\n                if (this.graphicalMusicSheet.MeasureList[i][j].ParentStaff.ParentInstrument.Visible) {\n                    for (let k: number = 0; k < sourceMeasure.StaffLinkedExpressions[j].length; k++) {\n                        if ((sourceMeasure.StaffLinkedExpressions[j][k].OctaveShiftStart)) {\n                            this.calculateSingleOctaveShift(sourceMeasure, sourceMeasure.StaffLinkedExpressions[j][k], i, j);\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    private getFirstLeftNotNullStaffEntryFromContainer(horizontalIndex: number, verticalIndex: number, multiStaffInstrument: boolean): GraphicalStaffEntry {\n        if (this.graphicalMusicSheet.VerticalGraphicalStaffEntryContainers[horizontalIndex].StaffEntries[verticalIndex]) {\n            return this.graphicalMusicSheet.VerticalGraphicalStaffEntryContainers[horizontalIndex].StaffEntries[verticalIndex];\n        }\n        for (let i: number = horizontalIndex - 1; i >= 0; i--) {\n            if (this.graphicalMusicSheet.VerticalGraphicalStaffEntryContainers[i].StaffEntries[verticalIndex]) {\n                return this.graphicalMusicSheet.VerticalGraphicalStaffEntryContainers[i].StaffEntries[verticalIndex];\n            }\n        }\n        return undefined;\n    }\n\n    private getFirstRightNotNullStaffEntryFromContainer(horizontalIndex: number, verticalIndex: number, multiStaffInstrument: boolean): GraphicalStaffEntry {\n        if (this.graphicalMusicSheet.VerticalGraphicalStaffEntryContainers[horizontalIndex].StaffEntries[verticalIndex]) {\n            return this.graphicalMusicSheet.VerticalGraphicalStaffEntryContainers[horizontalIndex].StaffEntries[verticalIndex];\n        }\n        for (let i: number = horizontalIndex + 1; i < this.graphicalMusicSheet.VerticalGraphicalStaffEntryContainers.length; i++) {\n            if (this.graphicalMusicSheet.VerticalGraphicalStaffEntryContainers[i].StaffEntries[verticalIndex]) {\n                return this.graphicalMusicSheet.VerticalGraphicalStaffEntryContainers[i].StaffEntries[verticalIndex];\n            }\n        }\n        return undefined;\n    }\n\n    private calculateWordRepetitionInstructions(): void {\n        for (let i: number = 0; i < this.graphicalMusicSheet.ParentMusicSheet.SourceMeasures.length; i++) {\n            const sourceMeasure: SourceMeasure = this.graphicalMusicSheet.ParentMusicSheet.SourceMeasures[i];\n            for (let idx: number = 0, len: number = sourceMeasure.FirstRepetitionInstructions.length; idx < len; ++idx) {\n                const instruction: RepetitionInstruction = sourceMeasure.FirstRepetitionInstructions[idx];\n                this.calculateWordRepetitionInstruction(instruction, i);\n            }\n            for (let idx: number = 0, len: number = sourceMeasure.LastRepetitionInstructions.length; idx < len; ++idx) {\n                const instruction: RepetitionInstruction = sourceMeasure.LastRepetitionInstructions[idx];\n                this.calculateWordRepetitionInstruction(instruction, i);\n            }\n        }\n    }\n\n    private calculateRepetitionEndings(): void {\n        const musicsheet: MusicSheet = this.graphicalMusicSheet.ParentMusicSheet;\n        for (let idx: number = 0, len: number = musicsheet.Repetitions.length; idx < len; ++idx) {\n            const repetition: Repetition = musicsheet.Repetitions[idx];\n            this.calcGraphicalRepetitionEndingsRecursively(repetition);\n        }\n    }\n\n    private calculateTempoExpressions(): void {\n        const maxIndex: number = Math.min(this.graphicalMusicSheet.ParentMusicSheet.SourceMeasures.length - 1, this.rules.MaxMeasureToDrawIndex);\n        const minIndex: number = this.rules.MinMeasureToDrawIndex;\n        for (let i: number = minIndex; i <= maxIndex; i++) {\n            const sourceMeasure: SourceMeasure = this.graphicalMusicSheet.ParentMusicSheet.SourceMeasures[i];\n            for (let j: number = 0; j < sourceMeasure.TempoExpressions.length; j++) {\n                this.calculateTempoExpressionsForMultiTempoExpression(sourceMeasure, sourceMeasure.TempoExpressions[j], i);\n            }\n        }\n    }\n\n    private calculateRehearsalMarks(): void {\n        if (!this.rules.RenderRehearsalMarks) {\n            return;\n        }\n        for (const measure of this.graphicalMusicSheet.ParentMusicSheet.SourceMeasures) {\n            this.calculateRehearsalMark(measure);\n        }\n    }\n\n    protected calculateRehearsalMark(measure: SourceMeasure): void {\n        throw new Error(this.abstractNotImplementedErrorMessage);\n    }\n\n    private calculateMoodAndUnknownExpressions(): void {\n        for (let i: number = 0; i < this.graphicalMusicSheet.ParentMusicSheet.SourceMeasures.length; i++) {\n            const sourceMeasure: SourceMeasure = this.graphicalMusicSheet.ParentMusicSheet.SourceMeasures[i];\n            for (let j: number = 0; j < sourceMeasure.StaffLinkedExpressions.length; j++) {\n                if (!this.graphicalMusicSheet.MeasureList[i] || !this.graphicalMusicSheet.MeasureList[i][j]) {\n                    continue;\n                }\n                if (this.graphicalMusicSheet.MeasureList[i][j].ParentStaff.ParentInstrument.Visible) {\n                    for (let k: number = 0; k < sourceMeasure.StaffLinkedExpressions[j].length; k++) {\n                        if ((sourceMeasure.StaffLinkedExpressions[j][k].MoodList.length > 0) ||\n                            (sourceMeasure.StaffLinkedExpressions[j][k].UnknownList.length > 0)) {\n                            this.calculateMoodAndUnknownExpression(sourceMeasure.StaffLinkedExpressions[j][k], i, j);\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Calculates the desired stem direction depending on the number (or type) of voices.\n     * If more than one voice is there, the main voice (typically the first or upper voice) will get stem up direction.\n     * The others get stem down direction.\n     * @param voiceEntry the voiceEntry for which the stem direction has to be calculated\n     */\n    private calculateStemDirectionFromVoices(voiceEntry: VoiceEntry): void {\n        // Stem direction calculation:\n        const hasLink: boolean = voiceEntry.ParentSourceStaffEntry.Link !== undefined;\n        if (hasLink) {\n            // in case of StaffEntryLink don't check mainVoice / linkedVoice\n            if (voiceEntry === voiceEntry.ParentSourceStaffEntry.VoiceEntries[0]) {\n                // set stem up:\n                voiceEntry.WantedStemDirection = StemDirectionType.Up;\n                return;\n            } else {\n                // set stem down:\n                voiceEntry.WantedStemDirection = StemDirectionType.Down;\n                return;\n            }\n        } else {\n            if (voiceEntry.ParentVoice instanceof LinkedVoice) {\n                // Linked voice: set stem down:\n                voiceEntry.WantedStemDirection = StemDirectionType.Down;\n            } else {\n                // if this voiceEntry belongs to the mainVoice:\n                // check first that there are also more voices present:\n                if (voiceEntry.ParentSourceStaffEntry.VoiceEntries.length > 1) {\n                    // as this voiceEntry belongs to the mainVoice: stem Up\n                    voiceEntry.WantedStemDirection = StemDirectionType.Up;\n                }\n            }\n        }\n        // setBeamNotesWantedStemDirections() will be called at end of measure (createGraphicalMeasure)\n    }\n\n    /** Sets a voiceEntry's stem direction to one already set in other notes in its beam, if it has one. */\n    private setBeamNotesWantedStemDirections(voiceEntry: VoiceEntry): void {\n        if (!(voiceEntry.Notes.length > 0)) {\n            return;\n        }\n        // don't just set direction if undefined. if there's a note in the beam with a different stem direction, Vexflow draws it with an unending stem.\n        // if (voiceEntry.WantedStemDirection === StemDirectionType.Undefined) {\n        const beam: Beam = voiceEntry.Notes[0].NoteBeam;\n        if (beam) {\n            // if there is a beam, find any already set stemDirection in the beam:\n            for (const note of beam.Notes) {\n                // if (note.ParentVoiceEntry === voiceEntry) {\n                //     continue; // this could cause a misreading, also potentially in cross-staf beams, in any case it's unnecessary.\n                //} else if\n                if (note.ParentVoiceEntry.WantedStemDirection !== StemDirectionType.Undefined) {\n                    if (note.ParentVoiceEntry.ParentSourceStaffEntry.ParentStaff.Id === voiceEntry.ParentSourceStaffEntry.ParentStaff.Id) {\n                        // set the stem direction\n                        voiceEntry.WantedStemDirection = note.ParentVoiceEntry.WantedStemDirection;\n                        break;\n                    }\n                }\n            }\n        }\n    }\n}\n","import {EngravingRules} from \"./EngravingRules\";\nimport {ITextMeasurer} from \"../Interfaces/ITextMeasurer\";\nimport {GraphicalMusicSheet} from \"./GraphicalMusicSheet\";\nimport {BoundingBox} from \"./BoundingBox\";\nimport {GraphicalLayers, OutlineAndFillStyleEnum} from \"./DrawingEnums\";\nimport {DrawingParameters} from \"./DrawingParameters\";\nimport {GraphicalLine} from \"./GraphicalLine\";\nimport {RectangleF2D} from \"../../Common/DataObjects/RectangleF2D\";\nimport {PointF2D} from \"../../Common/DataObjects/PointF2D\";\nimport {GraphicalRectangle} from \"./GraphicalRectangle\";\nimport {GraphicalLabel} from \"./GraphicalLabel\";\nimport {Label} from \"../Label\";\nimport {TextAlignmentEnum} from \"../../Common/Enums/TextAlignment\";\nimport {ArgumentOutOfRangeException} from \"../Exceptions\";\nimport {SelectionStartSymbol} from \"./SelectionStartSymbol\";\nimport {SelectionEndSymbol} from \"./SelectionEndSymbol\";\nimport {MusicSystem} from \"./MusicSystem\";\nimport {GraphicalMeasure} from \"./GraphicalMeasure\";\nimport {StaffLine} from \"./StaffLine\";\nimport {SystemLine} from \"./SystemLine\";\nimport {MusicSymbol} from \"./MusicSymbol\";\nimport {GraphicalMusicPage} from \"./GraphicalMusicPage\";\nimport {Instrument} from \"../Instrument\";\nimport {MusicSymbolDrawingStyle, PhonicScoreModes} from \"./DrawingMode\";\nimport {GraphicalObject} from \"./GraphicalObject\";\nimport { GraphicalInstantaneousDynamicExpression } from \"./GraphicalInstantaneousDynamicExpression\";\nimport { GraphicalContinuousDynamicExpression } from \"./GraphicalContinuousDynamicExpression\";\n// eslint-disable-next-line\nimport { VexFlowContinuousDynamicExpression, VexFlowGraphicalNote, VexFlowInstrumentBracket, VexFlowMeasure, VexFlowStaffEntry, VexFlowStaffLine, VexFlowVoiceEntry } from \"./VexFlow\";\nimport { StaffLineActivitySymbol } from \"./StaffLineActivitySymbol\";\n// import { FontStyles } from \"../../Common/Enums/FontStyles\";\n\n/**\n * Draw a [[GraphicalMusicSheet]] (through the .drawSheet method)\n *\n * The drawing is implemented with a top-down approach, starting from a music sheet, going through pages, systems, staffs...\n * ... and ending in notes, beams, accidentals and other symbols.\n * It's worth to say, that this class just draws the symbols and graphical elements, using the positions that have been computed before.\n * But in any case, some of these previous positioning algorithms need the sizes of the concrete symbols (NoteHeads, sharps, flats, keys...).\n * Therefore, there are some static functions on the 'Bounding Boxes' section used to compute these symbol boxes at the\n * beginning for the later use in positioning algorithms.\n *\n * This class also includes the resizing and positioning of the symbols due to user interaction like zooming or panning.\n */\nexport abstract class MusicSheetDrawer {\n    public drawingParameters: DrawingParameters;\n    public splitScreenLineColor: number;\n    public midiPlaybackAvailable: boolean;\n    public drawableBoundingBoxElement: string = \"None\"; // process.env.DRAW_BOUNDING_BOX_ELEMENT;\n\n    public skyLineVisible: boolean = false;\n    public bottomLineVisible: boolean = false;\n\n    protected rules: EngravingRules;\n    protected graphicalMusicSheet: GraphicalMusicSheet;\n    protected textMeasurer: ITextMeasurer;\n    private phonicScoreMode: PhonicScoreModes = PhonicScoreModes.Manual;\n\n    constructor(textMeasurer: ITextMeasurer,\n                drawingParameters: DrawingParameters) {\n        this.textMeasurer = textMeasurer;\n        this.splitScreenLineColor = -1;\n        this.drawingParameters = drawingParameters;\n        this.rules = drawingParameters.Rules;\n    }\n\n    public set Mode(value: PhonicScoreModes) {\n        this.phonicScoreMode = value;\n    }\n\n    public drawSheet(graphicalMusicSheet: GraphicalMusicSheet): void {\n        this.graphicalMusicSheet = graphicalMusicSheet;\n        this.rules = graphicalMusicSheet.ParentMusicSheet.Rules;\n        this.drawSplitScreenLine();\n        if (this.drawingParameters.drawCursors) {\n            for (const line of graphicalMusicSheet.Cursors) {\n                if (!line) {\n                    // TODO GraphicalMusicSheet.calculateCursorLineAtTimestamp() can return undefined.\n                    // why does this happen in the VexFlowMusicSheetDrawer_Test? (it(\"draws cursor...\"))\n                    continue;\n                }\n                const psi: BoundingBox = new BoundingBox(line);\n                psi.AbsolutePosition = line.Start;\n                psi.BorderBottom = line.End.y - line.Start.y;\n                psi.BorderRight = line.Width / 2.0;\n                psi.BorderLeft = -line.Width / 2.0;\n                if (this.isVisible(psi)) {\n                    this.drawLineAsVerticalRectangle(line, <number>GraphicalLayers.Cursor);\n                }\n            }\n        }\n        // Draw the vertical ScrollIndicator\n        if (this.drawingParameters.drawScrollIndicator) {\n            this.drawScrollIndicator();\n        }\n        // Draw the pages\n        const pagesToDraw: number = Math.min(this.graphicalMusicSheet.MusicPages.length, this.rules.MaxPageToDrawNumber);\n        for (let i: number = 0; i < pagesToDraw; i ++) {\n            const page: GraphicalMusicPage = this.graphicalMusicSheet.MusicPages[i];\n            this.drawPage(page);\n        }\n    }\n\n    public drawLineAsHorizontalRectangle(line: GraphicalLine, layer: number): void {\n        let rectangle: RectangleF2D = new RectangleF2D(line.Start.x, line.End.y - line.Width / 2, line.End.x - line.Start.x, line.Width);\n        rectangle = this.applyScreenTransformationForRect(rectangle);\n        this.renderRectangle(rectangle, layer, line.styleId, line.colorHex);\n    }\n\n    public drawLineAsVerticalRectangle(line: GraphicalLine, layer: number): void {\n        const lineStart: PointF2D = line.Start;\n        const lineWidth: number = line.Width;\n        let rectangle: RectangleF2D = new RectangleF2D(lineStart.x - lineWidth / 2, lineStart.y, lineWidth, line.End.y - lineStart.y);\n        rectangle = this.applyScreenTransformationForRect(rectangle);\n        this.renderRectangle(rectangle, layer, line.styleId);\n    }\n\n    public drawLineAsHorizontalRectangleWithOffset(line: GraphicalLine, offset: PointF2D, layer: number): void {\n        const start: PointF2D = new PointF2D(line.Start.x + offset.x, line.Start.y + offset.y);\n        const end: PointF2D = new PointF2D(line.End.x + offset.x, line.End.y + offset.y);\n        const width: number = line.Width;\n        let rectangle: RectangleF2D = new RectangleF2D(start.x, end.y - width / 2, end.x - start.x, width);\n        rectangle = this.applyScreenTransformationForRect(rectangle);\n        this.renderRectangle(rectangle, layer, line.styleId);\n    }\n\n    public drawLineAsVerticalRectangleWithOffset(line: GraphicalLine, offset: PointF2D, layer: number): void {\n        const start: PointF2D = new PointF2D(line.Start.x + offset.x, line.Start.y + offset.y);\n        const end: PointF2D = new PointF2D(line.End.x + offset.x, line.End.y + offset.y);\n        const width: number = line.Width;\n        let rectangle: RectangleF2D = new RectangleF2D(start.x, start.y, width, end.y - start.y);\n        rectangle = this.applyScreenTransformationForRect(rectangle);\n        this.renderRectangle(rectangle, layer, line.styleId);\n    }\n\n    public drawRectangle(rect: GraphicalRectangle, layer: number): void {\n        const psi: BoundingBox = rect.PositionAndShape;\n        let rectangle: RectangleF2D = new RectangleF2D(psi.AbsolutePosition.x, psi.AbsolutePosition.y, psi.BorderRight, psi.BorderBottom);\n        rectangle = this.applyScreenTransformationForRect(rectangle);\n        this.renderRectangle(rectangle, layer, <number>rect.style);\n    }\n\n    public calculatePixelDistance(unitDistance: number): number {\n        throw new Error(\"not implemented\");\n    }\n\n    public drawLabel(graphicalLabel: GraphicalLabel, layer: number): Node {\n        if (!this.isVisible(graphicalLabel.PositionAndShape)) {\n            return undefined;\n        }\n        const label: Label = graphicalLabel.Label;\n        if (label.text.trim() === \"\") {\n            return undefined;\n        }\n        const screenPosition: PointF2D = this.applyScreenTransformation(graphicalLabel.PositionAndShape.AbsolutePosition);\n        const fontHeightInPixel: number = this.calculatePixelDistance(label.fontHeight);\n        const widthInPixel: number = this.calculatePixelDistance(graphicalLabel.PositionAndShape.Size.width);\n        const bitmapWidth: number = Math.ceil(widthInPixel);\n        const bitmapHeight: number = Math.ceil(fontHeightInPixel * (0.2 + graphicalLabel.TextLines.length));\n\n        switch (label.textAlignment) {\n            // Adjust the OSMD-calculated positions to rendering coordinates\n            // These have to match the Border settings in GraphicalLabel.setLabelPositionAndShapeBorders()\n            // TODO isn't this a Vexflow-specific transformation that should be in VexflowMusicSheetDrawer?\n            case TextAlignmentEnum.LeftTop:\n                break;\n            case TextAlignmentEnum.LeftCenter:\n                screenPosition.y -= bitmapHeight / 2;\n                break;\n            case TextAlignmentEnum.LeftBottom:\n                screenPosition.y -= bitmapHeight;\n                break;\n            case TextAlignmentEnum.CenterTop:\n                screenPosition.x -= bitmapWidth / 2;\n                break;\n            case TextAlignmentEnum.CenterCenter:\n                screenPosition.x -= bitmapWidth / 2;\n                screenPosition.y -= bitmapHeight / 2;\n                break;\n            case TextAlignmentEnum.CenterBottom:\n                screenPosition.x -= bitmapWidth / 2;\n                screenPosition.y -= bitmapHeight;\n                break;\n            case TextAlignmentEnum.RightTop:\n                screenPosition.x -= bitmapWidth;\n                break;\n            case TextAlignmentEnum.RightCenter:\n                screenPosition.x -= bitmapWidth;\n                screenPosition.y -= bitmapHeight / 2;\n                break;\n            case TextAlignmentEnum.RightBottom:\n                screenPosition.x -= bitmapWidth;\n                screenPosition.y -= bitmapHeight;\n                break;\n            default:\n                throw new ArgumentOutOfRangeException(\"\");\n        }\n\n        return this.renderLabel(graphicalLabel, layer, bitmapWidth, bitmapHeight, fontHeightInPixel, screenPosition);\n    }\n\n    protected applyScreenTransformation(point: PointF2D): PointF2D {\n        throw new Error(\"not implemented\");\n    }\n\n    protected applyScreenTransformations(points: PointF2D[]): PointF2D[] {\n        const transformedPoints: PointF2D[] = [];\n        for (const point of points) {\n            transformedPoints.push(this.applyScreenTransformation(point));\n        }\n        return transformedPoints;\n    }\n\n    protected applyScreenTransformationForRect(rectangle: RectangleF2D): RectangleF2D {\n        throw new Error(\"not implemented\");\n    }\n\n    protected drawSplitScreenLine(): void {\n        // empty\n    }\n\n    protected renderRectangle(rectangle: RectangleF2D, layer: number, styleId: number, colorHex: string = undefined, alpha: number = 1): Node {\n        throw new Error(\"not implemented\");\n    }\n\n    protected drawScrollIndicator(): void {\n        // empty\n    }\n\n    protected drawSelectionStartSymbol(symbol: SelectionStartSymbol): void {\n        // empty\n    }\n\n    protected drawSelectionEndSymbol(symbol: SelectionEndSymbol): void {\n        // empty\n    }\n\n    protected renderLabel(graphicalLabel: GraphicalLabel, layer: number, bitmapWidth: number,\n                          bitmapHeight: number, heightInPixel: number, screenPosition: PointF2D): Node {\n        throw new Error(\"not implemented\");\n    }\n\n    protected renderSystemToScreen(system: MusicSystem, systemBoundingBoxInPixels: RectangleF2D,\n                                   absBoundingRectWithMargin: RectangleF2D): void {\n        // empty\n    }\n\n    protected drawMeasure(measure: GraphicalMeasure): void {\n        throw new Error(\"not implemented\");\n    }\n\n    protected drawSkyLine(staffLine: StaffLine): void {\n        // empty\n    }\n\n    protected drawBottomLine(staffLine: StaffLine): void {\n        // empty\n    }\n\n    protected drawInstrumentBrace(brace: GraphicalObject, system: MusicSystem): void {\n        // empty\n    }\n\n    protected drawGroupBracket(bracket: GraphicalObject, system: MusicSystem): void {\n        // empty\n    }\n\n    protected isVisible(psi: BoundingBox): boolean {\n        return true;\n    }\n\n    protected drawMusicSystem(system: MusicSystem): void {\n        const absBoundingRectWithMargin: RectangleF2D = this.getSystemAbsBoundingRect(system);\n        const systemBoundingBoxInPixels: RectangleF2D = this.getSytemBoundingBoxInPixels(absBoundingRectWithMargin);\n        this.drawMusicSystemComponents(system, systemBoundingBoxInPixels, absBoundingRectWithMargin);\n    }\n\n    protected getSytemBoundingBoxInPixels(absBoundingRectWithMargin: RectangleF2D): RectangleF2D {\n        const systemBoundingBoxInPixels: RectangleF2D = this.applyScreenTransformationForRect(absBoundingRectWithMargin);\n        systemBoundingBoxInPixels.x = Math.round(systemBoundingBoxInPixels.x);\n        systemBoundingBoxInPixels.y = Math.round(systemBoundingBoxInPixels.y);\n        return systemBoundingBoxInPixels;\n    }\n\n    protected getSystemAbsBoundingRect(system: MusicSystem): RectangleF2D {\n        const relBoundingRect: RectangleF2D = system.PositionAndShape.BoundingRectangle;\n        const absBoundingRectWithMargin: RectangleF2D = new RectangleF2D(\n            system.PositionAndShape.AbsolutePosition.x + system.PositionAndShape.BorderLeft - 1,\n            system.PositionAndShape.AbsolutePosition.y + system.PositionAndShape.BorderTop - 1,\n            (relBoundingRect.width + 6), (relBoundingRect.height + 2)\n        );\n        return absBoundingRectWithMargin;\n    }\n\n    protected drawMusicSystemComponents(musicSystem: MusicSystem, systemBoundingBoxInPixels: RectangleF2D,\n                                        absBoundingRectWithMargin: RectangleF2D): void {\n        const selectStartSymb: SelectionStartSymbol = this.graphicalMusicSheet.SelectionStartSymbol;\n        const selectEndSymb: SelectionEndSymbol = this.graphicalMusicSheet.SelectionEndSymbol;\n        if (this.drawingParameters.drawSelectionStartSymbol) {\n            if (selectStartSymb !== undefined && this.isVisible(selectStartSymb.PositionAndShape)) {\n                this.drawSelectionStartSymbol(selectStartSymb);\n            }\n        }\n        if (this.drawingParameters.drawSelectionEndSymbol) {\n            if (selectEndSymb !== undefined && this.isVisible(selectEndSymb.PositionAndShape)) {\n                this.drawSelectionEndSymbol(selectEndSymb);\n            }\n        }\n        for (const staffLine of musicSystem.StaffLines) {\n            this.drawStaffLine(staffLine);\n\n            if (this.rules.RenderLyrics) {\n                // draw lyric dashes\n                if (staffLine.LyricsDashes.length > 0) {\n                    this.drawDashes(staffLine.LyricsDashes);\n                }\n\n                // draw lyric lines (e.g. LyricExtends: \"dich,___\")\n                if (staffLine.LyricLines.length > 0) {\n                    this.drawLyricLines(staffLine.LyricLines, staffLine);\n                }\n            }\n        }\n        for (const systemLine of musicSystem.SystemLines) {\n            this.drawSystemLineObject(systemLine);\n        }\n        if (musicSystem.Parent === musicSystem.Parent.Parent.MusicPages[0]) {\n            for (const label of musicSystem.Labels) {\n                label.SVGNode = this.drawLabel(label, <number>GraphicalLayers.Notes);\n            }\n        }\n\n        const instruments: Instrument[] = this.graphicalMusicSheet.ParentMusicSheet.Instruments;\n        const instrumentsVisible: number = instruments.filter((instrument) => instrument.Visible).length;\n        for (const bracket of musicSystem.InstrumentBrackets) {\n            this.drawInstrumentBrace(bracket, musicSystem);\n        }\n\n        if (instruments.length > 0) {\n            // TODO instead of this check we could save what instruments are in the group bracket,\n            //   and only draw it if all these instruments are visible.\n            //   Currently the instruments/stafflines aren't saved in the bracket however.\n            if (instrumentsVisible > 1) {\n                for (const bracket of musicSystem.GroupBrackets) {\n                    this.drawGroupBracket(bracket, musicSystem);\n                }\n            } else {\n                for (const bracket of musicSystem.GroupBrackets) {\n                    (bracket as VexFlowInstrumentBracket).Visible = false; //.setType(VF.StaveConnector.type.NONE);\n                }\n            }\n        }\n\n        if (!this.leadSheet) {\n            for (const measureNumberLabel of musicSystem.MeasureNumberLabels) {\n                measureNumberLabel.SVGNode = this.drawLabel(measureNumberLabel, <number>GraphicalLayers.Notes);\n            }\n        }\n        for (const staffLine of musicSystem.StaffLines) {\n            this.drawStaffLineSymbols(staffLine);\n        }\n        if (this.drawingParameters.drawMarkedAreas) {\n            this.drawMarkedAreas(musicSystem);\n        }\n        if (this.drawingParameters.drawComments) {\n            this.drawComment(musicSystem);\n        }\n    }\n\n    protected activateSystemRendering(systemId: number, absBoundingRect: RectangleF2D,\n                                      systemBoundingBoxInPixels: RectangleF2D, createNewImage: boolean): boolean {\n        return true;\n    }\n\n    protected drawSystemLineObject(systemLine: SystemLine): void {\n        // empty\n    }\n\n    protected drawStaffLine(staffLine: StaffLine): void {\n        for (const measure of staffLine.Measures) {\n            this.drawMeasure(measure);\n        }\n\n        if (this.rules.RenderLyrics) {\n            if (staffLine.LyricsDashes.length > 0) {\n                this.drawDashes(staffLine.LyricsDashes);\n            }\n        }\n        this.drawOctaveShifts(staffLine);\n\n        this.drawExpressions(staffLine);\n\n        if (this.skyLineVisible) {\n            this.drawSkyLine(staffLine);\n        }\n\n        if (this.bottomLineVisible) {\n            this.drawBottomLine(staffLine);\n        }\n    }\n\n    protected drawLyricLines(lyricLines: GraphicalLine[], staffLine: StaffLine): void {\n        staffLine.LyricLines.forEach(lyricLine => {\n            // TODO maybe we should put this in the calculation (MusicSheetCalculator.calculateLyricExtend)\n            // then we can also remove staffLine argument\n            // but same addition doesn't work in calculateLyricExtend, because y-spacing happens after lyrics positioning\n            lyricLine.Start.y += staffLine.PositionAndShape.AbsolutePosition.y;\n            lyricLine.End.y += staffLine.PositionAndShape.AbsolutePosition.y;\n            lyricLine.Start.x += staffLine.PositionAndShape.AbsolutePosition.x;\n            lyricLine.End.x += staffLine.PositionAndShape.AbsolutePosition.x;\n            this.drawGraphicalLine(lyricLine, this.rules.LyricUnderscoreLineWidth);\n        });\n    }\n\n    protected drawExpressions(staffline: StaffLine): void {\n        // implemented by subclass (VexFlowMusicSheetDrawer)\n    }\n\n    protected drawGraphicalLine(graphicalLine: GraphicalLine, lineWidth: number, colorOrStyle: string = \"black\"): Node {\n        /* TODO similar checks as in drawLabel\n        if (!this.isVisible(new BoundingBox(graphicalLine.Start,)) {\n            return;\n        }\n        */\n        return this.drawLine(graphicalLine.Start, graphicalLine.End, colorOrStyle, lineWidth);\n    }\n\n    protected drawLine(start: PointF2D, stop: PointF2D, color: string = \"#FF0000FF\", lineWidth: number): Node {\n        // implemented by subclass (VexFlowMusicSheetDrawer)\n        return undefined;\n    }\n\n    /**\n     * Draw all dashes to the canvas\n     * @param lyricsDashes Array of lyric dashes to be drawn\n     * @param layer Number of the layer that the lyrics should be drawn in\n     */\n    protected drawDashes(lyricsDashes: GraphicalLabel[]): void {\n        lyricsDashes.forEach(dash => dash.SVGNode = this.drawLabel(dash, <number>GraphicalLayers.Notes));\n    }\n\n    // protected drawSlur(slur: GraphicalSlur, abs: PointF2D): void {\n    //\n    // }\n\n    protected drawOctaveShifts(staffLine: StaffLine): void {\n        return;\n    }\n\n    protected drawStaffLines(staffLine: StaffLine): void {\n        if (staffLine.StaffLines) {\n            const position: PointF2D = staffLine.PositionAndShape.AbsolutePosition;\n            for (let i: number = 0; i < 5; i++) {\n                this.drawLineAsHorizontalRectangleWithOffset(staffLine.StaffLines[i], position, <number>GraphicalLayers.Notes);\n            }\n        }\n    }\n\n    // protected drawEnding(ending: GraphicalRepetitionEnding, absolutePosition: PointF2D): void {\n    //     if (undefined !== ending.Left)\n    //         drawLineAsVerticalRectangle(ending.Left, absolutePosition, <number>GraphicalLayers.Notes);\n    //     this.drawLineAsHorizontalRectangle(ending.Top, absolutePosition, <number>GraphicalLayers.Notes);\n    //     if (undefined !== ending.Right)\n    //         drawLineAsVerticalRectangle(ending.Right, absolutePosition, <number>GraphicalLayers.Notes);\n    //     this.drawLabel(ending.Label, <number>GraphicalLayers.Notes);\n    // }\n\n    /**\n     * Draws an instantaneous dynamic expression (p, pp, f, ff, ...) to the canvas\n     * @param instantaneousDynamic GraphicalInstantaneousDynamicExpression to be drawn\n     */\n    protected drawInstantaneousDynamic(instantaneousDynamic: GraphicalInstantaneousDynamicExpression): void {\n        throw new Error(\"not implemented\");\n    }\n\n    /**\n     * Draws a continuous dynamic expression (wedges) to the canvas\n     * @param expression GraphicalContinuousDynamicExpression to be drawn\n     */\n    protected drawContinuousDynamic(expression: GraphicalContinuousDynamicExpression): void {\n        throw new Error(\"not implemented\");\n    }\n\n    protected drawSymbol(symbol: MusicSymbol, symbolStyle: MusicSymbolDrawingStyle, position: PointF2D,\n                         scalingFactor: number = 1, layer: number = <number>GraphicalLayers.Notes): void {\n        //empty\n    }\n\n    protected get leadSheet(): boolean {\n        return this.graphicalMusicSheet.LeadSheet;\n    }\n\n    protected set leadSheet(value: boolean) {\n        this.graphicalMusicSheet.LeadSheet = value;\n    }\n\n    protected drawPage(page: GraphicalMusicPage): void {\n        if (!this.isVisible(page.PositionAndShape)) {\n            return;\n        }\n\n        for (const system of page.MusicSystems) {\n            if (this.isVisible(system.PositionAndShape)) {\n                this.drawMusicSystem(system);\n            }\n        }\n        if (page === page.Parent.MusicPages[0]) {\n            for (const label of page.Labels) {\n                label.SVGNode = this.drawLabel(label, <number>GraphicalLayers.Notes);\n            }\n        }\n        // Draw bounding boxes for debug purposes. This has to be at the end because only\n        // then all the calculations and recalculations are done\n        if (this.drawableBoundingBoxElement) {\n            this.drawBoundingBoxes(page.PositionAndShape, 0, this.drawableBoundingBoxElement);\n        }\n    }\n\n    /**\n     * Draw bounding boxes aroung GraphicalObjects\n     * @param startBox Bounding Box that is used as a staring point to recursively go through all child elements\n     * @param layer Layer to draw to\n     * @param type Type of element to show bounding boxes for as string.\n     */\n    private drawBoundingBoxes(startBox: BoundingBox, layer: number = 0, type: string = \"all\"): void {\n        const dataObjectString: string = (startBox.DataObject.constructor as any).name; // only works with non-minified build or sourcemap\n        let typeMatch: boolean = false;\n        if (type === \"all\") {\n            typeMatch = true;\n        } else {\n            if (type === \"VexFlowStaffEntry\") {\n                typeMatch = startBox.DataObject instanceof VexFlowStaffEntry;\n            } else if (type === \"VexFlowMeasure\") {\n                typeMatch = startBox.DataObject instanceof VexFlowMeasure;\n            } else if (type === \"VexFlowGraphicalNote\") {\n                typeMatch = startBox.DataObject instanceof VexFlowGraphicalNote;\n            } else if (type === \"VexFlowVoiceEntry\") {\n                typeMatch = startBox.DataObject instanceof VexFlowVoiceEntry;\n            } else if (type === \"GraphicalLabel\") {\n                typeMatch = startBox.DataObject instanceof GraphicalLabel;\n            } else if (type === \"VexFlowStaffLine\") {\n                typeMatch = startBox.DataObject instanceof VexFlowStaffLine;\n            } else if (type === \"SystemLine\") {\n                typeMatch = startBox.DataObject instanceof SystemLine;\n            } else if (type === \"StaffLineActivitySymbol\") {\n                typeMatch = startBox.DataObject instanceof StaffLineActivitySymbol;\n            } else if (type === \"VexFlowContinuousDynamicExpression\") {\n                typeMatch = startBox.DataObject instanceof VexFlowContinuousDynamicExpression;\n            }\n        }\n        if (typeMatch || dataObjectString === type) {\n            this.drawBoundingBox(startBox, undefined, true, dataObjectString, layer);\n        }\n        layer++;\n        startBox.ChildElements.forEach(bb => this.drawBoundingBoxes(bb, layer, type));\n    }\n\n    public drawBoundingBox(bbox: BoundingBox,\n        color: string = undefined, drawCross: boolean = false, labelText: string = undefined, layer: number = 0\n    ): Node {\n        let tmpRect: RectangleF2D = new RectangleF2D(bbox.AbsolutePosition.x + bbox.BorderMarginLeft,\n            bbox.AbsolutePosition.y + bbox.BorderMarginTop,\n            bbox.BorderMarginRight - bbox.BorderMarginLeft,\n            bbox.BorderMarginBottom - bbox.BorderMarginTop);\n        if (drawCross) {\n            this.drawLineAsHorizontalRectangle(new GraphicalLine(\n                new PointF2D(bbox.AbsolutePosition.x - 1, bbox.AbsolutePosition.y),\n                new PointF2D(bbox.AbsolutePosition.x + 1, bbox.AbsolutePosition.y),\n                0.1,\n                OutlineAndFillStyleEnum.BaseWritingColor,\n                color),\n                layer - 1);\n\n            this.drawLineAsVerticalRectangle(new GraphicalLine(\n                new PointF2D(bbox.AbsolutePosition.x, bbox.AbsolutePosition.y - 1),\n                new PointF2D(bbox.AbsolutePosition.x, bbox.AbsolutePosition.y + 1),\n                0.1,\n                OutlineAndFillStyleEnum.BaseWritingColor,\n                color),\n                layer - 1);\n        }\n\n        tmpRect = this.applyScreenTransformationForRect(tmpRect);\n        const rectNode: Node = this.renderRectangle(tmpRect, <number>GraphicalLayers.Background, layer, color, 0.5);\n        if (labelText) {\n            const label: Label = new Label(labelText);\n            this.renderLabel(new GraphicalLabel(label, 0.8, TextAlignmentEnum.CenterCenter, this.rules),\n                layer, tmpRect.width, tmpRect.height, tmpRect.height, new PointF2D(tmpRect.x, tmpRect.y + 12));\n            // theoretically we should return the nodes from renderLabel here as well, so they can also be removed later\n        }\n        return rectNode;\n    }\n\n    private drawMarkedAreas(system: MusicSystem): void {\n        for (const markedArea of system.GraphicalMarkedAreas) {\n            if (markedArea) {\n                if (markedArea.systemRectangle) {\n                    this.drawRectangle(markedArea.systemRectangle, <number>GraphicalLayers.Background);\n                }\n                if (markedArea.settings) {\n                    markedArea.settings.SVGNode = this.drawLabel(markedArea.settings, <number>GraphicalLayers.Comment);\n                }\n                if (markedArea.labelRectangle) {\n                    this.drawRectangle(markedArea.labelRectangle, <number>GraphicalLayers.Background);\n                }\n                if (markedArea.label) {\n                    markedArea.label.SVGNode = this.drawLabel(markedArea.label, <number>GraphicalLayers.Comment);\n                }\n            }\n        }\n    }\n\n    private drawComment(system: MusicSystem): void {\n        for (const comment of system.GraphicalComments) {\n            if (comment) {\n                if (comment.settings) {\n                    comment.settings.SVGNode = this.drawLabel(comment.settings, <number>GraphicalLayers.Comment);\n                }\n                if (comment.label) {\n                    comment.label.SVGNode = this.drawLabel(comment.label, <number>GraphicalLayers.Comment);\n                }\n            }\n        }\n    }\n\n    private drawStaffLineSymbols(staffLine: StaffLine): void {\n        const parentInst: Instrument = staffLine.ParentStaff.ParentInstrument;\n        const absX: number = staffLine.PositionAndShape.AbsolutePosition.x;\n        const absY: number = staffLine.PositionAndShape.AbsolutePosition.y + 2;\n        const borderRight: number = staffLine.PositionAndShape.BorderRight;\n        if (parentInst.highlight && this.drawingParameters.drawHighlights) {\n            this.drawLineAsHorizontalRectangle(\n                new GraphicalLine(\n                    new PointF2D(absX, absY),\n                    new PointF2D(absX + borderRight, absY),\n                    4,\n                    OutlineAndFillStyleEnum.Highlighted\n                ),\n                <number>GraphicalLayers.Highlight\n            );\n        }\n        let style: MusicSymbolDrawingStyle = MusicSymbolDrawingStyle.Disabled;\n        let symbol: MusicSymbol = MusicSymbol.PLAY;\n        let drawSymbols: boolean = this.drawingParameters.drawActivitySymbols;\n        switch (this.phonicScoreMode) {\n            case PhonicScoreModes.Midi:\n                symbol = MusicSymbol.PLAY;\n                if (this.midiPlaybackAvailable && staffLine.ParentStaff.audible) {\n                    style = MusicSymbolDrawingStyle.PlaybackSymbols;\n                }\n                break;\n            case PhonicScoreModes.Following:\n                symbol = MusicSymbol.MIC;\n                if (staffLine.ParentStaff.following) {\n                    style = MusicSymbolDrawingStyle.FollowSymbols;\n                }\n                break;\n            default:\n                drawSymbols = false;\n                break;\n        }\n        if (drawSymbols) {\n            const p: PointF2D = new PointF2D(absX + borderRight + 2, absY);\n            this.drawSymbol(symbol, style, p);\n        }\n        if (this.drawingParameters.drawErrors) {\n            for (const measure of staffLine.Measures) {\n                const measurePSI: BoundingBox = measure.PositionAndShape;\n                const absXPSI: number = measurePSI.AbsolutePosition.x;\n                const absYPSI: number = measurePSI.AbsolutePosition.y + 2;\n                if (measure.hasError && this.graphicalMusicSheet.ParentMusicSheet.DrawErroneousMeasures) {\n                    this.drawLineAsHorizontalRectangle(\n                        new GraphicalLine(\n                            new PointF2D(absXPSI, absYPSI),\n                            new PointF2D(absXPSI + measurePSI.BorderRight, absYPSI),\n                            4,\n                            OutlineAndFillStyleEnum.ErrorUnderlay\n                        ),\n                        <number>GraphicalLayers.MeasureError\n                    );\n                }\n            }\n        }\n    }\n}\n","export enum MusicSymbol {\n    Unused_first_Symbol,\n    BLACK_HEAD,\n    UPWARDS_TAIL,\n    DOWNWARDS_TAIL,\n    UPWARDS_DOUBLE_TAIL,\n    DOWNWARDS_DOUBLE_TAIL,\n    UPWARDS_TRIPLE_TAIL,\n    DOWNWARDS_TRIPLE_TAIL,\n    UPWARDS_QUAD_TAIL,\n    DOWNWARDS_QUAD_TAIL,\n    ROUND_HEAD,\n    WHITE_HEAD,\n    G_CLEF,\n    F_CLEF,\n    C_CLEF,\n    BREVE,\n    BREVE_REST,\n    COMMON_TIME,\n    CUT_TIME,\n    WHOLE_REST,\n    HALF_REST,\n    QUARTER_REST,\n    EIGHTH_REST,\n    SIXTEENTH_REST,\n    THIRTYSECOND_REST,\n    SIXTYFOURTH_REST,\n    FLAT,\n    SHARP,\n    NATURAL,\n    DOUBLE_FLAT,\n    DOUBLE_SHARP,\n    ZERO,\n    ONE,\n    TWO,\n    THREE,\n    FOUR,\n    FIVE,\n    SIX,\n    SEVEN,\n    EIGHT,\n    NINE,\n    DOT,\n    FERMATA,\n    INVERTED_FERMATA,\n    SPICCATO,\n    TENUTO,\n    MARCATO,\n    MARCATISSIMO,\n    INVERTED_MARCATISSIMO,\n    P,\n    F,\n    S,\n    Z,\n    M,\n    R,\n    SEGNO,\n    CODA,\n    DRUM_CLEF,\n    G_CLEF_SUB8,\n    G_CLEF_SUPER8,\n    G_CLEF_SUB15,\n    G_CLEF_SUPER15,\n    F_CLEF_SUB8,\n    F_CLEF_SUPER8,\n    F_CLEF_SUB15,\n    F_CLEF_SUPER15,\n    DOWN_BOW,\n    MORDENT,\n    INVERTED_MORDENT,\n    TURN,\n    INVERTED_TURN,\n    LEFTHAND_PIZZICATO,\n    RELEASE_PED,\n    ENGAGE_PED,\n    VA8,\n    VB8,\n    TRILL,\n    MA15,\n    MB15,\n    HIGH,\n    PLAY,\n    MIC,\n    SNAP_PIZZICATO,\n    NATURAL_HARMONIC,\n    EditPen\n}\n","import {StaffLine} from \"./StaffLine\";\nimport {Instrument} from \"../Instrument\";\nimport {BoundingBox} from \"./BoundingBox\";\nimport {Fraction} from \"../../Common/DataObjects/Fraction\";\nimport {SourceMeasure} from \"../VoiceData/SourceMeasure\";\nimport {InstrumentalGroup} from \"../InstrumentalGroup\";\nimport {TextAlignmentEnum} from \"../../Common/Enums/TextAlignment\";\nimport {GraphicalMusicPage} from \"./GraphicalMusicPage\";\nimport {GraphicalLabel} from \"./GraphicalLabel\";\nimport {GraphicalMeasure} from \"./GraphicalMeasure\";\nimport {GraphicalObject} from \"./GraphicalObject\";\nimport {EngravingRules} from \"./EngravingRules\";\nimport {PointF2D} from \"../../Common/DataObjects/PointF2D\";\nimport {GraphicalStaffEntry} from \"./GraphicalStaffEntry\";\nimport {SystemLinesEnum} from \"./SystemLinesEnum\";\nimport { Dictionary } from \"typescript-collections\";\nimport {GraphicalComment} from \"./GraphicalComment\";\nimport {GraphicalMarkedArea} from \"./GraphicalMarkedArea\";\nimport {SystemLine} from \"./SystemLine\";\nimport {SystemLinePosition} from \"./SystemLinePosition\";\nimport {Staff} from \"../VoiceData/Staff\";\nimport { Label } from \"../Label\";\n\n/**\n * A MusicSystem contains the [[StaffLine]]s for all instruments, until a line break\n */\nexport abstract class MusicSystem extends GraphicalObject {\n    public needsToBeRedrawn: boolean = true;\n    public rules: EngravingRules;\n    protected parent: GraphicalMusicPage;\n    protected id: number;\n    protected staffLines: StaffLine[] = [];\n    protected graphicalMeasures: GraphicalMeasure[][] = [];\n    /** Dictionary of (Instruments and) labels.\n     * note that the key needs to be unique, GraphicalLabel is not unique yet.\n     * That is why the labels are labels.values() and not labels.keys().\n     */\n    protected labels: Dictionary<Instrument, GraphicalLabel> = new Dictionary<Instrument, GraphicalLabel>();\n    protected measureNumberLabels: GraphicalLabel[] = [];\n    protected maxLabelLength: number;\n    protected objectsToRedraw: [Object[], Object][] = [];\n    protected instrumentBrackets: GraphicalObject[] = [];\n    protected groupBrackets: GraphicalObject[] = [];\n    protected graphicalMarkedAreas: GraphicalMarkedArea[] = [];\n    protected graphicalComments: GraphicalComment[] = [];\n    protected systemLines: SystemLine[] = [];\n    public breaksPage: boolean = false;\n\n    constructor(id: number) {\n        super();\n        this.id = id;\n        this.boundingBox = new BoundingBox(this);\n        this.maxLabelLength = 0.0;\n    }\n\n    public get Parent(): GraphicalMusicPage {\n        return this.parent;\n    }\n\n    public set Parent(value: GraphicalMusicPage) {\n        // remove from old page\n        if (this.parent) {\n            const index: number = this.parent.MusicSystems.indexOf(this, 0);\n            if (index > -1) {\n                this.parent.MusicSystems.splice(index, 1);\n            }\n        }\n\n        this.parent = value;\n        this.boundingBox.Parent = value.PositionAndShape;\n    }\n\n    public get NextSystem(): MusicSystem {\n        const idxInParent: number = this.Parent.MusicSystems.indexOf(this);\n        return idxInParent !== this.Parent.MusicSystems.length ? this.Parent.MusicSystems[idxInParent + 1] : undefined;\n    }\n\n    public get StaffLines(): StaffLine[] {\n        return this.staffLines;\n    }\n\n    public get GraphicalMeasures(): GraphicalMeasure[][] {\n        return this.graphicalMeasures;\n    }\n\n    public get MeasureNumberLabels(): GraphicalLabel[] {\n        return this.measureNumberLabels;\n    }\n\n    public get Labels(): GraphicalLabel[] {\n        return this.labels.values();\n    }\n\n    public get ObjectsToRedraw(): [Object[], Object][] {\n        return this.objectsToRedraw;\n    }\n\n    public get InstrumentBrackets(): GraphicalObject[] {\n        return this.instrumentBrackets;\n    }\n\n    public get GroupBrackets(): GraphicalObject[] {\n        return this.groupBrackets;\n    }\n\n    public get GraphicalMarkedAreas(): GraphicalMarkedArea[] {\n        return this.graphicalMarkedAreas;\n    }\n\n    public get GraphicalComments(): GraphicalComment[] {\n        return this.graphicalComments;\n    }\n\n    public get SystemLines(): SystemLine[] {\n        return this.systemLines;\n    }\n\n    public get Id(): number {\n        return this.id;\n    }\n\n    /**\n     * Create the left vertical Line connecting all staves of the [[MusicSystem]].\n     * @param lineWidth\n     * @param systemLabelsRightMargin\n     */\n    public createSystemLeftLine(lineWidth: number, systemLabelsRightMargin: number, isFirstSystem: boolean): void {\n        let xPosition: number = -lineWidth / 2;\n        if (isFirstSystem) {\n            xPosition = this.maxLabelLength + systemLabelsRightMargin - lineWidth / 2;\n        }\n        const top: GraphicalMeasure = this.staffLines[0].Measures[0];\n        let bottom: GraphicalMeasure = undefined;\n        if (this.staffLines.length > 1) {\n            bottom = this.staffLines[this.staffLines.length - 1].Measures[0];\n        }\n        const leftSystemLine: SystemLine = this.createSystemLine(xPosition, lineWidth, SystemLinesEnum.SingleThin,\n                                                                 SystemLinePosition.MeasureBegin, this, top, bottom);\n        this.SystemLines.push(leftSystemLine);\n        leftSystemLine.PositionAndShape.RelativePosition = new PointF2D(xPosition, 0);\n        leftSystemLine.PositionAndShape.BorderLeft = 0;\n        leftSystemLine.PositionAndShape.BorderRight = lineWidth;\n        leftSystemLine.PositionAndShape.BorderTop = 0;\n        leftSystemLine.PositionAndShape.BorderBottom = this.boundingBox.Size.height;\n        this.createLinesForSystemLine(leftSystemLine);\n    }\n\n    /**\n     * Create the vertical Lines after the End of all [[StaffLine]]'s Measures\n     * @param xPosition\n     * @param lineWidth\n     * @param lineType\n     * @param linePosition indicates if the line belongs to start or end of measure\n     * @param measureIndex the measure index within the staffline\n     * @param measure\n     */\n    public createVerticalLineForMeasure(xPosition: number, lineWidth: number, lineType: SystemLinesEnum, linePosition: SystemLinePosition,\n                                        measureIndex: number, measure: GraphicalMeasure): void {\n        //return; // TODO check why there's a bold line here for the double barline sample\n        const staffLine: StaffLine = measure.ParentStaffLine;\n        const staffLineRelative: PointF2D = new PointF2D(staffLine.PositionAndShape.RelativePosition.x,\n                                                         staffLine.PositionAndShape.RelativePosition.y);\n        const staves: Staff[] = staffLine.ParentStaff.ParentInstrument.Staves;\n        if (staffLine.ParentStaff === staves[0]) {\n            let bottomMeasure: GraphicalMeasure = undefined;\n            if (staves.length > 1) {\n                bottomMeasure = this.getBottomStaffLine(staffLine).Measures[measureIndex];\n            }\n            const singleVerticalLineAfterMeasure: SystemLine = this.createSystemLine(xPosition, lineWidth, lineType,\n                                                                                     linePosition, this, measure, bottomMeasure);\n            const systemXPosition: number = staffLineRelative.x + xPosition;\n            singleVerticalLineAfterMeasure.PositionAndShape.RelativePosition = new PointF2D(systemXPosition, 0);\n            singleVerticalLineAfterMeasure.PositionAndShape.BorderLeft = 0;\n            singleVerticalLineAfterMeasure.PositionAndShape.BorderRight = lineWidth;\n            this.SystemLines.push(singleVerticalLineAfterMeasure);\n        }\n    }\n\n    /**\n     * Set the y-Positions of all the system lines in the system and creates the graphical Lines and dots within.\n     * @param rules\n     */\n    public setYPositionsToVerticalLineObjectsAndCreateLines(rules: EngravingRules): void {\n        // empty\n    }\n\n    public calculateBorders(rules: EngravingRules): void {\n        // empty\n    }\n\n    public alignBeginInstructions(): void {\n        // empty\n    }\n\n    public GetLeftBorderAbsoluteXPosition(): number {\n        return this.StaffLines[0].PositionAndShape.AbsolutePosition.x + this.StaffLines[0].Measures[0].beginInstructionsWidth;\n    }\n\n    public GetRightBorderAbsoluteXPosition(): number {\n        return this.StaffLines[0].PositionAndShape.AbsolutePosition.x + this.StaffLines[0].StaffLines[0].End.x;\n    }\n\n    public AddGraphicalMeasures(graphicalMeasures: GraphicalMeasure[]): void {\n        for (let idx: number = 0, len: number = graphicalMeasures.length; idx < len; ++idx) {\n            const graphicalMeasure: GraphicalMeasure = graphicalMeasures[idx];\n            graphicalMeasure.ParentMusicSystem = this;\n        }\n        this.graphicalMeasures.push(graphicalMeasures);\n    }\n\n    public GetSystemsFirstTimeStamp(): Fraction {\n        return this.graphicalMeasures[0][0].parentSourceMeasure.AbsoluteTimestamp;\n    }\n\n    public GetSystemsLastTimeStamp(): Fraction {\n        const m: SourceMeasure = this.graphicalMeasures[this.graphicalMeasures.length - 1][0].parentSourceMeasure;\n        return Fraction.plus(m.AbsoluteTimestamp, m.Duration);\n    }\n\n    /**\n     * Create an InstrumentBracket for each multiStave Instrument.\n     * @param instruments\n     * @param staffHeight\n     */\n    public createInstrumentBrackets(instruments: Instrument[], staffHeight: number): void {\n        for (let idx: number = 0, len: number = instruments.length; idx < len; ++idx) {\n            const instrument: Instrument = instruments[idx];\n            if (instrument.Staves.length > 1) {\n                let firstStaffLine: StaffLine = undefined, lastStaffLine: StaffLine = undefined;\n                for (let idx2: number = 0, len2: number = this.staffLines.length; idx2 < len2; ++idx2) {\n                    const staffLine: StaffLine = this.staffLines[idx2];\n                    if (staffLine.ParentStaff === instrument.Staves[0]) {\n                        firstStaffLine = staffLine;\n                    }\n                    if (staffLine.ParentStaff === instrument.Staves[instrument.Staves.length - 1]) {\n                        lastStaffLine = staffLine;\n                    }\n                }\n                if (firstStaffLine && lastStaffLine) {\n                    this.createInstrumentBracket(firstStaffLine, lastStaffLine);\n                }\n            }\n        }\n    }\n\n    /**\n     * Create a GroupBracket for an [[InstrumentalGroup]].\n     * @param instrumentGroups\n     * @param staffHeight\n     * @param recursionDepth\n     */\n    public createGroupBrackets(instrumentGroups: InstrumentalGroup[], staffHeight: number, recursionDepth: number): void {\n        for (let idx: number = 0, len: number = instrumentGroups.length; idx < len; ++idx) {\n            const instrumentGroup: InstrumentalGroup = instrumentGroups[idx];\n            if (instrumentGroup.InstrumentalGroups.length < 1) {\n                continue;\n            }\n            const instrument1: Instrument = this.findFirstVisibleInstrumentInInstrumentalGroup(instrumentGroup);\n            const instrument2: Instrument = this.findLastVisibleInstrumentInInstrumentalGroup(instrumentGroup);\n            if (!instrument1 || !instrument2) {\n                continue;\n            }\n            let firstStaffLine: StaffLine = undefined;\n            let lastStaffLine: StaffLine = undefined;\n            for (let idx2: number = 0, len2: number = this.staffLines.length; idx2 < len2; ++idx2) {\n                const staffLine: StaffLine = this.staffLines[idx2];\n                if (staffLine.ParentStaff === instrument1.Staves[0]) {\n                    firstStaffLine = staffLine;\n                }\n                if (staffLine.ParentStaff === instrument2.Staves[0]) {\n                    lastStaffLine = staffLine;\n                }\n            }\n            if (firstStaffLine && lastStaffLine) {\n                this.createGroupBracket(firstStaffLine, lastStaffLine, recursionDepth);\n            }\n            if (instrumentGroup.InstrumentalGroups.length < 1) {\n                continue;\n            }\n            this.createGroupBrackets(instrumentGroup.InstrumentalGroups, staffHeight, recursionDepth + 1);\n        }\n    }\n\n    /**\n     * Create the Instrument's Labels (only for the first [[MusicSystem]] of the first MusicPage).\n     * @param instrumentLabelTextHeight\n     * @param systemLabelsRightMargin\n     * @param labelMarginBorderFactor\n     */\n    public createMusicSystemLabel(  instrumentLabelTextHeight: number, systemLabelsRightMargin: number,\n                                    labelMarginBorderFactor: number, isFirstSystem: boolean = false): void {\n\n        const originalSystemLabelsRightMargin: number = systemLabelsRightMargin;\n        for (let idx: number = 0, len: number = this.staffLines.length; idx < len; ++idx) {\n            const instrument: Instrument = this.staffLines[idx].ParentStaff.ParentInstrument;\n            let instrNameLabel: Label;\n            if (isFirstSystem) {\n                instrNameLabel = instrument.NameLabel;\n                if (!this.rules.RenderPartNames || !instrNameLabel?.print) {\n                    instrNameLabel = new Label(\"\", instrument.NameLabel.textAlignment, instrument.NameLabel.font);\n                    systemLabelsRightMargin = 0; // might affect lyricist/tempo placement. but without this there's still some extra x-spacing.\n                }\n            } else {\n                if (!this.rules.RenderPartAbbreviations || !this.rules.RenderPartNames // don't render abbreviations if we don't render part names\n                    || this.staffLines.length === 1 // don't render part abbreviations if there's only one instrument/part (could be an option in the future)\n                    || !instrument.PartAbbreviation\n                    || instrument.PartAbbreviation === \"\") {\n                    return;\n                }\n                const labelText: string = instrument.PartAbbreviation;\n                // const labelText: string = instrument.NameLabel.text[0] + \".\";\n                instrNameLabel = new Label(labelText, instrument.NameLabel.textAlignment, instrument.NameLabel.font);\n            }\n            if (instrument?.NameLabel?.print) {\n                const graphicalLabel: GraphicalLabel = new GraphicalLabel(\n                    instrNameLabel, instrumentLabelTextHeight, TextAlignmentEnum.LeftCenter, this.rules, this.boundingBox\n                );\n                graphicalLabel.setLabelPositionAndShapeBorders();\n                this.labels.setValue(instrument, graphicalLabel);\n                // X-Position will be 0 (Label starts at the same PointF_2D with MusicSystem)\n                // Y-Position will be calculated after the y-Spacing\n                // graphicalLabel.PositionAndShape.RelativePosition = new PointF2D(0.0, 0.0);\n            } else {\n                systemLabelsRightMargin = 0;\n            }\n        }\n\n        // calculate maxLabelLength (needed for X-Spacing)\n        this.maxLabelLength = 0.0;\n        const labels: GraphicalLabel[] = this.labels.values();\n        for (let idx: number = 0, len: number = labels.length; idx < len; ++idx) {\n            const label: GraphicalLabel = labels[idx];\n            if (!label.Label.print) {\n                continue;\n            }\n            if (label.PositionAndShape.Size.width > this.maxLabelLength) {\n                this.maxLabelLength = label.PositionAndShape.Size.width;\n                systemLabelsRightMargin = originalSystemLabelsRightMargin;\n            }\n        }\n        this.updateMusicSystemStaffLineXPosition(systemLabelsRightMargin);\n    }\n\n    /**\n     * Set the Y-Positions for the MusicSystem's Labels.\n     */\n    public setMusicSystemLabelsYPosition(): void {\n        this.labels.forEach((key: Instrument, value: GraphicalLabel): void => {\n            let ypositionSum: number = 0;\n            let staffCounter: number = 0;\n            for (let i: number = 0; i < this.staffLines.length; i++) {\n                if (this.staffLines[i].ParentStaff.ParentInstrument === key) {\n                    for (let j: number = i; j < this.staffLines.length; j++) {\n                        const staffLine: StaffLine = this.staffLines[j];\n                        if (staffLine.ParentStaff.ParentInstrument !== key) {\n                            break;\n                        }\n                        ypositionSum += staffLine.PositionAndShape.RelativePosition.y;\n                        staffCounter++;\n                    }\n                    break;\n                }\n            }\n            if (staffCounter > 0) {\n                value.PositionAndShape.RelativePosition = new PointF2D(0.0, ypositionSum / staffCounter + 2.0);\n            }\n        });\n    }\n\n    /**\n     * Check if two \"adjacent\" StaffLines have BOTH a StaffEntry with a StaffEntryLink.\n     * This is needed for the y-spacing algorithm.\n     * @returns {boolean}\n     */\n    public checkStaffEntriesForStaffEntryLink(): boolean {\n        let first: boolean = false;\n        let second: boolean = false;\n        for (let i: number = 0; i < this.staffLines.length - 1; i++) {\n            for (let idx: number = 0, len: number = this.staffLines[i].Measures.length; idx < len; ++idx) {\n                const measure: GraphicalMeasure = this.staffLines[i].Measures[idx];\n                for (let idx2: number = 0, len2: number = measure.staffEntries.length; idx2 < len2; ++idx2) {\n                    const staffEntry: GraphicalStaffEntry = measure.staffEntries[idx2];\n                    if (staffEntry.sourceStaffEntry.Link) {\n                        first = true;\n                    }\n                }\n            }\n            for (let idx: number = 0, len: number = this.staffLines[i + 1].Measures.length; idx < len; ++idx) {\n                const measure: GraphicalMeasure = this.staffLines[i + 1].Measures[idx];\n                for (let idx2: number = 0, len2: number = measure.staffEntries.length; idx2 < len2; ++idx2) {\n                    const staffEntry: GraphicalStaffEntry = measure.staffEntries[idx2];\n                    if (staffEntry.sourceStaffEntry.Link) {\n                        second = true;\n                    }\n                }\n            }\n        }\n        if (first && second) {\n            return true;\n        }\n        return false;\n    }\n\n    public getBottomStaffLine(topStaffLine: StaffLine): StaffLine {\n        const staves: Staff[] = topStaffLine.ParentStaff.ParentInstrument.Staves;\n        const last: Staff = staves[staves.length - 1];\n        for (const line of topStaffLine.ParentMusicSystem.staffLines) {\n            if (line.ParentStaff === last) {\n                return line;\n            }\n        }\n        return undefined;\n    }\n\n    /**\n     * Here the system line is generated, which acts as the container of graphical lines and dots that will be finally rendered.\n     * It holds al the logical parameters of the system line.\n     * @param xPosition The x position within the system\n     * @param lineWidth The total x width\n     * @param lineType The line type enum\n     * @param linePosition indicates if the line belongs to start or end of measure\n     * @param musicSystem\n     * @param topMeasure\n     * @param bottomMeasure\n     */\n    protected createSystemLine(xPosition: number, lineWidth: number, lineType: SystemLinesEnum, linePosition: SystemLinePosition,\n                               musicSystem: MusicSystem, topMeasure: GraphicalMeasure, bottomMeasure: GraphicalMeasure = undefined): SystemLine {\n        throw new Error(\"not implemented\");\n    }\n\n    /**\n     * Create all the graphical lines and dots needed to render a system line (e.g. bold-thin-dots..).\n     * @param systemLine\n     */\n    protected createLinesForSystemLine(systemLine: SystemLine): void {\n        //Empty\n    }\n\n    /**\n     * Calculates the summed x-width of a possibly given Instrument Brace and/or Group Bracket(s).\n     * @returns {number} the x-width\n     */\n    protected calcBracketsWidth(): number {\n        let width: number = 0;\n        for (let idx: number = 0, len: number = this.GroupBrackets.length; idx < len; ++idx) {\n            const groupBracket: GraphicalObject = this.GroupBrackets[idx];\n            width = Math.max(width, groupBracket.PositionAndShape.Size.width);\n        }\n        for (let idx2: number = 0, len2: number = this.InstrumentBrackets.length; idx2 < len2; ++idx2) {\n            const instrumentBracket: GraphicalObject = this.InstrumentBrackets[idx2];\n            width = Math.max(width, instrumentBracket.PositionAndShape.Size.width);\n        }\n        return width;\n    }\n\n    protected createInstrumentBracket(firstStaffLine: StaffLine, lastStaffLine: StaffLine): void {\n        // no impl here\n    }\n\n    protected createGroupBracket(firstStaffLine: StaffLine, lastStaffLine: StaffLine, recursionDepth: number): void {\n        // no impl here\n    }\n\n    private findFirstVisibleInstrumentInInstrumentalGroup(instrumentalGroup: InstrumentalGroup): Instrument {\n        for (let idx: number = 0, len: number = instrumentalGroup.InstrumentalGroups.length; idx < len; ++idx) {\n            const groupOrInstrument: InstrumentalGroup = instrumentalGroup.InstrumentalGroups[idx];\n            if (groupOrInstrument instanceof Instrument) {\n                if ((<Instrument>groupOrInstrument).Visible === true) {\n                    return <Instrument>groupOrInstrument;\n                }\n                continue;\n            }\n            return this.findFirstVisibleInstrumentInInstrumentalGroup(groupOrInstrument);\n        }\n        return undefined;\n    }\n\n    private findLastVisibleInstrumentInInstrumentalGroup(instrumentalGroup: InstrumentalGroup): Instrument {\n        let groupOrInstrument: InstrumentalGroup;\n        for (let i: number = instrumentalGroup.InstrumentalGroups.length - 1; i >= 0; i--) {\n            groupOrInstrument = instrumentalGroup.InstrumentalGroups[i];\n            if (groupOrInstrument instanceof Instrument) {\n                if ((<Instrument>groupOrInstrument).Visible === true) {\n                    return <Instrument>groupOrInstrument;\n                }\n                continue;\n            }\n            return this.findLastVisibleInstrumentInInstrumentalGroup(groupOrInstrument);\n        }\n        return undefined;\n    }\n\n    /**\n     * Update the xPosition of the [[MusicSystem]]'s [[StaffLine]]'s due to [[Label]] positioning.\n     * @param systemLabelsRightMargin\n     */\n    private updateMusicSystemStaffLineXPosition(systemLabelsRightMargin: number): void {\n        for (let idx: number = 0, len: number = this.StaffLines.length; idx < len; ++idx) {\n            const staffLine: StaffLine = this.StaffLines[idx];\n            const relative: PointF2D = staffLine.PositionAndShape.RelativePosition;\n            relative.x = this.maxLabelLength + systemLabelsRightMargin;\n            staffLine.PositionAndShape.RelativePosition = relative;\n            staffLine.PositionAndShape.BorderRight = this.boundingBox.Size.width - this.maxLabelLength - systemLabelsRightMargin;\n            for (let i: number = 0; i < staffLine.StaffLines.length; i++) {\n                const lineEnd: PointF2D = new PointF2D(staffLine.PositionAndShape.Size.width, staffLine.StaffLines[i].End.y);\n                staffLine.StaffLines[i].End = lineEnd;\n            }\n        }\n    }\n}\n","import {GraphicalMeasure} from \"./GraphicalMeasure\";\nimport {GraphicalMusicPage} from \"./GraphicalMusicPage\";\nimport {EngravingRules} from \"./EngravingRules\";\nimport {RhythmInstruction} from \"../VoiceData/Instructions/RhythmInstruction\";\nimport {KeyInstruction} from \"../VoiceData/Instructions/KeyInstruction\";\nimport {ClefInstruction} from \"../VoiceData/Instructions/ClefInstruction\";\nimport {SourceMeasure} from \"../VoiceData/SourceMeasure\";\nimport {MusicSystem} from \"./MusicSystem\";\nimport {BoundingBox} from \"./BoundingBox\";\nimport {Staff} from \"../VoiceData/Staff\";\nimport {Instrument} from \"../Instrument\";\nimport {PointF2D} from \"../../Common/DataObjects/PointF2D\";\nimport {StaffLine} from \"./StaffLine\";\nimport {GraphicalLine} from \"./GraphicalLine\";\nimport {SourceStaffEntry} from \"../VoiceData/SourceStaffEntry\";\nimport {AbstractNotationInstruction} from \"../VoiceData/Instructions/AbstractNotationInstruction\";\nimport {SystemLinesEnum} from \"./SystemLinesEnum\";\nimport {GraphicalMusicSheet} from \"./GraphicalMusicSheet\";\nimport {MusicSheetCalculator} from \"./MusicSheetCalculator\";\nimport {MidiInstrument} from \"../VoiceData/Instructions/ClefInstruction\";\nimport {CollectionUtil} from \"../../Util/CollectionUtil\";\nimport {SystemLinePosition} from \"./SystemLinePosition\";\n\nexport class MusicSystemBuilder {\n    protected measureList: GraphicalMeasure[][];\n    protected graphicalMusicSheet: GraphicalMusicSheet;\n    protected currentSystemParams: SystemBuildParameters;\n    protected numberOfVisibleStaffLines: number;\n    protected rules: EngravingRules;\n    protected measureListIndex: number;\n    protected musicSystems: MusicSystem[] = [];\n\n    /**\n     * Does the mapping from the currently visible staves to the global staff-list of the music sheet.\n     */\n    protected visibleStaffIndices: number[];\n    protected activeRhythm: RhythmInstruction[];\n    protected activeKeys: KeyInstruction[];\n    protected activeClefs: ClefInstruction[];\n    protected globalSystemIndex: number = 0;\n    protected leadSheet: boolean = false;\n\n    public initialize(\n        graphicalMusicSheet: GraphicalMusicSheet, measureList: GraphicalMeasure[][], numberOfStaffLines: number): void {\n        this.leadSheet = graphicalMusicSheet.LeadSheet;\n        this.graphicalMusicSheet = graphicalMusicSheet;\n        this.rules = this.graphicalMusicSheet.ParentMusicSheet.Rules;\n        this.measureList = measureList;\n        this.numberOfVisibleStaffLines = numberOfStaffLines;\n        this.activeRhythm = new Array(this.numberOfVisibleStaffLines);\n        this.activeKeys = new Array(this.numberOfVisibleStaffLines);\n        this.activeClefs = new Array(this.numberOfVisibleStaffLines);\n        this.initializeActiveInstructions(this.measureList[0]);\n    }\n\n    public buildMusicSystems(): MusicSystem[] {\n        const systemMaxWidth: number = this.getFullPageSystemWidth();\n        let prevMeasureEndsPart: boolean = false;\n        this.measureListIndex = 0;\n        this.currentSystemParams = new SystemBuildParameters();\n\n        // the first System - create also its Labels\n        this.currentSystemParams.currentSystem = this.initMusicSystem();\n\n        // let numberOfMeasures: number = 0;\n        // for (let idx: number = 0, len: number = this.measureList.length; idx < len; ++idx) {\n        //     if (this.measureList[idx].length > 0) {\n        //         numberOfMeasures++;\n        //     }\n        // }\n        // console.log(`numberOfMeasures: ${numberOfMeasures}`);\n\n        // go through measures and add to system until system gets too long -> finish system and start next system [line break, new system].\n        while (this.measureListIndex < this.measureList.length) {\n            const graphicalMeasures: GraphicalMeasure[] = this.measureList[this.measureListIndex];\n            if (!graphicalMeasures || !graphicalMeasures[0]) {\n                this.measureListIndex++;\n                continue; // previous measure was probably multi-rest, skip this one\n            }\n            for (let idx: number = 0, len: number = graphicalMeasures.length; idx < len; ++idx) {\n                graphicalMeasures[idx].resetLayout();\n            }\n            const sourceMeasure: SourceMeasure = graphicalMeasures[0].parentSourceMeasure;\n            const sourceMeasureEndsPart: boolean = sourceMeasure.HasEndLine;\n            const sourceMeasureBreaksSystem: boolean = sourceMeasureEndsPart && this.rules.NewPartAndSystemAfterFinalBarline;\n            const isSystemStartMeasure: boolean = this.currentSystemParams.IsSystemStartMeasure();\n            sourceMeasure.IsSystemStartMeasure = isSystemStartMeasure;\n            const isFirstSourceMeasure: boolean = sourceMeasure === this.graphicalMusicSheet.ParentMusicSheet.getFirstSourceMeasure();\n            let currentMeasureBeginInstructionsWidth: number = this.rules.MeasureLeftMargin;\n            let currentMeasureEndInstructionsWidth: number = 0;\n\n            // calculate the current Measure Width:\n            // The width of a measure is build up from\n            // 1. the begin instructions (clef, Key, Rhythm),\n            // 2. the staff entries (= notes) and\n            // 3. the end instructions (actually only clefs)\n            const measureStartLine: SystemLinesEnum = this.getMeasureStartLine();\n            currentMeasureBeginInstructionsWidth += this.getLineWidth(graphicalMeasures[0], measureStartLine, isSystemStartMeasure);\n            if (!this.leadSheet) {\n                let forceShowRhythm: boolean = false;\n                if (prevMeasureEndsPart && this.rules.ShowRhythmAgainAfterPartEndOrFinalBarline) {\n                    forceShowRhythm = true;\n                }\n                currentMeasureBeginInstructionsWidth += this.addBeginInstructions(  graphicalMeasures,\n                                                                                    isSystemStartMeasure,\n                                                                                    isFirstSourceMeasure || forceShowRhythm);\n                // forceShowRhythm could be a fourth parameter instead in addBeginInstructions, but only affects RhythmInstruction for now.\n                currentMeasureEndInstructionsWidth += this.addEndInstructions(graphicalMeasures);\n            }\n            let currentMeasureVarWidth: number = 0;\n            for (let i: number = 0; i < this.numberOfVisibleStaffLines; i++) {\n                currentMeasureVarWidth = Math.max(currentMeasureVarWidth, graphicalMeasures[i].minimumStaffEntriesWidth);\n            }\n\n            // take into account the LineWidth after each Measure\n            const measureEndLine: SystemLinesEnum = this.getMeasureEndLine();\n            currentMeasureEndInstructionsWidth += this.getLineWidth(graphicalMeasures[0], measureEndLine, isSystemStartMeasure);\n            let nextMeasureBeginInstructionWidth: number = this.rules.MeasureLeftMargin;\n\n            // Check if there are key or rhythm change instructions within the next measure:\n            let nextSourceMeasure: SourceMeasure = undefined;\n            if (this.measureListIndex + 1 < this.measureList.length) {\n                const nextGraphicalMeasures: GraphicalMeasure[] = this.measureList[this.measureListIndex + 1];\n                // TODO: consider multirest. then the next graphical measure may not exist. but there shouldn't be hidden changes here.\n                nextSourceMeasure = nextGraphicalMeasures[0]?.parentSourceMeasure;\n                if (nextSourceMeasure?.hasBeginInstructions()) {\n                    nextMeasureBeginInstructionWidth += this.addBeginInstructions(nextGraphicalMeasures, false, false);\n                }\n            }\n            let totalMeasureWidth: number = currentMeasureBeginInstructionsWidth + currentMeasureEndInstructionsWidth + currentMeasureVarWidth;\n            if (graphicalMeasures[0]?.parentSourceMeasure?.multipleRestMeasures) {\n                totalMeasureWidth = this.rules.MultipleRestMeasureDefaultWidth; // default 4 (12 seems too large)\n            }\n            const measureFitsInSystem: boolean = this.currentSystemParams.currentWidth + totalMeasureWidth + nextMeasureBeginInstructionWidth < systemMaxWidth;\n            const doXmlPageBreak: boolean = this.rules.NewPageAtXMLNewPageAttribute && sourceMeasure.printNewPageXml;\n            const doXmlLineBreak: boolean = doXmlPageBreak || // also create new system if doing page break\n                (this.rules.NewSystemAtXMLNewSystemAttribute && sourceMeasure.printNewSystemXml);\n            if (isSystemStartMeasure || (measureFitsInSystem && !doXmlLineBreak)) {\n                this.addMeasureToSystem(\n                    graphicalMeasures, measureStartLine, measureEndLine, totalMeasureWidth,\n                    currentMeasureBeginInstructionsWidth, currentMeasureVarWidth, currentMeasureEndInstructionsWidth\n                );\n                this.updateActiveClefs(sourceMeasure, graphicalMeasures);\n                this.measureListIndex++;\n                if (sourceMeasureBreaksSystem) {\n                    if (this.rules.MaxSystemToDrawNumber === this.musicSystems.length) {\n                        this.finalizeCurrentSystem(graphicalMeasures, !this.rules.StretchLastSystemLine, false);\n                        return this.musicSystems;\n                    }\n                    this.finalizeCurrentAndCreateNewSystem(graphicalMeasures, !this.rules.StretchLastSystemLine, false);\n                }\n                prevMeasureEndsPart = sourceMeasureEndsPart;\n            } else {\n                if (this.rules.MaxSystemToDrawNumber === this.musicSystems.length) {\n                    this.finalizeCurrentSystem(graphicalMeasures, false, true, doXmlPageBreak);\n                    return this.musicSystems;\n                }\n                // finalize current system and prepare a new one\n                this.finalizeCurrentAndCreateNewSystem(graphicalMeasures, false, true, doXmlPageBreak);\n                // don't increase measure index to check this measure now again\n                // don't set prevMeasureEndsPart in this case! because we will loop with the same measure again.\n            }\n        }\n        if (this.currentSystemParams.systemMeasures.length > 0) {\n            if (this.rules.MaxSystemToDrawNumber === this.musicSystems.length) {\n                this.finalizeCurrentSystem(this.measureList[this.measureList.length - 1], !this.rules.StretchLastSystemLine, false);\n                return this.musicSystems;\n            }\n            this.finalizeCurrentAndCreateNewSystem(this.measureList[this.measureList.length - 1], !this.rules.StretchLastSystemLine, false);\n        }\n        return this.musicSystems;\n    }\n\n    /**\n     * calculates the y positions of the staff lines within a system and\n     * furthermore the y positions of the systems themselves.\n     */\n    public calculateSystemYLayout(): void {\n        for (const musicSystem of this.musicSystems) {\n            this.optimizeDistanceBetweenStaffLines(musicSystem);\n        }\n\n        // set y positions of systems using the previous system and a fixed distance.\n        this.calculateMusicSystemsRelativePositions();\n    }\n\n    /**\n     * Set the Width of the staff-Measures of one source measure.\n     * @param graphicalMeasures\n     * @param width\n     * @param beginInstrWidth\n     * @param endInstrWidth\n     */\n    protected setMeasureWidth(graphicalMeasures: GraphicalMeasure[], width: number, beginInstrWidth: number, endInstrWidth: number): void {\n        for (let idx: number = 0, len: number = graphicalMeasures.length; idx < len; ++idx) {\n            const measure: GraphicalMeasure = graphicalMeasures[idx];\n            measure.setWidth(width);\n            if (beginInstrWidth > 0) {\n                measure.beginInstructionsWidth = beginInstrWidth;\n            }\n            if (endInstrWidth > 0) {\n                measure.endInstructionsWidth = endInstrWidth;\n            }\n        }\n    }\n\n    /**\n     * When the actual source measure doesn't fit any more, this method finalizes the current system and\n     * opens up a new empty system, where the actual measure will be added in the next iteration.\n     * @param measures\n     * @param isPartEndingSystem\n     */\n    protected finalizeCurrentAndCreateNewSystem(measures: GraphicalMeasure[],\n                                                systemEndsPart: boolean = false,\n                                                checkExtraInstructionMeasure: boolean = true,\n                                                startNewPage: boolean = false): void {\n        this.finalizeCurrentSystem(measures, systemEndsPart, checkExtraInstructionMeasure, startNewPage);\n        this.currentSystemParams = new SystemBuildParameters(); // this and the following used to be in finalizeCurrentSystem after stretchMusicSystem\n        if (measures !== undefined &&\n            this.measureListIndex < this.measureList.length) {\n            this.currentSystemParams.currentSystem = this.initMusicSystem();\n        }\n    }\n\n    protected finalizeCurrentSystem(measures: GraphicalMeasure[],\n                                    systemEndsPart: boolean = false,\n                                    checkExtraInstructionMeasure: boolean = true,\n                                    startNewPage: boolean = false): void {\n        this.currentSystemParams.currentSystem.breaksPage = startNewPage;\n        this.adaptRepetitionLineWithIfNeeded();\n        if (measures !== undefined &&\n            checkExtraInstructionMeasure) {\n            this.checkAndCreateExtraInstructionMeasure(measures);\n        }\n        this.stretchMusicSystem(systemEndsPart);\n    }\n\n    /**\n     * If a line repetition is ending and a new line repetition is starting at the end of the system,\n     * the double repetition line has to be split into two: one at the currently ending system and\n     * one at the next system.\n     * (this should be refactored at some point to not use a combined end/start line but always separated lines)\n     */\n    protected adaptRepetitionLineWithIfNeeded(): void {\n        const systemMeasures: MeasureBuildParameters[] = this.currentSystemParams.systemMeasures;\n        if (systemMeasures.length >= 1) {\n            const measures: GraphicalMeasure[] =\n                this.currentSystemParams.currentSystem.GraphicalMeasures[this.currentSystemParams.currentSystem.GraphicalMeasures.length - 1];\n            let diff: number = 0.0;\n            const measureParams: MeasureBuildParameters = systemMeasures[systemMeasures.length - 1];\n            if (measureParams.endLine === SystemLinesEnum.DotsBoldBoldDots) {\n                measureParams.endLine = SystemLinesEnum.DotsThinBold;\n                diff = measures[0].getLineWidth(SystemLinesEnum.DotsBoldBoldDots) / 2 - measures[0].getLineWidth(SystemLinesEnum.DotsThinBold);\n            }\n            this.currentSystemParams.currentSystemFixWidth -= diff;\n            for (let idx: number = 0, len: number = measures.length; idx < len; ++idx) {\n                const measure: GraphicalMeasure = measures[idx];\n                measure.endInstructionsWidth -= diff;\n            }\n        }\n    }\n\n    protected addMeasureToSystem(\n        graphicalMeasures: GraphicalMeasure[], measureStartLine: SystemLinesEnum, measureEndLine: SystemLinesEnum,\n        totalMeasureWidth: number, currentMeasureBeginInstructionsWidth: number, currentVarWidth: number, currentMeasureEndInstructionsWidth: number\n    ): void {\n        this.currentSystemParams.systemMeasures.push({beginLine: measureStartLine, endLine: measureEndLine});\n        this.setMeasureWidth(\n            graphicalMeasures, totalMeasureWidth, currentMeasureBeginInstructionsWidth, currentMeasureEndInstructionsWidth\n        );\n        this.addStaveMeasuresToSystem(graphicalMeasures);\n        this.currentSystemParams.currentWidth += totalMeasureWidth;\n        this.currentSystemParams.currentSystemFixWidth += currentMeasureBeginInstructionsWidth + currentMeasureEndInstructionsWidth;\n        this.currentSystemParams.currentSystemVarWidth += currentVarWidth;\n        this.currentSystemParams.systemMeasureIndex++;\n    }\n\n    /**\n     * Initialize a new [[MusicSystem]].\n     * @returns {MusicSystem}\n     */\n    protected initMusicSystem(): MusicSystem {\n        const musicSystem: MusicSystem = MusicSheetCalculator.symbolFactory.createMusicSystem(this.globalSystemIndex++, this.rules);\n        this.musicSystems.push(musicSystem);\n        this.layoutSystemStaves(musicSystem);\n        musicSystem.createMusicSystemLabel(\n            this.rules.InstrumentLabelTextHeight,\n            this.rules.SystemLabelsRightMargin,\n            this.rules.LabelMarginBorderFactor,\n            this.musicSystems.length === 1\n        );\n        return musicSystem;\n    }\n\n    /**\n     * Get the width the system should have for a given page width.\n     * @returns {number}\n     */\n    protected getFullPageSystemWidth(): number {\n        return this.graphicalMusicSheet.ParentMusicSheet.pageWidth - this.rules.PageLeftMargin\n            - this.rules.PageRightMargin - this.rules.SystemLeftMargin - this.rules.SystemRightMargin;\n    }\n\n    protected layoutSystemStaves(musicSystem: MusicSystem): void {\n        const systemWidth: number = this.getFullPageSystemWidth();\n        const boundingBox: BoundingBox = musicSystem.PositionAndShape;\n        boundingBox.BorderLeft = 0.0;\n        boundingBox.BorderRight = systemWidth;\n        boundingBox.BorderTop = 0.0;\n        const staffList: Staff[] = [];\n        const instruments: Instrument[] = this.graphicalMusicSheet.ParentMusicSheet.Instruments;\n        for (let idx: number = 0, len: number = instruments.length; idx < len; ++idx) {\n            const instrument: Instrument = instruments[idx];\n            if (!instrument.Visible || instrument.Voices.length === 0) {\n                continue;\n            }\n            for (let idx2: number = 0, len2: number = instrument.Staves.length; idx2 < len2; ++idx2) {\n                const staff: Staff = instrument.Staves[idx2];\n                staffList.push(staff);\n            }\n        }\n        let multiLyrics: boolean = false;\n        if (this.leadSheet) {\n            for (let idx: number = 0, len: number = staffList.length; idx < len; ++idx) {\n                const staff: Staff = staffList[idx];\n                if (staff.ParentInstrument.LyricVersesNumbers.length > 1) {\n                    multiLyrics = true;\n                    break;\n                }\n            }\n        }\n        let yOffsetSum: number = 0;\n        for (let i: number = 0; i < staffList.length; i++) {\n            this.addStaffLineToMusicSystem(musicSystem, yOffsetSum, staffList[i]);\n            yOffsetSum += this.rules.StaffHeight;\n            if (i + 1 < staffList.length) {\n                let yOffset: number = 0;\n                if (this.leadSheet && !multiLyrics) {\n                    yOffset = 2.5;\n                } else {\n                    if (staffList[i].ParentInstrument === staffList[i + 1].ParentInstrument) {\n                        yOffset = this.rules.BetweenStaffDistance;\n                    } else {\n                        yOffset = this.rules.StaffDistance;\n                    }\n                }\n                yOffsetSum += yOffset;\n            }\n        }\n        boundingBox.BorderBottom = yOffsetSum;\n    }\n\n    /**\n     * Calculate the [[StaffLine]](s) needed for a [[MusicSystem]].\n     * @param musicSystem\n     * @param relativeYPosition\n     * @param staff\n     */\n    protected addStaffLineToMusicSystem(musicSystem: MusicSystem, relativeYPosition: number, staff: Staff): void {\n        if (musicSystem) {\n            const staffLine: StaffLine = MusicSheetCalculator.symbolFactory.createStaffLine(musicSystem, staff);\n            musicSystem.StaffLines.push(staffLine);\n            const boundingBox: BoundingBox = staffLine.PositionAndShape;\n            const relativePosition: PointF2D = new PointF2D();\n            relativePosition.x = 0.0;\n            boundingBox.BorderRight = musicSystem.PositionAndShape.Size.width;\n            relativePosition.y = relativeYPosition;\n            boundingBox.RelativePosition = relativePosition;\n            boundingBox.BorderLeft = 0.0;\n            boundingBox.BorderTop = 0.0;\n            boundingBox.BorderBottom = this.rules.StaffHeight;\n            for (let i: number = 0; i < 5; i++) {\n                const start: PointF2D = new PointF2D();\n                start.x = 0.0;\n                start.y = i * this.rules.StaffHeight / 4;\n                const end: PointF2D = new PointF2D();\n                end.x = staffLine.PositionAndShape.Size.width;\n                end.y = i * this.rules.StaffHeight / 4;\n                if (this.leadSheet) {\n                    start.y = end.y = 0;\n                }\n                staffLine.StaffLines[i] = new GraphicalLine(start, end, this.rules.StaffLineWidth);\n            }\n        }\n    }\n\n    /**\n     * Initialize the active Instructions from the first [[SourceMeasure]] of first [[SourceMusicPart]].\n     * @param measureList\n     */\n    protected initializeActiveInstructions(measureList: GraphicalMeasure[]): void {\n        const firstSourceMeasure: SourceMeasure = this.graphicalMusicSheet.ParentMusicSheet.getFirstSourceMeasure();\n        if (firstSourceMeasure) {\n            this.visibleStaffIndices = this.graphicalMusicSheet.getVisibleStavesIndicesFromSourceMeasure(measureList);\n            for (let i: number = 0, len: number = this.visibleStaffIndices.length; i < len; i++) {\n                const staffIndex: number = this.visibleStaffIndices[i];\n                const graphicalMeasure: GraphicalMeasure = this.graphicalMusicSheet\n                    .getGraphicalMeasureFromSourceMeasureAndIndex(firstSourceMeasure, staffIndex);\n                this.activeClefs[i] = <ClefInstruction>firstSourceMeasure.FirstInstructionsStaffEntries[staffIndex].Instructions[0];\n                const firstKeyInstruction: KeyInstruction = <KeyInstruction>firstSourceMeasure.FirstInstructionsStaffEntries[staffIndex].Instructions[1];\n                if (firstKeyInstruction) {\n                    let keyInstruction: KeyInstruction = KeyInstruction.copy(firstKeyInstruction);\n                    keyInstruction = this.transposeKeyInstruction(keyInstruction, graphicalMeasure);\n                    this.activeKeys[i] = keyInstruction;\n                }\n                const firstRhythmInstruction: RhythmInstruction = <RhythmInstruction>\n                    firstSourceMeasure.FirstInstructionsStaffEntries[staffIndex].Instructions[2];\n                // if (firstRhythmInstruction) {\n                this.activeRhythm[i] = firstRhythmInstruction;\n            }\n        }\n    }\n\n    protected transposeKeyInstruction(keyInstruction: KeyInstruction, graphicalMeasure: GraphicalMeasure): KeyInstruction {\n        const transposeHalftones: number = graphicalMeasure.getTransposedHalftones();\n        if (transposeHalftones !== keyInstruction.isTransposedBy\n            && graphicalMeasure.ParentStaff.ParentInstrument.MidiInstrumentId !== MidiInstrument.Percussion\n            && MusicSheetCalculator.transposeCalculator !== undefined\n        ) {\n            MusicSheetCalculator.transposeCalculator.transposeKey(\n                keyInstruction,\n                transposeHalftones\n            );\n        }\n        return keyInstruction;\n        // TODO we probably need to call initializeActiveInstructions() after this has been executed\n        //   (though we need to call it from where this is called)\n        //   since the accidentals are messed up after changing from transpose to 1 then to 0 again,\n        //   probably because this.activeKeys doesn't get updated. or maybe the issue is somewhere else\n    }\n\n    /**\n     * Calculate the width needed for Instructions (Key, Clef, Rhythm, Repetition) for the measure.\n     * @param measures\n     * @param isSystemFirstMeasure\n     * @param isFirstSourceMeasure\n     * @returns {number}\n     */\n    protected addBeginInstructions(measures: GraphicalMeasure[], isSystemFirstMeasure: boolean, isFirstSourceMeasure: boolean): number {\n        const measureCount: number = measures.length;\n        if (measureCount === 0) {\n            return 0;\n        }\n        let totalBeginInstructionLengthX: number = 0.0;\n        const sourceMeasure: SourceMeasure = measures[0].parentSourceMeasure;\n        for (let idx: number = 0; idx < measureCount; ++idx) {\n            const measure: GraphicalMeasure = measures[idx];\n            const staffIndex: number = this.visibleStaffIndices[idx];\n            const beginInstructionsStaffEntry: SourceStaffEntry = sourceMeasure.FirstInstructionsStaffEntries[staffIndex];\n            const beginInstructionLengthX: number = this.AddInstructionsAtMeasureBegin(\n                beginInstructionsStaffEntry, measure,\n                idx, isFirstSourceMeasure,\n                isSystemFirstMeasure\n            );\n            totalBeginInstructionLengthX = Math.max(totalBeginInstructionLengthX, beginInstructionLengthX);\n        }\n        return totalBeginInstructionLengthX;\n    }\n\n    /**\n     * Calculates the width needed for Instructions (Clef, Repetition) for the measure.\n     * @param measures\n     * @returns {number}\n     */\n    protected addEndInstructions(measures: GraphicalMeasure[]): number {\n        const measureCount: number = measures.length;\n        if (measureCount === 0) {\n            return 0;\n        }\n        let totalEndInstructionLengthX: number = 0.5;\n        const sourceMeasure: SourceMeasure = measures[0].parentSourceMeasure;\n        for (let idx: number = 0; idx < measureCount; idx++) {\n            const measure: GraphicalMeasure = measures[idx];\n            const staffIndex: number = this.visibleStaffIndices[idx];\n            const endInstructionsStaffEntry: SourceStaffEntry = sourceMeasure.LastInstructionsStaffEntries[staffIndex];\n            const endInstructionLengthX: number = this.addInstructionsAtMeasureEnd(endInstructionsStaffEntry, measure, measures);\n            totalEndInstructionLengthX = Math.max(totalEndInstructionLengthX, endInstructionLengthX);\n        }\n        return totalEndInstructionLengthX;\n    }\n\n    protected AddInstructionsAtMeasureBegin(firstEntry: SourceStaffEntry, measure: GraphicalMeasure,\n                                            visibleStaffIdx: number, isFirstSourceMeasure: boolean, isSystemStartMeasure: boolean): number {\n        let instructionsLengthX: number = 0;\n        let currentClef: ClefInstruction = undefined;\n        let currentKey: KeyInstruction = undefined;\n        let currentRhythm: RhythmInstruction = undefined;\n        if (firstEntry) {\n            for (let idx: number = 0, len: number = firstEntry.Instructions.length; idx < len; ++idx) {\n                const abstractNotationInstruction: AbstractNotationInstruction = firstEntry.Instructions[idx];\n                if (abstractNotationInstruction instanceof ClefInstruction) {\n                    currentClef = <ClefInstruction>abstractNotationInstruction;\n                } else if (abstractNotationInstruction instanceof KeyInstruction) {\n                    currentKey = <KeyInstruction>abstractNotationInstruction;\n                } else if (abstractNotationInstruction instanceof RhythmInstruction) {\n                    currentRhythm = <RhythmInstruction>abstractNotationInstruction;\n                }\n            }\n        }\n        if (isSystemStartMeasure) {\n            if (!currentClef) {\n                currentClef = this.activeClefs[visibleStaffIdx];\n            }\n            if (!currentKey) {\n                currentKey = KeyInstruction.copy(this.activeKeys[visibleStaffIdx]);\n            }\n            if (isFirstSourceMeasure && !currentRhythm) {\n                currentRhythm = this.activeRhythm[visibleStaffIdx];\n            }\n        }\n        let clefAdded: boolean = false;\n        let keyAdded: boolean = false;\n        let rhythmAdded: boolean = false;\n        if (currentClef) {\n            measure.addClefAtBegin(currentClef);\n            clefAdded = true;\n        } else {\n            currentClef = this.activeClefs[visibleStaffIdx];\n        }\n        if (currentKey) {\n            currentKey = this.transposeKeyInstruction(currentKey, measure);\n            const previousKey: KeyInstruction = isSystemStartMeasure ? undefined : this.activeKeys[visibleStaffIdx];\n            measure.addKeyAtBegin(currentKey, previousKey, currentClef);\n            keyAdded = true;\n        }\n        if (currentRhythm !== undefined && currentRhythm.PrintObject && this.rules.RenderTimeSignatures) {\n            let printRhythm: boolean = true;\n            // check for previous pickup measure\n            // TODO this does not need to be a pickup measure, see #1069\n            const pickupMeasureIndex: number = measure.MeasureNumber - 1;\n            const measureIndex: number = pickupMeasureIndex - this.rules.MinMeasureToDrawIndex;\n            if (measure.MeasureNumber - 1 >= 0 && this.measureList[measureIndex]) {\n                const previousMeasureList: GraphicalMeasure[] = this.measureList[measureIndex];\n                const previousMeasure: SourceMeasure = previousMeasureList[0]?.parentSourceMeasure;\n                if (previousMeasure?.ImplicitMeasure && previousMeasure?.RhythmPrinted) {\n                    printRhythm = false;\n                }\n            }\n            if (printRhythm) {\n                measure.addRhythmAtBegin(currentRhythm);\n                measure.parentSourceMeasure.RhythmPrinted = currentRhythm;\n                rhythmAdded = true;\n            }\n        }\n        if (clefAdded || keyAdded || rhythmAdded) {\n            instructionsLengthX += measure.beginInstructionsWidth;\n            if (rhythmAdded) {\n                instructionsLengthX += this.rules.RhythmRightMargin;\n            }\n        }\n        return instructionsLengthX;\n    }\n\n    protected addInstructionsAtMeasureEnd(lastEntry: SourceStaffEntry, measure: GraphicalMeasure,\n        measures: GraphicalMeasure[]): number {\n        if (!lastEntry || !lastEntry.Instructions || lastEntry.Instructions.length === 0) {\n            return 0;\n        }\n        for (let idx: number = 0, len: number = lastEntry.Instructions.length; idx < len; ++idx) {\n            const abstractNotationInstruction: AbstractNotationInstruction = lastEntry.Instructions[idx];\n            if (abstractNotationInstruction instanceof ClefInstruction) {\n                const activeClef: ClefInstruction = <ClefInstruction>abstractNotationInstruction;\n                measure.addClefAtEnd(activeClef);\n                for (const otherVerticalMeasure of measures) {\n                    if (otherVerticalMeasure !== measure) {\n                        otherVerticalMeasure.addClefAtEnd(activeClef, false);\n                    }\n                }\n            }\n        }\n        return this.rules.MeasureRightMargin + measure.endInstructionsWidth;\n    }\n\n    /**\n     * Track down and update the active ClefInstruction in Measure's StaffEntries.\n     * This has to be done after the measure is added to a system\n     * (otherwise already the check if the measure fits to the system would update the active clefs..)\n     * @param measure\n     * @param graphicalMeasures\n     */\n    protected updateActiveClefs(measure: SourceMeasure, graphicalMeasures: GraphicalMeasure[]): void {\n        for (let visStaffIdx: number = 0, len: number = graphicalMeasures.length; visStaffIdx < len; visStaffIdx++) {\n            const staffIndex: number = this.visibleStaffIndices[visStaffIdx];\n            const firstEntry: SourceStaffEntry = measure.FirstInstructionsStaffEntries[staffIndex];\n            if (firstEntry) {\n                for (let idx: number = 0, len2: number = firstEntry.Instructions.length; idx < len2; ++idx) {\n                    const abstractNotationInstruction: AbstractNotationInstruction = firstEntry.Instructions[idx];\n                    if (abstractNotationInstruction instanceof ClefInstruction) {\n                        this.activeClefs[visStaffIdx] = <ClefInstruction>abstractNotationInstruction;\n                    } else if (abstractNotationInstruction instanceof KeyInstruction) {\n                        this.activeKeys[visStaffIdx] = <KeyInstruction>abstractNotationInstruction;\n                    } else if (abstractNotationInstruction instanceof RhythmInstruction) {\n                        this.activeRhythm[visStaffIdx] = <RhythmInstruction>abstractNotationInstruction;\n                    }\n                }\n            }\n            const entries: SourceStaffEntry[] = measure.getEntriesPerStaff(staffIndex);\n            for (let idx: number = 0, len2: number = entries.length; idx < len2; ++idx) {\n                const staffEntry: SourceStaffEntry = entries[idx];\n                if (staffEntry.Instructions) {\n                    for (let idx2: number = 0, len3: number = staffEntry.Instructions.length; idx2 < len3; ++idx2) {\n                        const abstractNotationInstruction: AbstractNotationInstruction = staffEntry.Instructions[idx2];\n                        if (abstractNotationInstruction instanceof ClefInstruction) {\n                            this.activeClefs[visStaffIdx] = <ClefInstruction>abstractNotationInstruction;\n                        }\n                    }\n                }\n            }\n            const lastEntry: SourceStaffEntry = measure.LastInstructionsStaffEntries[staffIndex];\n            if (lastEntry) {\n                const instructions: AbstractNotationInstruction[] = lastEntry.Instructions;\n                for (let idx: number = 0, len3: number = instructions.length; idx < len3; ++idx) {\n                    const abstractNotationInstruction: AbstractNotationInstruction = instructions[idx];\n                    if (abstractNotationInstruction instanceof ClefInstruction) {\n                        this.activeClefs[visStaffIdx] = <ClefInstruction>abstractNotationInstruction;\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Check if an extra Instruction [[Measure]] is needed.\n     * @param measures\n     */\n    protected checkAndCreateExtraInstructionMeasure(measures: GraphicalMeasure[]): void {\n        const firstStaffEntries: SourceStaffEntry[] = measures[0].parentSourceMeasure.FirstInstructionsStaffEntries;\n        const visibleInstructionEntries: SourceStaffEntry[] = [];\n        for (let idx: number = 0, len: number = measures.length; idx < len; ++idx) {\n            const measure: GraphicalMeasure = measures[idx];\n            visibleInstructionEntries.push(firstStaffEntries[measure.ParentStaff.idInMusicSheet]);\n        }\n        let maxMeasureWidth: number = 0;\n        for (let visStaffIdx: number = 0, len: number = visibleInstructionEntries.length; visStaffIdx < len; ++visStaffIdx) {\n            const sse: SourceStaffEntry = visibleInstructionEntries[visStaffIdx];\n            if (!sse) {\n                continue;\n            }\n            const instructions: AbstractNotationInstruction[] = sse.Instructions;\n            let keyInstruction: KeyInstruction = undefined;\n            let rhythmInstruction: RhythmInstruction = undefined;\n            for (let idx2: number = 0, len2: number = instructions.length; idx2 < len2; ++idx2) {\n                const instruction: AbstractNotationInstruction = instructions[idx2];\n                if (instruction instanceof KeyInstruction && (<KeyInstruction>instruction).Key !== this.activeKeys[visStaffIdx].Key) {\n                    keyInstruction = <KeyInstruction>instruction;\n                }\n                if (instruction instanceof RhythmInstruction && (<RhythmInstruction>instruction) !== this.activeRhythm[visStaffIdx]) {\n                    rhythmInstruction = <RhythmInstruction>instruction;\n                }\n            }\n            if (keyInstruction !== undefined || rhythmInstruction) {\n                const measureWidth: number = this.addExtraInstructionMeasure(visStaffIdx, keyInstruction, rhythmInstruction);\n                maxMeasureWidth = Math.max(maxMeasureWidth, measureWidth);\n            }\n        }\n        if (maxMeasureWidth > 0) {\n            this.currentSystemParams.systemMeasures.push({\n                beginLine: SystemLinesEnum.None,\n                endLine: SystemLinesEnum.None,\n            });\n            this.currentSystemParams.currentWidth += maxMeasureWidth;\n            this.currentSystemParams.currentSystemFixWidth += maxMeasureWidth;\n        }\n    }\n\n    protected addExtraInstructionMeasure(visStaffIdx: number, keyInstruction: KeyInstruction, rhythmInstruction: RhythmInstruction): number {\n        const currentSystem: MusicSystem = this.currentSystemParams.currentSystem;\n        const measures: GraphicalMeasure[] = [];\n        const measure: GraphicalMeasure = MusicSheetCalculator.symbolFactory.createExtraGraphicalMeasure(currentSystem.StaffLines[visStaffIdx]);\n        measures.push(measure);\n        if (keyInstruction) {\n            measure.addKeyAtBegin(keyInstruction, this.activeKeys[visStaffIdx], this.activeClefs[visStaffIdx]);\n        }\n        if (rhythmInstruction !== undefined && rhythmInstruction.PrintObject) {\n            measure.addRhythmAtBegin(rhythmInstruction);\n        }\n        measure.PositionAndShape.BorderLeft = 0.0;\n        measure.PositionAndShape.BorderTop = 0.0;\n        measure.PositionAndShape.BorderBottom = this.rules.StaffHeight;\n        const width: number = this.rules.MeasureLeftMargin + measure.beginInstructionsWidth + this.rules.MeasureRightMargin;\n        measure.PositionAndShape.BorderRight = width;\n        currentSystem.StaffLines[visStaffIdx].Measures.push(measure);\n        return width;\n    }\n\n    /**\n     * Add all current vertical Measures to currentSystem.\n     * @param graphicalMeasures\n     */\n    protected addStaveMeasuresToSystem(graphicalMeasures: GraphicalMeasure[]): void {\n        if (graphicalMeasures[0]) {\n            const gmeasures: GraphicalMeasure[] = [];\n            for (let i: number = 0; i < graphicalMeasures.length; i++) {\n                gmeasures.push(graphicalMeasures[i]);\n            }\n            const currentSystem: MusicSystem = this.currentSystemParams.currentSystem;\n            for (let visStaffIdx: number = 0; visStaffIdx < this.numberOfVisibleStaffLines; visStaffIdx++) {\n                const measure: GraphicalMeasure = gmeasures[visStaffIdx];\n                currentSystem.StaffLines[visStaffIdx].Measures.push(measure);\n                measure.ParentStaffLine = currentSystem.StaffLines[visStaffIdx];\n            }\n            currentSystem.AddGraphicalMeasures(gmeasures);\n        }\n    }\n\n    /**\n     * Return the width of the corresponding [[SystemLine]] and set the corresponding [[SystemLineEnum]].\n     * @returns {SystemLinesEnum}\n     */\n    protected getMeasureStartLine(): SystemLinesEnum {\n        const thisMeasureBeginsLineRep: boolean = this.thisMeasureBeginsLineRepetition();\n        if (thisMeasureBeginsLineRep) {\n            const isSystemStartMeasure: boolean = this.currentSystemParams.IsSystemStartMeasure();\n            const isGlobalFirstMeasure: boolean = this.measureListIndex === 0;\n            if (this.previousMeasureEndsLineRepetition() && !isSystemStartMeasure) {\n                return SystemLinesEnum.DotsBoldBoldDots;\n            }\n            if (!isGlobalFirstMeasure) {\n                return SystemLinesEnum.BoldThinDots;\n            }\n        }\n        return SystemLinesEnum.None;\n    }\n\n    protected getMeasureEndLine(): SystemLinesEnum {\n        let sourceMeasure: SourceMeasure = undefined;\n        try {\n            sourceMeasure = this.measureList[this.measureListIndex][0].parentSourceMeasure;\n            if (this.rules.RenderMultipleRestMeasures && sourceMeasure.multipleRestMeasures > 1) {\n                const newIndex: number = Math.min(\n                    this.graphicalMusicSheet.ParentMusicSheet.SourceMeasures.length - 1, // safety check\n                    sourceMeasure.measureListIndex + sourceMeasure.multipleRestMeasures - 1\n                    // check the bar line of the last sourcemeasure in the multiple measure rest sequence\n                );\n                sourceMeasure = this.graphicalMusicSheet.ParentMusicSheet.SourceMeasures[newIndex];\n                // sourceMeasure = this.measureList[this.measureListIndex + sourceMeasure.multipleRestMeasures - 1][0].parentSourceMeasure;\n                //    this will be possible when the other GraphicalMeasures in the measureList aren't undefined anymore\n            }\n        } finally {\n            // do nothing\n        }\n\n        if (this.nextMeasureBeginsLineRepetition() && this.thisMeasureEndsLineRepetition()) {\n            return SystemLinesEnum.DotsBoldBoldDots;\n        }\n        if (this.thisMeasureEndsLineRepetition()) {\n            return SystemLinesEnum.DotsThinBold;\n        }\n        // always end piece with final barline: not a good idea. user should be able to override final barline.\n        // also, selecting range of measures to draw would always end with final barline, even if extract is from the middle of the piece\n        // this was probably done before we parsed the barline type from XML.\n        /*if (this.measureListIndex === this.measureList.length - 1 || this.measureList[this.measureListIndex][0].parentSourceMeasure.endsPiece) {\n            return SystemLinesEnum.ThinBold;\n        }*/\n        if (this.nextMeasureHasKeyInstructionChange() || this.thisMeasureEndsWordRepetition() || this.nextMeasureBeginsWordRepetition()) {\n            return SystemLinesEnum.DoubleThin;\n        }\n        if (!sourceMeasure) {\n            return SystemLinesEnum.SingleThin;\n        }\n        if (sourceMeasure.endingBarStyleEnum !== undefined) {\n            return sourceMeasure.endingBarStyleEnum;\n        }\n        // TODO: print an error message if the default fallback is used.\n        return SystemLinesEnum.SingleThin;\n    }\n\n    /**\n     * Return the width of the corresponding [[SystemLine]] and sets the corresponding [[SystemLineEnum]].\n     * @param measure\n     * @param systemLineEnum\n     * @param isSystemStartMeasure\n     * @returns {number}\n     */\n    protected getLineWidth(measure: GraphicalMeasure, systemLineEnum: SystemLinesEnum, isSystemStartMeasure: boolean): number {\n        let width: number = measure.getLineWidth(systemLineEnum);\n        if (systemLineEnum === SystemLinesEnum.DotsBoldBoldDots) {\n            width /= 2;\n        }\n        if (isSystemStartMeasure && systemLineEnum === SystemLinesEnum.BoldThinDots) {\n            width += this.rules.DistanceBetweenLastInstructionAndRepetitionBarline;\n        }\n        return width;\n    }\n\n    protected previousMeasureEndsLineRepetition(): boolean {\n        if (this.measureListIndex === 0) {\n            return false;\n        }\n        for (let idx: number = 0, len: number = this.measureList[this.measureListIndex - 1].length; idx < len; ++idx) {\n            const measure: GraphicalMeasure = this.measureList[this.measureListIndex - 1][idx];\n            if (measure.endsWithLineRepetition()) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Check if at this [[Measure]] starts a [[Repetition]].\n     * @returns {boolean}\n     */\n    protected thisMeasureBeginsLineRepetition(): boolean {\n        for (let idx: number = 0, len: number = this.measureList[this.measureListIndex].length; idx < len; ++idx) {\n            const measure: GraphicalMeasure = this.measureList[this.measureListIndex][idx];\n            if (measure.beginsWithLineRepetition()) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Check if a [[Repetition]] starts at the next [[Measure]].\n     * @returns {boolean}\n     */\n    protected nextMeasureBeginsLineRepetition(): boolean {\n        const nextMeasureIndex: number = this.measureListIndex + 1;\n        if (nextMeasureIndex >= this.graphicalMusicSheet.ParentMusicSheet.SourceMeasures.length\n            || !this.measureList[nextMeasureIndex]) {\n            return false;\n        }\n        for (let idx: number = 0, len: number = this.measureList[nextMeasureIndex].length; idx < len; ++idx) {\n            const measure: GraphicalMeasure = this.measureList[nextMeasureIndex][idx];\n            if (measure.beginsWithLineRepetition()) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Check if this [[Measure]] is a [[Repetition]] ending.\n     * @returns {boolean}\n     */\n    protected thisMeasureEndsLineRepetition(): boolean {\n        for (let idx: number = 0, len: number = this.measureList[this.measureListIndex].length; idx < len; ++idx) {\n            const measure: GraphicalMeasure = this.measureList[this.measureListIndex][idx];\n            if (measure.endsWithLineRepetition()) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Check if a [[Repetition]] starts at the next [[Measure]].\n     * @returns {boolean}\n     */\n    protected nextMeasureBeginsWordRepetition(): boolean {\n        const nextMeasureIndex: number = this.measureListIndex + 1;\n        if (nextMeasureIndex >= this.graphicalMusicSheet.ParentMusicSheet.SourceMeasures.length ||\n            nextMeasureIndex > this.measureList.length - 1) {\n            return false;\n        }\n        for (let idx: number = 0, len: number = this.measureList[nextMeasureIndex].length; idx < len; ++idx) {\n            const measure: GraphicalMeasure = this.measureList[nextMeasureIndex][idx];\n            if (measure.beginsWithWordRepetition()) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Check if this [[Measure]] is a [[Repetition]] ending.\n     * @returns {boolean}\n     */\n    protected thisMeasureEndsWordRepetition(): boolean {\n        for (let idx: number = 0, len: number = this.measureList[this.measureListIndex].length; idx < len; ++idx) {\n            const measure: GraphicalMeasure = this.measureList[this.measureListIndex][idx];\n            if (measure.endsWithWordRepetition()) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Check if the next [[Measure]] has a [[KeyInstruction]] change.\n     * @returns {boolean}\n     */\n    protected nextMeasureHasKeyInstructionChange(): boolean {\n        return this.getNextMeasureKeyInstruction() !== undefined;\n    }\n\n    protected getNextMeasureKeyInstruction(): KeyInstruction {\n        if (this.measureListIndex < this.measureList.length - 1) {\n            for (let visIndex: number = 0; visIndex < this.measureList[this.measureListIndex].length; visIndex++) {\n                const sourceMeasure: SourceMeasure = this.measureList[this.measureListIndex + 1][visIndex]?.parentSourceMeasure;\n                if (!sourceMeasure) {\n                    return undefined;\n                }\n                return sourceMeasure.getKeyInstruction(this.visibleStaffIndices[visIndex]);\n            }\n        }\n        return undefined;\n    }\n\n    /**\n     * Calculate the X ScalingFactor in order to strech the whole System.\n     * @param systemFixWidth\n     * @param systemVarWidth\n     * @returns {number}\n     */\n    protected calculateXScalingFactor(systemFixWidth: number, systemVarWidth: number): number {\n        if (Math.abs(systemVarWidth - 0) < 0.00001 || Math.abs(systemFixWidth - 0) < 0.00001) {\n            return 1.0;\n        }\n        const currentSystem: MusicSystem = this.currentSystemParams.currentSystem;\n        const systemEndX: number = currentSystem.StaffLines[0].PositionAndShape.Size.width;\n        const scalingFactor: number = (systemEndX - systemFixWidth) / systemVarWidth;\n        return scalingFactor;\n    }\n\n    /**\n     * Stretch the whole System so that no white space is left at the end.\n     * @param systemEndsPart\n     */\n    protected stretchMusicSystem(systemEndsPart: boolean): void {\n        let scalingFactor: number = this.calculateXScalingFactor(\n            this.currentSystemParams.currentSystemFixWidth, this.currentSystemParams.currentSystemVarWidth\n        );\n        if (systemEndsPart) {\n            scalingFactor = Math.min(scalingFactor, this.rules.LastSystemMaxScalingFactor);\n        }\n        const currentSystem: MusicSystem = this.currentSystemParams.currentSystem;\n        for (let visStaffIdx: number = 0, len: number = currentSystem.StaffLines.length; visStaffIdx < len; ++visStaffIdx) {\n            const staffLine: StaffLine = currentSystem.StaffLines[visStaffIdx];\n            let currentXPosition: number = 0.0;\n            for (let measureIndex: number = 0; measureIndex < staffLine.Measures.length; measureIndex++) {\n                const measure: GraphicalMeasure = staffLine.Measures[measureIndex];\n                measure.setPositionInStaffline(currentXPosition);\n                const beginInstructionsWidth: number = measure.beginInstructionsWidth;\n                // if (measureIndex === 0 && measure.staffEntries) {\n                //     if (!measure.parentSourceMeasure.hasLyrics) {\n                //         beginInstructionsWidth *= 1; // TODO the first measure in a system is always slightly too big. why? try e.g. 0.6\n                //     }\n                // }\n                measure.setWidth(beginInstructionsWidth + measure.minimumStaffEntriesWidth * scalingFactor + measure.endInstructionsWidth);\n                if (measureIndex < this.currentSystemParams.systemMeasures.length) {\n                    const startLine: SystemLinesEnum = this.currentSystemParams.systemMeasures[measureIndex].beginLine;\n                    const lineWidth: number = measure.getLineWidth(SystemLinesEnum.BoldThinDots);\n                    switch (startLine) {\n                        case SystemLinesEnum.BoldThinDots:\n                            let xPosition: number = currentXPosition;\n                            if (measureIndex === 0) {\n                                xPosition = currentXPosition + measure.beginInstructionsWidth - lineWidth;\n                            }\n\n                            currentSystem.createVerticalLineForMeasure(xPosition, lineWidth, startLine, SystemLinePosition.MeasureBegin, measureIndex, measure);\n                            break;\n                        default:\n                    }\n                }\n                measure.staffEntriesScaleFactor = scalingFactor;\n                measure.layoutSymbols();\n                const nextMeasureHasRepStartLine: boolean = measureIndex + 1 < this.currentSystemParams.systemMeasures.length\n                    && this.currentSystemParams.systemMeasures[measureIndex + 1].beginLine === SystemLinesEnum.BoldThinDots;\n                if (!nextMeasureHasRepStartLine) {\n                    let endLine: SystemLinesEnum = SystemLinesEnum.SingleThin;\n                    if (measureIndex < this.currentSystemParams.systemMeasures.length) {\n                        endLine = this.currentSystemParams.systemMeasures[measureIndex].endLine;\n                    }\n                    const lineWidth: number = measure.getLineWidth(endLine);\n                    let xPos: number = measure.PositionAndShape.RelativePosition.x + measure.PositionAndShape.BorderRight - lineWidth;\n                    if (endLine === SystemLinesEnum.DotsBoldBoldDots) {\n                        xPos -= lineWidth / 2;\n                    }\n                    currentSystem.createVerticalLineForMeasure(xPos, lineWidth, endLine, SystemLinePosition.MeasureEnd, measureIndex, measure);\n                }\n                currentXPosition = measure.PositionAndShape.RelativePosition.x + measure.PositionAndShape.BorderRight;\n            }\n        }\n        if (systemEndsPart) {\n            this.decreaseMusicSystemBorders();\n        }\n    }\n\n    /**\n     * If the last [[MusicSystem]] doesn't need stretching, then this method decreases the System's Width,\n     * the [[StaffLine]]'s Width and the 5 [[StaffLine]]s length.\n     */\n    protected decreaseMusicSystemBorders(): void {\n        const currentSystem: MusicSystem = this.currentSystemParams.currentSystem;\n        const bb: BoundingBox = CollectionUtil.last(currentSystem.StaffLines[0].Measures).PositionAndShape;\n        const width: number = bb.RelativePosition.x + bb.Size.width;\n        for (let idx: number = 0, len: number = currentSystem.StaffLines.length; idx < len; ++idx) {\n            const staffLine: StaffLine = currentSystem.StaffLines[idx];\n            staffLine.PositionAndShape.BorderRight = width;\n            for (let idx2: number = 0, len2: number = staffLine.StaffLines.length; idx2 < len2; ++idx2) {\n                const graphicalLine: GraphicalLine = staffLine.StaffLines[idx2];\n                graphicalLine.End = new PointF2D(width, graphicalLine.End.y);\n            }\n        }\n        currentSystem.PositionAndShape.BorderRight = width + this.currentSystemParams.maxLabelLength + this.rules.SystemLabelsRightMargin;\n    }\n\n    /**\n     * This method updates the System's StaffLine's RelativePosition (starting from the given index).\n     * @param musicSystem\n     * @param index\n     * @param value\n     */\n    protected updateStaffLinesRelativePosition(musicSystem: MusicSystem, index: number, value: number): void {\n        for (let i: number = index; i < musicSystem.StaffLines.length; i++) {\n            musicSystem.StaffLines[i].PositionAndShape.RelativePosition.y = value;\n        }\n\n        musicSystem.PositionAndShape.BorderBottom += value;\n    }\n\n    /**\n     * Create a new [[GraphicalMusicPage]]\n     * (for now only one long page is used per music sheet, as we scroll down and have no page flips)\n     * @returns {GraphicalMusicPage}\n     */\n    protected createMusicPage(): GraphicalMusicPage {\n        // const previousPage: GraphicalMusicPage = this.graphicalMusicSheet.MusicPages.last();\n        // const previousSizeY: number = previousPage ? previousPage.PositionAndShape.Size.height : 0;\n        const page: GraphicalMusicPage = new GraphicalMusicPage(this.graphicalMusicSheet);\n        this.graphicalMusicSheet.MusicPages.push(page);\n        page.PageNumber = this.graphicalMusicSheet.MusicPages.length; // caution: page number = page index + 1\n        page.PositionAndShape.BorderLeft = 0.0;\n        page.PositionAndShape.BorderRight = this.graphicalMusicSheet.ParentMusicSheet.pageWidth;\n        page.PositionAndShape.BorderTop = 0.0;\n        page.PositionAndShape.BorderBottom = this.rules.PageHeight;\n        page.PositionAndShape.RelativePosition = new PointF2D(0.0, 0.0);\n        return page;\n    }\n\n    protected addSystemToPage(page: GraphicalMusicPage, system: MusicSystem): void {\n        page.MusicSystems.push(system);\n        system.Parent = page;\n    }\n\n    /**\n     * This method checks the distances between any two consecutive StaffLines of a System and if needed, shifts the lower one down.\n     * @param musicSystem\n     */\n    protected optimizeDistanceBetweenStaffLines(musicSystem: MusicSystem): void {\n        // don't perform any y-spacing in case of a StaffEntryLink (in both StaffLines)\n        if (!musicSystem.checkStaffEntriesForStaffEntryLink()) {\n            for (let i: number = 0; i < musicSystem.StaffLines.length - 1; i++) {\n                const upperBottomLine: number[] = musicSystem.StaffLines[i].BottomLine;\n                const lowerSkyLine: number[] = musicSystem.StaffLines[i + 1].SkyLine;\n                // 1. Find maximum required space for sky bottom line touching each other\n                let maxDistance: number = 0;\n                for (let j: number = 0; j < upperBottomLine.length; j++) {\n                    const bottomLineValue: number = upperBottomLine[j];\n\n                    // look at a range of +/- 2 Units to also ensure that objects are also not too close in x-direction:\n                    const startIdx: number = Math.max(0, j - 6);\n                    const endIdx: number = Math.min(lowerSkyLine.length - 1, j + 6);\n                    let skylineValue: number = 0;\n                    for (let lowerIdx: number = startIdx; lowerIdx <= endIdx; lowerIdx++) {\n                        skylineValue = Math.min(skylineValue, lowerSkyLine[lowerIdx]);\n                    }\n\n                    const distance: number = bottomLineValue - skylineValue;\n                    maxDistance = Math.max(distance, maxDistance);\n                }\n                // 2. Add user defined distance between sky bottom line\n                maxDistance += this.rules.MinSkyBottomDistBetweenStaves;\n                // 3. Take the maximum between previous value and user defined value for staff line minimum distance\n                maxDistance = Math.max(maxDistance, this.rules.StaffHeight + this.rules.MinimumStaffLineDistance);\n                const lowerStafflineYPos: number = maxDistance + musicSystem.StaffLines[i].PositionAndShape.RelativePosition.y;\n                this.updateStaffLinesRelativePosition(musicSystem, i + 1, lowerStafflineYPos);\n            }\n        }\n        const firstStaffLine: StaffLine = musicSystem.StaffLines[0];\n        musicSystem.PositionAndShape.BorderTop = firstStaffLine.PositionAndShape.RelativePosition.y + firstStaffLine.PositionAndShape.BorderTop;\n        const lastStaffLine: StaffLine = musicSystem.StaffLines[musicSystem.StaffLines.length - 1];\n        musicSystem.PositionAndShape.BorderBottom = lastStaffLine.PositionAndShape.RelativePosition.y + lastStaffLine.PositionAndShape.BorderBottom;\n    }\n\n    /** Calculates the relative Positions of all MusicSystems.\n     *\n     */\n    protected calculateMusicSystemsRelativePositions(): void {\n        let currentPage: GraphicalMusicPage = this.createMusicPage();\n        let currentYPosition: number = 0;\n        // xPosition is always fixed\n        let currentSystem: MusicSystem = this.musicSystems[0];\n        let timesPageCouldntFitSingleSystem: number = 0;\n\n        for (let i: number = 0; i < this.musicSystems.length; i++) {\n            currentSystem = this.musicSystems[i];\n            if (currentPage.MusicSystems.length === 0) {\n                // if this is the first system on the current page:\n                // take top margins into account\n                this.addSystemToPage(currentPage, currentSystem);\n                if (this.rules.CompactMode) {\n                    currentYPosition = this.rules.PageTopMarginNarrow;\n                } else {\n                    currentYPosition = this.rules.PageTopMargin;\n                }\n\n                if (this.graphicalMusicSheet.MusicPages.length === 1) {\n                    /*\n                    Only need this in the event that lyricist or composer text intersects with title,\n                    which seems exceedingly rare.\n                    Leaving here just in case for future needs.\n                    Prefer to use skyline calculator in MusicSheetCalculator.calculatePageLabels\n\n                    let maxLineCount: number = this.graphicalMusicSheet.Composer?.TextLines?.length;\n                    let maxFontHeight: number = this.graphicalMusicSheet.Composer?.Label?.fontHeight;\n                    let lyricistLineCount: number = this.graphicalMusicSheet.Lyricist?.TextLines?.length;\n                    let lyricistFontHeight: number = this.graphicalMusicSheet.Lyricist?.Label?.fontHeight;\n\n                    maxLineCount = maxLineCount ? maxLineCount : 0;\n                    maxFontHeight = maxFontHeight ? maxFontHeight : 0;\n                    lyricistLineCount = lyricistLineCount ? lyricistLineCount : 0;\n                    lyricistFontHeight = lyricistFontHeight ? lyricistFontHeight : 0;\n\n                    let maxHeight: number = maxLineCount * maxFontHeight;\n                    const totalLyricist: number = lyricistLineCount * lyricistFontHeight;\n\n                    if (totalLyricist > maxHeight) {\n                        maxLineCount = lyricistLineCount;\n                        maxFontHeight = lyricistFontHeight;\n                        maxHeight = totalLyricist;\n                    } */\n\n                    if (this.rules.RenderTitle) {\n                    // if it is the first System on the FIRST page: Add Title height and gap-distance\n                    currentYPosition += this.rules.TitleTopDistance + this.rules.SheetTitleHeight +\n                                            this.rules.TitleBottomDistance;\n                    }\n\n                    /*\n                    see comment above - only needed for rare case of composer/lyricist being\n                    wide enough to be below the title (or title wide enough to be above)\n                    if (maxLineCount > 2) {\n                        currentYPosition += maxFontHeight * (maxLineCount - 2);\n                    }*/\n                }\n                // now add the border-top: everything that stands out above the staffline:\n                // note: this is unnecessary. We have PageTopMargin and TitleBottomDistance for this.\n                //   also, this creates a sudden margin spike from PageTopMargin = 0.1 to PageTopMargin = 0.\n                // if (!this.rules.CompactMode) { // don't add extra margins/borders in compact mode\n                //     if (this.rules.PageTopMargin > 0) { // don't add extra margins with PageTopMargin == 0\n                //         currentYPosition += -currentSystem.PositionAndShape.BorderTop;\n                //     }\n                // }\n                const relativePosition: PointF2D = new PointF2D(this.rules.PageLeftMargin + this.rules.SystemLeftMargin,\n                                                                currentYPosition);\n                currentSystem.PositionAndShape.RelativePosition = relativePosition;\n                // check if the first system doesn't even fit on the page -> would lead to truncation at bottom end:\n                if (currentYPosition + currentSystem.PositionAndShape.BorderBottom > this.rules.PageHeight - this.rules.PageBottomMargin) {\n                    // can't fit single system on page, maybe PageFormat too small\n                    timesPageCouldntFitSingleSystem++;\n                    if (timesPageCouldntFitSingleSystem <= 4) { // only warn once with detailed info\n                        console.log(`warning: could not fit a single system on page ${currentPage.PageNumber}` +\n                            ` and measure number ${currentSystem.GraphicalMeasures[0][0].MeasureNumber}.\n                            The PageFormat may be too small for this sheet.\"\n                            Will not give further warnings for all pages, only total.`\n                        );\n                    }\n                }\n            } else {\n                // if this is not the first system on the page:\n                // find optimum distance between Systems\n                const previousSystem: MusicSystem = this.musicSystems[i - 1];\n                const prevSystemLastStaffline: StaffLine = previousSystem.StaffLines[previousSystem.StaffLines.length - 1];\n                const prevSystemLastStaffLineBB: BoundingBox = prevSystemLastStaffline.PositionAndShape;\n                let distance: number =  this.findRequiredDistanceWithSkyBottomLine(previousSystem, currentSystem);\n\n                // make sure the optical distance is the user-defined min distance:\n                distance += this.rules.MinSkyBottomDistBetweenSystems;\n\n                distance = Math.max(distance, this.rules.MinimumDistanceBetweenSystems + prevSystemLastStaffline.StaffHeight);\n                const newYPosition: number =    currentYPosition +\n                                                prevSystemLastStaffLineBB.RelativePosition.y +\n                                                distance;\n\n                // calculate the needed height for placing the current system on the page,\n                // to see if it still fits:\n                const currSystemBottomYPos: number =    newYPosition +\n                                                        currentSystem.PositionAndShape.BorderMarginBottom;\n                const doXmlPageBreak: boolean = this.rules.NewPageAtXMLNewPageAttribute && previousSystem.breaksPage;\n                if (!doXmlPageBreak &&\n                    (currSystemBottomYPos < this.rules.PageHeight - this.rules.PageBottomMargin)) {\n                    // enough space on this page:\n                    this.addSystemToPage(currentPage, currentSystem);\n                    currentYPosition = newYPosition;\n                    const relativePosition: PointF2D = new PointF2D(this.rules.PageLeftMargin + this.rules.SystemLeftMargin,\n                                                                    currentYPosition);\n                    currentSystem.PositionAndShape.RelativePosition = relativePosition;\n                } else {\n                    // new page needed:\n                    currentPage = this.createMusicPage();\n                    // re-check this system again:\n                    i -= 1;\n                    continue;\n                }\n            }\n        }\n        if (timesPageCouldntFitSingleSystem > 0) {\n            console.log(`total amount of pages that couldn't fit a single music system: ${timesPageCouldntFitSingleSystem} of ${currentPage.PageNumber}`);\n        }\n    }\n\n    /**\n     * Finds the minimum required distance between two systems\n     * with the help of the sky- and bottom lines\n     * @param upperSystem\n     * @param lowerSystem\n     */\n    private findRequiredDistanceWithSkyBottomLine(upperSystem: MusicSystem, lowerSystem: MusicSystem): number {\n        const upperSystemLastStaffLine: StaffLine = upperSystem.StaffLines[upperSystem.StaffLines.length - 1];\n        const lowerSystemFirstStaffLine: StaffLine = lowerSystem.StaffLines[0];\n        const upperBottomLineArray: number[] = upperSystemLastStaffLine.BottomLine;\n        const lowerSkyLineArray: number[] = lowerSystemFirstStaffLine.SkyLine;\n        const upperStaffLineBB: BoundingBox = upperSystemLastStaffLine.PositionAndShape;\n        const lowerStaffLineBB: BoundingBox = lowerSystemFirstStaffLine.PositionAndShape;\n        const skylinePixelWidth: number = 1 / this.rules.SamplingUnit;\n        // Find maximum required space for sky and bottom line touching each other\n        let maxDistance: number = 0;\n        for (let upperIdx: number = 0; upperIdx < upperBottomLineArray.length; upperIdx++) {\n            const bottomLineValue: number = upperBottomLineArray[upperIdx];\n            // find index of the same x-position in lower skyline:\n            const lowerCenterIdx: number =  upperIdx +\n                                            Math.round((upperStaffLineBB.RelativePosition.x - lowerStaffLineBB.RelativePosition.x) * skylinePixelWidth);\n            if (lowerCenterIdx < 0) {\n                // should actually not happen..\n                continue;\n            }\n            if (lowerCenterIdx >= lowerSkyLineArray.length) {\n                // lower system ends earlier x-wise than upper system (e.g. at last system, if it is not stretched)\n                break;\n            }\n\n            // look at a range of +/- 2 Units to also ensure that objects are also not too close in x-direction:\n            const startIdx: number = Math.max(0, lowerCenterIdx - 6);\n            const endIdx: number = Math.min(lowerSkyLineArray.length - 1, lowerCenterIdx + 6);\n            let skylineValue: number = 0;\n            for (let lowerIdx: number = startIdx; lowerIdx <= endIdx; lowerIdx++) {\n                skylineValue = Math.min(skylineValue, lowerSkyLineArray[lowerIdx]);\n            }\n\n            const distance: number = bottomLineValue - skylineValue;\n            maxDistance = Math.max(distance, maxDistance);\n        }\n\n        if (maxDistance === 0) {\n            // can only happen when the bottom- and skyline have no x-overlap at all:\n            // fall back to borders:\n            maxDistance = upperStaffLineBB.BorderBottom - lowerStaffLineBB.BorderTop;\n        }\n\n        return maxDistance;\n    }\n}\n\nexport class SystemBuildParameters {\n    public currentSystem: MusicSystem;\n    public systemMeasures: MeasureBuildParameters[] = [];\n    public systemMeasureIndex: number = 0;\n    public currentWidth: number = 0;\n    public currentSystemFixWidth: number = 0;\n    public currentSystemVarWidth: number = 0;\n    public maxLabelLength: number = 0;\n\n    public IsSystemStartMeasure(): boolean {\n        return this.systemMeasureIndex === 0;\n    }\n}\n\nexport class MeasureBuildParameters {\n    public beginLine: SystemLinesEnum;\n    public endLine: SystemLinesEnum;\n}\n","import {Fraction} from \"../../Common/DataObjects/Fraction\";\nimport {OctaveShift} from \"../VoiceData/Expressions/ContinuousExpressions/OctaveShift\";\n\nexport class OctaveShiftParams {\n\n    constructor(openOctaveShift: OctaveShift, absoluteStartTimestamp: Fraction, absoluteEndTimestamp: Fraction) {\n        this.getOpenOctaveShift = openOctaveShift;\n        this.getAbsoluteStartTimestamp = absoluteStartTimestamp;\n        this.getAbsoluteEndTimestamp = absoluteEndTimestamp;\n    }\n\n    public getOpenOctaveShift: OctaveShift;\n    public getAbsoluteStartTimestamp: Fraction;\n    public getAbsoluteEndTimestamp: Fraction;\n\n}\n","import Vex from \"vexflow\";\nimport VF = Vex.Flow;\nimport { EngravingRules } from \"./EngravingRules\";\nimport { VexFlowMeasure } from \"./VexFlow/VexFlowMeasure\";\nimport { SkyBottomLineCalculationResult } from \"./SkyBottomLineCalculationResult\";\nimport {\n    ISkyBottomLineBatchCalculatorBackendPartialTableConfiguration,\n    ISkyBottomLineBatchCalculatorBackendTableConfiguration,\n    SkyBottomLineBatchCalculatorBackend\n} from \"./SkyBottomLineBatchCalculatorBackend\";\n\n/**\n * This class calculates the skylines and the bottom lines by iterating over pixels retrieved via\n * CanvasRenderingContext2D.getImageData().\n */\nexport class PlainSkyBottomLineBatchCalculatorBackend extends SkyBottomLineBatchCalculatorBackend {\n    constructor(rules: EngravingRules, measures: VexFlowMeasure[]) {\n        super(rules, measures);\n    }\n\n    protected getPreferredRenderingConfiguration(maxWidth: number, elementHeight: number): ISkyBottomLineBatchCalculatorBackendPartialTableConfiguration {\n        return {\n            elementWidth: Math.ceil(maxWidth),\n            numColumns: 6,\n            numRows: 6,\n        };\n    }\n\n    protected onInitialize(tableConfiguration: ISkyBottomLineBatchCalculatorBackendTableConfiguration): void {\n        // does nothing\n    }\n\n    protected calculateFromCanvas(\n        canvas: HTMLCanvasElement,\n        vexFlowContext: VF.CanvasContext,\n        measures: VexFlowMeasure[],\n        samplingUnit: number,\n        tableConfiguration: ISkyBottomLineBatchCalculatorBackendTableConfiguration\n    ): SkyBottomLineCalculationResult[] {\n        // vexFlowContext is CanvasRenderingContext2D in runtime\n        const canvasWidth: number = canvas.width;\n        const context: CanvasRenderingContext2D = vexFlowContext as unknown as CanvasRenderingContext2D;\n        const imageData: ImageData = context.getImageData(0, 0, canvas.width, canvas.height);\n        const rgbaLength: number = 4;\n        const { elementWidth, elementHeight, numColumns } = tableConfiguration;\n\n        const result: SkyBottomLineCalculationResult[] = [];\n        for (let i: number = 0; i < measures.length; ++i) {\n            const measure: VexFlowMeasure = measures[i];\n            const measureWidth: number = Math.floor(measure.getVFStave().getWidth());\n            const measureArrayLength: number =  Math.max(Math.ceil(measure.PositionAndShape.Size.width * samplingUnit), 1);\n            const u: number = i % numColumns;\n            const v: number = Math.floor(i / numColumns);\n\n            const xStart: number = u * elementWidth;\n            const xEnd: number = xStart + measureWidth;\n            const yStart: number = v * elementHeight;\n            const yEnd: number = yStart + elementHeight;\n\n            const skyLine: number[] = new Array(Math.max(measureArrayLength, measureWidth)).fill(0);\n            const bottomLine: number[] = new Array(Math.max(measureArrayLength, measureWidth)).fill(0);\n\n            for (let x: number = xStart; x < xEnd; ++x) {\n                // SkyLine\n                skyLine[x - xStart] = 0;\n                for (let y: number = yStart; y < yEnd; ++y) {\n                    const yOffset: number = y * canvasWidth * rgbaLength;\n                    const bufIndex: number = yOffset + x * rgbaLength;\n                    const alpha: number = imageData.data[bufIndex + 3];\n                    if (alpha > 0) {\n                        skyLine[x - xStart] = y - yStart;\n                        break;\n                    }\n                }\n                // BottomLine\n                bottomLine[x - xStart] = elementHeight;\n                for (let y: number = yEnd - 1; y >= yStart; y--) {\n                    const yOffset: number = y * canvasWidth * rgbaLength;\n                    const bufIndex: number = yOffset + x * rgbaLength;\n                    const alpha: number = imageData.data[bufIndex + 3];\n                    if (alpha > 0) {\n                        bottomLine[x - xStart] = y - yStart;\n                        break;\n                    }\n                }\n            }\n\n            const lowestSkyLine: number = Math.max(...skyLine);\n            const highestBottomLine: number = Math.min(...bottomLine);\n\n            for (let x: number = 0; x < measureWidth; ++x) {\n                skyLine[x] = skyLine[x] === 0 ? lowestSkyLine : skyLine[x];\n                bottomLine[x] = bottomLine[x] === elementHeight ? highestBottomLine : bottomLine[x];\n            }\n\n            result.push(new SkyBottomLineCalculationResult(skyLine, bottomLine));\n        }\n        return result;\n    }\n}\n","import {GraphicalObject} from \"./GraphicalObject\";\nimport {MusicSystem} from \"./MusicSystem\";\nimport {OutlineAndFillStyleEnum} from \"./DrawingEnums\";\nimport {StaffLine} from \"./StaffLine\";\nimport {PointF2D} from \"../../Common/DataObjects/PointF2D\";\nimport {BoundingBox} from \"./BoundingBox\";\nimport {GraphicalLine} from \"./GraphicalLine\";\nimport {CollectionUtil} from \"../../Util/CollectionUtil\";\n\nexport class SelectionEndSymbol extends GraphicalObject {\n\n    constructor(system: MusicSystem, xPosition: number) {\n        super();\n        const xCoordinate: number = xPosition;\n        const yCoordinate: number = system.PositionAndShape.AbsolutePosition.y;\n        const lineThickness: number = 0.4;\n        const height: number = CollectionUtil.last(system.StaffLines).PositionAndShape.RelativePosition.y + 4;\n        this.verticalLine = new GraphicalLine(\n            new PointF2D(xCoordinate, yCoordinate),\n            new PointF2D(xCoordinate, yCoordinate + height),\n            lineThickness,\n            OutlineAndFillStyleEnum.SelectionSymbol\n        );\n        for (let idx: number = 0, len: number = system.StaffLines.length; idx < len; ++idx) {\n            const staffLine: StaffLine = system.StaffLines[idx];\n            const anchor: PointF2D = new PointF2D(xCoordinate, yCoordinate + staffLine.PositionAndShape.RelativePosition.y);\n            const arrowPoints: PointF2D[] = new Array(3);\n            anchor.y -= .2;\n            arrowPoints[0].x = anchor.x - 3;\n            arrowPoints[0].y = anchor.y + 1.2;\n            arrowPoints[1].x = anchor.x - 2;\n            arrowPoints[1].y = anchor.y + 0.4;\n            arrowPoints[2].x = anchor.x - 2;\n            arrowPoints[2].y = anchor.y + 2;\n            this.arrows.push(arrowPoints);\n            const linePoints: PointF2D[] = new Array(8);\n            const arrowThickness: number = .8;\n            anchor.x -= .1;\n            anchor.y += .3;\n            const hilfsVar: number = .2;\n            linePoints[0].x = anchor.x - 2;\n            linePoints[0].y = anchor.y + 1.5 - hilfsVar;\n            linePoints[1].x = anchor.x - 1;\n            linePoints[1].y = anchor.y + 1.5 - hilfsVar;\n            linePoints[2].x = anchor.x - 1;\n            linePoints[2].y = anchor.y + 2.5;\n            linePoints[3].x = anchor.x - 2;\n            linePoints[3].y = anchor.y + 2.5;\n            linePoints[4].x = linePoints[0].x;\n            linePoints[4].y = linePoints[0].y - arrowThickness;\n            linePoints[5].x = linePoints[4].x + arrowThickness + 1;\n            linePoints[5].y = linePoints[4].y;\n            linePoints[6].x = linePoints[5].x;\n            linePoints[6].y = linePoints[3].y + arrowThickness;\n            linePoints[7].x = linePoints[3].x;\n            linePoints[7].y = linePoints[6].y;\n            this.arrowlines.push(linePoints);\n        }\n        this.boundingBox = new BoundingBox(this);\n        this.boundingBox.AbsolutePosition = new PointF2D(xCoordinate, yCoordinate);\n        this.boundingBox.BorderLeft = -lineThickness;\n        this.boundingBox.BorderRight = 4;\n        this.boundingBox.BorderBottom = height;\n    }\n\n    public verticalLine: GraphicalLine;\n    public arrows: PointF2D[][];\n    public arrowlines: PointF2D[][];\n}\n","import {PointF2D} from \"../../Common/DataObjects/PointF2D\";\nimport {StaffLine} from \"./StaffLine\";\nimport {OutlineAndFillStyleEnum} from \"./DrawingEnums\";\nimport {GraphicalLine} from \"./GraphicalLine\";\nimport {MusicSystem} from \"./MusicSystem\";\nimport {GraphicalObject} from \"./GraphicalObject\";\nimport {BoundingBox} from \"./BoundingBox\";\nimport {CollectionUtil} from \"../../Util/CollectionUtil\";\n\nexport class SelectionStartSymbol extends GraphicalObject {\n\n    constructor(system: MusicSystem, xPosition: number) {\n        super();\n        const xCoordinate: number = xPosition;\n        const yCoordinate: number = system.PositionAndShape.AbsolutePosition.y;\n        const lineThickness: number = 0.4;\n        const height: number = CollectionUtil.last(system.StaffLines).PositionAndShape.RelativePosition.y + 4;\n        this.verticalLine = new GraphicalLine(\n            new PointF2D(xCoordinate, yCoordinate),\n            new PointF2D(xCoordinate, yCoordinate + height),\n            lineThickness,\n            OutlineAndFillStyleEnum.SelectionSymbol\n        );\n        for (let idx: number = 0, len: number = system.StaffLines.length; idx < len; ++idx) {\n            const staffLine: StaffLine = system.StaffLines[idx];\n            const anchor: PointF2D = new PointF2D(xCoordinate, yCoordinate + staffLine.PositionAndShape.RelativePosition.y);\n            const arrowPoints: PointF2D[] = new Array(7);\n            arrowPoints[0].x = anchor.x + 4;\n            arrowPoints[0].y = anchor.y + 2;\n            arrowPoints[1].x = anchor.x + 2.5;\n            arrowPoints[1].y = anchor.y + 0.5;\n            arrowPoints[2].x = anchor.x + 2.5;\n            arrowPoints[2].y = anchor.y + 1.3;\n            arrowPoints[3].x = anchor.x + 1;\n            arrowPoints[3].y = anchor.y + 1.3;\n            arrowPoints[4].x = anchor.x + 1;\n            arrowPoints[4].y = anchor.y + 2.7;\n            arrowPoints[5].x = anchor.x + 2.5;\n            arrowPoints[5].y = anchor.y + 2.7;\n            arrowPoints[6].x = anchor.x + 2.5;\n            arrowPoints[6].y = anchor.y + 3.5;\n            this.arrows.push(arrowPoints);\n        }\n        this.boundingBox = new BoundingBox(this);\n        this.boundingBox.AbsolutePosition = new PointF2D(xCoordinate, yCoordinate);\n        this.boundingBox.BorderLeft = -lineThickness;\n        this.boundingBox.BorderRight = 4;\n        this.boundingBox.BorderBottom = height;\n    }\n\n    public verticalLine: GraphicalLine;\n    public arrows: PointF2D[][];\n}\n","import { SkyBottomLineBatchCalculatorBackendType } from \"../../OpenSheetMusicDisplay\";\nimport { EngravingRules } from \"./EngravingRules\";\nimport { PlainSkyBottomLineBatchCalculatorBackend } from \"./PlainSkyBottomLineBatchCalculatorBackend\";\nimport { SkyBottomLineCalculator } from \"./SkyBottomLineCalculator\";\nimport { SkyBottomLineBatchCalculatorBackend } from \"./SkyBottomLineBatchCalculatorBackend\";\nimport { SkyBottomLineCalculationResult } from \"./SkyBottomLineCalculationResult\";\nimport { StaffLine } from \"./StaffLine\";\nimport { VexFlowMeasure } from \"./VexFlow/VexFlowMeasure\";\nimport { WebGLSkyBottomLineBatchCalculatorBackend } from \"./WebGLSkyBottomLineBatchCalculatorBackend\";\nimport log from \"loglevel\";\n\ninterface IBatchEntry {\n    skyBottomLineCalculator: SkyBottomLineCalculator;\n    measures: VexFlowMeasure[];\n}\n\ninterface IBatch {\n    backend: SkyBottomLineBatchCalculatorBackend;\n    entries: IBatchEntry[];\n}\n\n/**\n * This class calculates the skylines and the bottom lines for multiple stafflines.\n */\nexport class SkyBottomLineBatchCalculator {\n    private batches: Map<EngravingRules, IBatch>;\n\n    constructor(staffLines: StaffLine[], preferredBackend: SkyBottomLineBatchCalculatorBackendType) {\n        const batchEntryArrayList: Map<EngravingRules, IBatchEntry[]> = new Map<EngravingRules, IBatchEntry[]>();\n        for (const staffLine of staffLines) {\n            const rules: EngravingRules = staffLine.ParentMusicSystem.rules;\n            const batchEntryArray: IBatchEntry[] = ((): IBatchEntry[] => {\n                if (batchEntryArrayList.has(rules)) {\n                    return batchEntryArrayList.get(rules)!;\n                } else {\n                    const array: IBatchEntry[] = [];\n                    batchEntryArrayList.set(rules, array);\n                    return array;\n                }\n            })();\n            batchEntryArray.push({\n                skyBottomLineCalculator: staffLine.SkyBottomLineCalculator,\n                measures: staffLine.Measures as VexFlowMeasure[]\n            });\n        }\n\n        this.batches = new Map<EngravingRules, IBatch>();\n        for (const [rules, batchEntryArray] of batchEntryArrayList.entries()) {\n            const measures: VexFlowMeasure[] = batchEntryArray.map(entry => entry.measures).flat();\n            const backend: SkyBottomLineBatchCalculatorBackend = ((): SkyBottomLineBatchCalculatorBackend => {\n                if (preferredBackend === SkyBottomLineBatchCalculatorBackendType.Plain) {\n                    return new PlainSkyBottomLineBatchCalculatorBackend(rules, measures).initialize();\n                } else {\n                    try {\n                        return new WebGLSkyBottomLineBatchCalculatorBackend(rules, measures).initialize();\n                    } catch {\n                        log.info(\"Couldn't create WebGLBackend for Skyline. Using fallback.\");\n                        return new PlainSkyBottomLineBatchCalculatorBackend(rules, measures).initialize();\n                    }\n                }\n            })();\n            backend.initialize();\n\n            this.batches.set(rules, {\n                backend,\n                entries: batchEntryArray\n            });\n        }\n    }\n\n    /**\n     * This method calculates the skylines and the bottom lines for the stafflines passed to the constructor.\n     */\n    public calculateLines(): void {\n        for (const [, { backend, entries }] of this.batches) {\n            const results: SkyBottomLineCalculationResult[] = backend.calculateLines();\n            let start: number = 0;\n            for (const { skyBottomLineCalculator, measures } of entries) {\n                const end: number = start + measures.length;\n                skyBottomLineCalculator.updateLines(results.slice(start, end));\n                start = end;\n            }\n        }\n    }\n}\n","import Vex from \"vexflow\";\nimport VF = Vex.Flow;\nimport { EngravingRules } from \"./EngravingRules\";\nimport { SkyBottomLineCalculationResult } from \"./SkyBottomLineCalculationResult\";\nimport { CanvasVexFlowBackend } from \"./VexFlow/CanvasVexFlowBackend\";\nimport { VexFlowMeasure } from \"./VexFlow/VexFlowMeasure\";\nimport log from \"loglevel\";\n\n/**\n * SkyBottomLineBatchCalculatorBackend renders measures in a borderless table.\n * This interface contains the configuration for the table returned by classes\n * implementing SkyBottomLineBatchCalculatorBackend. The height of a cell is\n * set to a fixed value by SkyBottomLineBatchCalculatorBackend.\n */\n export interface ISkyBottomLineBatchCalculatorBackendPartialTableConfiguration {\n    /** The width of each cell */\n    elementWidth: number;\n    /** The number of cell in a row */\n    numColumns: number;\n    /** The number of cell in a column */\n    numRows: number;\n}\n\n/**\n * This interface contains the complete configuration for the table rendered by\n * SkyBottomLineBatchCalculatorBackend,\n */\nexport interface ISkyBottomLineBatchCalculatorBackendTableConfiguration\n    extends ISkyBottomLineBatchCalculatorBackendPartialTableConfiguration {\n    /** The height of each cell determined by SkyBottomLineBatchCalculatorBackend */\n    elementHeight: number;\n}\n\n/**\n * This class calculates the sky lines and the bottom lines for multiple stafflines.\n */\nexport abstract class SkyBottomLineBatchCalculatorBackend {\n    /** The canvas where the measures are to be drawn in */\n    private readonly canvas: CanvasVexFlowBackend;\n    /** The measures to draw */\n    private readonly measures: VexFlowMeasure[];\n    /** The width of the widest measure */\n    private readonly maxWidth: number;\n    /** The samplingUnit from the EngravingRules */\n    private readonly samplingUnit: number;\n    /**\n     * The default height used by CanvasVexFlowBackend. Update this value when the\n     * default height value of CanvasVexFlowBackend.initializeHeadless is updated.\n     * This value is used as a height of each cell in the table rendered by this class.\n     */\n    private readonly elementHeight: number = 300;\n    /**\n     * The table configuration returned by getPreferredRenderingConfiguration. This value\n     * is set after initialize() returns.\n     */\n    private tableConfiguration: ISkyBottomLineBatchCalculatorBackendTableConfiguration;\n\n    constructor(rules: EngravingRules, measures: VexFlowMeasure[]) {\n        this.canvas = new CanvasVexFlowBackend(rules);\n        this.measures = measures;\n        this.maxWidth = Math.max(...this.measures.map(measure => {\n            let width: number = measure.getVFStave().getWidth();\n            if (!(width > 0) && !measure.IsExtraGraphicalMeasure) {\n                log.warn(\"SkyBottomLineBatchCalculatorBackend: width not > 0 in measure \" + measure.MeasureNumber);\n                width = 50;\n            }\n            return width;\n        }));\n        this.samplingUnit = rules.SamplingUnit;\n    }\n\n    /**\n     * This method returns the configuration for the table where the measures are to be rendered.\n     * @param maxWidth the width of the widest measure\n     * @param elementHeight the height of each cell\n     */\n    protected abstract getPreferredRenderingConfiguration(\n        maxWidth: number,\n        elementHeight: number\n    ): ISkyBottomLineBatchCalculatorBackendPartialTableConfiguration;\n\n    /**\n     * This method allocates resources required by the implementation class.\n     * @param tableConfiguration the table configuration returned by getPreferredRenderingConfiguration\n     */\n    protected abstract onInitialize(tableConfiguration: ISkyBottomLineBatchCalculatorBackendTableConfiguration): void;\n\n    /**\n     * This method allocates required resources for the calculation.\n     */\n    public initialize(): SkyBottomLineBatchCalculatorBackend {\n        this.tableConfiguration = {\n            ...this.getPreferredRenderingConfiguration(this.maxWidth, this.elementHeight),\n            elementHeight: this.elementHeight\n        };\n        if (this.tableConfiguration.numRows < 1 || this.tableConfiguration.numColumns < 1) {\n            log.warn(\"SkyBottomLineBatchCalculatorBackend: numRows or numColumns in tableConfiguration is 0\");\n            throw new Error(\"numRows or numColumns in tableConfiguration is 0\");\n        }\n\n        if (this.tableConfiguration.elementWidth < this.maxWidth) {\n            log.warn(\"SkyBottomLineBatchCalculatorBackend: elementWidth in tableConfiguration is less than the width of widest measure\");\n        }\n\n        const width: number = this.tableConfiguration.elementWidth * this.tableConfiguration.numColumns;\n        const height: number = this.elementHeight * this.tableConfiguration.numRows;\n        this.canvas.initializeHeadless(width, height);\n        this.onInitialize(this.tableConfiguration);\n\n        return this;\n    }\n\n    /**\n     * This method calculates the skylines and the bottom lines for the measures rendered in the given canvas.\n     * @param canvas the canvas where the measures are rendered\n     * @param context the drawing context of canvas\n     * @param measures the rendered measures\n     * @param tableConfiguration the table configuration returned by getPreferredRenderingConfiguration\n     */\n    protected abstract calculateFromCanvas(\n        canvas: HTMLCanvasElement,\n        context: VF.CanvasContext,\n        measures: VexFlowMeasure[],\n        samplingUnit: number,\n        tableConfiguration: ISkyBottomLineBatchCalculatorBackendTableConfiguration\n    ): SkyBottomLineCalculationResult[];\n\n    /**\n     * This method calculates the skylines and the bottom lines for the measures passed to the constructor.\n     */\n    public calculateLines(): SkyBottomLineCalculationResult[] {\n        const debugTmpCanvas: boolean = false;\n\n        const { numColumns, numRows, elementWidth } = this.tableConfiguration;\n        const elementHeight: number = this.elementHeight;\n        const numElementsPerTable: number = numColumns * numRows;\n\n        const vexFlowContext: VF.CanvasContext = this.canvas.getContext();\n        const context: CanvasRenderingContext2D = vexFlowContext as unknown as CanvasRenderingContext2D;\n        const canvasElement: HTMLCanvasElement = this.canvas.getCanvas() as HTMLCanvasElement;\n\n        if (debugTmpCanvas) {\n            document.querySelectorAll(\".osmd-sky-bottom-line-tmp-canvas\").forEach(element => element.parentElement.removeChild(element));\n        }\n\n        const results: SkyBottomLineCalculationResult[] = [];\n        for (let i: number = 0; i < this.measures.length; i += numElementsPerTable) {\n            vexFlowContext.clear();\n\n            const measures: VexFlowMeasure[] = this.measures.slice(i, i + numElementsPerTable);\n\n            for (let j: number = 0; j < measures.length; ++j) {\n                const measure: VexFlowMeasure = measures[j];\n                const vsStaff: VF.Stave = measure.getVFStave();\n\n                // (u, v) is the position of measure in the table\n                const u: number = j % numColumns;\n                const v: number = Math.floor(j / numColumns);\n\n                let currentWidth: number = vsStaff.getWidth();\n                if (!(currentWidth > 0) && !measure.IsExtraGraphicalMeasure) {\n                    currentWidth = 50;\n                }\n                currentWidth = Math.floor(currentWidth);\n\n                // must calculate first AbsolutePositions\n                measure.PositionAndShape.calculateAbsolutePositionsRecursive(0, 0);\n\n                const x: number = 0;\n                vsStaff.setX(x);\n\n                // The magic number 100 is an offset from the top image border so that\n                // elements above the staffline can be drawn correctly.\n                const y: number = (<any>vsStaff).y as number + 100;\n                vsStaff.setY(y);\n\n                const oldMeasureWidth: number = vsStaff.getWidth();\n                // We need to tell the VexFlow stave about the canvas width. This looks\n                // redundant because it should know the canvas but somehow it doesn't.\n                // Maybe I am overlooking something but for now this does the trick\n                vsStaff.setWidth(currentWidth);\n                measure.format();\n                vsStaff.setWidth(oldMeasureWidth);\n\n                try {\n                    context.translate(u * elementWidth, v * elementHeight);\n                    measure.draw(vexFlowContext);\n                    context.translate(-u * elementWidth, -v * elementHeight);\n                    // Vexflow errors can happen here, then our complete rendering loop would halt without catching errors.\n                } catch (ex) {\n                    log.warn(\"SkyBottomLineBatchCalculatorBackend.calculateLines.draw\", ex);\n                }\n            }\n\n            const result: SkyBottomLineCalculationResult[] = this.calculateFromCanvas(\n                canvasElement,\n                vexFlowContext,\n                measures,\n                this.samplingUnit,\n                this.tableConfiguration\n            );\n            results.push(...result);\n\n            if (debugTmpCanvas) {\n                const canvasContext: CanvasRenderingContext2D = vexFlowContext as unknown as CanvasRenderingContext2D;\n                const oldFillStyle: string | CanvasGradient | CanvasPattern = canvasContext.fillStyle;\n                for (let j: number = 0; j < result.length; ++j) {\n                    const { skyLine, bottomLine } = result[j];\n\n                    const u: number = j % numColumns;\n                    const v: number = Math.floor(j / numColumns);\n\n                    const xStart: number = u * elementWidth;\n                    const yStart: number = v * elementHeight;\n\n                    canvasContext.fillStyle = \"#FF0000\";\n                    skyLine.forEach((y, x) => vexFlowContext.fillRect(x - 1 + xStart, y - 1 + yStart, 2, 2));\n                    canvasContext.fillStyle = \"#0000FF\";\n                    bottomLine.forEach((y, x) => vexFlowContext.fillRect(x - 1 + xStart, y - 1 + yStart, 2, 2));\n                }\n                canvasContext.fillStyle = oldFillStyle;\n                const url: string = canvasElement.toDataURL(\"image/png\");\n                const img: HTMLImageElement = document.createElement(\"img\");\n                img.classList.add(\"osmd-sky-bottom-line-tmp-canvas\");\n                img.src = url;\n                document.body.appendChild(img);\n\n                const hr: HTMLHRElement = document.createElement(\"hr\");\n                hr.classList.add(\"osmd-sky-bottom-line-tmp-canvas\");\n                document.body.appendChild(hr);\n            }\n        }\n\n        return results;\n    }\n}\n","/**\n * Contains a skyline and a bottomline for a measure.\n */\nexport class SkyBottomLineCalculationResult {\n    public skyLine: number[];\n    public bottomLine: number[];\n\n    constructor(skyLine: number[], bottomLine: number[]) {\n        this.skyLine = skyLine;\n        this.bottomLine = bottomLine;\n    }\n}\n","import { EngravingRules } from \"./EngravingRules\";\nimport { StaffLine } from \"./StaffLine\";\nimport { PointF2D } from \"../../Common/DataObjects/PointF2D\";\nimport { VexFlowMeasure } from \"./VexFlow/VexFlowMeasure\";\nimport { unitInPixels } from \"./VexFlow/VexFlowMusicSheetDrawer\";\nimport log from \"loglevel\";\nimport { BoundingBox } from \"./BoundingBox\";\nimport { SkyBottomLineCalculationResult } from \"./SkyBottomLineCalculationResult\";\nimport { CanvasVexFlowBackend } from \"./VexFlow/CanvasVexFlowBackend\";\n/**\n * This class calculates and holds the skyline and bottom line information.\n * It also has functions to update areas of the two lines if new elements are\n * added to the staffline (e.g. measure number, annotations, ...)\n */\nexport class SkyBottomLineCalculator {\n    /** Parent Staffline where the skyline and bottom line is attached */\n    private mStaffLineParent: StaffLine;\n    /** Internal array for the skyline */\n    private mSkyLine: number[];\n    /** Internal array for the bottomline */\n    private mBottomLine: number[];\n    /** Engraving rules for formatting */\n    private mRules: EngravingRules;\n\n    /**\n     * Create a new object of the calculator\n     * @param staffLineParent staffline where the calculator should be attached\n     */\n    constructor(staffLineParent: StaffLine) {\n        this.mStaffLineParent = staffLineParent;\n        this.mRules = staffLineParent.ParentMusicSystem.rules;\n    }\n\n    /**\n     * This method updates the skylines and bottomlines for mStaffLineParent.\n     * @param calculationResults the skylines and bottomlines of mStaffLineParent's measures calculated by SkyBottomLineBatchCalculator\n     */\n    public updateLines(calculationResults: SkyBottomLineCalculationResult[]): void {\n        const measures: VexFlowMeasure[] = this.StaffLineParent.Measures as VexFlowMeasure[];\n\n        if (calculationResults.length !== measures.length) {\n            log.warn(\"SkyBottomLineCalculator: lengths of calculation result array and measure array do not match\");\n\n            if (calculationResults.length < measures.length) {\n                while (calculationResults.length < measures.length) {\n                    calculationResults.push(new SkyBottomLineCalculationResult([], []));\n                }\n            } else {\n                calculationResults = calculationResults.slice(0, measures.length);\n            }\n        }\n\n        const arrayLength: number = Math.max(Math.ceil(this.StaffLineParent.PositionAndShape.Size.width * this.SamplingUnit), 1);\n        this.mSkyLine = [];\n        this.mBottomLine = [];\n\n        for (const { skyLine, bottomLine } of calculationResults) {\n            this.mSkyLine.push(...skyLine);\n            this.mBottomLine.push(...bottomLine);\n        }\n\n        // Subsampling:\n        // The pixel width is bigger than the measure size in units. So we split the array into\n        // chunks with the size of MeasurePixelWidth/measureUnitWidth and reduce the value to its\n        // average\n        const arrayChunkSize: number = this.mSkyLine.length / arrayLength;\n\n        const subSampledSkyLine: number[] = [];\n        const subSampledBottomLine: number[] = [];\n        for (let chunkIndex: number = 0; chunkIndex < this.mSkyLine.length; chunkIndex += arrayChunkSize) {\n            if (subSampledSkyLine.length === arrayLength) {\n                break; // TODO find out why skyline.length becomes arrayLength + 1. see log.debug below\n            }\n\n            const endIndex: number = Math.min(this.mSkyLine.length, chunkIndex + arrayChunkSize);\n            let chunk: number[] = this.mSkyLine.slice(chunkIndex, endIndex + 1); // slice does not include end index\n            // TODO chunkIndex + arrayChunkSize is sometimes bigger than this.mSkyLine.length -> out of bounds\n            // TODO chunkIndex + arrayChunkSize is often a non-rounded float as well. is that ok to use with slice?\n            /*const diff: number = this.mSkyLine.length - (chunkIndex + arrayChunkSize);\n            if (diff < 0) { // out of bounds\n                console.log(\"length - slice end index: \" + diff);\n            }*/\n\n            subSampledSkyLine.push(Math.min(...chunk));\n            chunk = this.mBottomLine.slice(chunkIndex, endIndex + 1); // slice does not include end index\n            subSampledBottomLine.push(Math.max(...chunk));\n        }\n\n        this.mSkyLine = subSampledSkyLine;\n        this.mBottomLine = subSampledBottomLine;\n        if (this.mSkyLine.length !== arrayLength) { // bottomline will always be same length as well\n            log.debug(`SkyLine calculation was not correct (${this.mSkyLine.length} instead of ${arrayLength})`);\n        }\n\n        // Remap the values from 0 to +/- height in units\n        const lowestSkyLine: number = Math.max(...this.mSkyLine);\n        this.mSkyLine = this.mSkyLine.map(v => (v - lowestSkyLine) / unitInPixels + this.StaffLineParent.TopLineOffset);\n\n        const highestBottomLine: number = Math.min(...this.mBottomLine);\n        this.mBottomLine = this.mBottomLine.map(v => (v - highestBottomLine) / unitInPixels + this.StaffLineParent.BottomLineOffset);\n    }\n\n    /**\n     * This method calculates the Sky- and BottomLines for a StaffLine.\n     */\n    public calculateLines(): void {\n        const samplingUnit: number = this.mRules.SamplingUnit;\n        const results: SkyBottomLineCalculationResult[] = [];\n\n        // Create a temporary canvas outside the DOM to draw the measure in.\n        const tmpCanvas: any = new CanvasVexFlowBackend(this.mRules);\n        // search through all Measures\n        for (const measure of this.StaffLineParent.Measures as VexFlowMeasure[]) {\n            // must calculate first AbsolutePositions\n            measure.PositionAndShape.calculateAbsolutePositionsRecursive(0, 0);\n\n            // Pre initialize and get stuff for more performance\n            const vsStaff: any = measure.getVFStave();\n            let width: number = vsStaff.getWidth();\n            if (!(width > 0) && !measure.IsExtraGraphicalMeasure) {\n                log.warn(\"SkyBottomLineCalculator: width not > 0 in measure \" + measure.MeasureNumber);\n                width = 50;\n            }\n            // Headless because we are outside the DOM\n            tmpCanvas.initializeHeadless(width);\n            const ctx: any = tmpCanvas.getContext();\n            const canvas: any = tmpCanvas.getCanvas();\n            width = canvas.width;\n            const height: number = canvas.height;\n\n            // This magic number is an offset from the top image border so that\n            // elements above the staffline can be drawn correctly.\n            vsStaff.setY(vsStaff.y + 100);\n            const oldMeasureWidth: number = vsStaff.getWidth();\n            // We need to tell the VexFlow stave about the canvas width. This looks\n            // redundant because it should know the canvas but somehow it doesn't.\n            // Maybe I am overlooking something but for now this does the trick\n            vsStaff.setWidth(width);\n            measure.format();\n            vsStaff.setWidth(oldMeasureWidth);\n            try {\n                measure.draw(ctx);\n                // Vexflow errors can happen here, then our complete rendering loop would halt without catching errors.\n            } catch (ex) {\n                log.warn(\"SkyBottomLineCalculator.calculateLines.draw\", ex);\n            }\n\n            // imageData.data is a Uint8ClampedArray representing a one-dimensional array containing the data in the RGBA order\n            // RGBA is 32 bit word with 8 bits red, 8 bits green, 8 bits blue and 8 bit alpha. Alpha should be 0 for all background colors.\n            // Since we are only interested in black or white we can take 32bit words at once\n            const imageData: any = ctx.getImageData(0, 0, width, height);\n            const rgbaLength: number = 4;\n            const measureArrayLength: number = Math.max(Math.ceil(measure.PositionAndShape.Size.width * samplingUnit), 1);\n            const tmpSkyLine: number[] = new Array(measureArrayLength);\n            const tmpBottomLine: number[] = new Array(measureArrayLength);\n            for (let x: number = 0; x < width; x++) {\n                // SkyLine\n                for (let y: number = 0; y < height; y++) {\n                    const yOffset: number = y * width * rgbaLength;\n                    const bufIndex: number = yOffset + x * rgbaLength;\n                    const alpha: number = imageData.data[bufIndex + 3];\n                    if (alpha > 0) {\n                        tmpSkyLine[x] = y;\n                        break;\n                    }\n                }\n                // BottomLine\n                for (let y: number = height; y > 0; y--) {\n                    const yOffset: number = y * width * rgbaLength;\n                    const bufIndex: number = yOffset + x * rgbaLength;\n                    const alpha: number = imageData.data[bufIndex + 3];\n                    if (alpha > 0) {\n                        tmpBottomLine[x] = y;\n                        break;\n                    }\n                }\n            }\n\n            for (let idx: number = 0; idx < tmpSkyLine.length; idx++) {\n                if (tmpSkyLine[idx] === undefined) {\n                    tmpSkyLine[idx] = Math.max(this.findPreviousValidNumber(idx, tmpSkyLine), this.findNextValidNumber(idx, tmpSkyLine));\n                }\n            }\n            for (let idx: number = 0; idx < tmpBottomLine.length; idx++) {\n                if (tmpBottomLine[idx] === undefined) {\n                    tmpBottomLine[idx] = Math.max(this.findPreviousValidNumber(idx, tmpBottomLine), this.findNextValidNumber(idx, tmpBottomLine));\n                }\n            }\n\n            results.push(new SkyBottomLineCalculationResult(tmpSkyLine, tmpBottomLine));\n\n            // Set to true to only show the \"mini canvases\" and the corresponding skylines\n            const debugTmpCanvas: boolean = false;\n            if (debugTmpCanvas) {\n                tmpSkyLine.forEach((y, x) => this.drawPixel(new PointF2D(x, y), tmpCanvas));\n                tmpBottomLine.forEach((y, x) => this.drawPixel(new PointF2D(x, y), tmpCanvas, \"blue\"));\n                const img: any = canvas.toDataURL(\"image/png\");\n                document.write('<img src=\"' + img + '\"/>');\n            }\n            tmpCanvas.clear();\n        }\n\n        this.updateLines(results);\n    }\n\n    /**\n     * This method updates the SkyLine for a given Wedge.\n     * @param start Start point of the wedge (the point where both lines meet)\n     * @param end End point of the wedge (the end of the most extreme line: upper line for skyline, lower line for bottomline)\n     */\n    public updateSkyLineWithWedge(start: PointF2D, end: PointF2D): void {\n        // FIXME: Refactor if wedges will be added. Current status is that vexflow will be used for this\n        let startIndex: number = Math.floor(start.x * this.SamplingUnit);\n        let endIndex: number = Math.ceil(end.x * this.SamplingUnit);\n\n        let slope: number = (end.y - start.y) / (end.x - start.x);\n\n        if (endIndex - startIndex <= 1) {\n            endIndex++;\n            slope = 0;\n        }\n\n        if (startIndex < 0) {\n            startIndex = 0;\n        }\n        if (startIndex >= this.BottomLine.length) {\n            startIndex = this.BottomLine.length - 1;\n        }\n        if (endIndex < 0) {\n            endIndex = 0;\n        }\n        if (endIndex >= this.BottomLine.length) {\n            endIndex = this.BottomLine.length;\n        }\n\n        this.SkyLine[startIndex] = start.y;\n        for (let i: number = startIndex + 1; i < Math.min(endIndex, this.SkyLine.length); i++) {\n            this.SkyLine[i] = this.SkyLine[i - 1] + slope / this.SamplingUnit;\n        }\n    }\n\n    /**\n     * This method updates the BottomLine for a given Wedge.\n     * @param start Start point of the wedge\n     * @param end End point of the wedge\n     */\n    public updateBottomLineWithWedge(start: PointF2D, end: PointF2D): void {\n        // FIXME: Refactor if wedges will be added. Current status is that vexflow will be used for this\n        let startIndex: number = Math.floor(start.x * this.SamplingUnit);\n        let endIndex: number = Math.ceil(end.x * this.SamplingUnit);\n\n        let slope: number = (end.y - start.y) / (end.x - start.x);\n        if (endIndex - startIndex <= 1) {\n            endIndex++;\n            slope = 0;\n        }\n\n        if (startIndex < 0) {\n            startIndex = 0;\n        }\n        if (startIndex >= this.BottomLine.length) {\n            startIndex = this.BottomLine.length - 1;\n        }\n        if (endIndex < 0) {\n            endIndex = 0;\n        }\n        if (endIndex >= this.BottomLine.length) {\n            endIndex = this.BottomLine.length;\n        }\n\n        this.BottomLine[startIndex] = start.y;\n        for (let i: number = startIndex + 1; i < endIndex; i++) {\n            this.BottomLine[i] = this.BottomLine[i - 1] + slope / this.SamplingUnit;\n        }\n    }\n\n    /**\n     * This method updates the SkyLine for a given range with a given value\n     * //param  to update the SkyLine for\n     * @param startIndex Start index of the range\n     * @param endIndex End index of the range\n     * @param value ??\n     */\n    public updateSkyLineInRange(startIndex: number, endIndex: number, value: number): void {\n        this.updateInRange(this.mSkyLine, startIndex, endIndex, value);\n    }\n\n    /**\n     * This method updates the BottomLine for a given range with a given value\n     * @param startIndex Start index of the range\n     * @param endIndex End index of the range (excluding)\n     * @param value ??\n     */\n    public updateBottomLineInRange(startIndex: number, endIndex: number, value: number): void {\n        this.updateInRange(this.BottomLine, startIndex, endIndex, value);\n    }\n\n    /**\n     * Resets a SkyLine in a range to its original value\n     * @param startIndex Start index of the range\n     * @param endIndex End index of the range (excluding)\n     */\n    public resetSkyLineInRange(startIndex: number, endIndex: number): void {\n        this.updateInRange(this.SkyLine, startIndex, endIndex);\n    }\n\n    /**\n     * Resets a bottom line in a range to its original value\n     * @param startIndex Start index of the range\n     * @param endIndex End index of the range\n     */\n    public resetBottomLineInRange(startIndex: number, endIndex: number): void {\n        this.setInRange(this.BottomLine, startIndex, endIndex);\n    }\n\n    /**\n     * Update the whole skyline with a certain value\n     * @param value value to be set\n     */\n    public setSkyLineWithValue(value: number): void {\n        this.SkyLine.forEach(sl => sl = value);\n    }\n\n    /**\n     * Update the whole bottomline with a certain value\n     * @param value value to be set\n     */\n    public setBottomLineWithValue(value: number): void {\n        this.BottomLine.forEach(bl => bl = value);\n    }\n\n    public getLeftIndexForPointX(x: number, length: number): number {\n        const index: number = Math.floor(x * this.SamplingUnit);\n\n        if (index < 0) {\n            return 0;\n        }\n\n        if (index >= length) {\n            return length - 1;\n        }\n\n        return index;\n    }\n\n    public getRightIndexForPointX(x: number, length: number): number {\n        const index: number = Math.ceil(x * this.SamplingUnit);\n\n        if (index < 0) {\n            return 0;\n        }\n\n        if (index >= length) {\n            return length - 1;\n        }\n\n        return index;\n    }\n\n    /**\n     * This method updates the StaffLine Borders with the Sky- and BottomLines Min- and MaxValues.\n     */\n    public updateStaffLineBorders(): void {\n        this.mStaffLineParent.PositionAndShape.BorderTop = this.getSkyLineMin();\n        this.mStaffLineParent.PositionAndShape.BorderMarginTop = this.getSkyLineMin();\n        this.mStaffLineParent.PositionAndShape.BorderBottom = this.getBottomLineMax();\n        this.mStaffLineParent.PositionAndShape.BorderMarginBottom = this.getBottomLineMax();\n    }\n\n    /**\n     * This method finds the minimum value of the SkyLine.\n     */\n    public getSkyLineMin(): number {\n        return Math.min(...this.SkyLine.filter(s => !isNaN(s)));\n    }\n\n    public getSkyLineMinAtPoint(point: number): number {\n        const index: number = Math.round(point * this.SamplingUnit);\n        return this.mSkyLine[index];\n    }\n\n    /**\n     * This method finds the SkyLine's minimum value within a given range.\n     * @param startIndex Starting index\n     * @param endIndex End index (including)\n     */\n    public getSkyLineMinInRange(startIndex: number, endIndex: number): number {\n        return this.getMinInRange(this.SkyLine, startIndex, endIndex);\n    }\n\n    /**\n     * This method finds the maximum value of the BottomLine.\n     */\n    public getBottomLineMax(): number {\n        return Math.max(...this.BottomLine.filter(s => !isNaN(s)));\n    }\n\n    public getBottomLineMaxAtPoint(point: number): number {\n        const index: number = Math.round(point * this.SamplingUnit);\n        return this.mBottomLine[index];\n    }\n\n    /**\n     * This method finds the BottomLine's maximum value within a given range.\n     * @param startIndex Start index of the range\n     * @param endIndex End index of the range (excluding)\n     */\n    public getBottomLineMaxInRange(startIndex: number, endIndex: number): number {\n        return this.getMaxInRange(this.BottomLine, startIndex, endIndex);\n    }\n\n    /**\n     * This method returns the maximum value of the bottom line around a specific\n     * bounding box. Will return undefined if the bounding box is not valid or inside staffline\n     * @param boundingBox Bounding box where the maximum should be retrieved from\n     * @returns Maximum value inside bounding box boundaries or undefined if not possible\n     */\n    public getBottomLineMaxInBoundingBox(boundingBox: BoundingBox): number {\n        //TODO: Actually it should be the margin. But that one is not implemented\n        const startPoint: number = Math.floor(boundingBox.AbsolutePosition.x + boundingBox.BorderLeft);\n        const endPoint: number = Math.ceil(boundingBox.AbsolutePosition.x + boundingBox.BorderRight);\n        return this.getMaxInRange(this.mBottomLine, startPoint, endPoint);\n    }\n\n    /**\n     * Updates sky- and bottom line with a boundingBox and its children\n     * @param boundingBox Bounding box to be added\n     */\n    public updateWithBoundingBoxRecursively(boundingBox: BoundingBox): void {\n        if (boundingBox.ChildElements && boundingBox.ChildElements.length > 0) {\n            this.updateWithBoundingBoxRecursively(boundingBox);\n        } else {\n            const currentTopBorder: number = boundingBox.BorderTop + boundingBox.AbsolutePosition.y;\n            const currentBottomBorder: number = boundingBox.BorderBottom + boundingBox.AbsolutePosition.y;\n\n            if (currentTopBorder < 0) {\n                const startPoint: number = Math.floor(boundingBox.AbsolutePosition.x + boundingBox.BorderLeft);\n                const endPoint: number = Math.ceil(boundingBox.AbsolutePosition.x + boundingBox.BorderRight) ;\n\n                this.updateInRange(this.mSkyLine, startPoint, endPoint, currentTopBorder);\n            } else if (currentBottomBorder > this.StaffLineParent.StaffHeight) {\n                const startPoint: number = Math.floor(boundingBox.AbsolutePosition.x + boundingBox.BorderLeft);\n                const endPoint: number = Math.ceil(boundingBox.AbsolutePosition.x + boundingBox.BorderRight);\n\n                this.updateInRange(this.mBottomLine, startPoint, endPoint, currentBottomBorder);\n            }\n        }\n    }\n\n    //#region Private methods\n\n    /**\n     * go backwards through the skyline array and find a number so that\n     * we can properly calculate the average\n     * @param start the starting index of the search\n     * @param tSkyLine the skyline to search through\n     */\n     private findPreviousValidNumber(start: number, tSkyLine: number[]): number {\n        for (let idx: number = start; idx >= 0; idx--) {\n            if (!isNaN(tSkyLine[idx])) {\n                return tSkyLine[idx];\n            }\n        }\n        return 0;\n    }\n\n    /**\n     * go forward through the skyline array and find a number so that\n     * we can properly calculate the average\n     * @param start the starting index of the search\n     * @param tSkyLine the skyline to search through\n     */\n    private findNextValidNumber(start: number, tSkyLine: Array<number>): number {\n        if (start >= tSkyLine.length) {\n            return tSkyLine[start - 1];\n        }\n        for (let idx: number = start; idx < tSkyLine.length; idx++) {\n            if (!isNaN(tSkyLine[idx])) {\n                return tSkyLine[idx];\n            }\n        }\n        return 0;\n    }\n\n    /**\n     * Debugging drawing function that can draw single pixels\n     * @param coord Point to draw to\n     * @param backend the backend to be used\n     * @param color the color to be used, default is red\n     */\n    private drawPixel(coord: PointF2D, backend: CanvasVexFlowBackend, color: string = \"#FF0000FF\"): void {\n        const ctx: any = backend.getContext();\n        const oldStyle: string = ctx.fillStyle;\n        ctx.fillStyle = color;\n        ctx.fillRect(coord.x, coord.y, 2, 2);\n        ctx.fillStyle = oldStyle;\n    }\n\n    /**\n     * Update an array with the value given inside a range. NOTE: will only be updated if value > oldValue\n     * @param array Array to fill in the new value\n     * @param startIndex start index to begin with (default: 0)\n     * @param endIndex end index of array (excluding, default: array length)\n     * @param value value to fill in (default: 0)\n     */\n    private updateInRange(array: number[], startIndex: number = 0, endIndex: number = array.length, value: number = 0): void {\n        startIndex = Math.floor(startIndex * this.SamplingUnit);\n        endIndex = Math.ceil(endIndex * this.SamplingUnit);\n\n        if (endIndex < startIndex) {\n            throw new Error(\"start index of line is greater than the end index\");\n        }\n\n        if (startIndex < 0) {\n            startIndex = 0;\n        }\n\n        if (endIndex > array.length) {\n            endIndex = array.length;\n        }\n\n        for (let i: number = startIndex; i < endIndex; i++) {\n            array[i] = Math.abs(value) > Math.abs(array[i]) ? value : array[i];\n        }\n    }\n\n    /**\n     * Sets the value given to the range inside the array. NOTE: will always update the value\n     * @param array Array to fill in the new value\n     * @param startIndex start index to begin with (default: 0)\n     * @param endIndex end index of array (excluding, default: array length)\n     * @param value value to fill in (default: 0)\n     */\n    private setInRange(array: number[], startIndex: number = 0, endIndex: number = array.length, value: number = 0): void {\n        startIndex = Math.floor(startIndex * this.SamplingUnit);\n        endIndex = Math.ceil(endIndex * this.SamplingUnit);\n\n        if (endIndex < startIndex) {\n            throw new Error(\"start index of line is greater then the end index\");\n        }\n\n        if (startIndex < 0) {\n            startIndex = 0;\n        }\n\n        if (endIndex > array.length) {\n            endIndex = array.length;\n        }\n\n        for (let i: number = startIndex; i < endIndex; i++) {\n            array[i] = value;\n        }\n    }\n    /**\n     * Get all values of the selected line inside the given range\n     * @param skyBottomArray Skyline or bottom line\n     * @param startIndex start index\n     * @param endIndex end index (including)\n     */\n    private getMinInRange(skyBottomArray: number[], startIndex: number, endIndex: number): number {\n        startIndex = Math.floor(startIndex * this.SamplingUnit);\n        endIndex = Math.ceil(endIndex * this.SamplingUnit);\n\n        if (!skyBottomArray) {\n            // Highly questionable\n            return Number.MAX_VALUE;\n        }\n\n        if (startIndex < 0) {\n            startIndex = 0;\n        }\n        if (startIndex >= skyBottomArray.length) {\n            startIndex = skyBottomArray.length - 1;\n        }\n        if (endIndex < 0) {\n            endIndex = 0;\n        }\n        if (endIndex >= skyBottomArray.length) {\n            endIndex = skyBottomArray.length;\n        }\n\n        if (startIndex >= 0 && endIndex <= skyBottomArray.length) {\n            return Math.min(...skyBottomArray.slice(startIndex, endIndex + 1)); // slice does not include end (index)\n        }\n    }\n\n    /**\n     * Get the maximum value inside the given indices\n     * @param skyBottomArray Skyline or bottom line\n     * @param startIndex start index\n     * @param endIndex end index (including)\n     */\n    private getMaxInRange(skyBottomArray: number[], startIndex: number, endIndex: number): number {\n        startIndex = Math.floor(startIndex * this.SamplingUnit);\n        endIndex = Math.ceil(endIndex * this.SamplingUnit);\n\n        if (!skyBottomArray) {\n            // Highly questionable\n            return Number.MIN_VALUE;\n        }\n\n        if (startIndex < 0) {\n            startIndex = 0;\n        }\n        if (startIndex >= skyBottomArray.length) {\n            startIndex = skyBottomArray.length - 1;\n        }\n        if (endIndex < 0) {\n            endIndex = 0;\n        }\n        if (endIndex >= skyBottomArray.length) {\n            endIndex = skyBottomArray.length;\n        }\n\n        if (startIndex >= 0 && endIndex <= skyBottomArray.length) {\n            return Math.max(...skyBottomArray.slice(startIndex, endIndex + 1)); // slice does not include end (index)\n        }\n    }\n    // FIXME: What does this do here?\n    // private isStaffLineUpper(): boolean {\n    //     const instrument: Instrument = this.StaffLineParent.ParentStaff.ParentInstrument;\n\n    //     if (this.StaffLineParent.ParentStaff === instrument.Staves[0]) {\n    //         return true;\n    //     } else {\n    //         return false;\n    //     }\n    // }\n    // #endregion\n\n    //#region Getter Setter\n    /** Sampling units that are used to quantize the sky and bottom line  */\n    get SamplingUnit(): number {\n        return this.mRules.SamplingUnit;\n    }\n\n    /** Parent staffline where the skybottomline calculator is attached to */\n    get StaffLineParent(): StaffLine {\n        return this.mStaffLineParent;\n    }\n\n    /** Get the plain skyline array */\n    get SkyLine(): number[] {\n        return this.mSkyLine;\n    }\n\n    /** Get the plain bottomline array */\n    get BottomLine(): number[] {\n        return this.mBottomLine;\n    }\n    //#endregion\n}\n","import {Staff} from \"../VoiceData/Staff\";\nimport {BoundingBox} from \"./BoundingBox\";\nimport {Instrument} from \"../Instrument\";\nimport {GraphicalLine} from \"./GraphicalLine\";\nimport {GraphicalStaffEntry} from \"./GraphicalStaffEntry\";\nimport {GraphicalObject} from \"./GraphicalObject\";\nimport {GraphicalMeasure} from \"./GraphicalMeasure\";\nimport {MusicSystem} from \"./MusicSystem\";\nimport {StaffLineActivitySymbol} from \"./StaffLineActivitySymbol\";\nimport {PointF2D} from \"../../Common/DataObjects/PointF2D\";\nimport {GraphicalLabel} from \"./GraphicalLabel\";\nimport { SkyBottomLineCalculator } from \"./SkyBottomLineCalculator\";\nimport { GraphicalOctaveShift } from \"./GraphicalOctaveShift\";\nimport { GraphicalSlur } from \"./GraphicalSlur\";\nimport { AbstractGraphicalExpression } from \"./AbstractGraphicalExpression\";\n\n/**\n * A StaffLine contains the [[Measure]]s in one line of the music sheet\n * (one instrument, one line, until a line break)\n */\nexport abstract class StaffLine extends GraphicalObject {\n    protected measures: GraphicalMeasure[] = [];\n    protected staffLines: GraphicalLine[] = new Array(5);\n    protected parentMusicSystem: MusicSystem;\n    protected parentStaff: Staff;\n    protected octaveShifts: GraphicalOctaveShift[] = [];\n    protected skyBottomLine: SkyBottomLineCalculator;\n    protected lyricLines: GraphicalLine[] = [];\n    protected lyricsDashes: GraphicalLabel[] = [];\n    protected abstractExpressions: AbstractGraphicalExpression[] = [];\n    /** The staff height in units */\n    private staffHeight: number;\n    private topLineOffset: number;\n    private bottomLineOffset: number;\n\n    // For displaying Slurs\n    protected graphicalSlurs: GraphicalSlur[] = [];\n\n    constructor(parentSystem: MusicSystem, parentStaff: Staff) {\n        super();\n        this.parentMusicSystem = parentSystem;\n        this.parentStaff = parentStaff;\n        this.boundingBox = new BoundingBox(this, parentSystem.PositionAndShape);\n        this.skyBottomLine = new SkyBottomLineCalculator(this);\n        this.staffHeight = this.parentMusicSystem.rules.StaffHeight;\n        this.topLineOffset = 0;\n        this.bottomLineOffset = 4;\n\n        this.calculateStaffLineOffsets();\n    }\n\n    /**\n     * If the musicXML sets different numbers of stafflines, we need to have different offsets\n     * to accomodate this - primarily for the sky and bottom lines and cursor.\n     */\n    private calculateStaffLineOffsets(): void {\n        if (this.ParentStaff.isTab) {\n            switch (this.ParentStaff.StafflineCount) {\n                case 5:\n                    this.staffHeight = this.bottomLineOffset =\n                        this.ParentStaff.ParentInstrument.GetMusicSheet.Rules.TabStaffInterlineHeight * 6;\n                    break;\n                default:\n                    this.staffHeight = this.bottomLineOffset =\n                        this.ParentStaff.ParentInstrument.GetMusicSheet.Rules.TabStaffInterlineHeight * this.ParentStaff.StafflineCount;\n                    break;\n            }\n        } else {\n            switch (this.ParentStaff.StafflineCount) {\n                case 4:\n                    this.bottomLineOffset = 1;\n                    break;\n                case 3:\n                    this.topLineOffset = 1;\n                    this.bottomLineOffset = 1;\n                    break;\n                case 2:\n                    this.topLineOffset = 2;\n                    this.bottomLineOffset = 1;\n                    break;\n                case 1:\n                    this.topLineOffset = 2;\n                    this.bottomLineOffset = 2;\n                    break;\n                default:\n                    break;\n            }\n        }\n    }\n\n    public get Measures(): GraphicalMeasure[] {\n        return this.measures;\n    }\n\n    public set Measures(value: GraphicalMeasure[]) {\n        this.measures = value;\n    }\n\n    public get StaffLines(): GraphicalLine[] {\n        return this.staffLines;\n    }\n\n    public set StaffLines(value: GraphicalLine[]) {\n        this.staffLines = value;\n    }\n\n    public get NextStaffLine(): StaffLine {\n        const idxInParent: number = this.parentMusicSystem.StaffLines.indexOf(this);\n        return idxInParent !== this.parentMusicSystem.StaffLines.length ? this.parentMusicSystem.StaffLines[idxInParent + 1] : undefined;\n    }\n\n    public get LyricLines(): GraphicalLine[] {\n        return this.lyricLines;\n    }\n\n    public get AbstractExpressions(): AbstractGraphicalExpression[] {\n        return this.abstractExpressions;\n    }\n\n    public set AbstractExpressions(value: AbstractGraphicalExpression[]) {\n        this.abstractExpressions = value;\n    }\n\n    public set LyricLines(value: GraphicalLine[]) {\n        this.lyricLines = value;\n    }\n\n    public get LyricsDashes(): GraphicalLabel[] {\n        return this.lyricsDashes;\n    }\n\n    public set LyricsDashes(value: GraphicalLabel[]) {\n        this.lyricsDashes = value;\n    }\n\n    public get ParentMusicSystem(): MusicSystem {\n        return this.parentMusicSystem;\n    }\n\n    public set ParentMusicSystem(value: MusicSystem) {\n        this.parentMusicSystem = value;\n    }\n\n    public get ParentStaff(): Staff {\n        return this.parentStaff;\n    }\n\n    public set ParentStaff(value: Staff) {\n        this.parentStaff = value;\n    }\n\n    public get SkyBottomLineCalculator(): SkyBottomLineCalculator {\n        return this.skyBottomLine;\n    }\n\n    public get SkyLine(): number[] {\n        return this.skyBottomLine.SkyLine;\n    }\n\n    public get BottomLine(): number[] {\n        return this.skyBottomLine.BottomLine;\n    }\n\n    public get OctaveShifts(): GraphicalOctaveShift[] {\n        return this.octaveShifts;\n    }\n\n    public set OctaveShifts(value: GraphicalOctaveShift[]) {\n        this.octaveShifts = value;\n    }\n\n    public get StaffHeight(): number {\n        return this.staffHeight;\n    }\n\n    public get TopLineOffset(): number {\n        return this.topLineOffset;\n    }\n    public get BottomLineOffset(): number {\n        return this.bottomLineOffset;\n    }\n\n    // get all Graphical Slurs of a staffline\n    public get GraphicalSlurs(): GraphicalSlur[] {\n        return this.graphicalSlurs;\n    }\n\n    /**\n     * Add a given Graphical Slur to the staffline\n     * @param gSlur\n     */\n    public addSlurToStaffline(gSlur: GraphicalSlur): void {\n        this.graphicalSlurs.push(gSlur);\n    }\n\n    public addActivitySymbolClickArea(): void {\n        const activitySymbol: StaffLineActivitySymbol = new StaffLineActivitySymbol(this);\n        const staffLinePsi: BoundingBox = this.PositionAndShape;\n        activitySymbol.PositionAndShape.RelativePosition =\n            new PointF2D(staffLinePsi.RelativePosition.x + staffLinePsi.BorderRight + 0.5, staffLinePsi.RelativePosition.y + 0.5);\n        activitySymbol.PositionAndShape.Parent = this.parentMusicSystem.PositionAndShape;\n    }\n\n    /**\n     * True iff [[StaffLine]] belongs to an [[Instrument]] with more than one [[Staff]].\n     * @returns {boolean}\n     */\n    public isPartOfMultiStaffInstrument(): boolean {\n        const instrument: Instrument = this.parentStaff.ParentInstrument;\n        if (instrument.Staves.length > 1) {\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * Find the [[GraphicalStaffEntry]] closest to the given xPosition.\n     * @param xPosition\n     * @returns {GraphicalStaffEntry}\n     */\n    public findClosestStaffEntry(xPosition: number): GraphicalStaffEntry {\n        let closestStaffentry: GraphicalStaffEntry = undefined;\n        for (let idx: number = 0, len: number = this.Measures.length; idx < len; ++idx) {\n            const graphicalMeasure: GraphicalMeasure = this.Measures[idx];\n            for (let idx2: number = 0, len2: number = graphicalMeasure.staffEntries.length; idx2 < len2; ++idx2) {\n                const graphicalStaffEntry: GraphicalStaffEntry = graphicalMeasure.staffEntries[idx2];\n                if (\n                    Math.abs(graphicalStaffEntry.PositionAndShape.RelativePosition.x - xPosition + graphicalMeasure.PositionAndShape.RelativePosition.x) < 5.0\n                ) {\n                    closestStaffentry = graphicalStaffEntry;\n                }\n            }\n        }\n        return closestStaffentry;\n    }\n}\n","import {GraphicalObject} from \"./GraphicalObject\";\nimport {StaffLine} from \"./StaffLine\";\nimport {BoundingBox} from \"./BoundingBox\";\n\nexport class StaffLineActivitySymbol extends GraphicalObject {\n\n    constructor(staffLine: StaffLine) {\n        super();\n        this.parentStaffLine = staffLine;\n        const staffLinePsi: BoundingBox = staffLine.PositionAndShape;\n        this.boundingBox = new BoundingBox(this, staffLinePsi);\n        this.boundingBox.BorderRight = 6;\n        this.boundingBox.BorderBottom = 4.5;\n        this.boundingBox.BorderLeft = -1.5;\n        this.boundingBox.BorderTop = -1.5;\n    }\n\n    public parentStaffLine: StaffLine;\n\n}\n","import {GraphicalMeasure} from \"./GraphicalMeasure\";\nimport {StaffLine} from \"./StaffLine\";\nimport {MusicSystem} from \"./MusicSystem\";\nimport {SystemLinePosition} from \"./SystemLinePosition\";\nimport {SystemLinesEnum} from \"./SystemLinesEnum\";\nimport {BoundingBox} from \"./BoundingBox\";\nimport {GraphicalObject} from \"./GraphicalObject\";\nimport {EngravingRules} from \"./EngravingRules\";\n\nexport class SystemLine extends GraphicalObject {\n\n    constructor(lineType: SystemLinesEnum, linePosition: SystemLinePosition, musicSystem: MusicSystem,\n                topMeasure: GraphicalMeasure, bottomMeasure: GraphicalMeasure = undefined) {\n        super();\n        this.lineType = lineType;\n        this.linePosition = linePosition;\n        this.parentMusicSystem = musicSystem;\n        this.topMeasure = topMeasure;\n        this.bottomMeasure = bottomMeasure;\n        this.parentTopStaffLine = topMeasure?.ParentStaffLine;\n        this.boundingBox = new BoundingBox(this, musicSystem.PositionAndShape);\n    }\n\n    public lineType: SystemLinesEnum;\n    public linePosition: SystemLinePosition;\n    public parentMusicSystem: MusicSystem;\n    public parentTopStaffLine: StaffLine;\n    public topMeasure: GraphicalMeasure;\n    public bottomMeasure: GraphicalMeasure;\n\n    /**\n     * Return the width of the SystemLinesContainer for the given SystemLineType.\n     * @param rules\n     * @param systemLineType\n     * @returns {number}\n     */\n    public static getObjectWidthForLineType(rules: EngravingRules, systemLineType: SystemLinesEnum): number {\n        switch (systemLineType) {\n            case SystemLinesEnum.SingleThin:\n                return rules.SystemThinLineWidth;\n            case SystemLinesEnum.DoubleThin:\n                return rules.SystemThinLineWidth * 2 + rules.DistanceBetweenVerticalSystemLines;\n            case SystemLinesEnum.ThinBold:\n                return rules.SystemThinLineWidth + rules.SystemBoldLineWidth + rules.DistanceBetweenVerticalSystemLines;\n            case SystemLinesEnum.BoldThinDots:\n                return rules.SystemThinLineWidth + rules.SystemBoldLineWidth + rules.DistanceBetweenVerticalSystemLines + rules.SystemDotWidth +\n                    rules.DistanceBetweenDotAndLine;\n            case SystemLinesEnum.DotsThinBold:\n                return rules.SystemThinLineWidth + rules.SystemBoldLineWidth + rules.DistanceBetweenVerticalSystemLines + rules.SystemDotWidth +\n                    rules.DistanceBetweenDotAndLine;\n            case SystemLinesEnum.DotsBoldBoldDots:\n                return 2 * rules.SystemBoldLineWidth + 2 * rules.SystemDotWidth + 2 * rules.DistanceBetweenDotAndLine +\n                    rules.DistanceBetweenVerticalSystemLines;\n            default:\n                return 0;\n        }\n    }\n\n}\n","export enum SystemLinePosition {\n    MeasureBegin,\n    MeasureEnd\n}\n","export enum SystemLinesEnum {\n    SingleThin = 0,       /*SINGLE,       [bar-style=regular]*/\n    DoubleThin = 1,       /*DOUBLE,       [bar-style=light-light]*/\n    ThinBold = 2,         /*END,          [bar-style=light-heavy]*/\n    BoldThinDots = 3,     /*REPEAT_BEGIN, repeat[direction=forward]*/\n    DotsThinBold = 4,     /*REPEAT_END,   repeat[direction=backward]*/\n    DotsBoldBoldDots = 5, /*REPEAT_BOTH*/\n    None = 6,             /*              [bar-style=none]*/\n    Dotted = 7,           /*              [bar-style=dotted]*/\n    Dashed = 8,           /*              [bar-style=dashed]*/\n    Bold = 9,             /*              [bar-style=heavy]*/\n    BoldThin = 10,        /*              [bar-style=heavy-light]*/\n    DoubleBold = 11,      /*              [bar-style=heavy-heavy]*/\n    Tick = 12,            /*              [bar-style=tick]*/\n    Short = 13            /*              [bar-style=short]*/\n}\n\nexport class SystemLinesEnumHelper {\n    public static xmlBarlineStyleToSystemLinesEnum(xmlValue: string): SystemLinesEnum {\n        if (xmlValue === \"regular\") {\n            return SystemLinesEnum.SingleThin;\n        } else if (xmlValue === \"dotted\") {\n            return SystemLinesEnum.Dotted;\n        } else if (xmlValue === \"dashed\") {\n            return SystemLinesEnum.Dashed;\n        } else if (xmlValue === \"heavy\") {\n            return SystemLinesEnum.Bold;\n        } else if (xmlValue === \"light-light\") {\n            return SystemLinesEnum.DoubleThin;\n        } else if (xmlValue === \"light-heavy\") {\n            return SystemLinesEnum.ThinBold;\n        } else if (xmlValue === \"heavy-light\") {\n            return SystemLinesEnum.BoldThin;\n        } else if (xmlValue === \"heavy-heavy\") {\n            return SystemLinesEnum.DoubleBold;\n        } else if (xmlValue === \"tick\") {\n            return SystemLinesEnum.Tick;\n        } else if (xmlValue === \"short\") {\n            return SystemLinesEnum.Short;\n        } else if (xmlValue === \"none\") {\n            return SystemLinesEnum.None;\n        }\n        return SystemLinesEnum.SingleThin;\n    }\n}\n","import {Fraction} from \"../../Common/DataObjects/Fraction\";\nimport {GraphicalStaffEntry} from \"./GraphicalStaffEntry\";\n\nexport class VerticalGraphicalStaffEntryContainer {\n\n    constructor(numberOfEntries: number, absoluteTimestamp: Fraction) {\n        this.absoluteTimestamp = absoluteTimestamp;\n        this.staffEntries = new Array(numberOfEntries);\n    }\n\n    //public relativeInMeasureTimestamp: Fraction;\n    private index: number;\n    private absoluteTimestamp: Fraction;\n    private staffEntries: GraphicalStaffEntry[] = [];\n\n    public get Index(): number {\n        return this.index;\n    }\n\n    public set Index(value: number) {\n        this.index = value;\n    }\n\n    public get AbsoluteTimestamp(): Fraction {\n        return this.absoluteTimestamp;\n    }\n\n    //public set AbsoluteTimestamp(value: Fraction) {\n    //    this.absoluteTimestamp = value;\n    //}\n\n    public get StaffEntries(): GraphicalStaffEntry[] {\n        return this.staffEntries;\n    }\n\n    public set StaffEntries(value: GraphicalStaffEntry[]) {\n        this.staffEntries = value;\n    }\n\n    public static compareByTimestamp(x: VerticalGraphicalStaffEntryContainer, y: VerticalGraphicalStaffEntryContainer): number {\n        const xValue: number = x.absoluteTimestamp.RealValue;\n        const yValue: number = y.absoluteTimestamp.RealValue;\n\n        if (xValue < yValue) {\n            return -1;\n        } else if (xValue > yValue) {\n            return 1;\n        } else {\n            return 0;\n        }\n    }\n\n    /**\n     * Return the first non-null [[GraphicalStaffEntry]].\n     * @returns {any}\n     */\n    public getFirstNonNullStaffEntry(): GraphicalStaffEntry {\n        for (let idx: number = 0, len: number = this.staffEntries.length; idx < len; ++idx) {\n            const graphicalStaffEntry: GraphicalStaffEntry = this.staffEntries[idx];\n            if (graphicalStaffEntry) {\n                return graphicalStaffEntry;\n            }\n        }\n        return undefined;\n    }\n}\n\n\n","import { StaffLine } from \"../StaffLine\";\nimport { BoundingBox } from \"../BoundingBox\";\nimport { VexFlowContinuousDynamicExpression } from \"./VexFlowContinuousDynamicExpression\";\nimport { AbstractGraphicalExpression } from \"../AbstractGraphicalExpression\";\nimport { PointF2D } from \"../../../Common/DataObjects/PointF2D\";\nimport { EngravingRules } from \"../EngravingRules\";\nimport { PlacementEnum } from \"../../VoiceData/Expressions/AbstractExpression\";\n\nexport class AlignmentManager {\n    private parentStaffline: StaffLine;\n    private rules: EngravingRules;\n\n    constructor(staffline: StaffLine) {\n        this.parentStaffline = staffline;\n        this.rules = this.parentStaffline.ParentMusicSystem.rules;\n    }\n\n    public alignDynamicExpressions(): void {\n        // Find close expressions along the staffline. Group them into tuples\n        const groups: AbstractGraphicalExpression[][] = [];\n        let tmpList: AbstractGraphicalExpression[] = new Array<AbstractGraphicalExpression>();\n        for (let aeIdx: number = 0; aeIdx < this.parentStaffline.AbstractExpressions.length - 1; aeIdx++) {\n            const currentExpression: AbstractGraphicalExpression = this.parentStaffline.AbstractExpressions[aeIdx];\n            const nextExpression: AbstractGraphicalExpression = this.parentStaffline.AbstractExpressions[aeIdx + 1];\n\n            const currentExpressionPlacement: PlacementEnum = currentExpression?.SourceExpression?.Placement;\n            const nextExpressionPlacement: PlacementEnum = nextExpression?.SourceExpression?.Placement;\n\n            // TODO this shifts dynamics in An die Ferne Geliebte, showing that there's something wrong with the RelativePositions etc with wedges\n            // if (currentExpression instanceof GraphicalContinuousDynamicExpression) {\n            //     currentExpression.calcPsi();\n            // }\n            // if (nextExpression instanceof GraphicalContinuousDynamicExpression) {\n            //     nextExpression.calcPsi();\n            // }\n\n            if (currentExpressionPlacement === nextExpressionPlacement) {\n                // if ((currentExpression as any).label?.label?.text?.startsWith(\"dim\") ||\n                //     (nextExpression as any).label?.label?.text?.startsWith(\"dim\")) {\n                //         console.log(\"here\");\n                //     }\n                const dist: PointF2D = this.getDistance(currentExpression.PositionAndShape, nextExpression.PositionAndShape);\n                if (Math.abs(dist.x) < this.rules.DynamicExpressionMaxDistance) {\n                    // Prevent last found expression to be added twice. e.g. p<f as three close expressions\n                    if (tmpList.indexOf(currentExpression) === -1) {\n                        tmpList.push(currentExpression);\n                    }\n                    tmpList.push(nextExpression);\n                } else {\n                    groups.push(tmpList);\n                    tmpList = new Array<AbstractGraphicalExpression>();\n                }\n            }\n        }\n        // If expressions are colliding at end, we need to add them too\n        groups.push(tmpList);\n\n        for (const aes of groups) {\n            if (aes.length > 0) {\n                // Get the median y position and shift all group members to that position\n                const centerYs: number[] = aes.map(expr => expr.PositionAndShape.Center.y);\n                // TODO this may not give the right position for wedges (GraphicalContinuousDynamic, !isVerbal())\n                const yIdeal: number = Math.max(...centerYs);\n                // for (const ae of aes) { // debug\n                //     if (ae.PositionAndShape.Center.y > 6) {\n                //         // dynamic positioned at edge of skybottomline\n                //         console.log(`max expression in measure ${ae.SourceExpression.parentMeasure.MeasureNumber}: `);\n                //         console.dir(aes);\n                //     }\n                // }\n\n                for (let exprIdx: number = 0; exprIdx < aes.length; exprIdx++) {\n                    const expr: AbstractGraphicalExpression = aes[exprIdx];\n                    const centerOffset: number = centerYs[exprIdx] - yIdeal;\n                    // TODO centerOffset is way too big sometimes, like 7.0 in An die Ferne Geliebte (measure 10, dim.)\n                    // FIXME: Expressions should not behave differently.\n                    if (expr instanceof VexFlowContinuousDynamicExpression) {\n                        (expr as VexFlowContinuousDynamicExpression).shiftYPosition(-centerOffset);\n                        (expr as VexFlowContinuousDynamicExpression).calcPsi();\n                    } else {\n                        // TODO: The 0.8 are because the letters are a bit too far done\n                        expr.PositionAndShape.RelativePosition.y -= centerOffset * 0.8;\n                        // note: verbal GraphicalContinuousDynamicExpressions have a label, nonverbal ones don't.\n                        // take care to update and take the right bounding box for skyline.\n                        expr.PositionAndShape.calculateBoundingBox();\n                    }\n                    // Squeeze wedges\n                    if ((expr as VexFlowContinuousDynamicExpression).squeeze) {\n                        const nextExpression: AbstractGraphicalExpression = exprIdx < aes.length - 1 ? aes[exprIdx + 1] : undefined;\n                        const prevExpression: AbstractGraphicalExpression = exprIdx > 0 ? aes[exprIdx - 1] : undefined;\n                        if (nextExpression) {\n                            const overlapRight: PointF2D = this.getOverlap(expr.PositionAndShape, nextExpression.PositionAndShape);\n                            (expr as VexFlowContinuousDynamicExpression).squeeze(-(overlapRight.x + this.rules.DynamicExpressionSpacer));\n                        }\n                        if (prevExpression) {\n                            const overlapLeft: PointF2D = this.getOverlap(prevExpression.PositionAndShape, expr.PositionAndShape);\n                            (expr as VexFlowContinuousDynamicExpression).squeeze(overlapLeft.x + this.rules.DynamicExpressionSpacer);\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Get distance between two bounding boxes\n     * @param a First bounding box\n     * @param b Second bounding box\n     */\n    private getDistance(a: BoundingBox, b: BoundingBox): PointF2D {\n        const rightBorderA: number = a.RelativePosition.x + a.BorderMarginRight;\n        const leftBorderB: number = b.RelativePosition.x + b.BorderMarginLeft;\n        const bottomBorderA: number = a.RelativePosition.y + a.BorderMarginBottom;\n        const topBorderB: number = b.RelativePosition.y + b.BorderMarginTop;\n        return new PointF2D(leftBorderB - rightBorderA,\n                            topBorderB - bottomBorderA);\n                            // note: this is a distance vector, not absolute distance, otherwise we need Math.abs\n    }\n\n    /**\n     * Get overlap of two bounding boxes\n     * @param a First bounding box\n     * @param b Second bounding box\n     */\n    private getOverlap(a: BoundingBox, b: BoundingBox): PointF2D {\n        return new PointF2D((a.RelativePosition.x + a.BorderMarginRight) - (b.RelativePosition.x + b.BorderMarginLeft),\n                            (a.RelativePosition.y + a.BorderMarginBottom) - (b.RelativePosition.y + b.BorderMarginTop));\n    }\n}\n","import Vex from \"vexflow\";\nimport VF = Vex.Flow;\n\nimport {VexFlowBackend} from \"./VexFlowBackend\";\nimport {FontStyles} from \"../../../Common/Enums/FontStyles\";\nimport {Fonts} from \"../../../Common/Enums/Fonts\";\nimport {RectangleF2D} from \"../../../Common/DataObjects/RectangleF2D\";\nimport {PointF2D} from \"../../../Common/DataObjects/PointF2D\";\nimport {VexFlowConverter} from \"./VexFlowConverter\";\nimport {BackendType} from \"../../../OpenSheetMusicDisplay/OSMDOptions\";\nimport {EngravingRules} from \"../EngravingRules\";\nimport {GraphicalMusicPage} from \"../GraphicalMusicPage\";\n\nexport class CanvasVexFlowBackend extends VexFlowBackend {\n    private zoom: number;\n\n    constructor(rules: EngravingRules) {\n        super();\n        this.rules = rules;\n    }\n\n    public getVexflowBackendType(): VF.Renderer.Backends {\n        return VF.Renderer.Backends.CANVAS;\n    }\n\n    public getOSMDBackendType(): BackendType {\n        return BackendType.Canvas;\n    }\n\n    public getCanvasSize(): number {\n        return document.getElementById(\"osmdCanvasPage\" + this.graphicalMusicPage.PageNumber)?.offsetHeight;\n        // smaller inner canvas:\n        // return Number.parseInt(\n        //     document.getElementById(\"osmdCanvasVexFlowBackendCanvas\" + this.graphicalMusicPage.PageNumber)?.style.height, 10);\n    }\n\n    public initialize(container: HTMLElement, zoom: number): void {\n        this.zoom = zoom;\n        this.canvas = document.createElement(\"canvas\");\n        if (!this.graphicalMusicPage) {\n            this.graphicalMusicPage = new GraphicalMusicPage(undefined);\n            this.graphicalMusicPage.PageNumber = 1;\n        }\n        this.canvas.id = \"osmdCanvasVexFlowBackendCanvas\" + this.graphicalMusicPage.PageNumber; // needed to extract image buffer from js\n        this.inner = document.createElement(\"div\");\n        this.inner.id = \"osmdCanvasPage\" + this.graphicalMusicPage.PageNumber;\n        this.inner.style.position = \"relative\";\n        this.canvas.style.zIndex = \"0\";\n        this.inner.appendChild(this.canvas);\n        container.appendChild(this.inner);\n        this.renderer = new VF.Renderer(this.canvas, this.getVexflowBackendType());\n        this.ctx = <VF.CanvasContext>this.renderer.getContext();\n    }\n\n    /**\n     * Initialize a canvas without attaching it to a DOM node. Can be used to draw in background\n     * @param width Width of the canvas\n     * @param height Height of the canvas\n     */\n    public initializeHeadless(width: number = 300, height: number = 300): void {\n        if (!this.graphicalMusicPage) {\n            // not needed here yet, but just for future safety, make sure the page isn't undefined\n            this.graphicalMusicPage = new GraphicalMusicPage(undefined);\n            this.graphicalMusicPage.PageNumber = 1;\n        }\n        this.canvas = document.createElement(\"canvas\");\n        (this.canvas as any).width = width;\n        (this.canvas as any).height = height;\n        this.renderer = new VF.Renderer(this.canvas, this.getVexflowBackendType());\n        this.ctx = <VF.CanvasContext>this.renderer.getContext();\n    }\n\n    public getContext(): VF.CanvasContext {\n        return this.ctx;\n    }\n\n    public clear(): void {\n        (<any>this.ctx).clearRect(0, 0, (<any>this.canvas).width, (<any>this.canvas).height);\n\n        // set background color if not transparent\n        if (this.rules.PageBackgroundColor) {\n            this.ctx.save();\n            // note that this will hide the cursor\n            this.ctx.setFillStyle(this.rules.PageBackgroundColor);\n            this.zoom = 1; // remove\n            this.ctx.fillRect(0, 0, (this.canvas as any).width / this.zoom, (this.canvas as any).height / this.zoom);\n            this.ctx.restore();\n        }\n    }\n\n    public scale(k: number): void {\n        this.ctx.scale(k, k);\n    }\n\n    public translate(x: number, y: number): void {\n        this.CanvasRenderingCtx.translate(x, y);\n    }\n    public renderText(fontHeight: number, fontStyle: FontStyles, font: Fonts, text: string,\n                      heightInPixel: number, screenPosition: PointF2D,\n                      color: string = undefined, fontFamily: string = undefined): Node  {\n        const old: string = this.CanvasRenderingCtx.font;\n        this.CanvasRenderingCtx.save();\n        this.CanvasRenderingCtx.font = VexFlowConverter.font(\n            fontHeight,\n            fontStyle,\n            font,\n            this.rules,\n            fontFamily\n        );\n        this.CanvasRenderingCtx.fillStyle = color;\n        this.CanvasRenderingCtx.strokeStyle = color;\n        this.CanvasRenderingCtx.fillText(text, screenPosition.x, screenPosition.y + heightInPixel);\n        this.CanvasRenderingCtx.restore();\n        this.CanvasRenderingCtx.font = old;\n        return undefined; // can't return svg dom node\n    }\n    public renderRectangle(rectangle: RectangleF2D, styleId: number, colorHex: string, alpha: number = 1): Node {\n        const old: string | CanvasGradient | CanvasPattern = this.CanvasRenderingCtx.fillStyle;\n        if (colorHex) {\n            this.CanvasRenderingCtx.fillStyle = colorHex;\n        } else {\n            this.CanvasRenderingCtx.fillStyle = VexFlowConverter.style(styleId);\n        }\n        this.CanvasRenderingCtx.globalAlpha = alpha;\n        this.ctx.fillRect(rectangle.x, rectangle.y, rectangle.width, rectangle.height);\n        this.CanvasRenderingCtx.fillStyle = old;\n        this.CanvasRenderingCtx.globalAlpha = 1;\n        return undefined; // can't return dom node like with SVG\n    }\n\n    public renderLine(start: PointF2D, stop: PointF2D, color: string = \"#FF0000FF\", lineWidth: number= 2): Node {\n        const oldStyle: string | CanvasGradient | CanvasPattern = this.CanvasRenderingCtx.strokeStyle;\n        this.CanvasRenderingCtx.strokeStyle = color;\n        this.CanvasRenderingCtx.beginPath();\n        this.CanvasRenderingCtx.moveTo(start.x, start.y);\n        this.CanvasRenderingCtx.lineTo(stop.x, stop.y);\n        this.CanvasRenderingCtx.stroke();\n        this.CanvasRenderingCtx.strokeStyle = oldStyle;\n        return undefined; // can't return svg dom node\n    }\n\n    public renderCurve(points: PointF2D[]): Node {\n        this.ctx.beginPath();\n        this.ctx.moveTo(points[0].x, points[0].y);\n        this.ctx.bezierCurveTo(\n            points[1].x,\n            points[1].y,\n            points[2].x,\n            points[2].y,\n            points[3].x,\n            points[3].y\n            );\n        this.ctx.lineTo(points[7].x, points[7].y);\n        this.ctx.bezierCurveTo(\n            points[6].x,\n            points[6].y,\n            points[5].x,\n            points[5].y,\n            points[4].x,\n            points[4].y\n            );\n        this.ctx.lineTo(points[0].x, points[0].y);\n        //this.ctx.stroke();\n        this.ctx.closePath();\n        this.ctx.fill();\n        return undefined;\n    }\n\n    private ctx: VF.CanvasContext;\n\n    public get CanvasRenderingCtx(): CanvasRenderingContext2D {\n        // This clusterfuck is only there to counter act my favorite vexflow line:\n        // ctx.vexFlowCanvasContext = ctx;\n        // No idea why they are saving the context but we wrap the types here\n        return <CanvasRenderingContext2D>(this.ctx as any).vexFlowCanvasContext;\n    }\n}\n","import Vex from \"vexflow\";\nimport VF = Vex.Flow;\n\nimport {VexFlowBackend} from \"./VexFlowBackend\";\nimport {VexFlowConverter} from \"./VexFlowConverter\";\nimport {FontStyles} from \"../../../Common/Enums/FontStyles\";\nimport {Fonts} from \"../../../Common/Enums/Fonts\";\nimport {RectangleF2D} from \"../../../Common/DataObjects/RectangleF2D\";\nimport {PointF2D} from \"../../../Common/DataObjects/PointF2D\";\nimport {BackendType} from \"../../../OpenSheetMusicDisplay/OSMDOptions\";\nimport {EngravingRules} from \"../EngravingRules\";\nimport log from \"loglevel\";\n\nexport class SvgVexFlowBackend extends VexFlowBackend {\n\n    private ctx: VF.SVGContext;\n    public zoom: number; // currently unused\n\n    constructor(rules: EngravingRules) {\n        super();\n        this.rules = rules;\n    }\n\n    public getVexflowBackendType(): VF.Renderer.Backends {\n        return VF.Renderer.Backends.SVG;\n    }\n\n    public getOSMDBackendType(): BackendType {\n        return BackendType.SVG;\n    }\n\n    public getCanvasSize(): number {\n        return document.getElementById(\"osmdCanvasPage\" + this.graphicalMusicPage.PageNumber)?.offsetHeight;\n    }\n\n    public initialize(container: HTMLElement, zoom: number): void {\n        this.zoom = zoom;\n        this.canvas = document.createElement(\"div\");\n        this.canvas.id = \"osmdCanvasPage\" + this.graphicalMusicPage.PageNumber;\n        // this.canvas.id = uniqueID // TODO create unique tagName like with cursor now?\n        this.inner = this.canvas;\n        this.inner.style.position = \"relative\";\n        this.canvas.style.zIndex = \"0\";\n        container.appendChild(this.inner);\n        this.renderer = new VF.Renderer(this.canvas, this.getVexflowBackendType());\n        this.ctx = <VF.SVGContext>this.renderer.getContext();\n        this.ctx.svg.id = \"osmdSvgPage\" + this.graphicalMusicPage.PageNumber;\n    }\n\n    public getContext(): VF.SVGContext {\n        return this.ctx;\n    }\n\n    public getSvgElement(): SVGElement {\n        return this.ctx.svg;\n    }\n\n    removeNode(node: Node): boolean {\n        const svg: SVGElement = this.ctx?.svg;\n        if (!svg) {\n            return false;\n        }\n        // unfortunately there's no method svg.hasChild(node). traversing all nodes seems inefficient.\n        try {\n            svg.removeChild(node);\n        } catch (ex) {\n            // log.error(\"SvgVexFlowBackend.removeNode: error:\"); // unnecessary, stacktrace is in exception\n            log.error(ex);\n            return false;\n        }\n        return true;\n    }\n\n    public clear(): void {\n        if (!this.ctx) {\n            return;\n        }\n        //const { svg } = this.ctx; // seems to make svg static between osmd instances.\n        const svg: SVGElement = this.ctx.svg;\n        // removes all children from the SVG element,\n        // effectively clearing the SVG viewport\n        while (svg.lastChild) {\n            svg.removeChild(svg.lastChild);\n        }\n\n        // set background color if not transparent\n        if (this.rules.PageBackgroundColor) {\n        //     this.ctx.save();\n        //     // note that this will hide the cursor if its zIndex is negative.\n        //     this.ctx.setFillStyle(this.rules.PageBackgroundColor);\n        //     this.ctx.setStrokeStyle(\"#12345600\"); // transparent\n\n        //     this.ctx.fillRect(0, 0, this.canvas.offsetWidth / this.zoom, this.canvas.offsetHeight / this.zoom);\n        //     this.ctx.restore();\n            this.ctx.svg.style[\"background-color\"] = this.rules.PageBackgroundColor;\n            // note that the cursor would be invisible if its zIndex remained negative here,\n            //   so we have to push it to a higher layer and make it more transparent.\n            // effectively, setting a background color will make the cursor more transparent.\n        }\n    }\n\n    public scale(k: number): void {\n        this.ctx.scale(k, k);\n    }\n\n    public translate(x: number, y: number): void {\n        // TODO: implement this\n    }\n    public renderText(fontHeight: number, fontStyle: FontStyles, font: Fonts, text: string,\n                      heightInPixel: number, screenPosition: PointF2D,\n                      color: string = undefined, fontFamily: string = undefined): Node {\n        this.ctx.save();\n        const node: Node = this.ctx.openGroup(\"text\");\n\n        if (color) {\n            this.ctx.attributes.fill = color;\n            this.ctx.attributes.stroke = color;\n        }\n        let fontFamilyVexFlow: string = fontFamily;\n        if (!fontFamily || fontFamily === \"default\") {\n            fontFamilyVexFlow = this.rules.DefaultFontFamily;\n        }\n        this.ctx.setFont(fontFamilyVexFlow, fontHeight, VexFlowConverter.fontStyle(fontStyle));\n        // font size is set by VexFlow in `pt`. This overwrites the font so it's set to px instead\n        this.ctx.attributes[\"font-size\"] = `${fontHeight}px`;\n        this.ctx.state[\"font-size\"] = `${fontHeight}px`;\n        let fontWeightVexflow: string = \"normal\";\n        let fontStyleVexflow: string = \"normal\";\n        switch (fontStyle) {\n            case FontStyles.Bold:\n                fontWeightVexflow = \"bold\";\n                break;\n            case FontStyles.Italic:\n                fontStyleVexflow = \"italic\";\n                break;\n            case FontStyles.BoldItalic:\n                fontWeightVexflow = \"bold\";\n                fontStyleVexflow = \"italic\";\n                break;\n            default:\n                fontWeightVexflow = \"normal\";\n        }\n        this.ctx.attributes[\"font-weight\"] = fontWeightVexflow;\n        this.ctx.state[\"font-weight\"] = fontWeightVexflow;\n        this.ctx.attributes[\"font-style\"] = fontStyleVexflow;\n        this.ctx.state[\"font-style\"] = fontStyleVexflow;\n        this.ctx.fillText(text, screenPosition.x, screenPosition.y + heightInPixel);\n        this.ctx.closeGroup();\n        this.ctx.restore();\n        return node;\n    }\n    public renderRectangle(rectangle: RectangleF2D, styleId: number, colorHex: string, alpha: number = 1): Node {\n        this.ctx.save();\n        const node: Node = this.ctx.openGroup(\"rect\");\n        if (colorHex) {\n            this.ctx.attributes.fill = colorHex;\n        } else {\n            this.ctx.attributes.fill = VexFlowConverter.style(styleId);\n        }\n        this.ctx.attributes[\"fill-opacity\"] = alpha;\n        this.ctx.fillRect(rectangle.x, rectangle.y, rectangle.width, rectangle.height);\n        this.ctx.restore();\n        this.ctx.attributes[\"fill-opacity\"] = 1;\n        this.ctx.closeGroup();\n        return node;\n    }\n\n    public renderLine(start: PointF2D, stop: PointF2D, color: string = \"#FF0000FF\", lineWidth: number = 2): Node {\n        this.ctx.save();\n        const node: Node = this.ctx.openGroup(\"line\");\n        this.ctx.beginPath();\n        this.ctx.moveTo(start.x, start.y);\n        this.ctx.lineTo(stop.x, stop.y);\n\n        this.ctx.attributes.stroke = color;\n        //this.ctx.attributes.strokeStyle = color;\n        //this.ctx.attributes[\"font-weight\"] = \"bold\";\n        //this.ctx.attributes[\"stroke-linecap\"] = \"round\";\n\n        this.ctx.lineWidth = lineWidth;\n\n        this.ctx.stroke();\n        this.ctx.closeGroup();\n        this.ctx.restore();\n        return node;\n    }\n\n    public renderCurve(points: PointF2D[]): Node {\n        const node: Node = this.ctx.openGroup(\"curve\");\n        this.ctx.beginPath();\n        this.ctx.moveTo(points[0].x, points[0].y);\n        this.ctx.bezierCurveTo(\n            points[1].x,\n            points[1].y,\n            points[2].x,\n            points[2].y,\n            points[3].x,\n            points[3].y\n            );\n        this.ctx.lineTo(points[7].x, points[7].y);\n        this.ctx.bezierCurveTo(\n            points[6].x,\n            points[6].y,\n            points[5].x,\n            points[5].y,\n            points[4].x,\n            points[4].y\n            );\n        this.ctx.lineTo(points[0].x, points[0].y);\n        //this.ctx.stroke();\n        this.ctx.closePath();\n        this.ctx.fill();\n        this.ctx.closeGroup();\n        return node;\n    }\n\n    public export(): void {\n        // See: https://stackoverflow.com/questions/38477972/javascript-save-svg-element-to-file-on-disk\n\n        // first create a clone of our svg node so we don't mess the original one\n        const clone: SVGElement = (this.ctx.svg.cloneNode(true) as SVGElement);\n\n        // create a doctype that is SVG\n        const svgDocType: DocumentType = document.implementation.createDocumentType(\n            \"svg\",\n            \"-//W3C//DTD SVG 1.1//EN\",\n            \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\"\n        );\n        // Create a new svg document\n        const svgDoc: Document = document.implementation.createDocument(\"http://www.w3.org/2000/svg\", \"svg\", svgDocType);\n        // replace the documentElement with our clone\n        svgDoc.replaceChild(clone, svgDoc.documentElement);\n\n        // get the data\n        const svgData: string = (new XMLSerializer()).serializeToString(svgDoc);\n\n        // now you've got your svg data, the following will depend on how you want to download it\n        // e.g yo could make a Blob of it for FileSaver.js\n        /*\n        var blob = new Blob([svgData.replace(/></g, '>\\n\\r<')]);\n        saveAs(blob, 'myAwesomeSVG.svg');\n        */\n        // here I'll just make a simple a with download attribute\n\n        const a: HTMLAnchorElement = document.createElement(\"a\");\n        a.href = \"data:image/svg+xml; charset=utf8, \" + encodeURIComponent(svgData.replace(/></g, \">\\n\\r<\"));\n        a.download = \"opensheetmusicdisplay_download.svg\";\n        a.innerHTML = window.location.href + \"/download\";\n        document.body.appendChild(a);\n      }\n}\n","import Vex from \"vexflow\";\nimport VF = Vex.Flow;\nimport {FontStyles} from \"../../../Common/Enums/FontStyles\";\nimport {Fonts} from \"../../../Common/Enums/Fonts\";\nimport {RectangleF2D} from \"../../../Common/DataObjects/RectangleF2D\";\nimport {PointF2D} from \"../../../Common/DataObjects/PointF2D\";\nimport {BackendType} from \"../../../OpenSheetMusicDisplay/OSMDOptions\";\nimport {GraphicalMusicPage} from \"../GraphicalMusicPage\";\nimport {EngravingRules} from \"../EngravingRules\";\n\nexport class VexFlowBackends {\n  public static CANVAS: 0;\n  public static RAPHAEL: 1; // this is currently unused in OSMD, and outdated in Vexflow.\n  // maybe SVG should be 1? but this could be a breaking change if people use numbers (2) instead of names (.SVG).\n  public static SVG: 2;\n  public static VML: 3; // this is currently unused in OSMD, and outdated in Vexflow\n\n}\n\nexport abstract class VexFlowBackend {\n\n  /** The GraphicalMusicPage the backend is drawing from. Each backend only renders one GraphicalMusicPage, to which the coordinates are relative. */\n  public graphicalMusicPage: GraphicalMusicPage;\n  protected rules: EngravingRules;\n  public width: number; // read-only\n  public height: number; // read-only\n\n  public abstract initialize(container: HTMLElement, zoom: number): void;\n\n  public getInnerElement(): HTMLElement {\n    return this.inner;\n  }\n\n  public getCanvas(): HTMLElement {\n    return this.canvas;\n  }\n\n  public abstract getCanvasSize(): number;\n\n  public getRenderElement(): HTMLElement {\n    //console.log(\"backend type: \" + this.getVexflowBackendType());\n    let renderingHtmlElement: HTMLElement = this.canvas; // for SVGBackend\n    if (this.getVexflowBackendType() === VF.Renderer.Backends.CANVAS) {\n      renderingHtmlElement = this.inner;\n      // usage in removeFromContainer:\n      // for SVG, this.canvas === this.inner, but for Canvas, removing this.canvas causes an error because it's not a child of container,\n      // so we have to remove this.inner instead.\n    }\n    return renderingHtmlElement;\n  }\n\n  public getRenderer(): VF.Renderer {\n    return this.renderer;\n  }\n\n  public removeAllChildrenFromContainer(container: HTMLElement): void {\n    while (container.children.length !== 0) {\n      container.removeChild(container.children.item(0));\n    }\n  }\n\n  // note: removing single children to remove all is error-prone, because sometimes a random SVG-child remains.\n  public removeFromContainer(container: HTMLElement): void {\n    const htmlElementToRemove: HTMLElement = this.getRenderElement();\n\n    // only remove child if the container has this child, otherwise it will throw an error.\n    for (let i: number = 0; i < container.children.length; i++) {\n      if (container.children.item(i) === htmlElementToRemove) {\n        container.removeChild(htmlElementToRemove);\n        break;\n      }\n    }\n    // there is unfortunately no built-in container.hasChild(child) method.\n  }\n\npublic abstract getContext(): Vex.IRenderContext;\n\n  // public abstract setWidth(width: number): void;\n  // public abstract setHeight(height: number): void;\n\n  public abstract scale(k: number): void;\n\n  public resize(width: number, height: number): void {\n    this.renderer.resize(width, height);\n    this.width = width;\n    this.height = height;\n  }\n\n  public abstract clear(): void;\n\n  public abstract translate(x: number, y: number): void;\n  public abstract renderText(fontHeight: number, fontStyle: FontStyles, font: Fonts, text: string,\n                             heightInPixel: number, screenPosition: PointF2D,\n                             color?: string, fontFamily?: string): Node;\n  /**\n   * Renders a rectangle with the given style to the screen.\n   * It is given in screen coordinates.\n   * @param rectangle the rect in screen coordinates\n   * @param layer is the current rendering layer. There are many layers on top of each other to which can be rendered. Not needed for now.\n   * @param styleId the style id\n   * @param alpha alpha value between 0 and 1\n   */\n  public abstract renderRectangle(rectangle: RectangleF2D, styleId: number, colorHex: string, alpha: number): Node;\n\n  public abstract renderLine(start: PointF2D, stop: PointF2D, color: string, lineWidth: number): Node;\n\n  public abstract renderCurve(points: PointF2D[]): Node;\n\n  public abstract getVexflowBackendType(): VF.Renderer.Backends;\n\n  /** The general type of backend: Canvas or SVG.\n   * This is not used for now (only VexflowBackendType used), but it may be useful when we don't want to use a Vexflow class.\n   */\n  public abstract getOSMDBackendType(): BackendType;\n\n  protected renderer: VF.Renderer;\n  protected inner: HTMLElement;\n  protected canvas: HTMLElement;\n}\n","import { GraphicalContinuousDynamicExpression } from \"../GraphicalContinuousDynamicExpression\";\nimport { ContinuousDynamicExpression } from \"../../VoiceData/Expressions/ContinuousExpressions/ContinuousDynamicExpression\";\nimport { StaffLine } from \"../StaffLine\";\nimport { GraphicalLabel } from \"../GraphicalLabel\";\nimport { Label } from \"../../Label\";\nimport { TextAlignmentEnum } from \"../../../Common/Enums/TextAlignment\";\nimport { FontStyles } from \"../../../Common/Enums/FontStyles\";\nimport { SourceMeasure } from \"../../VoiceData/SourceMeasure\";\n\n/**\n * This class extends the GraphicalContinuousDynamicExpression and creates all necessary methods for drawing\n */\nexport class VexFlowContinuousDynamicExpression extends GraphicalContinuousDynamicExpression {\n    constructor(continuousDynamic: ContinuousDynamicExpression, staffLine: StaffLine,\n                measure: SourceMeasure, textHeight?: number) {\n        super(continuousDynamic, staffLine, measure);\n        if (this.IsVerbal) {\n            const sourceLabel: Label = new Label(continuousDynamic.Label);\n            this.label = new GraphicalLabel(sourceLabel,\n                                            textHeight ? textHeight : this.rules.ContinuousDynamicTextHeight,\n                                            TextAlignmentEnum.LeftCenter,\n                                            this.rules,\n                                            this.PositionAndShape);\n\n            this.label.Label.fontStyle = FontStyles.Italic;\n            this.label.setLabelPositionAndShapeBorders();\n            this.PositionAndShape.calculateBoundingBox();\n        }\n    }\n}\n","import Vex from \"vexflow\";\nimport VF = Vex.Flow;\nimport {ClefEnum} from \"../../VoiceData/Instructions/ClefInstruction\";\nimport {ClefInstruction} from \"../../VoiceData/Instructions/ClefInstruction\";\nimport {Pitch} from \"../../../Common/DataObjects/Pitch\";\nimport {Fraction} from \"../../../Common/DataObjects/Fraction\";\nimport {RhythmInstruction} from \"../../VoiceData/Instructions/RhythmInstruction\";\nimport {RhythmSymbolEnum} from \"../../VoiceData/Instructions/RhythmInstruction\";\nimport {KeyInstruction} from \"../../VoiceData/Instructions/KeyInstruction\";\nimport {KeyEnum} from \"../../VoiceData/Instructions/KeyInstruction\";\nimport {AccidentalEnum} from \"../../../Common/DataObjects/Pitch\";\nimport {NoteEnum} from \"../../../Common/DataObjects/Pitch\";\nimport {VexFlowGraphicalNote} from \"./VexFlowGraphicalNote\";\nimport {GraphicalNote} from \"../GraphicalNote\";\nimport {SystemLinesEnum} from \"../SystemLinesEnum\";\nimport {FontStyles} from \"../../../Common/Enums/FontStyles\";\nimport {Fonts} from \"../../../Common/Enums/Fonts\";\nimport {OutlineAndFillStyleEnum, OUTLINE_AND_FILL_STYLE_DICT} from \"../DrawingEnums\";\nimport log from \"loglevel\";\nimport { ArticulationEnum, StemDirectionType, VoiceEntry } from \"../../VoiceData/VoiceEntry\";\nimport { SystemLinePosition } from \"../SystemLinePosition\";\nimport { GraphicalVoiceEntry } from \"../GraphicalVoiceEntry\";\nimport { OrnamentEnum, OrnamentContainer } from \"../../VoiceData/OrnamentContainer\";\nimport { Notehead, NoteHeadShape } from \"../../VoiceData/Notehead\";\nimport { unitInPixels } from \"./VexFlowMusicSheetDrawer\";\nimport { EngravingRules } from \"../EngravingRules\";\nimport { Note } from \"../../../MusicalScore/VoiceData/Note\";\nimport StaveNote = VF.StaveNote;\nimport { ArpeggioType } from \"../../VoiceData/Arpeggio\";\nimport { TabNote } from \"../../VoiceData/TabNote\";\nimport { PlacementEnum } from \"../../VoiceData/Expressions/AbstractExpression\";\nimport { GraphicalStaffEntry } from \"../GraphicalStaffEntry\";\nimport { Articulation } from \"../../VoiceData/Articulation\";\n\n/**\n * Helper class, which contains static methods which actually convert\n * from OSMD objects to VexFlow objects.\n */\nexport class VexFlowConverter {\n    /**\n     * Mapping from numbers of alterations on the key signature to major keys\n     * @type {[alterationsNo: number]: string; }\n     */\n    private static majorMap: {[_: number]: string } = {\n        \"-1\": \"F\", \"-2\": \"Bb\", \"-3\": \"Eb\", \"-4\": \"Ab\", \"-5\": \"Db\", \"-6\": \"Gb\", \"-7\": \"Cb\", \"-8\": \"Fb\",\n        \"0\": \"C\", \"1\": \"G\", \"2\": \"D\", \"3\": \"A\", \"4\": \"E\", \"5\": \"B\", \"6\": \"F#\", \"7\": \"C#\", \"8\": \"G#\"\n    };\n    /**\n     * Mapping from numbers of alterations on the key signature to minor keys\n     * @type {[alterationsNo: number]: string; }\n     */\n    private static minorMap: {[_: number]: string } = {\n        \"-1\": \"D\", \"-2\": \"G\", \"-3\": \"C\", \"-4\": \"F\", \"-5\": \"Bb\", \"-6\": \"Eb\", \"-7\": \"Ab\", \"-8\": \"Db\",\n        \"0\": \"A\", \"1\": \"E\", \"2\": \"B\", \"3\": \"F#\", \"4\": \"C#\", \"5\": \"G#\", \"6\": \"D#\", \"7\": \"A#\", \"8\": \"E#\"\n    };\n\n    /**\n     * Convert a fraction to Vexflow string durations.\n     * A duration like 5/16 (5 16th notes) can't be represented by a single (dotted) note,\n     *   so we need to return multiple durations (e.g. for 5/16th ghost notes).\n     * Currently, for a dotted quarter ghost note, we return a quarter and an eighth ghost note.\n     *   We could return a dotted quarter instead, but then the code would need to distinguish between\n     *   notes that can be represented as dotted notes and notes that can't, which would complicate things.\n     *   We could e.g. add a parameter \"allowSingleDottedNote\" which makes it possible to return single dotted notes instead.\n     * But currently, this is only really used for Ghost notes, so it doesn't make a difference visually.\n     *   (for other uses like StaveNotes, we calculate the dots separately)\n     * @param fraction a fraction representing the duration of a note\n     * @returns {string[]} Vexflow note type strings (e.g. \"h\" = half note)\n     */\n    public static durations(fraction: Fraction, isTuplet: boolean): string[] {\n        const durations: string[] = [];\n        const remainingFraction: Fraction = fraction.clone();\n        while (remainingFraction.RealValue > 0) {\n            const dur: number = remainingFraction.RealValue;\n            // TODO consider long (dur=4) and maxima (dur=8), though Vexflow doesn't seem to support them\n            if (dur >= 2) { // Breve\n                durations.push(\"1/2\");\n                remainingFraction.Sub(new Fraction(2, 1));\n            } else if (dur >= 1) {\n                durations.push(\"w\");\n                remainingFraction.Sub(new Fraction(1, 1));\n            } else if (dur < 1 && dur >= 0.5) {\n                // change to the next higher straight note to get the correct note display type\n                if (isTuplet && dur > 0.5) {\n                    return [\"w\"];\n                } else {\n                    durations.push(\"h\");\n                    remainingFraction.Sub(new Fraction(1, 2));\n                }\n            } else if (dur < 0.5 && dur >= 0.25) {\n                // change to the next higher straight note to get the correct note display type\n                if (isTuplet && dur > 0.25) {\n                    return [\"h\"];\n                } else {\n                    durations.push(\"q\");\n                    remainingFraction.Sub(new Fraction(1, 4));\n                }\n            } else if (dur < 0.25 && dur >= 0.125) {\n                // change to the next higher straight note to get the correct note display type\n                if (isTuplet && dur > 0.125) {\n                    return [\"q\"];\n                } else {\n                    durations.push(\"8\");\n                    remainingFraction.Sub(new Fraction(1, 8));\n                }\n            } else if (dur < 0.125 && dur >= 0.0625) {\n                // change to the next higher straight note to get the correct note display type\n                if (isTuplet && dur > 0.0625) {\n                    return [\"8\"];\n                } else {\n                    durations.push(\"16\");\n                    remainingFraction.Sub(new Fraction(1, 16));\n                }\n            } else if (dur < 0.0625 && dur >= 0.03125) {\n                // change to the next higher straight note to get the correct note display type\n                if (isTuplet && dur > 0.03125) {\n                    return [\"16\"];\n                } else {\n                    durations.push(\"32\");\n                    remainingFraction.Sub(new Fraction(1, 32));\n                }\n            } else if (dur < 0.03125 && dur >= 0.015625) {\n                // change to the next higher straight note to get the correct note display type\n                if (isTuplet && dur > 0.015625) {\n                    return [\"32\"];\n                } else {\n                    durations.push(\"64\");\n                    remainingFraction.Sub(new Fraction(1, 64));\n                }\n            } else {\n                if (isTuplet) {\n                    return [\"64\"];\n                } else {\n                    durations.push(\"128\");\n                    remainingFraction.Sub(new Fraction(1, 128));\n                }\n            }\n        }\n        //   if (isTuplet) {\n        //     dots = 0; // TODO (different) calculation?\n        //   } else {\n        //     dots = fraction.calculateNumberOfNeededDots();\n        //   }\n        return durations;\n    }\n\n    /**\n     * Takes a Pitch and returns a string representing a VexFlow pitch,\n     * which has the form \"b/4\", plus its alteration (accidental)\n     * @param pitch\n     * @returns {string[]}\n     */\n    public static pitch(pitch: Pitch, isRest: boolean, clef: ClefInstruction,\n                        notehead: Notehead = undefined, octaveOffsetGiven: number = undefined): [string, string, ClefInstruction] {\n        //FIXME: The octave seems to need a shift of three?\n        //FIXME: Also rests seem to use different offsets depending on the clef.\n        let octaveOffset: number = octaveOffsetGiven;\n        if (octaveOffsetGiven === undefined) {\n            octaveOffset = 3;\n        }\n        if (isRest && octaveOffsetGiven === undefined) {\n            octaveOffset = 0;\n            if (clef.ClefType === ClefEnum.F) {\n                octaveOffset = 2;\n            }\n            if (clef.ClefType === ClefEnum.C) {\n                octaveOffset = 2;\n            }\n            // TODO the pitch for rests will be the start position, for eights rests it will be the bottom point\n            // maybe we want to center on the display position instead of having the bottom there?\n        }\n        const fund: string = NoteEnum[pitch.FundamentalNote].toLowerCase();\n        const acc: string = Pitch.accidentalVexflow(pitch.Accidental);\n        const octave: number = pitch.Octave - clef.OctaveOffset + octaveOffset;\n        let noteheadCode: string = \"\";\n        if (notehead) {\n            noteheadCode = this.NoteHeadCode(notehead);\n        }\n        return [fund + \"n/\" + octave + noteheadCode, acc, clef];\n    }\n\n    public static restToNotePitch(pitch: Pitch, clefType: ClefEnum): Pitch {\n        let octave: number = pitch.Octave;\n        // offsets see pitch()\n        switch (clefType) {\n            case ClefEnum.C:\n            case ClefEnum.F: {\n                octave += 2;\n                break;\n            }\n            case ClefEnum.G:\n            default:\n        }\n\n        return new Pitch(pitch.FundamentalNote, octave, AccidentalEnum.NONE);\n    }\n\n    /** returns the Vexflow code for a note head. Some are still unsupported, see Vexflow/tables.js */\n    public static NoteHeadCode(notehead: Notehead): string {\n        const codeStart: string = \"/\";\n        const codeFilled: string = notehead.Filled ? \"2\" : \"1\"; // filled/unfilled notehead code in most vexflow glyphs\n        switch (notehead.Shape) {\n            case NoteHeadShape.NORMAL:\n                return \"\";\n            case NoteHeadShape.DIAMOND:\n                return codeStart + \"D\" + codeFilled;\n            case NoteHeadShape.TRIANGLE:\n                return codeStart + \"T\" + codeFilled;\n            case NoteHeadShape.X:\n                return codeStart + \"X\" + codeFilled;\n            case NoteHeadShape.CIRCLEX:\n                return codeStart + \"X3\";\n            case NoteHeadShape.RECTANGLE:\n                return codeStart + \"R\" + codeFilled;\n            case NoteHeadShape.SQUARE:\n                return codeStart + \"S\" + codeFilled;\n            case NoteHeadShape.SLASH:\n                return \"\"; // slash is specified at end of duration string in Vexflow\n            default:\n                return \"\";\n        }\n    }\n\n    public static GhostNotes(frac: Fraction): VF.GhostNote[] {\n        const ghostNotes: VF.GhostNote[] = [];\n        const durations: string[] = VexFlowConverter.durations(frac, false);\n        for (const duration of durations) {\n            ghostNotes.push(new VF.GhostNote({\n                duration: duration,\n                //dots: dots\n            }));\n        }\n        return ghostNotes;\n    }\n\n    /**\n     * Convert a GraphicalVoiceEntry to a VexFlow StaveNote\n     * @param gve the GraphicalVoiceEntry which can hold a note or a chord on the staff belonging to one voice\n     * @returns {VF.StaveNote}\n     */\n    public static StaveNote(gve: GraphicalVoiceEntry): VF.StaveNote {\n        // if (gve.octaveShiftValue !== OctaveEnum.NONE) { // gves with accidentals in octave shift brackets can be unsorted\n        gve.sortForVexflow(); // also necessary for some other cases, see test_sorted_notes... sample\n        //   sort and reverse replace the array anyways, so we might as well directly sort them reversely for now.\n        //   otherwise we should copy the array, see the commented GraphicalVoiceEntry.sortedNotesCopyForVexflow()\n        //   another alternative: don't sort gve notes, instead collect and sort tickables in an array,\n        //     then iterate over the array by addTickable() in VexFlowMeasure.graphicalMeasureCreatedCalculations()\n        const notes: GraphicalNote[] = gve.notes;\n        // for (const note of gve.notes) { // debug\n        //     const pitch: Pitch = note.sourceNote.Pitch;\n        //     console.log('note: ' + pitch?.ToString() + ', halftone: ' + pitch?.getHalfTone());\n        // }\n        const rules: EngravingRules = gve.parentStaffEntry.parentMeasure.parentSourceMeasure.Rules;\n\n        const baseNote: GraphicalNote = notes[0];\n        let keys: string[] = [];\n        const accidentals: string[] = [];\n        const baseNoteLength: Fraction = baseNote.graphicalNoteLength;\n        const isTuplet: boolean = baseNote.sourceNote.NoteTuplet !== undefined;\n        let duration: string = VexFlowConverter.durations(baseNoteLength, isTuplet)[0];\n        if (baseNote.sourceNote.TypeLength !== undefined &&\n            baseNote.sourceNote.TypeLength !== baseNoteLength &&\n            baseNote.sourceNote.TypeLength.RealValue !== 0) {\n            duration = VexFlowConverter.durations(baseNote.sourceNote.TypeLength, isTuplet)[0];\n            baseNote.numberOfDots = baseNote.sourceNote.DotsXml;\n        }\n        let vfClefType: string = undefined;\n        let numDots: number = baseNote.numberOfDots;\n        let alignCenter: boolean = false;\n        let xShift: number = 0;\n        let slashNoteHead: boolean = false;\n        let isRest: boolean = false;\n        let restYPitch: Pitch;\n        for (const note of notes) {\n            if (numDots < note.numberOfDots) {\n                numDots = note.numberOfDots;\n            }\n\n            // if it is a rest:\n            if (note.sourceNote.isRest()) {\n                isRest = true;\n                if (note.sourceNote.Pitch) {\n                    const restVfPitch: [string, string, ClefInstruction] = (note as VexFlowGraphicalNote).vfpitch;\n                    keys = [restVfPitch[0]];\n                    break;\n                } else {\n                    keys = [\"b/4\"]; // default placement\n\n                    // pause rest encircled by two beamed notes: place rest just below previous note\n                    const pauseVoiceEntry: VoiceEntry = note.parentVoiceEntry?.parentVoiceEntry;\n                    if (pauseVoiceEntry) {\n                        const neighborGSEs: GraphicalStaffEntry[] = note.parentVoiceEntry?.parentStaffEntry.parentMeasure.staffEntries;\n                        let previousVoiceEntry: VoiceEntry, followingVoiceEntry: VoiceEntry;\n                        let pauseVEIndex: number = -1;\n                        for (let i: number = 0; i < neighborGSEs.length; i++) {\n                            if (neighborGSEs[i]?.graphicalVoiceEntries[0].parentVoiceEntry === pauseVoiceEntry) {\n                                pauseVEIndex = i;\n                                break;\n                            }\n                        }\n                        if (pauseVEIndex >= 1 && (neighborGSEs.length - 1) >= (pauseVEIndex + 1)) {\n                            previousVoiceEntry = neighborGSEs[pauseVEIndex - 1]?.graphicalVoiceEntries[0]?.parentVoiceEntry;\n                            followingVoiceEntry = neighborGSEs[pauseVEIndex + 1]?.graphicalVoiceEntries[0]?.parentVoiceEntry;\n                            if (previousVoiceEntry && followingVoiceEntry) {\n                                const previousNote: Note = previousVoiceEntry.Notes[0];\n                                const followingNote: Note = followingVoiceEntry.Notes[0];\n                                if (previousNote.NoteBeam?.Notes.includes(followingNote)) {\n                                    const previousNotePitch: Pitch = previousVoiceEntry.Notes.last().Pitch;\n                                    const clef: ClefInstruction = (note as VexFlowGraphicalNote).Clef();\n                                    const vfpitch: [string, string, ClefInstruction] = VexFlowConverter.pitch(\n                                        VexFlowConverter.restToNotePitch(previousNotePitch.getTransposedPitch(-2), clef.ClefType),\n                                        false, clef);\n                                    keys = [vfpitch[0]];\n                                }\n                            }\n                        }\n                    }\n                }\n                // TODO do collision checking, place rest e.g. either below staff (A3, for stem direction below voice) or above (C5)\n                // if it is a full measure rest:\n                //   (a whole rest note signifies a whole measure duration, unless the time signature is longer than 4 quarter notes, e.g. 6/4 or 3/2.\n                //   Note: this should not apply to most pickup measures, e.g. with an 8th pickup measure in a 3/4 time signature)\n                // const measureDuration: number = note.sourceNote.SourceMeasure.Duration.RealValue;\n                const isWholeMeasureRest: boolean =  baseNoteLength.RealValue === note.sourceNote.SourceMeasure.ActiveTimeSignature.RealValue;\n                if (isWholeMeasureRest) {\n                    keys = [\"d/5\"];\n                    duration = \"w\";\n                    numDots = 0;\n                    // If it's a whole rest we want it smack in the middle. Apparently there is still an issue in vexflow:\n                    // https://github.com/0xfe/vexflow/issues/579 The author reports that he needs to add some negative x shift\n                    // if the measure has no modifiers.\n                    alignCenter = true;\n                    xShift = rules.WholeRestXShiftVexflow * unitInPixels; // TODO find way to make dependent on the modifiers\n                    // affects VexFlowStaffEntry.calculateXPosition()\n                }\n                //If we have more than one visible voice entry, shift the rests so no collision occurs\n                if (note.sourceNote.ParentStaff.Voices.length > 1) {\n                    const staffGves: GraphicalVoiceEntry[] = note.parentVoiceEntry.parentStaffEntry.graphicalVoiceEntries;\n                    //Find all visible voice entries (don't want invisible rests/notes causing visible shift)\n                    const restVoiceId: number = note.parentVoiceEntry.parentVoiceEntry.ParentVoice.VoiceId;\n                    let maxHalftone: number;\n                    let linesShift: number;\n                    for (const staffGve of staffGves) {\n                        for (const gveNote of staffGve.notes) {\n                            if (gveNote === note || gveNote.sourceNote.isRest() || !gveNote.sourceNote.PrintObject) {\n                                continue;\n                            }\n                            // unfortunately, we don't have functional note bounding boxes at this point,\n                            //   so we have to infer the note positions and sizes manually.\n                            const wantedStemDirection: StemDirectionType = gveNote.parentVoiceEntry.parentVoiceEntry.WantedStemDirection;\n                            const isUpperVoiceRest: boolean = restVoiceId === 1 || restVoiceId === 5;\n                            const lineShiftDirection: number = isUpperVoiceRest ? 1 : -1; // voice 1: put rest above (-y). other voices: below\n                            const gveNotePitch: Pitch = gveNote.sourceNote.Pitch;\n                            const noteHalftone: number = gveNotePitch.getHalfTone();\n                            const newHigh: boolean = lineShiftDirection === 1 && noteHalftone > maxHalftone;\n                            const newLow: boolean = lineShiftDirection === -1 && noteHalftone < maxHalftone;\n                            if (!maxHalftone || newHigh || newLow) {\n                                maxHalftone = noteHalftone;\n                                linesShift = 0;\n                                // add stem length if necessary\n                                if (isUpperVoiceRest && wantedStemDirection === StemDirectionType.Up) {\n                                    linesShift += 7; // rest should be above notes with up stem\n                                } else if (!isUpperVoiceRest && wantedStemDirection === StemDirectionType.Down) {\n                                    linesShift += 7; // rest should be below notes with down stem\n                                } else if (isUpperVoiceRest) {\n                                    linesShift += 1;\n                                } else {\n                                    linesShift += 2;\n                                }\n                                if (!duration.includes(\"8\")) { // except for 8th rests, rests are middle-aligned in vexflow (?)\n                                    //linesShift += 3;\n                                    if (wantedStemDirection === StemDirectionType.Up && lineShiftDirection === -1) {\n                                        linesShift += 1; // quarter rests need a little more below upwards stems. over downwards stems it's fine.\n                                    }\n                                }\n                                if (gveNote.sourceNote.NoteBeam) {\n                                    linesShift += 1; // TODO this is of course rather a workaround, but the beams aren't completed yet here.\n                                    // instead, we could calculate how many lines are between the notes of the beam,\n                                    //   and which stem of which note is longer, so its rest needs that many lines more.\n                                    //   this is more of \"reverse engineering\" or rather \"advance engineering\" the graphical notes,\n                                    //   which are unfortunately not built/drawn yet here.\n                                }\n                                if (duration.includes(\"w\")) {\n                                    linesShift /= 2; // TODO maybe a different fix, whole notes may need another look\n                                }\n                                linesShift += (Math.ceil(rules.RestCollisionYPadding) * 0.5); // 0.5 is smallest unit\n                                linesShift *= lineShiftDirection;\n                                note.lineShift = linesShift;\n                            }\n                        }\n                    }\n                    if (maxHalftone > 0) {\n                        let octaveOffset: number = 3;\n                        const restClefInstruction: ClefInstruction = (note as VexFlowGraphicalNote).Clef();\n                        switch (restClefInstruction.ClefType) {\n                            case ClefEnum.F:\n                                octaveOffset = 5;\n                                break;\n                            case ClefEnum.C:\n                                octaveOffset = 4;\n                                // if (restClefInstruction.Line == 4) // tenor clef quarter rests can be off\n                                break;\n                            default:\n                                break;\n                        }\n                        restYPitch = Pitch.fromHalftone(maxHalftone);\n                        keys = [VexFlowConverter.pitch(restYPitch, true, restClefInstruction, undefined, octaveOffset)[0]];\n                    }\n                }\n                // vfClefType seems to be undefined for rest notes, but setting it seems to break rest positioning.\n                // if (!vfClefType) {\n                //     const clef = (note as VexFlowGraphicalNote).Clef();\n                //     const vexClef: any = VexFlowConverter.Clef(clef);\n                //     vfClefType = vexClef.type;\n                // }\n                break;\n            }\n\n            if (note.sourceNote.Notehead) {\n                if (note.sourceNote.Notehead.Shape === NoteHeadShape.SLASH) {\n                    slashNoteHead = true;\n                    // if we have slash heads and other heads in the voice entry, this will create the same head for all.\n                    // same problem with numDots. The slash case should be extremely rare though.\n                }\n            }\n\n            const pitch: [string, string, ClefInstruction] = (note as VexFlowGraphicalNote).vfpitch;\n            keys.push(pitch[0]);\n            accidentals.push(pitch[1]);\n            if (!vfClefType) {\n                const vfClef: {type: string, annotation: string} = VexFlowConverter.Clef(pitch[2]);\n                vfClefType = vfClef.type;\n            }\n        }\n\n        for (let i: number = 0, len: number = numDots; i < len; ++i) {\n            duration += \"d\";\n        }\n        if (slashNoteHead) {\n            duration += \"s\"; // we have to specify a slash note head like this in Vexflow\n        }\n        if (isRest) {\n            // \"r\" has to be put after the \"d\"s for rest notes.\n            duration += \"r\";\n        }\n\n        let vfnote: VF.StaveNote;\n        const vfnoteStruct: any = {\n            align_center: alignCenter,\n            auto_stem: true,\n            clef: vfClefType,\n            duration: duration,\n            keys: keys,\n            slash: gve.GraceSlash,\n        };\n\n        const firstNote: Note = gve.notes[0].sourceNote;\n        if (firstNote.IsCueNote) {\n            vfnoteStruct.glyph_font_scale = VF.DEFAULT_NOTATION_FONT_SCALE * VF.GraceNote.SCALE;\n            vfnoteStruct.stroke_px = VF.GraceNote.LEDGER_LINE_OFFSET;\n        }\n\n        if (gve.parentVoiceEntry.IsGrace || gve.notes[0].sourceNote.IsCueNote) {\n            vfnote = new VF.GraceNote(vfnoteStruct);\n        } else {\n            vfnote = new VF.StaveNote(vfnoteStruct);\n            (vfnote as any).stagger_same_whole_notes = rules.StaggerSameWholeNotes;\n            //   it would be nice to only save this once, not for every note, but has to be accessible in stavenote.js\n        }\n        const lineShift: number = gve.notes[0].lineShift;\n        if (lineShift !== 0) {\n            vfnote.getKeyProps()[0].line += lineShift;\n        }\n\n        // Annotate GraphicalNote with which line of the staff it appears on\n        vfnote.getKeyProps().forEach(({ line }, i) => gve.notes[i].staffLine = line);\n\n        if (rules.LedgerLineWidth || rules.LedgerLineStrokeStyle) {\n            // FIXME should probably use vfnote.setLedgerLineStyle. this doesn't seem to do anything.\n            // however, this is also set in VexFlowVoiceEntry.color() anyways.\n            if (!((vfnote as any).ledgerLineStyle)) {\n                (vfnote as any).ledgerLineStyle = {};\n            }\n            if (rules.LedgerLineWidth) {\n                (vfnote as any).ledgerLineStyle.lineWidth = rules.LedgerLineWidth;\n            }\n            if (rules.LedgerLineStrokeStyle) {\n                (vfnote as any).ledgerLineStyle.strokeStyle = rules.LedgerLineStrokeStyle;\n            }\n        }\n\n        if (rules.ColoringEnabled) {\n            const defaultColorStem: string = rules.DefaultColorStem;\n            let stemColor: string = gve.parentVoiceEntry.StemColor;\n            if (!stemColor && defaultColorStem) {\n                stemColor = defaultColorStem;\n            }\n            const stemStyle: Object = { fillStyle: stemColor, strokeStyle: stemColor };\n\n            if (stemColor) {\n                //gve.parentVoiceEntry.StemColor = stemColor; // this shouldn't be set by DefaultColorStem\n                vfnote.setStemStyle(stemStyle);\n                if (vfnote.flag && rules.ColorFlags) {\n                    vfnote.setFlagStyle(stemStyle);\n                }\n            }\n        }\n\n        vfnote.x_shift = xShift;\n\n        if (gve.parentVoiceEntry.IsGrace && gve.notes[0].sourceNote.NoteBeam) {\n            // Vexflow seems to have issues with wanted stem direction for beamed grace notes,\n            // when the stem is connected to a beamed main note (e.g. Haydn Concertante bar 57)\n            gve.parentVoiceEntry.WantedStemDirection = gve.notes[0].sourceNote.NoteBeam.Notes[0].ParentVoiceEntry.WantedStemDirection;\n        }\n        if (gve.parentVoiceEntry) {\n            const wantedStemDirection: StemDirectionType = gve.parentVoiceEntry.WantedStemDirection;\n            switch (wantedStemDirection) {\n                case(StemDirectionType.Up):\n                    vfnote.setStemDirection(VF.Stem.UP);\n                    gve.parentVoiceEntry.StemDirection = StemDirectionType.Up;\n                    break;\n                case (StemDirectionType.Down):\n                    vfnote.setStemDirection(VF.Stem.DOWN);\n                    gve.parentVoiceEntry.StemDirection = StemDirectionType.Down;\n                    break;\n                default:\n            }\n        }\n\n        // add accidentals\n        for (let i: number = 0, len: number = notes.length; i < len; i += 1) {\n            (notes[i] as VexFlowGraphicalNote).setIndex(vfnote, i);\n            if (accidentals[i]) {\n                if (accidentals[i] === \"###\") { // triple sharp\n                    vfnote.addAccidental(i, new VF.Accidental(\"##\"));\n                    vfnote.addAccidental(i, new VF.Accidental(\"#\"));\n                    continue;\n                } else if (accidentals[i] === \"bbs\") { // triple flat\n                    vfnote.addAccidental(i, new VF.Accidental(\"bb\"));\n                    vfnote.addAccidental(i, new VF.Accidental(\"b\"));\n                    continue;\n                }\n                vfnote.addAccidental(i, new VF.Accidental(accidentals[i])); // normal accidental\n            }\n\n            // add Tremolo strokes (only single note tremolos for now, Vexflow doesn't have beams for two-note tremolos yet)\n            const tremoloStrokes: number = notes[i].sourceNote.TremoloStrokes;\n            if (tremoloStrokes > 0) {\n                const tremolo: VF.Tremolo = new VF.Tremolo(tremoloStrokes);\n                (tremolo as any).extra_stroke_scale = rules.TremoloStrokeScale;\n                (tremolo as any).y_spacing_scale = rules.TremoloYSpacingScale;\n                vfnote.addModifier(i, tremolo);\n            }\n        }\n\n        // half note tremolo: set notehead to half note (Vexflow otherwise takes the notehead from duration) (Hack)\n        if (firstNote.Length.RealValue === 0.25 && firstNote.Notehead && firstNote.Notehead.Filled === false) {\n            const keyProps: Object[] = vfnote.getKeyProps();\n            for (let i: number = 0; i < keyProps.length; i++) {\n                (<any>keyProps[i]).code = \"v81\";\n            }\n        }\n\n        for (let i: number = 0, len: number = numDots; i < len; ++i) {\n            vfnote.addDotToAll();\n        }\n        return vfnote;\n    }\n\n    public static generateArticulations(vfnote: VF.StemmableNote, articulations: Articulation[],\n                                        rules: EngravingRules): void {\n        if (!vfnote || vfnote.getAttribute(\"type\") === \"GhostNote\") {\n            return;\n        }\n\n        for (const articulation of articulations) {\n            let vfArtPosition: number = VF.Modifier.Position.ABOVE;\n\n            if (vfnote.getStemDirection() === VF.Stem.UP) {\n                vfArtPosition = VF.Modifier.Position.BELOW;\n            }\n            let vfArt: VF.Articulation = undefined;\n            const articulationEnum: ArticulationEnum = articulation.articulationEnum;\n            if (rules.ArticulationPlacementFromXML) {\n                if (articulation.placement === PlacementEnum.Above) {\n                    vfArtPosition = VF.Modifier.Position.ABOVE;\n                } else if (articulation.placement === PlacementEnum.Below) {\n                    vfArtPosition = VF.Modifier.Position.BELOW;\n                } // else if undefined: don't change\n            }\n            switch (articulationEnum) {\n                case ArticulationEnum.accent: {\n                    vfArt = new VF.Articulation(\"a>\");\n                    break;\n                }\n                case ArticulationEnum.downbow: {\n                    vfArt = new VF.Articulation(\"am\");\n                    if (articulation.placement === undefined) { // downbow/upbow should be above by default\n                        vfArtPosition = VF.Modifier.Position.ABOVE;\n                    }\n                    break;\n                }\n                case ArticulationEnum.fermata: {\n                    vfArt = new VF.Articulation(\"a@a\");\n                    vfArtPosition = VF.Modifier.Position.ABOVE;\n                    break;\n                }\n                case ArticulationEnum.marcatodown: {\n                    vfArt = new VF.Articulation(\"a|\"); // Vexflow only knows marcato up, so we use a down stroke here.\n                    break;\n                }\n                case ArticulationEnum.marcatoup: {\n                    vfArt = new VF.Articulation(\"a^\");\n                    break;\n                }\n                case ArticulationEnum.invertedfermata: {\n                    vfArt = new VF.Articulation(\"a@u\");\n                    vfArtPosition = VF.Modifier.Position.BELOW;\n                    break;\n                }\n                case ArticulationEnum.lefthandpizzicato: {\n                    vfArt = new VF.Articulation(\"a+\");\n                    break;\n                }\n                case ArticulationEnum.naturalharmonic: {\n                    vfArt = new VF.Articulation(\"ah\");\n                    break;\n                }\n                case ArticulationEnum.snappizzicato: {\n                    vfArt = new VF.Articulation(\"ao\");\n                    break;\n                }\n                case ArticulationEnum.staccatissimo: {\n                    vfArt = new VF.Articulation(\"av\");\n                    break;\n                }\n                case ArticulationEnum.staccato: {\n                    vfArt = new VF.Articulation(\"a.\");\n                    break;\n                }\n                case ArticulationEnum.tenuto: {\n                    vfArt = new VF.Articulation(\"a-\");\n                    break;\n                }\n                case ArticulationEnum.upbow: {\n                    vfArt = new VF.Articulation(\"a|\");\n                    if (articulation.placement === undefined) { // downbow/upbow should be above by default\n                        vfArtPosition = VF.Modifier.Position.ABOVE;\n                    }\n                    break;\n                }\n                case ArticulationEnum.strongaccent: {\n                    vfArt = new VF.Articulation(\"a^\");\n                    break;\n                }\n                default: {\n                    break;\n                }\n            }\n            if (vfArt) {\n                vfArt.setPosition(vfArtPosition);\n                (vfnote as StaveNote).addModifier(0, vfArt);\n            }\n        }\n    }\n\n    public static generateOrnaments(vfnote: VF.StemmableNote, oContainer: OrnamentContainer): void {\n        let vfPosition: number = VF.Modifier.Position.ABOVE;\n        if (oContainer.placement === PlacementEnum.Below) {\n            vfPosition = VF.Modifier.Position.BELOW;\n        }\n\n        let vfOrna: VF.Ornament = undefined;\n        switch (oContainer.GetOrnament) {\n            case OrnamentEnum.DelayedInvertedTurn: {\n                vfOrna = new VF.Ornament(\"turn_inverted\");\n                vfOrna.setDelayed(true);\n                break;\n            }\n            case OrnamentEnum.DelayedTurn: {\n                vfOrna = new VF.Ornament(\"turn\");\n                vfOrna.setDelayed(true);\n                break;\n            }\n            case OrnamentEnum.InvertedMordent: {\n                vfOrna = new VF.Ornament(\"mordent\"); // Vexflow uses baroque, not MusicXML definition\n                vfOrna.setDelayed(false);\n                break;\n            }\n            case OrnamentEnum.InvertedTurn: {\n                vfOrna = new VF.Ornament(\"turn_inverted\");\n                vfOrna.setDelayed(false);\n                break;\n            }\n            case OrnamentEnum.Mordent: {\n                vfOrna = new VF.Ornament(\"mordent_inverted\");\n                vfOrna.setDelayed(false);\n                break;\n            }\n            case OrnamentEnum.Trill: {\n                vfOrna = new VF.Ornament(\"tr\");\n                vfOrna.setDelayed(false);\n                break;\n            }\n            case OrnamentEnum.Turn: {\n                vfOrna = new VF.Ornament(\"turn\");\n                vfOrna.setDelayed(false);\n                break;\n            }\n            default: {\n                log.warn(\"unhandled OrnamentEnum type: \" + oContainer.GetOrnament);\n                return;\n            }\n        }\n        if (vfOrna) {\n            if (oContainer.AccidentalBelow !== AccidentalEnum.NONE) {\n                vfOrna.setLowerAccidental(Pitch.accidentalVexflow(oContainer.AccidentalBelow));\n            }\n            if (oContainer.AccidentalAbove !== AccidentalEnum.NONE) {\n                vfOrna.setUpperAccidental(Pitch.accidentalVexflow(oContainer.AccidentalAbove));\n            }\n            vfOrna.setPosition(vfPosition); // Vexflow draws it above right now in any case, never below\n            (vfnote as StaveNote).addModifier(0, vfOrna);\n        }\n    }\n\n    public static StrokeTypeFromArpeggioType(arpeggioType: ArpeggioType): VF.Stroke.Type {\n        switch (arpeggioType) {\n            case ArpeggioType.ARPEGGIO_DIRECTIONLESS:\n                return VF.Stroke.Type.ARPEGGIO_DIRECTIONLESS;\n            case ArpeggioType.BRUSH_DOWN:\n                return VF.Stroke.Type.BRUSH_UP; // TODO somehow up and down are mixed up in Vexflow right now\n            case ArpeggioType.BRUSH_UP:\n                return VF.Stroke.Type.BRUSH_DOWN; // TODO somehow up and down are mixed up in Vexflow right now\n            case ArpeggioType.RASQUEDO_DOWN:\n                return VF.Stroke.Type.RASQUEDO_UP;\n            case ArpeggioType.RASQUEDO_UP:\n                return VF.Stroke.Type.RASQUEDO_DOWN;\n            case ArpeggioType.ROLL_DOWN:\n                return VF.Stroke.Type.ROLL_UP; // TODO somehow up and down are mixed up in Vexflow right now\n            case ArpeggioType.ROLL_UP:\n                return VF.Stroke.Type.ROLL_DOWN; // TODO somehow up and down are mixed up in Vexflow right now\n            default:\n                return VF.Stroke.Type.ARPEGGIO_DIRECTIONLESS;\n        }\n    }\n\n    /**\n     * Convert a set of GraphicalNotes to a VexFlow StaveNote\n     * @param notes form a chord on the staff\n     * @returns {VF.StaveNote}\n     */\n    public static CreateTabNote(gve: GraphicalVoiceEntry): VF.TabNote {\n        const tabPositions: {str: number, fret: number}[] = [];\n        const notes: GraphicalNote[] = gve.notes.reverse();\n        const tabPhrases: { type: number, text: string, width: number }[] = [];\n        const frac: Fraction = gve.notes[0].graphicalNoteLength;\n        const isTuplet: boolean = gve.notes[0].sourceNote.NoteTuplet !== undefined;\n        let duration: string = VexFlowConverter.durations(frac, isTuplet)[0];\n        let numDots: number = 0;\n        let tabVibrato: boolean = false;\n        for (const note of gve.notes) {\n            const tabNote: TabNote = note.sourceNote as TabNote;\n            const tabPosition: {str: number, fret: number} = {str: tabNote.StringNumberTab, fret: tabNote.FretNumber};\n            tabPositions.push(tabPosition);\n            if (tabNote.BendArray) {\n                tabNote.BendArray.forEach( function( bend: {bendalter: number, direction: string} ): void {\n                    let phraseText: string;\n                    const phraseStep: number = bend.bendalter - tabPosition.fret;\n                    if (phraseStep > 1) {\n                        phraseText = \"Full\";\n                    } else if (phraseStep === 1) {\n                        phraseText = \"1/2\";\n                    } else {\n                        phraseText = \"1/4\";\n                    }\n                    if (bend.direction === \"up\") {\n                        tabPhrases.push({type: VF.Bend.UP, text: phraseText, width: 10});\n                    } else {\n                        tabPhrases.push({type: VF.Bend.DOWN, text: phraseText, width: 10});\n                    }\n                });\n            }\n\n            if (tabNote.VibratoStroke) {\n                tabVibrato = true;\n            }\n\n            if (numDots < note.numberOfDots) {\n                numDots = note.numberOfDots;\n            }\n        }\n        for (let i: number = 0, len: number = numDots; i < len; ++i) {\n            duration += \"d\";\n        }\n\n        const vfnote: VF.TabNote = new VF.TabNote({\n            duration: duration,\n            positions: tabPositions,\n        });\n\n        for (let i: number = 0, len: number = notes.length; i < len; i += 1) {\n            (notes[i] as VexFlowGraphicalNote).setIndex(vfnote, i);\n        }\n\n        tabPhrases.forEach(function(phrase: { type: number, text: string, width: number }): void {\n            if (phrase.type === VF.Bend.UP) {\n                vfnote.addModifier (new VF.Bend(phrase.text, false));\n            } else {\n                vfnote.addModifier (new VF.Bend(phrase.text, true));\n            }\n        });\n        if (tabVibrato) {\n            vfnote.addModifier(new VF.Vibrato());\n        }\n\n        return vfnote;\n    }\n\n    /**\n     * Convert a ClefInstruction to a string represention of a clef type in VexFlow.\n     *\n     * @param clef The OSMD object to be converted representing the clef\n     * @param size The VexFlow size to be used. Can be `default` or `small`.\n     * As soon as #118 is done, this parameter will be dispensable.\n     * @returns    A string representation of a VexFlow clef\n     * @see        https://github.com/0xfe/vexflow/blob/master/src/clef.js\n     * @see        https://github.com/0xfe/vexflow/blob/master/tests/clef_tests.js\n     */\n    public static Clef(clef: ClefInstruction, size: string = \"default\"): { type: string, size: string, annotation: string } {\n        let type: string;\n        let annotation: string;\n\n        // Make sure size is either \"default\" or \"small\"\n        if (size !== \"default\" && size !== \"small\") {\n            log.warn(`Invalid VexFlow clef size \"${size}\" specified. Using \"default\".`);\n            size = \"default\";\n        }\n\n        /*\n         * For all of the following conversions, OSMD uses line numbers 1-5 starting from\n         * the bottom, while VexFlow uses 0-4 starting from the top.\n         */\n        switch (clef.ClefType) {\n\n            // G Clef\n            case ClefEnum.G:\n                switch (clef.Line) {\n                    case 1:\n                        type = \"french\"; // VexFlow line 4\n                        break;\n                    case 2:\n                        type = \"treble\"; // VexFlow line 3\n                        break;\n                    default:\n                        type = \"treble\";\n                        log.error(`Clef ${ClefEnum[clef.ClefType]} on line ${clef.Line} not supported by VexFlow. Using default value \"${type}\".`);\n                }\n                break;\n\n            // F Clef\n            case ClefEnum.F:\n                switch (clef.Line) {\n                  case 4:\n                      type = \"bass\"; // VexFlow line 1\n                      break;\n                  case 3:\n                      type = \"baritone-f\"; // VexFlow line 2\n                      break;\n                  case 5:\n                      type = \"subbass\"; // VexFlow line 0\n                      break;\n                  default:\n                      type = \"bass\";\n                      log.error(`Clef ${ClefEnum[clef.ClefType]} on line ${clef.Line} not supported by VexFlow. Using default value \"${type}\".`);\n                }\n                break;\n\n            // C Clef\n            case ClefEnum.C:\n                switch (clef.Line) {\n                  case 3:\n                      type = \"alto\"; // VexFlow line 2\n                      break;\n                  case 4:\n                      type = \"tenor\"; // VexFlow line 1\n                      break;\n                  case 1:\n                      type = \"soprano\"; // VexFlow line 4\n                      break;\n                  case 2:\n                      type = \"mezzo-soprano\"; // VexFlow line 3\n                      break;\n                  default:\n                      type = \"alto\";\n                      log.error(`Clef ${ClefEnum[clef.ClefType]} on line ${clef.Line} not supported by VexFlow. Using default value \"${type}\".`);\n                }\n                break;\n\n            // Percussion Clef\n            case ClefEnum.percussion:\n                type = \"percussion\";\n                break;\n\n            // TAB Clef\n            case ClefEnum.TAB:\n                // only used currently for creating the notes in the normal stave: There we need a normal treble clef\n                type = \"treble\";\n                break;\n            default:\n                log.info(\"bad clef type: \" + clef.ClefType);\n                type = \"treble\";\n        }\n\n        // annotations in vexflow don't allow bass and 8va. No matter the offset :(\n        if (clef.OctaveOffset === 1 && type !== \"bass\" ) {\n            annotation = \"8va\";\n        } else if (clef.OctaveOffset === -1) {\n            annotation = \"8vb\";\n        }\n        return { type, size, annotation };\n    }\n\n    /**\n     * Convert a RhythmInstruction to a VexFlow TimeSignature object\n     * @param rhythm\n     * @returns {VF.TimeSignature}\n     * @constructor\n     */\n    public static TimeSignature(rhythm: RhythmInstruction): VF.TimeSignature {\n        let timeSpec: string;\n        switch (rhythm.SymbolEnum) {\n            case RhythmSymbolEnum.NONE:\n                timeSpec = rhythm.Rhythm.Numerator + \"/\" + rhythm.Rhythm.Denominator;\n                break;\n            case RhythmSymbolEnum.COMMON:\n                timeSpec = \"C\";\n                break;\n            case RhythmSymbolEnum.CUT:\n                timeSpec = \"C|\";\n                break;\n            default:\n        }\n        return new VF.TimeSignature(timeSpec);\n    }\n\n    /**\n     * Convert a KeyInstruction to a string representing in VexFlow a key\n     * @param key\n     * @returns {string}\n     */\n    public static keySignature(key: KeyInstruction): string {\n        if (!key) {\n            return undefined;\n        }\n        let ret: string;\n        switch (key.Mode) {\n            case KeyEnum.minor:\n                ret = VexFlowConverter.minorMap[key.Key] + \"m\";\n                break;\n            case KeyEnum.major:\n                ret = VexFlowConverter.majorMap[key.Key];\n                break;\n            // some XMLs don't have the mode set despite having a key signature.\n            case KeyEnum.none:\n                ret = VexFlowConverter.majorMap[key.Key];\n                break;\n            default:\n                ret = \"C\";\n        }\n        return ret;\n    }\n\n    /**\n     * Converts a lineType to a VexFlow StaveConnector type\n     * @param lineType\n     * @returns {any}\n     */\n    public static line(lineType: SystemLinesEnum, linePosition: SystemLinePosition): any {\n        switch (lineType) {\n            case SystemLinesEnum.SingleThin:\n                if (linePosition === SystemLinePosition.MeasureBegin) {\n                    return VF.StaveConnector.type.SINGLE;\n                }\n                return VF.StaveConnector.type.SINGLE_RIGHT;\n            case SystemLinesEnum.DoubleThin:\n                return VF.StaveConnector.type.THIN_DOUBLE;\n            case SystemLinesEnum.ThinBold:\n                return VF.StaveConnector.type.BOLD_DOUBLE_RIGHT;\n            case SystemLinesEnum.BoldThinDots:\n                return VF.StaveConnector.type.BOLD_DOUBLE_LEFT;\n            case SystemLinesEnum.DotsThinBold:\n                return VF.StaveConnector.type.BOLD_DOUBLE_RIGHT;\n            case SystemLinesEnum.DotsBoldBoldDots:\n                return VF.StaveConnector.type.BOLD_DOUBLE_RIGHT;\n            case SystemLinesEnum.None:\n                return VF.StaveConnector.type.NONE;\n            default:\n        }\n    }\n\n    /**\n     * Construct a string which can be used in a CSS font property\n     * @param fontSize\n     * @param fontStyle\n     * @param font\n     * @returns {string}\n     */\n    public static font(fontSize: number, fontStyle: FontStyles = FontStyles.Regular,\n                       font: Fonts = Fonts.TimesNewRoman, rules: EngravingRules, fontFamily: string = undefined): string {\n        let style: string = \"normal\";\n        let weight: string = \"normal\";\n        let family: string = `'${rules.DefaultFontFamily}'`; // default \"'Times New Roman'\"\n\n        switch (fontStyle) {\n            case FontStyles.Bold:\n                weight = \"bold\";\n                break;\n            case FontStyles.Italic:\n                style = \"italic\";\n                break;\n            case FontStyles.BoldItalic:\n                style = \"italic\";\n                weight = \"bold\";\n                break;\n            case FontStyles.Underlined:\n                // TODO\n                break;\n            default:\n                break;\n        }\n\n        switch (font) { // currently not used\n            case Fonts.Kokila:\n                // TODO Not Supported\n                break;\n            default:\n        }\n\n        if (fontFamily && fontFamily !== \"default\") {\n            family = `'${fontFamily}'`;\n        }\n\n        return style + \" \" + weight + \" \" + Math.floor(fontSize) + \"px \" + family;\n    }\n\n    /**\n     * Converts the style into a string that VexFlow RenderContext can understand\n     * as the weight of the font\n     */\n    public static fontStyle(style: FontStyles): string {\n        switch (style) {\n            case FontStyles.Bold:\n                return \"bold\";\n            case FontStyles.Italic:\n                return \"italic\";\n            case FontStyles.BoldItalic:\n                return \"italic bold\";\n            default:\n                return \"normal\";\n        }\n    }\n\n    /**\n     * Convert OutlineAndFillStyle to CSS properties\n     * @param styleId\n     * @returns {string}\n     */\n    public static style(styleId: OutlineAndFillStyleEnum): string {\n        const ret: string = OUTLINE_AND_FILL_STYLE_DICT.getValue(styleId);\n        return ret;\n    }\n}\n\n\n","import Vex from \"vexflow\";\nimport VF = Vex.Flow;\nimport {GraphicalNote} from \"../GraphicalNote\";\nimport {Note} from \"../../VoiceData/Note\";\nimport {ClefInstruction} from \"../../VoiceData/Instructions/ClefInstruction\";\nimport {VexFlowConverter} from \"./VexFlowConverter\";\nimport {Pitch} from \"../../../Common/DataObjects/Pitch\";\nimport {Fraction} from \"../../../Common/DataObjects/Fraction\";\nimport {OctaveEnum, OctaveShift} from \"../../VoiceData/Expressions/ContinuousExpressions/OctaveShift\";\nimport { GraphicalVoiceEntry } from \"../GraphicalVoiceEntry\";\nimport { KeyInstruction } from \"../../VoiceData/Instructions/KeyInstruction\";\nimport { EngravingRules } from \"../EngravingRules\";\n\n/**\n * The VexFlow version of a [[GraphicalNote]].\n */\nexport class VexFlowGraphicalNote extends GraphicalNote {\n    constructor(note: Note, parent: GraphicalVoiceEntry, activeClef: ClefInstruction,\n                octaveShift: OctaveEnum = OctaveEnum.NONE, rules: EngravingRules,\n                graphicalNoteLength: Fraction = undefined) {\n        super(note, parent, rules, graphicalNoteLength);\n        this.clef = activeClef;\n        this.octaveShift = octaveShift;\n        if (note.Pitch) {\n            // TODO: Maybe shift to Transpose function when available\n            const drawPitch: Pitch = note.isRest() ? note.Pitch : OctaveShift.getPitchFromOctaveShift(note.Pitch, octaveShift);\n            this.vfpitch = VexFlowConverter.pitch(drawPitch, note.isRest(), this.clef, this.sourceNote.Notehead);\n            this.vfpitch[1] = undefined;\n        }\n    }\n\n    public octaveShift: OctaveEnum;\n    // The pitch of this note as given by VexFlowConverter.pitch\n    public vfpitch: [string, string, ClefInstruction];\n    // The corresponding VexFlow StaveNote (plus its index in the chord)\n    public vfnote: [VF.StemmableNote, number];\n    public vfnoteIndex: number;\n    // The current clef\n    private clef: ClefInstruction;\n\n    /**\n     * Update the pitch of this note. Necessary in order to display accidentals correctly.\n     * This is called by VexFlowGraphicalSymbolFactory.addGraphicalAccidental.\n     * @param pitch\n     */\n    public setAccidental(pitch: Pitch): void {\n        // if (this.vfnote) {\n        //     let pitchAcc: AccidentalEnum = pitch.Accidental;\n        //     const acc: string = Pitch.accidentalVexflow(pitch.Accidental);\n        //     if (acc) {\n        //         alert(acc);\n        //         this.vfnote[0].addAccidental(this.vfnote[1], new VF.Accidental(acc));\n        //     }\n        // } else {\n        // revert octave shift, as the placement of the note is independent of octave brackets\n        const drawPitch: Pitch = this.drawPitch(pitch);\n        // recalculate the pitch, and this time don't ignore the accidental:\n        this.vfpitch = VexFlowConverter.pitch(drawPitch, this.sourceNote.isRest(), this.clef, this.sourceNote.Notehead);\n        this.DrawnAccidental = drawPitch.Accidental;\n        //}\n    }\n\n    public drawPitch(pitch: Pitch): Pitch {\n        return OctaveShift.getPitchFromOctaveShift(pitch, this.octaveShift);\n    }\n\n    public Transpose(keyInstruction: KeyInstruction, activeClef: ClefInstruction, halfTones: number, octaveEnum: OctaveEnum): Pitch {\n        const tranposedPitch: Pitch = super.Transpose(keyInstruction, activeClef, halfTones, octaveEnum);\n        const drawPitch: Pitch = OctaveShift.getPitchFromOctaveShift(tranposedPitch, this.octaveShift);\n        this.vfpitch = VexFlowConverter.pitch(drawPitch, this.sourceNote.isRest(), this.clef, this.sourceNote.Notehead);\n        this.vfpitch[1] = undefined;\n        return drawPitch;\n    }\n\n    /**\n     * Set the VexFlow StaveNote corresponding to this GraphicalNote, together with its index in the chord.\n     * @param note\n     * @param index\n     */\n    public setIndex(note: VF.StemmableNote, index: number): void {\n        this.vfnote = [note, index];\n        this.vfnoteIndex = index;\n    }\n\n    public notehead(vfNote: VF.StemmableNote = undefined): {line: number} {\n        let vfnote: any = vfNote;\n        if (!vfnote) {\n            vfnote = (this.vfnote[0] as any);\n        }\n        const noteheads: any = vfnote.note_heads;\n        if (noteheads && noteheads.length > this.vfnoteIndex && noteheads[this.vfnoteIndex]) {\n            return vfnote.note_heads[this.vfnoteIndex];\n        } else {\n            return { line: 0 };\n        }\n    }\n\n    /**\n     * Gets the clef for this note\n     */\n    public Clef(): ClefInstruction {\n        return this.clef;\n    }\n\n    /**\n     * Gets the id of the SVGGElement containing this note, given the SVGRenderer is used.\n     * This is for low-level rendering hacks and should be used with caution.\n     */\n    public getSVGId(): string {\n        if (!this.vfnote) {\n            return undefined; // e.g. MultiRestMeasure\n        }\n        return this.vfnote[0].getAttribute(\"id\");\n    }\n\n    /**\n     * Gets the SVGGElement containing this note, given the SVGRenderer is used.\n     * This is for low-level rendering hacks and should be used with caution.\n     */\n    public getSVGGElement(): SVGGElement {\n        if (!this.vfnote) {\n            return undefined; // e.g. MultiRestMeasure\n        }\n        return this.vfnote[0].getAttribute(\"el\");\n    }\n\n    /** Gets the SVG path element of the note's stem. */\n    public getStemSVG(): HTMLElement {\n        return document.getElementById(\"vf-\" + this.getSVGId() + \"-stem\");\n        // more correct, but Vex.Prefix() is not in the definitions:\n        //return document.getElementById((Vex as any).Prefix(this.getSVGId() + \"-stem\"));\n    }\n\n    /** Gets the SVG path elements of the beams starting on this note. */\n    public getBeamSVGs(): HTMLElement[] {\n        const beamSVGs: HTMLElement[] = [];\n        for (let i: number = 0;; i++) {\n            const newSVG: HTMLElement = document.getElementById(`vf-${this.getSVGId()}-beam${i}`);\n            if (!newSVG) {\n                break;\n            }\n            beamSVGs.push(newSVG);\n        }\n        return beamSVGs;\n    }\n}\n","import Vex from \"vexflow\";\nimport VF = Vex.Flow;\nimport {IGraphicalSymbolFactory} from \"../../Interfaces/IGraphicalSymbolFactory\";\nimport {MusicSystem} from \"../MusicSystem\";\nimport {VexFlowMusicSystem} from \"./VexFlowMusicSystem\";\nimport {Staff} from \"../../VoiceData/Staff\";\nimport {StaffLine} from \"../StaffLine\";\nimport {SourceMeasure} from \"../../VoiceData/SourceMeasure\";\nimport {GraphicalMeasure} from \"../GraphicalMeasure\";\nimport {VexFlowMeasure} from \"./VexFlowMeasure\";\nimport {SourceStaffEntry} from \"../../VoiceData/SourceStaffEntry\";\nimport {GraphicalStaffEntry} from \"../GraphicalStaffEntry\";\nimport {VexFlowStaffEntry} from \"./VexFlowStaffEntry\";\nimport {Note} from \"../../VoiceData/Note\";\nimport {ClefInstruction} from \"../../VoiceData/Instructions/ClefInstruction\";\nimport {OctaveEnum} from \"../../VoiceData/Expressions/ContinuousExpressions/OctaveShift\";\nimport {GraphicalNote} from \"../GraphicalNote\";\nimport {Pitch} from \"../../../Common/DataObjects/Pitch\";\nimport {VexFlowGraphicalNote} from \"./VexFlowGraphicalNote\";\nimport {Fraction} from \"../../../Common/DataObjects/Fraction\";\nimport {GraphicalChordSymbolContainer} from \"../GraphicalChordSymbolContainer\";\nimport {GraphicalLabel} from \"../GraphicalLabel\";\nimport {EngravingRules} from \"../EngravingRules\";\nimport { TechnicalInstruction } from \"../../VoiceData/Instructions/TechnicalInstruction\";\nimport { GraphicalVoiceEntry } from \"../GraphicalVoiceEntry\";\nimport { VoiceEntry } from \"../../VoiceData/VoiceEntry\";\nimport { VexFlowVoiceEntry } from \"./VexFlowVoiceEntry\";\nimport { VexFlowConverter } from \"./VexFlowConverter\";\nimport { VexFlowTabMeasure } from \"./VexFlowTabMeasure\";\nimport { VexFlowStaffLine } from \"./VexFlowStaffLine\";\nimport { KeyInstruction } from \"../../VoiceData/Instructions/KeyInstruction\";\nimport { VexFlowMultiRestMeasure } from \"./VexFlowMultiRestMeasure\";\n\nexport class VexFlowGraphicalSymbolFactory implements IGraphicalSymbolFactory {\n    /**\n     * Create a new music system for the given page.\n     * Currently only one vertically endless page exists where all systems are put to.\n     * @param page\n     * @param systemIndex\n     * @returns {VexFlowMusicSystem}\n     */\n    public createMusicSystem(systemIndex: number, rules: EngravingRules): MusicSystem {\n        return new VexFlowMusicSystem(systemIndex, rules);\n    }\n\n    /**\n     * Create a staffline object containing all staff measures belonging to a given system and staff.\n     * @param parentSystem\n     * @param parentStaff\n     * @returns {VexFlowStaffLine}\n     */\n    public createStaffLine(parentSystem: MusicSystem, parentStaff: Staff): StaffLine {\n        return new VexFlowStaffLine(parentSystem, parentStaff);\n    }\n\n    /**\n     * Construct an empty graphicalMeasure from the given source measure and staff.\n     * @param sourceMeasure\n     * @param staff\n     * @returns {VexFlowMeasure}\n     */\n    public createGraphicalMeasure(sourceMeasure: SourceMeasure, staff: Staff, isTabMeasure: boolean = false): GraphicalMeasure {\n        return new VexFlowMeasure(staff, sourceMeasure, undefined);\n    }\n\n    /**\n     * Construct a MultiRestMeasure from the given source measure and staff.\n     * @param sourceMeasure\n     * @param staff\n     * @returns {VexFlowMultiRestMeasure}\n     */\n    public createMultiRestMeasure(sourceMeasure: SourceMeasure, staff: Staff, staffLine?: StaffLine): GraphicalMeasure {\n        return new VexFlowMultiRestMeasure(staff, sourceMeasure, staffLine);\n    }\n\n    /**\n     * Construct an empty Tab staffMeasure from the given source measure and staff.\n     * @param sourceMeasure\n     * @param staff\n     * @returns {VexFlowTabMeasure}\n     */\n    public createTabStaffMeasure(sourceMeasure: SourceMeasure, staff: Staff): GraphicalMeasure {\n        return new VexFlowTabMeasure(staff, sourceMeasure);\n    }\n\n    /**\n     * Create empty measure, which will be used to show key, rhythm changes at the end of the system.\n     * @param staffLine\n     * @returns {VexFlowMeasure}\n     */\n    public createExtraGraphicalMeasure(staffLine: StaffLine): GraphicalMeasure {\n        const extraGraphicalMeasure: GraphicalMeasure = new VexFlowMeasure(staffLine.ParentStaff, undefined, staffLine);\n        extraGraphicalMeasure.IsExtraGraphicalMeasure = true; // this also means that MeasureNumber < 0 because unchanged\n        extraGraphicalMeasure.ExtraGraphicalMeasurePreviousMeasure = staffLine.Measures.last();\n        return extraGraphicalMeasure;\n    }\n\n    /**\n     * Create a staffEntry in the given measure for a given sourceStaffEntry.\n     * @param sourceStaffEntry\n     * @param measure\n     * @returns {VexFlowStaffEntry}\n     */\n    public createStaffEntry(sourceStaffEntry: SourceStaffEntry, measure: GraphicalMeasure): GraphicalStaffEntry {\n        return new VexFlowStaffEntry(<VexFlowMeasure>measure, sourceStaffEntry, undefined);\n    }\n\n    public createVoiceEntry(parentVoiceEntry: VoiceEntry, parentStaffEntry: GraphicalStaffEntry): GraphicalVoiceEntry {\n        return new VexFlowVoiceEntry(parentVoiceEntry, parentStaffEntry);\n    }\n\n    /**\n     * Create a Graphical Note for given note and clef and as part of graphicalStaffEntry.\n     * @param note\n     * @param numberOfDots  The number of dots the note has to increase its musical duration.\n     * @param graphicalStaffEntry\n     * @param activeClef    The currently active clef, needed for positioning the note vertically\n     * @param octaveShift   The currently active octave transposition enum, needed for positioning the note vertically\n     * @returns {GraphicalNote}\n     */\n    public createNote(note: Note, graphicalVoiceEntry: GraphicalVoiceEntry, activeClef: ClefInstruction,\n        octaveShift: OctaveEnum = OctaveEnum.NONE, rules: EngravingRules,\n        graphicalNoteLength: Fraction = undefined): GraphicalNote {\n        return new VexFlowGraphicalNote(note, graphicalVoiceEntry, activeClef, octaveShift, rules, graphicalNoteLength);\n    }\n\n    /**\n     * Create a Graphical Grace Note (smaller head, stem...) for given note and clef and as part of graphicalStaffEntry.\n     * @param note\n     * @param numberOfDots\n     * @param graphicalVoiceEntry\n     * @param activeClef\n     * @param octaveShift\n     * @returns {GraphicalNote}\n     */\n    public createGraceNote(note: Note, graphicalVoiceEntry: GraphicalVoiceEntry,\n                           activeClef: ClefInstruction, rules: EngravingRules,\n                           octaveShift: OctaveEnum = OctaveEnum.NONE): GraphicalNote {\n        return new VexFlowGraphicalNote(note, graphicalVoiceEntry, activeClef, octaveShift, rules);\n    }\n\n    /**\n     * Sets a pitch which will be used for rendering the given graphical note (not changing the original pitch of the note!!!).\n     * Will be only called if the displayed accidental is different from the original (e.g. a C# with C# as key instruction)\n     * @param graphicalNote\n     * @param pitch The pitch which will be rendered.\n     */\n    public addGraphicalAccidental(graphicalNote: GraphicalNote, pitch: Pitch): void {\n        const note: VexFlowGraphicalNote = (graphicalNote as VexFlowGraphicalNote);\n        // accidental is added in setPitch\n        note.setAccidental(pitch);\n    }\n\n    /**\n     * Adds a Fermata symbol at the last note of the given tied Note.\n     * The last graphical note of this tied note is located at the given graphicalStaffEntry.\n     * A Fermata has to be located at the last tied note.\n     * @param tiedNote\n     * @param graphicalStaffEntry\n     */\n    public addFermataAtTiedEndNote(tiedNote: Note, graphicalStaffEntry: GraphicalStaffEntry): void {\n        return;\n    }\n\n\n\n    /**\n     * Adds a clef change within a measure before the given staff entry.\n     * @param graphicalStaffEntry\n     * @param clefInstruction\n     */\n    public createInStaffClef(graphicalStaffEntry: GraphicalStaffEntry, clefInstruction: ClefInstruction): void {\n        const se: VexFlowStaffEntry = graphicalStaffEntry as VexFlowStaffEntry;\n        const vfClefParams: { type: string, size: string, annotation: string } = VexFlowConverter.Clef(clefInstruction, \"small\");\n        se.vfClefBefore = new VF.ClefNote(vfClefParams.type, vfClefParams.size, vfClefParams.annotation);\n        return;\n    }\n\n    /**\n     * Adds a chord symbol at the given staff entry\n     * @param sourceStaffEntry\n     * @param graphicalStaffEntry\n     * @param transposeHalftones\n     */\n    public createChordSymbols(  sourceStaffEntry: SourceStaffEntry,\n                                graphicalStaffEntry: GraphicalStaffEntry,\n                                keyInstruction: KeyInstruction,\n                                transposeHalftones: number): void {\n        const rules: EngravingRules = graphicalStaffEntry.parentMeasure.parentSourceMeasure.Rules;\n        let xShift: number = 0;\n        const chordSymbolSpacing: number = rules.ChordSymbolXSpacing;\n        for (const chordSymbolContainer of sourceStaffEntry.ChordContainers) {\n            const graphicalChordSymbolContainer: GraphicalChordSymbolContainer =\n              new GraphicalChordSymbolContainer(chordSymbolContainer,\n                                                graphicalStaffEntry.PositionAndShape,\n                                                rules.ChordSymbolTextHeight,\n                                                keyInstruction,\n                                                transposeHalftones,\n                                                graphicalStaffEntry.parentMeasure.parentSourceMeasure.Rules // TODO undefined sometimes\n                                                );\n            const graphicalLabel: GraphicalLabel = graphicalChordSymbolContainer.GraphicalLabel;\n            graphicalLabel.PositionAndShape.RelativePosition.y -= rules.ChordSymbolYOffset;\n            graphicalLabel.PositionAndShape.RelativePosition.x += xShift;\n            // TODO check for available space until next staffEntry or chord symbol (x direction)\n            graphicalLabel.setLabelPositionAndShapeBorders();\n            graphicalChordSymbolContainer.PositionAndShape.calculateBoundingBox();\n            graphicalStaffEntry.graphicalChordContainers.push(graphicalChordSymbolContainer);\n\n            xShift += graphicalLabel.PositionAndShape.Size.width + chordSymbolSpacing;\n        }\n    }\n\n    /**\n     * Adds a technical instruction at the given staff entry.\n     * @param technicalInstruction\n     * @param graphicalStaffEntry\n     */\n    public createGraphicalTechnicalInstruction(technicalInstruction: TechnicalInstruction, graphicalStaffEntry: GraphicalStaffEntry): void {\n        return;\n    }\n\n}\n","import { GraphicalInstantaneousDynamicExpression } from \"../GraphicalInstantaneousDynamicExpression\";\nimport { InstantaneousDynamicExpression, DynamicEnum } from \"../../VoiceData/Expressions/InstantaneousDynamicExpression\";\nimport { GraphicalLabel } from \"../GraphicalLabel\";\nimport { Label } from \"../../Label\";\nimport { TextAlignmentEnum } from \"../../../Common/Enums/TextAlignment\";\nimport { FontStyles } from \"../../../Common/Enums/FontStyles\";\nimport { StaffLine } from \"../StaffLine\";\nimport { GraphicalMeasure } from \"../GraphicalMeasure\";\n\nexport class VexFlowInstantaneousDynamicExpression extends GraphicalInstantaneousDynamicExpression {\n    constructor(instantaneousDynamicExpression: InstantaneousDynamicExpression, staffLine: StaffLine, measure: GraphicalMeasure) {\n        super(instantaneousDynamicExpression, staffLine, measure);\n\n        const sourceLabel: Label = new Label(this.Expression);\n        this.label = new GraphicalLabel(sourceLabel,\n                                        this.rules.ContinuousDynamicTextHeight,\n                                        TextAlignmentEnum.CenterCenter,\n                                        this.rules,\n                                        this.PositionAndShape);\n\n        this.label.Label.fontStyle = FontStyles.BoldItalic;\n        this.label.setLabelPositionAndShapeBorders();\n        this.PositionAndShape.calculateBoundingBox();\n    }\n\n    get InstantaneousDynamic(): InstantaneousDynamicExpression {\n        return this.mInstantaneousDynamicExpression;\n    }\n\n    get Expression(): string {\n        return DynamicEnum[this.mInstantaneousDynamicExpression.DynEnum];\n    }\n}\n","import Vex from \"vexflow\";\nimport VF = Vex.Flow;\nimport { VexFlowInstrumentBracket } from \"./VexFlowInstrumentBracket\";\nimport { VexFlowStaffLine } from \"./VexFlowStaffLine\";\n\n/**\n * Class that defines a instrument bracket at the beginning of a line.\n */\nexport class VexFlowInstrumentBrace extends VexFlowInstrumentBracket {\n\n    constructor(firstVexFlowStaffLine: VexFlowStaffLine, lastVexFlowStaffLine: VexFlowStaffLine, depth: number = 0) {\n        super(firstVexFlowStaffLine, lastVexFlowStaffLine, depth);\n        this.vexflowConnector.setType(VF.StaveConnector.type.BRACE);\n    }\n}\n","import Vex from \"vexflow\";\nimport VF = Vex.Flow;\nimport { GraphicalObject } from \"../GraphicalObject\";\nimport { VexFlowStaffLine } from \"./VexFlowStaffLine\";\nimport { BoundingBox } from \"../BoundingBox\";\nimport { VexFlowMeasure } from \"./VexFlowMeasure\";\nimport { unitInPixels } from \"./VexFlowMusicSheetDrawer\";\n\n/**\n * Class that defines a instrument bracket at the beginning of a line.\n */\nexport class VexFlowInstrumentBracket extends GraphicalObject {\n\n    public vexflowConnector: VF.StaveConnector;\n    public Visible: boolean = true;\n\n    constructor(firstVexFlowStaffLine: VexFlowStaffLine, lastVexFlowStaffLine: VexFlowStaffLine, depth: number = 0) {\n        super();\n        this.PositionAndShape = new BoundingBox(this, firstVexFlowStaffLine.ParentMusicSystem.PositionAndShape);\n        const firstVexMeasure: VexFlowMeasure = firstVexFlowStaffLine.Measures[0] as VexFlowMeasure;\n        const lastVexMeasure: VexFlowMeasure = lastVexFlowStaffLine.Measures[0] as VexFlowMeasure;\n        this.addConnector(firstVexMeasure.getVFStave(), lastVexMeasure.getVFStave(), VF.StaveConnector.type.BRACKET, depth);\n    }\n\n    /**\n     * Render the bracket using the given backend\n     * @param ctx Render Vexflow context\n     */\n    public draw(ctx: Vex.IRenderContext): void {\n        // Draw vexflow brace. This sets the positions inside the connector.\n        if (this.Visible) {\n            this.vexflowConnector.setContext(ctx).draw();\n        }\n        // Set bounding box\n        const con: VF.StaveConnector = this.vexflowConnector;\n        // First line in first stave\n        const topY: number = con.top_stave.getYForLine(0);\n        // Last line in last stave\n        const botY: number = con.bottom_stave.getYForLine(con.bottom_stave.getNumLines() - 1) + con.thickness;\n        // Set bounding box position and size in OSMD units\n        this.PositionAndShape.AbsolutePosition.x = (con.top_stave.getX() - 2 + con.x_shift) / unitInPixels;\n        this.PositionAndShape.AbsolutePosition.y = topY / unitInPixels;\n        this.PositionAndShape.Size.height = (botY - topY) / unitInPixels;\n        this.PositionAndShape.Size.width = 12 / unitInPixels; // width is always 12 -> vexflow implementation\n    }\n    /**\n     * Adds a connector between two staves\n     *\n     * @param {Stave} stave1: First stave\n     * @param {Stave} stave2: Second stave\n     * @param {Flow.StaveConnector.type} type: Type of connector\n     */\n    private addConnector(stave1: VF.Stave, stave2: VF.Stave, type: any, depth: number): void {\n        this.vexflowConnector = new VF.StaveConnector(stave1, stave2)\n        .setType(type)\n        .setXShift(depth * -5);\n    }\n}\n","import Vex from \"vexflow\";\nimport VF = Vex.Flow;\nimport {GraphicalMeasure} from \"../GraphicalMeasure\";\nimport {SourceMeasure} from \"../../VoiceData/SourceMeasure\";\nimport {Staff} from \"../../VoiceData/Staff\";\nimport {StaffLine} from \"../StaffLine\";\nimport {SystemLinesEnum} from \"../SystemLinesEnum\";\nimport {ClefInstruction, ClefEnum} from \"../../VoiceData/Instructions/ClefInstruction\";\nimport {KeyInstruction} from \"../../VoiceData/Instructions/KeyInstruction\";\nimport {RhythmInstruction} from \"../../VoiceData/Instructions/RhythmInstruction\";\nimport {VexFlowConverter} from \"./VexFlowConverter\";\nimport {VexFlowStaffEntry} from \"./VexFlowStaffEntry\";\nimport {Beam} from \"../../VoiceData/Beam\";\nimport {GraphicalNote} from \"../GraphicalNote\";\nimport {GraphicalStaffEntry} from \"../GraphicalStaffEntry\";\nimport StaveNote = VF.StaveNote;\nimport StemmableNote = VF.StemmableNote;\nimport NoteSubGroup = VF.NoteSubGroup;\nimport log from \"loglevel\";\nimport {unitInPixels} from \"./VexFlowMusicSheetDrawer\";\nimport {Tuplet} from \"../../VoiceData/Tuplet\";\nimport {RepetitionInstructionEnum, RepetitionInstruction, AlignmentType} from \"../../VoiceData/Instructions/RepetitionInstruction\";\nimport {SystemLinePosition} from \"../SystemLinePosition\";\nimport {StemDirectionType} from \"../../VoiceData/VoiceEntry\";\nimport {GraphicalVoiceEntry} from \"../GraphicalVoiceEntry\";\nimport {VexFlowVoiceEntry} from \"./VexFlowVoiceEntry\";\nimport {Fraction} from \"../../../Common/DataObjects/Fraction\";\nimport {Voice} from \"../../VoiceData/Voice\";\nimport {EngravingRules} from \"../EngravingRules\";\nimport {OrnamentContainer} from \"../../VoiceData/OrnamentContainer\";\nimport {TechnicalInstruction} from \"../../VoiceData/Instructions/TechnicalInstruction\";\nimport {PlacementEnum} from \"../../VoiceData/Expressions/AbstractExpression\";\nimport {VexFlowGraphicalNote} from \"./VexFlowGraphicalNote\";\nimport {AutoBeamOptions} from \"../../../OpenSheetMusicDisplay/OSMDOptions\";\nimport {SkyBottomLineCalculator} from \"../SkyBottomLineCalculator\";\nimport { NoteType } from \"../../VoiceData/NoteType\";\nimport { Arpeggio } from \"../../VoiceData/Arpeggio\";\nimport { GraphicalTie } from \"../GraphicalTie\";\n\n// type StemmableNote = VF.StemmableNote;\n\nexport class VexFlowMeasure extends GraphicalMeasure {\n    constructor(staff: Staff, sourceMeasure?: SourceMeasure, staffLine?: StaffLine) {\n        super(staff, sourceMeasure, staffLine);\n        this.minimumStaffEntriesWidth = -1;\n\n        /*\n         * There is no case in which `staffLine === undefined && sourceMeasure === undefined` holds.\n         * Hence, it is not necessary to specify an `else` case.\n         * One can verify this through a usage search for this constructor.\n         */\n        if (staffLine) {\n            this.rules = staffLine.ParentMusicSystem.rules;\n        } else if (sourceMeasure) {\n            this.rules = sourceMeasure.Rules;\n        } else {\n            this.rules = new EngravingRules();\n        }\n\n        this.resetLayout();\n    }\n\n    public isTabMeasure: boolean = false;\n    /** octaveOffset according to active clef */\n    public octaveOffset: number = 3;\n    /** The VexFlow Voices in the measure */\n    public vfVoices: { [voiceID: number]: VF.Voice } = {};\n    /** Call this function (if present) to x-format all the voices in the measure */\n    public formatVoices?: (width: number, parent: VexFlowMeasure) => void;\n    /** The VexFlow Ties in the measure */\n    public vfTies: VF.StaveTie[] = [];\n    /** The repetition instructions given as words or symbols (coda, dal segno..) */\n    public vfRepetitionWords: VF.Repetition[] = [];\n    /** The VexFlow Stave (= one measure in a staffline) */\n    protected stave!: VF.Stave;\n    /** VexFlow StaveConnectors (vertical lines) */\n    protected connectors: VF.StaveConnector[] = [];\n    /** Intermediate object to construct beams */\n    private beams: { [voiceID: number]: [Beam, VexFlowVoiceEntry[]] [] } = {};\n    /** Beams created by (optional) autoBeam function. */\n    private autoVfBeams: VF.Beam[] = [];\n    /** Beams of tuplet notes created by (optional) autoBeam function. */\n    private autoTupletVfBeams: VF.Beam[] = [];\n    /** VexFlow Beams */\n    private vfbeams: { [voiceID: number]: VF.Beam[] } = {};\n    /** Intermediate object to construct tuplets */\n    protected tuplets: { [voiceID: number]: [Tuplet, VexFlowVoiceEntry[]][] } = {};\n    /** VexFlow Tuplets */\n    private vftuplets: { [voiceID: number]: VF.Tuplet[] } = {};\n    // The engraving rules of OSMD.\n    public rules: EngravingRules;\n\n    // Sets the absolute coordinates of the VFStave on the canvas\n    public setAbsoluteCoordinates(x: number, y: number): void {\n        this.stave.setX(x).setY(y);\n    }\n\n    /**\n     * Reset all the geometric values and parameters of this measure and put it in an initialized state.\n     * This is needed to evaluate a measure a second time by system builder.\n     */\n    public resetLayout(): void {\n        // Take into account some space for the begin and end lines of the stave\n        // Will be changed when repetitions will be implemented\n        //this.beginInstructionsWidth = 20 / UnitInPixels;\n        //this.endInstructionsWidth = 20 / UnitInPixels;\n\n        // TODO save beginning and end bar type, set these again after new stave.\n\n        this.stave = new VF.Stave(0, 0, 0, {\n            fill_style: this.rules.StaffLineColor,\n            space_above_staff_ln: 0,\n            space_below_staff_ln: 0\n        });\n        (this.stave as any).MeasureNumber = this.MeasureNumber; // for debug info. vexflow automatically uses stave.measure for rendering measure numbers\n        // also see VexFlowMusicSheetDrawer.drawSheet() for some other vexflow default value settings (like default font scale)\n\n        if (this.ParentStaff) {\n            this.setLineNumber(this.ParentStaff.StafflineCount);\n        }\n        // constructor sets beginning and end bar type to standard\n\n        this.stave.setBegBarType(VF.Barline.type.NONE); // technically not correct, but we'd need to set the next measure's beginning bar type\n        if (this.parentSourceMeasure && this.parentSourceMeasure.endingBarStyleEnum === SystemLinesEnum.None) {\n            // fix for vexflow ignoring ending barline style after new stave, apparently\n            this.stave.setEndBarType(VF.Barline.type.NONE);\n        }\n        // the correct bar types seem to be set later\n\n        this.updateInstructionWidth();\n    }\n\n    public clean(): void {\n        this.vfTies.length = 0;\n        this.connectors = [];\n        // Clean up instructions\n        this.resetLayout();\n    }\n\n    /**\n     * returns the x-width (in units) of a given measure line {SystemLinesEnum}.\n     * @param line\n     * @returns the x-width in osmd units\n     */\n    public getLineWidth(line: SystemLinesEnum): number {\n        switch (line) {\n            // return 0 for the normal lines, as the line width will be considered at the updateInstructionWidth() method using the stavemodifiers.\n            // case SystemLinesEnum.SingleThin:\n            //     return 5.0 / unitInPixels;\n            // case SystemLinesEnum.DoubleThin:\n            //     return 5.0 / unitInPixels;\n            //     case SystemLinesEnum.ThinBold:\n            //     return 5.0 / unitInPixels;\n            // but just add a little extra space for repetitions (cosmetics):\n            case SystemLinesEnum.BoldThinDots:\n            case SystemLinesEnum.DotsThinBold:\n                return 10.0 / unitInPixels;\n            case SystemLinesEnum.DotsBoldBoldDots: // :||: = repeat ends, another repeat starts in next measure\n                return 10.0 / unitInPixels + this.rules.RepeatEndStartPadding;\n            default:\n                return 0;\n        }\n    }\n\n    /**\n     * adds the given clef to the begin of the measure.\n     * This has to update/increase BeginInstructionsWidth.\n     * @param clef\n     */\n    public addClefAtBegin(clef: ClefInstruction): void {\n        if (!this.rules.RenderClefsAtBeginningOfStaffline) {\n            return;\n        }\n        this.octaveOffset = clef.OctaveOffset;\n        if (clef.ClefType === ClefEnum.TAB) {\n            this.stave.addClef(\"tab\", undefined, undefined, undefined);\n        } else {\n        const vfclef: { type: string, size: string, annotation: string } = VexFlowConverter.Clef(clef, \"default\");\n        this.stave.addClef(vfclef.type, vfclef.size, vfclef.annotation, VF.StaveModifier.Position.BEGIN);\n        }\n        this.updateInstructionWidth();\n    }\n\n    /**\n     * Sets the number of stafflines that are rendered, so that they are centered properly\n     * @param lineNumber\n     */\n    public setLineNumber(lineNumber: number): void {\n        if (lineNumber !== 5) {\n            if (lineNumber === 0) {\n                this.stave.setNumLines(0);\n                this.stave.getBottomLineY = function(): number {\n                    return this.getYForLine(this.options.num_lines);\n                };\n            } else if (lineNumber === 1) {\n                // VF.Stave.setNumLines hides all but the top line.\n                // this is better\n                this.stave.options.line_config = [\n                    { visible: false },\n                    { visible: false },\n                    { visible: true }, // show middle\n                    { visible: false },\n                    { visible: false },\n                ];\n                //quick fix to see if this matters for calculation. Doesn't seem to\n                this.stave.getBottomLineY = function(): number {\n                    return this.getYForLine(2);\n                };\n                //lines (which isn't this case here)\n                //this.stave.options.num_lines = parseInt(lines, 10);\n            } else if (lineNumber === 2) {\n                this.stave.options.line_config = [\n                    { visible: false },\n                    { visible: false },\n                    { visible: true }, // show middle\n                    { visible: true },\n                    { visible: false },\n                ];\n                this.stave.getBottomLineY = function(): number {\n                    return this.getYForLine(3);\n                };\n            } else if (lineNumber === 3) {\n                this.stave.options.line_config = [\n                    { visible: false },\n                    { visible: true },\n                    { visible: true }, // show middle\n                    { visible: true },\n                    { visible: false },\n                ];\n                this.stave.getBottomLineY = function(): number {\n                    return this.getYForLine(2);\n                };\n            } else {\n                this.stave.setNumLines(lineNumber);\n                this.stave.getBottomLineY = function(): number {\n                    return this.getYForLine(this.options.num_lines);\n                };\n            }\n        }\n    }\n\n    /**\n     * adds the given key to the begin of the measure.\n     * This has to update/increase BeginInstructionsWidth.\n     * @param currentKey the new valid key.\n     * @param previousKey the old cancelled key. Needed to show which accidentals are not valid any more.\n     * @param currentClef the valid clef. Needed to put the accidentals on the right y-positions.\n     */\n    public addKeyAtBegin(currentKey: KeyInstruction, previousKey: KeyInstruction, currentClef: ClefInstruction): void {\n        if (!this.rules.RenderKeySignatures) {\n            return;\n        }\n        this.stave.setKeySignature(\n            VexFlowConverter.keySignature(currentKey),\n            VexFlowConverter.keySignature(previousKey),\n            undefined\n        );\n        this.updateInstructionWidth();\n    }\n\n    /**\n     * adds the given rhythm to the begin of the measure.\n     * This has to update/increase BeginInstructionsWidth.\n     * @param rhythm\n     */\n    public addRhythmAtBegin(rhythm: RhythmInstruction): void {\n        const timeSig: VF.TimeSignature = VexFlowConverter.TimeSignature(rhythm);\n        this.stave.addModifier(\n            timeSig,\n            VF.StaveModifier.Position.BEGIN\n        );\n        if (!this.ShowTimeSignature) {\n            // extends Element is missing from class StaveModifier in DefinitelyTyped definitions, so setStyle isn't found\n            timeSig.setStyle({ fillStyle: \"#00000000\"}); // transparent. requires VexflowPatch\n        }\n        this.updateInstructionWidth();\n    }\n\n    /**\n     * adds the given clef to the end of the measure.\n     * This has to update/increase EndInstructionsWidth.\n     * @param clef\n     */\n    public addClefAtEnd(clef: ClefInstruction, visible: boolean = true): void {\n        const vfclef: { type: string, size: string, annotation: string } = VexFlowConverter.Clef(clef, \"small\");\n        if (!visible && this.stave.endClef) {\n            return; // don't overwrite existing clef with invisible clef\n        }\n        this.stave.setEndClef(vfclef.type, vfclef.size, vfclef.annotation);\n        for (const modifier of this.stave.getModifiers()) {\n            if (!visible) {\n                // make clef invisible in vexflow. (only rendered to correct layout and staffentry boundingbox)\n                if (modifier.getCategory() === \"clefs\" && modifier.getPosition() === VF.StaveModifier.Position.END) {\n                    if ((modifier as any).type === vfclef.type) { // any = VF.Clef\n                        const transparentStyle: string = \"#12345600\";\n                        const originalStyle: any = modifier.getStyle();\n                        if (originalStyle) {\n                            (modifier as any).originalStrokeStyle = originalStyle.strokeStyle;\n                            (modifier as any).originalFillStyle = originalStyle.fillStyle;\n                        }\n                        modifier.setStyle({strokeStyle: transparentStyle, fillStyle: transparentStyle});\n                    }\n                }\n            } else {\n                // reset invisible style\n                const originalStrokeStyle: any = (modifier as any).originalStrokeStyle;\n                const originalFillStyle: any = (modifier as any).originalFillStyle;\n                if (modifier.getStyle()) {\n                    if (originalStrokeStyle && originalFillStyle) {\n                        modifier.getStyle().strokeStyle = originalStrokeStyle;\n                        modifier.getStyle().fillStyle = originalFillStyle;\n                    } else {\n                        modifier.getStyle().strokeStyle = null;\n                        modifier.getStyle().fillStyle = null;\n                    }\n                }\n            }\n        }\n        this.parentSourceMeasure.hasEndClef = true;\n        return this.updateInstructionWidth();\n    }\n\n    // Render initial line is whether or not to render a single bar line at the beginning (if the repeat line we are drawing is\n    // offset by a clef, for ex.)\n    public addMeasureLine(lineType: SystemLinesEnum, linePosition: SystemLinePosition, renderInitialLine: boolean = true): void {\n        switch (linePosition) {\n            case SystemLinePosition.MeasureBegin:\n                switch (lineType) {\n                    case SystemLinesEnum.BoldThinDots:\n                        //customize the barline draw function if repeat is beginning of system\n                        if (!renderInitialLine) {\n                            (this.stave as any).modifiers[0].draw = function(stave: VF.Stave): void {\n                                (stave as any).checkContext();\n                                this.setRendered();\n                                switch (this.type) {\n                                    case VF.Barline.type.SINGLE:\n                                    this.drawVerticalBar(stave, this.x, false);\n                                    break;\n                                    case VF.Barline.type.DOUBLE:\n                                    this.drawVerticalBar(stave, this.x, true);\n                                    break;\n                                    case VF.Barline.type.END:\n                                    this.drawVerticalEndBar(stave, this.x);\n                                    break;\n                                    case VF.Barline.type.REPEAT_BEGIN:\n                                    //removed the vertical line rendering that exists in VF codebase\n                                    this.drawRepeatBar(stave, this.x, true);\n                                    break;\n                                    case VF.Barline.type.REPEAT_END:\n                                    this.drawRepeatBar(stave, this.x, false);\n                                    break;\n                                    case VF.Barline.type.REPEAT_BOTH:\n                                    this.drawRepeatBar(stave, this.x, false);\n                                    this.drawRepeatBar(stave, this.x, true);\n                                    break;\n                                    default:\n                                    // Default is NONE, so nothing to draw\n                                    break;\n                                }\n                            };\n                        }\n                        this.stave.setBegBarType(VF.Barline.type.REPEAT_BEGIN);\n                        break;\n                    default:\n                        //this.stave.setBegBarType(VF.Barline.type.NONE); // not necessary, it seems\n                        break;\n                }\n                break;\n            case SystemLinePosition.MeasureEnd:\n                switch (lineType) {\n                    case SystemLinesEnum.DotsBoldBoldDots:\n                        this.stave.setEndBarType(VF.Barline.type.REPEAT_BOTH);\n                        break;\n                    case SystemLinesEnum.DotsThinBold:\n                        this.stave.setEndBarType(VF.Barline.type.REPEAT_END);\n                        break;\n                    case SystemLinesEnum.DoubleThin:\n                        this.stave.setEndBarType(VF.Barline.type.DOUBLE);\n                        break;\n                    case SystemLinesEnum.ThinBold:\n                        this.stave.setEndBarType(VF.Barline.type.END);\n                        break;\n                    case SystemLinesEnum.None:\n                        this.stave.setEndBarType(VF.Barline.type.NONE);\n                        break;\n                    // TODO: Add support for additional Barline types when VexFlow supports them\n                    default:\n                        break;\n                }\n                break;\n            default:\n                break;\n        }\n    }\n\n    /**\n     * Adds a measure number to the top left corner of the measure\n     * This method is not used currently in favor of the calculateMeasureNumberPlacement\n     * method in the MusicSheetCalculator.ts\n     */\n    public addMeasureNumber(): void {\n        const text: string = this.MeasureNumber.toString();\n        const position: number = StavePositionEnum.ABOVE;  //VF.StaveModifier.Position.ABOVE;\n        this.stave.setText(text, position, {\n            justification: 1,\n            shift_x: 0,\n            shift_y: 0,\n          });\n    }\n\n    public addWordRepetition(repetitionInstruction: RepetitionInstruction): void {\n        let instruction: number | undefined;\n        let position: number = VF.StaveModifier.Position.END;\n        const xShift: number = this.beginInstructionsWidth;\n        switch (repetitionInstruction.type) {\n          case RepetitionInstructionEnum.Segno:\n            // create Segno Symbol:\n            instruction = VF.Repetition.type.SEGNO_LEFT;\n            position = VF.StaveModifier.Position.LEFT;\n            break;\n          case RepetitionInstructionEnum.Coda:\n            // create Coda Symbol:\n            instruction = VF.Repetition.type.CODA_LEFT;\n            position = VF.StaveModifier.Position.LEFT;\n            break;\n          case RepetitionInstructionEnum.DaCapo:\n            instruction = VF.Repetition.type.DC;\n            break;\n          case RepetitionInstructionEnum.DalSegno:\n            instruction = VF.Repetition.type.DS;\n            break;\n          case RepetitionInstructionEnum.Fine:\n            instruction = VF.Repetition.type.FINE;\n            break;\n          case RepetitionInstructionEnum.ToCoda:\n            instruction = (VF.Repetition as any).type.TO_CODA;\n            break;\n          case RepetitionInstructionEnum.DaCapoAlFine:\n            instruction = VF.Repetition.type.DC_AL_FINE;\n            break;\n          case RepetitionInstructionEnum.DaCapoAlCoda:\n            instruction = VF.Repetition.type.DC_AL_CODA;\n            break;\n          case RepetitionInstructionEnum.DalSegnoAlFine:\n            instruction = VF.Repetition.type.DS_AL_FINE;\n            break;\n          case RepetitionInstructionEnum.DalSegnoAlCoda:\n            instruction = VF.Repetition.type.DS_AL_CODA;\n            break;\n          default:\n            break;\n        }\n        if (instruction) {\n            const repetition: VF.Repetition = new VF.Repetition(instruction, xShift, -this.rules.RepetitionSymbolsYOffset);\n            this.stave.addModifier(repetition, position);\n            return;\n        }\n\n        this.addVolta(repetitionInstruction);\n    }\n\n    protected addVolta(repetitionInstruction: RepetitionInstruction): void {\n        let voltaType: number = VF.Volta.type.BEGIN;\n        if (repetitionInstruction.type === RepetitionInstructionEnum.Ending) {\n            switch (repetitionInstruction.alignment) {\n                case AlignmentType.Begin:\n                    if (this.parentSourceMeasure.endsRepetitionEnding()) {\n                        voltaType = VF.Volta.type.BEGIN_END;\n                    } else {\n                        voltaType = VF.Volta.type.BEGIN;\n                    }\n                    break;\n                case AlignmentType.End:\n                    if (this.parentSourceMeasure.beginsRepetitionEnding()) {\n                        //voltaType = VF.Volta.type.BEGIN_END;\n                        // don't add BEGIN_END volta a second time:\n                        return;\n                    } else {\n                        voltaType = VF.Volta.type.END;\n                    }\n                    break;\n                default:\n                    break;\n            }\n\n            const skyBottomLineCalculator: SkyBottomLineCalculator = this.ParentStaffLine.SkyBottomLineCalculator;\n            //Because of loss of accuracy when sampling (see SkyBottomLineCalculator.updateInRange), measures tend to overlap\n            //This causes getSkyLineMinInRange to return an incorrect min value (one from the previous measure, which has been modified)\n            //We need to offset the end of what we are measuring by a bit to prevent this, otherwise volta pairs step up\n            const start: number = this.PositionAndShape.AbsolutePosition.x + this.PositionAndShape.BorderMarginLeft + 0.4;\n            const end: number = Math.max(this.PositionAndShape.AbsolutePosition.x + this.PositionAndShape.BorderMarginRight, start + 0.4);\n            //2 unit gap, since volta is positioned from y center it seems.\n            //This prevents cases where the volta is rendered over another element\n            const skylineMinForMeasure: number = skyBottomLineCalculator.getSkyLineMinInRange( start, end ) - 2;\n            //-6 OSMD units is the 0 value that the volta is placed on. .1 extra so the skyline goes above the volta\n            //instead of on the line itself\n            let newSkylineValueForMeasure: number = -6.1 + this.rules.VoltaOffset;\n            let vexFlowVoltaHeight: number = this.rules.VoltaOffset;\n            //EngravingRules default offset is 2.5, can be user set.\n            //2.5 gives us a good default value to work with.\n\n            //if we calculate that the minimum skyline allowed by elements is above the default volta position, need to adjust volta up further\n            if (skylineMinForMeasure < newSkylineValueForMeasure) {\n                const skylineDifference: number = skylineMinForMeasure - newSkylineValueForMeasure;\n                vexFlowVoltaHeight += skylineDifference;\n                newSkylineValueForMeasure = skylineMinForMeasure;\n            }\n\n            let prevMeasure: VexFlowMeasure = undefined;\n            //if we already have a volta in the prev measure, should match it's height, or if we are higher, it should match ours\n            //find previous sibling measure that may have volta\n            const currentMeasureNumber: number = this.parentSourceMeasure.MeasureNumber;\n            for (let i: number = 0; i < this.ParentStaffLine.Measures.length; i++) {\n                const tempMeasure: GraphicalMeasure = this.ParentStaffLine.Measures[i];\n                if (!(tempMeasure instanceof VexFlowMeasure)) {\n                    // can happen for MultipleRestMeasures\n                    continue;\n                }\n                if (tempMeasure.MeasureNumber === currentMeasureNumber - 1 ||\n                    tempMeasure.MeasureNumber + tempMeasure.parentSourceMeasure?.multipleRestMeasures === currentMeasureNumber) {\n                    //We found the previous top measure\n                    prevMeasure = tempMeasure as VexFlowMeasure;\n                }\n            }\n\n            if (prevMeasure) {\n                const prevStaveModifiers: VF.StaveModifier[] = prevMeasure.stave.getModifiers();\n                for (let i: number = 0; i < prevStaveModifiers.length; i++) {\n                    const nextStaveModifier: VF.StaveModifier = prevStaveModifiers[i];\n                    if (nextStaveModifier.hasOwnProperty(\"volta\")) {\n                        const prevskyBottomLineCalculator: SkyBottomLineCalculator = prevMeasure.ParentStaffLine.SkyBottomLineCalculator;\n                        const prevStart: number = prevMeasure.PositionAndShape.AbsolutePosition.x + prevMeasure.PositionAndShape.BorderMarginLeft + 0.4;\n                        const prevEnd: number = Math.max(\n                            prevMeasure.PositionAndShape.AbsolutePosition.x + prevMeasure.PositionAndShape.BorderMarginRight,\n                            prevStart + 0.4);\n                        const prevMeasureSkyline: number = prevskyBottomLineCalculator.getSkyLineMinInRange(prevStart, prevEnd);\n                        //if prev skyline is higher, use it\n                        if (prevMeasureSkyline <= newSkylineValueForMeasure) {\n                            const skylineDifference: number = prevMeasureSkyline - newSkylineValueForMeasure;\n                            vexFlowVoltaHeight += skylineDifference;\n                            newSkylineValueForMeasure = prevMeasureSkyline;\n                        } else { //otherwise, we are higher. Need to adjust prev\n                            (nextStaveModifier as any).y_shift = vexFlowVoltaHeight * unitInPixels;\n                            prevMeasure.ParentStaffLine.SkyBottomLineCalculator.updateSkyLineInRange(prevStart, prevEnd, newSkylineValueForMeasure);\n                        }\n                    }\n                }\n            }\n\n            //convert to VF units (pixels)\n            vexFlowVoltaHeight *= 10;\n            this.stave.setVoltaType(voltaType, repetitionInstruction.endingIndices[0], vexFlowVoltaHeight);\n            skyBottomLineCalculator.updateSkyLineInRange(start, end, newSkylineValueForMeasure);\n        }\n    }\n\n    /**\n     * Sets the overall x-width of the measure.\n     * @param width\n     */\n    public setWidth(width: number): void {\n        super.setWidth(width);\n        // Set the width of the VF.Stave\n        this.stave.setWidth(width * unitInPixels);\n        // Force the width of the Begin Instructions\n        //this.stave.setNoteStartX(this.beginInstructionsWidth * UnitInPixels);\n    }\n\n    /**\n     * This method is called after the StaffEntriesScaleFactor has been set.\n     * Here the final x-positions of the staff entries have to be set.\n     * (multiply the minimal positions with the scaling factor, considering the BeginInstructionsWidth)\n     */\n    public layoutSymbols(): void {\n        // vexflow does the x-layout\n    }\n\n    /**\n     * Draw this measure on a VexFlow CanvasContext\n     * @param ctx\n     */\n    public draw(ctx: Vex.IRenderContext): void {\n\n        // Draw stave lines\n        this.stave.setContext(ctx).draw();\n        // Draw all voices\n        for (const voiceID in this.vfVoices) {\n            if (this.vfVoices.hasOwnProperty(voiceID)) {\n                ctx.save();\n                this.vfVoices[voiceID].draw(ctx, this.stave);\n                ctx.restore();\n                // this.vfVoices[voiceID].tickables.forEach(t => t.getBoundingBox().draw(ctx));\n                // this.vfVoices[voiceID].tickables.forEach(t => t.getBoundingBox().draw(ctx));\n            }\n        }\n        // Draw beams\n        for (const voiceID in this.vfbeams) {\n            if (this.vfbeams.hasOwnProperty(voiceID)) {\n                for (const beam of this.vfbeams[voiceID]) {\n                    beam.setContext(ctx).draw();\n                }\n            }\n        }\n        // Draw auto-generated beams from Beam.generateBeams()\n        if (this.autoVfBeams) {\n            for (const beam of this.autoVfBeams) {\n                beam.setContext(ctx).draw();\n            }\n        }\n        if (!this.isTabMeasure || this.rules.TupletNumbersInTabs) {\n            if (this.autoTupletVfBeams) {\n                for (const beam of this.autoTupletVfBeams) {\n                    beam.setContext(ctx).draw();\n                }\n            }\n            // Draw tuplets\n            for (const voiceID in this.vftuplets) {\n                if (this.vftuplets.hasOwnProperty(voiceID)) {\n                    for (const tuplet of this.vftuplets[voiceID]) {\n                        tuplet.setContext(ctx).draw();\n                    }\n                }\n            }\n        }\n\n        // Draw ties\n        for (const tie of this.vfTies) {\n            tie.setContext(ctx).draw();\n        }\n\n        // Draw vertical lines\n        for (const connector of this.connectors) {\n            connector.setContext(ctx).draw();\n        }\n        this.correctNotePositions();\n    }\n\n    // this currently formats multiple measures, see VexFlowMusicSheetCalculator.formatMeasures()\n    public format(): void {\n        // If this is the first stave in the vertical measure, call the format\n        // method to set the width of all the voices\n        if (this.formatVoices) {\n            // set the width of the voices to the current measure width:\n            // (The width of the voices does not include the instructions (StaveModifiers))\n            this.formatVoices((this.PositionAndShape.Size.width - this.beginInstructionsWidth - this.endInstructionsWidth) * unitInPixels, this);\n        }\n\n        // this.correctNotePositions(); // now done at the end of draw()\n    }\n\n    // correct position / bounding box (note.setIndex() needs to have been called)\n    public correctNotePositions(): void {\n        if (this.isTabMeasure) {\n            return;\n        }\n        for (const voice of this.getVoicesWithinMeasure()) {\n            for (const ve of voice.VoiceEntries) {\n                for (const note of ve.Notes) {\n                    const gNote: VexFlowGraphicalNote = this.rules.GNote(note) as VexFlowGraphicalNote;\n                    if (!gNote?.vfnote) { // can happen were invisible, then multi rest measure. TODO fix multi rest measure not removed\n                        return;\n                    }\n                    const vfnote: VF.StemmableNote = gNote.vfnote[0];\n                    // if (note.isRest()) // TODO somehow there are never rest notes in ve.Notes\n                    // TODO also, grace notes are not included here, need to be fixed as well. (and a few triple beamed notes in Bach Air)\n                    let relPosY: number = 0;\n                    if (gNote.parentVoiceEntry.parentVoiceEntry.StemDirection === StemDirectionType.Up) {\n                        relPosY += 3.5; // about 3.5 lines too high. this seems to be related to the default stem height, not actual stem height.\n                        // alternate calculation using actual stem height: somehow wildly varying.\n                        // if (ve.Notes.length > 1) {\n                        //     const stemHeight: number = vfnote.getStem().getHeight();\n                        //     // relPosY += shortFactor * stemHeight / unitInPixels - 3.5;\n                        //     relPosY += stemHeight / unitInPixels - 3.5; // for some reason this varies in its correctness between similar notes\n                        // } else {\n                        //     relPosY += 3.5;\n                        // }\n                    } else {\n                        relPosY += 0.5; // center-align bbox\n                    }\n                    const line: number = -gNote.notehead(vfnote).line; // vexflow y direction is opposite of osmd's\n                    relPosY += line + (gNote.parentVoiceEntry.notes.last() as VexFlowGraphicalNote).notehead().line; // don't move for first note: - (-vexline)\n                    gNote.PositionAndShape.RelativePosition.y = relPosY;\n                }\n            }\n        }\n    }\n\n    /**\n     * Returns all the voices that are present in this measure\n     */\n    public getVoicesWithinMeasure(): Voice[] {\n        const voices: Voice[] = [];\n        for (const gse of this.staffEntries) {\n           for (const gve of gse.graphicalVoiceEntries) {\n                if (voices.indexOf(gve.parentVoiceEntry.ParentVoice) === -1) {\n                    voices.push(gve.parentVoiceEntry.ParentVoice);\n                }\n            }\n        }\n        return voices;\n    }\n\n    /**\n     * Returns all the graphicalVoiceEntries of a given Voice.\n     * @param voice the voice for which the graphicalVoiceEntries shall be returned.\n     */\n    public getGraphicalVoiceEntriesPerVoice(voice: Voice): GraphicalVoiceEntry[] {\n        const voiceEntries: GraphicalVoiceEntry[] = [];\n        for (const gse of this.staffEntries) {\n           for (const gve of gse.graphicalVoiceEntries) {\n                if (gve.parentVoiceEntry.ParentVoice === voice) {\n                    voiceEntries.push(gve);\n                }\n            }\n        }\n        return voiceEntries;\n    }\n\n    /**\n     * Finds the gaps between the existing notes within a measure.\n     * Problem here is, that the graphicalVoiceEntry does not exist yet and\n     * that Tied notes are not present in the normal voiceEntries.\n     * To handle this, calculation with absolute timestamps is needed.\n     * And the graphical notes have to be analysed directly (and not the voiceEntries, as it actually should be -> needs refactoring)\n     * @param voice the voice for which the ghost notes shall be searched.\n     */\n    protected getRestFilledVexFlowStaveNotesPerVoice(voice: Voice): GraphicalVoiceEntry[] {\n        let latestVoiceTimestamp: Fraction;\n        let gvEntries: GraphicalVoiceEntry[] = this.getGraphicalVoiceEntriesPerVoice(voice);\n        for (let idx: number = 0; idx < gvEntries.length; idx++) {\n            const gve: GraphicalVoiceEntry = gvEntries[idx];\n            const gNotesStartTimestamp: Fraction = gve.notes[0].sourceNote.getAbsoluteTimestamp();\n            // find the voiceEntry end timestamp:\n            let gNotesEndTimestamp: Fraction = new Fraction();\n            for (const graphicalNote of gve.notes) {\n                const noteEnd: Fraction  = Fraction.plus(graphicalNote.sourceNote.getAbsoluteTimestamp(), graphicalNote.sourceNote.Length);\n                if (gNotesEndTimestamp.lt(noteEnd)) {\n                    gNotesEndTimestamp = noteEnd;\n                }\n            }\n\n            // check if this voice has just been found the first time:\n            if (!latestVoiceTimestamp) {\n                // if this voice is new, check for a gap from measure start to the start of the current voice entry:\n                const gapFromMeasureStart: Fraction = Fraction.minus(gNotesStartTimestamp, this.parentSourceMeasure.AbsoluteTimestamp);\n                if (gapFromMeasureStart.RealValue > 0) {\n                    log.trace(`Ghost Found at start (measure ${this.MeasureNumber})`); // happens too often for valid measures to be logged to debug\n                    const ghostGves: GraphicalVoiceEntry[] = this.createGhostGves(gapFromMeasureStart);\n                    gvEntries.splice(0, 0, ...ghostGves);\n                    idx += ghostGves.length;\n                }\n            } else {\n                // get the length of the empty space between notes:\n                const inBetweenLength: Fraction = Fraction.minus(gNotesStartTimestamp, latestVoiceTimestamp);\n\n                if (inBetweenLength.RealValue > 0) {\n                    log.trace(`Ghost Found in between (measure ${this.MeasureNumber})`); // happens too often for valid measures to be logged to debug\n                    const ghostGves: VexFlowVoiceEntry[] = this.createGhostGves(inBetweenLength);\n                    // add elements before current element:\n                    gvEntries.splice(idx, 0, ...ghostGves);\n                    // and increase index, as we added elements:\n                    idx += ghostGves.length;\n                }\n            }\n\n            // finally set the latest timestamp of this voice to the end timestamp of the longest note in the current voiceEntry:\n            latestVoiceTimestamp = gNotesEndTimestamp;\n        }\n\n        const measureEndTimestamp: Fraction = Fraction.plus(this.parentSourceMeasure.AbsoluteTimestamp, this.parentSourceMeasure.Duration);\n        const restLength: Fraction = Fraction.minus(measureEndTimestamp, latestVoiceTimestamp);\n        if (restLength.RealValue > 0) {\n            // fill the gap with a rest ghost note\n            // starting from lastFraction\n            // with length restLength:\n            log.trace(`Ghost Found at end (measure ${this.MeasureNumber})`); // happens too often for valid measures to be logged to debug\n            const ghostGves: VexFlowVoiceEntry[] = this.createGhostGves(restLength);\n            gvEntries = gvEntries.concat(ghostGves);\n        }\n        return gvEntries;\n    }\n\n    private createGhostGves(duration: Fraction): VexFlowVoiceEntry[] {\n        const vfghosts: VF.GhostNote[] = VexFlowConverter.GhostNotes(duration);\n        const ghostGves: VexFlowVoiceEntry[] = [];\n        for (const vfghost of vfghosts) {\n            const ghostGve: VexFlowVoiceEntry = new VexFlowVoiceEntry(undefined, undefined);\n            ghostGve.vfStaveNote = vfghost;\n            ghostGves.push(ghostGve);\n        }\n        return ghostGves;\n    }\n\n    /**\n     * Add a note to a beam\n     * @param graphicalNote\n     * @param beam\n     */\n    public handleBeam(graphicalNote: GraphicalNote, beam: Beam): void {\n        const voiceID: number = graphicalNote.sourceNote.ParentVoiceEntry.ParentVoice.VoiceId;\n        let beams: [Beam, VexFlowVoiceEntry[]][] = this.beams[voiceID];\n        if (!beams) {\n            beams = this.beams[voiceID] = [];\n        }\n        let data: [Beam, VexFlowVoiceEntry[]];\n        for (const mybeam of beams) {\n            if (mybeam[0] === beam) {\n                data = mybeam;\n            }\n        }\n        if (!data) {\n            data = [beam, []];\n            beams.push(data);\n        }\n        const parent: VexFlowVoiceEntry = graphicalNote.parentVoiceEntry as VexFlowVoiceEntry;\n        if (data[1].indexOf(parent) < 0) {\n            data[1].push(parent);\n        }\n    }\n\n    public handleTuplet(graphicalNote: GraphicalNote, tuplet: Tuplet): void {\n        const voiceID: number = graphicalNote.sourceNote.ParentVoiceEntry.ParentVoice.VoiceId;\n        tuplet = graphicalNote.sourceNote.NoteTuplet;\n        let tuplets: [Tuplet, VexFlowVoiceEntry[]][] = this.tuplets[voiceID];\n        if (!tuplets) {\n            tuplets = this.tuplets[voiceID] = [];\n        }\n        let currentTupletBuilder: [Tuplet, VexFlowVoiceEntry[]];\n        for (const t of tuplets) {\n            if (t[0] === tuplet) {\n                currentTupletBuilder = t;\n            }\n        }\n        if (!currentTupletBuilder) {\n            currentTupletBuilder = [tuplet, []];\n            tuplets.push(currentTupletBuilder);\n        }\n        const parent: VexFlowVoiceEntry = graphicalNote.parentVoiceEntry as VexFlowVoiceEntry;\n        if (currentTupletBuilder[1].indexOf(parent) < 0) {\n            currentTupletBuilder[1].push(parent);\n        }\n    }\n\n    /**\n     * Complete the creation of VexFlow Beams in this measure\n     */\n    public finalizeBeams(): void {\n        // The following line resets the created Vex.Flow Beams and\n        // created them brand new. Is this needed? And more importantly,\n        // should the old beams be removed manually by the notes?\n        this.vfbeams = {};\n        const beamedNotes: StaveNote[] = []; // already beamed notes, will be ignored by this.autoBeamNotes()\n        for (const voiceID in this.beams) {\n            if (this.beams.hasOwnProperty(voiceID)) {\n                let vfbeams: VF.Beam[] = this.vfbeams[voiceID];\n                if (!vfbeams) {\n                    vfbeams = this.vfbeams[voiceID] = [];\n                }\n                for (const beam of this.beams[voiceID]) {\n                    let beamHasQuarterNoteOrLonger: boolean = false;\n                    for (const note of beam[0].Notes) {\n                        if (note.Length.RealValue >= new Fraction(1, 4).RealValue\n                            // check whether the note has a TypeLength that's also not suitable for a beam (bigger than an eigth)\n                            && (!note.TypeLength || note.TypeLength.RealValue > 0.125)) {\n                            beamHasQuarterNoteOrLonger = true;\n                            break;\n                        }\n                    }\n                    if (beamHasQuarterNoteOrLonger) {\n                        log.debug(\"Beam between note >= quarter, likely tremolo, currently unsupported. continuing.\");\n                        continue;\n                    }\n\n                    const notes: VF.StaveNote[] = [];\n                    const psBeam: Beam = beam[0];\n                    const voiceEntries: VexFlowVoiceEntry[] = beam[1];\n\n                    let autoStemBeam: boolean = true;\n                    for (const gve of voiceEntries) {\n                        if (gve.parentVoiceEntry.ParentVoice === psBeam.Notes[0].ParentVoiceEntry.ParentVoice) {\n                            autoStemBeam = gve.parentVoiceEntry.WantedStemDirection === StemDirectionType.Undefined;\n                            // if (psBeam.Notes[0].NoteTuplet) {\n                            //     autoStemBeam = true;\n                            //     // this fix seemed temporarily necessary for tuplets with beams, see test_drum_tublet_beams\n                            //     break;\n                            // }\n                        }\n                    }\n\n                    let isGraceBeam: boolean = false;\n                    let beamColor: string;\n                    const stemColors: string[] = [];\n                    for (const entry of voiceEntries) {\n                        const note: VF.StaveNote = entry.vfStaveNote as StaveNote;\n                        if (note) {\n                          notes.push(note);\n                          beamedNotes.push(note);\n                        }\n                        if (entry.parentVoiceEntry.IsGrace) {\n                            isGraceBeam = true;\n                        }\n                        if (entry.parentVoiceEntry.StemColor && this.rules.ColoringEnabled) {\n                            stemColors.push(entry.parentVoiceEntry.StemColor);\n                        }\n                    }\n                    if (notes.length > 1) {\n                        const vfBeam: VF.Beam = new VF.Beam(notes, autoStemBeam);\n                        if (isGraceBeam) {\n                            // smaller beam, as in Vexflow.GraceNoteGroup.beamNotes()\n                            (<any>vfBeam).render_options.beam_width = 3;\n                            (<any>vfBeam).render_options.partial_beam_length = 4;\n                        }\n                        if (stemColors.length >= 2 && this.rules.ColorBeams) {\n                            beamColor = stemColors[0];\n                            for (const stemColor of stemColors) {\n                                if (stemColor !== beamColor) {\n                                    beamColor = undefined;\n                                    break;\n                                }\n                            }\n                            vfBeam.setStyle({ fillStyle: beamColor, strokeStyle: beamColor });\n                        }\n                        if (this.rules.FlatBeams) {\n                            (<any>vfBeam).render_options.flat_beams = true;\n                            (<any>vfBeam).render_options.flat_beam_offset = this.rules.FlatBeamOffset;\n                            (<any>vfBeam).render_options.flat_beam_offset_per_beam = this.rules.FlatBeamOffsetPerBeam;\n                        }\n                        vfbeams.push(vfBeam);\n                    } else {\n                        log.debug(\"Warning! Beam with no notes!\");\n                    }\n                }\n            }\n        }\n        if (this.rules.AutoBeamNotes) {\n            this.autoBeamNotes(beamedNotes); // try to autobeam notes except those that are already beamed (beamedNotes).\n        }\n    }\n\n    /** Automatically creates beams for notes except beamedNotes, using Vexflow's Beam.generateBeams().\n     *  Takes options from this.rules.AutoBeamOptions.\n     * @param beamedNotes notes that will not be autobeamed (usually because they are already beamed)\n     */\n    private autoBeamNotes(beamedNotes: StemmableNote[]): void {\n        if (!this.rules.AutoBeamTabs && this.isTabMeasure) { // could also use an option tabBeams to disable beams there completely\n            return;\n        }\n        let notesToAutoBeam: StemmableNote[] = [];\n        let consecutiveBeamableNotes: StemmableNote[] = [];\n        let currentTuplet: Tuplet;\n        let tupletNotesToAutoBeam: StaveNote[] = [];\n        this.autoTupletVfBeams = [];\n        const separateAutoBeams: StemmableNote[][] = []; // a set of separate beams, each having a set of notes (StemmableNote[]).\n        this.autoVfBeams = []; // final VF.Beams will be pushed/collected into this\n        let timeSignature: Fraction = this.parentSourceMeasure.ActiveTimeSignature;\n        if (!timeSignature) { // this doesn't happen in OSMD, but maybe in a SourceGenerator\n            timeSignature = this.parentSourceMeasure.Duration; // suboptimal, can be 1/1 in a 4/4 time signature\n        }\n        /*if (this.parentSourceMeasure.FirstInstructionsStaffEntries[0]) {\n            for (const instruction of this.parentSourceMeasure.FirstInstructionsStaffEntries[0].Instructions) {\n                if (instruction instanceof RhythmInstruction) { // there is not always a RhythmInstruction, but this could be useful some time.\n                    timeSignature = (instruction as RhythmInstruction).Rhythm;\n                }\n            }\n        }*/\n\n        for (const staffEntry of this.staffEntries) {\n            for (const gve of staffEntry.graphicalVoiceEntries) {\n                const vfStaveNote: StaveNote = <StaveNote> (gve as VexFlowVoiceEntry).vfStaveNote;\n                const gNote: GraphicalNote = gve.notes[0]; // TODO check for all notes within the graphical voice entry\n                const isOnBeat: boolean = staffEntry.relInMeasureTimestamp.isOnBeat(timeSignature);\n                const haveTwoOrMoreNotesToBeamAlready: boolean = consecutiveBeamableNotes.length >= 2;\n                //const noteIsQuarterOrLonger: boolean = gNote.sourceNote.Length.CompareTo(new Fraction(1, 4)) >= 0; // trusting Fraction class, no float check\n                const noteIsQuarterOrLonger: boolean = gNote.sourceNote.Length.RealValue - new Fraction(1, 4).RealValue > (-Fraction.FloatInaccuracyTolerance);\n                const unbeamableNote: boolean =\n                    gve.parentVoiceEntry.IsGrace || // don't beam grace notes\n                    noteIsQuarterOrLonger || // don't beam quarter or longer notes\n                    beamedNotes.contains(vfStaveNote);\n                if (unbeamableNote || isOnBeat) { // end beam\n                    if (haveTwoOrMoreNotesToBeamAlready) {\n                        // if we already have at least 2 notes to beam, beam them. don't beam notes surrounded by quarter notes etc.\n                        for (const note of consecutiveBeamableNotes) {\n                            notesToAutoBeam.push(note); // \"flush\" already beamed notes\n                        }\n                        separateAutoBeams.push(notesToAutoBeam.slice()); // copy array, otherwise this beam gets the next notes of next beam later\n                        notesToAutoBeam = []; // reset notesToAutoBeam, otherwise the next beam includes the previous beam's notes too\n                    }\n                    consecutiveBeamableNotes = []; // reset notes to beam\n\n                    if (unbeamableNote) {\n                        continue;\n                    }\n                    // else, note will be pushed to consecutiveBeamableNotes after tuplet check, also for note on new beat\n                }\n\n                // create beams for tuplets separately\n                const noteTuplet: Tuplet = gve.notes[0].sourceNote.NoteTuplet;\n                if (noteTuplet) {\n                    // check if there are quarter notes or longer in the tuplet, then don't beam.\n                    // (TODO: check for consecutiveBeamableNotes inside tuplets like for non-tuplet notes above\n                    //   e.g quarter eigth eighth -> beam the two eigth notes)\n                    let tupletContainsUnbeamableNote: boolean = false;\n                    for (const notes of noteTuplet.Notes) {\n                        for (const note of notes) {\n                            //const stavenote: StemmableNote = (gve as VexFlowVoiceEntry).vfStaveNote;\n                            //console.log(\"note \" + note.ToString() + \", stavenote type: \" + stavenote.getNoteType());\n                            if (note.NoteTypeXml >= NoteType.QUARTER || // quarter note or longer: don't beam\n                            // TODO: don't take Note (head) type from XML, but from current model,\n                            //   so that rendering can react dynamically to changes compared to the XML.\n                            //   however, taking the note length as fraction is tricky because of tuplets.\n                            //   a quarter in a triplet has length < quarter, but quarter note head, which Vexflow can't beam.\n                                note.ParentVoiceEntry.IsGrace ||\n                                note.isRest() && !this.rules.AutoBeamOptions.beam_rests) {\n                                tupletContainsUnbeamableNote = true;\n                                break;\n                            }\n                        }\n                        if (tupletContainsUnbeamableNote) {\n                            break;\n                        }\n                    }\n\n                    if (!currentTuplet) {\n                        currentTuplet = noteTuplet;\n                    } else {\n                        if (currentTuplet !== noteTuplet) { // new tuplet, finish old one\n                            if (tupletNotesToAutoBeam.length > 1) {\n                                const vfBeam: VF.Beam = new VF.Beam(tupletNotesToAutoBeam, true);\n                                if (this.rules.FlatBeams) {\n                                    (<any>vfBeam).render_options.flat_beams = true;\n                                    (<any>vfBeam).render_options.flat_beam_offset = this.rules.FlatBeamOffset;\n                                    (<any>vfBeam).render_options.flat_beam_offset_per_beam = this.rules.FlatBeamOffsetPerBeam;\n                                }\n                                this.autoTupletVfBeams.push(vfBeam);\n                            }\n                            tupletNotesToAutoBeam = [];\n                            currentTuplet = noteTuplet;\n                        }\n                    }\n                    if (!tupletContainsUnbeamableNote) {\n                        tupletNotesToAutoBeam.push(vfStaveNote);\n                    }\n                    continue;\n                } else {\n                    currentTuplet = undefined;\n                }\n\n                consecutiveBeamableNotes.push(vfStaveNote); // also happens on new beat\n            }\n        }\n        if (tupletNotesToAutoBeam.length >= 2) {\n            const vfBeam: VF.Beam = new VF.Beam(tupletNotesToAutoBeam, true);\n            if (this.rules.FlatBeams) {\n                (<any>vfBeam).render_options.flat_beams = true;\n                (<any>vfBeam).render_options.flat_beam_offset = this.rules.FlatBeamOffset;\n                (<any>vfBeam).render_options.flat_beam_offset_per_beam = this.rules.FlatBeamOffsetPerBeam;\n            }\n            this.autoTupletVfBeams.push(vfBeam);\n        }\n        if (consecutiveBeamableNotes.length >= 2) {\n            for (const note of consecutiveBeamableNotes) {\n                notesToAutoBeam.push(note);\n            }\n            separateAutoBeams.push(notesToAutoBeam);\n        }\n\n        // create options for generateBeams\n        const autoBeamOptions: AutoBeamOptions = this.rules.AutoBeamOptions;\n        const generateBeamOptions: any = {\n            beam_middle_only: autoBeamOptions.beam_middle_rests_only,\n            beam_rests: autoBeamOptions.beam_rests,\n            maintain_stem_directions: autoBeamOptions.maintain_stem_directions,\n        };\n        if (autoBeamOptions.groups && autoBeamOptions.groups.length) {\n            const groups: VF.Fraction[] = [];\n            for (const fraction of autoBeamOptions.groups) {\n                groups.push(new VF.Fraction(fraction[0], fraction[1]));\n            }\n            generateBeamOptions.groups = groups;\n        }\n\n        for (const notesForSeparateAutoBeam of separateAutoBeams) {\n            const newBeams: VF.Beam[] = VF.Beam.generateBeams(notesForSeparateAutoBeam, generateBeamOptions);\n            for (const vfBeam of newBeams) {\n                if (this.rules.FlatBeams) {\n                    (<any>vfBeam).render_options.flat_beams = true;\n                    (<any>vfBeam).render_options.flat_beam_offset = this.rules.FlatBeamOffset;\n                    (<any>vfBeam).render_options.flat_beam_offset_per_beam = this.rules.FlatBeamOffsetPerBeam;\n                }\n                this.autoVfBeams.push(vfBeam);\n            }\n        }\n    }\n\n    /**\n     * Complete the creation of VexFlow Tuplets in this measure\n     */\n    public finalizeTuplets(): void {\n        // The following line resets the created VF Tuplets and\n        // created them brand new. Is this needed? And more importantly,\n        // should the old tuplets be removed manually from the notes?\n        this.vftuplets = {};\n        for (const voiceID in this.tuplets) {\n            if (this.tuplets.hasOwnProperty(voiceID)) {\n                let vftuplets: VF.Tuplet[] = this.vftuplets[voiceID];\n                if (!vftuplets) {\n                    vftuplets = this.vftuplets[voiceID] = [];\n                }\n                for (const tupletBuilder of this.tuplets[voiceID]) {\n                    const tupletStaveNotes: VF.StaveNote[] = [];\n                    const tupletVoiceEntries: VexFlowVoiceEntry[] = tupletBuilder[1];\n                    for (const tupletVoiceEntry of tupletVoiceEntries) {\n                      tupletStaveNotes.push(((tupletVoiceEntry).vfStaveNote as StaveNote));\n                    }\n                    if (tupletStaveNotes.length > 1) {\n                      const tuplet: Tuplet = tupletBuilder[0];\n                      const notesOccupied: number = tuplet.Notes[0][0].NormalNotes;\n                      const bracketed: boolean = tuplet.Bracket ||\n                        (tuplet.TupletLabelNumber === 3 && this.rules.TripletsBracketed) ||\n                        (tuplet.TupletLabelNumber !== 3 && this.rules.TupletsBracketed);\n                      let location: number = VF.Tuplet.LOCATION_TOP;\n                      if (tuplet.tupletLabelNumberPlacement === PlacementEnum.Below) {\n                          location = VF.Tuplet.LOCATION_BOTTOM;\n                      }\n                      vftuplets.push(new VF.Tuplet( tupletStaveNotes,\n                                                          {\n                                                            bracketed: bracketed,\n                                                            location: location,\n                                                            notes_occupied: notesOccupied,\n                                                            num_notes: tuplet.TupletLabelNumber, //, location: -1, ratioed: true\n                                                            ratioed: this.rules.TupletsRatioed,\n                                                          }));\n                    } else {\n                        log.debug(\"Warning! Tuplet with no notes! Trying to ignore, but this is a serious problem.\");\n                    }\n                }\n            }\n        }\n    }\n\n    public layoutStaffEntry(graphicalStaffEntry: GraphicalStaffEntry): void {\n        return;\n    }\n\n    public graphicalMeasureCreatedCalculations(): void {\n        let graceSlur: boolean;\n        let graceGVoiceEntriesBefore: GraphicalVoiceEntry[] = [];\n        const graveGVoiceEntriesAdded: GraphicalVoiceEntry[] = [];\n        for (const graphicalStaffEntry of this.staffEntries as VexFlowStaffEntry[]) {\n            graceSlur = false;\n            graceGVoiceEntriesBefore = [];\n            // create vex flow Stave Notes:\n            for (const gve of graphicalStaffEntry.graphicalVoiceEntries) {\n                if (gve.parentVoiceEntry.IsGrace) {\n                    // save grace notes for the next non-grace note\n                    graceGVoiceEntriesBefore.push(gve);\n                    graveGVoiceEntriesAdded.push(gve);\n                    if (!graceSlur) {\n                        graceSlur = gve.parentVoiceEntry.GraceSlur;\n                    }\n                    continue;\n                }\n                (gve as VexFlowVoiceEntry).vfStaveNote = VexFlowConverter.StaveNote(gve);\n                //if (!gve.notes[0].sourceNote.PrintObject) {\n                    // note can now also be added as StaveNote instead of GhostNote, because we set it to transparent\n\n                    // previous method: add as GhostNote instead of StaveNote. Can cause formatting issues if critical notes are missing in the measure\n                    // don't render note. add ghost note, otherwise Vexflow can have issues with layouting when voices not complete.\n                    //(gve as VexFlowVoiceEntry).vfStaveNote = VexFlowConverter.GhostNote(gve.notes[0].sourceNote.Length);\n                    //graceGVoiceEntriesBefore = []; // if note is not rendered, its grace notes shouldn't be rendered, might need to be removed\n                    //continue;\n                //}\n                if (graceGVoiceEntriesBefore.length > 0) {\n                    // add grace notes that came before this main note to a GraceNoteGroup in Vexflow, attached to the main note\n                    const graceNotes: VF.GraceNote[] = [];\n                    for (let i: number = 0; i < graceGVoiceEntriesBefore.length; i++) {\n                        const gveGrace: VexFlowVoiceEntry = <VexFlowVoiceEntry>graceGVoiceEntriesBefore[i];\n                        //if (gveGrace.notes[0].sourceNote.PrintObject) {\n                        // grace notes should generally be rendered independently of main note instead of skipped if main note is invisible\n                        // could be an option to make grace notes transparent if main note is transparent. set grace notes' PrintObject to false then.\n                        gveGrace.GraceSlash = gveGrace.parentVoiceEntry.GraceNoteSlash;\n                        if (i > 0) {\n                            gveGrace.GraceSlash = false; // without this, Vexflow draws multiple grace slashes, which looks wrong.\n                        }\n                        const vfStaveNote: StaveNote = VexFlowConverter.StaveNote(gveGrace);\n                        gveGrace.vfStaveNote = vfStaveNote;\n                        graceNotes.push(vfStaveNote);\n                    }\n                    const graceNoteGroup: VF.GraceNoteGroup = new VF.GraceNoteGroup(graceNotes, graceSlur);\n                    ((gve as VexFlowVoiceEntry).vfStaveNote as StaveNote).addModifier(0, graceNoteGroup);\n                    graceGVoiceEntriesBefore = [];\n                }\n            }\n        }\n        // remaining grace notes at end of measure, turned into stand-alone grace notes:\n        if (graceGVoiceEntriesBefore.length > 0) {\n            for (const graceGve of graceGVoiceEntriesBefore) {\n                (graceGve as VexFlowVoiceEntry).vfStaveNote = VexFlowConverter.StaveNote(graceGve);\n                graceGve.parentVoiceEntry.GraceAfterMainNote = true;\n            }\n        }\n\n        // const t0: number = performance.now();\n        this.finalizeBeams();\n        // const t1: number = performance.now();\n        // console.log(\"Call to finalizeBeams in VexFlowMeasure took \" + (t1 - t0) + \" milliseconds.\");\n\n        this.finalizeTuplets();\n\n        const voices: Voice[] = this.getVoicesWithinMeasure();\n\n        // Calculate offsets for fingerings\n        if (this.rules.RenderFingerings) {\n            for (const graphicalStaffEntry of this.staffEntries as VexFlowStaffEntry[]) {\n                graphicalStaffEntry.setModifierXOffsets();\n            }\n        }\n\n        for (const voice of voices) {\n            if (!voice) {\n                continue;\n            }\n            //const isMainVoice: boolean = !(voice instanceof LinkedVoice);\n\n            // add a vexFlow voice for this voice:\n            this.vfVoices[voice.VoiceId] = new VF.Voice({\n                        beat_value: this.parentSourceMeasure.ActiveTimeSignature.Denominator,\n                        num_beats: this.parentSourceMeasure.ActiveTimeSignature.Numerator,\n                        resolution: VF.RESOLUTION,\n                    }).setMode(VF.Voice.Mode.SOFT);\n\n            const restFilledEntries: GraphicalVoiceEntry[] = this.getRestFilledVexFlowStaveNotesPerVoice(voice);\n                    // .sort((a,b) => a.)\n            // create vex flow voices and add tickables to it:\n            for (const voiceEntry of restFilledEntries) {\n                if (voiceEntry.parentVoiceEntry) {\n                    if (voiceEntry.parentVoiceEntry.IsGrace && !voiceEntry.parentVoiceEntry.GraceAfterMainNote) {\n                        continue;\n                    }\n                }\n\n                const vexFlowVoiceEntry: VexFlowVoiceEntry = voiceEntry as VexFlowVoiceEntry;\n                if (vexFlowVoiceEntry.vfStaveNote.getTicks().denominator === 0) {\n                    continue; // TODO not sure why the ticks aren't calculated correctly, see #1073\n                    // if denominator === 0, addTickable() below goes into an infinite loop.\n                }\n                if (voiceEntry.notes.length === 0 || !voiceEntry.notes[0] || !voiceEntry.notes[0].sourceNote.PrintObject) {\n                    // GhostNote, don't add modifiers like in-measure clefs\n                    this.vfVoices[voice.VoiceId].addTickable(vexFlowVoiceEntry.vfStaveNote);\n                    continue;\n                }\n\n                // check for in-measure clefs:\n                // Note: we used to only add clefs in main voice to not add them twice,\n                //   but there are many legitimate clefs e.g. in 2nd voices, and this doesn't seem to cause issues.\n                //if (isMainVoice) {\n                const vfse: VexFlowStaffEntry = vexFlowVoiceEntry.parentStaffEntry as VexFlowStaffEntry;\n                if (vfse && vfse.vfClefBefore) {\n                    // add clef as NoteSubGroup so that we get modifier layouting\n                    const clefModifier: NoteSubGroup = new NoteSubGroup( [vfse.vfClefBefore] );\n                    // The cast is necesary because...vexflow -> see types\n                    if (vexFlowVoiceEntry.vfStaveNote.getCategory && vexFlowVoiceEntry.vfStaveNote.getCategory() === \"stavenotes\") {\n                        // GhostNotes and other StemmableNotes don't have this function\n                        (vexFlowVoiceEntry.vfStaveNote as VF.StaveNote).addModifier(0, clefModifier);\n                    }\n                }\n\n                // add fingering\n                if (voiceEntry.parentVoiceEntry && this.rules.RenderFingerings) {\n                    if (this.rules.FingeringPosition === PlacementEnum.Left ||\n                        this.rules.FingeringPosition === PlacementEnum.Right) {\n                            this.createFingerings(voiceEntry);\n                    } // else created in MusicSheetCalculater.createFingerings() as Labels\n                    this.createStringNumber(voiceEntry);\n                }\n\n                // add Arpeggio\n                this.createArpeggio(voiceEntry);\n\n                this.vfVoices[voice.VoiceId].addTickable(vexFlowVoiceEntry.vfStaveNote);\n            }\n        }\n        this.setStemDirectionFromVexFlow();\n        for (const graceGVoiceEntry of graveGVoiceEntriesAdded) {\n            this.createFingerings(graceGVoiceEntry);\n            this.createStringNumber(graceGVoiceEntry);\n            this.createArpeggio(graceGVoiceEntry);\n        }\n        this.createArticulations();\n        this.createOrnaments();\n    }\n\n    private createArpeggio(voiceEntry: GraphicalVoiceEntry): void {\n        if (voiceEntry.parentVoiceEntry && voiceEntry.parentVoiceEntry.Arpeggio) {\n            const arpeggio: Arpeggio = voiceEntry.parentVoiceEntry.Arpeggio;\n            // TODO right now our arpeggio object has all arpeggio notes from arpeggios across all voices.\n            // see VoiceGenerator. Doesn't matter for Vexflow for now though\n            if (voiceEntry.notes && voiceEntry.notes.length > 1) {\n                const type: VF.Stroke.Type = VexFlowConverter.StrokeTypeFromArpeggioType(arpeggio.type);\n                const stroke: VF.Stroke = new VF.Stroke(type, {\n                    all_voices: this.rules.ArpeggiosGoAcrossVoices\n                    // default: false. This causes arpeggios to always go across all voices, which is often unwanted.\n                    // also, this can cause infinite height of stroke, see #546\n                });\n                //if (arpeggio.notes.length === vexFlowVoiceEntry.notes.length) { // different workaround for endless y bug\n                if (this.rules.RenderArpeggios) {\n                    (voiceEntry as VexFlowVoiceEntry).vfStaveNote.addStroke(0, stroke);\n                }\n            } else {\n                log.debug(`[OSMD] arpeggio in measure ${this.MeasureNumber} could not be drawn.\n                voice entry had less than two notes, arpeggio is likely between voice entries, not currently supported in Vexflow.`);\n                // TODO: create new arpeggio with all the arpeggio's notes (arpeggio.notes), perhaps with GhostNotes in a new vfStaveNote. not easy.\n            }\n        }\n    }\n\n    /**\n     * Copy the stem directions chosen by VexFlow to the StemDirection variable of the graphical notes\n     */\n    private setStemDirectionFromVexFlow(): void {\n        //if StemDirection was not set then read out what VexFlow has chosen\n        for ( const vfStaffEntry of this.staffEntries ) {\n            for ( const gVoiceEntry of vfStaffEntry.graphicalVoiceEntries) {\n                for ( const gnote of gVoiceEntry.notes) {\n                    const vfnote: [StemmableNote , number] = (gnote as VexFlowGraphicalNote).vfnote;\n                    if (!vfnote || !vfnote[0]) {\n                        continue;\n                    }\n\n                    const vfStemDir: number = vfnote[0].getStemDirection();\n                    switch (vfStemDir) {\n                        case (VF.Stem.UP):\n                            gVoiceEntry.parentVoiceEntry.StemDirection = StemDirectionType.Up;\n                            break;\n                        case (VF.Stem.DOWN):\n                            gVoiceEntry.parentVoiceEntry.StemDirection = StemDirectionType.Down;\n                            break;\n                        default:\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Create the articulations for all notes of the current staff entry\n     */\n    protected createArticulations(): void {\n        for (let idx: number = 0, len: number = this.staffEntries.length; idx < len; ++idx) {\n            const graphicalStaffEntry: VexFlowStaffEntry = (this.staffEntries[idx] as VexFlowStaffEntry);\n\n            // create vex flow articulation:\n            const graphicalVoiceEntries: GraphicalVoiceEntry[] = graphicalStaffEntry.graphicalVoiceEntries;\n            for (const gve of graphicalVoiceEntries) {\n                const vfStaveNote: StemmableNote = (gve as VexFlowVoiceEntry).vfStaveNote;\n                VexFlowConverter.generateArticulations(vfStaveNote, gve.notes[0].sourceNote.ParentVoiceEntry.Articulations, this.rules);\n            }\n        }\n    }\n\n    /**\n     * Create the ornaments for all notes of the current staff entry\n     */\n    protected createOrnaments(): void {\n        for (let idx: number = 0, len: number = this.staffEntries.length; idx < len; ++idx) {\n            const graphicalStaffEntry: VexFlowStaffEntry = (this.staffEntries[idx] as VexFlowStaffEntry);\n            const gvoices: { [voiceID: number]: GraphicalVoiceEntry } = graphicalStaffEntry.graphicalVoiceEntries;\n\n            for (const voiceID in gvoices) {\n                if (gvoices.hasOwnProperty(voiceID)) {\n                    const vfStaveNote: StemmableNote = (gvoices[voiceID] as VexFlowVoiceEntry).vfStaveNote;\n                    const ornamentContainer: OrnamentContainer = gvoices[voiceID].notes[0].sourceNote.ParentVoiceEntry.OrnamentContainer;\n                    if (ornamentContainer) {\n                        VexFlowConverter.generateOrnaments(vfStaveNote, ornamentContainer);\n                    }\n                }\n            }\n        }\n    }\n\n    protected createFingerings(voiceEntry: GraphicalVoiceEntry): void {\n        const vexFlowVoiceEntry: VexFlowVoiceEntry = voiceEntry as VexFlowVoiceEntry;\n        let numberOfFingerings: number = 0;\n        // count total number of fingerings\n        for (const note of voiceEntry.notes) {\n            const fingering: TechnicalInstruction = note.sourceNote.Fingering;\n            if (fingering) {\n                numberOfFingerings++;\n            }\n        }\n        let fingeringIndex: number = -1;\n        for (const note of voiceEntry.notes) {\n            const fingering: TechnicalInstruction = note.sourceNote.Fingering;\n            if (!fingering) {\n                fingeringIndex++;\n                continue;\n            }\n            fingeringIndex++; // 0 for first fingering\n            let fingeringPosition: PlacementEnum = this.rules.FingeringPosition;\n            //currently only relevant for grace notes, because we create other fingerings above/below in MusicSheetCalculator.createFingerings\n            if (this.rules.FingeringPositionGrace === PlacementEnum.AboveOrBelow) {\n                //if (this.rules.FingeringPosition === PlacementEnum.AboveOrBelow) {\n                if (this.isUpperStaffOfInstrument()) { // (e.g. piano right hand)\n                    fingeringPosition = PlacementEnum.Above;\n                } else if (this.isLowerStaffOfInstrument()) {\n                    fingeringPosition = PlacementEnum.Below;\n                }\n            }\n            if (fingering.placement !== PlacementEnum.NotYetDefined) {\n                fingeringPosition = fingering.placement;\n            }\n            let offsetX: number = this.rules.FingeringOffsetX;\n            let modifierPosition: number; // VF.Stavemodifier.Position\n            switch (fingeringPosition) {\n                default:\n                case PlacementEnum.Left:\n                    modifierPosition = VF.StaveModifier.Position.LEFT;\n                    offsetX -= note.baseFingeringXOffset * unitInPixels;\n                    break;\n                case PlacementEnum.Right:\n                    modifierPosition = VF.StaveModifier.Position.RIGHT;\n                    offsetX += note.baseFingeringXOffset * unitInPixels;\n                    break;\n                case PlacementEnum.Above:\n                    modifierPosition = VF.StaveModifier.Position.ABOVE;\n                    break;\n                case PlacementEnum.Below:\n                    modifierPosition = VF.StaveModifier.Position.BELOW;\n                    break;\n                case PlacementEnum.NotYetDefined: // automatic fingering placement, could be more complex/customizable\n                    const sourceStaff: Staff = voiceEntry.parentStaffEntry.sourceStaffEntry.ParentStaff;\n                    if (voiceEntry.notes.length > 1 || voiceEntry.parentStaffEntry.graphicalVoiceEntries.length > 1) {\n                        modifierPosition = VF.StaveModifier.Position.LEFT;\n                    } else if (sourceStaff.idInMusicSheet === 0) {\n                        modifierPosition = VF.StaveModifier.Position.ABOVE;\n                        fingeringPosition = PlacementEnum.Above;\n                    } else {\n                        modifierPosition = VF.StaveModifier.Position.BELOW;\n                        fingeringPosition = PlacementEnum.Below;\n                    }\n            }\n\n            const fretFinger: VF.FretHandFinger = new VF.FretHandFinger(fingering.value);\n            fretFinger.setPosition(modifierPosition);\n            fretFinger.setOffsetX(offsetX);\n            if (fingeringPosition === PlacementEnum.Above || fingeringPosition === PlacementEnum.Below) {\n                const offsetYSign: number = fingeringPosition === PlacementEnum.Above ? -1 : 1; // minus y is up\n                const ordering: number = fingeringPosition === PlacementEnum.Above ? fingeringIndex :\n                    numberOfFingerings - 1 - fingeringIndex; // reverse order for fingerings below staff\n                if (this.rules.FingeringInsideStafflines && numberOfFingerings > 1) { // y-shift for single fingering is ok\n                    // experimental, bounding boxes wrong for fretFinger above/below, better would be creating Labels\n                    // set y-shift. vexflow fretfinger simply places directly above/below note\n                    const perFingeringShift: number = fretFinger.getWidth() / 2;\n                    const shiftCount: number = numberOfFingerings * 2.5;\n                    fretFinger.setOffsetY(offsetYSign * (ordering + shiftCount) * perFingeringShift);\n                } else if (!this.rules.FingeringInsideStafflines) { // use StringNumber for placement above/below stafflines\n                    const stringNumber: VF.StringNumber = new VF.StringNumber(fingering.value);\n                    stringNumber.radius = 0; // hack to remove the circle around the number\n                    stringNumber.setPosition(modifierPosition);\n                    stringNumber.setOffsetY(offsetYSign * ordering * stringNumber.getWidth() * 2 / 3);\n                    // Vexflow made a mess with the addModifier signature that changes through each class so we just cast to any :(\n                    vexFlowVoiceEntry.vfStaveNote.addModifier((fingeringIndex as any), (stringNumber as any));\n                    continue;\n                }\n            }\n            // if (vexFlowVoiceEntry.vfStaveNote.getCategory() === \"tabnotes\") {\n              // TODO this doesn't work yet for tabnotes. don't add fingering for tabs for now.\n              // vexFlowVoiceEntry.vfStaveNote.addModifier(fretFinger, fingeringIndex);\n\n            // Vexflow made a mess with the addModifier signature that changes through each class so we just cast to any :(\n            vexFlowVoiceEntry.vfStaveNote.addModifier((fingeringIndex as any), (fretFinger as any));\n        }\n    }\n\n    protected createStringNumber(voiceEntry: GraphicalVoiceEntry): void {\n        if (!this.rules.RenderStringNumbersClassical) {\n            return;\n        }\n        const vexFlowVoiceEntry: VexFlowVoiceEntry = voiceEntry as VexFlowVoiceEntry;\n        voiceEntry.notes.forEach((note, stringIndex) => {\n            const stringInstruction: TechnicalInstruction = note.sourceNote.StringInstruction;\n            if (stringInstruction) {\n                let stringNumber: string = stringInstruction.value;\n                switch (stringNumber) {\n                    case \"1\":\n                        stringNumber = \"I\";\n                        break;\n                    case \"2\":\n                        stringNumber = \"II\";\n                        break;\n                    case \"3\":\n                        stringNumber = \"III\";\n                        break;\n                    case \"4\":\n                        stringNumber = \"IV\";\n                        break;\n                    case \"5\":\n                        stringNumber = \"V\";\n                        break;\n                    case \"6\":\n                        stringNumber = \"VI\";\n                        break;\n                    default:\n                        // log.warn(\"stringNumber > 6 not supported\"); // TODO do we need to support more?\n                        // leave stringNumber as is, warning not really necessary\n                }\n                const vfStringNumber: VF.StringNumber = new VF.StringNumber(stringNumber);\n                // Remove circle from string number. Not needed for\n                // disambiguation from fingerings since we use Roman\n                // Numerals for RenderStringNumbersClassical\n                vfStringNumber.radius = 0;\n                const offsetY: number = -this.rules.StringNumberOffsetY;\n                // if (note.sourceNote.halfTone < 50) { // place string number a little higher for notes with ledger lines below staff\n                //     // TODO also check for treble clef (adjust for viola, cello, etc)\n                //     offsetY += 10;\n                // }\n                if (voiceEntry.notes.length > 1 || voiceEntry.parentStaffEntry.graphicalVoiceEntries.length > 1) {\n                    vfStringNumber.setOffsetX(note.baseStringNumberXOffset * 13);\n                    vfStringNumber.setPosition(VF.Modifier.Position.RIGHT);\n                } else {\n                    vfStringNumber.setPosition(VF.Modifier.Position.ABOVE);\n                }\n                vfStringNumber.setOffsetY(offsetY);\n\n                vexFlowVoiceEntry.vfStaveNote.addModifier((stringIndex as any), (vfStringNumber as any)); // see addModifier() above\n            }\n        });\n    }\n\n    /**\n     * Creates a line from 'top' to this measure, of type 'lineType'\n     * @param top\n     * @param lineType\n     */\n    public lineTo(top: VexFlowMeasure, lineType: any): void {\n        const connector: VF.StaveConnector = new VF.StaveConnector(top.getVFStave(), this.stave);\n        connector.setType(lineType);\n        this.connectors.push(connector);\n    }\n\n    /**\n     * Return the VexFlow Stave corresponding to this graphicalMeasure\n     * @returns {VF.Stave}\n     */\n    public getVFStave(): VF.Stave {\n        return this.stave;\n    }\n\n    /**\n     * After re-running the formatting on the VexFlow Stave, update the\n     * space needed by Instructions (in VexFlow: StaveModifiers)\n     */\n    protected updateInstructionWidth(): void {\n        let vfBeginInstructionsWidth: number = 0;\n        let vfEndInstructionsWidth: number = 0;\n        const modifiers: VF.StaveModifier[] = this.stave.getModifiers();\n        for (const mod of modifiers) {\n            if (mod.getPosition() === StavePositionEnum.BEGIN) {  //VF.StaveModifier.Position.BEGIN) {\n                vfBeginInstructionsWidth += mod.getWidth() + mod.getPadding(undefined);\n            } else if (mod.getPosition() === StavePositionEnum.END) { //VF.StaveModifier.Position.END) {\n                vfEndInstructionsWidth += mod.getWidth() + mod.getPadding(undefined);\n            }\n        }\n\n        this.beginInstructionsWidth = (vfBeginInstructionsWidth ?? 0) / unitInPixels;\n        this.endInstructionsWidth = (vfEndInstructionsWidth ?? 0) / unitInPixels;\n    }\n\n    public addStaveTie(stavetie: VF.StaveTie, graphicalTie: GraphicalTie): void {\n        this.vfTies.push(stavetie);\n        graphicalTie.vfTie = stavetie;\n    }\n}\n\n// Gives the position of the Stave - replaces the function get Position() in the description of class StaveModifier in vexflow.d.ts\n// The latter gave an error because function cannot be defined in the class descriptions in vexflow.d.ts\nexport enum StavePositionEnum {\n    LEFT = 1,\n    RIGHT = 2,\n    ABOVE = 3,\n    BELOW = 4,\n    BEGIN = 5,\n    END = 6\n}\n","import Vex from \"vexflow\";\nimport VF = Vex.Flow;\nimport {SourceMeasure} from \"../../VoiceData/SourceMeasure\";\nimport {Staff} from \"../../VoiceData/Staff\";\nimport {StaffLine} from \"../StaffLine\";\nimport {Beam} from \"../../VoiceData/Beam\";\nimport {GraphicalNote} from \"../GraphicalNote\";\nimport {GraphicalStaffEntry} from \"../GraphicalStaffEntry\";\nimport {Tuplet} from \"../../VoiceData/Tuplet\";\nimport {GraphicalVoiceEntry} from \"../GraphicalVoiceEntry\";\nimport {Voice} from \"../../VoiceData/Voice\";\nimport {VexFlowMeasure} from \"./VexFlowMeasure\";\n\n// type StemmableNote = VF.StemmableNote;\n\n/** A GraphicalMeasure drawing a multiple-rest measure in Vexflow.\n *  Mostly copied from VexFlowMeasure.\n *  Even though most of those functions aren't needed, apparently you can't remove the layoutStaffEntry function.\n */\nexport class VexFlowMultiRestMeasure extends VexFlowMeasure {\n    private multiRestElement: any; // VexFlow: Element\n\n    constructor(staff: Staff, sourceMeasure: SourceMeasure = undefined, staffLine: StaffLine = undefined) {\n        super(staff, sourceMeasure, staffLine);\n        this.minimumStaffEntriesWidth = -1;\n\n        /*\n         * There is no case in which `staffLine === undefined && sourceMeasure === undefined` holds.\n         * Hence, it is not necessary to specify an `else` case.\n         * One can verify this through a usage search for this constructor.\n         */\n        if (staffLine) {\n            this.rules = staffLine.ParentMusicSystem.rules;\n        } else if (sourceMeasure) {\n            this.rules = sourceMeasure.Rules;\n        }\n\n        this.resetLayout();\n\n        this.multiRestElement = new VF.MultiMeasureRest(sourceMeasure.multipleRestMeasures, {\n            // number_line: 3\n        });\n    }\n\n    /**\n     * Draw this measure on a VexFlow CanvasContext\n     * @param ctx\n     */\n    public draw(ctx: Vex.IRenderContext): void {\n        // Draw stave lines\n        this.stave.setContext(ctx).draw();\n\n        this.multiRestElement.setStave(this.stave);\n        this.multiRestElement.setContext(ctx);\n        this.multiRestElement.draw();\n\n        // Draw vertical lines\n        for (const connector of this.connectors) {\n            connector.setContext(ctx).draw();\n        }\n    }\n\n    public format(): void {\n        // like most of the following methods, not necessary / can be simplified for MultiRestMeasure.\n    }\n\n    /**\n     * Returns all the voices that are present in this measure\n     */\n    public getVoicesWithinMeasure(): Voice[] {\n        return []; // we should still return a list here, not undefined, i guess.\n    }\n\n    /**\n     * Returns all the graphicalVoiceEntries of a given Voice.\n     * @param voice the voice for which the graphicalVoiceEntries shall be returned.\n     */\n    public getGraphicalVoiceEntriesPerVoice(voice: Voice): GraphicalVoiceEntry[] {\n        return [];\n    }\n\n    /**\n     * Finds the gaps between the existing notes within a measure.\n     * Problem here is, that the graphicalVoiceEntry does not exist yet and\n     * that Tied notes are not present in the normal voiceEntries.\n     * To handle this, calculation with absolute timestamps is needed.\n     * And the graphical notes have to be analysed directly (and not the voiceEntries, as it actually should be -> needs refactoring)\n     * @param voice the voice for which the ghost notes shall be searched.\n     */\n    protected getRestFilledVexFlowStaveNotesPerVoice(voice: Voice): GraphicalVoiceEntry[] {\n        return [];\n    }\n\n    /**\n     * Add a note to a beam\n     * @param graphicalNote\n     * @param beam\n     */\n    public handleBeam(graphicalNote: GraphicalNote, beam: Beam): void {\n        return;\n    }\n\n    public handleTuplet(graphicalNote: GraphicalNote, tuplet: Tuplet): void {\n        return;\n    }\n\n    /**\n     * Complete the creation of VexFlow Beams in this measure\n     */\n    public finalizeBeams(): void {\n        return;\n    }\n\n    /**\n     * Complete the creation of VexFlow Tuplets in this measure\n     */\n    public finalizeTuplets(): void {\n        return;\n    }\n\n    // this needs to exist, for some reason, or it won't be found, even though i can't find the usage.\n    public layoutStaffEntry(graphicalStaffEntry: GraphicalStaffEntry): void {\n        return;\n    }\n\n    public graphicalMeasureCreatedCalculations(): void {\n        return;\n    }\n\n\n    /**\n     * Create the articulations for all notes of the current staff entry\n     */\n    protected createArticulations(): void {\n        return;\n    }\n\n    /**\n     * Create the ornaments for all notes of the current staff entry\n     */\n    protected createOrnaments(): void {\n        return;\n    }\n\n    protected createFingerings(voiceEntry: GraphicalVoiceEntry): void {\n        return;\n    }\n\n    /**\n     * Return the VexFlow Stave corresponding to this graphicalMeasure\n     * @returns {VF.Stave}\n     */\n    public getVFStave(): VF.Stave {\n        return this.stave;\n    }\n}\n","import { MusicSheetCalculator } from \"../MusicSheetCalculator\";\nimport { VexFlowGraphicalSymbolFactory } from \"./VexFlowGraphicalSymbolFactory\";\nimport { GraphicalMeasure } from \"../GraphicalMeasure\";\nimport { StaffLine } from \"../StaffLine\";\nimport { SkyBottomLineBatchCalculator } from \"../SkyBottomLineBatchCalculator\";\nimport { VoiceEntry } from \"../../VoiceData/VoiceEntry\";\nimport { GraphicalNote } from \"../GraphicalNote\";\nimport { GraphicalStaffEntry } from \"../GraphicalStaffEntry\";\nimport { GraphicalTie } from \"../GraphicalTie\";\nimport { Tie } from \"../../VoiceData/Tie\";\nimport { SourceMeasure } from \"../../VoiceData/SourceMeasure\";\nimport { MultiExpression } from \"../../VoiceData/Expressions/MultiExpression\";\nimport { RepetitionInstruction } from \"../../VoiceData/Instructions/RepetitionInstruction\";\nimport { Beam } from \"../../VoiceData/Beam\";\nimport { ClefInstruction } from \"../../VoiceData/Instructions/ClefInstruction\";\nimport { OctaveEnum, OctaveShift } from \"../../VoiceData/Expressions/ContinuousExpressions/OctaveShift\";\nimport { Fraction } from \"../../../Common/DataObjects/Fraction\";\nimport { LyricWord } from \"../../VoiceData/Lyrics/LyricsWord\";\nimport { OrnamentContainer } from \"../../VoiceData/OrnamentContainer\";\nimport { Articulation } from \"../../VoiceData/Articulation\";\nimport { Tuplet } from \"../../VoiceData/Tuplet\";\nimport { VexFlowMeasure } from \"./VexFlowMeasure\";\nimport { VexFlowTextMeasurer } from \"./VexFlowTextMeasurer\";\nimport Vex from \"vexflow\";\nimport VF = Vex.Flow;\nimport log from \"loglevel\";\nimport { unitInPixels } from \"./VexFlowMusicSheetDrawer\";\nimport { VexFlowGraphicalNote } from \"./VexFlowGraphicalNote\";\nimport { TechnicalInstruction } from \"../../VoiceData/Instructions/TechnicalInstruction\";\nimport { GraphicalLyricEntry } from \"../GraphicalLyricEntry\";\nimport { GraphicalLabel } from \"../GraphicalLabel\";\nimport { LyricsEntry } from \"../../VoiceData/Lyrics/LyricsEntry\";\nimport { GraphicalLyricWord } from \"../GraphicalLyricWord\";\nimport { VexFlowStaffEntry } from \"./VexFlowStaffEntry\";\nimport { VexFlowOctaveShift } from \"./VexFlowOctaveShift\";\nimport { VexFlowInstantaneousDynamicExpression } from \"./VexFlowInstantaneousDynamicExpression\";\nimport { Slur } from \"../../VoiceData/Expressions/ContinuousExpressions/Slur\";\n/* VexFlow Version - for later use\n// import { VexFlowSlur } from \"./VexFlowSlur\";\n// import { VexFlowStaffLine } from \"./VexFlowStaffLine\";\n// import { VexFlowVoiceEntry } from \"./VexFlowVoiceEntry\";\n*/\nimport { PointF2D } from \"../../../Common/DataObjects/PointF2D\";\nimport { TextAlignmentEnum, TextAlignment } from \"../../../Common/Enums/TextAlignment\";\nimport { GraphicalSlur } from \"../GraphicalSlur\";\nimport { BoundingBox } from \"../BoundingBox\";\nimport { ContinuousDynamicExpression } from \"../../VoiceData/Expressions/ContinuousExpressions/ContinuousDynamicExpression\";\nimport { VexFlowContinuousDynamicExpression } from \"./VexFlowContinuousDynamicExpression\";\nimport { InstantaneousTempoExpression, TempoEnum } from \"../../VoiceData/Expressions/InstantaneousTempoExpression\";\nimport { AlignRestOption } from \"../../../OpenSheetMusicDisplay/OSMDOptions\";\nimport { VexFlowStaffLine } from \"./VexFlowStaffLine\";\nimport { EngravingRules } from \"../EngravingRules\";\nimport { VexflowStafflineNoteCalculator } from \"./VexflowStafflineNoteCalculator\";\nimport { MusicSystem } from \"../MusicSystem\";\nimport { NoteTypeHandler } from \"../../VoiceData/NoteType\";\nimport { VexFlowConverter } from \"./VexFlowConverter\";\nimport { TabNote } from \"../../VoiceData/TabNote\";\nimport { PlacementEnum } from \"../../VoiceData/Expressions\";\nimport { GraphicalChordSymbolContainer } from \"../GraphicalChordSymbolContainer\";\nimport { RehearsalExpression } from \"../../VoiceData/Expressions/RehearsalExpression\";\n\nexport class VexFlowMusicSheetCalculator extends MusicSheetCalculator {\n  /** space needed for a dash for lyrics spacing, calculated once */\n  private dashSpace: number;\n  public beamsNeedUpdate: boolean = false;\n\n  constructor(rules: EngravingRules) {\n    super();\n    this.rules = rules;\n    MusicSheetCalculator.symbolFactory = new VexFlowGraphicalSymbolFactory();\n    MusicSheetCalculator.TextMeasurer = new VexFlowTextMeasurer(this.rules);\n    MusicSheetCalculator.stafflineNoteCalculator = new VexflowStafflineNoteCalculator(this.rules);\n\n    // prepare Vexflow font (doesn't affect Vexflow 1.x). It seems like this has to be done here for now, otherwise it's too slow for the generateImages script.\n    //   (first image will have the non-updated font, in this case the Vexflow default Bravura, while we want Gonville here)\n    if (this.rules.DefaultVexFlowNoteFont?.toLowerCase() === \"gonville\") {\n      (Vex.Flow as any).DEFAULT_FONT_STACK = [(Vex.Flow as any).Fonts?.Gonville, (Vex.Flow as any).Fonts?.Bravura, (Vex.Flow as any).Fonts?.Custom];\n    } else if (this.rules.DefaultVexFlowNoteFont?.toLowerCase() === \"petaluma\") {\n      (Vex.Flow as any).DEFAULT_FONT_STACK = [(Vex.Flow as any).Fonts?.Petaluma, (Vex.Flow as any).Fonts?.Gonville, (Vex.Flow as any).Fonts?.Bravura];\n    }\n    // else keep new vexflow default Bravura (more cursive, bold)\n  }\n\n  protected clearRecreatedObjects(): void {\n    super.clearRecreatedObjects();\n    MusicSheetCalculator.stafflineNoteCalculator = new VexflowStafflineNoteCalculator(this.rules);\n    for (const graphicalMeasures of this.graphicalMusicSheet.MeasureList) {\n      for (const graphicalMeasure of graphicalMeasures) {\n        (<VexFlowMeasure>graphicalMeasure)?.clean();\n      }\n    }\n  }\n\n  protected formatMeasures(): void {\n    // let totalFinalizeBeamsTime: number = 0;\n    for (const verticalMeasureList of this.graphicalMusicSheet.MeasureList) {\n      if (!verticalMeasureList || !verticalMeasureList[0]) {\n        continue;\n      }\n      const firstMeasure: VexFlowMeasure = verticalMeasureList[0] as VexFlowMeasure;\n      // first measure has formatting method as lambda function object, but formats all measures. TODO this could be refactored\n      firstMeasure.format();\n      for (const measure of verticalMeasureList) {\n        for (const staffEntry of measure.staffEntries) {\n          (<VexFlowStaffEntry>staffEntry).calculateXPosition();\n        }\n        // const t0: number = performance.now();\n        if (true || this.beamsNeedUpdate) {\n          // finalizeBeams takes a few milliseconds, so we can save some performance here sometimes,\n          // but we'd have to check for every setting change that would affect beam rendering. See #843\n          (measure as VexFlowMeasure).finalizeBeams(); // without this, when zooming a lot (e.g. 250%), beams keep their old, now wrong slope.\n          // totalFinalizeBeamsTime += performance.now() - t0;\n          // console.log(\"Total calls to finalizeBeams in VexFlowMusicSheetCalculator took \" + totalFinalizeBeamsTime + \" milliseconds.\");\n        }\n      }\n    }\n    this.beamsNeedUpdate = false;\n  }\n\n  //protected clearSystemsAndMeasures(): void {\n  //    for (let measure of measures) {\n  //\n  //    }\n  //}\n\n  /**\n   * Calculates the x layout of the staff entries within the staff measures belonging to one source measure.\n   * All staff entries are x-aligned throughout all vertically aligned staff measures.\n   * This method is called within calculateXLayout.\n   * The staff entries are aligned with minimum needed x distances.\n   * The MinimumStaffEntriesWidth of every measure will be set - needed for system building.\n   * Prepares the VexFlow formatter for later formatting\n   * Does not calculate measure width from lyrics (which is called from MusicSheetCalculator)\n   * @param measures\n   * @returns the minimum required x width of the source measure (=list of staff measures)\n   */\n  protected calculateMeasureXLayout(measures: GraphicalMeasure[]): number {\n    const visibleMeasures: GraphicalMeasure[] = [];\n    for (const measure of measures) {\n      if (measure) {\n        visibleMeasures.push(measure);\n      }\n    }\n    if (visibleMeasures.length === 0) { // e.g. after Multiple Rest measures (VexflowMultiRestMeasure)\n      return 0;\n    }\n    measures = visibleMeasures;\n\n    // Format the voices\n    const allVoices: VF.Voice[] = [];\n    const formatter: VF.Formatter = new VF.Formatter({\n      // maxIterations: 2,\n      softmaxFactor: this.rules.SoftmaxFactorVexFlow // this setting is only applied in Vexflow 3.x. also this needs @types/vexflow ^3.0.0\n    });\n\n    let maxStaffEntries: number = measures[0].staffEntries.length;\n    let maxStaffEntriesPlusAccidentals: number = 1;\n    for (const measure of measures) {\n      if (!measure) {\n        continue;\n      }\n      let measureAccidentals: number = 0;\n      for (const staffEntry of measure.staffEntries) {\n        measureAccidentals += (staffEntry as VexFlowStaffEntry).setMaxAccidentals(); // staffEntryAccidentals\n      }\n      // TODO the if is a TEMP change to show pure diff for pickup measures, should be done for all measures, but increases spacing\n      if (measure.parentSourceMeasure.ImplicitMeasure) {\n        maxStaffEntries = Math.max(measure.staffEntries.length, maxStaffEntries);\n        maxStaffEntriesPlusAccidentals = Math.max(measure.staffEntries.length + measureAccidentals, maxStaffEntriesPlusAccidentals);\n      }\n      const mvoices: { [voiceID: number]: VF.Voice } = (measure as VexFlowMeasure).vfVoices;\n      const voices: VF.Voice[] = [];\n      for (const voiceID in mvoices) {\n        if (mvoices.hasOwnProperty(voiceID)) {\n          const mvoice: any = mvoices[voiceID];\n          if (measure.hasOnlyRests && !mvoice.ticksUsed.equals(mvoice.totalTicks)) {\n            // fix layouting issues with whole measure rests in one staff and notes in other. especially in 12/8 rthythm (#1187)\n            mvoice.ticksUsed = mvoice.totalTicks;\n            // Vexflow 1.2.93: needs VexFlowPatch for formatter.js (see #1187)\n          }\n          voices.push(mvoice);\n          allVoices.push(mvoice);\n        }\n      }\n\n      if (voices.length === 0) {\n        log.debug(\"Found a measure with no voices. Continuing anyway.\", mvoices);\n        // no need to log this, measures with no voices/notes are fine. see OSMDOptions.fillEmptyMeasuresWithWholeRest\n        continue;\n      }\n      // all voices that belong to one stave are collectively added to create a common context in VexFlow.\n      formatter.joinVoices(voices);\n    }\n\n    let minStaffEntriesWidth: number = 12; // a typical measure has roughly a length of 3*StaffHeight (3*4 = 12)\n    const parentSourceMeasure: SourceMeasure = measures[0].parentSourceMeasure;\n    // the voicing space bonus addition makes the voicing more relaxed. With a bonus of 0 the notes are basically completely squeezed together.\n    const staffEntryFactor: number = 0.3;\n\n    if (allVoices.length > 0) {\n      minStaffEntriesWidth = formatter.preCalculateMinTotalWidth(allVoices) / unitInPixels\n      * this.rules.VoiceSpacingMultiplierVexflow\n      + this.rules.VoiceSpacingAddendVexflow\n      + maxStaffEntries * staffEntryFactor; // TODO use maxStaffEntriesPlusAccidentals here as well, adjust spacing\n      if (parentSourceMeasure?.ImplicitMeasure) {\n        // shrink width in the ratio that the pickup measure is shorter compared to a full measure('s time signature):\n        minStaffEntriesWidth = parentSourceMeasure.Duration.RealValue / parentSourceMeasure.ActiveTimeSignature.RealValue * minStaffEntriesWidth;\n        // e.g. a 1/4 pickup measure in a 3/4 time signature should be 1/4 / 3/4 = 1/3 as long (a third)\n        // it seems like this should be respected by staffEntries.length and preCaculateMinTotalWidth, but apparently not,\n        //   without this the pickup measures were always too long.\n\n        // add more than the original staffEntries scaling again: (removing it above makes it too short)\n        if (maxStaffEntries > 1) { // not necessary for only 1 StaffEntry\n          minStaffEntriesWidth += maxStaffEntriesPlusAccidentals * staffEntryFactor * 1.5; // don't scale this for implicit measures\n          // in fact overscale it, this needs a lot of space the more staffEntries (and modifiers like accidentals) there are\n        }\n        minStaffEntriesWidth *= this.rules.PickupMeasureWidthMultiplier;\n      }\n\n        // TODO this could use some fine-tuning. currently using *1.5 + 1 by default, results in decent spacing.\n      // firstMeasure.formatVoices = (w: number) => {\n      //     formatter.format(allVoices, w);\n      // };\n      MusicSheetCalculator.setMeasuresMinStaffEntriesWidth(measures, minStaffEntriesWidth);\n\n      const formatVoicesDefault: (w: number, p: VexFlowMeasure) => void = (w, p) => {\n        formatter.formatToStave(allVoices, p.getVFStave());\n      };\n      const formatVoicesAlignRests: (w: number,  p: VexFlowMeasure) => void = (w, p) => {\n        formatter.formatToStave(allVoices, p.getVFStave(), {\n          align_rests: true,\n          context: undefined\n        });\n      };\n\n      for (const measure of measures) {\n        // determine whether to align rests\n        if (this.rules.AlignRests === AlignRestOption.Never) {\n          (measure as VexFlowMeasure).formatVoices = formatVoicesDefault;\n        } else if (this.rules.AlignRests === AlignRestOption.Always) {\n          (measure as VexFlowMeasure).formatVoices = formatVoicesAlignRests;\n        } else if (this.rules.AlignRests === AlignRestOption.Auto) {\n          let alignRests: boolean = false;\n          for (const staffEntry of measure.staffEntries) {\n            let collidableVoiceEntries: number = 0;\n            let numberOfRests: number = 0;\n            for (const voiceEntry of staffEntry.graphicalVoiceEntries) {\n              if (!voiceEntry.parentVoiceEntry.IsGrace) {\n                if (voiceEntry && voiceEntry.notes && voiceEntry.notes[0] && voiceEntry.notes[0].sourceNote) {// TODO null chaining, TS 3.7\n                  if (voiceEntry.notes[0].sourceNote.PrintObject) { // only respect collision when not invisible\n                    collidableVoiceEntries++;\n                  }\n                }\n              }\n              if (voiceEntry && voiceEntry.notes && voiceEntry.notes[0] && voiceEntry.notes[0].sourceNote) {// TODO null chaining, TS 3.7\n                if (voiceEntry.notes[0].sourceNote.isRest() && voiceEntry.notes[0].sourceNote.PrintObject) {\n                  numberOfRests++; // only align rests if there is actually a rest (which could collide)\n                }\n              }\n              if (collidableVoiceEntries > 1 && numberOfRests >= 1) {\n                // TODO could add further checks like if any of the already checked voice entries actually collide\n                alignRests = true;\n                break;\n              }\n            }\n            if (alignRests) {\n              break;\n            }\n          }\n\n          // set measure's format function\n          if (alignRests) {\n            (measure as VexFlowMeasure).formatVoices = formatVoicesAlignRests;\n          } else {\n            (measure as VexFlowMeasure).formatVoices = formatVoicesDefault;\n          }\n        }\n\n        // format first measure with minimum width\n        if (measure === measures[0]) {\n          const vexflowMeasure: VexFlowMeasure = (measure as VexFlowMeasure);\n          // prepare format function for voices, will be called later for formatting measure again\n          //vexflowMeasure.formatVoices = formatVoicesDefault;\n\n          // format now for minimum width, calculateMeasureWidthFromLyrics later\n          vexflowMeasure.formatVoices(minStaffEntriesWidth * unitInPixels, vexflowMeasure);\n        } else {\n          //(measure as VexFlowMeasure).formatVoices = undefined;\n          // TODO why was the formatVoices function disabled for other measures? would now disable the new align rests option.\n        }\n      }\n    }\n\n    for (const graphicalMeasure of measures) {\n      if (!graphicalMeasure) {\n        continue;\n      }\n      for (const staffEntry of graphicalMeasure.staffEntries) {\n        // here the measure modifiers are not yet set, therefore the begin instruction width will be empty\n        (<VexFlowStaffEntry>staffEntry).calculateXPosition();\n      }\n    }\n    //Can't quite figure out why, but this is the calculation that needs redone to have consistent rendering.\n    //The first render of a sheet vs. subsequent renders are calculated differently by vexflow without this re-joining of the voices\n    for (const measure of measures) {\n      if (!measure) {\n        continue;\n      }\n      const mvoices: { [voiceID: number]: VF.Voice } = (measure as VexFlowMeasure).vfVoices;\n      const voices: VF.Voice[] = [];\n      for (const voiceID in mvoices) {\n        if (mvoices.hasOwnProperty(voiceID)) {\n          voices.push(mvoices[voiceID]);\n        }\n      }\n\n      if (voices.length === 0) {\n        log.debug(\"Found a measure with no voices. Continuing anyway.\", mvoices);\n        // no need to log this, measures with no voices/notes are fine. see OSMDOptions.fillEmptyMeasuresWithWholeRest\n        continue;\n      }\n      // all voices that belong to one stave are collectively added to create a common context in VexFlow.\n      formatter.joinVoices(voices);\n    }\n\n    // calculateMeasureWidthFromLyrics() will be called from MusicSheetCalculator after this\n    return minStaffEntriesWidth;\n  }\n\n  private calculateElongationFactor(containers: (GraphicalLyricEntry|GraphicalChordSymbolContainer)[], staffEntry: GraphicalStaffEntry, lastEntryDict: any,\n                                    oldMinimumStaffEntriesWidth: number, elongationFactorForMeasureWidth: number,\n                                    measureNumber: number, oldMinSpacing: number, nextMeasureOverlap: number): number {\n    let newElongationFactorForMeasureWidth: number = elongationFactorForMeasureWidth;\n    let currentContainerIndex: number = 0;\n\n    for (const container of containers) {\n      const alignment: TextAlignmentEnum = container.GraphicalLabel.Label.textAlignment;\n      let minSpacing: number = oldMinSpacing;\n\n      let overlapAllowedIntoNextMeasure: number = nextMeasureOverlap;\n\n      if (container instanceof GraphicalLyricEntry && container.ParentLyricWord) {\n        // spacing for multi-syllable words\n        if (container.LyricsEntry.SyllableIndex > 0) { // syllables after first\n          // give a little more spacing for dash between syllables\n          minSpacing = this.rules.BetweenSyllableMinimumDistance;\n          if (TextAlignment.IsCenterAligned(alignment)) {\n            minSpacing += 1.0; // TODO check for previous lyric alignment too. though center is not standard\n            // without this, there's not enough space for dashes between long syllables on eigth notes\n          }\n        }\n        const syllables: LyricsEntry[] = container.ParentLyricWord.GetLyricWord.Syllables;\n        if (syllables.length > 1) {\n          if (container.LyricsEntry.SyllableIndex < syllables.length - 1) {\n            // if a middle syllable of a word, give less measure overlap into next measure, to give room for dash\n            if (this.dashSpace === undefined) { // don't replace undefined check\n              this.dashSpace = 1.5;\n              // better method, doesn't work:\n              // this.dashLength = new GraphicalLabel(new Label(\"-\"), this.rules.LyricsHeight, TextAlignmentEnum.CenterBottom)\n              //   .PositionAndShape.Size.width; // always returns 0\n            }\n            overlapAllowedIntoNextMeasure -= this.dashSpace;\n          }\n        }\n      }\n\n      const bBox: BoundingBox = container instanceof GraphicalLyricEntry ? container.GraphicalLabel.PositionAndShape : container.PositionAndShape;\n      const labelWidth: number = bBox.Size.width;\n      const staffEntryXPosition: number = (staffEntry as VexFlowStaffEntry).PositionAndShape.RelativePosition.x;\n      const xPosition: number = staffEntryXPosition + bBox.BorderMarginLeft;\n\n      if (lastEntryDict[currentContainerIndex] !== undefined) {\n        if (lastEntryDict[currentContainerIndex].extend) {\n          // TODO handle extend of last entry (extend is stored in lyrics entry of preceding syllable)\n          // only necessary for center alignment\n        }\n      }\n\n      let spacingNeededToLastContainer: number;\n      let currentSpacingToLastContainer: number; // undefined for first container in measure\n      if (lastEntryDict[currentContainerIndex]) {\n        currentSpacingToLastContainer = xPosition - lastEntryDict[currentContainerIndex].xPosition;\n      }\n\n      let currentSpacingToMeasureEnd: number;\n      let spacingNeededToMeasureEnd: number;\n      const maxXInMeasure: number = oldMinimumStaffEntriesWidth * elongationFactorForMeasureWidth;\n\n      if (TextAlignment.IsCenterAligned(alignment)) {\n        overlapAllowedIntoNextMeasure /= 4; // reserve space for overlap from next measure. its first note can't be spaced.\n        currentSpacingToMeasureEnd = maxXInMeasure - xPosition;\n        spacingNeededToMeasureEnd = (labelWidth / 2) - overlapAllowedIntoNextMeasure;\n        // spacing to last lyric only done if not first lyric in measure:\n        if (lastEntryDict[currentContainerIndex]) {\n          spacingNeededToLastContainer =\n            lastEntryDict[currentContainerIndex].labelWidth / 2 + labelWidth / 2 + minSpacing;\n        }\n      } else if (TextAlignment.IsLeft(alignment)) {\n        currentSpacingToMeasureEnd = maxXInMeasure - xPosition;\n        spacingNeededToMeasureEnd = labelWidth - overlapAllowedIntoNextMeasure;\n        if (lastEntryDict[currentContainerIndex]) {\n          spacingNeededToLastContainer = lastEntryDict[currentContainerIndex].labelWidth + minSpacing;\n        }\n      }\n\n      // get factor of how much we need to stretch the measure to space the current lyric\n      let elongationFactorForMeasureWidthForCurrentContainer: number = 1;\n      const elongationFactorNeededForMeasureEnd: number =\n        spacingNeededToMeasureEnd / currentSpacingToMeasureEnd;\n      let elongationFactorNeededForLastContainer: number = 1;\n\n      if (container instanceof GraphicalLyricEntry && container.LyricsEntry) {\n        if (lastEntryDict[currentContainerIndex]) { // if previous lyric needs more spacing than measure end, take that spacing\n          const lastNoteDuration: Fraction = lastEntryDict[currentContainerIndex].sourceNoteDuration;\n          elongationFactorNeededForLastContainer = spacingNeededToLastContainer / currentSpacingToLastContainer;\n          if ((lastNoteDuration.Denominator) > 4) {\n            elongationFactorNeededForLastContainer *= 1.1; // from 1.2 upwards, this unnecessarily bloats shorter measures\n            // spacing in Vexflow depends on note duration, our minSpacing is calibrated for quarter notes\n            // if we double the measure length, the distance between eigth notes only gets half of the added length\n            // compared to a quarter note.\n          }\n        }\n      } else if (lastEntryDict[currentContainerIndex]) {\n        elongationFactorNeededForLastContainer =\n        spacingNeededToLastContainer / currentSpacingToLastContainer;\n      }\n\n      elongationFactorForMeasureWidthForCurrentContainer = Math.max(\n        elongationFactorNeededForMeasureEnd,\n        elongationFactorNeededForLastContainer\n      );\n\n      newElongationFactorForMeasureWidth = Math.max(\n        newElongationFactorForMeasureWidth,\n        elongationFactorForMeasureWidthForCurrentContainer\n      );\n\n      let overlap: number = Math.max((spacingNeededToLastContainer - currentSpacingToLastContainer) || 0, 0);\n      if (lastEntryDict[currentContainerIndex]) {\n        overlap += lastEntryDict[currentContainerIndex].cumulativeOverlap;\n      }\n\n      // set up information about this lyric entry of verse j for next lyric entry of verse j\n      lastEntryDict[currentContainerIndex] = {\n        cumulativeOverlap: overlap,\n        extend: container instanceof GraphicalLyricEntry ? container.LyricsEntry.extend : false,\n        labelWidth: labelWidth,\n        measureNumber: measureNumber,\n        sourceNoteDuration: container instanceof GraphicalLyricEntry ? (container.LyricsEntry && container.LyricsEntry.Parent.Notes[0].Length) : false,\n        text: container instanceof GraphicalLyricEntry ? container.LyricsEntry.Text : container.GraphicalLabel.Label.text,\n        xPosition: xPosition,\n      };\n\n      currentContainerIndex++;\n    }\n\n    return newElongationFactorForMeasureWidth;\n  }\n\n  public calculateElongationFactorFromStaffEntries(staffEntries: GraphicalStaffEntry[], oldMinimumStaffEntriesWidth: number,\n                                                  elongationFactorForMeasureWidth: number, measureNumber: number): number {\n    interface EntryInfo {\n      cumulativeOverlap: number;\n      extend: boolean;\n      labelWidth: number;\n      xPosition: number;\n      sourceNoteDuration: Fraction;\n      text: string;\n      measureNumber: number;\n    }\n    // holds lyrics entries for verses i\n    interface EntryDict {\n      [i: number]: EntryInfo;\n    }\n\n    let newElongationFactorForMeasureWidth: number = elongationFactorForMeasureWidth;\n\n    const lastLyricEntryDict: EntryDict = {}; // holds info about last lyric entries for all verses j???\n    const lastChordEntryDict: EntryDict = {}; // holds info about last chord entries for all verses j???\n\n    // for all staffEntries i, each containing the lyric entry for all verses at that timestamp in the measure\n    for (const staffEntry of staffEntries) {\n      if (staffEntry.LyricsEntries.length > 0) {\n        newElongationFactorForMeasureWidth =\n          this.calculateElongationFactor(\n            staffEntry.LyricsEntries,\n            staffEntry,\n            lastLyricEntryDict,\n            oldMinimumStaffEntriesWidth,\n            newElongationFactorForMeasureWidth,\n            measureNumber,\n            this.rules.HorizontalBetweenLyricsDistance,\n            this.rules.LyricOverlapAllowedIntoNextMeasure,\n          );\n      }\n      if (staffEntry.graphicalChordContainers.length > 0) {\n        newElongationFactorForMeasureWidth =\n          this.calculateElongationFactor(\n            staffEntry.graphicalChordContainers,\n            staffEntry,\n            lastChordEntryDict,\n            oldMinimumStaffEntriesWidth,\n            newElongationFactorForMeasureWidth,\n            measureNumber,\n            this.rules.ChordSymbolXSpacing,\n            this.rules.ChordOverlapAllowedIntoNextMeasure,\n          );\n      }\n    }\n\n    return newElongationFactorForMeasureWidth;\n  }\n\n  public calculateMeasureWidthFromStaffEntries(measuresVertical: GraphicalMeasure[], oldMinimumStaffEntriesWidth: number): number {\n    let elongationFactorForMeasureWidth: number = 1;\n\n    for (const measure of measuresVertical) {\n      if (!measure || measure.staffEntries.length === 0) {\n        continue;\n      }\n\n      elongationFactorForMeasureWidth =\n        this.calculateElongationFactorFromStaffEntries(\n          measure.staffEntries,\n          oldMinimumStaffEntriesWidth,\n          elongationFactorForMeasureWidth,\n          measure.MeasureNumber,\n        );\n\n    }\n    elongationFactorForMeasureWidth = Math.min(elongationFactorForMeasureWidth, this.rules.MaximumLyricsElongationFactor);\n    // TODO check when this is > 2.0. there seems to be an error here where this is unnecessarily > 2 in Beethoven Geliebte.\n\n    const newMinimumStaffEntriesWidth: number = oldMinimumStaffEntriesWidth * elongationFactorForMeasureWidth;\n\n    return newMinimumStaffEntriesWidth;\n  }\n\n  protected createGraphicalTie(tie: Tie, startGse: GraphicalStaffEntry, endGse: GraphicalStaffEntry,\n                               startNote: GraphicalNote, endNote: GraphicalNote): GraphicalTie {\n    return new GraphicalTie(tie, startNote, endNote);\n  }\n\n\n  protected updateStaffLineBorders(staffLine: StaffLine): void {\n    staffLine.SkyBottomLineCalculator.updateStaffLineBorders();\n  }\n\n  protected graphicalMeasureCreatedCalculations(measure: GraphicalMeasure): void {\n    (measure as VexFlowMeasure).rules = this.rules;\n    (measure as VexFlowMeasure).graphicalMeasureCreatedCalculations();\n  }\n\n  /**\n   * Can be used to calculate articulations, stem directions, helper(ledger) lines, and overlapping note x-displacement.\n   * Is Excecuted per voice entry of a staff entry.\n   * After that layoutStaffEntry is called.\n   * @param voiceEntry\n   * @param graphicalNotes\n   * @param graphicalStaffEntry\n   * @param hasPitchedNote\n   */\n  protected layoutVoiceEntry(voiceEntry: VoiceEntry, graphicalNotes: GraphicalNote[], graphicalStaffEntry: GraphicalStaffEntry,\n                             hasPitchedNote: boolean): void {\n      for (let i: number = 0; i < graphicalNotes.length; i++) {\n        graphicalNotes[i] = MusicSheetCalculator.stafflineNoteCalculator.positionNote(graphicalNotes[i]);\n      }\n  }\n\n  /**\n   * Do all layout calculations that have to be done per staff entry, like dots, ornaments, arpeggios....\n   * This method is called after the voice entries are handled by layoutVoiceEntry().\n   * @param graphicalStaffEntry\n   */\n  protected layoutStaffEntry(graphicalStaffEntry: GraphicalStaffEntry): void {\n    (graphicalStaffEntry.parentMeasure as VexFlowMeasure).layoutStaffEntry(graphicalStaffEntry);\n  }\n\n  /**\n   * Is called at the begin of the method for creating the vertically aligned staff measures belonging to one source measure.\n   */\n  protected initGraphicalMeasuresCreation(): void {\n    return;\n  }\n\n  /**\n   * add here all given articulations to the VexFlowGraphicalStaffEntry and prepare them for rendering.\n   * @param articulations\n   * @param voiceEntry\n   * @param graphicalStaffEntry\n   */\n  protected layoutArticulationMarks(articulations: Articulation[], voiceEntry: VoiceEntry, graphicalStaffEntry: GraphicalStaffEntry): void {\n    // uncomment this when implementing:\n    // let vfse: VexFlowStaffEntry = (graphicalStaffEntry as VexFlowStaffEntry);\n\n    return;\n  }\n\n  /**\n   * Calculate the shape (Bezier curve) for this tie.\n   * @param tie\n   * @param tieIsAtSystemBreak\n   * @param isTab Whether this tie is for a tab note (guitar tabulature)\n   */\n  protected layoutGraphicalTie(tie: GraphicalTie, tieIsAtSystemBreak: boolean, isTab: boolean): void {\n    const startNote: VexFlowGraphicalNote = (tie.StartNote as VexFlowGraphicalNote);\n    const endNote: VexFlowGraphicalNote = (tie.EndNote as VexFlowGraphicalNote);\n\n    let vfStartNote: VF.StemmableNote  = undefined;\n    let startNoteIndexInTie: number = 0;\n    if (startNote && startNote.vfnote && startNote.vfnote.length >= 2) {\n      vfStartNote = startNote.vfnote[0];\n      startNoteIndexInTie = startNote.vfnote[1];\n    }\n\n    let vfEndNote: VF.StemmableNote  = undefined;\n    let endNoteIndexInTie: number = 0;\n    if (endNote && endNote.vfnote && endNote.vfnote.length >= 2) {\n      vfEndNote = endNote.vfnote[0];\n      endNoteIndexInTie = endNote.vfnote[1];\n    }\n\n    if (tieIsAtSystemBreak) {\n      // split tie into two ties:\n      if (vfStartNote) { // first_note or last_note must be not null in Vexflow\n        const vfTie1: VF.StaveTie = new VF.StaveTie({\n          first_indices: [startNoteIndexInTie],\n          first_note: vfStartNote\n        });\n        const measure1: VexFlowMeasure = (startNote.parentVoiceEntry.parentStaffEntry.parentMeasure as VexFlowMeasure);\n        measure1.addStaveTie(vfTie1, tie);\n      }\n\n      if (vfEndNote) {\n        const vfTie2: VF.StaveTie = new VF.StaveTie({\n          last_indices: [endNoteIndexInTie],\n          last_note: vfEndNote\n        });\n        const measure2: VexFlowMeasure = (endNote.parentVoiceEntry.parentStaffEntry.parentMeasure as VexFlowMeasure);\n        measure2.addStaveTie(vfTie2, tie);\n      }\n    } else {\n      // normal case\n      if (vfStartNote || vfEndNote) { // one of these must be not null in Vexflow\n        let vfTie: any;\n        if (isTab) {\n          if (tie.Tie.Type === \"S\") {\n            //calculate direction\n            const startTieNote: TabNote = <TabNote> tie.StartNote.sourceNote;\n            const endTieNote: TabNote = <TabNote> tie.EndNote.sourceNote;\n            let slideDirection: number = 1;\n            if (startTieNote.FretNumber > endTieNote.FretNumber) {\n              slideDirection = -1;\n            }\n            vfTie = new VF.TabSlide(\n              {\n                first_indices: [startNoteIndexInTie],\n                first_note: vfStartNote,\n                last_indices: [endNoteIndexInTie],\n                last_note: vfEndNote,\n              },\n              slideDirection\n            );\n          } else {\n            vfTie = new VF.TabTie(\n              {\n                first_indices: [startNoteIndexInTie],\n                first_note: vfStartNote,\n                last_indices: [endNoteIndexInTie],\n                last_note: vfEndNote,\n              },\n              tie.Tie.Type\n            );\n          }\n\n        } else { // not Tab (guitar), normal StaveTie\n          vfTie = new VF.StaveTie({\n            first_indices: [startNoteIndexInTie],\n            first_note: vfStartNote,\n            last_indices: [endNoteIndexInTie],\n            last_note: vfEndNote\n          });\n          const tieDirection: PlacementEnum = tie.Tie.getTieDirection(startNote.sourceNote);\n          if (tieDirection === PlacementEnum.Below) {\n            vfTie.setDirection(1); // + is down in vexflow\n          } else if (tieDirection === PlacementEnum.Above) {\n            vfTie.setDirection(-1);\n          }\n        }\n\n        const measure: VexFlowMeasure = (endNote.parentVoiceEntry.parentStaffEntry.parentMeasure as VexFlowMeasure);\n        measure.addStaveTie(vfTie, tie);\n      }\n    }\n  }\n\n  protected calculateDynamicExpressionsForMultiExpression(multiExpression: MultiExpression, measureIndex: number, staffIndex: number): void {\n    if (measureIndex < this.rules.MinMeasureToDrawIndex || measureIndex > this.rules.MaxMeasureToDrawIndex) {\n      return;\n      // we do already use the min/max in MusicSheetCalculator.calculateDynamicsExpressions,\n      // but this may be necessary for StaffLinkedExpressions, not tested.\n    }\n    // calculate absolute Timestamp\n    const absoluteTimestamp: Fraction = multiExpression.AbsoluteTimestamp;\n    const measures: GraphicalMeasure[] = this.graphicalMusicSheet.MeasureList[measureIndex];\n    const staffLine: StaffLine = measures[staffIndex].ParentStaffLine;\n    const startMeasure: GraphicalMeasure = measures[staffIndex];\n\n    // start position in staffline:\n    const dynamicStartPosition: PointF2D = this.getRelativePositionInStaffLineFromTimestamp(\n      absoluteTimestamp,\n      staffIndex,\n      staffLine,\n      staffLine?.isPartOfMultiStaffInstrument());\n    if (dynamicStartPosition.x <= 0) {\n      dynamicStartPosition.x = startMeasure.beginInstructionsWidth + this.rules.RhythmRightMargin;\n    }\n\n    if (multiExpression.InstantaneousDynamic) {\n      const graphicalInstantaneousDynamic: VexFlowInstantaneousDynamicExpression = new VexFlowInstantaneousDynamicExpression(\n        multiExpression.InstantaneousDynamic,\n        staffLine,\n        startMeasure);\n      // compare with multiExpression.InstantaneousDynamic.InMeasureTimestamp or add a relative timestamp? if we ever need a separate timestamp\n      this.calculateGraphicalInstantaneousDynamicExpression(graphicalInstantaneousDynamic, dynamicStartPosition, absoluteTimestamp);\n      this.dynamicExpressionMap.set(absoluteTimestamp.RealValue, graphicalInstantaneousDynamic.PositionAndShape);\n    }\n    if (multiExpression.StartingContinuousDynamic) {\n      const continuousDynamic: ContinuousDynamicExpression = multiExpression.StartingContinuousDynamic;\n      const graphicalContinuousDynamic: VexFlowContinuousDynamicExpression = new VexFlowContinuousDynamicExpression(\n        multiExpression.StartingContinuousDynamic,\n        staffLine,\n        startMeasure.parentSourceMeasure);\n      graphicalContinuousDynamic.StartMeasure = startMeasure;\n\n      if (!graphicalContinuousDynamic.IsVerbal && continuousDynamic.EndMultiExpression) {\n        try {\n        this.calculateGraphicalContinuousDynamic(graphicalContinuousDynamic, dynamicStartPosition);\n        graphicalContinuousDynamic.updateSkyBottomLine();\n        } catch (e) {\n          // TODO this sometimes fails when the measure range to draw doesn't include all the dynamic's measures, method needs to be adjusted\n          //   see calculateGraphicalContinuousDynamic(), also in MusicSheetCalculator.\n\n        }\n      } else if (graphicalContinuousDynamic.IsVerbal) {\n        this.calculateGraphicalVerbalContinuousDynamic(graphicalContinuousDynamic, dynamicStartPosition);\n      } else {\n        log.warn(\"This continuous dynamic is not covered. measure\" + multiExpression.SourceMeasureParent.MeasureNumber);\n      }\n    }\n  }\n\n  protected createMetronomeMark(metronomeExpression: InstantaneousTempoExpression): void {\n    // note: sometimes MeasureNumber is 0 here, e.g. in Christbaum, maybe because of pickup measure (auftakt)\n    const measureNumber: number = Math.max(metronomeExpression.ParentMultiTempoExpression.SourceMeasureParent.MeasureNumber - 1, 0);\n    const staffNumber: number = Math.max(metronomeExpression.StaffNumber - 1, 0);\n    const firstMetronomeMark: boolean = measureNumber === 0 && staffNumber === 0;\n    const vfStave: VF.Stave = (this.graphicalMusicSheet.MeasureList[measureNumber][staffNumber] as VexFlowMeasure).getVFStave();\n    //vfStave.addModifier(new VF.StaveTempo( // needs Vexflow PR\n    let vexflowDuration: string = \"q\";\n    if (metronomeExpression.beatUnit) {\n      const duration: Fraction = NoteTypeHandler.getNoteDurationFromType(metronomeExpression.beatUnit);\n      vexflowDuration = VexFlowConverter.durations(duration, false)[0];\n    }\n\n    let yShift: number = this.rules.MetronomeMarkYShift;\n    let hasExpressionsAboveStaffline: boolean = false;\n    for (const expression of metronomeExpression.parentMeasure.TempoExpressions) {\n      const isMetronomeExpression: boolean = expression.InstantaneousTempo?.Enum === TempoEnum.metronomeMark;\n      if (expression.getPlacementOfFirstEntry() === PlacementEnum.Above &&\n          !isMetronomeExpression) {\n        hasExpressionsAboveStaffline = true;\n        break;\n      }\n    }\n    if (hasExpressionsAboveStaffline) {\n      yShift -= 1.4;\n      // TODO improve this with proper skyline / collision detection. unfortunately we don't have a skyline here yet.\n      // let maxSkylineBeginning: number = 0;\n      // for (let i = 0; i < skyline.length / 1; i++) { // search in first 3rd, disregard end of measure\n      //   maxSkylineBeginning = Math.max(skyline[i], maxSkylineBeginning);\n      // }\n      // console.log('max skyline: ' + maxSkylineBeginning);\n    }\n    const skyline: number[] = this.graphicalMusicSheet.MeasureList[0][0].ParentStaffLine?.SkyLine;\n    vfStave.setTempo(\n      {\n          bpm: metronomeExpression.TempoInBpm,\n          dots: metronomeExpression.dotted,\n          duration: vexflowDuration\n      },\n      yShift * unitInPixels);\n       // -50, -30), 0); //needs Vexflow PR\n       //.setShiftX(-50);\n    const xShift: number = firstMetronomeMark ? this.rules.MetronomeMarkXShift * unitInPixels : 0;\n    (<any>vfStave.getModifiers()[vfStave.getModifiers().length - 1]).setShiftX(\n      xShift\n    );\n    if (skyline) {\n      // TODO calculate bounding box of metronome mark instead of hacking skyline to fix lyricist collision\n      skyline[0] = Math.min(skyline[0], -4.5 + yShift);\n    }\n    // somehow this is called repeatedly in Clementi, so skyline[0] = Math.min instead of -=\n  }\n\n  protected calculateRehearsalMark(measure: SourceMeasure): void {\n    const rehearsalExpression: RehearsalExpression = measure.rehearsalExpression;\n    if (!rehearsalExpression) {\n      return;\n    }\n    const firstMeasureNumber: number = this.graphicalMusicSheet.MeasureList[0][0].MeasureNumber; // 0 for pickup, 1 otherwise\n    const measureNumber: number = Math.max(measure.MeasureNumber - firstMeasureNumber, 0);\n    const staffNumber: number = 0;\n    const vfStave: VF.Stave = (this.graphicalMusicSheet.MeasureList[measureNumber][staffNumber] as VexFlowMeasure)?.getVFStave();\n    if (!vfStave) { // potentially multi measure rest\n      return;\n    }\n    const yOffset: number = -this.rules.RehearsalMarkYOffsetDefault - this.rules.RehearsalMarkYOffset;\n    let xOffset: number = this.rules.RehearsalMarkXOffsetDefault + this.rules.RehearsalMarkXOffset;\n    if (measure.IsSystemStartMeasure) {\n      xOffset += this.rules.RehearsalMarkXOffsetSystemStartMeasure;\n    }\n    // const section: VF.StaveSection = new VF.StaveSection(rehearsalExpression.label, vfStave.getX(), yOffset);\n    // (vfStave as any).modifiers.push(section);\n    const fontSize: number = this.rules.RehearsalMarkFontSize;\n    (vfStave as any).setSection(rehearsalExpression.label, yOffset, xOffset, fontSize); // fontSize is an extra argument from VexFlowPatch\n  }\n\n  /**\n   * Calculate a single OctaveShift for a [[MultiExpression]].\n   * @param sourceMeasure\n   * @param multiExpression\n   * @param measureIndex\n   * @param staffIndex\n   */\n  protected calculateSingleOctaveShift(sourceMeasure: SourceMeasure, multiExpression: MultiExpression, measureIndex: number, staffIndex: number): void {\n    // calculate absolute Timestamp and startStaffLine (and EndStaffLine if needed)\n    const octaveShift: OctaveShift = multiExpression.OctaveShiftStart;\n\n    const startTimeStamp: Fraction = octaveShift.ParentStartMultiExpression.Timestamp;\n    const endTimeStamp: Fraction = octaveShift.ParentEndMultiExpression?.Timestamp;\n\n    const minMeasureToDrawIndex: number = this.rules.MinMeasureToDrawIndex;\n    const maxMeasureToDrawIndex: number = this.rules.MaxMeasureToDrawIndex;\n\n    let startStaffLine: StaffLine = this.graphicalMusicSheet.MeasureList[measureIndex][staffIndex].ParentStaffLine;\n    if (!startStaffLine) { // fix for rendering range set. all of these can probably done cleaner.\n      startStaffLine = this.graphicalMusicSheet.MeasureList[minMeasureToDrawIndex][staffIndex].ParentStaffLine;\n    }\n\n    let endMeasure: GraphicalMeasure = undefined;\n    if (octaveShift.ParentEndMultiExpression) {\n      endMeasure = this.graphicalMusicSheet.getGraphicalMeasureFromSourceMeasureAndIndex(octaveShift.ParentEndMultiExpression.SourceMeasureParent,\n                                                                                         staffIndex);\n    } else {\n      endMeasure = this.graphicalMusicSheet.getLastGraphicalMeasureFromIndex(staffIndex, true); // get last rendered measure\n    }\n    if (endMeasure.MeasureNumber > maxMeasureToDrawIndex + 1) { // octaveshift ends in measure not rendered\n      endMeasure = this.graphicalMusicSheet.getLastGraphicalMeasureFromIndex(staffIndex, true);\n    }\n    let startMeasure: GraphicalMeasure = undefined;\n    if (octaveShift.ParentEndMultiExpression) {\n      startMeasure = this.graphicalMusicSheet.getGraphicalMeasureFromSourceMeasureAndIndex(octaveShift.ParentStartMultiExpression.SourceMeasureParent,\n                                                                                           staffIndex);\n    } else {\n      startMeasure = this.graphicalMusicSheet.MeasureList[minMeasureToDrawIndex][staffIndex]; // first rendered measure\n    }\n    if (startMeasure.MeasureNumber < minMeasureToDrawIndex + 1) { // octaveshift starts before range of measures selected to render\n      startMeasure = this.graphicalMusicSheet.MeasureList[minMeasureToDrawIndex][staffIndex]; // first rendered measure\n    }\n\n    if (startMeasure.MeasureNumber < minMeasureToDrawIndex + 1 ||\n        startMeasure.MeasureNumber > maxMeasureToDrawIndex + 1 ||\n        endMeasure.MeasureNumber < minMeasureToDrawIndex + 1 ||\n        endMeasure.MeasureNumber > maxMeasureToDrawIndex + 1) {\n      // octave shift completely out of drawing range, don't draw anything\n      return;\n    }\n\n    let endStaffLine: StaffLine = endMeasure.ParentStaffLine;\n    if (!endStaffLine) {\n      endStaffLine = startStaffLine;\n    }\n\n    if (endMeasure && startStaffLine && endStaffLine) {\n      // calculate GraphicalOctaveShift and RelativePositions\n      const graphicalOctaveShift: VexFlowOctaveShift = new VexFlowOctaveShift(octaveShift, startStaffLine.PositionAndShape);\n      if (!graphicalOctaveShift.startNote) { // fix for rendering range set\n        let startGse: GraphicalStaffEntry;\n        for (const gse of startMeasure.staffEntries) {\n          if (gse) {\n            startGse = gse;\n            break;\n          } // sometimes the first graphical staff entry is undefined, not sure why.\n        }\n        if (!startGse) {\n          return; // couldn't find a start staffentry, don't draw the octave shift\n        }\n        graphicalOctaveShift.setStartNote(startGse);\n        if (!graphicalOctaveShift.startNote) {\n          return; // couldn't find a start note, don't draw the octave shift\n        }\n      }\n      if (!graphicalOctaveShift.endNote) { // fix for rendering range set\n        let endGse: GraphicalStaffEntry;\n        for (let i: number = endMeasure.staffEntries.length - 1; i >= 0; i++) {\n          // search backwards from end of measure\n          if (endMeasure.staffEntries[i]) {\n            endGse = endMeasure.staffEntries[i];\n            break;\n          }\n        }\n        graphicalOctaveShift.setEndNote(endGse);\n        if (!graphicalOctaveShift.endNote) {\n          return;\n        }\n      }\n      // calculate RelativePosition and Dashes\n      let startStaffEntry: GraphicalStaffEntry = startMeasure.findGraphicalStaffEntryFromTimestamp(startTimeStamp);\n      if (!startStaffEntry) { // fix for rendering range set\n        startStaffEntry = startMeasure.staffEntries[0];\n      }\n      let endStaffEntry: GraphicalStaffEntry = endMeasure.findGraphicalStaffEntryFromTimestamp(endTimeStamp);\n      if (!endStaffEntry) { // fix for rendering range set\n        endStaffEntry = endMeasure.staffEntries[endMeasure.staffEntries.length - 1];\n      }\n      graphicalOctaveShift.setStartNote(startStaffEntry);\n\n      if (endStaffLine !== startStaffLine) {\n        graphicalOctaveShift.endsOnDifferentStaffLine = true;\n        let lastMeasureOfFirstShift: GraphicalMeasure = startStaffLine.Measures[startStaffLine.Measures.length - 1];\n        if (lastMeasureOfFirstShift === undefined) { // TODO handle this case correctly (when drawUpToMeasureNumber etc set)\n          lastMeasureOfFirstShift = endMeasure;\n        }\n        const lastNoteOfFirstShift: GraphicalStaffEntry = lastMeasureOfFirstShift.staffEntries[lastMeasureOfFirstShift.staffEntries.length - 1];\n        graphicalOctaveShift.setEndNote(lastNoteOfFirstShift);\n\n        const systemsInBetweenCount: number = endStaffLine.ParentMusicSystem.Id - startStaffLine.ParentMusicSystem.Id;\n        if (systemsInBetweenCount > 0) {\n          //Loop through the stafflines in between to the end\n          for (let i: number = startStaffLine.ParentMusicSystem.Id; i < endStaffLine.ParentMusicSystem.Id; i++) {\n            const idx: number = i + 1;\n            const nextShiftMusicSystem: MusicSystem = this.musicSystems[idx];\n            const nextShiftStaffline: StaffLine = nextShiftMusicSystem.StaffLines[staffIndex];\n            const nextShiftFirstMeasure: GraphicalMeasure = nextShiftStaffline.Measures[0];\n            // Shift starts on the first measure\n            const nextOctaveShift: VexFlowOctaveShift = new VexFlowOctaveShift(octaveShift, nextShiftFirstMeasure.PositionAndShape);\n\n            if (i < systemsInBetweenCount) {\n              nextOctaveShift.endsOnDifferentStaffLine = true;\n            }\n\n            let nextShiftLastMeasure: GraphicalMeasure = nextShiftStaffline.Measures[nextShiftStaffline.Measures.length - 1];\n            if (nextShiftLastMeasure.IsExtraGraphicalMeasure) { // key/rhythm change measure\n              nextShiftLastMeasure = nextShiftStaffline.Measures[nextShiftStaffline.Measures.length - 2];\n            }\n            const firstNote: GraphicalStaffEntry = nextShiftFirstMeasure.staffEntries[0];\n            let lastNote: GraphicalStaffEntry = nextShiftLastMeasure.staffEntries[nextShiftLastMeasure.staffEntries.length - 1];\n\n            //If the is the ending staffline, this endMeasure is the end of the shift\n            if (endMeasure.ParentStaffLine === nextShiftStaffline) {\n              nextShiftLastMeasure = endMeasure;\n              lastNote = endStaffEntry;\n            }\n\n            const logPrefix: string = \"VexFlowMusicSheetCalculator.calculateSingleOctaveShift: \";\n            if (!firstNote) {\n              log.warn(logPrefix + \"no firstNote found\");\n            }\n            if (!lastNote) {\n              log.warn(logPrefix + \"no lastNote found\");\n            }\n            nextOctaveShift.setStartNote(firstNote);\n            nextOctaveShift.setEndNote(lastNote);\n            nextShiftStaffline.OctaveShifts.push(nextOctaveShift);\n            this.calculateOctaveShiftSkyBottomLine(firstNote, lastNote, nextOctaveShift, nextShiftStaffline);\n          }\n        }\n\n        this.calculateOctaveShiftSkyBottomLine(startStaffEntry, lastNoteOfFirstShift, graphicalOctaveShift, startStaffLine);\n      } else {\n        graphicalOctaveShift.setEndNote(endStaffEntry);\n        this.calculateOctaveShiftSkyBottomLine(startStaffEntry, endStaffEntry, graphicalOctaveShift, startStaffLine);\n      }\n      startStaffLine.OctaveShifts.push(graphicalOctaveShift);\n    } else {\n      log.warn(\"End measure or staffLines for octave shift are undefined! This should not happen!\");\n    }\n  }\n\n  private calculateOctaveShiftSkyBottomLine(startStaffEntry: GraphicalStaffEntry, endStaffEntry: GraphicalStaffEntry,\n                                            vfOctaveShift: VexFlowOctaveShift, parentStaffline: StaffLine): void {\n    if (!endStaffEntry) {\n      log.warn(\"octaveshift: no endStaffEntry\");\n      return;\n    }\n    let startXOffset: number = startStaffEntry.PositionAndShape.Size.width;\n    let endXOffset: number = endStaffEntry.PositionAndShape.Size.width;\n\n    //Vexflow renders differently with rests\n    if (startStaffEntry.hasOnlyRests()) {\n      startXOffset = -startXOffset;\n    } else {\n      startXOffset /= 2;\n    }\n\n    if (!endStaffEntry.hasOnlyRests()) {\n      endXOffset /= 2;\n    } else {\n      endXOffset *= 2;\n    }\n\n    if (startStaffEntry === endStaffEntry) {\n      endXOffset *= 2;\n    }\n    const startX: number = startStaffEntry.PositionAndShape.AbsolutePosition.x - startXOffset;\n    const stopX: number = endStaffEntry.PositionAndShape.AbsolutePosition.x + endXOffset;\n    vfOctaveShift.PositionAndShape.Size.width = startX - stopX;\n    const textBracket: VF.TextBracket = vfOctaveShift.getTextBracket();\n    const fontSize: number = (textBracket as any).font.size / 10;\n\n    if ((<any>textBracket).position === VF.TextBracket.Positions.TOP) {\n      const headroom: number = Math.ceil(parentStaffline.SkyBottomLineCalculator.getSkyLineMinInRange(startX, stopX));\n      if (headroom === Infinity) { // will cause Vexflow error\n        return;\n      }\n      (textBracket.start.getStave().options as any).top_text_position = Math.abs(headroom);\n      parentStaffline.SkyBottomLineCalculator.updateSkyLineInRange(startX, stopX, headroom - fontSize * 2);\n    } else {\n      const footroom: number = parentStaffline.SkyBottomLineCalculator.getBottomLineMaxInRange(startX, stopX);\n      if (footroom === Infinity) { // will cause Vexflow error\n        return;\n      }\n      (textBracket.start.getStave().options as any).bottom_text_position = footroom;\n      //Vexflow positions top vs. bottom text in a slightly inconsistent way it seems\n      parentStaffline.SkyBottomLineCalculator.updateBottomLineInRange(startX, stopX, footroom + fontSize * 1.5);\n    }\n  }\n\n  /**\n   * Calculate all the textual and symbolic [[RepetitionInstruction]]s (e.g. dal segno) for a single [[SourceMeasure]].\n   * @param repetitionInstruction\n   * @param measureIndex\n   */\n  protected calculateWordRepetitionInstruction(repetitionInstruction: RepetitionInstruction, measureIndex: number): void {\n    // find first visible StaffLine\n    let uppermostMeasure: VexFlowMeasure = undefined;\n    const measures: VexFlowMeasure[] = <VexFlowMeasure[]>this.graphicalMusicSheet.MeasureList[measureIndex];\n    for (let idx: number = 0, len: number = measures.length; idx < len; ++idx) {\n      const graphicalMeasure: VexFlowMeasure = measures[idx];\n      if (graphicalMeasure && graphicalMeasure.ParentStaffLine && graphicalMeasure.ParentStaff.ParentInstrument.Visible) {\n        uppermostMeasure = <VexFlowMeasure>graphicalMeasure;\n        break;\n      }\n    }\n    // ToDo: feature/Repetitions\n    // now create corresponding graphical symbol or Text in VexFlow:\n    // use top measure and staffline for positioning.\n    if (uppermostMeasure) {\n      uppermostMeasure.addWordRepetition(repetitionInstruction);\n    }\n  }\n\n  protected calculateSkyBottomLines(): void {\n    const staffLines: StaffLine[] = this.musicSystems.map(musicSystem => musicSystem.StaffLines).flat();\n    //const numMeasures: number = staffLines.map(staffLine => staffLine.Measures.length).reduce((a, b) => a + b, 0);\n    let numMeasures: number = 0; // number of graphical measures that are rendered\n    for (const staffline of staffLines) {\n      for (const measure of staffline.Measures) {\n        if (measure) { // can be undefined and not rendered in multi-measure rest\n          numMeasures++;\n        }\n      }\n    }\n    if (this.rules.AlwaysSetPreferredSkyBottomLineBackendAutomatically) {\n      this.rules.setPreferredSkyBottomLineBackendAutomatically(numMeasures);\n    }\n    if (numMeasures >= this.rules.SkyBottomLineBatchMinMeasures) {\n      const calculator: SkyBottomLineBatchCalculator = new SkyBottomLineBatchCalculator(\n        staffLines, this.rules.PreferredSkyBottomLineBatchCalculatorBackend);\n      calculator.calculateLines();\n    } else {\n      for (const staffLine of staffLines) {\n        staffLine.SkyBottomLineCalculator.calculateLines();\n      }\n    }\n  }\n\n  /**\n   * Re-adjust the x positioning of expressions. Update the skyline afterwards\n   */\n  protected calculateExpressionAlignements(): void {\n    for (const musicSystem of this.musicSystems) {\n      for (const staffLine of musicSystem.StaffLines) {\n        try {\n          (<VexFlowStaffLine>staffLine).AlignmentManager.alignDynamicExpressions();\n          staffLine.AbstractExpressions.forEach(ae => {\n            ae.updateSkyBottomLine();\n          });\n        } catch (e) {\n          // TODO still necessary when calculation of expression fails, see calculateDynamicExpressionsForMultiExpression()\n          //   see calculateGraphicalContinuousDynamic(), also in MusicSheetCalculator.\n        }\n      }\n    }\n  }\n\n\n  /**\n   * Check if the tied graphical note belongs to any beams or tuplets and react accordingly.\n   * @param tiedGraphicalNote\n   * @param beams\n   * @param activeClef\n   * @param octaveShiftValue\n   * @param graphicalStaffEntry\n   * @param duration\n   * @param openTie\n   * @param isLastTieNote\n   */\n  protected handleTiedGraphicalNote(tiedGraphicalNote: GraphicalNote, beams: Beam[], activeClef: ClefInstruction,\n                                    octaveShiftValue: OctaveEnum, graphicalStaffEntry: GraphicalStaffEntry, duration: Fraction,\n                                    openTie: Tie, isLastTieNote: boolean): void {\n    return;\n  }\n\n  /**\n   * Is called if a note is part of a beam.\n   * @param graphicalNote\n   * @param beam\n   * @param openBeams a list of all currently open beams\n   */\n  protected handleBeam(graphicalNote: GraphicalNote, beam: Beam, openBeams: Beam[]): void {\n    (graphicalNote.parentVoiceEntry.parentStaffEntry.parentMeasure as VexFlowMeasure).handleBeam(graphicalNote, beam);\n  }\n\n  protected handleVoiceEntryLyrics(voiceEntry: VoiceEntry, graphicalStaffEntry: GraphicalStaffEntry, lyricWords: LyricWord[]): void {\n    voiceEntry.LyricsEntries.forEach((key: number, lyricsEntry: LyricsEntry) => {\n      const graphicalLyricEntry: GraphicalLyricEntry = new GraphicalLyricEntry(lyricsEntry,\n                                                                               graphicalStaffEntry,\n                                                                               this.rules.LyricsHeight,\n                                                                               this.rules.StaffHeight);\n\n      graphicalStaffEntry.LyricsEntries.push(graphicalLyricEntry);\n\n      // create corresponding GraphicalLabel\n      const graphicalLabel: GraphicalLabel = graphicalLyricEntry.GraphicalLabel;\n      graphicalLabel.setLabelPositionAndShapeBorders();\n\n      if (lyricsEntry.Word) {\n        const lyricsEntryIndex: number = lyricsEntry.Word.Syllables.indexOf(lyricsEntry);\n        let index: number = lyricWords.indexOf(lyricsEntry.Word);\n        if (index === -1) {\n          lyricWords.push(lyricsEntry.Word);\n          index = lyricWords.indexOf(lyricsEntry.Word);\n        }\n\n        if (this.graphicalLyricWords.length === 0 || index > this.graphicalLyricWords.length - 1) {\n          const graphicalLyricWord: GraphicalLyricWord = new GraphicalLyricWord(lyricsEntry.Word);\n\n          graphicalLyricEntry.ParentLyricWord = graphicalLyricWord;\n          graphicalLyricWord.GraphicalLyricsEntries[lyricsEntryIndex] = graphicalLyricEntry;\n          this.graphicalLyricWords.push(graphicalLyricWord);\n        } else {\n          const graphicalLyricWord: GraphicalLyricWord = this.graphicalLyricWords[index];\n\n          graphicalLyricEntry.ParentLyricWord = graphicalLyricWord;\n          graphicalLyricWord.GraphicalLyricsEntries[lyricsEntryIndex] = graphicalLyricEntry;\n\n          if (graphicalLyricWord.isFilled()) {\n            lyricWords.splice(index, 1);\n            this.graphicalLyricWords.splice(this.graphicalLyricWords.indexOf(graphicalLyricWord), 1);\n          }\n        }\n      }\n    });\n  }\n\n  protected handleVoiceEntryOrnaments(ornamentContainer: OrnamentContainer, voiceEntry: VoiceEntry, graphicalStaffEntry: GraphicalStaffEntry): void {\n    return;\n  }\n\n  /**\n   * Add articulations to the given vexflow staff entry.\n   * @param articulations\n   * @param voiceEntry\n   * @param graphicalStaffEntry\n   */\n  protected handleVoiceEntryArticulations(articulations: Articulation[],\n                                          voiceEntry: VoiceEntry, staffEntry: GraphicalStaffEntry): void {\n    // uncomment this when implementing:\n    // let vfse: VexFlowStaffEntry = (graphicalStaffEntry as VexFlowStaffEntry);\n\n    return;\n  }\n\n  /**\n   * Add technical instructions to the given vexflow staff entry.\n   * @param technicalInstructions\n   * @param voiceEntry\n   * @param staffEntry\n   */\n  protected handleVoiceEntryTechnicalInstructions(technicalInstructions: TechnicalInstruction[],\n                                                  voiceEntry: VoiceEntry, staffEntry: GraphicalStaffEntry): void {\n    // uncomment this when implementing:\n    // let vfse: VexFlowStaffEntry = (graphicalStaffEntry as VexFlowStaffEntry);\n    return;\n  }\n\n  /**\n   * Is called if a note is part of a tuplet.\n   * @param graphicalNote\n   * @param tuplet\n   * @param openTuplets a list of all currently open tuplets\n   */\n  protected handleTuplet(graphicalNote: GraphicalNote, tuplet: Tuplet, openTuplets: Tuplet[]): void {\n    (graphicalNote.parentVoiceEntry.parentStaffEntry.parentMeasure as VexFlowMeasure).handleTuplet(graphicalNote, tuplet);\n  }\n\n  /**\n   * Find the Index of the item of the array of all VexFlow Slurs that holds a specified slur\n   * @param gSlurs\n   * @param slur\n   */\n  public findIndexGraphicalSlurFromSlur(gSlurs: GraphicalSlur[], slur: Slur): number {\n    for (let slurIndex: number = 0; slurIndex < gSlurs.length; slurIndex++) {\n      if (gSlurs[slurIndex].slur === slur) {\n        return slurIndex;\n      }\n    }\n    return -1;\n  }\n  /* VexFlow Version - for later use\n  public findIndexVFSlurFromSlur(vfSlurs: VexFlowSlur[], slur: Slur): number {\n        for (let slurIndex: number = 0; slurIndex < vfSlurs.length; slurIndex++) {\n            if (vfSlurs[slurIndex].vfSlur === slur) {\n                return slurIndex;\n            }\n        }\n  }\n  */\n\n  // Generate all Graphical Slurs and attach them to the staffline\n  protected calculateSlurs(): void {\n    const openSlursDict: { [staffId: number]: GraphicalSlur[] } = {};\n    for (const graphicalMeasure of this.graphicalMusicSheet.MeasureList[0]) { //let i: number = 0; i < this.graphicalMusicSheet.MeasureList[0].length; i++) {\n      openSlursDict[graphicalMeasure.ParentStaff.idInMusicSheet] = [];\n    }\n\n    /* VexFlow Version - for later use\n    // Generate an empty dictonary to index an array of VexFlowSlur classes\n    const vfOpenSlursDict: { [staffId: number]: VexFlowSlur[]; } = {}; //VexFlowSlur[]; } = {};\n    // use first SourceMeasure to get all graphical measures to know how many staves are currently visible in this musicsheet\n    // foreach stave: create an empty array. It can later hold open slurs.\n    // Measure how many staves are visible and reserve space for them.\n    for (const graphicalMeasure of this.graphicalMusicSheet.MeasureList[0]) { //let i: number = 0; i < this.graphicalMusicSheet.MeasureList[0].length; i++) {\n        vfOpenSlursDict[graphicalMeasure.ParentStaff.idInMusicSheet] = [];\n    }\n    */\n\n    for (const musicSystem of this.musicSystems) {\n        for (const staffLine of musicSystem.StaffLines) {\n          // if a graphical slur reaches out of the last musicsystem, we have to create another graphical slur reaching into this musicsystem\n          // (one slur needs 2 graphical slurs)\n          const openGraphicalSlurs: GraphicalSlur[] = openSlursDict[staffLine.ParentStaff.idInMusicSheet];\n          for (let slurIndex: number = 0; slurIndex < openGraphicalSlurs.length; slurIndex++) {\n            const oldGSlur: GraphicalSlur = openGraphicalSlurs[slurIndex];\n            const newGSlur: GraphicalSlur = new GraphicalSlur(oldGSlur.slur, this.rules); //Graphicalslur.createFromSlur(oldSlur);\n            staffLine.addSlurToStaffline(newGSlur); // every VFSlur is added to the array in the VFStaffline!\n            openGraphicalSlurs[slurIndex] = newGSlur;\n          }\n\n          /* VexFlow Version - for later use\n          const vfOpenSlurs: VexFlowSlur[] = vfOpenSlursDict[staffLine.ParentStaff.idInMusicSheet];\n          const vfStaffLine: VexFlowStaffLine = <VexFlowStaffLine> staffLine;\n          for (let slurIndex: number = 0; slurIndex < vfOpenSlurs.length; slurIndex++) {\n              const oldVFSlur: VexFlowSlur = vfOpenSlurs[slurIndex];\n              const newVFSlur: VexFlowSlur = VexFlowSlur.createFromVexflowSlur(oldVFSlur);\n              newVFSlur.vfStartNote = undefined;\n              vfStaffLine.addVFSlurToVFStaffline(newVFSlur); // every VFSlur is added to the array in the VFStaffline!\n              vfOpenSlurs[slurIndex] = newVFSlur;\n          }\n          */\n\n          // add reference of slur array to the VexFlowStaffline class\n          for (const graphicalMeasure of staffLine.Measures) {\n            for (const graphicalStaffEntry of graphicalMeasure.staffEntries) {\n              // loop over \"normal\" notes (= no gracenotes)\n              for (const graphicalVoiceEntry of graphicalStaffEntry.graphicalVoiceEntries) {\n                for (const graphicalNote of graphicalVoiceEntry.notes) {\n                  for (const slur of graphicalNote.sourceNote.NoteSlurs) {\n                    // extra check for some MusicSheets that have openSlurs (because only the first Page is available -> Recordare files)\n                    if (!slur.EndNote || !slur.StartNote) {\n                      continue;\n                    }\n                    // add new VexFlowSlur to List\n                    if (slur.StartNote === graphicalNote.sourceNote) {\n                      // TODO the following seems to have been intended to prevent unnecessary slurs that overlap ties,\n                      //   but it simply leads to correct slurs being left out where the tie end note is the slur start note.\n                      //   visual regression tests simply show valid slurs being left out in 4 samples.\n                      // if (graphicalNote.sourceNote.NoteTie) {\n                      //   if (graphicalNote.parentVoiceEntry.parentStaffEntry.getAbsoluteTimestamp() !==\n                      //     graphicalNote.sourceNote.NoteTie.StartNote.getAbsoluteTimestamp()) {\n                      //     break;\n                      //   }\n                      // }\n\n                      // Add a Graphical Slur to the staffline, if the recent note is the Startnote of a slur\n                      const gSlur: GraphicalSlur = new GraphicalSlur(slur, this.rules);\n                      openGraphicalSlurs.push(gSlur);\n                      staffLine.addSlurToStaffline(gSlur);\n\n                      /* VexFlow Version - for later use\n                      const vfSlur: VexFlowSlur = new VexFlowSlur(slur);\n                      vfOpenSlurs.push(vfSlur); //add open... adding / removing is JUST DONE in the open... array\n                      vfSlur.vfStartNote = (graphicalVoiceEntry as VexFlowVoiceEntry).vfStaveNote;\n                      vfStaffLine.addVFSlurToVFStaffline(vfSlur); // every VFSlur is added to the array in the VFStaffline!\n                      */\n                    }\n                    if (slur.EndNote === graphicalNote.sourceNote) {\n                      // Remove the Graphical Slur from the staffline if the note is the Endnote of a slur\n                      const index: number = this.findIndexGraphicalSlurFromSlur(openGraphicalSlurs, slur);\n                      if (index >= 0) {\n                        // save Voice Entry in VFSlur and then remove it from array of open VFSlurs\n                        const gSlur: GraphicalSlur = openGraphicalSlurs[index];\n                        if (gSlur.staffEntries.indexOf(graphicalStaffEntry) === -1) {\n                          gSlur.staffEntries.push(graphicalStaffEntry);\n                        }\n\n                        openGraphicalSlurs.splice(index, 1);\n                      }\n\n                      /* VexFlow Version - for later use\n                      const vfIndex: number = this.findIndexVFSlurFromSlur(vfOpenSlurs, slur);\n                      if (vfIndex !== undefined) {\n                          // save Voice Entry in VFSlur and then remove it from array of open VFSlurs\n                          const vfSlur: VexFlowSlur = vfOpenSlurs[vfIndex];\n                          vfSlur.vfEndNote = (graphicalVoiceEntry as VexFlowVoiceEntry).vfStaveNote;\n                          vfSlur.createVexFlowCurve();\n                          vfOpenSlurs.splice(vfIndex, 1);\n                      }\n                      */\n                    }\n                  }\n                }\n              }\n\n              //add the present Staffentry to all open slurs that don't contain this Staffentry already\n              for (const gSlur of openGraphicalSlurs) {\n                if (gSlur.staffEntries.indexOf(graphicalStaffEntry) === -1) {\n                  gSlur.staffEntries.push(graphicalStaffEntry);\n                }\n              }\n            } // loop over StaffEntries\n          } // loop over Measures\n        } // loop over StaffLines\n\n        // Attach vfSlur array to the vfStaffline to be drawn\n        //vfStaffLine.SlursInVFStaffLine = vfSlurs;\n      } // loop over MusicSystems\n\n    // order slurs that were saved to the Staffline\n    for (const musicSystem of this.musicSystems) {\n          for (const staffLine of musicSystem.StaffLines) {\n            // Sort all gSlurs in the staffline using the Compare function in class GraphicalSlurSorter\n            const sortedGSlurs: GraphicalSlur[] = staffLine.GraphicalSlurs.sort(GraphicalSlur.Compare);\n            for (const gSlur of sortedGSlurs) {\n                // crossed slurs will be handled later:\n                if (gSlur.slur.isCrossed()) {\n                    continue;\n                }\n                gSlur.calculateCurve(this.rules);\n            }\n          }\n        }\n      }\n  }\n","import Vex from \"vexflow\";\nimport VF = Vex.Flow;\nimport { MusicSheetDrawer } from \"../MusicSheetDrawer\";\nimport { RectangleF2D } from \"../../../Common/DataObjects/RectangleF2D\";\nimport { VexFlowMeasure } from \"./VexFlowMeasure\";\nimport { PointF2D } from \"../../../Common/DataObjects/PointF2D\";\nimport { GraphicalLabel } from \"../GraphicalLabel\";\nimport { VexFlowTextMeasurer } from \"./VexFlowTextMeasurer\";\nimport { MusicSystem } from \"../MusicSystem\";\nimport { GraphicalObject } from \"../GraphicalObject\";\nimport { GraphicalLayers } from \"../DrawingEnums\";\nimport { GraphicalStaffEntry } from \"../GraphicalStaffEntry\";\nimport { VexFlowBackend } from \"./VexFlowBackend\";\nimport { VexFlowOctaveShift } from \"./VexFlowOctaveShift\";\nimport { VexFlowInstantaneousDynamicExpression } from \"./VexFlowInstantaneousDynamicExpression\";\nimport { VexFlowInstrumentBracket } from \"./VexFlowInstrumentBracket\";\nimport { VexFlowInstrumentBrace } from \"./VexFlowInstrumentBrace\";\nimport { GraphicalLyricEntry } from \"../GraphicalLyricEntry\";\nimport { VexFlowStaffLine } from \"./VexFlowStaffLine\";\nimport { StaffLine } from \"../StaffLine\";\nimport { GraphicalSlur } from \"../GraphicalSlur\";\nimport { PlacementEnum } from \"../../VoiceData/Expressions/AbstractExpression\";\nimport { GraphicalInstantaneousTempoExpression } from \"../GraphicalInstantaneousTempoExpression\";\nimport { GraphicalInstantaneousDynamicExpression } from \"../GraphicalInstantaneousDynamicExpression\";\nimport log from \"loglevel\";\nimport { GraphicalContinuousDynamicExpression } from \"../GraphicalContinuousDynamicExpression\";\nimport { VexFlowContinuousDynamicExpression } from \"./VexFlowContinuousDynamicExpression\";\nimport { DrawingParameters } from \"../DrawingParameters\";\nimport { GraphicalMusicPage } from \"../GraphicalMusicPage\";\nimport { GraphicalMusicSheet } from \"../GraphicalMusicSheet\";\nimport { GraphicalUnknownExpression } from \"../GraphicalUnknownExpression\";\n\n/**\n * This is a global constant which denotes the height in pixels of the space between two lines of the stave\n * (when zoom = 1.0)\n * @type number\n */\nexport const unitInPixels: number = 10;\n\nexport class VexFlowMusicSheetDrawer extends MusicSheetDrawer {\n    private backend: VexFlowBackend;\n    private backends: VexFlowBackend[] = [];\n    private zoom: number = 1.0;\n    private pageIdx: number = 0; // this is a bad solution, should use MusicPage.PageNumber instead.\n\n    constructor(drawingParameters: DrawingParameters = new DrawingParameters()) {\n        super(new VexFlowTextMeasurer(drawingParameters.Rules), drawingParameters);\n    }\n\n    public get Backends(): VexFlowBackend[] {\n        return this.backends;\n    }\n\n    public drawSheet(graphicalMusicSheet: GraphicalMusicSheet): void {\n        // vexflow 3.x: change default font\n        if (this.rules.DefaultVexFlowNoteFont === \"gonville\") {\n            (Vex.Flow as any).DEFAULT_FONT_STACK = [(Vex.Flow as any).Fonts?.Gonville, (Vex.Flow as any).Fonts?.Bravura, (Vex.Flow as any).Fonts?.Custom];\n        } // else keep new vexflow default Bravura (more cursive, bold).\n\n        // sizing defaults in Vexflow\n        (Vex.Flow as any).STAVE_LINE_THICKNESS = this.rules.StaffLineWidth * unitInPixels;\n        (Vex.Flow as any).STEM_WIDTH = this.rules.StemWidth * unitInPixels;\n        // sets scale/size of notes/rest notes:\n        (Vex.Flow as any).DEFAULT_NOTATION_FONT_SCALE = this.rules.VexFlowDefaultNotationFontScale; // default 39\n        (Vex.Flow as any).DEFAULT_TAB_FONT_SCALE = this.rules.VexFlowDefaultTabFontScale; // default 39 // TODO doesn't seem to do anything\n\n        this.pageIdx = 0;\n        for (const graphicalMusicPage of graphicalMusicSheet.MusicPages) {\n            if (graphicalMusicPage.PageNumber > this.rules.MaxPageToDrawNumber) {\n                break;\n            }\n            const backend: VexFlowBackend = this.backends[this.pageIdx];\n            backend.graphicalMusicPage = graphicalMusicPage;\n            backend.scale(this.zoom);\n            //backend.resize(graphicalMusicSheet.ParentMusicSheet.pageWidth * unitInPixels * this.zoom,\n            //               EngravingRules.Rules.PageHeight * unitInPixels * this.zoom);\n            this.pageIdx += 1;\n        }\n\n        this.pageIdx = 0;\n        this.backend = this.backends[0];\n        super.drawSheet(graphicalMusicSheet);\n    }\n\n    protected drawPage(page: GraphicalMusicPage): void {\n        if (!page) {\n            return;\n        }\n        this.backend = this.backends[page.PageNumber - 1]; // TODO we may need to set this in a couple of other places. this.pageIdx is a bad solution\n        super.drawPage(page);\n        this.pageIdx += 1;\n    }\n\n    public clear(): void {\n        for (const backend of this.backends) {\n            backend.clear();\n        }\n    }\n\n    public setZoom(zoom: number): void {\n        this.zoom = zoom;\n    }\n\n    /**\n     * Converts a distance from unit to pixel space.\n     * @param unitDistance the distance in units\n     * @returns {number} the distance in pixels\n     */\n    public calculatePixelDistance(unitDistance: number): number {\n        return unitDistance * unitInPixels;\n    }\n\n    protected drawStaffLine(staffLine: StaffLine): void {\n        super.drawStaffLine(staffLine);\n        const absolutePos: PointF2D = staffLine.PositionAndShape.AbsolutePosition;\n        if (this.rules.RenderSlurs) {\n            this.drawSlurs(staffLine as VexFlowStaffLine, absolutePos);\n        }\n    }\n\n    private drawSlurs(vfstaffLine: VexFlowStaffLine, absolutePos: PointF2D): void {\n        for (const graphicalSlur of vfstaffLine.GraphicalSlurs) {\n            // don't draw crossed slurs, as their curve calculation is not implemented yet:\n            if (graphicalSlur.slur.isCrossed()) {\n                continue;\n            }\n            this.drawSlur(graphicalSlur, absolutePos);\n        }\n    }\n\n    private drawSlur(graphicalSlur: GraphicalSlur, abs: PointF2D): void {\n        const curvePointsInPixels: PointF2D[] = [];\n        // 1) create inner or original curve:\n        const p1: PointF2D = new PointF2D(graphicalSlur.bezierStartPt.x + abs.x, graphicalSlur.bezierStartPt.y + abs.y);\n        const p2: PointF2D = new PointF2D(graphicalSlur.bezierStartControlPt.x + abs.x, graphicalSlur.bezierStartControlPt.y + abs.y);\n        const p3: PointF2D = new PointF2D(graphicalSlur.bezierEndControlPt.x + abs.x, graphicalSlur.bezierEndControlPt.y + abs.y);\n        const p4: PointF2D = new PointF2D(graphicalSlur.bezierEndPt.x + abs.x, graphicalSlur.bezierEndPt.y + abs.y);\n\n        // put screen transformed points into array\n        curvePointsInPixels.push(this.applyScreenTransformation(p1));\n        curvePointsInPixels.push(this.applyScreenTransformation(p2));\n        curvePointsInPixels.push(this.applyScreenTransformation(p3));\n        curvePointsInPixels.push(this.applyScreenTransformation(p4));\n        //DEBUG: Render control points\n        /*\n        for (const point of curvePointsInPixels) {\n            const pointRect: RectangleF2D = new RectangleF2D(point.x - 2, point.y - 2, 4, 4);\n            this.backend.renderRectangle(pointRect, 3, \"#000000\", 1);\n        }*/\n\n        // 2) create second outer curve to create a thickness for the curve:\n        if (graphicalSlur.placement === PlacementEnum.Above) {\n            p1.y -= 0.05;\n            p2.y -= 0.3;\n            p3.y -= 0.3;\n            p4.y -= 0.05;\n        } else {\n            p1.y += 0.05;\n            p2.y += 0.3;\n            p3.y += 0.3;\n            p4.y += 0.05;\n        }\n\n        // put screen transformed points into array\n        curvePointsInPixels.push(this.applyScreenTransformation(p1));\n        curvePointsInPixels.push(this.applyScreenTransformation(p2));\n        curvePointsInPixels.push(this.applyScreenTransformation(p3));\n        curvePointsInPixels.push(this.applyScreenTransformation(p4));\n        graphicalSlur.SVGElement = this.backend.renderCurve(curvePointsInPixels);\n    }\n\n    protected drawMeasure(measure: VexFlowMeasure): void {\n        measure.setAbsoluteCoordinates(\n            measure.PositionAndShape.AbsolutePosition.x * unitInPixels,\n            measure.PositionAndShape.AbsolutePosition.y * unitInPixels\n        );\n        try {\n            measure.draw(this.backend.getContext());\n            // Vexflow errors can happen here. If we don't catch errors, rendering will stop after this measure.\n        } catch (ex) {\n            log.warn(\"VexFlowMusicSheetDrawer.drawMeasure\", ex);\n        }\n\n        // Draw the StaffEntries\n        for (const staffEntry of measure.staffEntries) {\n            this.drawStaffEntry(staffEntry);\n        }\n    }\n\n    // private drawPixel(coord: PointF2D): void {\n    //     coord = this.applyScreenTransformation(coord);\n    //     const ctx: any = this.backend.getContext();\n    //     const oldStyle: string = ctx.fillStyle;\n    //     ctx.fillStyle = \"#00FF00FF\";\n    //     ctx.fillRect( coord.x, coord.y, 2, 2 );\n    //     ctx.fillStyle = oldStyle;\n    // }\n\n    /** Draws a line in the current backend. Only usable while pages are drawn sequentially, because backend reference is updated in that process.\n     *  To add your own lines after rendering, use DrawOverlayLine.\n     */\n    protected drawLine(start: PointF2D, stop: PointF2D, color: string = \"#FF0000FF\", lineWidth: number = 0.2): Node {\n        // TODO maybe the backend should be given as an argument here as well, otherwise this can't be used after rendering of multiple pages is done.\n        start = this.applyScreenTransformation(start);\n        stop = this.applyScreenTransformation(stop);\n        /*if (!this.backend) {\n            this.backend = this.backends[0];\n        }*/\n        return this.backend.renderLine(start, stop, color, lineWidth * unitInPixels);\n    }\n\n    /** Lets a user/developer draw an overlay line on the score. Use this instead of drawLine, which is for OSMD internally only.\n     *  The MusicPage has to be specified, because each page and Vexflow backend has its own relative coordinates.\n     *  (the AbsolutePosition of a GraphicalNote is relative to its backend)\n     *  To get a MusicPage, use GraphicalNote.ParentMusicPage.\n     */\n    public DrawOverlayLine(start: PointF2D, stop: PointF2D, musicPage: GraphicalMusicPage,\n                           color: string = \"#FF0000FF\", lineWidth: number = 0.2): Node {\n        if (!musicPage.PageNumber || musicPage.PageNumber > this.backends.length || musicPage.PageNumber < 1) {\n            console.log(\"VexFlowMusicSheetDrawer.drawOverlayLine: invalid page number / music page number doesn't correspond to an existing backend.\");\n            return;\n        }\n        const musicPageIndex: number = musicPage.PageNumber - 1;\n        const backendToUse: VexFlowBackend = this.backends[musicPageIndex];\n\n        start = this.applyScreenTransformation(start);\n        stop = this.applyScreenTransformation(stop);\n        return backendToUse.renderLine(start, stop, color, lineWidth * unitInPixels);\n    }\n\n    protected drawSkyLine(staffline: StaffLine): void {\n        const startPosition: PointF2D = staffline.PositionAndShape.AbsolutePosition;\n        const width: number = staffline.PositionAndShape.Size.width;\n        this.drawSampledLine(staffline.SkyLine, startPosition, width);\n    }\n\n    protected drawBottomLine(staffline: StaffLine): void {\n        const startPosition: PointF2D = new PointF2D(staffline.PositionAndShape.AbsolutePosition.x,\n                                                     staffline.PositionAndShape.AbsolutePosition.y);\n        const width: number = staffline.PositionAndShape.Size.width;\n        this.drawSampledLine(staffline.BottomLine, startPosition, width, \"#0000FFFF\");\n    }\n\n    /**\n     * Draw a line with a width and start point in a chosen color (used for skyline/bottom line debugging) from\n     * a simple array\n     * @param line numeric array. 0 marks the base line. Direction given by sign. Dimensions in units\n     * @param startPosition Start position in units\n     * @param width Max line width in units\n     * @param color Color to paint in. Default is red\n     */\n    private drawSampledLine(line: number[], startPosition: PointF2D, width: number, color: string = \"#FF0000FF\"): void {\n        const indices: number[] = [];\n        let currentValue: number = 0;\n        //Loops through bottom line, grabs all indices that don't equal the previously grabbed index\n        //Starting with 0 (gets index of all line changes)\n        for (let i: number = 0; i < line.length; i++) {\n            if (line[i] !== currentValue) {\n                indices.push(i);\n                currentValue = line[i];\n            }\n        }\n\n        const absolute: PointF2D = startPosition;\n        if (indices.length > 0) {\n            const samplingUnit: number = this.rules.SamplingUnit;\n\n            let horizontalStart: PointF2D = new PointF2D(absolute.x, absolute.y);\n            let horizontalEnd: PointF2D = new PointF2D(indices[0] / samplingUnit + absolute.x, absolute.y);\n            this.drawLine(horizontalStart, horizontalEnd, color);\n\n            let verticalStart: PointF2D;\n            let verticalEnd: PointF2D;\n\n            if (line[0] >= 0) {\n                verticalStart = new PointF2D(indices[0] / samplingUnit + absolute.x, absolute.y);\n                verticalEnd = new PointF2D(indices[0] / samplingUnit + absolute.x, absolute.y + line[indices[0]]);\n                this.drawLine(verticalStart, verticalEnd, color);\n            }\n\n            for (let i: number = 1; i < indices.length; i++) {\n                horizontalStart = new PointF2D(indices[i - 1] / samplingUnit + absolute.x, absolute.y + line[indices[i - 1]]);\n                horizontalEnd = new PointF2D(indices[i] / samplingUnit + absolute.x, absolute.y + line[indices[i - 1]]);\n                this.drawLine(horizontalStart, horizontalEnd, color);\n\n                verticalStart = new PointF2D(indices[i] / samplingUnit + absolute.x, absolute.y + line[indices[i - 1]]);\n                verticalEnd = new PointF2D(indices[i] / samplingUnit + absolute.x, absolute.y + line[indices[i]]);\n                this.drawLine(verticalStart, verticalEnd, color);\n            }\n\n            if (indices[indices.length - 1] < line.length) {\n                horizontalStart = new PointF2D(indices[indices.length - 1] / samplingUnit + absolute.x, absolute.y + line[indices[indices.length - 1]]);\n                horizontalEnd = new PointF2D(absolute.x + width, absolute.y + line[indices[indices.length - 1]]);\n                this.drawLine(horizontalStart, horizontalEnd, color);\n            } else {\n                horizontalStart = new PointF2D(indices[indices.length - 1] / samplingUnit + absolute.x, absolute.y);\n                horizontalEnd = new PointF2D(absolute.x + width, absolute.y);\n                this.drawLine(horizontalStart, horizontalEnd, color);\n            }\n        } else {\n            // Flat line\n            const start: PointF2D = new PointF2D(absolute.x, absolute.y);\n            const end: PointF2D = new PointF2D(absolute.x + width, absolute.y);\n            this.drawLine(start, end, color);\n        }\n    }\n\n    private drawStaffEntry(staffEntry: GraphicalStaffEntry): void {\n        if (staffEntry.FingeringEntries.length > 0) {\n            for (const fingeringEntry of staffEntry.FingeringEntries) {\n                fingeringEntry.SVGNode = this.drawLabel(fingeringEntry, GraphicalLayers.Notes);\n            }\n        }\n        // Draw ChordSymbols\n        if (staffEntry.graphicalChordContainers !== undefined && staffEntry.graphicalChordContainers.length > 0) {\n            for (const graphicalChordContainer of staffEntry.graphicalChordContainers) {\n                const label: GraphicalLabel = graphicalChordContainer.GraphicalLabel;\n                label.SVGNode = this.drawLabel(label, <number>GraphicalLayers.Notes);\n            }\n        }\n        if (this.rules.RenderLyrics) {\n            if (staffEntry.LyricsEntries.length > 0) {\n                this.drawLyrics(staffEntry.LyricsEntries, <number>GraphicalLayers.Notes);\n            }\n        }\n    }\n\n    /**\n     * Draw all lyrics to the canvas\n     * @param lyricEntries Array of lyric entries to be drawn\n     * @param layer Number of the layer that the lyrics should be drawn in\n     */\n    private drawLyrics(lyricEntries: GraphicalLyricEntry[], layer: number): void {\n        lyricEntries.forEach(lyricsEntry => {\n            const label: GraphicalLabel = lyricsEntry.GraphicalLabel;\n            label.SVGNode = this.drawLabel(label, layer);\n        });\n    }\n\n    protected drawInstrumentBrace(brace: GraphicalObject, system: MusicSystem): void {\n        // Draw InstrumentBrackets at beginning of line\n        const vexBrace: VexFlowInstrumentBrace = (brace as VexFlowInstrumentBrace);\n        vexBrace.draw(this.backend.getContext());\n    }\n\n    protected drawGroupBracket(bracket: GraphicalObject, system: MusicSystem): void {\n        // Draw InstrumentBrackets at beginning of line\n        const vexBrace: VexFlowInstrumentBracket = (bracket as VexFlowInstrumentBracket);\n        vexBrace.draw(this.backend.getContext());\n    }\n\n    protected drawOctaveShifts(staffLine: StaffLine): void {\n        for (const graphicalOctaveShift of staffLine.OctaveShifts) {\n            if (graphicalOctaveShift) {\n                const vexFlowOctaveShift: VexFlowOctaveShift = graphicalOctaveShift as VexFlowOctaveShift;\n                const ctx: Vex.IRenderContext = this.backend.getContext();\n                const textBracket: VF.TextBracket = vexFlowOctaveShift.getTextBracket();\n                textBracket.setContext(ctx);\n                try {\n                    textBracket.draw();\n                } catch (ex) {\n                    log.warn(ex);\n                }\n            }\n        }\n    }\n\n    protected drawExpressions(staffline: StaffLine): void {\n        // Draw all Expressions\n        for (const abstractGraphicalExpression of staffline.AbstractExpressions) {\n            // Draw InstantaniousDynamics\n            if (abstractGraphicalExpression instanceof GraphicalInstantaneousDynamicExpression) {\n                this.drawInstantaneousDynamic((abstractGraphicalExpression as VexFlowInstantaneousDynamicExpression));\n                // Draw InstantaniousTempo\n            } else if (abstractGraphicalExpression instanceof GraphicalInstantaneousTempoExpression) {\n                const label: GraphicalLabel = (abstractGraphicalExpression as GraphicalInstantaneousTempoExpression).GraphicalLabel;\n                label.SVGNode = this.drawLabel(label, GraphicalLayers.Notes);\n                // Draw ContinuousDynamics\n            } else if (abstractGraphicalExpression instanceof GraphicalContinuousDynamicExpression) {\n                this.drawContinuousDynamic((abstractGraphicalExpression as VexFlowContinuousDynamicExpression));\n                // Draw ContinuousTempo\n                // } else if (abstractGraphicalExpression instanceof GraphicalContinuousTempoExpression) {\n                //     this.drawLabel((abstractGraphicalExpression as GraphicalContinuousTempoExpression).GraphicalLabel, GraphicalLayers.Notes);\n                // // Draw Mood\n                // } else if (abstractGraphicalExpression instanceof GraphicalMoodExpression) {\n                //     GraphicalMoodExpression; graphicalMood = (GraphicalMoodExpression); abstractGraphicalExpression;\n                //     drawLabel(graphicalMood.GetGraphicalLabel, <number>GraphicalLayers.Notes);\n            // Draw Unknown\n            } else if (abstractGraphicalExpression instanceof GraphicalUnknownExpression) {\n                const label: GraphicalLabel = abstractGraphicalExpression.Label;\n                label.SVGNode = this.drawLabel(label, <number>GraphicalLayers.Notes);\n            } else {\n                log.warn(\"Unkown type of expression!\");\n            }\n        }\n    }\n\n    protected drawInstantaneousDynamic(instantaneousDynamic: GraphicalInstantaneousDynamicExpression): void {\n        const label: GraphicalLabel = (instantaneousDynamic as VexFlowInstantaneousDynamicExpression).Label;\n        label.SVGNode = this.drawLabel(label, <number>GraphicalLayers.Notes);\n    }\n\n    protected drawContinuousDynamic(graphicalExpression: VexFlowContinuousDynamicExpression): void {\n        if (graphicalExpression.IsVerbal) {\n            const label: GraphicalLabel = graphicalExpression.Label;\n            label.SVGNode = this.drawLabel(label, <number>GraphicalLayers.Notes);\n        } else {\n            for (const line of graphicalExpression.Lines) {\n                const start: PointF2D = new PointF2D(graphicalExpression.ParentStaffLine.PositionAndShape.AbsolutePosition.x + line.Start.x,\n                                                     graphicalExpression.ParentStaffLine.PositionAndShape.AbsolutePosition.y + line.Start.y);\n                const end: PointF2D = new PointF2D(graphicalExpression.ParentStaffLine.PositionAndShape.AbsolutePosition.x + line.End.x,\n                                                   graphicalExpression.ParentStaffLine.PositionAndShape.AbsolutePosition.y + line.End.y);\n                this.drawLine(start, end, \"black\", line.Width);\n            }\n        }\n    }\n\n    /**\n     * Renders a Label to the screen (e.g. Title, composer..)\n     * @param graphicalLabel holds the label string, the text height in units and the font parameters\n     * @param layer is the current rendering layer. There are many layers on top of each other to which can be rendered. Not needed for now.\n     * @param bitmapWidth Not needed for now.\n     * @param bitmapHeight Not needed for now.\n     * @param heightInPixel the height of the text in screen coordinates\n     * @param screenPosition the position of the lower left corner of the text in screen coordinates\n     */\n    protected renderLabel(graphicalLabel: GraphicalLabel, layer: number, bitmapWidth: number,\n                          bitmapHeight: number, fontHeightInPixel: number, screenPosition: PointF2D): Node {\n        if (!graphicalLabel.Label.print) {\n            return undefined;\n        }\n        const height: number = graphicalLabel.Label.fontHeight * unitInPixels;\n        const { font } = graphicalLabel.Label;\n        let color: string;\n        if (this.rules.ColoringEnabled) {\n            color = graphicalLabel.Label.colorDefault;\n            if (!color) {\n                color = this.rules.DefaultColorLabel;\n            }\n        }\n        let { fontStyle, fontFamily } = graphicalLabel.Label;\n        if (!fontStyle) {\n            fontStyle = this.rules.DefaultFontStyle;\n        }\n        if (!fontFamily) {\n            fontFamily = this.rules.DefaultFontFamily;\n        }\n\n        let node: Node;\n        for (let i: number = 0; i < graphicalLabel.TextLines?.length; i++) {\n            const currLine: {text: string, xOffset: number, width: number} = graphicalLabel.TextLines[i];\n            const xOffsetInPixel: number = this.calculatePixelDistance(currLine.xOffset);\n            const linePosition: PointF2D = new PointF2D(screenPosition.x + xOffsetInPixel, screenPosition.y);\n            const newNode: Node =\n                this.backend.renderText(height, fontStyle, font, currLine.text, fontHeightInPixel, linePosition, color, graphicalLabel.Label.fontFamily);\n            if (!node) {\n                node = newNode;\n            } else {\n                node.appendChild(newNode);\n            }\n            screenPosition.y = screenPosition.y + fontHeightInPixel;\n            if (graphicalLabel.TextLines.length > 1) {\n                screenPosition.y += this.rules.SpacingBetweenTextLines;\n            }\n        }\n        // font currently unused, replaced by fontFamily\n        return node; // alternatively, return Node[] and refactor annotationElementMap to handle node array instead of single node\n    }\n\n    /**\n     * Renders a rectangle with the given style to the screen.\n     * It is given in screen coordinates.\n     * @param rectangle the rect in screen coordinates\n     * @param layer is the current rendering layer. There are many layers on top of each other to which can be rendered. Not needed for now.\n     * @param styleId the style id\n     * @param alpha alpha value between 0 and 1\n     */\n    protected renderRectangle(rectangle: RectangleF2D, layer: number, styleId: number, colorHex: string, alpha: number): Node {\n        return this.backend.renderRectangle(rectangle, styleId, colorHex, alpha);\n    }\n\n    /**\n     * Converts a point from unit to pixel space.\n     * @param point\n     * @returns {PointF2D}\n     */\n    protected applyScreenTransformation(point: PointF2D): PointF2D {\n        return new PointF2D(point.x * unitInPixels, point.y * unitInPixels);\n    }\n\n    /**\n     * Converts a rectangle from unit to pixel space.\n     * @param rectangle\n     * @returns {RectangleF2D}\n     */\n    protected applyScreenTransformationForRect(rectangle: RectangleF2D): RectangleF2D {\n        return new RectangleF2D(rectangle.x * unitInPixels, rectangle.y * unitInPixels, rectangle.width * unitInPixels, rectangle.height * unitInPixels);\n    }\n}\n","import {MusicSystem} from \"../MusicSystem\";\nimport {SystemLinesEnum} from \"../SystemLinesEnum\";\nimport {SystemLinePosition} from \"../SystemLinePosition\";\nimport {GraphicalMeasure} from \"../GraphicalMeasure\";\nimport {SystemLine} from \"../SystemLine\";\nimport {VexFlowStaffLine} from \"./VexFlowStaffLine\";\nimport {VexFlowMeasure} from \"./VexFlowMeasure\";\nimport {VexFlowConverter} from \"./VexFlowConverter\";\nimport {StaffLine} from \"../StaffLine\";\nimport {EngravingRules} from \"../EngravingRules\";\nimport { VexFlowInstrumentBracket } from \"./VexFlowInstrumentBracket\";\nimport { VexFlowInstrumentBrace } from \"./VexFlowInstrumentBrace\";\nimport { SkyBottomLineCalculator } from \"../SkyBottomLineCalculator\";\n\nexport class VexFlowMusicSystem extends MusicSystem {\n    constructor(id: number, rules: EngravingRules) {\n        super(id);\n        this.rules = rules;\n    }\n\n    public calculateBorders(rules: EngravingRules): void {\n        if (this.staffLines.length === 0) {\n            return;\n        }\n        const width: number = this.calcBracketsWidth();\n        this.boundingBox.BorderLeft = -width;\n        this.boundingBox.BorderMarginLeft = -width;\n        this.boundingBox.XBordersHaveBeenSet = true;\n\n        const topSkyBottomLineCalculator: SkyBottomLineCalculator = this.staffLines[0].SkyBottomLineCalculator;\n        const top: number = topSkyBottomLineCalculator.getSkyLineMin();\n        this.boundingBox.BorderTop = top;\n        this.boundingBox.BorderMarginTop = top;\n\n        const lastStaffLine: StaffLine = this.staffLines[this.staffLines.length - 1];\n        const bottomSkyBottomLineCalculator: SkyBottomLineCalculator = lastStaffLine.SkyBottomLineCalculator;\n        const bottom: number = bottomSkyBottomLineCalculator.getBottomLineMax()\n                    + lastStaffLine.PositionAndShape.RelativePosition.y;\n        this.boundingBox.BorderBottom = bottom;\n        this.boundingBox.BorderMarginBottom = bottom;\n\n        this.boundingBox.XBordersHaveBeenSet = true;\n        this.boundingBox.YBordersHaveBeenSet = true;\n    }\n\n    /**\n     * This method creates all the graphical lines and dots needed to render a system line (e.g. bold-thin-dots..).\n     * @param xPosition\n     * @param lineWidth\n     * @param lineType\n     * @param linePosition indicates if the line belongs to start or end of measure\n     * @param musicSystem\n     * @param topMeasure\n     * @param bottomMeasure\n     */\n    protected createSystemLine(xPosition: number, lineWidth: number, lineType: SystemLinesEnum, linePosition: SystemLinePosition,\n                               musicSystem: MusicSystem, topMeasure: GraphicalMeasure, bottomMeasure: GraphicalMeasure = undefined): SystemLine {\n        const vfTopMeasure: VexFlowMeasure = topMeasure as VexFlowMeasure;\n        let renderInitialLine: boolean = false;\n\n        if (bottomMeasure) {\n            renderInitialLine = true;\n            // create here the correct lines according to the given lineType.\n            (bottomMeasure as VexFlowMeasure).lineTo(topMeasure as VexFlowMeasure, VexFlowConverter.line(lineType, linePosition));\n            (bottomMeasure as VexFlowMeasure).addMeasureLine(lineType, linePosition);\n            //Double repeat. VF doesn't have concept of double repeat. Need to add stave connector to begin of next measure\n            if (lineType === SystemLinesEnum.DotsBoldBoldDots) {\n                const nextIndex: number = bottomMeasure.ParentStaffLine.Measures.indexOf(bottomMeasure) + 1;\n                const nextBottomMeasure: VexFlowMeasure = bottomMeasure.ParentStaffLine.Measures[nextIndex] as VexFlowMeasure;\n                const nextTopMeasure: VexFlowMeasure = topMeasure.ParentStaffLine.Measures[nextIndex] as VexFlowMeasure;\n                if (nextBottomMeasure && nextTopMeasure) {\n                    nextBottomMeasure.lineTo(nextTopMeasure, VexFlowConverter.line(SystemLinesEnum.BoldThinDots, linePosition));\n                    nextBottomMeasure.addMeasureLine(SystemLinesEnum.BoldThinDots, linePosition);\n                }\n            }\n        }\n        if (vfTopMeasure) {\n            vfTopMeasure.addMeasureLine(lineType, linePosition, renderInitialLine);\n        }\n\n        return new SystemLine(lineType, linePosition, this, topMeasure, bottomMeasure);\n    }\n\n    /**\n     * creates an instrument brace for the given dimension.\n     * The height and positioning can be inferred from the given staff lines.\n     * @param firstStaffLine the upper StaffLine (use a cast to get the VexFlowStaffLine) of the brace to create\n     * @param lastStaffLine the lower StaffLine (use a cast to get the VexFlowStaffLine) of the brace to create\n     */\n    protected createInstrumentBracket(firstStaffLine: StaffLine, lastStaffLine: StaffLine): void {\n        // You could write this in one line but the linter doesn't let me.\n        const firstVexStaff: VexFlowStaffLine = (firstStaffLine as VexFlowStaffLine);\n        const lastVexStaff: VexFlowStaffLine = (lastStaffLine as VexFlowStaffLine);\n        const vexFlowBracket: VexFlowInstrumentBrace = new VexFlowInstrumentBrace(firstVexStaff, lastVexStaff);\n        this.InstrumentBrackets.push(vexFlowBracket);\n        return;\n    }\n\n    /**\n     * creates an instrument group bracket for the given dimension.\n     * There can be cascaded bracket (e.g. a group of 2 in a group of 4) -\n     * The recursion depth informs about the current depth level (needed for positioning)\n     * @param firstStaffLine the upper staff line of the bracket to create\n     * @param lastStaffLine the lower staff line of the bracket to create\n     * @param recursionDepth\n     */\n    protected createGroupBracket(firstStaffLine: StaffLine, lastStaffLine: StaffLine, recursionDepth: number): void {\n        const firstVexStaff: VexFlowStaffLine = (firstStaffLine as VexFlowStaffLine);\n        const lastVexStaff: VexFlowStaffLine = (lastStaffLine as VexFlowStaffLine);\n        if (recursionDepth === 0) {\n            const vexFlowBracket: VexFlowInstrumentBracket = new VexFlowInstrumentBracket(firstVexStaff, lastVexStaff, recursionDepth);\n            this.GroupBrackets.push(vexFlowBracket);\n        } else {\n            const vexFlowBrace: VexFlowInstrumentBrace = new VexFlowInstrumentBrace(firstVexStaff, lastVexStaff, recursionDepth);\n            this.GroupBrackets.push(vexFlowBrace);\n        }\n        return;\n    }\n}\n","import Vex from \"vexflow\";\nimport VF = Vex.Flow;\nimport { GraphicalOctaveShift } from \"../GraphicalOctaveShift\";\nimport { OctaveShift, OctaveEnum } from \"../../VoiceData/Expressions/ContinuousExpressions/OctaveShift\";\nimport { BoundingBox } from \"../BoundingBox\";\nimport { GraphicalStaffEntry } from \"../GraphicalStaffEntry\";\nimport { VexFlowVoiceEntry } from \"./VexFlowVoiceEntry\";\nimport log from \"loglevel\";\n\n/**\n * The vexflow adaptation of a graphical shift.\n */\nexport class VexFlowOctaveShift extends GraphicalOctaveShift {\n\n    /** Defines the note where the octave shift starts */\n    public startNote: VF.StemmableNote;\n    /** Defines the note where the octave shift ends */\n    public endNote: VF.StemmableNote;\n    /** Top or bottom of the staffline */\n    private position: VF.TextBracket.Positions;\n    /** Supscript is a smaller text after the regular text (e.g. va after 8) */\n    private supscript: string;\n    /** Main text element */\n    private text: string;\n\n    /**\n     * Create a new vexflow ocatve shift\n     * @param octaveShift the object read by the ExpressionReader\n     * @param parent the bounding box of the parent\n     */\n    constructor(octaveShift: OctaveShift, parent: BoundingBox) {\n        super(octaveShift, parent);\n        switch (octaveShift.Type) {\n            case OctaveEnum.VA8:\n                this.position = VF.TextBracket.Positions.TOP;\n                this.supscript = \"va\";\n                this.text = \"8\";\n                break;\n            case OctaveEnum.MA15:\n                this.position = VF.TextBracket.Positions.TOP;\n                this.supscript = \"ma\";\n                this.text = \"15\";\n                break;\n            case OctaveEnum.VB8:\n                this.position = VF.TextBracket.Positions.BOTTOM;\n                this.supscript = \"vb\";\n                this.text = \"8\";\n                break;\n            case OctaveEnum.MB15:\n                this.position = VF.TextBracket.Positions.BOTTOM;\n                this.supscript = \"mb\";\n                this.text = \"15\";\n                break;\n            default:\n                log.error(\"Unknown or NONE octaveshift. This should not be called!\");\n                break;\n        }\n    }\n\n    /**\n     * Set a start note using a staff entry\n     * @param graphicalStaffEntry the staff entry that holds the start note\n     */\n    public setStartNote(graphicalStaffEntry: GraphicalStaffEntry): boolean {\n        for (const gve of graphicalStaffEntry.graphicalVoiceEntries) {\n            const vve: VexFlowVoiceEntry = (gve as VexFlowVoiceEntry);\n            if (vve?.vfStaveNote) {\n                this.startNote = vve.vfStaveNote;\n                return true;\n            }\n        }\n        return false; // couldn't find a startNote\n    }\n\n    /**\n     * Set an end note using a staff entry\n     * @param graphicalStaffEntry the staff entry that holds the end note\n     */\n    public setEndNote(graphicalStaffEntry: GraphicalStaffEntry): boolean {\n        // this is duplicate code from setStartNote, but if we make one general method, we add a lot of branching.\n        for (const gve of graphicalStaffEntry.graphicalVoiceEntries) {\n            const vve: VexFlowVoiceEntry = (gve as VexFlowVoiceEntry);\n            if (vve?.vfStaveNote) {\n                this.endNote = vve.vfStaveNote;\n                return true;\n            }\n        }\n        return false; // couldn't find an endNote\n    }\n\n    /**\n     * Get the actual vexflow text bracket used for drawing\n     */\n    public getTextBracket(): VF.TextBracket {\n        return new VF.TextBracket({\n            position: this.position,\n            start: this.startNote,\n            stop: this.endNote,\n            superscript: this.supscript,\n            text: this.text,\n        });\n    }\n\n}\n","import Vex from \"vexflow\";\nimport VF = Vex.Flow;\nimport { Slur } from \"../../VoiceData/Expressions/ContinuousExpressions/Slur\";\n\nexport interface ICurveOptions {\n    spacing: number;\n    thickness: number;\n    x_shift: number;\n    y_shift: number;\n    position: CurvePositionEnum;\n    position_end: CurvePositionEnum;\n    invert: boolean;\n    cps: [{ x: number, y: number }, { x: number, y: number }];\n}\n\nexport enum CurvePositionEnum {\n    NEAR_HEAD = 1,\n    NEAR_TOP = 2,\n}\n\nexport class VexFlowSlur {\n\n    constructor(parentslur: Slur) {\n        this.parentSlur = parentslur;\n    }\n\n    /**\n     * Copy constructor: generate a VexFlowSlur from an existing one\n     */\n    public static createFromVexflowSlur(vfSlur: VexFlowSlur): VexFlowSlur {\n        return new VexFlowSlur(vfSlur.parentSlur);\n    }\n\n    public get vfSlur(): Slur {\n        return this.parentSlur;\n    }\n\n    private parentSlur: Slur;\n\n    public vfStartNote: VF.StemmableNote = undefined;\n    public vfEndNote: VF.StemmableNote = undefined;\n\n    public vfCurve: VF.Curve;\n\n    public curve_Options(): ICurveOptions {\n        return {\n            cps: [{ x: 0, y: 10 }, { x: 0, y: 10 }],\n            invert: false,\n            position: CurvePositionEnum.NEAR_TOP,\n            position_end: CurvePositionEnum.NEAR_TOP,\n            spacing: 2,\n            thickness: 2,\n            x_shift: 0,\n            y_shift: 10\n        };\n    }\n\n    // public createVexFlowCurve(): void {\n    //     if (this.voiceentrySlurStart || this.voiceentrySlurEnd) {\n    //         this.vfCurve = new VF.Curve( (this.voiceentrySlurStart as VexFlowVoiceEntry).vfStaveNote,\n    //                                            (this.voiceentrySlurEnd as VexFlowVoiceEntry).vfStaveNote,\n    //                                            this.curve_Options()\n    //                                         );\n    //     }\n    // }\n    public createVexFlowCurve(): void {\n            this.vfCurve = new VF.Curve( this.vfStartNote,\n                                               this.vfEndNote,\n                                               undefined//this.curve_Options()\n                                            );\n    }\n}\n\n\n\n\n","import Vex from \"vexflow\";\nimport VF = Vex.Flow;\nimport { GraphicalNote } from \"../GraphicalNote\";\nimport { GraphicalStaffEntry } from \"../GraphicalStaffEntry\";\nimport { VexFlowMeasure } from \"./VexFlowMeasure\";\nimport { SourceStaffEntry } from \"../../VoiceData/SourceStaffEntry\";\nimport { unitInPixels } from \"./VexFlowMusicSheetDrawer\";\nimport { VexFlowVoiceEntry } from \"./VexFlowVoiceEntry\";\nimport { Note } from \"../../VoiceData/Note\";\nimport { AccidentalEnum } from \"../../../Common/DataObjects/Pitch\";\n\nexport class VexFlowStaffEntry extends GraphicalStaffEntry {\n    constructor(measure: VexFlowMeasure, sourceStaffEntry: SourceStaffEntry, staffEntryParent: VexFlowStaffEntry) {\n        super(measure, sourceStaffEntry, staffEntryParent);\n    }\n\n    // if there is a in-measure clef given before this staffEntry,\n    // it will be converted to a VF.ClefNote and assigned to this variable:\n    public vfClefBefore: VF.ClefNote;\n\n    /**\n     * Calculates the staff entry positions from the VexFlow stave information and the tickabels inside the staff.\n     * This is needed in order to set the OSMD staff entries (which are almost the same as tickables) to the correct positions.\n     * It is also needed to be done after formatting!\n     */\n    public calculateXPosition(): void {\n        const stave: VF.Stave = (this.parentMeasure as VexFlowMeasure).getVFStave();\n\n        // sets the vexflow x positions back into the bounding boxes of the staff entries in the osmd object model.\n        // The positions are needed for cursor placement and mouse/tap interactions\n        let lastBorderLeft: number = 0;\n        for (const gve of this.graphicalVoiceEntries as VexFlowVoiceEntry[]) {\n            if (gve.vfStaveNote) {\n                gve.vfStaveNote.setStave(stave);\n                if (!gve.vfStaveNote.preFormatted) {\n                    continue;\n                }\n                gve.applyBordersFromVexflow();\n                if (this.parentMeasure.ParentStaff.isTab) {\n                    // the x-position could be finetuned for the cursor.\n                    // somehow, gve.vfStaveNote.getBoundingBox() is null for a TabNote (which is a StemmableNote).\n                    this.PositionAndShape.RelativePosition.x = (gve.vfStaveNote.getAbsoluteX() + (<any>gve.vfStaveNote).glyph.getWidth()) / unitInPixels;\n                } else {\n                    this.PositionAndShape.RelativePosition.x = gve.vfStaveNote.getBoundingBox().getX() / unitInPixels;\n                }\n                const sourceNote: Note = gve.notes[0].sourceNote;\n                if (sourceNote.isRest() && sourceNote.Length.RealValue === this.parentMeasure.parentSourceMeasure.ActiveTimeSignature.RealValue) {\n                    // whole rest: length = measure length. (4/4 in a 4/4 time signature, 3/4 in a 3/4 time signature, 1/4 in a 1/4 time signature, etc.)\n                    // see Note.isWholeRest(), which is currently not safe\n                    this.PositionAndShape.RelativePosition.x +=\n                        this.parentMeasure.parentSourceMeasure.Rules.WholeRestXShiftVexflow - 0.1; // xShift from VexFlowConverter\n                    gve.PositionAndShape.BorderLeft = -0.7;\n                    gve.PositionAndShape.BorderRight = 0.7;\n                }\n                if (gve.PositionAndShape.BorderLeft < lastBorderLeft) {\n                    lastBorderLeft = gve.PositionAndShape.BorderLeft;\n                }\n            }\n        }\n        this.PositionAndShape.RelativePosition.x -= lastBorderLeft;\n        this.PositionAndShape.calculateBoundingBox();\n    }\n\n    public setMaxAccidentals(): number {\n        for (const gve of this.graphicalVoiceEntries) {\n            for (const note of gve.notes) {\n                if (note.DrawnAccidental !== AccidentalEnum.NONE) {\n                    //TODO continue checking for double accidentals in other notes?\n                    return this.MaxAccidentals = 1;\n                }\n                // live calculation if the note was changed:\n                // let pitch: Pitch = note.sourceNote.Pitch;\n                // pitch = (note as VexFlowGraphicalNote).drawPitch(pitch);\n                // if (pitch) {\n                //     const accidental: AccidentalEnum = pitch.Accidental;\n                //     if (accidental !== AccidentalEnum.NONE) {\n                //         this.maxAccidentals = 1;\n                //         return this.maxAccidentals;\n                //     }\n                // }\n            }\n        }\n        return this.MaxAccidentals = 0;\n    }\n\n    // should be called after VexFlowConverter.StaveNote\n    public setModifierXOffsets(): void {\n        let notes: GraphicalNote[] = [];\n        for (const gve of this.graphicalVoiceEntries) {\n            notes = notes.concat(gve.notes);\n        }\n        const staffLines: number[] = notes.map(n => n.staffLine);\n        const stringNumberOffsets: number[] = this.calculateModifierXOffsets(staffLines, 1);\n        const fingeringOffsets: number[] = this.calculateModifierXOffsets(staffLines, 0.5);\n        notes.forEach((note, i) => {\n            note.baseFingeringXOffset = fingeringOffsets[i];\n            note.baseStringNumberXOffset = stringNumberOffsets[i];\n        });\n    }\n\n    /**\n     * Calculate x offsets for overlapping string and fingering modifiers in a chord.\n     */\n    private calculateModifierXOffsets(staffLines: number[], collisionDistance: number): number[] {\n        const offsets: number[] = [];\n        for (let i: number = 0; i < staffLines.length; i++) {\n            let offset: number = 0;\n            let collisionFound: boolean = true;\n            while (collisionFound) {\n                for (let j: number = i; j >= 0; j--) {\n                    const lineDiff: number = Math.abs(staffLines[i] - staffLines[j]);\n                    if (lineDiff <= collisionDistance && offset === offsets[j]) {\n                        offset++;\n                        collisionFound = true;\n                        break;\n                    }\n                    collisionFound = false;\n                }\n            }\n            offsets.push(offset);\n        }\n        return offsets;\n    }\n\n}\n","import {StaffLine} from \"../StaffLine\";\nimport {MusicSystem} from \"../MusicSystem\";\nimport {Staff} from \"../../VoiceData/Staff\";\nimport { VexFlowSlur } from \"./VexFlowSlur\";\nimport { AlignmentManager } from \"./AlignmentManager\";\n\nexport class VexFlowStaffLine extends StaffLine {\n    constructor(parentSystem: MusicSystem, parentStaff: Staff) {\n        super(parentSystem, parentStaff);\n        this.alignmentManager = new AlignmentManager(this);\n    }\n\n    protected slursInVFStaffLine: VexFlowSlur[] = [];\n    protected alignmentManager: AlignmentManager;\n\n    public get SlursInVFStaffLine(): VexFlowSlur[] {\n        return this.slursInVFStaffLine;\n    }\n    public addVFSlurToVFStaffline(vfSlur: VexFlowSlur): void {\n        this.slursInVFStaffLine.push(vfSlur);\n    }\n\n    public get AlignmentManager(): AlignmentManager {\n        return this.alignmentManager;\n    }\n}\n","import Vex from \"vexflow\";\nimport VF = Vex.Flow;\nimport { Staff } from \"../../VoiceData/Staff\";\nimport { SourceMeasure } from \"../../VoiceData/SourceMeasure\";\nimport { VexFlowMeasure } from \"./VexFlowMeasure\";\nimport { VexFlowStaffEntry } from \"./VexFlowStaffEntry\";\nimport { VexFlowConverter } from \"./VexFlowConverter\";\nimport { StaffLine } from \"../StaffLine\";\nimport { GraphicalVoiceEntry } from \"../GraphicalVoiceEntry\";\nimport { VexFlowVoiceEntry } from \"./VexFlowVoiceEntry\";\nimport { Arpeggio } from \"../../VoiceData/Arpeggio\";\nimport { Voice } from \"../../VoiceData/Voice\";\nimport log from \"loglevel\";\n\nexport class VexFlowTabMeasure extends VexFlowMeasure {\n    constructor(staff: Staff, sourceMeasure: SourceMeasure = undefined, staffLine: StaffLine = undefined) {\n        super(staff, sourceMeasure, staffLine);\n        this.isTabMeasure = true;\n    }\n\n    /**\n     * Reset all the geometric values and parameters of this measure and put it in an initialized state.\n     * This is needed to evaluate a measure a second time by system builder.\n     */\n    public resetLayout(): void {\n        // Take into account some space for the begin and end lines of the stave\n        // Will be changed when repetitions will be implemented\n        //this.beginInstructionsWidth = 20 / UnitInPixels;\n        //this.endInstructionsWidth = 20 / UnitInPixels;\n        const stafflineCount: number = this.ParentStaff.StafflineCount ?? 6; // if undefined, 6 by default (same as Vexflow default)\n        this.stave = new VF.TabStave(0, 0, 0, {\n            space_above_staff_ln: 0,\n            space_below_staff_ln: 0,\n            num_lines: stafflineCount\n        });\n        // also see VexFlowMusicSheetDrawer.drawSheet() for some other vexflow default value settings (like default font scale)\n        this.updateInstructionWidth();\n    }\n\n    public graphicalMeasureCreatedCalculations(): void {\n        for (let idx: number = 0, len: number = this.staffEntries.length; idx < len; ++idx) {\n            const graphicalStaffEntry: VexFlowStaffEntry = (this.staffEntries[idx] as VexFlowStaffEntry);\n\n            // create vex flow Notes:\n            for (const gve of graphicalStaffEntry.graphicalVoiceEntries) {\n                if (gve.notes[0].sourceNote.isRest()) {\n                    (gve as VexFlowVoiceEntry).vfStaveNote = VexFlowConverter.GhostNotes(gve.notes[0].sourceNote.Length)[0];\n                } else {\n                    (gve as VexFlowVoiceEntry).vfStaveNote = VexFlowConverter.CreateTabNote(gve);\n                }\n            }\n        }\n\n        if (this.rules.TupletNumbersInTabs) { // default false, don't show tuplets in tab measures\n            this.finalizeTuplets();\n        }\n\n        const voices: Voice[] = this.getVoicesWithinMeasure();\n\n        for (const voice of voices) {\n            if (!voice) {\n                continue;\n            }\n\n            // add a vexFlow voice for this voice:\n            this.vfVoices[voice.VoiceId] = new VF.Voice({\n                        beat_value: this.parentSourceMeasure.Duration.Denominator,\n                        num_beats: this.parentSourceMeasure.Duration.Numerator,\n                        resolution: VF.RESOLUTION,\n                    }).setMode(VF.Voice.Mode.SOFT);\n\n            const restFilledEntries: GraphicalVoiceEntry[] =  this.getRestFilledVexFlowStaveNotesPerVoice(voice);\n            // create vex flow voices and add tickables to it:\n            for (const voiceEntry of restFilledEntries) {\n                if (voiceEntry.parentVoiceEntry) {\n                    if (voiceEntry.parentVoiceEntry.IsGrace && !voiceEntry.parentVoiceEntry.GraceAfterMainNote) {\n                        continue;\n                    }\n                }\n\n                const vexFlowVoiceEntry: VexFlowVoiceEntry = voiceEntry as VexFlowVoiceEntry;\n                if (voiceEntry.notes.length === 0 || !voiceEntry.notes[0] || !voiceEntry.notes[0].sourceNote.PrintObject) {\n                    // GhostNote, don't add modifiers like in-measure clefs\n                    this.vfVoices[voice.VoiceId].addTickable(vexFlowVoiceEntry.vfStaveNote);\n                    continue;\n                }\n\n                // don't add non-tab fingerings for tab measures (doesn't work yet for tabnotes in vexflow, see VexFlowMeasure.createFingerings())\n                // if (voiceEntry.parentVoiceEntry && this.rules.RenderFingerings) {\n                //     this.createFingerings(voiceEntry);\n                // }\n\n                // add Arpeggio\n                if (voiceEntry.parentVoiceEntry && voiceEntry.parentVoiceEntry.Arpeggio) {\n                    const arpeggio: Arpeggio = voiceEntry.parentVoiceEntry.Arpeggio;\n                    // TODO right now our arpeggio object has all arpeggio notes from arpeggios across all voices.\n                    // see VoiceGenerator. Doesn't matter for Vexflow for now though\n                    if (voiceEntry.notes && voiceEntry.notes.length > 1) {\n                        const type: VF.Stroke.Type = VexFlowConverter.StrokeTypeFromArpeggioType(arpeggio.type);\n                        const stroke: VF.Stroke = new VF.Stroke(type, {\n                            all_voices: this.rules.ArpeggiosGoAcrossVoices\n                            // default: false. This causes arpeggios to always go across all voices, which is often unwanted.\n                            // also, this can cause infinite height of stroke, see #546\n                        });\n                        //if (arpeggio.notes.length === vexFlowVoiceEntry.notes.length) { // different workaround for endless y bug\n                        if (this.rules.RenderArpeggios) {\n                            vexFlowVoiceEntry.vfStaveNote.addStroke(0, stroke);\n                        }\n                    } else {\n                        log.debug(`[OSMD] arpeggio in measure ${this.MeasureNumber} could not be drawn.\n                        voice entry had less than two notes, arpeggio is likely between voice entries, not currently supported in Vexflow.`);\n                        // TODO: create new arpeggio with all the arpeggio's notes (arpeggio.notes), perhaps with GhostNotes in a new vfStaveNote. not easy.\n                    }\n                }\n\n                this.vfVoices[voice.VoiceId].addTickable(vexFlowVoiceEntry.vfStaveNote);\n            }\n        }\n        //this.createArticulations();\n        //this.createOrnaments();\n    }\n}\n","import {ITextMeasurer} from \"../../Interfaces/ITextMeasurer\";\nimport {Fonts} from \"../../../Common/Enums/Fonts\";\nimport {FontStyles} from \"../../../Common/Enums/FontStyles\";\nimport {VexFlowConverter} from \"./VexFlowConverter\";\nimport { EngravingRules } from \"../EngravingRules\";\n/**\n * Created by Matthias on 21.06.2016.\n */\n\nexport class VexFlowTextMeasurer implements ITextMeasurer {\n    constructor(rules: EngravingRules) {\n        const canvas: HTMLCanvasElement = document.createElement(\"canvas\");\n        this.context = canvas.getContext(\"2d\");\n        this.rules = rules;\n    }\n    // The context of a canvas used internally to compute font sizes\n    private context: CanvasRenderingContext2D;\n    public fontSize: number = 20;\n    public fontSizeStandard: number = this.fontSize;\n    private rules: EngravingRules;\n\n    /**\n     *\n     * @param text\n     * @param font\n     * @param style\n     * @returns {number}\n     */\n    public computeTextWidthToHeightRatio(text: string, font: Fonts, style: FontStyles,\n                                         fontFamily: string = undefined,\n                                         fontSize: number = this.fontSize): number {\n        this.context.font = VexFlowConverter.font(fontSize, style, font, this.rules, fontFamily);\n        return this.context.measureText(text).width / fontSize;\n    }\n\n    public setFontSize(fontSize: number = this.fontSizeStandard): number {\n        this.fontSize = fontSize;\n        return fontSize;\n    }\n}\n","import Vex from \"vexflow\";\nimport VF = Vex.Flow;\nimport { VoiceEntry } from \"../../VoiceData/VoiceEntry\";\nimport { GraphicalVoiceEntry } from \"../GraphicalVoiceEntry\";\nimport { GraphicalStaffEntry } from \"../GraphicalStaffEntry\";\nimport { unitInPixels } from \"./VexFlowMusicSheetDrawer\";\nimport { NoteEnum } from \"../../../Common/DataObjects/Pitch\";\nimport { Note } from \"../../VoiceData/Note\";\nimport { ColoringModes } from \"./../DrawingParameters\";\nimport { GraphicalNote } from \"../GraphicalNote\";\n\nexport class VexFlowVoiceEntry extends GraphicalVoiceEntry {\n    private mVexFlowStaveNote: VF.StemmableNote;\n\n    constructor(parentVoiceEntry: VoiceEntry, parentStaffEntry: GraphicalStaffEntry) {\n        super(parentVoiceEntry, parentStaffEntry);\n    }\n\n    public applyBordersFromVexflow(): void {\n        const staveNote: any = (this.vfStaveNote as any);\n        if (!staveNote.getNoteHeadBeginX) {\n            return;\n        }\n        const boundingBox: any = staveNote.getBoundingBox();\n        const modifierWidth: number = staveNote.getNoteHeadBeginX() - boundingBox.x;\n\n        this.PositionAndShape.RelativePosition.y = boundingBox.y / unitInPixels;\n        this.PositionAndShape.BorderTop = 0;\n        this.PositionAndShape.BorderBottom = boundingBox.h / unitInPixels;\n        this.PositionAndShape.BorderLeft = -(modifierWidth + staveNote.width / 2) / unitInPixels; // Left of our X origin is the modifier\n        this.PositionAndShape.BorderRight = (boundingBox.w - modifierWidth) / unitInPixels; // Right of x origin is the note\n    }\n\n    public set vfStaveNote(value: VF.StemmableNote) {\n        this.mVexFlowStaveNote = value;\n    }\n\n    public get vfStaveNote(): VF.StemmableNote {\n        return this.mVexFlowStaveNote;\n    }\n\n    /** (Re-)color notes and stems by setting their Vexflow styles.\n     * Could be made redundant by a Vexflow PR, but Vexflow needs more solid and permanent color methods/variables for that\n     * See VexFlowConverter.StaveNote()\n     */\n    public color(): void {\n        const defaultColorNotehead: string = this.rules.DefaultColorNotehead;\n        const defaultColorRest: string = this.rules.DefaultColorRest;\n        const defaultColorStem: string = this.rules.DefaultColorStem;\n        const transparentColor: string = \"#00000000\"; // transparent color in vexflow\n        let noteheadColor: string; // if null: no noteheadcolor to set (stays black)\n        let sourceNoteNoteheadColor: string;\n\n        const vfStaveNote: any = (<VexFlowVoiceEntry>(this as any)).vfStaveNote;\n        for (let i: number = 0; i < this.notes.length; i++) {\n            const note: GraphicalNote = this.notes[i];\n\n            sourceNoteNoteheadColor = note.sourceNote.NoteheadColor;\n            noteheadColor = sourceNoteNoteheadColor;\n            // Switch between XML colors and automatic coloring\n            if (this.rules.ColoringMode === ColoringModes.AutoColoring ||\n                this.rules.ColoringMode === ColoringModes.CustomColorSet) {\n                if (note.sourceNote.isRest()) {\n                    noteheadColor = this.rules.ColoringSetCurrent.getValue(-1);\n                } else {\n                    const fundamentalNote: NoteEnum = note.sourceNote.Pitch.FundamentalNote;\n                    noteheadColor = this.rules.ColoringSetCurrent.getValue(fundamentalNote);\n                }\n            }\n            if (!note.sourceNote.PrintObject) {\n                noteheadColor = transparentColor; // transparent\n            } else if (!noteheadColor // revert transparency after PrintObject was set to false, then true again\n                || noteheadColor === \"#000000\" // questionable, because you might want to set specific notes to black,\n                                               // but unfortunately some programs export everything explicitly as black\n                ) {\n                noteheadColor = this.rules.DefaultColorNotehead;\n            }\n\n            // DEBUG runtime coloring test\n            /*const testColor: string = \"#FF0000\";\n            if (i === 2 && Math.random() < 0.1 && note.sourceNote.NoteheadColor !== testColor) {\n                const measureNumber: number = note.parentVoiceEntry.parentStaffEntry.parentMeasure.MeasureNumber;\n                noteheadColor = testColor;\n                console.log(\"color changed to \" + noteheadColor + \" of this note:\\n\" + note.sourceNote.Pitch.ToString() +\n                    \", in measure #\" + measureNumber);\n            }*/\n\n            if (!sourceNoteNoteheadColor && this.rules.ColoringMode === ColoringModes.XML && note.sourceNote.PrintObject) {\n                if (!note.sourceNote.isRest() && defaultColorNotehead) {\n                    noteheadColor = defaultColorNotehead;\n                } else if (note.sourceNote.isRest() && defaultColorRest) {\n                    noteheadColor = defaultColorRest;\n                }\n            }\n            if (noteheadColor && note.sourceNote.PrintObject) {\n                note.sourceNote.NoteheadColorCurrentlyRendered = noteheadColor;\n            } else if (!noteheadColor) {\n                continue;\n            }\n\n            // color notebeam if all noteheads have same color and stem coloring enabled\n            if (this.rules.ColoringEnabled && note.sourceNote.NoteBeam && this.rules.ColorBeams) {\n                const beamNotes: Note[] = note.sourceNote.NoteBeam.Notes;\n                let colorBeam: boolean = true;\n                for (let j: number = 0; j < beamNotes.length; j++) {\n                    if (beamNotes[j].NoteheadColorCurrentlyRendered !== noteheadColor) {\n                        colorBeam = false;\n                    }\n                }\n                if (colorBeam) {\n                    if (vfStaveNote?.beam?.setStyle) {\n                        vfStaveNote.beam.setStyle({ fillStyle: noteheadColor, strokeStyle: noteheadColor});\n                    }\n                }\n            }\n\n            if (vfStaveNote) {\n                if (vfStaveNote.note_heads) { // see VexFlowConverter, needs Vexflow PR\n                    const notehead: any = vfStaveNote.note_heads[i];\n                    if (notehead) {\n                        notehead.setStyle({ fillStyle: noteheadColor, strokeStyle: noteheadColor });\n                    }\n                }\n                // set ledger line color. TODO coordinate this with VexFlowConverter.StaveNote(), where there's also still code for this, maybe unnecessarily.\n                if ((vfStaveNote as any).setLedgerLineStyle) { // setLedgerLineStyle doesn't exist on TabNote or rest, would throw error.\n                    if (noteheadColor === transparentColor) {\n                        (vfStaveNote as any).setLedgerLineStyle(\n                            { fillStyle: noteheadColor, strokeStyle: noteheadColor, lineWidth: this.rules.LedgerLineWidth });\n                    } else {\n                        (vfStaveNote as any).setLedgerLineStyle({\n                            fillStyle: this.rules.LedgerLineColorDefault,\n                            lineWidth: this.rules.LedgerLineWidth,\n                            strokeStyle: this.rules.LedgerLineColorDefault\n                        });\n                        // we could give the color (style) as noteheadColor, but then we need to figure out which note has the ledger line.\n                        // otherwise ledger lines get the color of the top note, see Function Test Color.\n                    }\n                }\n            }\n        }\n\n        // color stems\n        let stemColor: string = defaultColorStem; // reset to black/default when coloring was disabled. maybe needed elsewhere too\n        let setVoiceEntryStemColor: boolean = false;\n        if (this.rules.ColoringEnabled) {\n            stemColor = this.parentVoiceEntry.StemColor; // TODO: once coloringSetCustom gets stem color, respect it\n            if (!stemColor\n                || stemColor === \"#000000\") { // see above, noteheadColor === \"#000000\"\n                stemColor = defaultColorStem;\n            }\n            if (this.rules.ColorStemsLikeNoteheads && noteheadColor) {\n                // condition could be even more fine-grained by only recoloring if there was no custom StemColor set. will be more complex though\n                stemColor = noteheadColor;\n                setVoiceEntryStemColor = true;\n            }\n        }\n        let stemTransparent: boolean = true;\n        for (const note of this.parentVoiceEntry.Notes) {\n            if (note.PrintObject) {\n                stemTransparent = false;\n                break;\n            }\n        }\n        if (stemTransparent) {\n            stemColor = transparentColor;\n        }\n        const stemStyle: Object = { fillStyle: stemColor, strokeStyle: stemColor };\n\n        if (vfStaveNote && vfStaveNote.setStemStyle) {\n            if (!stemTransparent && setVoiceEntryStemColor) {\n                this.parentVoiceEntry.StemColor = stemColor; // this shouldn't be set by DefaultColorStem\n            }\n            vfStaveNote.setStemStyle(stemStyle);\n            if (vfStaveNote.flag && vfStaveNote.setFlagStyle && this.rules.ColorFlags) {\n                vfStaveNote.setFlagStyle(stemStyle);\n            }\n        }\n    }\n}\n","import { IStafflineNoteCalculator } from \"../../Interfaces/IStafflineNoteCalculator\";\nimport { GraphicalNote } from \"../GraphicalNote\";\nimport { Pitch, NoteEnum } from \"../../../Common/DataObjects/Pitch\";\nimport { VexFlowGraphicalNote } from \"./VexFlowGraphicalNote\";\nimport { Dictionary } from \"typescript-collections\";\nimport { EngravingRules } from \"../EngravingRules\";\nimport { ClefEnum } from \"../../VoiceData/Instructions/ClefInstruction\";\nimport { StemDirectionType, VoiceEntry } from \"../../VoiceData/VoiceEntry\";\n\nexport class VexflowStafflineNoteCalculator implements IStafflineNoteCalculator {\n    private rules: EngravingRules;\n    private staffPitchListMapping: Dictionary<number, Array<Pitch>> = new Dictionary<number, Array<Pitch>>();\n    //These render on the single line by default\n    private baseLineNote: NoteEnum = NoteEnum.B;\n    private baseLineOctave: number = 1;\n\n    constructor(rules: EngravingRules) {\n        this.rules = rules;\n    }\n    /**\n     * This method is called for each note during the calc phase. We want to track all possible positions to make decisions\n     * during layout about where notes should be positioned.\n     * This directly puts notes that share a line to the same position, regardless of voice\n     * @param graphicalNote The note to be checked/positioned\n     * @param staffIndex The staffline the note is on\n     */\n    public trackNote(graphicalNote: GraphicalNote): void {\n        if (!(graphicalNote instanceof VexFlowGraphicalNote) || graphicalNote.Clef().ClefType !== ClefEnum.percussion ||\n        graphicalNote.sourceNote.isRest() || this.rules.PercussionOneLineCutoff === 0 ||\n        this.rules.PercussionForceVoicesOneLineCutoff === -1) {\n            return;\n        }\n        const staffIndex: number =\n                graphicalNote.parentVoiceEntry.parentStaffEntry.sourceStaffEntry.ParentStaff.idInMusicSheet;\n\n        let currentPitchList: Array<Pitch> = undefined;\n        if (!this.staffPitchListMapping.containsKey(staffIndex)) {\n            this.staffPitchListMapping.setValue(staffIndex, new Array<Pitch>());\n        }\n        currentPitchList = this.staffPitchListMapping.getValue(staffIndex);\n        const pitch: Pitch = graphicalNote.sourceNote.Pitch;\n        VexflowStafflineNoteCalculator.findOrInsert(currentPitchList, pitch);\n    }\n\n    private static PitchIndexOf(array: Array<Pitch>, pitch: Pitch, start: number = 0): number {\n        if (start > array.length - 1) {\n            return -1;\n        }\n\n        for (let i: number = start; i < array.length; i++) {\n            const p2: Pitch = array[i];\n            if (pitch.OperatorEquals(p2)) {\n                return i;\n            }\n        }\n        return -1;\n    }\n\n    private static findOrInsert(array: Array<Pitch>, pitch: Pitch): number {\n        for (let i: number = 0; i < array.length; i++) {\n            const p2: Pitch = array[i];\n            if (pitch.OperatorEquals(p2)) {\n                return i;\n            } else {\n                if (pitch.OperatorFundamentalLessThan(p2)) {\n                    array.splice(i, 0, pitch);\n                    return i;\n                }\n            }\n        }\n        //If we reach here, we've reached the end of the array.\n        //Means its the greatest pitch\n        array.push(pitch);\n        return array.length - 1;\n    }\n\n    /**\n     * This method is called for each note, and should make any necessary position changes based on the number of stafflines, clef, etc.\n     * @param graphicalNote The note to be checked/positioned\n     * @param staffIndex The staffline that this note exists on\n     * @returns the newly positioned note\n     */\n    public positionNote(graphicalNote: GraphicalNote): GraphicalNote {\n        const staffIndex: number =\n                graphicalNote.parentVoiceEntry.parentStaffEntry.sourceStaffEntry.ParentStaff.idInMusicSheet;\n\n        if (!(graphicalNote instanceof VexFlowGraphicalNote) || graphicalNote.sourceNote.isRest()\n            || !this.staffPitchListMapping.containsKey(staffIndex)) {\n            return graphicalNote;\n        }\n        const currentPitchList: Array<Pitch> = this.staffPitchListMapping.getValue(staffIndex);\n        //const xmlSingleStaffline: boolean = graphicalNote.parentVoiceEntry.parentStaffEntry.parentMeasure.ParentStaff.StafflineCount === 1;\n        const positionByXml: boolean = this.rules.PercussionUseXMLDisplayStep &&\n            graphicalNote.sourceNote.displayStepUnpitched !== undefined;\n        if (currentPitchList.length > this.rules.PercussionOneLineCutoff && !positionByXml) {\n            //Don't need to position notes. We aren't under the cutoff\n            return graphicalNote;\n        }\n        const vfGraphicalNote: VexFlowGraphicalNote = graphicalNote as VexFlowGraphicalNote;\n        const notePitch: Pitch = graphicalNote.sourceNote.Pitch;\n\n        let displayNote: NoteEnum = this.baseLineNote;\n        let displayOctave: number = this.baseLineOctave;\n        if (this.rules.PercussionUseXMLDisplayStep\n            && graphicalNote.sourceNote.displayStepUnpitched !== undefined) {\n            //&& xmlSingleStaffline) {\n            displayNote = graphicalNote.sourceNote.displayStepUnpitched;\n            displayOctave = graphicalNote.sourceNote.displayOctaveUnpitched + this.rules.PercussionOneLineXMLDisplayStepOctaveOffset;\n        }\n        //If we only need to render on one line\n        if (currentPitchList.length <= this.rules.PercussionForceVoicesOneLineCutoff) {\n            vfGraphicalNote.setAccidental(new Pitch(displayNote, displayOctave, notePitch.Accidental));\n        } else {\n            const pitchIndex: number = VexflowStafflineNoteCalculator.PitchIndexOf(currentPitchList, notePitch);\n            if (pitchIndex > -1) {\n                const half: number = Math.ceil(currentPitchList.length / 2);\n                if (!this.rules.PercussionUseXMLDisplayStep) {\n                    if (pitchIndex >= half) {\n                        //position above\n                        displayOctave = 2;\n                        switch ((pitchIndex - half) % 5) {\n                            case 1:\n                                displayNote = NoteEnum.E;\n                                break;\n                            case 2:\n                                displayNote = NoteEnum.G;\n                                break;\n                            case 3:\n                                displayNote = NoteEnum.B;\n                                break;\n                            case 4:\n                                displayNote = NoteEnum.D;\n                                displayOctave = 3;\n                                break;\n                            default:\n                                displayNote = NoteEnum.C;\n                                break;\n                        }\n                    } else { //position below\n                        switch (pitchIndex % 5) {\n                            case 1:\n                                displayNote = NoteEnum.F;\n                                break;\n                            case 2:\n                                displayNote = NoteEnum.D;\n                                break;\n                            case 3:\n                                displayNote = NoteEnum.B;\n                                displayOctave = 0;\n                                break;\n                            case 4:\n                                displayNote = NoteEnum.G;\n                                displayOctave = 0;\n                                break;\n                            default:\n                                displayNote = NoteEnum.A;\n                                break;\n                        }\n                    }\n                }\n                const mappedPitch: Pitch = new Pitch(displayNote, displayOctave, notePitch.Accidental);\n                //Map the pitch, set stems properly\n                vfGraphicalNote.setAccidental(mappedPitch);\n                const parentVoiceEntry: VoiceEntry = vfGraphicalNote.parentVoiceEntry.parentVoiceEntry;\n                // Only switch stems if we aren't sharing stems with another note\n                if (!this.rules.SetWantedStemDirectionByXml && parentVoiceEntry.Notes.length < 2) {\n                    if (mappedPitch.Octave > this.baseLineOctave ||\n                        (mappedPitch.FundamentalNote === this.baseLineNote && mappedPitch.Octave === this.baseLineOctave)) {\n                        vfGraphicalNote.parentVoiceEntry.parentVoiceEntry.WantedStemDirection = StemDirectionType.Up;\n                    } else {\n                        vfGraphicalNote.parentVoiceEntry.parentVoiceEntry.WantedStemDirection = StemDirectionType.Down;\n                    }\n                }\n            }\n        }\n        return vfGraphicalNote;\n    }\n    /**\n     * Get the number of unique \"voices\" or note positions\n     * @param staffIndex The Staffline to get the count of\n     */\n    public getStafflineUniquePositionCount(staffIndex: number): number {\n        if (this.staffPitchListMapping.containsKey(staffIndex)) {\n            return this.staffPitchListMapping.getValue(staffIndex).length;\n        }\n        return 0;\n    }\n}\n","// created from 'create-ts-index'\n\nexport * from \"./AlignmentManager\";\nexport * from \"./CanvasVexFlowBackend\";\nexport * from \"./SvgVexFlowBackend\";\nexport * from \"./VexFlowBackend\";\nexport * from \"./VexFlowContinuousDynamicExpression\";\nexport * from \"./VexFlowConverter\";\nexport * from \"./VexFlowGraphicalNote\";\nexport * from \"./VexFlowGraphicalSymbolFactory\";\nexport * from \"./VexFlowInstantaneousDynamicExpression\";\nexport * from \"./VexFlowInstrumentBrace\";\nexport * from \"./VexFlowInstrumentBracket\";\nexport * from \"./VexFlowMeasure\";\nexport * from \"./VexFlowMultiRestMeasure\";\nexport * from \"./VexFlowMusicSheetCalculator\";\nexport * from \"./VexFlowMusicSheetDrawer\";\nexport * from \"./VexFlowMusicSystem\";\nexport * from \"./VexFlowOctaveShift\";\nexport * from \"./VexFlowSlur\";\nexport * from \"./VexFlowStaffEntry\";\nexport * from \"./VexFlowStaffLine\";\nexport * from \"./VexflowStafflineNoteCalculator\";\nexport * from \"./VexFlowTabMeasure\";\nexport * from \"./VexFlowTextMeasurer\";\nexport * from \"./VexFlowVoiceEntry\";\n","import Vex from \"vexflow\";\nimport VF = Vex.Flow;\nimport { EngravingRules } from \"./EngravingRules\";\nimport { VexFlowMeasure } from \"./VexFlow/VexFlowMeasure\";\nimport { SkyBottomLineCalculationResult } from \"./SkyBottomLineCalculationResult\";\nimport {\n    ISkyBottomLineBatchCalculatorBackendPartialTableConfiguration,\n    ISkyBottomLineBatchCalculatorBackendTableConfiguration,\n    SkyBottomLineBatchCalculatorBackend\n} from \"./SkyBottomLineBatchCalculatorBackend\";\nimport vertexShaderSource from \"./Shaders/VertexShader.glsl\";\nimport fragmentShaderSource from \"./Shaders/FragmentShader.glsl\";\nimport log from \"loglevel\";\n\n// WebGL helper functions\n\nfunction createShader(gl: WebGLRenderingContext, type: number, source: string): WebGLShader {\n    const shader: WebGLProgram = gl.createShader(type);\n    if (!shader) {\n        log.warn(\"WebGLSkyBottomLineCalculatorBackend: Could not create a WebGL shader\");\n        throw new Error(\"Could not create a WebGL shader\");\n    }\n\n    gl.shaderSource(shader, source);\n    gl.compileShader(shader);\n    if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\n        log.warn(\"Shader compilation failed\\n\" + gl.getShaderInfoLog(shader));\n        gl.deleteShader(shader);\n        throw new Error(\"WebGL shader compilation failed\");\n    }\n\n    return shader;\n}\n\nfunction createProgram(gl: WebGLRenderingContext, vertexShader: WebGLShader, fragmentShader: WebGLShader): WebGLProgram {\n    const program: WebGLProgram = gl.createProgram();\n    if (!program) {\n        log.warn(\"WebGLSkyBottomLineCalculatorBackend: Could not create a WebGL program\");\n        throw new Error(\"Could not create a WebGL program\");\n    }\n\n    gl.attachShader(program, vertexShader);\n    gl.attachShader(program, fragmentShader);\n    gl.linkProgram(program);\n    if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\n        log.warn(\"WebGLSkyBottomLineCalculatorBackend: WebGL program link failed\\n\" + gl.getProgramInfoLog(program));\n        gl.deleteProgram(program);\n        throw new Error(\"WebGL program link failed\");\n    }\n    return program;\n}\n\nfunction createVertexBuffer(gl: WebGLRenderingContext, program: WebGLShader, attributeName: string, vertices: [number, number][]): WebGLBuffer {\n    const vertexBuffer: WebGLBuffer = gl.createBuffer();\n    if (!vertexBuffer) {\n        log.warn(\"WebGLSkyBottomLineCalculatorBackend: WebGL buffer creation failed\");\n        throw new Error(\"WebGL buffer creation failed\");\n    }\n\n    gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer);\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertices.flat()), gl.STATIC_DRAW);\n    gl.useProgram(program);\n\n    const positionAttributeLocation: number = gl.getAttribLocation(program, attributeName);\n    gl.enableVertexAttribArray(positionAttributeLocation);\n    gl.vertexAttribPointer(\n        positionAttributeLocation,\n        2,\n        gl.FLOAT,\n        false, // no nomralization\n        0,     // stride = 0\n        0,     // offset = 0\n    );\n\n    return vertexBuffer;\n}\n\nfunction createTexture(gl: WebGLRenderingContext, program: WebGLShader, textureIdx: number, uniformName: string): WebGLTexture {\n    const texture: WebGLTexture = gl.createTexture();\n    if (!texture) {\n        log.warn(\"WebGLSkyBottomLineCalculatorBackend: WebGL texture creation failed\");\n        throw new Error(\"WebGL texture creation failed\");\n    }\n\n    gl.activeTexture(gl.TEXTURE0 + textureIdx);\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n\n    const uniformLocation: WebGLUniformLocation = gl.getUniformLocation(program, uniformName);\n    if (!uniformLocation) {\n        log.warn(\"WebGLSkyBottomLineCalculatorBackend: WebGL invalid uniform name\");\n        throw new Error(\"WebGL invalid uniform name\");\n    }\n    gl.uniform1i(uniformLocation, textureIdx);\n\n    return texture;\n}\n\nfunction updateMacroConstantsInShaderSource(source: string, constants: { [macroName: string]: number }): string {\n    let result: string = source;\n    for (const [macroName, macroValue] of Object.entries(constants)) {\n        const regex: RegExp = new RegExp(`#define ${macroName} .*`);\n        result = result.replace(regex, `#define ${macroName} ${macroValue}`);\n    }\n    return result;\n}\n\nfunction getMaximumTextureSize(): number {\n    const canvas: HTMLCanvasElement = document.createElement(\"canvas\");\n    const gl: WebGLRenderingContext = canvas.getContext(\"webgl\");\n    return gl.getParameter(gl.MAX_TEXTURE_SIZE) as number;\n}\n\n/**\n * This class calculates the skylines and the bottom lines by using WebGL acceleration.\n */\nexport class WebGLSkyBottomLineBatchCalculatorBackend extends SkyBottomLineBatchCalculatorBackend {\n    private gl: WebGLRenderingContext;\n    private texture: WebGLTexture;\n\n    constructor(rules: EngravingRules, measures: VexFlowMeasure[]) {\n        super(rules, measures);\n    }\n\n    protected getPreferredRenderingConfiguration(maxWidth: number, elementHeight: number): ISkyBottomLineBatchCalculatorBackendPartialTableConfiguration {\n        const maxTextureSize: number = Math.min(4096, getMaximumTextureSize());\n        const elementWidth: number = Math.ceil(maxWidth);\n        const numColumns: number = Math.min(5, Math.floor(maxTextureSize / elementWidth));\n        const numRows: number = Math.min(5, Math.floor(maxTextureSize / elementHeight));\n\n        return { elementWidth, numColumns, numRows };\n    }\n\n    protected onInitialize(tableConfiguration: ISkyBottomLineBatchCalculatorBackendTableConfiguration): void {\n        const { elementWidth, elementHeight, numColumns, numRows } = tableConfiguration;\n        const canvas: HTMLCanvasElement = document.createElement(\"canvas\");\n        canvas.width = elementWidth * numColumns;\n        canvas.height = numRows;\n\n        const gl: WebGLRenderingContext = canvas.getContext(\"webgl\");\n        if (!gl) {\n            log.warn(\"WebGLSkyBottomLineCalculatorBackend: No WebGL support\");\n            throw new Error(\"No WebGL support\");\n        }\n        this.gl = gl;\n\n        const vertexShader: WebGLShader = createShader(gl, gl.VERTEX_SHADER, vertexShaderSource);\n        const fragmentShader: WebGLShader = createShader(\n            gl, gl.FRAGMENT_SHADER,\n            updateMacroConstantsInShaderSource(fragmentShaderSource, {\n                NUM_ROWS: numRows,\n                ELEMENT_HEIGHT: elementHeight,\n            })\n        );\n        const program: WebGLProgram = createProgram(gl, vertexShader, fragmentShader);\n        createVertexBuffer(gl, program, \"a_position\", [\n            [-1, -1],\n            [1, -1],\n            [1, 1],\n            [-1, -1],\n            [1, 1],\n            [-1, 1],\n        ]);\n        this.texture = createTexture(gl, program, 0, \"u_image\");\n    }\n\n    protected calculateFromCanvas(\n        canvas: HTMLCanvasElement,\n        _: VF.CanvasContext,\n        measures: VexFlowMeasure[],\n        samplingUnit: number,\n        tableConfiguration: ISkyBottomLineBatchCalculatorBackendTableConfiguration\n    ): SkyBottomLineCalculationResult[] {\n        const gl: WebGLRenderingContext = this.gl;\n        const rgbaLength: number = 4;\n        const { elementWidth, elementHeight, numColumns } = tableConfiguration;\n\n        gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);\n        gl.bindTexture(gl.TEXTURE_2D, this.texture);\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, canvas);\n        gl.drawArrays(gl.TRIANGLES, 0, 6);\n\n        const pixels: Uint8Array = new Uint8Array(gl.canvas.width * gl.canvas.height * rgbaLength);\n        gl.readPixels(0, 0, gl.canvas.width, gl.canvas.height, gl.RGBA, gl.UNSIGNED_BYTE, pixels);\n\n        const result: SkyBottomLineCalculationResult[] = [];\n        for (let i: number = 0; i < measures.length; ++i) {\n            const measure: VexFlowMeasure = measures[i];\n            const measureWidth: number = Math.floor(measure.getVFStave().getWidth());\n            const measureArrayLength: number =  Math.max(Math.ceil(measure.PositionAndShape.Size.width * samplingUnit), 1);\n            const u: number = i % numColumns;\n            const v: number = Math.floor(i / numColumns);\n\n            const xOffset: number = u * elementWidth * rgbaLength;\n            const yOffset: number = v * elementWidth * numColumns * rgbaLength;\n\n            const skyLine: number[] = new Array(Math.max(measureArrayLength, measureWidth)).fill(0);\n            const bottomLine: number[] = new Array(Math.max(measureArrayLength, measureWidth)).fill(0);\n\n            for (let x: number = 0; x < measureWidth; ++x) {\n                const r: number = pixels[x * rgbaLength + xOffset + yOffset];\n                const g: number = pixels[x * rgbaLength + xOffset + yOffset + 1];\n                const b: number = pixels[x * rgbaLength + xOffset + yOffset + 2];\n                const skyLinePixel: number = r + (Math.floor(b / 16) * 256);\n                const bottomLinePixel: number = g + (b % 16 * 256);\n                skyLine[x] = skyLinePixel;\n                bottomLine[x] = bottomLinePixel;\n            }\n\n            const lowestSkyLine: number = Math.max(...skyLine);\n            const highestBottomLine: number = Math.min(...bottomLine);\n\n            for (let x: number = 0; x < measureWidth; ++x) {\n                skyLine[x] = skyLine[x] === 0 ? lowestSkyLine : skyLine[x];\n                bottomLine[x] = bottomLine[x] === elementHeight ? highestBottomLine : bottomLine[x];\n            }\n\n            result.push(new SkyBottomLineCalculationResult(skyLine, bottomLine));\n        }\n        return result;\n    }\n}\n","// created from 'create-ts-index'\n\nexport * from \"./AbstractGraphicalExpression\";\nexport * from \"./AbstractGraphicalInstruction\";\nexport * from \"./AccidentalCalculator\";\nexport * from \"./VexFlow/AlignmentManager\";\nexport * from \"./BoundingBox\";\nexport * from \"./Clickable\";\nexport * from \"./DrawingEnums\";\nexport * from \"./DrawingMode\";\nexport * from \"./DrawingParameters\";\nexport * from \"./EngravingRules\";\nexport * from \"./GraphicalChordSymbolContainer\";\nexport * from \"./GraphicalComment\";\nexport * from \"./GraphicalContinuousDynamicExpression\";\nexport * from \"./GraphicalCurve\";\nexport * from \"./GraphicalInstantaneousDynamicExpression\";\nexport * from \"./GraphicalInstantaneousTempoExpression\";\nexport * from \"./GraphicalLabel\";\nexport * from \"./GraphicalLine\";\nexport * from \"./GraphicalLyricEntry\";\nexport * from \"./GraphicalLyricWord\";\nexport * from \"./GraphicalMarkedArea\";\nexport * from \"./GraphicalMeasure\";\nexport * from \"./GraphicalMusicPage\";\nexport * from \"./GraphicalMusicSheet\";\nexport * from \"./GraphicalNote\";\nexport * from \"./GraphicalObject\";\nexport * from \"./GraphicalOctaveShift\";\nexport * from \"./GraphicalRectangle\";\nexport * from \"./GraphicalSlur\";\nexport * from \"./GraphicalStaffEntry\";\nexport * from \"./GraphicalStaffEntryLink\";\nexport * from \"./GraphicalTie\";\nexport * from \"./GraphicalVoiceEntry\";\nexport * from \"./ISqueezable\";\nexport * from \"./MusicSheetCalculator\";\nexport * from \"./MusicSheetDrawer\";\nexport * from \"./MusicSymbol\";\nexport * from \"./MusicSystem\";\nexport * from \"./MusicSystemBuilder\";\nexport * from \"./OctaveShiftParams\";\nexport * from \"./SelectionEndSymbol\";\nexport * from \"./SelectionStartSymbol\";\nexport * from \"./SkyBottomLineCalculator\";\nexport * from \"./StaffLine\";\nexport * from \"./StaffLineActivitySymbol\";\nexport * from \"./SystemLine\";\nexport * from \"./SystemLinePosition\";\nexport * from \"./SystemLinesEnum\";\nexport * from \"./VerticalGraphicalStaffEntryContainer\";\nexport * from \"./VexFlow\";\n","import { InstrumentalGroup } from \"./InstrumentalGroup\";\nimport { Label } from \"./Label\";\nimport { MusicSheet } from \"./MusicSheet\";\nimport { Voice } from \"./VoiceData/Voice\";\nimport { Staff } from \"./VoiceData/Staff\";\nimport { SubInstrument } from \"./SubInstrument\";\nimport { MidiInstrument } from \"./VoiceData/Instructions/ClefInstruction\";\n\nexport class Instrument extends InstrumentalGroup {\n\n    constructor(id: number, idString: string, musicSheet: MusicSheet, parent: InstrumentalGroup) {\n        super(undefined, musicSheet, parent);\n        this.id = id;\n        this.idString = idString;\n        this.nameLabel = new Label(idString);\n    }\n\n    /** Transposition halftones for this instrument only.\n     *  This is additive to osmd.Sheet.Transpose (MusicSheet).\n     * You need to call osmd.updateGraphic() before the next render() (assuming this is set after load()).\n     */\n    public Transpose: number = 0;\n    public highlight: boolean;\n\n    private voices: Voice[] = [];\n    private staves: Staff[] = [];\n    private nameLabel: Label;\n    private idString: string;\n    private id: number;\n    private hasLyrics: boolean = false;\n    private hasChordSymbols: boolean = false;\n    private playbackTranspose: number;\n\n    private lyricVersesNumbers: number[] = [];\n    private subInstruments: SubInstrument[] = [];\n    private partAbbreviation: string;\n\n    public get Voices(): Voice[] {\n        return this.voices;\n    }\n    public get Staves(): Staff[] {\n        return this.staves;\n    }\n    public get NameLabel(): Label {\n        return this.nameLabel;\n    }\n    public get HasLyrics(): boolean {\n        return this.hasLyrics;\n    }\n    public set HasLyrics(value: boolean) {\n        this.hasLyrics = value;\n    }\n    public get HasChordSymbols(): boolean {\n        return this.hasChordSymbols;\n    }\n    public set HasChordSymbols(value: boolean) {\n        this.hasChordSymbols = value;\n    }\n    public get LyricVersesNumbers(): number[] {\n        return this.lyricVersesNumbers;\n    }\n    public set LyricVersesNumbers(value: number[]) {\n        this.lyricVersesNumbers = value;\n    }\n    public get Name(): string {\n        return this.nameLabel.text;\n    }\n    public set Name(value: string) {\n        this.nameLabel.text = value;\n    }\n    public get IdString(): string {\n        return this.idString;\n    }\n    public get Id(): number {\n        return this.id;\n    }\n    public get MidiInstrumentId(): MidiInstrument {\n        return this.subInstruments[0].midiInstrumentID;\n    }\n    public set MidiInstrumentId(value: MidiInstrument) {\n        this.subInstruments[0].midiInstrumentID = value;\n    }\n    public get Volume(): number {\n        return this.subInstruments[0].volume;\n    }\n    public set Volume(value: number) {\n        for (let idx: number = 0, len: number = this.subInstruments.length; idx < len; ++idx) {\n            const subInstrument: SubInstrument = this.subInstruments[idx];\n            subInstrument.volume = value;\n        }\n    }\n    public get PlaybackTranspose(): number {\n        return this.playbackTranspose;\n    }\n    public set PlaybackTranspose(value: number) {\n        this.playbackTranspose = value;\n    }\n\n    public get SubInstruments(): SubInstrument[] {\n        return this.subInstruments;\n    }\n    public getSubInstrument(subInstrumentIdString: string): SubInstrument {\n        for (let idx: number = 0, len: number = this.subInstruments.length; idx < len; ++idx) {\n            const subInstrument: SubInstrument = this.subInstruments[idx];\n            if (subInstrument.idString === subInstrumentIdString) {\n                return subInstrument;\n            }\n        }\n        return undefined;\n    }\n    public get PartAbbreviation(): string {\n        return this.partAbbreviation;\n    }\n    public set PartAbbreviation(value: string) {\n        this.partAbbreviation = value;\n    }\n\n    public get Visible(): boolean {\n        if (this.voices.length > 0) {\n            return this.Voices[0].Visible;\n        } else {\n            return false;\n        }\n    }\n    public set Visible(value: boolean) {\n        for (let idx: number = 0, len: number = this.Voices.length; idx < len; ++idx) {\n            const v: Voice = this.Voices[idx];\n            v.Visible = value;\n        }\n    }\n    public get Audible(): boolean {\n        let result: boolean = false;\n        for (let idx: number = 0, len: number = this.Voices.length; idx < len; ++idx) {\n            const v: Voice = this.Voices[idx];\n            result = result || v.Audible;\n        }\n        return result;\n    }\n    public set Audible(value: boolean) {\n        for (let idx: number = 0, len: number = this.Voices.length; idx < len; ++idx) {\n            const v: Voice = this.Voices[idx];\n            v.Audible = value;\n        }\n        for (let idx: number = 0, len: number = this.staves.length; idx < len; ++idx) {\n            const staff: Staff = this.staves[idx];\n            staff.audible = value;\n        }\n    }\n    public get Following(): boolean {\n        let result: boolean = false;\n        for (let idx: number = 0, len: number = this.Voices.length; idx < len; ++idx) {\n            const v: Voice = this.Voices[idx];\n            result = result || v.Following;\n        }\n        return result;\n    }\n    public set Following(value: boolean) {\n        for (let idx: number = 0, len: number = this.Voices.length; idx < len; ++idx) {\n            const v: Voice = this.Voices[idx];\n            v.Following = value;\n        }\n        for (let idx: number = 0, len: number = this.staves.length; idx < len; ++idx) {\n            const staff: Staff = this.staves[idx];\n            staff.following = value;\n        }\n    }\n    public SetVoiceAudible(voiceId: number, audible: boolean): void {\n        for (let idx: number = 0, len: number = this.Voices.length; idx < len; ++idx) {\n            const v: Voice = this.Voices[idx];\n            if (v.VoiceId === voiceId) {\n                v.Audible = audible;\n                break;\n            }\n        }\n    }\n    public SetVoiceFollowing(voiceId: number, following: boolean): void {\n        for (let idx: number = 0, len: number = this.Voices.length; idx < len; ++idx) {\n            const v: Voice = this.Voices[idx];\n            if (v.VoiceId === voiceId) {\n                v.Following = following;\n                break;\n            }\n        }\n    }\n    public SetStaffAudible(staffId: number, audible: boolean): void {\n        const staff: Staff = this.staves[staffId - 1];\n        staff.audible = audible;\n        // hack for now:\n        // activate all voices needed so that the staff notes will be played\n        if (audible) {\n            for (let idx: number = 0, len: number = staff.Voices.length; idx < len; ++idx) {\n                const v: Voice = staff.Voices[idx];\n                v.Audible = true;\n            }\n        } else {\n            for (let idx: number = 0, len: number = staff.Voices.length; idx < len; ++idx) {\n                const voice: Voice = staff.Voices[idx];\n                let isAudibleInOtherStaves: boolean = false;\n                for (let idx2: number = 0, len2: number = this.Staves.length; idx2 < len2; ++idx2) {\n                    const st: Staff = this.Staves[idx2];\n                    if (st.Id === staffId || !st.audible) { continue; }\n                    for (let idx3: number = 0, len3: number = st.Voices.length; idx3 < len3; ++idx3) {\n                        const v: Voice = st.Voices[idx3];\n                        if (v === voice) {\n                            isAudibleInOtherStaves = true;\n                        }\n                    }\n                }\n                if (!isAudibleInOtherStaves) {\n                    voice.Audible = false;\n                }\n            }\n        }\n    }\n    public SetStaffFollow(staffId: number, follow: boolean): void {\n        const staff: Staff = this.staves[staffId - 1];\n        staff.following = follow;\n        if (follow) {\n            for (let idx: number = 0, len: number = staff.Voices.length; idx < len; ++idx) {\n                const v: Voice = staff.Voices[idx];\n                v.Following = true;\n            }\n        } else {\n            for (let idx: number = 0, len: number = staff.Voices.length; idx < len; ++idx) {\n                const voice: Voice = staff.Voices[idx];\n                let isFollowingInOtherStaves: boolean = false;\n                for (let idx2: number = 0, len2: number = this.Staves.length; idx2 < len2; ++idx2) {\n                    const st: Staff = this.Staves[idx2];\n                    if (st.Id === staffId || !st.following) { continue; }\n                    for (let idx3: number = 0, len3: number = st.Voices.length; idx3 < len3; ++idx3) {\n                        const v: Voice = st.Voices[idx3];\n                        if (v === voice) {\n                            isFollowingInOtherStaves = true;\n                        }\n                    }\n                }\n                if (!isFollowingInOtherStaves) {\n                    voice.Following = false;\n                }\n            }\n        }\n    }\n    public areAllVoiceVisible(): boolean {\n        for (const voice of this.Voices) {\n            if (!voice.Visible) {\n                return false;\n            }\n        }\n        return true;\n    }\n    public createStaves(numberOfStaves: number): void {\n        for (let i: number = 0; i < numberOfStaves; i++) {\n            this.staves.push(new Staff(this, i + 1));\n        }\n    }\n\n    // necessary to be unique for MusicSystem.labels Dictionary\n    public toString(): string {\n        return `${this.Name} , id: ${this.id}, idstring: ${this.idString}`;\n    }\n}\n","import { MusicSheet } from \"./MusicSheet\";\n\nexport class InstrumentalGroup {\n\n    constructor(name: string, musicSheet: MusicSheet, parent: InstrumentalGroup) {\n        this.name = name;\n        this.musicSheet = musicSheet;\n        this.parent = parent;\n    }\n\n    private name: string;\n    private musicSheet: MusicSheet;\n    private parent: InstrumentalGroup;\n    private instrumentalGroups: InstrumentalGroup[] = [];\n\n    public get InstrumentalGroups(): InstrumentalGroup[] {\n        return this.instrumentalGroups;\n    }\n    public get Parent(): InstrumentalGroup {\n        return this.parent;\n    }\n    public get Name(): string {\n        return this.name;\n    }\n    public set Name(value: string) {\n        this.name = value;\n    }\n    public get GetMusicSheet(): MusicSheet {\n        return this.musicSheet;\n    }\n\n}\n","export abstract class AClassHierarchyTrackable {\n    //TODO: This pattern doesn't account for interfaces, only classes.\n    //At present, it seems that interfaces need tested manually when they are needed.\n    //Perhaps there is a better solution, but right now I don't see it. This is fine for our requirements currently\n    public isInstanceOfClass(className: string): boolean {\n        let proto: any = this.constructor.prototype;\n        while (proto) {\n            if (className === proto.constructor.name) {\n                return true;\n            }\n            proto = proto.__proto__;\n        }\n        return false;\n    }\n}\n","export class ITextTranslation {\n    public static defaultTextTranslation: ITextTranslation;\n\n    public static translateText(tag: string, text: string): string {\n        if (!this.defaultTextTranslation) {\n            return text;\n        }\n\n        //return this.DefaultTextTranslation.translate(tag, text);\n    }\n\n    //declare public translate(tag: string, text: string): string;\n}\n","// created from 'create-ts-index'\n\nexport * from \"./IAfterSheetReadingModule\";\nexport * from \"./IGraphicalSymbolFactory\";\nexport * from \"./IQualityFeedbackTone\";\nexport * from \"./ITextMeasurer\";\nexport * from \"./ITextTranslation\";\nexport * from \"./ITransposeCalculator\";\nexport * from \"./IVoiceMeasureReadPlugin\";\nexport * from \"./AClassHierarchyTrackable\";\nexport * from \"./IStafflineNoteCalculator\";\n","import {TextAlignmentEnum} from \"../Common/Enums/TextAlignment\";\nimport {OSMDColor} from \"../Common/DataObjects/OSMDColor\";\nimport {Fonts} from \"../Common/Enums/Fonts\";\nimport {FontStyles} from \"../Common/Enums/FontStyles\";\n\n/**\n * A text label on the graphical music sheet.\n * It is used e.g. for titles, composer names, instrument names and dynamic instructions.\n */\nexport class Label {\n\n    constructor(text: string = \"\", alignment: TextAlignmentEnum = TextAlignmentEnum.CenterBottom,\n                font: Fonts = undefined, print: boolean = true) {\n        this.text = text;\n        this.print = print;\n        this.textAlignment = alignment;\n        this.font = font;\n        this.fontFamily = undefined; // default value, will use EngravingRules.DefaultFontFamily at rendering\n    }\n\n    public text: string;\n    public print: boolean;\n    public color: OSMDColor;\n    public colorDefault: string; // TODO this is Vexflow format, convert to OSMDColor. for now convenient for default colors.\n    public font: Fonts;\n    public fontFamily: string; // default undefined: will use EngravingRules.DefaultFontFamily at rendering\n    public fontStyle: FontStyles;\n    public fontHeight: number;\n    public textAlignment: TextAlignmentEnum;\n    public IsCreditLabel: boolean = false;\n\n    public ToString(): string {\n        return this.text;\n    }\n}\n","import { MusicSheet } from \"../MusicSheet\";\nimport { PartListEntry } from \"../MusicSource/PartListEntry\";\nimport { Repetition } from \"../MusicSource/Repetition\";\nimport { Fraction } from \"../../Common/DataObjects/Fraction\";\nimport { MusicPartManagerIterator } from \"./MusicPartManagerIterator\";\n\nexport class MusicPartManager /*implements ISelectionListener*/ {\n    constructor(musicSheet: MusicSheet) {\n        this.musicSheet = musicSheet;\n    }\n    private parts: PartListEntry[];\n    private timestamps: TimestampTransform[];\n    private musicSheet: MusicSheet;\n    private sheetStart: Fraction;\n    private sheetEnd: Fraction;\n\n    /**\n     * This method is called from CoreContainer when the user changes a Repetitions's userNumberOfRepetitions.\n     */\n    public reInit(): void {\n        this.init();\n    }\n\n    /**\n     * Main initialize method for MusicPartManager.\n     */\n    public init(): void {\n        this.parts = this.musicSheet.Repetitions.slice(); // slice=arrayCopy\n        this.sheetStart = this.musicSheet.SelectionStart = new Fraction(0, 1);\n        this.sheetEnd = this.musicSheet.SelectionEnd = this.musicSheet.SheetEndTimestamp;\n        this.calcMapping();\n    }\n    public getCurrentRepetitionTimestampTransform(curEnrolledTimestamp: Fraction): TimestampTransform {\n        let curTransform: TimestampTransform = undefined;\n        for (let i: number = this.timestamps.length - 1; i >= 0; i--) {\n            curTransform = this.timestamps[i];\n            if (curEnrolledTimestamp.gte(curTransform.$from)) {\n                return curTransform;\n            }\n        }\n        return this.timestamps[0];\n    }\n    public absoluteEnrolledToSheetTimestamp(timestamp: Fraction): Fraction {\n        if (this.timestamps.length === 0) {\n            return timestamp;\n        }\n        const transform: TimestampTransform = this.getCurrentRepetitionTimestampTransform(timestamp);\n        return Fraction.plus(timestamp, Fraction.minus(transform.to, transform.$from)); // FIXME\n    }\n    public get Parts(): PartListEntry[] {\n        return this.parts;\n    }\n    public get MusicSheet(): MusicSheet {\n        return this.musicSheet;\n    }\n    public getIterator(start?: Fraction): MusicPartManagerIterator {\n        if (!start) {\n            return new MusicPartManagerIterator(this.musicSheet, this.musicSheet.SelectionStart, this.musicSheet.SelectionEnd);\n        }\n        return new MusicPartManagerIterator(this.musicSheet, start, undefined);\n    }\n    public setSelectionStart(beginning: Fraction): void {\n        this.musicSheet.SelectionStart = beginning;\n        this.musicSheet.SelectionEnd = undefined;\n    }\n    public setSelectionRange(start: Fraction, end: Fraction): void {\n        this.musicSheet.SelectionStart = start ?? this.sheetStart;\n        this.musicSheet.SelectionEnd = end ?? this.sheetEnd;\n    }\n    private calcMapping(): void {\n        const timestamps: TimestampTransform[] = [];\n        const iterator: MusicPartManagerIterator = this.getIterator();\n        let currentRepetition: Repetition = iterator.CurrentRepetition;\n        let curTimestampTransform: TimestampTransform = new TimestampTransform(\n            iterator.CurrentEnrolledTimestamp.clone(),\n            iterator.CurrentSourceTimestamp.clone(),\n            undefined,\n            0\n        );\n        timestamps.push(curTimestampTransform);\n        while (!iterator.EndReached) {\n            if (iterator.JumpOccurred || currentRepetition !== iterator.CurrentRepetition) {\n                currentRepetition = iterator.CurrentRepetition;\n                // if we are still in the same repetition but in a different repetition run, we remember\n                // that we have to jump backwards at this position\n                if (iterator.backJumpOccurred) {\n                    const jumpRep: Repetition = iterator.JumpResponsibleRepetition;\n                    curTimestampTransform.nextBackJump = iterator.CurrentEnrolledTimestamp;\n                    curTimestampTransform.curRepetition = jumpRep;\n                    curTimestampTransform.curRepetitionIteration = iterator.CurrentJumpResponsibleRepetitionIterationBeforeJump;\n                    for (let i: number = this.timestamps.length - 2; i >= 0; i--) {\n                        if (timestamps[i].to.lt(jumpRep.AbsoluteTimestamp) || timestamps[i].curRepetition) {\n                            break;\n                        }\n                        timestamps[i].nextBackJump = curTimestampTransform.nextBackJump;\n                        timestamps[i].curRepetition = jumpRep;\n                        timestamps[i].curRepetitionIteration = curTimestampTransform.curRepetitionIteration;\n                    }\n                }\n                curTimestampTransform = new TimestampTransform(\n                    iterator.CurrentEnrolledTimestamp.clone(),\n                    iterator.CurrentSourceTimestamp.clone(),\n                    undefined,\n                    0\n                );\n                timestamps.push(curTimestampTransform);\n            }\n            iterator.moveToNext();\n        }\n        this.timestamps = timestamps;\n    }\n}\n\n\nexport class TimestampTransform {\n    constructor(sourceTimestamp: Fraction, enrolledTimestamp: Fraction, repetition: Repetition, curRepetitionIteration: number) {\n        this.$from = sourceTimestamp;\n        this.to = enrolledTimestamp;\n        this.curRepetition = repetition;\n        this.curRepetitionIteration = curRepetitionIteration;\n        this.nextBackJump = undefined;\n        this.nextForwardJump = undefined;\n    }\n    public $from: Fraction;\n    public to: Fraction;\n    public nextBackJump: Fraction;\n    public nextForwardJump: Fraction;\n    public curRepetition: Repetition;\n    public curRepetitionIteration: number;\n}\n","import {Fraction} from \"../../Common/DataObjects/Fraction\";\nimport {Repetition} from \"../MusicSource/Repetition\";\nimport {DynamicsContainer} from \"../VoiceData/HelperObjects/DynamicsContainer\";\nimport {MappingSourceMusicPart} from \"../MusicSource/MappingSourceMusicPart\";\nimport {SourceMeasure} from \"../VoiceData/SourceMeasure\";\nimport {VoiceEntry} from \"../VoiceData/VoiceEntry\";\nimport {Instrument} from \"../Instrument\";\nimport {VerticalSourceStaffEntryContainer} from \"../VoiceData/VerticalSourceStaffEntryContainer\";\nimport {RhythmInstruction} from \"../VoiceData/Instructions/RhythmInstruction\";\nimport {AbstractNotationInstruction} from \"../VoiceData/Instructions/AbstractNotationInstruction\";\nimport {RepetitionInstruction} from \"../VoiceData/Instructions/RepetitionInstruction\";\nimport {ContinuousDynamicExpression} from \"../VoiceData/Expressions/ContinuousExpressions/ContinuousDynamicExpression\";\nimport {InstantaneousDynamicExpression} from \"../VoiceData/Expressions/InstantaneousDynamicExpression\";\nimport {MultiTempoExpression} from \"../VoiceData/Expressions/MultiTempoExpression\";\nimport {AbstractExpression} from \"../VoiceData/Expressions/AbstractExpression\";\nimport log from \"loglevel\";\nimport { MusicSheet } from \"../MusicSheet\";\n\nexport class MusicPartManagerIterator {\n    constructor(musicSheet: MusicSheet, startTimestamp?: Fraction, endTimestamp?: Fraction) {\n        try {\n            this.frontReached = true;\n            this.musicSheet = musicSheet;\n            this.currentVoiceEntries = undefined;\n            this.frontReached = false;\n            for (const rep of this.musicSheet.Repetitions) {\n                this.setRepetitionIterationCount(rep, 1);\n            }\n            this.activeDynamicExpressions = new Array(this.musicSheet.getCompleteNumberOfStaves());\n            this.currentMeasure = this.musicSheet.SourceMeasures[0];\n            if (!startTimestamp) { return; }\n            do {\n                this.moveToNext();\n            } while ((!this.currentVoiceEntries || this.currentTimeStamp.lt(startTimestamp)) && !this.endReached);\n            for (let staffIndex: number = 0; staffIndex < this.activeDynamicExpressions.length; staffIndex++) {\n                if (this.activeDynamicExpressions[staffIndex]) {\n                    if (this.activeDynamicExpressions[staffIndex] instanceof ContinuousDynamicExpression) {\n                        const continuousDynamic: ContinuousDynamicExpression =\n                            <ContinuousDynamicExpression>this.activeDynamicExpressions[staffIndex];\n                        this.currentDynamicChangingExpressions.push(new DynamicsContainer(continuousDynamic, staffIndex));\n                    } else {\n                        const instantaneousDynamic: InstantaneousDynamicExpression =\n                            <InstantaneousDynamicExpression>this.activeDynamicExpressions[staffIndex];\n                        this.currentDynamicChangingExpressions.push(new DynamicsContainer(instantaneousDynamic, staffIndex));\n                    }\n                }\n            }\n            this.currentTempoChangingExpression = this.activeTempoExpression;\n        } catch (err) {\n            log.info(\"MusicPartManagerIterator: \" + err);\n        }\n\n    }\n    public backJumpOccurred: boolean;\n    public forwardJumpOccurred: boolean;\n    private musicSheet: MusicSheet;\n    private currentMappingPart: MappingSourceMusicPart;\n    private currentMeasure: SourceMeasure;\n    private currentMeasureIndex: number = 0;\n    private currentPartIndex: number = 0;\n    private currentVoiceEntryIndex: number = -1;\n    private currentDynamicEntryIndex: number = 0;\n    private currentTempoEntryIndex: number = 0;\n    private currentVoiceEntries: VoiceEntry[];\n    private currentDynamicChangingExpressions: DynamicsContainer[] = [];\n    private currentTempoChangingExpression: MultiTempoExpression;\n    // FIXME: replace these two with a real Dictionary!\n    private repetitionIterationCountDictKeys: Repetition[];\n    private repetitionIterationCountDictValues: number[];\n    private currentRepetition: Repetition = undefined;\n    private endReached: boolean = false;\n    private frontReached: boolean = false;\n    public currentTimeStamp: Fraction = new Fraction(0, 1);\n    private currentEnrolledMeasureTimestamp: Fraction = new Fraction(0, 1);\n    private currentRelativeInMeasureTimestamp: Fraction = new Fraction(0, 1);\n    private currentVerticalContainerInMeasureTimestamp: Fraction = new Fraction(0, 1);\n    private jumpResponsibleRepetition: Repetition = undefined;\n    private currentBpm: number;\n    private activeDynamicExpressions: AbstractExpression[] = [];\n    private activeTempoExpression: MultiTempoExpression;\n\n    public get EndReached(): boolean {\n        return this.endReached;\n    }\n    public get FrontReached(): boolean {\n        return this.frontReached;\n    }\n    public get CurrentMeasure(): SourceMeasure {\n        return this.currentMeasure;\n    }\n    public get CurrentRepetition(): Repetition {\n        return this.currentRepetition;\n    }\n    public get CurrentRepetitionIteration(): number {\n        if (this.CurrentRepetition) {\n            return this.getRepetitionIterationCount(this.CurrentRepetition);\n        }\n        return 0;\n    }\n    public get CurrentJumpResponsibleRepetitionIterationBeforeJump(): number {\n        if (this.jumpResponsibleRepetition) {\n            return this.getRepetitionIterationCount(this.jumpResponsibleRepetition) - 1;\n        }\n        return 0;\n    }\n    public get CurrentBpm(): number {\n        return this.currentBpm;\n    }\n    public get CurrentVoiceEntries(): VoiceEntry[] {\n        return this.currentVoiceEntries;\n    }\n    public get CurrentMeasureIndex(): number {\n        return this.currentMeasureIndex;\n    }\n    public get CurrentEnrolledTimestamp(): Fraction {\n        return Fraction.plus(this.currentEnrolledMeasureTimestamp, this.currentVerticalContainerInMeasureTimestamp);\n    }\n    public get CurrentSourceTimestamp(): Fraction {\n        return this.currentTimeStamp;\n    }\n    public get CurrentRelativeInMeasureTimestamp(): Fraction {\n        return this.currentRelativeInMeasureTimestamp;\n    }\n    public get JumpOccurred(): boolean {\n        return this.backJumpOccurred || this.forwardJumpOccurred;\n    }\n    public get ActiveTempoExpression(): MultiTempoExpression {\n        return this.activeTempoExpression;\n    }\n    public get ActiveDynamicExpressions(): AbstractExpression[] {\n        return this.activeDynamicExpressions;\n    }\n    public get CurrentTempoChangingExpression(): MultiTempoExpression {\n        return this.currentTempoChangingExpression;\n    }\n    public get JumpResponsibleRepetition(): Repetition {\n        return this.jumpResponsibleRepetition;\n    }\n\n    /**\n     * Creates a clone of this iterator which has the same actual position.\n     */\n    public clone(startTimeStamp: Fraction = undefined, endTimeStamp: Fraction = undefined): MusicPartManagerIterator {\n        const ret: MusicPartManagerIterator = new MusicPartManagerIterator(this.musicSheet, startTimeStamp ?? this.currentTimeStamp, endTimeStamp);\n        ret.currentVoiceEntryIndex = this.currentVoiceEntryIndex;\n        ret.currentMappingPart = this.currentMappingPart;\n        ret.currentPartIndex = this.currentPartIndex;\n        ret.currentVoiceEntries = this.currentVoiceEntries;\n        ret.endReached = this.endReached;\n        ret.frontReached = this.frontReached;\n        // alternative method to set currentTimeStamp? may not fully affect current iterator position\n        // ret.currentTimeStamp = this.currentTimeStamp;\n        return ret;\n    }\n\n    /**\n     * Returns the visible voice entries for the provided instrument of the current iterator position.\n     * @param instrument\n     * Returns: A List of voiceEntries. If there are no entries the List has a Count of 0 (it does not return null).\n     */\n    public CurrentVisibleVoiceEntries(instrument?: Instrument): VoiceEntry[] {\n        const voiceEntries: VoiceEntry[] = [];\n        if (!this.currentVoiceEntries) {\n            return voiceEntries;\n        }\n        if (instrument) {\n            for (const entry of this.currentVoiceEntries) {\n                if (entry.ParentVoice.Parent.IdString === instrument.IdString) {\n                    this.getVisibleEntries(entry, voiceEntries);\n                    return voiceEntries;\n                }\n            }\n        } else {\n            for (const entry of this.currentVoiceEntries) {\n                this.getVisibleEntries(entry, voiceEntries);\n            }\n        }\n        return voiceEntries;\n    }\n\n    /**\n     * Returns the visible voice entries for the provided instrument of the current iterator position.\n     * @param instrument\n     * Returns: A List of voiceEntries. If there are no entries the List has a Count of 0 (it does not return null).\n     */\n    public CurrentAudibleVoiceEntries(instrument?: Instrument): VoiceEntry[] {\n        const voiceEntries: VoiceEntry[] = [];\n        if (!this.currentVoiceEntries) {\n            return voiceEntries;\n        }\n        if (instrument) {\n            for (const entry of this.currentVoiceEntries) {\n                if (entry.ParentVoice.Parent.IdString === instrument.IdString) {\n                    this.getAudibleEntries(entry, voiceEntries);\n                    return voiceEntries;\n                }\n            }\n        } else {\n            for (const entry of this.currentVoiceEntries) {\n                this.getAudibleEntries(entry, voiceEntries);\n            }\n        }\n        return voiceEntries;\n    }\n\n    /**\n     * Returns the audible dynamics of the current iterator position.\n     * Returns: A List of Dynamics. If there are no entries the List has a Count of 0 (it does not return null).\n     */\n    public getCurrentDynamicChangingExpressions(): DynamicsContainer[] {\n        return this.currentDynamicChangingExpressions;\n    }\n\n    /**\n     * Returns the score following voice entries for the provided instrument of the current iterator position.\n     * @param instrument\n     * Returns: A List of voiceEntries. If there are no entries the List has a Count of 0\n     * (it does not return null).\n     */\n    public CurrentScoreFollowingVoiceEntries(instrument?: Instrument): VoiceEntry[] {\n        const voiceEntries: VoiceEntry[] = [];\n        if (!this.currentVoiceEntries) {\n            return voiceEntries;\n        }\n        if (instrument) {\n            for (const entry of this.currentVoiceEntries) {\n                if (entry.ParentVoice.Parent.IdString === instrument.IdString) {\n                    this.getScoreFollowingEntries(entry, voiceEntries);\n                    return voiceEntries;\n                }\n            }\n        } else {\n            for (const entry of this.currentVoiceEntries) {\n                this.getScoreFollowingEntries(entry, voiceEntries);\n            }\n        }\n        return voiceEntries;\n    }\n\n    //public currentPlaybackSettings(): PlaybackSettings {\n    //    return this.manager.MusicSheet.SheetPlaybackSetting;\n    //}\n    public moveToNext(): void {\n        this.forwardJumpOccurred = this.backJumpOccurred = false;\n        if (this.endReached) { return; }\n        if (this.currentVoiceEntries) {\n            this.currentVoiceEntries = [];\n        }\n        this.recursiveMove();\n        if (!this.currentMeasure) {\n            this.currentTimeStamp = new Fraction(99999, 1);\n        }\n    }\n    public moveToNextVisibleVoiceEntry(notesOnly: boolean): void {\n        while (!this.endReached) {\n            this.moveToNext();\n            if (this.checkEntries(notesOnly)) { return; }\n        }\n    }\n    private resetRepetitionIterationCount(repetition: Repetition): number {\n        this.setRepetitionIterationCount(repetition, 1);\n        return 1;\n    }\n    private incrementRepetitionIterationCount(repetition: Repetition): number {\n        if (this.repetitionIterationCountDictKeys.indexOf(repetition) === -1) {\n            return this.setRepetitionIterationCount(repetition, 1);\n        } else {\n            return this.setRepetitionIterationCount(repetition, this.getRepetitionIterationCount(repetition) + 1);\n        }\n    }\n    private setRepetitionIterationCount(repetition: Repetition, iterationCount: number): number {\n        const i: number = this.repetitionIterationCountDictKeys.indexOf(repetition);\n        if (i === -1) {\n            this.repetitionIterationCountDictKeys.push(repetition);\n            this.repetitionIterationCountDictValues.push(iterationCount);\n        } else {\n            this.repetitionIterationCountDictValues[i] = iterationCount;\n        }\n        return iterationCount;\n    }\n    private getRepetitionIterationCount(rep: Repetition): number {\n        const i: number = this.repetitionIterationCountDictKeys.indexOf(rep);\n        if (i !== -1) {\n            return this.repetitionIterationCountDictValues[i];\n        }\n    }\n/*    private moveTempoIndexToTimestamp(measureNumber: number): void {\n        for (let index: number = 0; index < this.manager.MusicSheet.TimestampSortedTempoExpressionsList.length; index++) {\n            if (this.manager.MusicSheet.TimestampSortedTempoExpressionsList[index].SourceMeasureParent.MeasureNumber >= measureNumber) {\n                this.currentTempoEntryIndex = Math.Max(-1, index - 1);\n                return\n            }\n        }\n    }\n    private getNextTempoEntryTimestamp(): Fraction {\n        if (this.currentTempoEntryIndex >= this.manager.MusicSheet.TimestampSortedTempoExpressionsList.length - 1) {\n            return new Fraction(99999, 1);\n        }\n        return this.manager.MusicSheet.TimestampSortedTempoExpressionsList[this.currentTempoEntryIndex + 1].SourceMeasureParent.AbsoluteTimestamp +\n        this.manager.MusicSheet.TimestampSortedTempoExpressionsList[this.currentTempoEntryIndex + 1].Timestamp;\n    }\n    private moveToNextDynamic(): void {\n        this.currentDynamicEntryIndex++;\n        this.currentDynamicChangingExpressions.Clear();\n        let curDynamicEntry: DynamicsContainer = this.manager.MusicSheet.TimestampSortedDynamicExpressionsList[this.currentDynamicEntryIndex];\n        this.currentDynamicChangingExpressions.push(curDynamicEntry);\n        let tsNow: Fraction = curDynamicEntry.parMultiExpression().AbsoluteTimestamp;\n        for (let i: number = this.currentDynamicEntryIndex + 1; i < this.manager.MusicSheet.TimestampSortedDynamicExpressionsList.length; i++) {\n            curDynamicEntry = this.manager.MusicSheet.TimestampSortedDynamicExpressionsList[i];\n            if ((curDynamicEntry.parMultiExpression().AbsoluteTimestamp !== tsNow)) { break; }\n            this.currentDynamicEntryIndex = i;\n            this.currentDynamicChangingExpressions.push(curDynamicEntry);\n        }\n    }\n    private moveDynamicIndexToTimestamp(absoluteTimestamp: Fraction): void {\n        let dynamics: DynamicsContainer[] = this.manager.MusicSheet.TimestampSortedDynamicExpressionsList;\n        for (let index: number = 0; index < dynamics.length; index++) {\n            if (dynamics[index].parMultiExpression().AbsoluteTimestamp.gte(absoluteTimestamp)) {\n                this.currentDynamicEntryIndex = Math.Max(0, index - 1);\n                return\n            }\n        }\n    }\n    private getNextDynamicsEntryTimestamp(): Fraction {\n        if (this.currentDynamicEntryIndex >= this.manager.MusicSheet.TimestampSortedDynamicExpressionsList.length - 1) {\n            return new Fraction(99999, 1);\n        }\n        return this.manager.MusicSheet.TimestampSortedDynamicExpressionsList[this.currentDynamicEntryIndex + 1].parMultiExpression().AbsoluteTimestamp;\n    }\n    */\n    private handleRepetitionsAtMeasureBegin(): void {\n        for (let idx: number = 0, len: number = this.currentMeasure.FirstRepetitionInstructions.length; idx < len; ++idx) {\n            const repetitionInstruction: RepetitionInstruction = this.currentMeasure.FirstRepetitionInstructions[idx];\n            if (!repetitionInstruction.parentRepetition) { continue; }\n            const currentRepetition: Repetition = repetitionInstruction.parentRepetition;\n            this.currentRepetition = currentRepetition;\n            if (currentRepetition.StartIndex === this.currentMeasureIndex) {\n                if (\n                  this.JumpResponsibleRepetition !== undefined &&\n                  currentRepetition !== this.JumpResponsibleRepetition &&\n                  currentRepetition.StartIndex >= this.JumpResponsibleRepetition.StartIndex &&\n                  currentRepetition.EndIndex <= this.JumpResponsibleRepetition.EndIndex\n                ) {\n                    this.resetRepetitionIterationCount(currentRepetition);\n                }\n            }\n        }\n    }\n\n    private handleRepetitionsAtMeasureEnd(): void {\n        for (let idx: number = 0, len: number = this.currentMeasure.LastRepetitionInstructions.length; idx < len; ++idx) {\n            const repetitionInstruction: RepetitionInstruction = this.currentMeasure.LastRepetitionInstructions[idx];\n            const currentRepetition: Repetition = repetitionInstruction.parentRepetition;\n            if (!currentRepetition) { continue; }\n            if (currentRepetition.BackwardJumpInstructions.indexOf(repetitionInstruction) > -1) {\n                if (this.getRepetitionIterationCount(currentRepetition) < currentRepetition.UserNumberOfRepetitions) {\n                    this.doBackJump(currentRepetition);\n                    this.backJumpOccurred = true;\n                    return;\n                }\n            }\n            if (repetitionInstruction === currentRepetition.forwardJumpInstruction) {\n                if (\n                  this.JumpResponsibleRepetition !== undefined\n                  && currentRepetition !== this.JumpResponsibleRepetition\n                  && currentRepetition.StartIndex >= this.JumpResponsibleRepetition.StartIndex\n                  && currentRepetition.EndIndex <= this.JumpResponsibleRepetition.EndIndex\n                ) {\n                    this.resetRepetitionIterationCount(currentRepetition);\n                }\n\n                const forwardJumpTargetMeasureIndex: number = currentRepetition.getForwardJumpTargetForIteration(\n                  this.getRepetitionIterationCount(currentRepetition)\n                );\n                if (forwardJumpTargetMeasureIndex >= 0) {\n                    this.currentMeasureIndex = forwardJumpTargetMeasureIndex;\n                    this.currentMeasure = this.musicSheet.SourceMeasures[this.currentMeasureIndex];\n                    this.currentVoiceEntryIndex = -1;\n                    this.jumpResponsibleRepetition = currentRepetition;\n                    this.forwardJumpOccurred = true;\n                    return;\n                }\n                if (forwardJumpTargetMeasureIndex === -2) {\n                    this.endReached = true;\n                }\n            }\n        }\n        this.currentMeasureIndex++;\n        if (this.JumpResponsibleRepetition !== undefined && this.currentMeasureIndex > this.JumpResponsibleRepetition.EndIndex) {\n            this.jumpResponsibleRepetition = undefined;\n        }\n    }\n    private doBackJump(currentRepetition: Repetition): void {\n        this.currentMeasureIndex = currentRepetition.getBackwardJumpTarget();\n        this.currentMeasure = this.musicSheet.SourceMeasures[this.currentMeasureIndex];\n        this.currentVoiceEntryIndex = -1;\n        this.incrementRepetitionIterationCount(currentRepetition);\n        this.jumpResponsibleRepetition = currentRepetition;\n    }\n    private activateCurrentRhythmInstructions(): void {\n        if (\n          this.currentMeasure !== undefined &&\n          this.currentMeasure.FirstInstructionsStaffEntries.length > 0 &&\n          this.currentMeasure.FirstInstructionsStaffEntries[0] !== undefined\n        ) {\n            const instructions: AbstractNotationInstruction[] = this.currentMeasure.FirstInstructionsStaffEntries[0].Instructions;\n            for (let idx: number = 0, len: number = instructions.length; idx < len; ++idx) {\n                const abstractNotationInstruction: AbstractNotationInstruction = instructions[idx];\n                if (abstractNotationInstruction instanceof RhythmInstruction) {\n                    this.musicSheet.SheetPlaybackSetting.rhythm = (<RhythmInstruction>abstractNotationInstruction).Rhythm;\n                }\n            }\n        }\n    }\n    private activateCurrentDynamicOrTempoInstructions(): void {\n        const timeSortedDynamics: DynamicsContainer[] = this.musicSheet.TimestampSortedDynamicExpressionsList;\n        while (\n          this.currentDynamicEntryIndex > 0 && (\n            this.currentDynamicEntryIndex >= timeSortedDynamics.length ||\n            this.CurrentSourceTimestamp.lte(timeSortedDynamics[this.currentDynamicEntryIndex].parMultiExpression().AbsoluteTimestamp)\n          )\n        ) {\n            this.currentDynamicEntryIndex--;\n        }\n        while (\n          this.currentDynamicEntryIndex < timeSortedDynamics.length &&\n          timeSortedDynamics[this.currentDynamicEntryIndex].parMultiExpression().AbsoluteTimestamp.lt(this.CurrentSourceTimestamp)\n        ) {\n            this.currentDynamicEntryIndex++;\n        }\n        while (\n          this.currentDynamicEntryIndex < timeSortedDynamics.length\n          && timeSortedDynamics[this.currentDynamicEntryIndex].parMultiExpression().AbsoluteTimestamp.Equals(this.CurrentSourceTimestamp)\n        ) {\n            const dynamicsContainer: DynamicsContainer = timeSortedDynamics[this.currentDynamicEntryIndex];\n            const staffIndex: number = dynamicsContainer.staffNumber;\n            if (this.CurrentSourceTimestamp.Equals(dynamicsContainer.parMultiExpression().AbsoluteTimestamp)) {\n                if (dynamicsContainer.continuousDynamicExpression) {\n                    this.activeDynamicExpressions[staffIndex] = dynamicsContainer.continuousDynamicExpression;\n                } else if (dynamicsContainer.instantaneousDynamicExpression) {\n                    this.activeDynamicExpressions[staffIndex] = dynamicsContainer.instantaneousDynamicExpression;\n                }\n            }\n            this.currentDynamicEntryIndex++;\n        }\n        this.currentDynamicChangingExpressions = [];\n        for (let staffIndex: number = 0; staffIndex < this.activeDynamicExpressions.length; staffIndex++) {\n            if (this.activeDynamicExpressions[staffIndex]) {\n                let startTime: Fraction;\n                let endTime: Fraction;\n                if (this.activeDynamicExpressions[staffIndex] instanceof ContinuousDynamicExpression) {\n                    const continuousDynamic: ContinuousDynamicExpression = <ContinuousDynamicExpression>this.activeDynamicExpressions[staffIndex];\n                    startTime = continuousDynamic.StartMultiExpression.AbsoluteTimestamp;\n                    endTime = continuousDynamic.EndMultiExpression.AbsoluteTimestamp;\n                    if (startTime.lte(this.CurrentSourceTimestamp) && this.CurrentSourceTimestamp.lte(endTime)) {\n                        this.currentDynamicChangingExpressions.push(new DynamicsContainer(continuousDynamic, staffIndex));\n                    }\n                } else {\n                    const instantaneousDynamic: InstantaneousDynamicExpression = <InstantaneousDynamicExpression>this.activeDynamicExpressions[staffIndex];\n                    if (this.CurrentSourceTimestamp.Equals(instantaneousDynamic.ParentMultiExpression.AbsoluteTimestamp)) {\n                        this.currentDynamicChangingExpressions.push(new DynamicsContainer(instantaneousDynamic, staffIndex));\n                    }\n                }\n            }\n        }\n        const timeSortedTempoExpressions: MultiTempoExpression[] = this.musicSheet.TimestampSortedTempoExpressionsList;\n\n        while (this.currentTempoEntryIndex > 0 && (\n          this.currentTempoEntryIndex >= timeSortedTempoExpressions.length\n          || this.CurrentSourceTimestamp.lte(timeSortedTempoExpressions[this.currentTempoEntryIndex].AbsoluteTimestamp)\n        )) {\n            this.currentTempoEntryIndex--;\n        }\n\n        while (\n          this.currentTempoEntryIndex < timeSortedTempoExpressions.length &&\n          timeSortedTempoExpressions[this.currentTempoEntryIndex].AbsoluteTimestamp.lt(this.CurrentSourceTimestamp)\n        ) {\n            this.currentTempoEntryIndex++;\n        }\n\n        while (\n          this.currentTempoEntryIndex < timeSortedTempoExpressions.length\n          && timeSortedTempoExpressions[this.currentTempoEntryIndex].AbsoluteTimestamp.Equals(this.CurrentSourceTimestamp)\n        ) {\n            this.activeTempoExpression = timeSortedTempoExpressions[this.currentTempoEntryIndex];\n            this.currentTempoEntryIndex++;\n        }\n        this.currentTempoChangingExpression = undefined;\n        if (this.activeTempoExpression) {\n            let endTime: Fraction = this.activeTempoExpression.AbsoluteTimestamp;\n            if (this.activeTempoExpression.ContinuousTempo) {\n                endTime = this.activeTempoExpression.ContinuousTempo.AbsoluteEndTimestamp;\n            }\n            if (   this.activeTempoExpression.AbsoluteTimestamp.lte(this.CurrentSourceTimestamp)\n                || this.CurrentSourceTimestamp.lte(endTime)\n            ) {\n                this.currentTempoChangingExpression = this.activeTempoExpression;\n            }\n        }\n    }\n    private recursiveMove(): void {\n        this.currentVoiceEntryIndex++; // TODO handle hidden part: skip hidden voice if requested by parameter\n        if (this.currentVoiceEntryIndex === 0) {\n            this.handleRepetitionsAtMeasureBegin();\n            this.activateCurrentRhythmInstructions();\n        }\n        // everything fine, no complications\n        if (this.currentVoiceEntryIndex >= 0 && this.currentVoiceEntryIndex < this.currentMeasure.VerticalSourceStaffEntryContainers.length) {\n            const currentContainer: VerticalSourceStaffEntryContainer = this.currentMeasure.VerticalSourceStaffEntryContainers[this.currentVoiceEntryIndex];\n            this.currentVoiceEntries = this.getVoiceEntries(currentContainer);\n            this.currentVerticalContainerInMeasureTimestamp = currentContainer.Timestamp;\n            this.currentTimeStamp = Fraction.plus(this.currentMeasure.AbsoluteTimestamp, this.currentVerticalContainerInMeasureTimestamp);\n            const selectionEnd: Fraction = this.musicSheet.SelectionEnd;\n            // TODO handle selectionEnd undefined, can happen in Beethoven Ferne Geliebte\n            if (selectionEnd && this.currentTimeStamp.gte(selectionEnd)) {\n                this.endReached = true;\n            }\n            this.activateCurrentDynamicOrTempoInstructions();\n            return;\n        }\n        this.currentEnrolledMeasureTimestamp.Add(this.currentMeasure.Duration);\n        this.handleRepetitionsAtMeasureEnd();\n        if (this.currentMeasureIndex >= 0 && this.currentMeasureIndex < this.musicSheet.SourceMeasures.length) {\n            this.currentMeasure = this.musicSheet.SourceMeasures[this.currentMeasureIndex];\n            this.currentTimeStamp = Fraction.plus(this.currentMeasure.AbsoluteTimestamp, this.currentVerticalContainerInMeasureTimestamp);\n            this.currentVoiceEntryIndex = -1;\n            this.recursiveMove();\n            return;\n        }\n        // we reached the end\n        this.currentVerticalContainerInMeasureTimestamp = new Fraction();\n        this.currentMeasure = undefined;\n        this.currentVoiceEntries = undefined;\n        this.endReached = true;\n    }\n\n    /**\n     * helper function for moveToNextVisibleVoiceEntry and moveToPreviousVisibleVoiceEntry\n     * Get all entries and check if there is at least one valid entry in the list\n     * @param notesOnly\n     */\n    private checkEntries(notesOnly: boolean): boolean {\n        const tlist: VoiceEntry[] = this.CurrentVisibleVoiceEntries();\n        if (tlist.length > 0) {\n            if (!notesOnly) { return true; }\n            for (let idx: number = 0, len: number = tlist.length; idx < len; ++idx) {\n                const entry: VoiceEntry = tlist[idx];\n                if (entry.Notes[0].Pitch) { return true; }\n            }\n        }\n        return false;\n    }\n    private getVisibleEntries(entry: VoiceEntry, visibleEntries: VoiceEntry[]): void {\n        if (entry.ParentVoice.Visible) {\n            visibleEntries.push(entry);\n        }\n    }\n    private getAudibleEntries(entry: VoiceEntry, audibleEntries: VoiceEntry[]): void {\n        if (entry.ParentVoice.Audible) {\n            audibleEntries.push(entry);\n        }\n    }\n    private getScoreFollowingEntries(entry: VoiceEntry, followingEntries: VoiceEntry[]): void {\n        if (entry.ParentVoice.Following && entry.ParentVoice.Parent.Following) {\n            followingEntries.push(entry);\n        }\n    }\n    private getVoiceEntries(container: VerticalSourceStaffEntryContainer): VoiceEntry[] {\n        const entries: VoiceEntry[] = [];\n        for (const sourceStaffEntry of container.StaffEntries) {\n            if (!sourceStaffEntry) { continue; }\n            for (const voiceEntry of sourceStaffEntry.VoiceEntries) {\n                entries.push(voiceEntry);\n            }\n        }\n        return entries;\n    }\n\n\n}\n","// created from 'create-ts-index'\n\nexport * from \"./MusicPartManager\";\nexport * from \"./MusicPartManagerIterator\";\n","import {Fraction} from \"../Common/DataObjects/Fraction\";\nimport {MusicPartManager} from \"./MusicParts/MusicPartManager\";\nimport {SourceMeasure} from \"./VoiceData/SourceMeasure\";\nimport {Repetition} from \"./MusicSource/Repetition\";\nimport {DynamicsContainer} from \"./VoiceData/HelperObjects/DynamicsContainer\";\nimport {InstrumentalGroup} from \"./InstrumentalGroup\";\nimport {Instrument} from \"./Instrument\";\nimport {Label} from \"./Label\";\nimport {Staff} from \"./VoiceData/Staff\";\nimport {MusicPartManagerIterator} from \"./MusicParts/MusicPartManagerIterator\";\nimport {VerticalSourceStaffEntryContainer} from \"./VoiceData/VerticalSourceStaffEntryContainer\";\nimport {Voice} from \"./VoiceData/Voice\";\nimport {MusicSheetErrors} from \"../Common/DataObjects/MusicSheetErrors\";\nimport {MultiTempoExpression} from \"./VoiceData/Expressions/MultiTempoExpression\";\nimport {EngravingRules} from \"./Graphical/EngravingRules\";\nimport {NoteState} from \"./Graphical/DrawingEnums\";\nimport {Note} from \"./VoiceData/Note\";\nimport {VoiceEntry} from \"./VoiceData/VoiceEntry\";\nimport log from \"loglevel\";\n\n// FIXME Andrea: Commented out some unnecessary/not-ported-yet code, have a look at (*)\n\nexport class PlaybackSettings {\n    public rhythm: Fraction;\n}\n\n/**\n * This is the representation of a complete piece of sheet music.\n * It includes the contents of a MusicXML file after the reading.\n * Notes: the musicsheet might not need the Rules, e.g. in the testframework. The EngravingRules Constructor\n * fails when no FontInfo exists, which needs a TextMeasurer\n */\nexport class MusicSheet /*implements ISettableMusicSheet, IComparable<MusicSheet>*/ {\n    constructor() {\n        this.playbackSettings = new PlaybackSettings();\n        // FIXME?\n        // initialize SheetPlaybackSetting with default values\n        this.playbackSettings.rhythm = new Fraction(4, 4, 0, false);\n        this.userStartTempoInBPM = 100;\n        this.pageWidth = 120;\n        // create MusicPartManager\n        this.MusicPartManager = new MusicPartManager(this);\n        this.hasBPMInfo = false;\n    }\n    public static defaultTitle: string = \"[no title given]\";\n\n    public userStartTempoInBPM: number;\n    public pageWidth: number;\n\n    private idString: string = \"random idString, not initialized\";\n    private sourceMeasures: SourceMeasure[] = [];\n    private repetitions: Repetition[] = [];\n    private dynListStaves: DynamicsContainer[][] = [];\n    private timestampSortedDynamicExpressionsList: DynamicsContainer[] = [];\n    private timestampSortedTempoExpressionsList: MultiTempoExpression[] = [];\n    private instrumentalGroups: InstrumentalGroup[] = [];\n    /** The parts in the sheet, e.g. piano left hand, or piano right hand, or violin. */\n    private instruments: Instrument[] = []; // Should be renamed from instruments to parts and part, though this will be a big refactor\n    private playbackSettings: PlaybackSettings;\n    private path: string;\n    private title: Label;\n    private subtitle: Label;\n    private composer: Label;\n    private lyricist: Label;\n    // private languages: Language[] = [];\n    // private activeLanguage: Language;\n    private musicPartManager: MusicPartManager = undefined;\n    private musicSheetErrors: MusicSheetErrors = new MusicSheetErrors();\n    private staves: Staff[] = [];\n    private selectionStart: Fraction;\n    private selectionEnd: Fraction;\n    private transpose: number = 0;\n    private defaultStartTempoInBpm: number = 0;\n    private drawErroneousMeasures: boolean = false;\n    private hasBeenOpenedForTheFirstTime: boolean = false;\n    private currentEnrolledPosition: Fraction = new Fraction(0, 1);\n    // (*) private musicSheetParameterObject: MusicSheetParameterObject = undefined;\n    private rules: EngravingRules;\n    // (*) private musicSheetParameterChangedDelegate: MusicSheetParameterChangedDelegate;\n    /* Whether BPM info is present in the sheet. If it is set to false, each measure's BPM was set to a default of 120. */\n    private hasBPMInfo: boolean;\n\n    /**\n     * Get the global index within the music sheet for this staff.\n     * @param staff\n     * @returns {number}\n     */\n    public static getIndexFromStaff(staff: Staff): number {\n        return staff.idInMusicSheet;\n    }\n    public get SourceMeasures(): SourceMeasure[] {\n        return this.sourceMeasures;\n    }\n    public set SourceMeasures(value: SourceMeasure[]) {\n        this.sourceMeasures = value;\n    }\n    public get Repetitions(): Repetition[] {\n        return this.repetitions;\n    }\n    public set Repetitions(value: Repetition[]) {\n        this.repetitions = value;\n    }\n    public get DynListStaves(): DynamicsContainer[][] {\n        return this.dynListStaves;\n    }\n    public get TimestampSortedTempoExpressionsList(): MultiTempoExpression[] {\n        return this.timestampSortedTempoExpressionsList;\n    }\n    public get TimestampSortedDynamicExpressionsList(): DynamicsContainer[] {\n        return this.timestampSortedDynamicExpressionsList;\n    }\n    public get InstrumentalGroups(): InstrumentalGroup[] {\n        return this.instrumentalGroups;\n    }\n    public get Parts(): Instrument[] { // Instrument should be renamed to Part\n        return this.instruments;\n    }\n    public get Instruments(): Instrument[] { // deprecated\n        // this method name should remain for a while to maintain compatibility even when Instrument is renamed to Part\n        return this.instruments;\n    }\n    public get SheetPlaybackSetting(): PlaybackSettings {\n        return this.playbackSettings;\n    }\n    public set SheetPlaybackSetting(value: PlaybackSettings) {\n        this.playbackSettings = value;\n    }\n    public get DrawErroneousMeasures(): boolean {\n        return this.drawErroneousMeasures;\n    }\n    public set DrawErroneousMeasures(value: boolean) {\n        this.drawErroneousMeasures = value;\n    }\n    public get HasBeenOpenedForTheFirstTime(): boolean {\n        return this.hasBeenOpenedForTheFirstTime;\n    }\n    public set HasBeenOpenedForTheFirstTime(value: boolean) {\n        this.hasBeenOpenedForTheFirstTime = value;\n    }\n    public InitializeStartTempoInBPM(startTempo: number): void {\n        // (*) this.playbackSettings.BeatsPerMinute = startTempo;\n        this.userStartTempoInBPM = startTempo;\n    }\n    public get DefaultStartTempoInBpm(): number {\n        return this.defaultStartTempoInBpm;\n    }\n    public set DefaultStartTempoInBpm(value: number) {\n        this.defaultStartTempoInBpm = value;\n        this.InitializeStartTempoInBPM(value);\n    }\n    public get Path(): string {\n        return this.path;\n    }\n    public set Path(value: string) {\n        this.path = value;\n    }\n    public get Staves(): Staff[] {\n        return this.staves;\n    }\n    public get TitleString(): string {\n        if (this.title) {\n            return this.title.text;\n        } else {\n            return \"\";\n        }\n    }\n    public set TitleString(value: string) {\n        this.Title = new Label(value);\n    }\n    public get SubtitleString(): string {\n        if (this.subtitle) {\n            return this.subtitle.text;\n        } else {\n            return \"\";\n        }\n    }\n    public set SubtitleString(value: string) {\n        this.Subtitle = new Label(value);\n    }\n    public get ComposerString(): string {\n        if (this.composer) {\n            return this.composer.text;\n        } else {\n            return \"\";\n        }\n    }\n    public set ComposerString(value: string) {\n        this.Composer = new Label(value);\n    }\n    public get LyricistString(): string {\n        if (this.lyricist) {\n            return this.lyricist.text;\n        } else {\n            return \"\";\n        }\n    }\n    public set LyricistString(value: string) {\n        this.Lyricist = new Label(value);\n    }\n    public get Title(): Label {\n        return this.title;\n    }\n    public set Title(value: Label) {\n        this.title = value;\n    }\n    public get Subtitle(): Label {\n        return this.subtitle;\n    }\n    public set Subtitle(value: Label) {\n        this.subtitle = value;\n    }\n    public get Composer(): Label {\n        return this.composer;\n    }\n    public set Composer(value: Label) {\n        this.composer = value;\n    }\n    public get Lyricist(): Label {\n        return this.lyricist;\n    }\n    public set Lyricist(value: Label) {\n        this.lyricist = value;\n    }\n    public get Rules(): EngravingRules {\n        if (!this.rules) {\n            log.debug(\"warning: sheet.Rules was undefined. Creating new EngravingRules.\");\n            this.rules = new EngravingRules();\n        }\n        return this.rules;\n    }\n    public set Rules(value: EngravingRules) {\n        this.rules = value;\n    }\n    public get SheetErrors(): MusicSheetErrors {\n        return this.musicSheetErrors;\n    }\n    public get SelectionStart(): Fraction {\n        return this.selectionStart;\n    }\n    public set SelectionStart(value: Fraction) {\n        this.selectionStart = value.clone();\n        this.currentEnrolledPosition = value.clone();\n    }\n    public get SelectionEnd(): Fraction {\n        return this.selectionEnd;\n    }\n    public set SelectionEnd(value: Fraction) {\n        this.selectionEnd = value;\n    }\n\n    public set HasBPMInfo(value: boolean) {\n        this.hasBPMInfo = value;\n    }\n\n    public get HasBPMInfo(): boolean {\n        return this.hasBPMInfo;\n    }\n\n    // (*) public get MusicSheetParameterObject(): MusicSheetParameterObject {\n    //    return this.musicSheetParameterObject;\n    //}\n    // (*) public set MusicSheetParameterObject(value: MusicSheetParameterObject) {\n    //    this.musicSheetParameterObject = value;\n    //    this.Title = new Label(this.musicSheetParameterObject.Title);\n    //    this.Composer = new Label(this.musicSheetParameterObject.Composer);\n    //}\n    public addMeasure(measure: SourceMeasure): void {\n        this.sourceMeasures.push(measure);\n        measure.measureListIndex = this.sourceMeasures.length - 1;\n    }\n    public checkForInstrumentWithNoVoice(): void {\n        for (let idx: number = 0, len: number = this.instruments.length; idx < len; ++idx) {\n            const instrument: Instrument = this.instruments[idx];\n            if (instrument.Voices.length === 0) {\n                const voice: Voice = new Voice(instrument, 1);\n                instrument.Voices.push(voice);\n            }\n        }\n    }\n\n    /**\n     *\n     * @param staffIndexInMusicSheet - The global staff index, iterating through all staves of all instruments.\n     * @returns {Staff}\n     */\n    public getStaffFromIndex(staffIndexInMusicSheet: number): Staff {\n        return this.staves[staffIndexInMusicSheet];\n    }\n    public fillStaffList(): void {\n        let i: number = 0;\n        for (let idx: number = 0, len: number = this.instruments.length; idx < len; ++idx) {\n            const instrument: Instrument = this.instruments[idx];\n            for (let idx2: number = 0, len2: number = instrument.Staves.length; idx2 < len2; ++idx2) {\n                const staff: Staff = instrument.Staves[idx2];\n                staff.idInMusicSheet = i;\n                this.staves.push(staff);\n                i++;\n            }\n        }\n    }\n    public get MusicPartManager(): MusicPartManager {\n        return this.musicPartManager;\n    }\n    public set MusicPartManager(value: MusicPartManager) {\n        this.musicPartManager = value;\n    }\n    public getCompleteNumberOfStaves(): number {\n        let num: number = 0;\n        for (let idx: number = 0, len: number = this.instruments.length; idx < len; ++idx) {\n            const instrument: Instrument = this.instruments[idx];\n            num += instrument.Staves.length;\n        }\n        return num;\n    }\n\n    /**\n     * Return a sourceMeasureList, where the given indices correspond to the whole SourceMeasureList of the MusicSheet.\n     * @param start\n     * @param end\n     * @returns {SourceMeasure[]}\n     */\n    public getListOfMeasuresFromIndeces(start: number, end: number): SourceMeasure[] {\n        const measures: SourceMeasure[] = [];\n        for (let i: number = start; i <= end; i++) {\n            measures.push(this.sourceMeasures[i]);\n        }\n        return measures;\n    }\n    /**\n     * Returns the next SourceMeasure from a given SourceMeasure.\n     * @param measure\n     */\n    public getNextSourceMeasure(measure: SourceMeasure): SourceMeasure {\n        const index: number = this.sourceMeasures.indexOf(measure);\n        if (index === this.sourceMeasures.length - 1) {\n            return measure;\n        }\n        return this.sourceMeasures[index + 1];\n    }\n    /**\n     * Returns the first SourceMeasure of MusicSheet.\n     */\n    public getFirstSourceMeasure(): SourceMeasure {\n        return this.sourceMeasures[0];\n    }\n    /**\n     * Returns the last SourceMeasure of MusicSheet.\n     */\n    public getLastSourceMeasure(): SourceMeasure {\n        return this.sourceMeasures[this.sourceMeasures.length - 1];\n    }\n    public resetAllNoteStates(): void {\n        const iterator: MusicPartManagerIterator = this.MusicPartManager.getIterator();\n        while (!iterator.EndReached && iterator.CurrentVoiceEntries) {\n            for (let idx: number = 0, len: number = iterator.CurrentVoiceEntries.length; idx < len; ++idx) {\n                const voiceEntry: VoiceEntry = iterator.CurrentVoiceEntries[idx];\n                for (let idx2: number = 0, len2: number = voiceEntry.Notes.length; idx2 < len2; ++idx2) {\n                    const note: Note = voiceEntry.Notes[idx2];\n                    note.state = NoteState.Normal;\n                }\n            }\n            iterator.moveToNext();\n        }\n    }\n    public getMusicSheetInstrumentIndex(instrument: Instrument): number {\n        return this.Instruments.indexOf(instrument);\n    }\n    public getGlobalStaffIndexOfFirstStaff(instrument: Instrument): number {\n        const instrumentIndex: number = this.getMusicSheetInstrumentIndex(instrument);\n        let staffLineIndex: number = 0;\n        for (let i: number = 0; i < instrumentIndex; i++) {\n            staffLineIndex += this.Instruments[i].Staves.length;\n        }\n        return staffLineIndex;\n    }\n\n    /**\n     * Set to the index-given Repetition a new (set from user) value.\n     * @param index\n     * @param value\n     */\n    public setRepetitionNewUserNumberOfRepetitions(index: number, value: number): void {\n        let repIndex: number = 0;\n        for (let i: number = 0; i < this.repetitions.length; i++) {\n            if (this.repetitions[i] instanceof Repetition) { // FIXME\n                if (index === repIndex) {\n                    this.repetitions[i].UserNumberOfRepetitions = value;\n                    break;\n                } else {\n                    repIndex++;\n                }\n            }\n        }\n    }\n\n    /**\n     * Return the [[Repetition]] from the given index.\n     * @param index\n     * @returns {any}\n     */\n    public getRepetitionByIndex(index: number): Repetition {\n        let repIndex: number = 0;\n        for (let i: number = 0; i < this.repetitions.length; i++) {\n            if (this.repetitions[i] instanceof Repetition) {\n                if (index === repIndex) {\n                    return <Repetition>this.repetitions[i];\n                }\n                repIndex++;\n            }\n        }\n        return undefined;\n    }\n    public CompareTo(other: MusicSheet): number {\n        return this.Title.text.localeCompare(other.Title.text);\n    }\n    // (*)\n    //public get IInstruments(): IInstrument[] {\n    //    return this.instruments.slice()\n    //}\n    //public get IInitializableInstruments(): ISettableInstrument[] {\n    //    return this.instruments.slice();\n    //}\n    //public get IRepetitions(): IRepetition[] {\n    //    try {\n    //        let repetitions: IRepetition[] = [];\n    //        for (let idx: number = 0, len: number = this.repetitions.length; idx < len; ++idx) {\n    //            let partListEntry: PartListEntry = this.repetitions[idx];\n    //            if (partListEntry instanceof Repetition) {\n    //                repetitions.push(<Repetition>partListEntry);\n    //            }\n    //        }\n    //        return repetitions;\n    //    } catch (ex) {\n    //        log.info(\"MusicSheet.IRepetitions get: \", ex);\n    //        return undefined;\n    //    }\n    //\n    //}\n    public getExpressionsStartTempoInBPM(): number {\n        if (this.TimestampSortedTempoExpressionsList.length > 0) {\n            const me: MultiTempoExpression = this.TimestampSortedTempoExpressionsList[0];\n            if (me.InstantaneousTempo) {\n                return me.InstantaneousTempo.TempoInBpm;\n            } else if (me.ContinuousTempo) {\n                return me.ContinuousTempo.StartTempo;\n            }\n        }\n        return this.userStartTempoInBPM;\n    }\n    public get Errors(): { [n: number]: string[] } {\n        return this.musicSheetErrors.measureErrors;\n    }\n    public get FirstMeasureNumber(): number {\n        try {\n            return this.getFirstSourceMeasure().MeasureNumber;\n        } catch (ex) {\n            log.info(\"MusicSheet.FirstMeasureNumber: \", ex);\n            return 0;\n        }\n\n    }\n    public get LastMeasureNumber(): number {\n        try {\n            return this.getLastSourceMeasure().MeasureNumber;\n        } catch (ex) {\n            log.info(\"MusicSheet.LastMeasureNumber: \", ex);\n            return 0;\n        }\n\n    }\n    public get CurrentEnrolledPosition(): Fraction {\n        return this.currentEnrolledPosition.clone();\n    }\n    public set CurrentEnrolledPosition(value: Fraction) {\n        this.currentEnrolledPosition = value.clone();\n    }\n    public get Transpose(): number {\n        return this.transpose;\n    }\n    public set Transpose(value: number) {\n        this.transpose = value;\n    }\n    // (*)\n    //public SetMusicSheetParameter(parameter: MusicSheetParameters, value: Object): void {\n    //    if (this.PhonicScoreInterface) {\n    //        this.PhonicScoreInterface.RequestMusicSheetParameter(parameter, value);\n    //    } else {\n    //        let oldValue: Object = 0;\n    //        if (!parameter) { // FIXME MusicSheetParameters.MusicSheetTranspose) {\n    //            oldValue = this.Transpose;\n    //            this.Transpose = value;\n    //        }\n    //        if (!parameter) { // FIXME MusicSheetParameters.StartTempoInBPM) {\n    //            oldValue = this.UserStartTempoInBPM;\n    //            this.UserStartTempoInBPM = value;\n    //        }\n    //        if (!parameter) { // FIXME MusicSheetParameters.HighlightErrors) {\n    //            oldValue = value;\n    //        }\n    //        if (this.MusicSheetParameterChanged) {\n    //            this.musicSheetParameterChangedDelegate(undefined, parameter, value, oldValue);\n    //        }\n    //    }\n    //}\n    //public get MusicSheetParameterChanged(): MusicSheetParameterChangedDelegate {\n    //    return this.musicSheetParameterChangedDelegate;\n    //}\n    //public set MusicSheetParameterChanged(value: MusicSheetParameterChangedDelegate) {\n    //    this.musicSheetParameterChangedDelegate = value;\n    //}\n    public get FullNameString(): string {\n        return this.ComposerString + \" \" + this.TitleString;\n    }\n    public get IdString(): string {\n        return this.idString;\n    }\n    public set IdString(value: string) {\n        this.idString = value;\n    }\n    // (*)\n    // public Dispose(): void {\n    //    this.MusicSheetParameterChanged = undefined;\n    //    for (let idx: number = 0, len: number = this.instruments.length; idx < len; ++idx) {\n    //        let instrument: Instrument = this.instruments[idx];\n    //        instrument.dispose();\n    //    }\n    // }\n    public getEnrolledSelectionStartTimeStampWorkaround(): Fraction {\n        const iter: MusicPartManagerIterator = this.MusicPartManager.getIterator(this.SelectionStart);\n        return Fraction.createFromFraction(iter.CurrentEnrolledTimestamp);\n    }\n    public get SheetEndTimestamp(): Fraction {\n        const lastMeasure: SourceMeasure = this.getLastSourceMeasure();\n        return Fraction.plus(lastMeasure.AbsoluteTimestamp, lastMeasure.Duration);\n    }\n\n    /**\n     * Works only if the [[SourceMeasure]]s are already filled with VerticalStaffEntryContainers!\n     * @param timeStamp\n     * @returns {SourceMeasure}\n     */\n    public getSourceMeasureFromTimeStamp(timeStamp: Fraction): SourceMeasure {\n        for (let idx: number = 0, len: number = this.sourceMeasures.length; idx < len; ++idx) {\n            const sm: SourceMeasure = this.sourceMeasures[idx];\n            for (let idx2: number = 0, len2: number = sm.VerticalSourceStaffEntryContainers.length; idx2 < len2; ++idx2) {\n                const vssec: VerticalSourceStaffEntryContainer = sm.VerticalSourceStaffEntryContainers[idx2];\n                if (timeStamp.Equals(vssec.getAbsoluteTimestamp())) {\n                    return sm;\n                }\n            }\n        }\n        return this.findSourceMeasureFromTimeStamp(timeStamp);\n    }\n    public findSourceMeasureFromTimeStamp(timestamp: Fraction): SourceMeasure {\n        for (const sm of this.sourceMeasures) {\n            if (sm.AbsoluteTimestamp.lte(timestamp) && timestamp.lt(Fraction.plus(sm.AbsoluteTimestamp, sm.Duration))) {\n                return sm;\n            }\n        }\n    }\n\n    public getVisibleInstruments(): Instrument[] {\n        const visInstruments: Instrument[] = [];\n        for (let idx: number = 0, len: number = this.Instruments.length; idx < len; ++idx) {\n            const instrument: Instrument = this.Instruments[idx];\n            if (instrument.Voices.length > 0 && instrument.Voices[0].Visible) {\n                visInstruments.push(instrument);\n            }\n        }\n        return visInstruments;\n    }\n}\n","import {SourceMusicPart} from \"./SourceMusicPart\";\nimport {Fraction} from \"../../Common/DataObjects/Fraction\";\nimport {Repetition} from \"./Repetition\";\nimport {PartListEntry} from \"./PartListEntry\";\n\nexport class MappingSourceMusicPart /* implements IComparable, IComparable<MappingSourceMusicPart>*/ {\n    constructor(\n        sourceMusicPart: SourceMusicPart, startTimestamp: Fraction, parentPartListEntry?: Repetition,\n        repetitionRun: number = -1, isEnding: boolean = false\n    ) {\n        this.sourceMusicPart = sourceMusicPart;\n        this.parentPartListEntry = parentPartListEntry;\n        this.startTimestamp = startTimestamp.clone();\n        this.repetitionRun = repetitionRun;\n        this.parentRepetition = parentPartListEntry;\n        this.isEnding = isEnding;\n    }\n\n    private sourceMusicPart: SourceMusicPart;\n    private parentRepetition: Repetition;\n    private parentPartListEntry: PartListEntry;\n    private startTimestamp: Fraction;\n    private repetitionRun: number = -1;\n    private isEnding: boolean;\n\n    public get IsRepetition(): boolean {\n        return this.parentRepetition !== undefined;\n    }\n    public get IsEnding(): boolean {\n        return this.isEnding;\n    }\n    public get IsLastRepetitionRun(): boolean {\n        return this.IsRepetition && (this.repetitionRun + 1 === this.parentRepetition.UserNumberOfRepetitions);\n    }\n    public get RepetitionRun(): number {\n        return this.repetitionRun;\n    }\n    public get ParentPartListEntry(): PartListEntry {\n        return this.parentPartListEntry;\n    }\n    public get SourceMusicPart(): SourceMusicPart {\n        return this.sourceMusicPart;\n    }\n    public get StartTimestamp(): Fraction {\n        return this.startTimestamp;\n    }\n    public CompareTo(comp: MappingSourceMusicPart): number {\n        //let comp: MappingSourceMusicPart = <MappingSourceMusicPart>(obj, MappingSourceMusicPart);\n        if (comp) {\n            return this.startTimestamp.CompareTo(comp.startTimestamp);\n        } else { return 1; }\n    }\n    //public CompareTo(other: MappingSourceMusicPart): number {\n    //    return this.CompareTo(<Object>other);\n    //}\n}\n","import {MusicSheet} from \"../MusicSheet\";\nimport {Fraction} from \"../../Common/DataObjects/Fraction\";\nimport {SourceMeasure} from \"../VoiceData/SourceMeasure\";\n\nexport abstract class PartListEntry {\n    constructor(musicSheet: MusicSheet) {\n        this.musicSheet = musicSheet;\n    }\n\n    public absoluteTimestamp: Fraction;\n    public startIndex: number;\n    public endIndex: number;\n\n    protected enrolledTimestamps: Fraction[] = [];\n    protected visible: boolean = true;\n    protected musicSheet: MusicSheet;\n\n    public get Visible(): boolean {\n        return this.visible;\n    }\n    public set Visible(value: boolean) {\n        this.visible = value;\n    }\n    public getFirstSourceMeasure(): SourceMeasure {\n        return this.musicSheet.SourceMeasures[this.startIndex];\n    }\n    public getLastSourceMeasure(): SourceMeasure {\n        return this.musicSheet.SourceMeasures[this.endIndex];\n    }\n}\n","import {SourceMusicPart} from \"./SourceMusicPart\";\nimport {SourceMeasure} from \"../VoiceData/SourceMeasure\";\nimport {Fraction} from \"../../Common/DataObjects/Fraction\";\nimport {MusicSheet} from \"../MusicSheet\";\nimport {RepetitionInstruction} from \"../VoiceData/Instructions/RepetitionInstruction\";\nimport {PartListEntry} from \"./PartListEntry\";\nimport log from \"loglevel\";\n\nexport class Repetition extends PartListEntry /*implements IRepetition*/ {\n    constructor(musicSheet: MusicSheet, virtualOverallRepetition: boolean) {\n        super(musicSheet);\n        this.musicSheet2 = musicSheet;\n        this.virtualOverallRepetition = virtualOverallRepetition;\n    }\n\n    public startMarker: RepetitionInstruction;\n    public endMarker: RepetitionInstruction;\n    public forwardJumpInstruction: RepetitionInstruction;\n\n    private backwardJumpInstructions: RepetitionInstruction[] = [];\n    private endingParts: RepetitionEndingPart[] = [];\n    private endingIndexDict: { [_: number]: RepetitionEndingPart } = {};\n    private userNumberOfRepetitions: number = 0;\n    private visibles: boolean[] = [];\n    private fromWords: boolean = false;\n    private musicSheet2: MusicSheet;\n    private repetitonIterationOrder: number[] = [];\n    private numberOfEndings: number = 1;\n    private virtualOverallRepetition: boolean;\n\n    public get BackwardJumpInstructions(): RepetitionInstruction[] {\n        return this.backwardJumpInstructions;\n    }\n    public get EndingIndexDict(): { [_: number]: RepetitionEndingPart } {\n        return this.endingIndexDict;\n    }\n    public get EndingParts(): RepetitionEndingPart[] {\n        return this.endingParts;\n    }\n    public get Visibles(): boolean[] {\n        return this.visibles;\n    }\n    public set Visibles(value: boolean[]) {\n        this.visibles = value;\n    }\n    public get DefaultNumberOfRepetitions(): number {\n        let defaultNumber: number = 2;\n        if (this.virtualOverallRepetition) { defaultNumber = 1; }\n        return Math.max(defaultNumber, Object.keys(this.endingIndexDict).length, this.checkRepetitionForMultipleLyricVerses());\n    }\n    public get UserNumberOfRepetitions(): number {\n        return this.userNumberOfRepetitions;\n    }\n    public set UserNumberOfRepetitions(value: number) {\n        this.userNumberOfRepetitions = value;\n        this.repetitonIterationOrder = [];\n        const endingsDiff: number = this.userNumberOfRepetitions - this.NumberOfEndings;\n        for (let i: number = 1; i <= this.userNumberOfRepetitions; i++) {\n            if (i <= endingsDiff) {\n                this.repetitonIterationOrder.push(1);\n            } else {\n                this.repetitonIterationOrder.push(i - endingsDiff);\n            }\n        }\n    }\n    public getForwardJumpTargetForIteration(iteration: number): number {\n        const endingIndex: number = this.repetitonIterationOrder[iteration - 1];\n        if (this.endingIndexDict[endingIndex]) {\n            return this.endingIndexDict[endingIndex].part.StartIndex;\n        }\n        return -1;\n    }\n    public getBackwardJumpTarget(): number {\n        return this.startMarker.measureIndex;\n    }\n    public SetEndingStartIndex(endingNumbers: number[], startIndex: number): void {\n        const part: RepetitionEndingPart = new RepetitionEndingPart(new SourceMusicPart(this.musicSheet2, startIndex, startIndex));\n        this.endingParts.push(part);\n        for (const endingNumber of endingNumbers) {\n            try {\n                this.endingIndexDict[endingNumber] = part;\n                part.endingIndices.push(endingNumber);\n                if (this.numberOfEndings < endingNumber) {\n                    this.numberOfEndings = endingNumber;\n                }\n            } catch (err) {\n                log.error(\"Repetition: Exception.\", err);\n            }\n\n        }\n    }\n    //public SetEndingStartIndex(endingNumber: number, startIndex: number): void {\n    //    let part: RepetitionEndingPart = new RepetitionEndingPart(new SourceMusicPart(this.musicSheet2, startIndex, startIndex));\n    //    this.endingParts.push(part);\n    //    this.endingIndexDict[endingNumber] = part;\n    //    part.endingIndices.push(endingNumber);\n    //    if (this.numberOfEndings < endingNumber) {\n    //        this.numberOfEndings = endingNumber;\n    //    }\n    //}\n    public setEndingEndIndex(endingNumber: number, endIndex: number): void {\n        if (this.endingIndexDict[endingNumber]) {\n            this.endingIndexDict[endingNumber].part.setEndIndex(endIndex);\n        }\n    }\n    public get NumberOfEndings(): number {\n        return this.numberOfEndings;\n    }\n    public get FromWords(): boolean {\n        return this.fromWords;\n    }\n    public set FromWords(value: boolean) {\n        this.fromWords = value;\n    }\n    public get AbsoluteTimestamp(): Fraction {\n        return Fraction.createFromFraction(this.musicSheet2.SourceMeasures[this.startMarker.measureIndex].AbsoluteTimestamp);\n    }\n    public get StartIndex(): number {\n        return this.startMarker.measureIndex;\n    }\n    public get EndIndex(): number {\n        if (this.BackwardJumpInstructions.length === 0) {\n            return this.StartIndex;\n        }\n        let result: number = this.backwardJumpInstructions[this.backwardJumpInstructions.length - 1].measureIndex;\n        if (this.endingIndexDict[this.NumberOfEndings]) {\n            result = Math.max(this.endingIndexDict[this.NumberOfEndings].part.EndIndex, result);\n        }\n        return result;\n    }\n    private checkRepetitionForMultipleLyricVerses(): number {\n        let lyricVerses: number = 0;\n        const start: number = this.StartIndex;\n        const end: number = this.EndIndex;\n        for (let measureIndex: number = start; measureIndex <= end; measureIndex++) {\n            const sourceMeasure: SourceMeasure = this.musicSheet2.SourceMeasures[measureIndex];\n            for (let i: number = 0; i < sourceMeasure.CompleteNumberOfStaves; i++) {\n                for (const sourceStaffEntry of sourceMeasure.VerticalSourceStaffEntryContainers[i].StaffEntries) {\n                    if (sourceStaffEntry) {\n                        let verses: number = 0;\n                        for (const voiceEntry of sourceStaffEntry.VoiceEntries) {\n                            verses += Object.keys(voiceEntry.LyricsEntries).length;\n                        }\n                        lyricVerses = Math.max(lyricVerses, verses);\n                    }\n                }\n            }\n        }\n        return lyricVerses;\n    }\n    public get FirstSourceMeasureNumber(): number {\n        return this.getFirstSourceMeasure().MeasureNumber;\n    }\n    public get LastSourceMeasureNumber(): number {\n        return this.getLastSourceMeasure().MeasureNumber;\n    }\n\n}\n\nexport class RepetitionEndingPart {\n    constructor(endingPart: SourceMusicPart) {\n        this.part = endingPart;\n    }\n    public part: SourceMusicPart;\n    public endingIndices: number[] = [];\n    public ToString(): string {\n      return this.endingIndices.join(\", \");\n    }\n}\n","import {PartListEntry} from \"./PartListEntry\";\nimport {Repetition} from \"./Repetition\";\nimport {Fraction} from \"../../Common/DataObjects/Fraction\";\nimport {MusicSheet} from \"../MusicSheet\";\n\nexport class SourceMusicPart extends PartListEntry {\n    constructor(musicSheet: MusicSheet, startIndex?: number, endIndex?: number) {\n        super(musicSheet);\n        this.musicSheet = musicSheet;\n        this.startIndex = startIndex;\n        this.endIndex = endIndex;\n    }\n\n    //protected musicSheet: MusicSheet;\n    protected parentRepetition: Repetition;\n    //private startIndex: number;\n    //private endIndex: number;\n\n    public get MeasuresCount(): number {\n        return this.endIndex - this.startIndex + 1;\n    }\n    public get StartIndex(): number {\n        return this.startIndex;\n    }\n    public get EndIndex(): number {\n        return this.endIndex;\n    }\n    public get ParentRepetition(): Repetition {\n        return this.parentRepetition;\n    }\n    public set ParentRepetition(value: Repetition) {\n        this.parentRepetition = value;\n    }\n    public get AbsoluteTimestamp(): Fraction {\n        return Fraction.createFromFraction(this.musicSheet.SourceMeasures[this.startIndex].AbsoluteTimestamp);\n    }\n    public setStartIndex(startIndex: number): void {\n        this.startIndex = startIndex;\n    }\n    public setEndIndex(index: number): void {\n        this.endIndex = index;\n    }\n}\n","// created from 'create-ts-index'\n\nexport * from \"./MappingSourceMusicPart\";\nexport * from \"./PartListEntry\";\nexport * from \"./Repetition\";\nexport * from \"./SourceMusicPart\";\n","import {Instrument} from \"../Instrument\";\nimport {MusicSheet} from \"../MusicSheet\";\nimport {VoiceGenerator} from \"./VoiceGenerator\";\nimport {Staff} from \"../VoiceData/Staff\";\nimport {SourceMeasure} from \"../VoiceData/SourceMeasure\";\nimport {SourceStaffEntry} from \"../VoiceData/SourceStaffEntry\";\nimport {ClefInstruction} from \"../VoiceData/Instructions/ClefInstruction\";\nimport {KeyInstruction} from \"../VoiceData/Instructions/KeyInstruction\";\nimport {RhythmInstruction} from \"../VoiceData/Instructions/RhythmInstruction\";\nimport {AbstractNotationInstruction} from \"../VoiceData/Instructions/AbstractNotationInstruction\";\nimport {Fraction} from \"../../Common/DataObjects/Fraction\";\nimport {IXmlElement} from \"../../Common/FileIO/Xml\";\nimport {ITextTranslation} from \"../Interfaces/ITextTranslation\";\nimport {MusicSheetReadingException} from \"../Exceptions\";\nimport {ClefEnum} from \"../VoiceData/Instructions/ClefInstruction\";\nimport {RhythmSymbolEnum} from \"../VoiceData/Instructions/RhythmInstruction\";\nimport {KeyEnum} from \"../VoiceData/Instructions/KeyInstruction\";\nimport {IXmlAttribute} from \"../../Common/FileIO/Xml\";\nimport {ChordSymbolContainer} from \"../VoiceData/ChordSymbolContainer\";\nimport log from \"loglevel\";\nimport {MidiInstrument} from \"../VoiceData/Instructions/ClefInstruction\";\nimport {ChordSymbolReader} from \"./MusicSymbolModules/ChordSymbolReader\";\nimport {ExpressionReader} from \"./MusicSymbolModules/ExpressionReader\";\nimport {RepetitionInstructionReader} from \"./MusicSymbolModules/RepetitionInstructionReader\";\nimport {SlurReader} from \"./MusicSymbolModules/SlurReader\";\nimport {StemDirectionType} from \"../VoiceData/VoiceEntry\";\nimport {NoteType, NoteTypeHandler} from \"../VoiceData/NoteType\";\nimport { SystemLinesEnumHelper } from \"../Graphical/SystemLinesEnum\";\nimport { ReaderPluginManager } from \"./ReaderPluginManager\";\n// import {Dictionary} from \"typescript-collections\";\n\n// FIXME: The following classes are missing\n//type ChordSymbolContainer = any;\n//type SlurReader = any;\n//type RepetitionInstructionReader = any;\n//declare class MusicSymbolModuleFactory {\n//  public static createSlurReader(x: any): any;\n//}\n//\n//class MetronomeReader {\n//  public static addMetronomeSettings(xmlNode: IXmlElement, musicSheet: MusicSheet): void { }\n//  public static readMetronomeInstructions(xmlNode: IXmlElement, musicSheet: MusicSheet, currentXmlMeasureIndex: number): void { }\n//  public static readTempoInstruction(soundNode: IXmlElement, musicSheet: MusicSheet, currentXmlMeasureIndex: number): void { }\n//}\n//\n//class ChordSymbolReader {\n//  public static readChordSymbol(xmlNode:IXmlElement, musicSheet:MusicSheet, activeKey:any): void {\n//  }\n//}\n\n\n/**\n * An InstrumentReader is used during the reading phase to keep parsing new measures from the MusicXML file\n * with the readNextXmlMeasure method.\n */\nexport class InstrumentReader {\n\n  constructor(pluginManager: ReaderPluginManager, repetitionInstructionReader: RepetitionInstructionReader,\n    xmlMeasureList: IXmlElement[], instrument: Instrument) {\n      this.repetitionInstructionReader = repetitionInstructionReader;\n      this.xmlMeasureList = xmlMeasureList;\n      this.musicSheet = instrument.GetMusicSheet;\n      this.instrument = instrument;\n      this.activeClefs = new Array(instrument.Staves.length);\n      this.activeClefsHaveBeenInitialized = new Array(instrument.Staves.length);\n      for (let i: number = 0; i < instrument.Staves.length; i++) {\n        this.activeClefsHaveBeenInitialized[i] = false;\n      }\n      this.createExpressionGenerators(instrument.Staves.length);\n      this.slurReader = new SlurReader(this.musicSheet);\n      this.pluginManager = pluginManager;\n  }\n\n  private repetitionInstructionReader: RepetitionInstructionReader;\n  private xmlMeasureList: IXmlElement[];\n  private musicSheet: MusicSheet;\n  private slurReader: SlurReader;\n  public pluginManager: ReaderPluginManager;\n  private instrument: Instrument;\n  private voiceGeneratorsDict: { [n: number]: VoiceGenerator } = {};\n  private staffMainVoiceGeneratorDict: { [staffId: number]: VoiceGenerator } = {};\n  private inSourceMeasureInstrumentIndex: number;\n  private divisions: number = 0;\n  private currentMeasure: SourceMeasure;\n  private previousMeasure: SourceMeasure;\n  private currentClefNumber: number = 1;\n  private currentXmlMeasureIndex: number = 0;\n  private currentStaff: Staff;\n  private currentStaffEntry: SourceStaffEntry;\n  private activeClefs: ClefInstruction[];\n  private activeKey: KeyInstruction;\n  private activeRhythm: RhythmInstruction;\n  private activeClefsHaveBeenInitialized: boolean[];\n  private activeKeyHasBeenInitialized: boolean = false;\n  private abstractInstructions: [number, AbstractNotationInstruction, Fraction][] = [];\n  private openChordSymbolContainers: ChordSymbolContainer[] = [];\n  private expressionReaders: ExpressionReader[];\n  private currentVoiceGenerator: VoiceGenerator;\n  //private openSlurDict: { [n: number]: Slur; } = {};\n  private maxTieNoteFraction: Fraction;\n  private currentMultirestStartMeasure: SourceMeasure;\n  private followingMultirestMeasures: number;\n\n  public get ActiveKey(): KeyInstruction {\n    return this.activeKey;\n  }\n\n  public get MaxTieNoteFraction(): Fraction {\n    return this.maxTieNoteFraction;\n  }\n\n  public get ActiveRhythm(): RhythmInstruction {\n    return this.activeRhythm;\n  }\n\n  public set ActiveRhythm(value: RhythmInstruction) {\n    this.activeRhythm = value;\n  }\n\n  /**\n   * Main CreateSheet: read the next XML Measure and save all data to the given [[SourceMeasure]].\n   * @param currentMeasure\n   * @param measureStartAbsoluteTimestamp - Using this instead of currentMeasure.AbsoluteTimestamp as it isn't set yet\n   * @param octavePlusOne Software like Guitar Pro gives one octave too low, so we need to add one\n   * @returns {boolean}\n   */\n  public readNextXmlMeasure(currentMeasure: SourceMeasure, measureStartAbsoluteTimestamp: Fraction, octavePlusOne: boolean): boolean {\n    if (this.currentXmlMeasureIndex >= this.xmlMeasureList.length) {\n      return false;\n    }\n    this.currentMeasure = currentMeasure;\n    this.followingMultirestMeasures = Math.max(this.followingMultirestMeasures - 1, 0);\n    this.inSourceMeasureInstrumentIndex = this.musicSheet.getGlobalStaffIndexOfFirstStaff(this.instrument);\n    if (this.repetitionInstructionReader) {\n     this.repetitionInstructionReader.prepareReadingMeasure(currentMeasure, this.currentXmlMeasureIndex);\n    }\n    let currentFraction: Fraction = new Fraction(0, 1);\n    let previousFraction: Fraction = new Fraction(0, 1);\n    let divisionsException: boolean = false;\n    this.maxTieNoteFraction = new Fraction(0, 1);\n    let lastNoteWasGrace: boolean = false;\n    try {\n      const measureNode: IXmlElement = this.xmlMeasureList[this.currentXmlMeasureIndex];\n      const xmlMeasureListArr: IXmlElement[] = measureNode.elements();\n      if (currentMeasure.Rules.UseXMLMeasureNumbers && !Number.isInteger(currentMeasure.MeasureNumberXML)) {\n        const measureNumberXml: number = parseInt(measureNode.attribute(\"number\")?.value, 10);\n        if (Number.isInteger(measureNumberXml)) {\n            currentMeasure.MeasureNumberXML = measureNumberXml;\n        }\n      }\n      let previousNode: IXmlElement; // needs a null check when accessed because of node index 0!\n      for (let xmlNodeIndex: number = 0; xmlNodeIndex < xmlMeasureListArr.length; xmlNodeIndex++) {\n        const xmlNode: IXmlElement = xmlMeasureListArr[xmlNodeIndex];\n        if (xmlNodeIndex > 0) {\n          previousNode = xmlMeasureListArr[xmlNodeIndex - 1];\n        }\n        if (xmlNode.name === \"print\") {\n          const newSystemAttr: IXmlAttribute = xmlNode.attribute(\"new-system\");\n          if (newSystemAttr?.value === \"yes\") {\n            currentMeasure.printNewSystemXml = true;\n          }\n          const newPageAttr: IXmlAttribute = xmlNode.attribute(\"new-page\");\n          if (newPageAttr?.value === \"yes\") {\n            currentMeasure.printNewPageXml = true;\n          }\n        } else if (xmlNode.name === \"note\") {\n          let printObject: boolean = true;\n          if (xmlNode.attribute(\"print-object\")?.value === \"no\") {\n              printObject = false; // note will not be rendered, but still parsed for Playback etc.\n              // if (xmlNode.attribute(\"print-spacing\")) {\n              //   if (xmlNode.attribute(\"print-spacing\").value === \"yes\" {\n              //     // TODO give spacing for invisible notes even when not displayed. might be hard with Vexflow formatting\n          }\n          let noteStaff: number = 1;\n          if (this.instrument.Staves.length > 1) {\n            if (xmlNode.element(\"staff\")) {\n              noteStaff = parseInt(xmlNode.element(\"staff\").value, 10);\n              if (isNaN(noteStaff)) {\n                log.debug(\"InstrumentReader.readNextXmlMeasure.get staff number\");\n                noteStaff = 1;\n              }\n            }\n          }\n\n          this.currentStaff = this.instrument.Staves[noteStaff - 1];\n          const isChord: boolean = xmlNode.element(\"chord\") !== undefined;\n          if (xmlNode.element(\"voice\")) {\n            const noteVoice: number = parseInt(xmlNode.element(\"voice\").value, 10);\n            this.currentVoiceGenerator = this.getOrCreateVoiceGenerator(noteVoice, noteStaff - 1);\n          } else {\n            if (!isChord || !this.currentVoiceGenerator) {\n              this.currentVoiceGenerator = this.getOrCreateVoiceGenerator(1, noteStaff - 1);\n            }\n          }\n          let noteDivisions: number = 0;\n          let noteDuration: Fraction = new Fraction(0, 1);\n          let normalNotes: number = 2;\n          let typeDuration: Fraction = undefined;\n          let isTuplet: boolean = false;\n          if (xmlNode.element(\"duration\")) {\n            noteDivisions = parseInt(xmlNode.element(\"duration\").value, 10);\n            if (!isNaN(noteDivisions)) {\n              noteDuration = new Fraction(noteDivisions, 4 * this.divisions);\n              if (noteDivisions === 0) {\n                noteDuration = this.getNoteDurationFromTypeNode(xmlNode);\n              } else {\n                typeDuration = this.getNoteDurationFromTypeNode(xmlNode);\n              }\n              if (xmlNode.element(\"time-modification\")) {\n                noteDuration = this.getNoteDurationForTuplet(xmlNode);\n                const time: IXmlElement = xmlNode.element(\"time-modification\");\n                if (time?.element(\"normal-notes\")) {\n                  normalNotes = parseInt(time.element(\"normal-notes\").value, 10);\n                }\n                isTuplet = true;\n              }\n            } else {\n              const errorMsg: string = ITextTranslation.translateText(\"ReaderErrorMessages/NoteDurationError\", \"Invalid Note Duration.\");\n              this.musicSheet.SheetErrors.pushMeasureError(errorMsg);\n              log.debug(\"InstrumentReader.readNextXmlMeasure\", errorMsg);\n              continue;\n            }\n          }\n\n          const restNote: boolean = xmlNode.element(\"rest\") !== undefined;\n          //log.info(\"New note found!\", noteDivisions, noteDuration.toString(), restNote);\n\n          const notationsNode: IXmlElement = xmlNode.element(\"notations\"); // used for multiple checks further on\n\n          const isGraceNote: boolean = xmlNode.element(\"grace\") !== undefined || noteDivisions === 0 || isChord && lastNoteWasGrace;\n          let graceNoteSlash: boolean = false;\n          let graceSlur: boolean = false;\n          if (isGraceNote) {\n            const graceNode: IXmlElement = xmlNode.element(\"grace\");\n            if (graceNode && graceNode.attributes()) {\n              if (graceNode.attribute(\"slash\")) {\n                const slash: string = graceNode.attribute(\"slash\").value;\n                if (slash === \"yes\") {\n                  graceNoteSlash = true;\n                }\n              }\n            }\n\n            noteDuration = this.getNoteDurationFromTypeNode(xmlNode);\n\n            const notationNode: IXmlElement = xmlNode.element(\"notations\");\n            if (notationNode) {\n              if (notationNode.element(\"slur\")) {\n                graceSlur = true;\n                // grace slurs could be non-binary, but VexFlow.GraceNoteGroup modifier system is currently only boolean for slurs.\n              }\n            }\n          }\n\n          // check for cue note\n          let isCueNote: boolean = false;\n          const cueNode: IXmlElement = xmlNode.element(\"cue\");\n          if (cueNode) {\n            isCueNote = true;\n          }\n          // alternative: check for <type size=\"cue\">\n          const typeNode: IXmlElement = xmlNode.element(\"type\");\n          let noteTypeXml: NoteType = NoteType.UNDEFINED;\n          if (typeNode) {\n            const sizeAttr: Attr = typeNode.attribute(\"size\");\n            if (sizeAttr?.value === \"cue\") {\n              isCueNote = true;\n            }\n            noteTypeXml = NoteTypeHandler.StringToNoteType(typeNode.value);\n          }\n\n          // check stem element\n          let stemDirectionXml: StemDirectionType = StemDirectionType.Undefined;\n          let stemColorXml: string;\n          const stemNode: IXmlElement = xmlNode.element(\"stem\");\n          if (stemNode) {\n            switch (stemNode.value) {\n              case \"down\":\n                stemDirectionXml = StemDirectionType.Down;\n                break;\n              case \"up\":\n                stemDirectionXml = StemDirectionType.Up;\n                break;\n              case \"double\":\n                stemDirectionXml = StemDirectionType.Double;\n                break;\n              case \"none\":\n                stemDirectionXml = StemDirectionType.None;\n                break;\n              default:\n                stemDirectionXml = StemDirectionType.Undefined;\n            }\n\n            const stemColorAttr: Attr = stemNode.attribute(\"color\");\n            if (stemColorAttr) { // can be null, maybe also undefined\n              stemColorXml = this.parseXmlColor(stemColorAttr.value);\n            }\n          }\n\n          // check Tremolo\n          let tremoloStrokes: number = 0;\n          let vibratoStrokes: boolean = false;\n          if (notationsNode) {\n            const ornamentsNode: IXmlElement = notationsNode.element(\"ornaments\");\n            if (ornamentsNode) {\n              const tremoloNode: IXmlElement = ornamentsNode.element(\"tremolo\");\n              if (tremoloNode) {\n                const tremoloType: Attr = tremoloNode.attribute(\"type\");\n                if (tremoloType && tremoloType.value === \"single\") {\n                  const tremoloStrokesGiven: number = parseInt(tremoloNode.value, 10);\n                  if (tremoloStrokesGiven > 0) {\n                    tremoloStrokes = tremoloStrokesGiven;\n                  }\n                }\n                // TODO implement type \"start\". Vexflow doesn't have tremolo beams yet though (shorter than normal beams)\n              }\n              const vibratoNode: IXmlElement = ornamentsNode.element(\"wavy-line\");\n              if (vibratoNode !== undefined) {\n                const vibratoType: Attr = vibratoNode.attribute(\"type\");\n                if (vibratoType && vibratoType.value === \"start\") {\n                  vibratoStrokes = true;\n                }\n              }\n            }\n          }\n\n          // check notehead/color\n          let noteheadColorXml: string;\n          const noteheadNode: IXmlElement = xmlNode.element(\"notehead\");\n          if (noteheadNode) {\n            const colorAttr: Attr = noteheadNode.attribute(\"color\");\n            if (colorAttr) {\n              noteheadColorXml = this.parseXmlColor(colorAttr.value);\n            }\n          }\n\n          let noteColorXml: string;\n          const noteColorAttr: Attr = xmlNode.attribute(\"color\");\n          if (noteColorAttr) { // can be undefined\n            noteColorXml = this.parseXmlColor(noteColorAttr.value);\n            if (!noteheadColorXml) {\n              noteheadColorXml = noteColorXml;\n            }\n            if (!stemColorXml) {\n              stemColorXml = noteColorXml;\n            }\n          }\n\n          let musicTimestamp: Fraction = currentFraction.clone();\n          if (isChord) {\n            musicTimestamp = previousFraction.clone();\n          }\n          this.currentStaffEntry = this.currentMeasure.findOrCreateStaffEntry(\n            musicTimestamp,\n            this.inSourceMeasureInstrumentIndex + noteStaff - 1,\n            this.currentStaff\n          ).staffEntry;\n          //log.info(\"currentStaffEntry\", this.currentStaffEntry, this.currentMeasure.VerticalSourceStaffEntryContainers.length);\n\n          if (!this.currentVoiceGenerator.hasVoiceEntry()\n            || (!isChord && !isGraceNote && !lastNoteWasGrace)\n            || (isGraceNote && !lastNoteWasGrace)\n            || (isGraceNote && !isChord)\n            || (!isGraceNote && lastNoteWasGrace)\n          ) {\n            this.currentVoiceGenerator.createVoiceEntry(musicTimestamp, this.currentStaffEntry, !restNote && !isGraceNote,\n                                                        isGraceNote, graceNoteSlash, graceSlur);\n          }\n          if (!isGraceNote && !isChord) {\n            previousFraction = currentFraction.clone();\n            currentFraction.Add(noteDuration);\n          }\n          if (\n            isChord &&\n            this.currentStaffEntry !== undefined &&\n            this.currentStaffEntry.ParentStaff !== this.currentStaff\n          ) {\n            this.currentStaffEntry = this.currentVoiceGenerator.checkForStaffEntryLink(\n              this.inSourceMeasureInstrumentIndex + noteStaff - 1, this.currentStaff, this.currentStaffEntry, this.currentMeasure\n            );\n          }\n          const beginOfMeasure: boolean = (\n            this.currentStaffEntry !== undefined &&\n            this.currentStaffEntry.Timestamp !== undefined &&\n            this.currentStaffEntry.Timestamp.Equals(new Fraction(0, 1)) && !this.currentStaffEntry.hasNotes()\n          );\n          this.saveAbstractInstructionList(this.instrument.Staves.length, beginOfMeasure);\n          if (this.openChordSymbolContainers.length !== 0) {\n            this.currentStaffEntry.ChordContainers = this.openChordSymbolContainers;\n            // TODO handle multiple chords on one note/staffentry\n            this.openChordSymbolContainers = [];\n          }\n          if (this.activeRhythm) {\n            // (*) this.musicSheet.SheetPlaybackSetting.Rhythm = this.activeRhythm.Rhythm;\n          }\n          if (!isTuplet && !isGraceNote) {\n            noteDuration = new Fraction(noteDivisions, 4 * this.divisions);\n          }\n          const dots: number = xmlNode.elements(\"dot\").length;\n          this.currentVoiceGenerator.read(\n            xmlNode, noteDuration, typeDuration, noteTypeXml, normalNotes, restNote,\n            this.currentStaffEntry, this.currentMeasure,\n            measureStartAbsoluteTimestamp,\n            this.maxTieNoteFraction, isChord, octavePlusOne,\n            printObject, isCueNote, isGraceNote, stemDirectionXml, tremoloStrokes, stemColorXml, noteheadColorXml,\n            vibratoStrokes, dots\n          );\n\n          // notationsNode created further up for multiple checks\n          if (notationsNode !== undefined && notationsNode.element(\"dynamics\")) {\n            const expressionReader: ExpressionReader = this.expressionReaders[this.readExpressionStaffNumber(xmlNode) - 1];\n            if (expressionReader) {\n             expressionReader.readExpressionParameters(\n               xmlNode, this.instrument, this.divisions, currentFraction, previousFraction, this.currentMeasure.MeasureNumber, false\n             );\n             expressionReader.read(\n               xmlNode, this.currentMeasure, previousFraction\n             );\n            }\n          }\n          lastNoteWasGrace = isGraceNote;\n        } else if (xmlNode.name === \"attributes\") {\n          const divisionsNode: IXmlElement = xmlNode.element(\"divisions\");\n          if (divisionsNode) {\n            this.divisions = parseInt(divisionsNode.value, 10);\n            if (isNaN(this.divisions)) {\n              const errorMsg: string = ITextTranslation.translateText(\"ReaderErrorMessages/DivisionError\",\n                                                                      \"Invalid divisions value at Instrument: \");\n              log.debug(\"InstrumentReader.readNextXmlMeasure\", errorMsg);\n              this.divisions = this.readDivisionsFromNotes();\n              if (this.divisions > 0) {\n                this.musicSheet.SheetErrors.push(errorMsg + this.instrument.Name);\n              } else {\n                divisionsException = true;\n                throw new MusicSheetReadingException(errorMsg + this.instrument.Name);\n              }\n            }\n          }\n          if (\n            !xmlNode.element(\"divisions\") &&\n            this.divisions === 0 &&\n            this.currentXmlMeasureIndex === 0\n          ) {\n            const errorMsg: string = ITextTranslation.translateText(\"ReaderErrorMessages/DivisionError\", \"Invalid divisions value at Instrument: \");\n            this.divisions = this.readDivisionsFromNotes();\n            if (this.divisions > 0) {\n              this.musicSheet.SheetErrors.push(errorMsg + this.instrument.Name);\n            } else {\n              divisionsException = true;\n              throw new MusicSheetReadingException(errorMsg + this.instrument.Name);\n            }\n          }\n          this.addAbstractInstruction(xmlNode, octavePlusOne, previousNode, currentFraction.clone());\n          if (currentFraction.Equals(new Fraction(0, 1)) &&\n            this.isAttributesNodeAtBeginOfMeasure(this.xmlMeasureList[this.currentXmlMeasureIndex], xmlNode)) {\n            this.saveAbstractInstructionList(this.instrument.Staves.length, true);\n          }\n          if (this.isAttributesNodeAtEndOfMeasure(this.xmlMeasureList[this.currentXmlMeasureIndex], xmlNode)) {\n            this.saveClefInstructionAtEndOfMeasure();\n          }\n          const staffDetailsNodes: IXmlElement[] = xmlNode.elements(\"staff-details\"); // there can be multiple, even if redundant. see #1041\n          for (const staffDetailsNode of staffDetailsNodes) {\n            const staffLinesNode: IXmlElement = staffDetailsNode.element(\"staff-lines\");\n            if (staffLinesNode) {\n              let staffNumber: number = 1;\n              const staffNumberAttr: Attr = staffDetailsNode.attribute(\"number\");\n              if (staffNumberAttr) {\n                staffNumber = parseInt(staffNumberAttr.value, 10);\n              }\n              this.instrument.Staves[staffNumber - 1].StafflineCount = parseInt(staffLinesNode.value, 10);\n            }\n          }\n          // check multi measure rest\n          const measureStyle: IXmlElement = xmlNode.element(\"measure-style\");\n          if (measureStyle) {\n            const multipleRest: IXmlElement = measureStyle.element(\"multiple-rest\");\n            if (multipleRest) {\n              // TODO: save multirest per staff info a dictionary, to display a partial multirest if multirest values across staffs differ.\n              //   this makes the code bulkier though, and for now we only draw multirests if the staffs have the same multirest lengths.\n              // if (!currentMeasure.multipleRestMeasuresPerStaff) {\n              //   currentMeasure.multipleRestMeasuresPerStaff = new Dictionary<number, number>();\n              // }\n              const multipleRestValueXml: string = multipleRest.value;\n              let multipleRestNumber: number = 0;\n              try {\n                multipleRestNumber = Number.parseInt(multipleRestValueXml, 10);\n                if (currentMeasure.multipleRestMeasures !== undefined && multipleRestNumber !== currentMeasure.multipleRestMeasures) {\n                  // different multi-rest values in same measure for different staffs\n                  currentMeasure.multipleRestMeasures = 0; // for now, ignore multirest here. TODO: take minimum\n                  // currentMeasure.multipleRestMeasuresPerStaff.setValue(this.currentStaff?.Id, multipleRestNumber);\n                  //   issue: currentStaff can be undefined for first measure\n                } else {\n                  currentMeasure.multipleRestMeasures = multipleRestNumber;\n                  this.currentMultirestStartMeasure = currentMeasure;\n                  this.followingMultirestMeasures = multipleRestNumber + 1; // will be decremented at the start of the loop\n                }\n              } catch (e) {\n                console.log(\"multirest parse error: \" + e);\n              }\n            }\n          }\n\n        } else if (xmlNode.name === \"forward\") {\n          const forFraction: number = parseInt(xmlNode.element(\"duration\").value, 10);\n          currentFraction.Add(new Fraction(forFraction, 4 * this.divisions));\n        } else if (xmlNode.name === \"backup\") {\n          const backFraction: number = parseInt(xmlNode.element(\"duration\").value, 10);\n          currentFraction.Sub(new Fraction(backFraction, 4 * this.divisions));\n          if (currentFraction.IsNegative()) {\n            currentFraction = new Fraction(0, 1);\n          }\n          previousFraction.Sub(new Fraction(backFraction, 4 * this.divisions));\n          if (previousFraction.IsNegative()) {\n            previousFraction = new Fraction(0, 1);\n          }\n        } else if (xmlNode.name === \"direction\") {\n          const directionTypeNode: IXmlElement = xmlNode.element(\"direction-type\");\n          // (*) MetronomeReader.readMetronomeInstructions(xmlNode, this.musicSheet, this.currentXmlMeasureIndex);\n          let relativePositionInMeasure: number = Math.min(1, currentFraction.RealValue);\n          if (this.activeRhythm !== undefined && this.activeRhythm.Rhythm) {\n            relativePositionInMeasure /= this.activeRhythm.Rhythm.RealValue;\n          }\n          let handeled: boolean = false;\n          if (this.repetitionInstructionReader) {\n            handeled = this.repetitionInstructionReader.handleRepetitionInstructionsFromWordsOrSymbols( directionTypeNode,\n                                                                                                        relativePositionInMeasure);\n          }\n          if (!handeled) {\n           let expressionReader: ExpressionReader = this.expressionReaders[0];\n           const staffIndex: number = this.readExpressionStaffNumber(xmlNode) - 1;\n           if (staffIndex < this.expressionReaders.length) {\n             expressionReader = this.expressionReaders[staffIndex];\n           }\n           if (expressionReader) {\n             if (directionTypeNode.element(\"octave-shift\")) {\n               expressionReader.readExpressionParameters(\n                 xmlNode, this.instrument, this.divisions, currentFraction, previousFraction, this.currentMeasure.MeasureNumber, true\n               );\n               expressionReader.addOctaveShift(xmlNode, this.currentMeasure, previousFraction.clone());\n             }\n             expressionReader.readExpressionParameters(\n               xmlNode, this.instrument, this.divisions, currentFraction, previousFraction, this.currentMeasure.MeasureNumber, false\n             );\n             expressionReader.read(xmlNode, this.currentMeasure, currentFraction, previousFraction.clone());\n           }\n          }\n        } else if (xmlNode.name === \"barline\") {\n          if (this.repetitionInstructionReader) {\n           const measureEndsSystem: boolean = this.repetitionInstructionReader.handleLineRepetitionInstructions(xmlNode);\n           if (measureEndsSystem) {\n             this.currentMeasure.HasEndLine = true;\n           }\n          }\n          const location: IXmlAttribute = xmlNode.attribute(\"location\");\n          const isEndingBarline: boolean = (xmlNodeIndex === xmlMeasureListArr.length - 1);\n          if (isEndingBarline || (location && location.value === \"right\")) {\n            const stringValue: string = xmlNode.element(\"bar-style\")?.value;\n            // TODO apparently we didn't anticipate bar-style not existing (the ? above was missing). how to handle?\n            if (stringValue) {\n              this.currentMeasure.endingBarStyleXml = stringValue;\n              this.currentMeasure.endingBarStyleEnum = SystemLinesEnumHelper.xmlBarlineStyleToSystemLinesEnum(stringValue);\n            }\n          }\n          // TODO do we need to process bars with left location too?\n        } else if (xmlNode.name === \"sound\") {\n          // (*) MetronomeReader.readTempoInstruction(xmlNode, this.musicSheet, this.currentXmlMeasureIndex);\n          try {\n            if (xmlNode.attribute(\"tempo\")) { // can be null, not just undefined!\n\n                const tempo: number = parseFloat(xmlNode.attribute(\"tempo\").value);\n\n                // should set the PlaybackSettings only at first Measure\n                if (this.currentXmlMeasureIndex === 0) {\n                    this.musicSheet.DefaultStartTempoInBpm = tempo;\n                    this.musicSheet.HasBPMInfo = true;\n                }\n            }\n          } catch (e) {\n            log.debug(\"InstrumentReader.readTempoInstruction\", e);\n          }\n        } else if (xmlNode.name === \"harmony\") {\n          // new chord, could be second chord on same staffentry/note\n          this.openChordSymbolContainers.push(ChordSymbolReader.readChordSymbol(xmlNode, this.musicSheet, this.activeKey));\n        }\n      }\n      for (const j in this.voiceGeneratorsDict) {\n        if (this.voiceGeneratorsDict.hasOwnProperty(j)) {\n          const voiceGenerator: VoiceGenerator = this.voiceGeneratorsDict[j];\n          voiceGenerator.checkForOpenBeam();\n        }\n      }\n      if (this.currentXmlMeasureIndex === this.xmlMeasureList.length - 1) {\n        for (let i: number = 0; i < this.instrument.Staves.length; i++) {\n          if (!this.activeClefsHaveBeenInitialized[i]) {\n            this.createDefaultClefInstruction(this.musicSheet.getGlobalStaffIndexOfFirstStaff(this.instrument) + i);\n          }\n        }\n        if (!this.activeKeyHasBeenInitialized) {\n          this.createDefaultKeyInstruction();\n        }\n\n        for (let i: number = 0; i < this.expressionReaders.length; i++) {\n         const reader: ExpressionReader = this.expressionReaders[i];\n         if (reader) {\n           reader.closeOpenExpressions(this.currentMeasure, currentFraction);\n          }\n        }\n      }\n\n      // if this is the first measure and no BPM info found, we set it to 120\n      // next measures will automatically inherit that value\n      if (!this.musicSheet.HasBPMInfo) {\n        this.currentMeasure.TempoInBPM = 120;\n      } else if (currentMeasure.TempoInBPM === 0 && this.previousMeasure) {\n        this.currentMeasure.TempoInBPM = this.previousMeasure.TempoInBPM;\n      }\n    } catch (e) {\n      if (divisionsException) {\n        throw new MusicSheetReadingException(e.Message);\n      }\n      const errorMsg: string = ITextTranslation.translateText(\"ReaderErrorMessages/MeasureError\", \"Error while reading Measure.\");\n      this.musicSheet.SheetErrors.pushMeasureError(errorMsg);\n      log.debug(\"InstrumentReader.readNextXmlMeasure\", errorMsg, e);\n    }\n\n    this.previousMeasure = this.currentMeasure;\n    this.currentXmlMeasureIndex += 1;\n    return true;\n  }\n\n  /** Parse a color in XML format. Can be #ARGB or #RGB format, colors as byte hex values.\n   *  @return color in Vexflow format #[A]RGB or undefined for invalid xmlColorString\n   */\n  public parseXmlColor(xmlColorString: string): string {\n    if (!xmlColorString) {\n      return undefined;\n    }\n\n    if (xmlColorString.length === 7) { // #RGB\n      return xmlColorString;\n    } else if (xmlColorString.length === 9) { // #ARGB\n      return \"#\" + xmlColorString.substr(3); // cut away alpha channel\n    } else {\n      return undefined; // invalid xml color\n    }\n  }\n\n  public doCalculationsAfterDurationHasBeenSet(): void {\n    for (const j in this.voiceGeneratorsDict) {\n      if (this.voiceGeneratorsDict.hasOwnProperty(j)) {\n        this.voiceGeneratorsDict[j].checkOpenTies();\n      }\n    }\n  }\n\n  /**\n   * Get or create the passing [[VoiceGenerator]].\n   * @param voiceId\n   * @param staffId\n   * @returns {VoiceGenerator}\n   */\n  private getOrCreateVoiceGenerator(voiceId: number, staffId: number): VoiceGenerator {\n    const staff: Staff = this.instrument.Staves[staffId];\n    let voiceGenerator: VoiceGenerator = this.voiceGeneratorsDict[voiceId];\n    if (voiceGenerator) {\n      if (staff.Voices.indexOf(voiceGenerator.GetVoice) === -1) {\n        staff.Voices.push(voiceGenerator.GetVoice);\n      }\n    } else {\n      const mainVoiceGenerator: VoiceGenerator = this.staffMainVoiceGeneratorDict[staffId];\n      if (mainVoiceGenerator) {\n        voiceGenerator = new VoiceGenerator(this.pluginManager, staff, voiceId, this.slurReader, mainVoiceGenerator.GetVoice);\n        staff.Voices.push(voiceGenerator.GetVoice);\n        this.voiceGeneratorsDict[voiceId] = voiceGenerator;\n      } else {\n        voiceGenerator = new VoiceGenerator(this.pluginManager, staff, voiceId, this.slurReader);\n        staff.Voices.push(voiceGenerator.GetVoice);\n        this.voiceGeneratorsDict[voiceId] = voiceGenerator;\n        this.staffMainVoiceGeneratorDict[staffId] = voiceGenerator;\n      }\n    }\n    return voiceGenerator;\n  }\n\n\n  private createExpressionGenerators(numberOfStaves: number): void {\n     this.expressionReaders = new Array(numberOfStaves);\n     for (let i: number = 0; i < numberOfStaves; i++) {\n      this.expressionReaders[i] = new ExpressionReader(this.musicSheet, this.instrument, i + 1);\n     }\n  }\n\n  /**\n   * Create the default [[ClefInstruction]] for the given staff index.\n   * @param staffIndex\n   */\n  private createDefaultClefInstruction(staffIndex: number): void {\n    let first: SourceMeasure;\n    if (this.musicSheet.SourceMeasures.length > 0) {\n      first = this.musicSheet.SourceMeasures[0];\n    } else {\n      first = this.currentMeasure;\n    }\n    const clefInstruction: ClefInstruction = new ClefInstruction(ClefEnum.G, 0, 2);\n    let firstStaffEntry: SourceStaffEntry;\n    if (!first.FirstInstructionsStaffEntries[staffIndex]) {\n      firstStaffEntry = new SourceStaffEntry(undefined, undefined);\n      first.FirstInstructionsStaffEntries[staffIndex] = firstStaffEntry;\n    } else {\n      firstStaffEntry = first.FirstInstructionsStaffEntries[staffIndex];\n      firstStaffEntry.removeFirstInstructionOfTypeClefInstruction();\n    }\n    clefInstruction.Parent = firstStaffEntry;\n    firstStaffEntry.Instructions.splice(0, 0, clefInstruction);\n  }\n\n  /**\n   * Create the default [[KeyInstruction]] in case no [[KeyInstruction]] is given in the whole [[Instrument]].\n   */\n  private createDefaultKeyInstruction(): void {\n    let first: SourceMeasure;\n    if (this.musicSheet.SourceMeasures.length > 0) {\n      first = this.musicSheet.SourceMeasures[0];\n    } else {\n      first = this.currentMeasure;\n    }\n    const keyInstruction: KeyInstruction = new KeyInstruction(undefined, 0, KeyEnum.major);\n    for (let j: number = this.inSourceMeasureInstrumentIndex; j < this.inSourceMeasureInstrumentIndex + this.instrument.Staves.length; j++) {\n      if (!first.FirstInstructionsStaffEntries[j]) {\n        const firstStaffEntry: SourceStaffEntry = new SourceStaffEntry(undefined, undefined);\n        first.FirstInstructionsStaffEntries[j] = firstStaffEntry;\n        keyInstruction.Parent = firstStaffEntry;\n        firstStaffEntry.Instructions.push(keyInstruction);\n      } else {\n        const firstStaffEntry: SourceStaffEntry = first.FirstInstructionsStaffEntries[j];\n        keyInstruction.Parent = firstStaffEntry;\n        firstStaffEntry.removeFirstInstructionOfTypeKeyInstruction();\n        if (firstStaffEntry.Instructions[0] instanceof ClefInstruction) {\n          firstStaffEntry.Instructions.splice(1, 0, keyInstruction);\n        } else {\n          firstStaffEntry.Instructions.splice(0, 0, keyInstruction);\n        }\n      }\n    }\n  }\n\n  /**\n   * Check if the given attributesNode is at the begin of a XmlMeasure.\n   * @param parentNode\n   * @param attributesNode\n   * @returns {boolean}\n   */\n  private isAttributesNodeAtBeginOfMeasure(parentNode: IXmlElement, attributesNode: IXmlElement): boolean {\n    const children: IXmlElement[] = parentNode.elements();\n    const attributesNodeIndex: number = children.indexOf(attributesNode); // FIXME | 0\n    if (attributesNodeIndex > 0 && children[attributesNodeIndex - 1].name === \"backup\") {\n      return true;\n    }\n    let firstNoteNodeIndex: number = -1;\n    for (let i: number = 0; i < children.length; i++) {\n      if (children[i].name === \"note\") {\n        firstNoteNodeIndex = i;\n        break;\n      }\n    }\n    return (attributesNodeIndex < firstNoteNodeIndex && firstNoteNodeIndex > 0) || (firstNoteNodeIndex < 0);\n  }\n\n  /**\n   * Check if the given attributesNode is at the end of a XmlMeasure.\n   * @param parentNode\n   * @param attributesNode\n   * @returns {boolean}\n   */\n  private isAttributesNodeAtEndOfMeasure(parentNode: IXmlElement, attributesNode: IXmlElement): boolean {\n    const childs: IXmlElement[] = parentNode.elements().slice(); // slice=arrayCopy\n    let attributesNodeIndex: number = 0;\n    for (let i: number = 0; i < childs.length; i++) {\n      if (childs[i] === attributesNode) {\n        attributesNodeIndex = i;\n        break;\n      }\n    }\n    let nextNoteNodeIndex: number = 0;\n    for (let i: number = attributesNodeIndex; i < childs.length; i++) {\n      if (childs[i].name === \"note\") {\n        nextNoteNodeIndex = i;\n        break;\n      }\n    }\n    return attributesNodeIndex > nextNoteNodeIndex;\n  }\n\n  /**\n   * Called only when no noteDuration is given in XML.\n   * @param xmlNode\n   * @returns {Fraction}\n   */\n  private getNoteDurationFromTypeNode(xmlNode: IXmlElement): Fraction {\n    const typeNode: IXmlElement = xmlNode.element(\"type\");\n    if (typeNode) {\n      const type: string = typeNode.value;\n      return NoteTypeHandler.getNoteDurationFromType(type);\n    }\n    return new Fraction(0, 4 * this.divisions);\n  }\n\n  /**\n   * Add (the three basic) Notation Instructions to a list\n   * @param attrNode\n   * @param guitarPro\n   */\n  private addAbstractInstruction(attrNode: IXmlElement, guitarPro: boolean, previousNode: IXmlElement, currentFraction: Fraction): void {\n    if (attrNode.element(\"divisions\")) {\n      if (attrNode.elements().length === 1) {\n        return;\n      }\n    }\n    const transposeNode: IXmlElement = attrNode.element(\"transpose\");\n    if (transposeNode) {\n      const chromaticNode: IXmlElement = transposeNode.element(\"chromatic\");\n      if (chromaticNode) {\n        this.instrument.PlaybackTranspose = parseInt(chromaticNode.value, 10);\n      }\n    }\n    const clefList: IXmlElement[] = attrNode.elements(\"clef\");\n    let errorMsg: string;\n    if (clefList.length > 0) {\n      for (let idx: number = 0, len: number = clefList.length; idx < len; ++idx) {\n        const nodeList: IXmlElement = clefList[idx];\n        let clefEnum: ClefEnum = ClefEnum.G;\n        let line: number = 2;\n        let staffNumber: number = 1;\n        let clefOctaveOffset: number = 0;\n        const lineNode: IXmlElement = nodeList.element(\"line\");\n        if (lineNode) {\n          try {\n            line = parseInt(lineNode.value, 10);\n          } catch (ex) {\n            errorMsg = ITextTranslation.translateText(\n              \"ReaderErrorMessages/ClefLineError\",\n              \"Invalid clef line given -> using default clef line.\"\n            );\n            this.musicSheet.SheetErrors.pushMeasureError(errorMsg);\n            line = 2;\n            log.debug(\"InstrumentReader.addAbstractInstruction\", errorMsg, ex);\n          }\n\n        }\n        const signNode: IXmlElement = nodeList.element(\"sign\");\n        if (signNode) {\n          try {\n            clefEnum = ClefEnum[signNode.value];\n            if (!ClefInstruction.isSupportedClef(clefEnum)) {\n              errorMsg = ITextTranslation.translateText(\n                \"ReaderErrorMessages/ClefError\",\n                \"Unsupported clef found -> using default clef.\"\n              );\n              this.musicSheet.SheetErrors.pushMeasureError(errorMsg);\n              clefEnum = ClefEnum.G;\n              line = 2;\n            }\n            if (clefEnum === ClefEnum.TAB) {\n              clefOctaveOffset = -1;\n            }\n          } catch (e) {\n            errorMsg = ITextTranslation.translateText(\n              \"ReaderErrorMessages/ClefError\",\n              \"Invalid clef found -> using default clef.\"\n            );\n            this.musicSheet.SheetErrors.pushMeasureError(errorMsg);\n            clefEnum = ClefEnum.G;\n            line = 2;\n            log.debug(\"InstrumentReader.addAbstractInstruction\", errorMsg, e);\n          }\n\n        }\n        const clefOctaveNode: IXmlElement = nodeList.element(\"clef-octave-change\");\n        if (clefOctaveNode) {\n          try {\n            clefOctaveOffset = parseInt(clefOctaveNode.value, 10);\n          } catch (e) {\n            errorMsg = ITextTranslation.translateText(\n              \"ReaderErrorMessages/ClefOctaveError\",\n              \"Invalid clef octave found -> using default clef octave.\"\n            );\n            this.musicSheet.SheetErrors.pushMeasureError(errorMsg);\n            clefOctaveOffset = 0;\n          }\n\n        }\n        if (nodeList.hasAttributes && nodeList.attribute(\"number\")) {\n          try {\n            staffNumber = parseInt(nodeList.attribute(\"number\").value, 10);\n            if (staffNumber > this.currentClefNumber) {\n              staffNumber = this.currentClefNumber;\n            }\n            this.currentClefNumber = staffNumber + 1;\n          } catch (err) {\n            errorMsg = ITextTranslation.translateText(\n              \"ReaderErrorMessages/ClefError\",\n              \"Invalid clef found -> using default clef.\"\n            );\n            this.musicSheet.SheetErrors.pushMeasureError(errorMsg);\n            staffNumber = 1;\n            this.currentClefNumber = staffNumber + 1;\n          }\n        }\n\n        const clefInstruction: ClefInstruction = new ClefInstruction(clefEnum, clefOctaveOffset, line);\n        this.abstractInstructions.push([staffNumber, clefInstruction, currentFraction]);\n      }\n    }\n    if (attrNode.element(\"key\") !== undefined && this.instrument.MidiInstrumentId !== MidiInstrument.Percussion) {\n      let key: number = 0;\n      const keyNode: IXmlElement = attrNode.element(\"key\").element(\"fifths\");\n      if (keyNode) {\n        try {\n          key = parseInt(keyNode.value, 10);\n        } catch (ex) {\n          errorMsg = ITextTranslation.translateText(\n            \"ReaderErrorMessages/KeyError\",\n            \"Invalid key found -> set to default.\"\n          );\n          this.musicSheet.SheetErrors.pushMeasureError(errorMsg);\n          key = 0;\n          log.debug(\"InstrumentReader.addAbstractInstruction\", errorMsg, ex);\n        }\n\n      }\n      let keyEnum: KeyEnum = KeyEnum.none;\n      let modeNode: IXmlElement = attrNode.element(\"key\");\n      if (modeNode) {\n        modeNode = modeNode.element(\"mode\");\n      }\n      if (modeNode) {\n        try {\n          keyEnum = KeyEnum[modeNode.value];\n        } catch (ex) {\n          errorMsg = ITextTranslation.translateText(\n            \"ReaderErrorMessages/KeyError\",\n            \"Invalid key found -> set to default.\"\n          );\n          this.musicSheet.SheetErrors.pushMeasureError(errorMsg);\n          keyEnum = KeyEnum.major;\n          log.debug(\"InstrumentReader.addAbstractInstruction\", errorMsg, ex);\n        }\n      }\n      const keyInstruction: KeyInstruction = new KeyInstruction(undefined, key, keyEnum);\n      this.abstractInstructions.push([1, keyInstruction, currentFraction]);\n    }\n    if (attrNode.element(\"time\")) {\n      const timeNode: IXmlElement = attrNode.element(\"time\");\n      let symbolEnum: RhythmSymbolEnum = RhythmSymbolEnum.NONE;\n      let timePrintObject: boolean = true;\n      if (timeNode !== undefined && timeNode.hasAttributes) {\n        const symbolAttribute: IXmlAttribute = timeNode.attribute(\"symbol\");\n        if (symbolAttribute) {\n          if (symbolAttribute.value === \"common\") {\n            symbolEnum = RhythmSymbolEnum.COMMON;\n          } else if (symbolAttribute.value === \"cut\") {\n            symbolEnum = RhythmSymbolEnum.CUT;\n          }\n        }\n\n        const printObjectAttribute: IXmlAttribute = timeNode.attribute(\"print-object\");\n        if (printObjectAttribute) {\n          if (printObjectAttribute.value === \"no\") {\n            timePrintObject = false;\n          }\n        }\n      }\n\n      let num: number = 0;\n      let denom: number = 0;\n      const senzaMisura: boolean = (timeNode && timeNode.element(\"senza-misura\") !== undefined);\n      const timeList: IXmlElement[] = attrNode.elements(\"time\");\n      const beatsList: IXmlElement[] = [];\n      const typeList: IXmlElement[] = [];\n      for (let idx: number = 0, len: number = timeList.length; idx < len; ++idx) {\n        const xmlNode: IXmlElement = timeList[idx];\n        beatsList.push.apply(beatsList, xmlNode.elements(\"beats\"));\n        typeList.push.apply(typeList, xmlNode.elements(\"beat-type\"));\n      }\n      if (!senzaMisura) {\n        try {\n          if (beatsList !== undefined && beatsList.length > 0 && typeList !== undefined && beatsList.length === typeList.length) {\n            const length: number = beatsList.length;\n            const fractions: Fraction[] = new Array(length);\n            let maxDenom: number = 0;\n            for (let i: number = 0; i < length; i++) {\n              const s: string = beatsList[i].value;\n              let n: number = 0;\n              let d: number = 0;\n              if (s.indexOf(\"+\") !== -1) {\n                const numbers: string[] = s.split(\"+\");\n                for (let idx: number = 0, len: number = numbers.length; idx < len; ++idx) {\n                  n += parseInt(numbers[idx], 10);\n                }\n              } else {\n                n = parseInt(s, 10);\n              }\n              d = parseInt(typeList[i].value, 10);\n              maxDenom = Math.max(maxDenom, d);\n              fractions[i] = new Fraction(n, d, 0, false);\n            }\n            for (let i: number = 0; i < length; i++) {\n              if (fractions[i].Denominator === maxDenom) {\n                num += fractions[i].Numerator;\n              } else {\n                num += (maxDenom / fractions[i].Denominator) * fractions[i].Numerator;\n              }\n            }\n            denom = maxDenom;\n          } else {\n            num = parseInt(attrNode.element(\"time\").element(\"beats\").value, 10);\n            denom = parseInt(attrNode.element(\"time\").element(\"beat-type\").value, 10);\n          }\n        } catch (ex) {\n          errorMsg = ITextTranslation.translateText(\"ReaderErrorMessages/RhythmError\", \"Invalid rhythm found -> set to default.\");\n          this.musicSheet.SheetErrors.pushMeasureError(errorMsg);\n          num = 4;\n          denom = 4;\n          log.debug(\"InstrumentReader.addAbstractInstruction\", errorMsg, ex);\n        }\n\n        const newRhythmInstruction: RhythmInstruction = new RhythmInstruction(\n          new Fraction(num, denom, 0, false), symbolEnum\n        );\n        newRhythmInstruction.PrintObject = timePrintObject;\n        this.abstractInstructions.push([1, newRhythmInstruction, currentFraction]);\n      } else {\n        this.abstractInstructions.push([1, new RhythmInstruction(new Fraction(4, 4, 0, false), RhythmSymbolEnum.NONE), currentFraction]);\n      }\n    }\n  }\n\n  /**\n   * Save the current AbstractInstructions to the corresponding [[StaffEntry]]s.\n   * @param numberOfStaves\n   * @param beginOfMeasure\n   */\n  private saveAbstractInstructionList(numberOfStaves: number, beginOfMeasure: boolean): void {\n    for (let i: number = this.abstractInstructions.length - 1; i >= 0; i--) {\n      const instruction: [number, AbstractNotationInstruction, Fraction] = this.abstractInstructions[i];\n      const key: number = instruction[0]; // staffNumber\n      const value: AbstractNotationInstruction = instruction[1];\n      const instructionTimestamp: Fraction = instruction[2];\n      if (value instanceof ClefInstruction) {\n        const clefInstruction: ClefInstruction = <ClefInstruction>value;\n        if (this.currentXmlMeasureIndex === 0 || (key <= this.activeClefs.length && clefInstruction !== this.activeClefs[key - 1])) {\n          if (!beginOfMeasure && this.currentStaffEntry !== undefined && !this.currentStaffEntry.hasNotes() &&\n            key - 1 === this.instrument.Staves.indexOf(this.currentStaffEntry.ParentStaff)) {\n            const newClefInstruction: ClefInstruction = clefInstruction;\n            const staffEntry: SourceStaffEntry = this.currentStaffEntry;\n            // the instructionTimestamp may differ from the current staffentry's when backup/forward tags are used in the XML.\n            //   in this case, we need to skip placing it at the current entry, and save it for later.\n            if (instructionTimestamp && Math.abs(instructionTimestamp.RealValue - staffEntry.Timestamp.RealValue) > 0.01) {\n              continue; // this instruction should be at a different staffentry/timestamp.\n            }\n            newClefInstruction.Parent = staffEntry;\n            staffEntry.removeFirstInstructionOfTypeClefInstruction();\n            staffEntry.Instructions.push(newClefInstruction);\n            this.activeClefs[key - 1] = clefInstruction;\n            this.abstractInstructions.splice(i, 1);\n          } else if (beginOfMeasure) {\n            if (instructionTimestamp.RealValue !== 0) {\n              continue;\n            }\n            let firstStaffEntry: SourceStaffEntry;\n            if (this.currentMeasure) {\n              const newClefInstruction: ClefInstruction = clefInstruction;\n              const sseIndex: number = this.inSourceMeasureInstrumentIndex + key - 1;\n              const firstSse: SourceStaffEntry = this.currentMeasure.FirstInstructionsStaffEntries[sseIndex];\n              if (this.currentXmlMeasureIndex === 0) {\n                if (!firstSse) {\n                  firstStaffEntry = new SourceStaffEntry(undefined, undefined);\n                  this.currentMeasure.FirstInstructionsStaffEntries[sseIndex] = firstStaffEntry;\n                  newClefInstruction.Parent = firstStaffEntry;\n                  firstStaffEntry.Instructions.push(newClefInstruction);\n                  this.activeClefsHaveBeenInitialized[key - 1] = true;\n                } else if (this.currentMeasure.FirstInstructionsStaffEntries[sseIndex]\n                  !==\n                  undefined && !(firstSse.Instructions[0] instanceof ClefInstruction)) {\n                  firstStaffEntry = firstSse;\n                  newClefInstruction.Parent = firstStaffEntry;\n                  firstStaffEntry.removeFirstInstructionOfTypeClefInstruction();\n                  firstStaffEntry.Instructions.splice(0, 0, newClefInstruction);\n                  this.activeClefsHaveBeenInitialized[key - 1] = true;\n                } else {\n                  const lastStaffEntry: SourceStaffEntry = new SourceStaffEntry(undefined, undefined);\n                  this.currentMeasure.LastInstructionsStaffEntries[sseIndex] = lastStaffEntry;\n                  newClefInstruction.Parent = lastStaffEntry;\n                  lastStaffEntry.Instructions.push(newClefInstruction);\n                }\n              } else if (!this.activeClefsHaveBeenInitialized[key - 1]) {\n                const first: SourceMeasure = this.musicSheet.SourceMeasures[0];\n                if (!first.FirstInstructionsStaffEntries[sseIndex]) {\n                  firstStaffEntry = new SourceStaffEntry(undefined, undefined);\n                } else {\n                  firstStaffEntry = first.FirstInstructionsStaffEntries[sseIndex];\n                  firstStaffEntry.removeFirstInstructionOfTypeClefInstruction();\n                }\n                newClefInstruction.Parent = firstStaffEntry;\n                firstStaffEntry.Instructions.splice(0, 0, newClefInstruction);\n                this.activeClefsHaveBeenInitialized[key - 1] = true;\n              } else {\n                let previousPrintedMeasure: SourceMeasure = this.previousMeasure;\n                if (this.followingMultirestMeasures > 0 && this.currentMeasure.Rules.RenderMultipleRestMeasures) {\n                  previousPrintedMeasure = this.currentMultirestStartMeasure;\n                  // TODO check if we can do the same for autogenerated multirest measures\n                }\n                const lastStaffEntry: SourceStaffEntry = new SourceStaffEntry(undefined, undefined);\n                previousPrintedMeasure.LastInstructionsStaffEntries[sseIndex] = lastStaffEntry;\n                newClefInstruction.Parent = lastStaffEntry;\n                lastStaffEntry.Instructions.push(newClefInstruction);\n              }\n              this.activeClefs[key - 1] = clefInstruction;\n              this.abstractInstructions.splice(i, 1);\n            }\n          } else {\n            let lastStaffEntryBefore: SourceStaffEntry;\n            const duration: Fraction = this.activeRhythm.Rhythm;\n            if (duration.RealValue > 0 &&\n              instructionTimestamp.RealValue / duration.RealValue > 0.90) {\n                if (!this.currentMeasure.LastInstructionsStaffEntries[key - 1]) {\n                  this.currentMeasure.LastInstructionsStaffEntries[key - 1] = new SourceStaffEntry(undefined, this.instrument.Staves[key - 1]);\n                }\n                lastStaffEntryBefore = this.currentMeasure.LastInstructionsStaffEntries[key - 1];\n            }\n            // TODO figure out a more elegant way to do this. (see #1120)\n            //   the problem is that not all the staffentries in the measure exist yet,\n            //   so we can't put the clefInstruction before the correct note.\n            //   (if we try that, it's one note too early -> save instruction for later?)\n            //let lastTimestampBefore: Fraction;\n            // for (const vssec of this.currentMeasure.VerticalSourceStaffEntryContainers) {\n            //   for (const sse of vssec.StaffEntries) {\n            //     if (sse?.ParentStaff?.Id !== key) {\n            //       continue;\n            //     }\n            //     // if (!lastTimestampBefore || sse.Timestamp.lte(instructionTimestamp)) {\n            //     //   lastTimestampBefore = sse.Timestamp;\n            //     //   lastStaffEntryBefore = sse;\n            //     // } else {\n            //     //   lastStaffEntryBefore = sse;\n            //     //   break;\n            //     // }\n            //     if (sse.Timestamp.gte(instructionTimestamp)) {\n            //       lastStaffEntryBefore = sse;\n            //       break;\n            //     }\n            //   }\n            // }\n            //const sseIndex: number = this.inSourceMeasureInstrumentIndex + staffNumber - 1;\n            // if (!lastStaffEntryBefore) {\n            //   // this doesn't work for some reason\n            //   const newContainer: VerticalSourceStaffEntryContainer = new VerticalSourceStaffEntryContainer(this.currentMeasure, instructionTimestamp, 1);\n            //   const newStaffEntry: SourceStaffEntry = new SourceStaffEntry(newContainer, this.instrument.Staves[key - 1]);\n            //   newContainer.StaffEntries.push(newStaffEntry);\n            //   this.currentMeasure.VerticalSourceStaffEntryContainers.push(newContainer);\n            //   lastStaffEntryBefore = newStaffEntry;\n            // }\n            // if (!lastStaffEntryBefore) {\n              //   lastStaffEntryBefore = new SourceStaffEntry(undefined, undefined);\n              //   this.currentMeasure.LastInstructionsStaffEntries[sseIndex] = lastStaffEntryBefore;\n              // }\n            if (lastStaffEntryBefore) {\n              clefInstruction.Parent = lastStaffEntryBefore;\n              lastStaffEntryBefore.Instructions.push(clefInstruction);\n              this.activeClefs[key - 1] = clefInstruction;\n              this.abstractInstructions.splice(i, 1);\n            } // else clefinstruction might be processed later (e.g. Haydn Concertante measure 314)\n          }\n        } else if (key <= this.activeClefs.length && clefInstruction === this.activeClefs[key - 1]) {\n          this.abstractInstructions.splice(i, 1);\n        }\n      }\n      if (value instanceof KeyInstruction) {\n        const keyInstruction: KeyInstruction = <KeyInstruction>value;\n        if (!this.activeKey || this.activeKey.Key !== keyInstruction.Key) {\n          this.activeKey = keyInstruction;\n          this.abstractInstructions.splice(i, 1);\n          let sourceMeasure: SourceMeasure;\n          if (!this.activeKeyHasBeenInitialized) {\n            this.activeKeyHasBeenInitialized = true;\n            if (this.currentXmlMeasureIndex > 0) {\n              sourceMeasure = this.musicSheet.SourceMeasures[0];\n            } else {\n              sourceMeasure = this.currentMeasure;\n            }\n          } else {\n            sourceMeasure = this.currentMeasure;\n          }\n          if (sourceMeasure) {\n            for (let j: number = this.inSourceMeasureInstrumentIndex; j < this.inSourceMeasureInstrumentIndex + numberOfStaves; j++) {\n              const newKeyInstruction: KeyInstruction = keyInstruction;\n              if (!sourceMeasure.FirstInstructionsStaffEntries[j]) {\n                const firstStaffEntry: SourceStaffEntry = new SourceStaffEntry(undefined, undefined);\n                sourceMeasure.FirstInstructionsStaffEntries[j] = firstStaffEntry;\n                newKeyInstruction.Parent = firstStaffEntry;\n                firstStaffEntry.Instructions.push(newKeyInstruction);\n              } else {\n                const firstStaffEntry: SourceStaffEntry = sourceMeasure.FirstInstructionsStaffEntries[j];\n                newKeyInstruction.Parent = firstStaffEntry;\n                firstStaffEntry.removeFirstInstructionOfTypeKeyInstruction();\n                if (firstStaffEntry.Instructions.length === 0) {\n                  firstStaffEntry.Instructions.push(newKeyInstruction);\n                } else {\n                  if (firstStaffEntry.Instructions[0] instanceof ClefInstruction) {\n                    firstStaffEntry.Instructions.splice(1, 0, newKeyInstruction);\n                  } else {\n                    firstStaffEntry.Instructions.splice(0, 0, newKeyInstruction);\n                  }\n                }\n              }\n            }\n          }\n        } else {\n          this.abstractInstructions.splice(i, 1);\n        }\n      }\n      if (value instanceof RhythmInstruction) {\n        const rhythmInstruction: RhythmInstruction = <RhythmInstruction>value;\n        if (!this.activeRhythm || this.activeRhythm !== rhythmInstruction) {\n          this.activeRhythm = rhythmInstruction;\n          this.abstractInstructions.splice(i, 1);\n          if (this.currentMeasure) {\n            for (let j: number = this.inSourceMeasureInstrumentIndex; j < this.inSourceMeasureInstrumentIndex + numberOfStaves; j++) {\n              const newRhythmInstruction: RhythmInstruction = rhythmInstruction;\n              let firstStaffEntry: SourceStaffEntry;\n              if (!this.currentMeasure.FirstInstructionsStaffEntries[j]) {\n                firstStaffEntry = new SourceStaffEntry(undefined, undefined);\n                this.currentMeasure.FirstInstructionsStaffEntries[j] = firstStaffEntry;\n              } else {\n                firstStaffEntry = this.currentMeasure.FirstInstructionsStaffEntries[j];\n                firstStaffEntry.removeFirstInstructionOfTypeRhythmInstruction();\n              }\n              newRhythmInstruction.Parent = firstStaffEntry;\n              firstStaffEntry.Instructions.push(newRhythmInstruction);\n            }\n          }\n        } else {\n          this.abstractInstructions.splice(i, 1);\n        }\n      }\n    }\n  }\n\n  /**\n   * Save any ClefInstruction given - exceptionally - at the end of the currentMeasure.\n   */\n  private saveClefInstructionAtEndOfMeasure(): void {\n    for (let i: number = this.abstractInstructions.length - 1; i >= 0; i--) {\n      const key: number = this.abstractInstructions[i][0];\n      const value: AbstractNotationInstruction = this.abstractInstructions[i][1];\n      if (value instanceof ClefInstruction) {\n        const clefInstruction: ClefInstruction = <ClefInstruction>value;\n        if (\n          (!this.activeClefs[key - 1]) ||\n          (clefInstruction.ClefType !== this.activeClefs[key - 1].ClefType || (\n            clefInstruction.ClefType === this.activeClefs[key - 1].ClefType &&\n            clefInstruction.Line !== this.activeClefs[key - 1].Line\n          ))) {\n          const lastStaffEntry: SourceStaffEntry = new SourceStaffEntry(undefined, undefined);\n          this.currentMeasure.LastInstructionsStaffEntries[this.inSourceMeasureInstrumentIndex + key - 1] = lastStaffEntry;\n          const newClefInstruction: ClefInstruction = clefInstruction;\n          newClefInstruction.Parent = lastStaffEntry;\n          lastStaffEntry.Instructions.push(newClefInstruction);\n          this.activeClefs[key - 1] = clefInstruction;\n          this.abstractInstructions.splice(i, 1);\n        }\n      }\n    }\n  }\n\n  /**\n   * In case of a [[Tuplet]], read NoteDuration from type.\n   * @param xmlNode\n   * @returns {Fraction}\n   */\n  private getNoteDurationForTuplet(xmlNode: IXmlElement): Fraction {\n    let duration: Fraction = new Fraction(0, 1);\n    const typeDuration: Fraction = this.getNoteDurationFromTypeNode(xmlNode);\n    if (xmlNode.element(\"time-modification\")) {\n      const time: IXmlElement = xmlNode.element(\"time-modification\");\n      if (time) {\n        if (time.element(\"actual-notes\") !== undefined && time.element(\"normal-notes\")) {\n          const actualNotes: IXmlElement = time.element(\"actual-notes\");\n          const normalNotes: IXmlElement = time.element(\"normal-notes\");\n          if (actualNotes !== undefined && normalNotes) {\n            const actual: number = parseInt(actualNotes.value, 10);\n            const normal: number = parseInt(normalNotes.value, 10);\n            duration = new Fraction(normal * typeDuration.Numerator, actual * typeDuration.Denominator);\n          }\n        }\n      }\n    }\n    return duration;\n  }\n\n  private readExpressionStaffNumber(xmlNode: IXmlElement): number {\n   let directionStaffNumber: number = 1;\n   if (xmlNode.element(\"staff\")) {\n     const staffNode: IXmlElement = xmlNode.element(\"staff\");\n     if (staffNode) {\n       try {\n         directionStaffNumber = parseInt(staffNode.value, 10);\n       } catch (ex) {\n         const errorMsg: string = ITextTranslation.translateText(\n           \"ReaderErrorMessages/ExpressionStaffError\", \"Invalid Expression staff number -> set to default.\"\n         );\n         this.musicSheet.SheetErrors.pushMeasureError(errorMsg);\n         directionStaffNumber = 1;\n         log.debug(\"InstrumentReader.readExpressionStaffNumber\", errorMsg, ex);\n       }\n\n     }\n   }\n   return directionStaffNumber;\n  }\n\n  /**\n   * Calculate the divisions value from the type and duration of the first MeasureNote that makes sense\n   * (meaning itself hasn't any errors and it doesn't belong to a [[Tuplet]]).\n   *\n   * If all the MeasureNotes belong to a [[Tuplet]], then we read the next XmlMeasure (and so on...).\n   * If we have reached the end of the [[Instrument]] and still the divisions aren't set, we throw an exception\n   * @returns {number}\n   */\n  private readDivisionsFromNotes(): number {\n    let divisionsFromNote: number = 0;\n    let xmlMeasureIndex: number = this.currentXmlMeasureIndex;\n    let read: boolean = false;\n    while (!read) {\n      const xmlMeasureListArr: IXmlElement[] = this.xmlMeasureList[xmlMeasureIndex].elements();\n      for (let idx: number = 0, len: number = xmlMeasureListArr.length; idx < len; ++idx) {\n        const xmlNode: IXmlElement = xmlMeasureListArr[idx];\n        if (xmlNode.name === \"note\" && !xmlNode.element(\"time-modification\")) {\n          const durationNode: IXmlElement = xmlNode.element(\"duration\");\n          const typeNode: IXmlElement = xmlNode.element(\"type\");\n          if (durationNode !== undefined && typeNode) {\n            const type: string = typeNode.value;\n            let noteDuration: number = 0;\n            try {\n              noteDuration = parseInt(durationNode.value, 10);\n            } catch (ex) {\n              log.debug(\"InstrumentReader.readDivisionsFromNotes\", ex);\n              continue;\n            }\n\n            switch (type) {\n              case \"1024th\":\n                divisionsFromNote = (noteDuration / 4) * 1024;\n                break;\n              case \"512th\":\n                divisionsFromNote = (noteDuration / 4) * 512;\n                break;\n              case \"256th\":\n                divisionsFromNote = (noteDuration / 4) * 256;\n                break;\n              case \"128th\":\n                divisionsFromNote = (noteDuration / 4) * 128;\n                break;\n              case \"64th\":\n                divisionsFromNote = (noteDuration / 4) * 64;\n                break;\n              case \"32nd\":\n                divisionsFromNote = (noteDuration / 4) * 32;\n                break;\n              case \"16th\":\n                divisionsFromNote = (noteDuration / 4) * 16;\n                break;\n              case \"eighth\":\n                divisionsFromNote = (noteDuration / 4) * 8;\n                break;\n              case \"quarter\":\n                divisionsFromNote = (noteDuration / 4) * 4;\n                break;\n              case \"half\":\n                divisionsFromNote = (noteDuration / 4) * 2;\n                break;\n              case \"whole\":\n                divisionsFromNote = (noteDuration / 4);\n                break;\n              case \"breve\":\n                divisionsFromNote = (noteDuration / 4) / 2;\n                break;\n              case \"long\":\n                divisionsFromNote = (noteDuration / 4) / 4;\n                break;\n              case \"maxima\":\n                divisionsFromNote = (noteDuration / 4) / 8;\n                break;\n              default:\n                break;\n            }\n          }\n        }\n        if (divisionsFromNote > 0) {\n          read = true;\n          break;\n        }\n      }\n      if (divisionsFromNote === 0) {\n        xmlMeasureIndex++;\n        if (xmlMeasureIndex === this.xmlMeasureList.length) {\n          const errorMsg: string = ITextTranslation.translateText(\"ReaderErrorMEssages/DivisionsError\", \"Invalid divisions value at Instrument: \");\n          throw new MusicSheetReadingException(errorMsg + this.instrument.Name);\n        }\n      }\n    }\n    return divisionsFromNote;\n  }\n}\n","import {MusicSheet} from \"../MusicSheet\";\nimport {SourceMeasure} from \"../VoiceData/SourceMeasure\";\nimport {Fraction} from \"../../Common/DataObjects/Fraction\";\nimport {InstrumentReader} from \"./InstrumentReader\";\nimport {IXmlElement} from \"../../Common/FileIO/Xml\";\nimport {Instrument} from \"../Instrument\";\nimport {ITextTranslation} from \"../Interfaces/ITextTranslation\";\nimport {MusicSheetReadingException} from \"../Exceptions\";\nimport log from \"loglevel\";\nimport {IXmlAttribute} from \"../../Common/FileIO/Xml\";\nimport {RhythmInstruction} from \"../VoiceData/Instructions/RhythmInstruction\";\nimport {RhythmSymbolEnum} from \"../VoiceData/Instructions/RhythmInstruction\";\nimport {SourceStaffEntry} from \"../VoiceData/SourceStaffEntry\";\nimport {VoiceEntry} from \"../VoiceData/VoiceEntry\";\nimport {InstrumentalGroup} from \"../InstrumentalGroup\";\nimport {SubInstrument} from \"../SubInstrument\";\nimport {MidiInstrument} from \"../VoiceData/Instructions/ClefInstruction\";\nimport {AbstractNotationInstruction} from \"../VoiceData/Instructions/AbstractNotationInstruction\";\nimport {Label} from \"../Label\";\nimport {MusicSymbolModuleFactory} from \"./MusicSymbolModuleFactory\";\nimport {IAfterSheetReadingModule} from \"../Interfaces/IAfterSheetReadingModule\";\nimport {RepetitionInstructionReader} from \"./MusicSymbolModules/RepetitionInstructionReader\";\nimport {RepetitionCalculator} from \"./MusicSymbolModules/RepetitionCalculator\";\nimport {EngravingRules} from \"../Graphical/EngravingRules\";\nimport { ReaderPluginManager } from \"./ReaderPluginManager\";\n\nexport class MusicSheetReader /*implements IMusicSheetReader*/ {\n\n    constructor(afterSheetReadingModules: IAfterSheetReadingModule[] = undefined, rules: EngravingRules = new EngravingRules()) {\n     if (!afterSheetReadingModules) {\n       this.afterSheetReadingModules = [];\n     } else {\n       this.afterSheetReadingModules = afterSheetReadingModules;\n     }\n     this.repetitionInstructionReader = MusicSymbolModuleFactory.createRepetitionInstructionReader();\n     this.repetitionCalculator = MusicSymbolModuleFactory.createRepetitionCalculator();\n     this.rules = rules;\n    }\n\n    private repetitionInstructionReader: RepetitionInstructionReader;\n    private repetitionCalculator: RepetitionCalculator;\n    private afterSheetReadingModules: IAfterSheetReadingModule[];\n    private musicSheet: MusicSheet;\n    private completeNumberOfStaves: number = 0;\n    private currentMeasure: SourceMeasure;\n    private previousMeasure: SourceMeasure;\n    private currentFraction: Fraction;\n    private pluginManager: ReaderPluginManager = new ReaderPluginManager();\n    public rules: EngravingRules;\n\n    public get PluginManager(): ReaderPluginManager {\n        return this.pluginManager;\n    }\n\n    public get CompleteNumberOfStaves(): number {\n        return this.completeNumberOfStaves;\n    }\n\n    private static doCalculationsAfterDurationHasBeenSet(instrumentReaders: InstrumentReader[]): void {\n        for (const instrumentReader of instrumentReaders) {\n            instrumentReader.doCalculationsAfterDurationHasBeenSet();\n        }\n    }\n\n    /**\n     * Read a music XML file and saves the values in the MusicSheet class.\n     * @param root\n     * @param path\n     * @returns {MusicSheet}\n     */\n    public createMusicSheet(root: IXmlElement, path: string): MusicSheet {\n        try {\n            return this._createMusicSheet(root, path);\n        } catch (e) {\n            log.error(\"MusicSheetReader.CreateMusicSheet\", e);\n            return undefined;\n        }\n    }\n\n    private _removeFromArray(list: any[], elem: any): void {\n        const i: number = list.indexOf(elem);\n        if (i !== -1) {\n            list.splice(i, 1);\n        }\n    }\n\n    // Trim from a string also newlines\n    private trimString(str: string): string {\n        return str.replace(/^\\s+|\\s+$/g, \"\");\n    }\n\n    private _lastElement<T>(list: T[]): T {\n        return list[list.length - 1];\n    }\n\n    //public SetPhonicScoreInterface(phonicScoreInterface: IPhonicScoreInterface): void {\n    //  this.phonicScoreInterface = phonicScoreInterface;\n    //}\n    //public ReadMusicSheetParameters(sheetObject: MusicSheetParameterObject, root: IXmlElement, path: string): MusicSheetParameterObject {\n    //  this.musicSheet = new MusicSheet();\n    //  if (root) {\n    //    this.pushSheetLabels(root, path);\n    //    if (this.musicSheet.Title) {\n    //      sheetObject.Title = this.musicSheet.Title.text;\n    //    }\n    //    if (this.musicSheet.Composer) {\n    //      sheetObject.Composer = this.musicSheet.Composer.text;\n    //    }\n    //    if (this.musicSheet.Lyricist) {\n    //      sheetObject.Lyricist = this.musicSheet.Lyricist.text;\n    //    }\n    //    let partlistNode: IXmlElement = root.element(\"part-list\");\n    //    let partList: IXmlElement[] = partlistNode.elements();\n    //    this.createInstrumentGroups(partList);\n    //    for (let idx: number = 0, len: number = this.musicSheet.Instruments.length; idx < len; ++idx) {\n    //      let instr: Instrument = this.musicSheet.Instruments[idx];\n    //      sheetObject.InstrumentList.push(__init(new MusicSheetParameterObject.LibrarySheetInstrument(), { name: instr.name }));\n    //    }\n    //  }\n    //  return sheetObject;\n    //}\n\n    private _createMusicSheet(root: IXmlElement, path: string): MusicSheet {\n        const instrumentReaders: InstrumentReader[] = [];\n        let sourceMeasureCounter: number = 0;\n        this.musicSheet = new MusicSheet();\n        this.musicSheet.Path = path;\n        this.musicSheet.Rules = this.rules;\n        if (!root) {\n            throw new MusicSheetReadingException(\"Undefined root element\");\n        }\n        this.pushSheetLabels(root, path);\n        const partlistNode: IXmlElement = root.element(\"part-list\");\n        if (!partlistNode) {\n            throw new MusicSheetReadingException(\"Undefined partListNode\");\n        }\n\n        const partInst: IXmlElement[] = root.elements(\"part\");\n        const partList: IXmlElement[] = partlistNode.elements();\n        this.initializeReading(partList, partInst, instrumentReaders);\n        let couldReadMeasure: boolean = true;\n        this.currentFraction = new Fraction(0, 1);\n        let octavePlusOneEncoding: boolean = false; // GuitarPro and Sibelius give octaves -1 apparently\n        let encoding: IXmlElement = root.element(\"identification\");\n        if (encoding) {\n            encoding = encoding.element(\"encoding\");\n        }\n        if (encoding) {\n            encoding = encoding.element(\"software\");\n        }\n        if (encoding !== undefined && (encoding.value === \"Guitar Pro 5\")) { //|| encoding.value.startsWith(\"Sibelius\")\n            octavePlusOneEncoding = true;\n        }\n\n        while (couldReadMeasure) {\n            // TODO changing this.rules.PartAndSystemAfterFinalBarline requires a reload of the piece for measure numbers to be updated\n            if (this.currentMeasure !== undefined && this.currentMeasure.HasEndLine && this.rules.NewPartAndSystemAfterFinalBarline) {\n                sourceMeasureCounter = 0;\n            }\n            this.currentMeasure = new SourceMeasure(this.completeNumberOfStaves, this.musicSheet.Rules);\n            for (const instrumentReader of instrumentReaders) {\n                try {\n                    couldReadMeasure = couldReadMeasure && instrumentReader.readNextXmlMeasure(\n                        this.currentMeasure, this.currentFraction, octavePlusOneEncoding);\n                } catch (e) {\n                    const errorMsg: string = ITextTranslation.translateText(\"ReaderErrorMessages/InstrumentError\", \"Error while reading instruments.\");\n                    throw new MusicSheetReadingException(errorMsg, e);\n                }\n\n            }\n            if (couldReadMeasure) {\n                this.musicSheet.addMeasure(this.currentMeasure);\n                this.checkIfRhythmInstructionsAreSetAndEqual(instrumentReaders);\n                this.checkSourceMeasureForNullEntries();\n                sourceMeasureCounter = this.setSourceMeasureDuration(instrumentReaders, sourceMeasureCounter);\n                MusicSheetReader.doCalculationsAfterDurationHasBeenSet(instrumentReaders);\n                this.currentMeasure.AbsoluteTimestamp = this.currentFraction.clone();\n                this.musicSheet.SheetErrors.finalizeMeasure(this.currentMeasure.MeasureNumber);\n                this.currentFraction.Add(this.currentMeasure.Duration);\n                this.previousMeasure = this.currentMeasure;\n            }\n        }\n\n        if (this.repetitionInstructionReader) {\n            this.repetitionInstructionReader.removeRedundantInstructions();\n            if (this.repetitionCalculator) {\n                this.repetitionCalculator.calculateRepetitions(this.musicSheet, this.repetitionInstructionReader.repetitionInstructions);\n            }\n        }\n        this.musicSheet.checkForInstrumentWithNoVoice();\n        this.musicSheet.fillStaffList();\n        //this.musicSheet.DefaultStartTempoInBpm = this.musicSheet.SheetPlaybackSetting.BeatsPerMinute;\n        for (let idx: number = 0, len: number = this.afterSheetReadingModules.length; idx < len; ++idx) {\n         const afterSheetReadingModule: IAfterSheetReadingModule = this.afterSheetReadingModules[idx];\n         afterSheetReadingModule.calculate(this.musicSheet);\n        }\n\n        //this.musicSheet.DefaultStartTempoInBpm = this.musicSheet.SourceMeasures[0].TempoInBPM;\n        this.musicSheet.userStartTempoInBPM = this.musicSheet.userStartTempoInBPM || this.musicSheet.DefaultStartTempoInBpm;\n\n        return this.musicSheet;\n    }\n\n    private initializeReading(partList: IXmlElement[], partInst: IXmlElement[], instrumentReaders: InstrumentReader[]): void {\n        const instrumentDict: { [_: string]: Instrument } = this.createInstrumentGroups(partList);\n        this.completeNumberOfStaves = this.getCompleteNumberOfStavesFromXml(partInst);\n        if (partInst.length !== 0) {\n            this.repetitionInstructionReader.MusicSheet = this.musicSheet;\n            this.currentFraction = new Fraction(0, 1);\n            this.currentMeasure = undefined;\n            this.previousMeasure = undefined;\n        }\n        let counter: number = 0;\n        for (const node of partInst) {\n            const idNode: IXmlAttribute = node.attribute(\"id\");\n            if (idNode) {\n                const currentInstrument: Instrument = instrumentDict[idNode.value];\n                const xmlMeasureList: IXmlElement[] = node.elements(\"measure\");\n                let instrumentNumberOfStaves: number = 1;\n                try {\n                    instrumentNumberOfStaves = this.getInstrumentNumberOfStavesFromXml(node);\n                } catch (err) {\n                    const errorMsg: string = ITextTranslation.translateText(\n                        \"ReaderErrorMessages/InstrumentStavesNumberError\",\n                        \"Invalid number of staves at instrument: \"\n                    );\n                    this.musicSheet.SheetErrors.push(errorMsg + currentInstrument.Name);\n                    continue;\n                }\n\n                currentInstrument.createStaves(instrumentNumberOfStaves);\n                instrumentReaders.push(new InstrumentReader(this.pluginManager, this.repetitionInstructionReader, xmlMeasureList, currentInstrument));\n                if (this.repetitionInstructionReader) {\n                    this.repetitionInstructionReader.xmlMeasureList[counter] = xmlMeasureList;\n                }\n                counter++;\n            }\n        }\n    }\n\n    /**\n     * Check if all (should there be any apart from the first Measure) [[RhythmInstruction]]s in the [[SourceMeasure]] are the same.\n     *\n     * If not, then the max [[RhythmInstruction]] (Fraction) is set to all staves.\n     * Also, if it happens to have the same [[RhythmInstruction]]s in RealValue but given in Symbol AND Fraction, then the Fraction prevails.\n     * @param instrumentReaders\n     */\n    private checkIfRhythmInstructionsAreSetAndEqual(instrumentReaders: InstrumentReader[]): void {\n        const rhythmInstructions: RhythmInstruction[] = [];\n        for (let i: number = 0; i < this.completeNumberOfStaves; i++) {\n            if (this.currentMeasure.FirstInstructionsStaffEntries[i]) {\n                const last: AbstractNotationInstruction = this.currentMeasure.FirstInstructionsStaffEntries[i].Instructions[\n                this.currentMeasure.FirstInstructionsStaffEntries[i].Instructions.length - 1\n                    ];\n                if (last instanceof RhythmInstruction) {\n                    rhythmInstructions.push(<RhythmInstruction>last);\n                }\n            }\n        }\n        let maxRhythmValue: number = 0.0;\n        let index: number = -1;\n        for (let idx: number = 0, len: number = rhythmInstructions.length; idx < len; ++idx) {\n            const rhythmInstruction: RhythmInstruction = rhythmInstructions[idx];\n            if (rhythmInstruction.Rhythm.RealValue > maxRhythmValue) {\n                if (this.areRhythmInstructionsMixed(rhythmInstructions) && rhythmInstruction.SymbolEnum !== RhythmSymbolEnum.NONE) {\n                    continue;\n                }\n                maxRhythmValue = rhythmInstruction.Rhythm.RealValue;\n                index = rhythmInstructions.indexOf(rhythmInstruction);\n            }\n        }\n        if (rhythmInstructions.length > 0 && rhythmInstructions.length < this.completeNumberOfStaves) {\n            const rhythmInstruction: RhythmInstruction = rhythmInstructions[index].clone();\n            for (let i: number = 0; i < this.completeNumberOfStaves; i++) {\n                if (\n                    this.currentMeasure.FirstInstructionsStaffEntries[i] !== undefined &&\n                    !(this._lastElement(this.currentMeasure.FirstInstructionsStaffEntries[i].Instructions) instanceof RhythmInstruction)\n                ) {\n                    this.currentMeasure.FirstInstructionsStaffEntries[i].removeAllInstructionsOfTypeRhythmInstruction();\n                    this.currentMeasure.FirstInstructionsStaffEntries[i].Instructions.push(rhythmInstruction.clone());\n                }\n                if (!this.currentMeasure.FirstInstructionsStaffEntries[i]) {\n                    this.currentMeasure.FirstInstructionsStaffEntries[i] = new SourceStaffEntry(undefined, undefined);\n                    this.currentMeasure.FirstInstructionsStaffEntries[i].Instructions.push(rhythmInstruction.clone());\n                }\n            }\n            for (let idx: number = 0, len: number = instrumentReaders.length; idx < len; ++idx) {\n                const instrumentReader: InstrumentReader = instrumentReaders[idx];\n                instrumentReader.ActiveRhythm = rhythmInstruction;\n            }\n        }\n        if (rhythmInstructions.length === 0 && this.currentMeasure === this.musicSheet.SourceMeasures[0]) {\n            const rhythmInstruction: RhythmInstruction = new RhythmInstruction(new Fraction(4, 4, 0, false), RhythmSymbolEnum.NONE);\n            for (let i: number = 0; i < this.completeNumberOfStaves; i++) {\n                if (!this.currentMeasure.FirstInstructionsStaffEntries[i]) {\n                    this.currentMeasure.FirstInstructionsStaffEntries[i] = new SourceStaffEntry(undefined, undefined);\n                } else {\n                    this.currentMeasure.FirstInstructionsStaffEntries[i].removeAllInstructionsOfTypeRhythmInstruction();\n                }\n                this.currentMeasure.FirstInstructionsStaffEntries[i].Instructions.push(rhythmInstruction);\n            }\n            for (let idx: number = 0, len: number = instrumentReaders.length; idx < len; ++idx) {\n                const instrumentReader: InstrumentReader = instrumentReaders[idx];\n                instrumentReader.ActiveRhythm = rhythmInstruction;\n            }\n        }\n        for (let idx: number = 0, len: number = rhythmInstructions.length; idx < len; ++idx) {\n            const rhythmInstruction: RhythmInstruction = rhythmInstructions[idx];\n            if (rhythmInstruction.Rhythm.RealValue < maxRhythmValue) {\n                if (this._lastElement(\n                        this.currentMeasure.FirstInstructionsStaffEntries[rhythmInstructions.indexOf(rhythmInstruction)].Instructions\n                    ) instanceof RhythmInstruction) {\n                    // TODO Test correctness\n                    const instrs: AbstractNotationInstruction[] =\n                        this.currentMeasure.FirstInstructionsStaffEntries[rhythmInstructions.indexOf(rhythmInstruction)].Instructions;\n                    instrs[instrs.length - 1] = rhythmInstructions[index].clone();\n                }\n            }\n            if (\n                Math.abs(rhythmInstruction.Rhythm.RealValue - maxRhythmValue) < 0.000001 &&\n                rhythmInstruction.SymbolEnum !== RhythmSymbolEnum.NONE &&\n                this.areRhythmInstructionsMixed(rhythmInstructions)\n            ) {\n                rhythmInstruction.SymbolEnum = RhythmSymbolEnum.NONE;\n            }\n        }\n    }\n\n    /**\n     * True in case of 4/4 and COMMON TIME (or 2/2 and CUT TIME)\n     * @param rhythmInstructions\n     * @returns {boolean}\n     */\n    private areRhythmInstructionsMixed(rhythmInstructions: RhythmInstruction[]): boolean {\n        for (let i: number = 1; i < rhythmInstructions.length; i++) {\n            if (\n                Math.abs(rhythmInstructions[i].Rhythm.RealValue - rhythmInstructions[0].Rhythm.RealValue) < 0.000001 &&\n                rhythmInstructions[i].SymbolEnum !== rhythmInstructions[0].SymbolEnum\n            ) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Set the [[Measure]]'s duration taking into account the longest [[Instrument]] duration and the active Rhythm read from XML.\n     * @param instrumentReaders\n     * @param sourceMeasureCounter\n     * @returns {number}\n     */\n    private setSourceMeasureDuration(instrumentReaders: InstrumentReader[], sourceMeasureCounter: number): number {\n        let activeRhythm: Fraction = new Fraction(0, 1);\n        const instrumentsMaxTieNoteFractions: Fraction[] = [];\n        for (const instrumentReader of instrumentReaders) {\n            instrumentsMaxTieNoteFractions.push(instrumentReader.MaxTieNoteFraction);\n            const activeRythmMeasure: Fraction = instrumentReader.ActiveRhythm.Rhythm;\n            if (activeRhythm.lt(activeRythmMeasure)) {\n                activeRhythm = new Fraction(activeRythmMeasure.Numerator, activeRythmMeasure.Denominator, 0, false);\n            }\n        }\n        const instrumentsDurations: Fraction[] = this.currentMeasure.calculateInstrumentsDuration(this.musicSheet, instrumentsMaxTieNoteFractions);\n        let maxInstrumentDuration: Fraction = new Fraction(0, 1);\n        for (const instrumentsDuration of instrumentsDurations) {\n            if (maxInstrumentDuration.lt(instrumentsDuration)) {\n                maxInstrumentDuration = instrumentsDuration;\n            }\n        }\n        if (Fraction.Equal(maxInstrumentDuration, activeRhythm)) {\n            this.checkFractionsForEquivalence(maxInstrumentDuration, activeRhythm);\n        } else {\n            if (maxInstrumentDuration.lt(activeRhythm)) {\n                maxInstrumentDuration = this.currentMeasure.reverseCheck(this.musicSheet, maxInstrumentDuration);\n                this.checkFractionsForEquivalence(maxInstrumentDuration, activeRhythm);\n            }\n        }\n        this.currentMeasure.ImplicitMeasure = this.checkIfMeasureIsImplicit(maxInstrumentDuration, activeRhythm);\n        if (!this.currentMeasure.ImplicitMeasure) {\n            sourceMeasureCounter++;\n        }\n        this.currentMeasure.Duration = maxInstrumentDuration; // can be 1/1 in a 4/4 time signature\n        // if (this.currentMeasure.Duration.Numerator === 0) {\n        //     this.currentMeasure.Duration = activeRhythm; // might be related to #1073\n        // }\n        this.currentMeasure.ActiveTimeSignature = activeRhythm;\n        this.currentMeasure.MeasureNumber = sourceMeasureCounter;\n        for (let i: number = 0; i < instrumentsDurations.length; i++) {\n            const instrumentsDuration: Fraction = instrumentsDurations[i];\n            if (\n                (this.currentMeasure.ImplicitMeasure && instrumentsDuration !== maxInstrumentDuration) ||\n                !Fraction.Equal(instrumentsDuration, activeRhythm) &&\n                !this.allInstrumentsHaveSameDuration(instrumentsDurations, maxInstrumentDuration)\n            ) {\n                const firstStaffIndexOfInstrument: number = this.musicSheet.getGlobalStaffIndexOfFirstStaff(this.musicSheet.Instruments[i]);\n                for (let staffIndex: number = 0; staffIndex < this.musicSheet.Instruments[i].Staves.length; staffIndex++) {\n                    if (!this.graphicalMeasureIsEmpty(firstStaffIndexOfInstrument + staffIndex)) {\n                        this.currentMeasure.setErrorInGraphicalMeasure(firstStaffIndexOfInstrument + staffIndex, true);\n                        const errorMsg: string = ITextTranslation.translateText(\"ReaderErrorMessages/MissingNotesError\",\n                                                                                \"Given Notes don't correspond to measure duration.\");\n                        this.musicSheet.SheetErrors.pushMeasureError(errorMsg);\n                    }\n                }\n            }\n        }\n        return sourceMeasureCounter;\n    }\n\n    /**\n     * Check the Fractions for Equivalence and if so, sets maxInstrumentDuration's members accordingly.\n     * *\n     * Example: if maxInstrumentDuration = 1/1 and sourceMeasureDuration = 4/4, maxInstrumentDuration becomes 4/4.\n     * @param maxInstrumentDuration\n     * @param activeRhythm\n     */\n    private checkFractionsForEquivalence(maxInstrumentDuration: Fraction, activeRhythm: Fraction): void {\n        if (activeRhythm.Denominator > maxInstrumentDuration.Denominator) {\n            const factor: number = activeRhythm.Denominator / maxInstrumentDuration.Denominator;\n            maxInstrumentDuration.expand(factor);\n        }\n    }\n\n    /**\n     * Handle the case of an implicit [[SourceMeasure]].\n     * @param maxInstrumentDuration\n     * @param activeRhythm\n     * @returns {boolean}\n     */\n    private checkIfMeasureIsImplicit(maxInstrumentDuration: Fraction, activeRhythm: Fraction): boolean {\n        if (!this.previousMeasure && maxInstrumentDuration.lt(activeRhythm)) {\n            return true;\n        }\n        if (this.previousMeasure) {\n            return Fraction.plus(this.previousMeasure.Duration, maxInstrumentDuration).Equals(activeRhythm);\n        }\n        return false;\n    }\n\n    /**\n     * Check the Duration of all the given Instruments.\n     * @param instrumentsDurations\n     * @param maxInstrumentDuration\n     * @returns {boolean}\n     */\n    private allInstrumentsHaveSameDuration(instrumentsDurations: Fraction[], maxInstrumentDuration: Fraction): boolean {\n        let counter: number = 0;\n        for (let idx: number = 0, len: number = instrumentsDurations.length; idx < len; ++idx) {\n            const instrumentsDuration: Fraction = instrumentsDurations[idx];\n            if (instrumentsDuration.Equals(maxInstrumentDuration)) {\n                counter++;\n            }\n        }\n        return (counter === instrumentsDurations.length && maxInstrumentDuration !== new Fraction(0, 1));\n    }\n\n    private graphicalMeasureIsEmpty(index: number): boolean {\n        let counter: number = 0;\n        for (let i: number = 0; i < this.currentMeasure.VerticalSourceStaffEntryContainers.length; i++) {\n            if (!this.currentMeasure.VerticalSourceStaffEntryContainers[i].StaffEntries[index]) {\n                counter++;\n            }\n        }\n        return (counter === this.currentMeasure.VerticalSourceStaffEntryContainers.length);\n    }\n\n    /**\n     * Check a [[SourceMeasure]] for possible empty / undefined entries ([[VoiceEntry]], [[SourceStaffEntry]], VerticalContainer)\n     * (caused from TieAlgorithm removing EndTieNote) and removes them if completely empty / null\n     */\n    private checkSourceMeasureForNullEntries(): void {\n        for (let i: number = this.currentMeasure.VerticalSourceStaffEntryContainers.length - 1; i >= 0; i--) {\n            for (let j: number = this.currentMeasure.VerticalSourceStaffEntryContainers[i].StaffEntries.length - 1; j >= 0; j--) {\n                const sourceStaffEntry: SourceStaffEntry = this.currentMeasure.VerticalSourceStaffEntryContainers[i].StaffEntries[j];\n                if (sourceStaffEntry) {\n                    for (let k: number = sourceStaffEntry.VoiceEntries.length - 1; k >= 0; k--) {\n                        const voiceEntry: VoiceEntry = sourceStaffEntry.VoiceEntries[k];\n                        if (voiceEntry.Notes.length === 0) {\n                            this._removeFromArray(voiceEntry.ParentVoice.VoiceEntries, voiceEntry);\n                            this._removeFromArray(sourceStaffEntry.VoiceEntries, voiceEntry);\n                        }\n                    }\n                }\n                if (sourceStaffEntry !== undefined && sourceStaffEntry.VoiceEntries.length === 0) {\n                    this.currentMeasure.VerticalSourceStaffEntryContainers[i].StaffEntries[j] = undefined;\n                }\n            }\n        }\n        for (let i: number = this.currentMeasure.VerticalSourceStaffEntryContainers.length - 1; i >= 0; i--) {\n            let counter: number = 0;\n            for (let idx: number = 0, len: number = this.currentMeasure.VerticalSourceStaffEntryContainers[i].StaffEntries.length; idx < len; ++idx) {\n                const sourceStaffEntry: SourceStaffEntry = this.currentMeasure.VerticalSourceStaffEntryContainers[i].StaffEntries[idx];\n                if (!sourceStaffEntry) {\n                    counter++;\n                }\n            }\n            if (counter === this.currentMeasure.VerticalSourceStaffEntryContainers[i].StaffEntries.length) {\n                this._removeFromArray(this.currentMeasure.VerticalSourceStaffEntryContainers, this.currentMeasure.VerticalSourceStaffEntryContainers[i]);\n            }\n        }\n    }\n\n    /**\n     * Read the XML file and creates the main sheet Labels.\n     * @param root\n     * @param filePath\n     */\n    private pushSheetLabels(root: IXmlElement, filePath: string): void {\n        this.readComposer(root);\n        this.readTitle(root);\n        try {\n            if (!this.musicSheet.Title || !this.musicSheet.Composer) {\n                this.readTitleAndComposerFromCredits(root); // this can also throw an error\n            }\n        } catch (ex) {\n            log.info(\"MusicSheetReader.pushSheetLabels\", \"readTitleAndComposerFromCredits\", ex);\n        }\n        try {\n            if (!this.musicSheet.Title) {\n                const barI: number = Math.max(\n                    0, filePath.lastIndexOf(\"/\"), filePath.lastIndexOf(\"\\\\\")\n                );\n                const filename: string = filePath.substr(barI);\n                const filenameSplits: string[] = filename.split(\".\", 1);\n                this.musicSheet.Title = new Label(filenameSplits[0]);\n            }\n        } catch (ex) {\n            log.info(\"MusicSheetReader.pushSheetLabels\", \"read title from file name\", ex);\n        }\n    }\n\n    // Checks whether _elem_ has an attribute with value _val_.\n    private presentAttrsWithValue(elem: IXmlElement, val: string): boolean {\n        for (const attr of elem.attributes()) {\n            if (attr.value === val) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    private readComposer(root: IXmlElement): void {\n        const identificationNode: IXmlElement = root.element(\"identification\");\n        if (identificationNode) {\n            const creators: IXmlElement[] = identificationNode.elements(\"creator\");\n            for (let idx: number = 0, len: number = creators.length; idx < len; ++idx) {\n                const creator: IXmlElement = creators[idx];\n                if (creator.hasAttributes) {\n                    if (this.presentAttrsWithValue(creator, \"composer\")) {\n                        this.musicSheet.Composer = new Label(this.trimString(creator.value));\n                        continue;\n                    }\n                    if (this.presentAttrsWithValue(creator, \"lyricist\") || this.presentAttrsWithValue(creator, \"poet\")) {\n                        this.musicSheet.Lyricist = new Label(this.trimString(creator.value));\n                    }\n                }\n            }\n        }\n    }\n\n    private readTitleAndComposerFromCredits(root: IXmlElement): void {\n        const systemYCoordinates: number = this.computeSystemYCoordinates(root);\n        if (systemYCoordinates === 0) {\n            return;\n        }\n        let largestTitleCreditSize: number = 1;\n        let finalTitle: string = undefined;\n        let largestCreditYInfo: number = 0;\n        let finalSubtitle: string = undefined;\n        let possibleTitle: string = undefined;\n        const creditElements: IXmlElement[] = root.elements(\"credit\");\n        for (let idx: number = 0, len: number = creditElements.length; idx < len; ++idx) {\n            const credit: IXmlElement = creditElements[idx];\n            if (!credit.attribute(\"page\")) {\n                return;\n            }\n            if (credit.attribute(\"page\").value === \"1\") {\n                let creditChild: IXmlElement = undefined;\n                if (credit) {\n                    creditChild = credit.element(\"credit-words\");\n                    if (!creditChild.attribute(\"justify\")) {\n                        break;\n                    }\n                    const creditJustify: string = creditChild.attribute(\"justify\")?.value;\n                    const creditY: string = creditChild.attribute(\"default-y\")?.value;\n                    // eslint-disable-next-line no-null/no-null\n                    const creditYGiven: boolean = creditY !== undefined && creditY !== null;\n                    const creditYInfo: number = creditYGiven ? parseFloat(creditY) : Number.MIN_VALUE;\n                    if (creditYGiven && creditYInfo > systemYCoordinates) {\n                        if (!this.musicSheet.Title) {\n                            const creditSize: string = creditChild.attribute(\"font-size\")?.value;\n                            if (creditSize) {\n                                const titleCreditSizeInt: number = parseFloat(creditSize);\n                                if (largestTitleCreditSize < titleCreditSizeInt) {\n                                    largestTitleCreditSize = titleCreditSizeInt;\n                                    finalTitle = creditChild.value;\n                                }\n                            }\n                        }\n                        if (!this.musicSheet.Subtitle) {\n                            if (creditJustify !== \"right\" && creditJustify !== \"left\") {\n                                if (largestCreditYInfo < creditYInfo) {\n                                    largestCreditYInfo = creditYInfo;\n                                    if (possibleTitle) {\n                                        finalSubtitle = possibleTitle;\n                                        possibleTitle = creditChild.value;\n                                    } else {\n                                        possibleTitle = creditChild.value;\n                                    }\n                                }\n                            }\n                        }\n                        if (!(this.musicSheet.Composer !== undefined && this.musicSheet.Lyricist)) {\n                            switch (creditJustify) {\n                                case \"right\":\n                                    this.musicSheet.Composer = new Label(this.trimString(creditChild.value));\n                                    break;\n                                case \"left\":\n                                    this.musicSheet.Lyricist = new Label(this.trimString(creditChild.value));\n                                    break;\n                                default:\n                                    break;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        if (!this.musicSheet.Title && finalTitle) {\n            this.musicSheet.Title = new Label(this.trimString(finalTitle));\n        }\n        if (!this.musicSheet.Subtitle && finalSubtitle) {\n            this.musicSheet.Subtitle = new Label(this.trimString(finalSubtitle));\n        }\n    }\n\n    private computeSystemYCoordinates(root: IXmlElement): number {\n        if (!root.element(\"defaults\")) {\n            return 0;\n        }\n        let paperHeight: number = 0;\n        let topSystemDistance: number = 0;\n        try {\n            const defi: string = root.element(\"defaults\").element(\"page-layout\").element(\"page-height\").value;\n            paperHeight = parseFloat(defi);\n        } catch (e) {\n            log.info(\"MusicSheetReader.computeSystemYCoordinates(): couldn't find page height, not reading title/composer.\");\n            return 0;\n        }\n        let found: boolean = false;\n        const parts: IXmlElement[] = root.elements(\"part\");\n        for (let idx: number = 0, len: number = parts.length; idx < len; ++idx) {\n            const measures: IXmlElement[] = parts[idx].elements(\"measure\");\n            for (let idx2: number = 0, len2: number = measures.length; idx2 < len2; ++idx2) {\n                const measure: IXmlElement = measures[idx2];\n                if (measure.element(\"print\")) {\n                    const systemLayouts: IXmlElement[] = measure.element(\"print\").elements(\"system-layout\");\n                    for (let idx3: number = 0, len3: number = systemLayouts.length; idx3 < len3; ++idx3) {\n                        const syslab: IXmlElement = systemLayouts[idx3];\n                        if (syslab.element(\"top-system-distance\")) {\n                            const topSystemDistanceString: string = syslab.element(\"top-system-distance\").value;\n                            topSystemDistance = parseFloat(topSystemDistanceString);\n                            found = true;\n                            break;\n                        }\n                    }\n                    break;\n                }\n            }\n            if (found) {\n                break;\n            }\n        }\n        if (root.element(\"defaults\").element(\"system-layout\")) {\n            const syslay: IXmlElement = root.element(\"defaults\").element(\"system-layout\");\n            if (syslay.element(\"top-system-distance\")) {\n                const topSystemDistanceString: string = root.element(\"defaults\").element(\"system-layout\").element(\"top-system-distance\").value;\n                topSystemDistance = parseFloat(topSystemDistanceString);\n            }\n        }\n        if (topSystemDistance === 0) {\n            return 0;\n        }\n        return paperHeight - topSystemDistance;\n    }\n\n    private readTitle(root: IXmlElement): void {\n        const titleNode: IXmlElement = root.element(\"work\");\n        let titleNodeChild: IXmlElement = undefined;\n        if (titleNode) {\n            titleNodeChild = titleNode.element(\"work-title\");\n            if (titleNodeChild && titleNodeChild.value) {\n                this.musicSheet.Title = new Label(this.trimString(titleNodeChild.value));\n            }\n        }\n        const movementNode: IXmlElement = root.element(\"movement-title\");\n        let finalSubTitle: string = \"\";\n        if (movementNode) {\n            if (!this.musicSheet.Title) {\n                this.musicSheet.Title = new Label(this.trimString(movementNode.value));\n            } else {\n                finalSubTitle = this.trimString(movementNode.value);\n            }\n        }\n        if (titleNode) {\n            const subtitleNodeChild: IXmlElement = titleNode.element(\"work-number\");\n            if (subtitleNodeChild) {\n                const workNumber: string = subtitleNodeChild.value;\n                if (workNumber) {\n                    if (finalSubTitle === \"\") {\n                        finalSubTitle = workNumber;\n                    } else {\n                        finalSubTitle = finalSubTitle + \", \" + workNumber;\n                    }\n                }\n            }\n        }\n        if (finalSubTitle\n        ) {\n            this.musicSheet.Subtitle = new Label(finalSubTitle);\n        }\n    }\n\n    /**\n     * Build the [[InstrumentalGroup]]s and [[Instrument]]s.\n     * @param entryList\n     * @returns {{}}\n     */\n    private createInstrumentGroups(entryList: IXmlElement[]): { [_: string]: Instrument } {\n        let instrumentId: number = 0;\n        const instrumentDict: { [_: string]: Instrument } = {};\n        let currentGroup: InstrumentalGroup;\n        try {\n            const entryArray: IXmlElement[] = entryList;\n            for (let idx: number = 0, len: number = entryArray.length; idx < len; ++idx) {\n                const node: IXmlElement = entryArray[idx];\n                if (node.name === \"score-part\") {\n                    const instrIdString: string = node.attribute(\"id\").value;\n                    const instrument: Instrument = new Instrument(instrumentId, instrIdString, this.musicSheet, currentGroup);\n                    instrumentId++;\n                    const partElements: IXmlElement[] = node.elements();\n                    for (let idx2: number = 0, len2: number = partElements.length; idx2 < len2; ++idx2) {\n                        const partElement: IXmlElement = partElements[idx2];\n                        try {\n                            if (partElement.name === \"part-name\") {\n                                instrument.Name = partElement.value;\n                                if (partElement.attribute(\"print-object\") &&\n                                   partElement.attribute(\"print-object\").value === \"no\") {\n                                    instrument.NameLabel.print = false;\n                                }\n                            } else if (partElement.name === \"part-abbreviation\") {\n                                instrument.PartAbbreviation = partElement.value;\n                            } else if (partElement.name === \"score-instrument\") {\n                                const subInstrument: SubInstrument = new SubInstrument(instrument);\n                                subInstrument.idString = partElement.firstAttribute.value;\n                                instrument.SubInstruments.push(subInstrument);\n                                const subElement: IXmlElement = partElement.element(\"instrument-name\");\n                                if (subElement) {\n                                    subInstrument.name = subElement.value;\n                                    subInstrument.setMidiInstrument(subElement.value);\n                                }\n                            } else if (partElement.name === \"midi-instrument\") {\n                                let subInstrument: SubInstrument = instrument.getSubInstrument(partElement.firstAttribute.value);\n                                for (let idx3: number = 0, len3: number = instrument.SubInstruments.length; idx3 < len3; ++idx3) {\n                                    const subInstr: SubInstrument = instrument.SubInstruments[idx3];\n                                    if (subInstr.idString === partElement.value) {\n                                        subInstrument = subInstr;\n                                        break;\n                                    }\n                                }\n                                const instrumentElements: IXmlElement[] = partElement.elements();\n                                for (let idx3: number = 0, len3: number = instrumentElements.length; idx3 < len3; ++idx3) {\n                                    const instrumentElement: IXmlElement = instrumentElements[idx3];\n                                    try {\n                                        if (instrumentElement.name === \"midi-channel\") {\n                                            if (parseInt(instrumentElement.value, 10) === 10) {\n                                                instrument.MidiInstrumentId = MidiInstrument.Percussion;\n                                            }\n                                        } else if (instrumentElement.name === \"midi-program\") {\n                                            if (instrument.SubInstruments.length > 0 && instrument.MidiInstrumentId !== MidiInstrument.Percussion) {\n                                                subInstrument.midiInstrumentID = <MidiInstrument>Math.max(0, parseInt(instrumentElement.value, 10) - 1);\n                                            }\n                                        } else if (instrumentElement.name === \"midi-unpitched\") {\n                                            subInstrument.fixedKey = Math.max(0, parseInt(instrumentElement.value, 10));\n                                        } else if (instrumentElement.name === \"volume\") {\n                                            try {\n                                                const result: number = parseFloat(instrumentElement.value);\n                                                subInstrument.volume = result / 127.0;\n                                            } catch (ex) {\n                                                log.debug(\"ExpressionReader.readExpressionParameters\", \"read volume\", ex);\n                                            }\n\n                                        } else if (instrumentElement.name === \"pan\") {\n                                            try {\n                                                const result: number = parseFloat(instrumentElement.value);\n                                                subInstrument.pan = result / 64.0;\n                                            } catch (ex) {\n                                                log.debug(\"ExpressionReader.readExpressionParameters\", \"read pan\", ex);\n                                            }\n\n                                        }\n                                    } catch (ex) {\n                                        log.info(\"MusicSheetReader.createInstrumentGroups midi settings: \", ex);\n                                    }\n\n                                }\n                            }\n                        } catch (ex) {\n                            log.info(\"MusicSheetReader.createInstrumentGroups: \", ex);\n                        }\n\n                    }\n                    if (instrument.SubInstruments.length === 0) {\n                        const subInstrument: SubInstrument = new SubInstrument(instrument);\n                        instrument.SubInstruments.push(subInstrument);\n                    }\n                    instrumentDict[instrIdString] = instrument;\n                    if (currentGroup) {\n                        currentGroup.InstrumentalGroups.push(instrument);\n                        this.musicSheet.Instruments.push(instrument);\n                    } else {\n                        this.musicSheet.InstrumentalGroups.push(instrument);\n                        this.musicSheet.Instruments.push(instrument);\n                    }\n                } else {\n                    if ((node.name === \"part-group\") && (node.attribute(\"type\").value === \"start\")) {\n                        const iG: InstrumentalGroup = new InstrumentalGroup(\"group\", this.musicSheet, currentGroup);\n                        if (currentGroup) {\n                            currentGroup.InstrumentalGroups.push(iG);\n                        } else {\n                            this.musicSheet.InstrumentalGroups.push(iG);\n                        }\n                        currentGroup = iG;\n                    } else {\n                        if ((node.name === \"part-group\") && (node.attribute(\"type\").value === \"stop\")) {\n                            if (currentGroup) {\n                                if (currentGroup.InstrumentalGroups.length === 1) {\n                                    const instr: InstrumentalGroup = currentGroup.InstrumentalGroups[0];\n                                    if (currentGroup.Parent) {\n                                        currentGroup.Parent.InstrumentalGroups.push(instr);\n                                        this._removeFromArray(currentGroup.Parent.InstrumentalGroups, currentGroup);\n                                    } else {\n                                        this.musicSheet.InstrumentalGroups.push(instr);\n                                        this._removeFromArray(this.musicSheet.InstrumentalGroups, currentGroup);\n                                    }\n                                }\n                                currentGroup = currentGroup.Parent;\n                            }\n                        }\n                    }\n                }\n            }\n        } catch (e) {\n            const errorMsg: string = ITextTranslation.translateText(\n                \"ReaderErrorMessages/InstrumentError\", \"Error while reading Instruments\"\n            );\n            throw new MusicSheetReadingException(errorMsg, e);\n        }\n\n        for (let idx: number = 0, len: number = this.musicSheet.Instruments.length; idx < len; ++idx) {\n            const instrument: Instrument = this.musicSheet.Instruments[idx];\n            if (!instrument.Name) {\n                instrument.Name = \"Instr. \" + instrument.IdString;\n            }\n        }\n        return instrumentDict;\n    }\n\n    /**\n     * Read from each xmlInstrumentPart the first xmlMeasure in order to find out the [[Instrument]]'s number of Staves\n     * @param partInst\n     * @returns {number} - Complete number of Staves for all Instruments.\n     */\n    private getCompleteNumberOfStavesFromXml(partInst: IXmlElement[]): number {\n        let num: number = 0;\n        for (const partNode of partInst) {\n            const xmlMeasureList: IXmlElement[] = partNode.elements(\"measure\");\n            if (xmlMeasureList.length > 0) {\n                const xmlMeasure: IXmlElement = xmlMeasureList[0];\n                if (xmlMeasure) {\n                    let stavesNode: IXmlElement = xmlMeasure.element(\"attributes\");\n                    if (stavesNode) {\n                        stavesNode = stavesNode.element(\"staves\");\n                    }\n                    if (!stavesNode) {\n                        num++;\n                    } else {\n                        num += parseInt(stavesNode.value, 10);\n                    }\n                }\n            }\n        }\n        if (isNaN(num) || num <= 0) {\n            const errorMsg: string = ITextTranslation.translateText(\n                \"ReaderErrorMessages/StaffError\", \"Invalid number of staves.\"\n            );\n            throw new MusicSheetReadingException(errorMsg);\n        }\n        return num;\n    }\n\n    /**\n     * Read from XML for a single [[Instrument]] the first xmlMeasure in order to find out the Instrument's number of Staves.\n     * @param partNode\n     * @returns {number}\n     */\n    private getInstrumentNumberOfStavesFromXml(partNode: IXmlElement): number {\n        let num: number = 0;\n        const xmlMeasure: IXmlElement = partNode.element(\"measure\");\n        if (xmlMeasure) {\n            const attributes: IXmlElement = xmlMeasure.element(\"attributes\");\n            let staves: IXmlElement = undefined;\n            if (attributes) {\n                staves = attributes.element(\"staves\");\n            }\n            if (!attributes || !staves) {\n                num = 1;\n            } else {\n                num = parseInt(staves.value, 10);\n            }\n        }\n        if (isNaN(num) || num <= 0) {\n            const errorMsg: string = ITextTranslation.translateText(\n                \"ReaderErrorMessages/StaffError\", \"Invalid number of Staves.\"\n            );\n            throw new MusicSheetReadingException(errorMsg);\n        }\n        return num;\n    }\n\n}\n","import {RepetitionInstructionReader} from \"./MusicSymbolModules/RepetitionInstructionReader\";\nimport {RepetitionCalculator} from \"./MusicSymbolModules/RepetitionCalculator\";\n\nexport class MusicSymbolModuleFactory {\n  public static createRepetitionInstructionReader(): RepetitionInstructionReader {\n    return new RepetitionInstructionReader();\n  }\n\n  public static createRepetitionCalculator(): RepetitionCalculator {\n    return new RepetitionCalculator();\n  }\n\n  /*\n   public static createExpressionGenerator(musicSheet: MusicSheet,\n   instrument: Instrument, staffNumber: number): ExpressionReader {\n   return new ExpressionReader(musicSheet, instrument, staffNumber);\n   }\n\n   public static createSlurReader(musicSheet: MusicSheet): SlurReader {\n   return new SlurReader(musicSheet);\n   }\n\n   public static createLyricsReader(musicSheet: MusicSheet): LyricsReader {\n   return new LyricsReader(musicSheet);\n   }\n\n   public static createArticulationReader(): ArticulationReader {\n   return new ArticulationReader();\n   }\n   */\n}\n","import {ArticulationEnum, VoiceEntry} from \"../../VoiceData/VoiceEntry\";\nimport {IXmlAttribute, IXmlElement} from \"../../../Common/FileIO/Xml\";\nimport log from \"loglevel\";\nimport {TechnicalInstruction, TechnicalInstructionType} from \"../../VoiceData/Instructions/TechnicalInstruction\";\nimport {OrnamentContainer, OrnamentEnum} from \"../../VoiceData/OrnamentContainer\";\nimport {PlacementEnum} from \"../../VoiceData/Expressions/AbstractExpression\";\nimport {AccidentalEnum} from \"../../../Common/DataObjects/Pitch\";\nimport { Articulation } from \"../../VoiceData/Articulation\";\nimport { Note } from \"../../VoiceData/Note\";\nimport { EngravingRules } from \"../../Graphical/EngravingRules\";\nexport class ArticulationReader {\n  private rules: EngravingRules;\n\n  constructor(rules: EngravingRules) {\n    this.rules = rules;\n  }\n\n  private getAccEnumFromString(input: string): AccidentalEnum {\n    switch (input) {\n      case \"sharp\":\n        return AccidentalEnum.SHARP;\n      case \"flat\":\n        return AccidentalEnum.FLAT;\n      case \"natural\":\n        return AccidentalEnum.NATURAL;\n      case \"double-sharp\":\n      case \"sharp-sharp\":\n        return AccidentalEnum.DOUBLESHARP;\n      case \"double-flat\":\n      case \"flat-flat\":\n        return AccidentalEnum.DOUBLEFLAT;\n      case \"triple-sharp\":\n        return AccidentalEnum.TRIPLESHARP;\n      case \"triple-flat\":\n        return AccidentalEnum.TRIPLEFLAT;\n      case \"quarter-sharp\":\n        return AccidentalEnum.QUARTERTONESHARP;\n      case \"quarter-flat\":\n        return AccidentalEnum.QUARTERTONEFLAT;\n      case \"three-quarters-sharp\":\n        return AccidentalEnum.THREEQUARTERSSHARP;\n      case \"three-quarters-flat\":\n        return AccidentalEnum.THREEQUARTERSFLAT;\n      case \"slash-quarter-sharp\":\n        return AccidentalEnum.SLASHQUARTERSHARP;\n      case \"slash-sharp\":\n        return AccidentalEnum.SLASHSHARP;\n      case \"double-slash-flat\":\n        return AccidentalEnum.DOUBLESLASHFLAT;\n      case \"sori\":\n        return AccidentalEnum.SORI;\n      case \"koron\":\n        return AccidentalEnum.KORON;\n      default:\n        return AccidentalEnum.NONE;\n    }\n  }\n\n  /**\n   * This method adds an Articulation Expression to the currentVoiceEntry.\n   * @param node\n   * @param currentVoiceEntry\n   */\n  public addArticulationExpression(node: IXmlElement, currentVoiceEntry: VoiceEntry): void {\n    if (node !== undefined && node.elements().length > 0) {\n      const childNodes: IXmlElement[] = node.elements();\n      for (let idx: number = 0, len: number = childNodes.length; idx < len; ++idx) {\n        const childNode: IXmlElement = childNodes[idx];\n        let name: string = childNode.name;\n        try {\n          // some Articulations appear in Xml separated with a \"-\" (eg strong-accent), we remove it for enum parsing\n          name = name.replace(\"-\", \"\");\n          const articulationEnum: ArticulationEnum = ArticulationEnum[name];\n          if (VoiceEntry.isSupportedArticulation(articulationEnum)) {\n            let placement: PlacementEnum = PlacementEnum.NotYetDefined;\n            const placementValue: string = childNode.attribute(\"placement\")?.value;\n            if (placementValue === \"above\") {\n              placement = PlacementEnum.Above;\n            } else if (placementValue === \"below\") {\n              placement = PlacementEnum.Below;\n            }\n            const newArticulation: Articulation = new Articulation(articulationEnum, placement);\n            // staccato should be first // necessary?\n            if (name === \"staccato\") {\n              if (currentVoiceEntry.Articulations.length > 0 &&\n                currentVoiceEntry.Articulations[0].articulationEnum !== ArticulationEnum.staccato) {\n                currentVoiceEntry.Articulations.splice(0, 0, newArticulation); // TODO can't this overwrite another articulation?\n              }\n            }\n            if (name === \"strongaccent\") { // see name.replace(\"-\", \"\") above\n              const marcatoType: string = childNode?.attribute(\"type\")?.value;\n              if (marcatoType === \"up\") {\n                newArticulation.articulationEnum = ArticulationEnum.marcatoup;\n              } else if (marcatoType === \"down\") {\n                newArticulation.articulationEnum = ArticulationEnum.marcatodown;\n              }\n            }\n\n            // don't add the same articulation twice\n            if (!currentVoiceEntry.hasArticulation(newArticulation)) {\n              currentVoiceEntry.Articulations.push(newArticulation);\n            }\n          }\n        } catch (ex) {\n          const errorMsg: string = \"Invalid note articulation.\";\n          log.debug(\"addArticulationExpression\", errorMsg, ex);\n          return;\n        }\n      }\n    }\n  }\n\n  /**\n   * This method add a Fermata to the currentVoiceEntry.\n   * @param xmlNode\n   * @param currentVoiceEntry\n   */\n  public addFermata(xmlNode: IXmlElement, currentVoiceEntry: VoiceEntry): void {\n    // fermata appears as separate tag in XML\n    let articulationEnum: ArticulationEnum = ArticulationEnum.fermata;\n    if (xmlNode.attributes().length > 0 && xmlNode.attribute(\"type\")) {\n      if (xmlNode.attribute(\"type\").value === \"inverted\") {\n        articulationEnum = ArticulationEnum.invertedfermata;\n      }\n    }\n    let placement: PlacementEnum = PlacementEnum.Above;\n    if (xmlNode.attribute(\"placement\")?.value === \"below\") {\n      placement = PlacementEnum.Below;\n    }\n    // add to VoiceEntry\n    currentVoiceEntry.Articulations.push(new Articulation(articulationEnum, placement));\n  }\n\n  /**\n   * This method add a technical Articulation to the currentVoiceEntry.\n   * @param technicalNode\n   * @param currentVoiceEntry\n   */\n  public addTechnicalArticulations(technicalNode: IXmlElement, currentVoiceEntry: VoiceEntry, currentNote: Note): void {\n    interface XMLElementToArticulationEnum {\n      [xmlElement: string]: ArticulationEnum;\n    }\n    const xmlElementToArticulationEnum: XMLElementToArticulationEnum = {\n      \"bend\": ArticulationEnum.bend,\n      \"down-bow\": ArticulationEnum.downbow,\n      \"open-string\": ArticulationEnum.naturalharmonic,\n      \"snap-pizzicato\": ArticulationEnum.snappizzicato,\n      \"stopped\": ArticulationEnum.lefthandpizzicato,\n      \"up-bow\": ArticulationEnum.upbow,\n      // fingering is special case\n    };\n\n    for (const xmlArticulation in xmlElementToArticulationEnum) {\n      if (!xmlElementToArticulationEnum.hasOwnProperty(xmlArticulation)) {\n        continue;\n      }\n      const articulationEnum: ArticulationEnum = xmlElementToArticulationEnum[xmlArticulation];\n      const node: IXmlElement = technicalNode.element(xmlArticulation);\n      if (node) {\n        let placement: PlacementEnum; // set undefined by default, to not restrict placement\n        if (node.attribute(\"placement\")?.value === \"above\") {\n          placement = PlacementEnum.Above;\n        }\n        if (node.attribute(\"placement\")?.value === \"below\") {\n          placement = PlacementEnum.Below;\n        }\n        const newArticulation: Articulation = new Articulation(articulationEnum, placement);\n        if (!currentVoiceEntry.hasArticulation(newArticulation)) {\n          currentVoiceEntry.Articulations.push(newArticulation);\n        }\n      }\n    }\n\n    const nodeFingering: IXmlElement = technicalNode.element(\"fingering\");\n    if (nodeFingering) {\n      const currentTechnicalInstruction: TechnicalInstruction = this.createTechnicalInstruction(nodeFingering, currentNote);\n      currentTechnicalInstruction.type = TechnicalInstructionType.Fingering;\n      currentNote.Fingering = currentTechnicalInstruction;\n      currentVoiceEntry.TechnicalInstructions.push(currentTechnicalInstruction);\n    }\n    const nodeString: IXmlElement = technicalNode.element(\"string\");\n    if (nodeString) {\n      const currentTechnicalInstruction: TechnicalInstruction = this.createTechnicalInstruction(nodeString, currentNote);\n      currentTechnicalInstruction.type = TechnicalInstructionType.String;\n      currentNote.StringInstruction = currentTechnicalInstruction;\n      currentVoiceEntry.TechnicalInstructions.push(currentTechnicalInstruction);\n    }\n  }\n\n  private createTechnicalInstruction(stringOrFingeringNode: IXmlElement, note: Note): TechnicalInstruction {\n    const technicalInstruction: TechnicalInstruction = new TechnicalInstruction();\n    technicalInstruction.sourceNote = note;\n    technicalInstruction.value = stringOrFingeringNode.value;\n    const placement: Attr = stringOrFingeringNode.attribute(\"placement\");\n    if (this.rules.FingeringPositionFromXML) {\n      technicalInstruction.placement = this.getPlacement(placement);\n    }\n    return technicalInstruction;\n  }\n\n  private getPlacement(placementAttr: Attr, defaultPlacement: PlacementEnum = PlacementEnum.NotYetDefined): PlacementEnum {\n    if (defaultPlacement !== PlacementEnum.NotYetDefined) { // usually from EngravingRules\n      return defaultPlacement;\n    }\n    if (placementAttr) {\n      switch (placementAttr.value) {\n        case \"above\":\n          return PlacementEnum.Above;\n        case \"below\":\n          return PlacementEnum.Below;\n        case \"left\": // not valid in MusicXML 3.1\n          return PlacementEnum.Left;\n        case \"right\": // not valid in MusicXML 3.1\n          return PlacementEnum.Right;\n        default:\n          return PlacementEnum.NotYetDefined;\n      }\n    } else {\n      return PlacementEnum.NotYetDefined;\n    }\n  }\n\n  /**\n   * This method adds an Ornament to the currentVoiceEntry.\n   * @param ornamentsNode\n   * @param currentVoiceEntry\n   */\n  public addOrnament(ornamentsNode: IXmlElement, currentVoiceEntry: VoiceEntry): void {\n    if (ornamentsNode) {\n      let ornament: OrnamentContainer = undefined;\n\n      interface XMLElementToOrnamentEnum {\n        [xmlElement: string]: OrnamentEnum;\n      }\n      const elementToOrnamentEnum: XMLElementToOrnamentEnum = {\n        \"delayed-inverted-turn\": OrnamentEnum.DelayedInvertedTurn,\n        \"delayed-turn\": OrnamentEnum.DelayedTurn,\n        \"inverted-mordent\": OrnamentEnum.InvertedMordent,\n        \"inverted-turn\": OrnamentEnum.InvertedTurn,\n        \"mordent\": OrnamentEnum.Mordent,\n        \"trill-mark\": OrnamentEnum.Trill,\n        \"turn\": OrnamentEnum.Turn,\n        // further ornaments are not yet supported by MusicXML (3.1).\n      };\n\n      for (const ornamentElement in elementToOrnamentEnum) {\n        if (!elementToOrnamentEnum.hasOwnProperty(ornamentElement)) {\n          continue;\n        }\n        const node: IXmlElement = ornamentsNode.element(ornamentElement);\n        if (node) {\n          ornament = new OrnamentContainer(elementToOrnamentEnum[ornamentElement]);\n          const placementAttr: Attr = node.attribute(\"placement\");\n          if (placementAttr) {\n            const placementString: string = placementAttr.value;\n            if (placementString === \"below\") {\n              ornament.placement = PlacementEnum.Below;\n            }\n          }\n        }\n      }\n      if (ornament) {\n        const accidentalsList: IXmlElement[] = ornamentsNode.elements(\"accidental-mark\");\n        if (accidentalsList) {\n          let placement: PlacementEnum = PlacementEnum.Below;\n          let accidental: AccidentalEnum = AccidentalEnum.NONE;\n          const accidentalsListArr: IXmlElement[] = accidentalsList;\n          for (let idx: number = 0, len: number = accidentalsListArr.length; idx < len; ++idx) {\n            const accidentalNode: IXmlElement = accidentalsListArr[idx];\n            let text: string = accidentalNode.value;\n            accidental = this.getAccEnumFromString(text);\n            const placementAttr: IXmlAttribute = accidentalNode.attribute(\"placement\");\n            if (accidentalNode.hasAttributes && placementAttr) {\n              text = placementAttr.value;\n              if (text === \"above\") {\n                placement = PlacementEnum.Above;\n              } else if (text === \"below\") {\n                placement = PlacementEnum.Below;\n              }\n            }\n            if (placement === PlacementEnum.Above) {\n              ornament.AccidentalAbove = accidental;\n            } else if (placement === PlacementEnum.Below) {\n              ornament.AccidentalBelow = accidental;\n            }\n          }\n        }\n        // add this to currentVoiceEntry\n        currentVoiceEntry.OrnamentContainer = ornament;\n      }\n    }\n  } // /addOrnament\n\n}\n","import {IXmlElement, IXmlAttribute} from \"../../../Common/FileIO/Xml\";\nimport {MusicSheet} from \"../../MusicSheet\";\nimport {ChordDegreeText, ChordSymbolContainer, ChordSymbolEnum, Degree} from \"../../VoiceData/ChordSymbolContainer\";\nimport {AccidentalEnum, NoteEnum, Pitch} from \"../../../Common/DataObjects/Pitch\";\nimport {KeyInstruction} from \"../../VoiceData/Instructions/KeyInstruction\";\nimport {ITextTranslation} from \"../../Interfaces/ITextTranslation\";\nimport log from \"loglevel\";\n\nexport class ChordSymbolReader {\n    public static readChordSymbol(xmlNode: IXmlElement, musicSheet: MusicSheet, activeKey: KeyInstruction): ChordSymbolContainer {\n        const root: IXmlElement = xmlNode.element(\"root\");\n        const kind: IXmlElement = xmlNode.element(\"kind\");\n        const kindText: IXmlAttribute = kind.attribute(\"text\");\n\n        // must be always present\n        if (!root || !kind) {\n          return undefined;\n        }\n\n        const rootStep: IXmlElement = root.element(\"root-step\");\n        const rootAlter: IXmlElement = root.element(\"root-alter\");\n\n        // a valid NoteEnum value should be present\n        if (!rootStep) {\n            return undefined;\n        }\n        let rootNote: NoteEnum;\n        try {\n            rootNote = NoteEnum[rootStep.value.trim()];\n        } catch (ex) {\n            const errorMsg: string = ITextTranslation.translateText(\"ReaderErrorMessages/ChordSymbolError\",\n                                                                    \"Invalid chord symbol\");\n            musicSheet.SheetErrors.pushMeasureError(errorMsg);\n            log.debug(\"InstrumentReader.readChordSymbol\", errorMsg, ex);\n            return undefined;\n        }\n\n        // an alteration value isn't necessary\n        let rootAlteration: AccidentalEnum = AccidentalEnum.NONE;\n        if (rootAlter) {\n            try {\n                rootAlteration = Pitch.AccidentalFromHalfTones(parseInt(rootAlter.value, 10));\n            } catch (ex) {\n                const errorMsg: string = ITextTranslation.translateText(\"ReaderErrorMessages/ChordSymbolError\",\n                                                                        \"Invalid chord symbol\");\n                musicSheet.SheetErrors.pushMeasureError(errorMsg);\n                log.debug(\"InstrumentReader.readChordSymbol\", errorMsg, ex);\n            }\n\n        }\n        // using default octave value, to be changed later\n        const rootPitch: Pitch = new Pitch(rootNote, 1, rootAlteration);\n        let kindValue: string = kind.value.trim().replace(\"-\", \"\");\n        if (kindText) {\n            switch (kindText.value) {\n                case \"aug\":\n                    kindValue = \"augmented\";\n                    break;\n                case \"dim\":\n                    kindValue = \"diminished\";\n                    break;\n                default:\n            }\n        }\n        let chordKind: ChordSymbolEnum;\n        try {\n            chordKind = ChordSymbolEnum[kindValue];\n        } catch (ex) {\n            const errorMsg: string = ITextTranslation.translateText(\"ReaderErrorMessages/ChordSymbolError\",\n                                                                    \"Invalid chord symbol\");\n            musicSheet.SheetErrors.pushMeasureError(errorMsg);\n            log.debug(\"InstrumentReader.readChordSymbol\", errorMsg, ex);\n            return undefined;\n        }\n\n        // bass is optional\n        let bassPitch: Pitch = undefined;\n        const bass: IXmlElement = xmlNode.element(\"bass\");\n        if (bass) {\n            const bassStep: IXmlElement = bass.element(\"bass-step\");\n            const bassAlter: IXmlElement = bass.element(\"bass-alter\");\n            let bassNote: NoteEnum = NoteEnum.C;\n            if (bassStep) {\n                try {\n                    bassNote = NoteEnum[bassStep.value.trim()];\n                } catch (ex) {\n                    const errorMsg: string = ITextTranslation.translateText(\"ReaderErrorMessages/ChordSymbolError\",\n                                                                            \"Invalid chord symbol\");\n                    musicSheet.SheetErrors.pushMeasureError(errorMsg);\n                    log.debug(\"InstrumentReader.readChordSymbol\", errorMsg, ex);\n                    return undefined;\n                }\n            }\n            let bassAlteration: AccidentalEnum = AccidentalEnum.NONE;\n            if (bassAlter) {\n                try {\n                    bassAlteration = Pitch.AccidentalFromHalfTones(parseInt(bassAlter.value, 10));\n                } catch (ex) {\n                    const errorMsg: string = ITextTranslation.translateText(\"ReaderErrorMessages/ChordSymbolError\",\n                                                                            \"Invalid chord symbol\");\n                    musicSheet.SheetErrors.pushMeasureError(errorMsg);\n                    log.debug(\"InstrumentReader.readChordSymbol\", errorMsg, ex);\n                }\n            }\n            bassPitch = new Pitch(bassNote, 1, bassAlteration);\n        }\n\n        // degrees are optional\n        const degrees: Degree[] = [];\n        const degreeNodes: IXmlElement[] = xmlNode.elements(\"degree\");\n        for (const degreeNode of degreeNodes) {\n            if (degreeNode) {\n                const degreeValue: IXmlElement = degreeNode.element(\"degree-value\");\n                const degreeAlter: IXmlElement = degreeNode.element(\"degree-alter\");\n                const degreeType: IXmlElement = degreeNode.element(\"degree-type\");\n                if (!degreeValue || !degreeAlter || !degreeType) {\n                    return undefined;\n                }\n\n                let value: number;\n                try {\n                    value = parseInt(degreeValue.value.trim(), 10);\n                } catch (ex) {\n                    const errorMsg: string = ITextTranslation.translateText(\"ReaderErrorMessages/ChordSymbolError\",\n                                                                            \"Invalid chord symbol\");\n                    musicSheet.SheetErrors.pushMeasureError(errorMsg);\n                    log.debug(\"InstrumentReader.readChordSymbol\", errorMsg, ex);\n                    return undefined;\n                }\n\n                let alter: AccidentalEnum;\n                try {\n                    alter = Pitch.AccidentalFromHalfTones(parseInt(degreeAlter.value, 10));\n                } catch (ex) {\n                    const errorMsg: string = ITextTranslation.translateText(\"ReaderErrorMessages/ChordSymbolError\",\n                                                                            \"Invalid chord symbol\");\n                    musicSheet.SheetErrors.pushMeasureError(errorMsg);\n                    log.debug(\"InstrumentReader.readChordSymbol\", errorMsg, ex);\n                    return undefined;\n                }\n\n                let text: ChordDegreeText;\n                try {\n                    text = ChordDegreeText[degreeType.value.trim().toLowerCase()];\n                } catch (ex) {\n                    const errorMsg: string = ITextTranslation.translateText(\n                        \"ReaderErrorMessages/ChordSymbolError\",\n                        \"Invalid chord symbol\"\n                    );\n                    musicSheet.SheetErrors.pushMeasureError(errorMsg);\n                    log.debug(\"InstrumentReader.readChordSymbol\", errorMsg, ex);\n                    return undefined;\n                }\n\n                degrees.push(new Degree(value, alter, text));\n            }\n        }\n        return new ChordSymbolContainer(rootPitch, chordKind, bassPitch, degrees, musicSheet.Rules);\n    }\n}\n","import {MusicSheet} from \"../../MusicSheet\";\nimport {Fraction} from \"../../../Common/DataObjects/Fraction\";\nimport {MultiTempoExpression} from \"../../VoiceData/Expressions/MultiTempoExpression\";\nimport {ContDynamicEnum, ContinuousDynamicExpression} from \"../../VoiceData/Expressions/ContinuousExpressions/ContinuousDynamicExpression\";\nimport {ContinuousTempoExpression} from \"../../VoiceData/Expressions/ContinuousExpressions/ContinuousTempoExpression\";\nimport {InstantaneousDynamicExpression} from \"../../VoiceData/Expressions/InstantaneousDynamicExpression\";\nimport {OctaveShift} from \"../../VoiceData/Expressions/ContinuousExpressions/OctaveShift\";\nimport {Instrument} from \"../../Instrument\";\nimport {MultiExpression} from \"../../VoiceData/Expressions/MultiExpression\";\nimport {IXmlAttribute, IXmlElement} from \"../../../Common/FileIO/Xml\";\nimport {SourceMeasure} from \"../../VoiceData/SourceMeasure\";\nimport {InstantaneousTempoExpression} from \"../../VoiceData/Expressions/InstantaneousTempoExpression\";\nimport {MoodExpression} from \"../../VoiceData/Expressions/MoodExpression\";\nimport {UnknownExpression} from \"../../VoiceData/Expressions/UnknownExpression\";\nimport {PlacementEnum} from \"../../VoiceData/Expressions/AbstractExpression\";\nimport {TextAlignmentEnum} from \"../../../Common/Enums/TextAlignment\";\nimport {ITextTranslation} from \"../../Interfaces/ITextTranslation\";\nimport log from \"loglevel\";\nimport { FontStyles } from \"../../../Common/Enums/FontStyles\";\nimport { RehearsalExpression } from \"../../VoiceData/Expressions/RehearsalExpression\";\n\nexport class ExpressionReader {\n    private musicSheet: MusicSheet;\n    private placement: PlacementEnum;\n    private soundTempo: number;\n    private soundDynamic: number;\n    private offsetDivisions: number;\n    private staffNumber: number;\n    private globalStaffIndex: number;\n    private directionTimestamp: Fraction;\n    private currentMultiTempoExpression: MultiTempoExpression;\n    private openContinuousDynamicExpressions: ContinuousDynamicExpression[] = [];\n    private openContinuousTempoExpression: ContinuousTempoExpression;\n    private activeInstantaneousDynamic: InstantaneousDynamicExpression;\n    private openOctaveShift: OctaveShift;\n    constructor(musicSheet: MusicSheet, instrument: Instrument, staffNumber: number) {\n        this.musicSheet = musicSheet;\n        this.staffNumber = staffNumber;\n        this.globalStaffIndex = musicSheet.getGlobalStaffIndexOfFirstStaff(instrument) + (staffNumber - 1);\n        this.initialize();\n    }\n    public getMultiExpression: MultiExpression;\n    public readExpressionParameters(xmlNode: IXmlElement, currentInstrument: Instrument, divisions: number,\n                                    inSourceMeasureCurrentFraction: Fraction,\n                                    inSourceMeasureFormerFraction: Fraction,\n                                    currentMeasureIndex: number,\n                                    ignoreDivisionsOffset: boolean): void {\n        this.initialize();\n        const offsetNode: IXmlElement = xmlNode.element(\"offset\");\n        if (offsetNode !== undefined && !ignoreDivisionsOffset) {\n            try {\n                this.offsetDivisions = parseInt(offsetNode.value, 10);\n            } catch (ex) {\n                const errorMsg: string = \"ReaderErrorMessages/ExpressionOffsetError\" + \", Invalid expression offset -> set to default.\";\n                log.debug(\"ExpressionReader.readExpressionParameters\", errorMsg, ex);\n                this.musicSheet.SheetErrors.pushMeasureError(errorMsg);\n                this.offsetDivisions = 0;\n            }\n        }\n        this.directionTimestamp = Fraction.createFromFraction(inSourceMeasureCurrentFraction);\n        let offsetFraction: Fraction = new Fraction(Math.abs(this.offsetDivisions), divisions * 4);\n\n        if (this.offsetDivisions > 0) {\n            if (inSourceMeasureCurrentFraction.RealValue > 0) {\n                offsetFraction = Fraction.multiply(Fraction.minus(inSourceMeasureCurrentFraction, inSourceMeasureFormerFraction), offsetFraction);\n                this.directionTimestamp = Fraction.plus(offsetFraction, inSourceMeasureCurrentFraction);\n            } else { this.directionTimestamp = Fraction.createFromFraction(offsetFraction); }\n        } else if (this.offsetDivisions < 0) {\n            if (inSourceMeasureCurrentFraction.RealValue > 0) {\n                offsetFraction = Fraction.multiply(Fraction.minus(inSourceMeasureCurrentFraction, inSourceMeasureFormerFraction), offsetFraction);\n                this.directionTimestamp = Fraction.minus(inSourceMeasureCurrentFraction, offsetFraction);\n            } else { this.directionTimestamp = Fraction.createFromFraction(offsetFraction); }\n        }\n\n        const placeAttr: IXmlAttribute = xmlNode.attribute(\"placement\");\n        if (placeAttr) {\n            try {\n                const placementString: string = placeAttr.value;\n                if (placementString === \"below\") {\n                    this.placement = PlacementEnum.Below;\n                } else if (placementString === \"above\") {\n                    this.placement = PlacementEnum.Above;\n                     }\n            } catch (ex) {\n                const errorMsg: string = ITextTranslation.translateText(  \"ReaderErrorMessages/ExpressionPlacementError\",\n                                                                          \"Invalid expression placement -> set to default.\");\n                log.debug(\"ExpressionReader.readExpressionParameters\", errorMsg, ex);\n                this.musicSheet.SheetErrors.pushMeasureError(errorMsg);\n                this.placement = PlacementEnum.Below;\n            }\n\n        }\n        if (this.placement === PlacementEnum.NotYetDefined) {\n            try {\n                const directionTypeNode: IXmlElement = xmlNode.element(\"direction-type\");\n                if (directionTypeNode) {\n                    const dynamicsNode: IXmlElement = directionTypeNode.element(\"dynamics\");\n                    if (dynamicsNode) {\n                        const defAttr: IXmlAttribute = dynamicsNode.attribute(\"default-y\");\n                        if (defAttr) {\n                            this.readExpressionPlacement(defAttr, \"read dynamics y pos\");\n                        }\n                    }\n                    const wedgeNode: IXmlElement = directionTypeNode.element(\"wedge\");\n                    if (wedgeNode) {\n                        const defAttr: IXmlAttribute = wedgeNode.attribute(\"default-y\");\n                        if (defAttr) {\n                            this.readExpressionPlacement(defAttr, \"read wedge y pos\");\n                        }\n                    }\n                    const wordsNode: IXmlElement = directionTypeNode.element(\"words\");\n                    if (wordsNode) {\n                        const defAttr: IXmlAttribute = wordsNode.attribute(\"default-y\");\n                        if (defAttr) {\n                            this.readExpressionPlacement(defAttr, \"read words y pos\");\n                        }\n                    }\n                    const rehearsalNode: IXmlElement = directionTypeNode.element(\"rehearsal\");\n                    if (rehearsalNode) {\n                        const defAttr: IXmlAttribute = rehearsalNode.attribute(\"default-y\");\n                        if (defAttr) {\n                            this.readExpressionPlacement(defAttr, \"read rehearsal pos\");\n                        }\n                    }\n                }\n            } catch (ex) {\n                const errorMsg: string = ITextTranslation.translateText(  \"ReaderErrorMessages/ExpressionPlacementError\",\n                                                                          \"Invalid expression placement -> set to default.\");\n                log.debug(\"ExpressionReader.readExpressionParameters\", errorMsg, ex);\n                this.musicSheet.SheetErrors.pushMeasureError(errorMsg);\n                this.placement = PlacementEnum.Below;\n            }\n\n        }\n        if (this.placement === PlacementEnum.NotYetDefined) {\n            if (currentInstrument.Staves.length > 1) {\n                this.placement = PlacementEnum.Below;\n            } else if (currentInstrument.HasLyrics) {\n                this.placement = PlacementEnum.Above;\n                 } else { this.placement = PlacementEnum.Below; }\n        }\n    }\n    public read(directionNode: IXmlElement, currentMeasure: SourceMeasure,\n                inSourceMeasureCurrentFraction: Fraction, inSourceMeasurePreviousFraction: Fraction = undefined): void {\n        let isTempoInstruction: boolean = false;\n        let isDynamicInstruction: boolean = false;\n        const n: IXmlElement = directionNode.element(\"sound\");\n        if (n) {\n            const tempoAttr: IXmlAttribute = n.attribute(\"tempo\");\n            const dynAttr: IXmlAttribute = n.attribute(\"dynamics\");\n            if (tempoAttr) {\n                // const match: string[] = tempoAttr.value.match(/^(\\d+\\.?\\d{0,9}|\\.\\d{1,9})$/);\n                const match: string[] = tempoAttr.value.match(/^(\\d+)(\\.\\d+)?$/);\n                if (match?.length > 0) {\n                    this.soundTempo = Math.round(Number.parseFloat(tempoAttr.value));\n                } else {\n                    log.info(\"invalid xml tempo: \" + tempoAttr.value);\n                    this.soundTempo = 100;\n                }\n                //console.log(`value: ${tempoAttr.value}\\n  soundTempo: ${this.soundTempo}`);\n                currentMeasure.TempoInBPM = this.soundTempo;\n                if (this.musicSheet.DefaultStartTempoInBpm === 0) {\n                    this.musicSheet.DefaultStartTempoInBpm = this.soundTempo;\n                }\n                this.musicSheet.HasBPMInfo = true;\n                isTempoInstruction = true;\n            }\n            if (dynAttr) {\n                const match: string[] = dynAttr.value.match(/\\d+/);\n                this.soundDynamic = match !== undefined ? parseInt(match[0], 10) : 100;\n                isDynamicInstruction = true;\n            }\n        }\n        const dirNode: IXmlElement = directionNode.element(\"direction-type\");\n        if (!dirNode) {\n            return;\n        }\n        let dirContentNode: IXmlElement = dirNode.element(\"metronome\");\n        if (dirContentNode) {\n            const beatUnit: IXmlElement = dirContentNode.element(\"beat-unit\");\n            // TODO check second \"beat-unit\", e.g. quarter = half\n            const dotted: boolean = dirContentNode.element(\"beat-unit-dot\") !== undefined;\n            const bpm: IXmlElement = dirContentNode.element(\"per-minute\");\n            // TODO check print-object = false -> don't render invisible metronome mark\n            if (beatUnit !== undefined && bpm) {\n                const useCurrentFractionForPositioning: boolean = (dirContentNode.hasAttributes && dirContentNode.attribute(\"default-x\") !== undefined);\n                if (useCurrentFractionForPositioning) {\n                    this.directionTimestamp = Fraction.createFromFraction(inSourceMeasureCurrentFraction);\n                }\n                const bpmNumber: number = parseFloat(bpm.value);\n                this.createNewTempoExpressionIfNeeded(currentMeasure);\n                const instantaneousTempoExpression: InstantaneousTempoExpression =\n                    new InstantaneousTempoExpression(undefined,\n                                                     this.placement,\n                                                     this.staffNumber,\n                                                     bpmNumber,\n                                                     this.currentMultiTempoExpression,\n                                                     true);\n                instantaneousTempoExpression.parentMeasure = currentMeasure;\n                this.soundTempo = bpmNumber;\n                // make sure to take dotted beats into account\n                currentMeasure.TempoInBPM = this.soundTempo * (dotted?1.5:1);\n                if (this.musicSheet.DefaultStartTempoInBpm === 0) {\n                    this.musicSheet.DefaultStartTempoInBpm = this.soundTempo;\n                }\n                this.musicSheet.HasBPMInfo = true;\n                instantaneousTempoExpression.dotted = dotted;\n                instantaneousTempoExpression.beatUnit = beatUnit.value;\n                this.currentMultiTempoExpression.addExpression(instantaneousTempoExpression, \"\");\n                this.currentMultiTempoExpression.CombinedExpressionsText = \"test\";\n            }\n            return;\n        }\n\n        dirContentNode = dirNode.element(\"dynamics\");\n        if (dirContentNode) {\n            const fromNotation: boolean = directionNode.element(\"notations\") !== undefined;\n            this.interpretInstantaneousDynamics(dirContentNode, currentMeasure, inSourceMeasureCurrentFraction, fromNotation);\n            return;\n        }\n\n        dirContentNode = dirNode.element(\"words\");\n        if (dirContentNode) {\n            if (isTempoInstruction) {\n                this.createNewTempoExpressionIfNeeded(currentMeasure);\n                this.currentMultiTempoExpression.CombinedExpressionsText = dirContentNode.value;\n                const instantaneousTempoExpression: InstantaneousTempoExpression =\n                    new InstantaneousTempoExpression(dirContentNode.value, this.placement, this.staffNumber, this.soundTempo, this.currentMultiTempoExpression);\n                this.currentMultiTempoExpression.addExpression(instantaneousTempoExpression, \"\");\n            } else if (!isDynamicInstruction) {\n                this.interpretWords(dirContentNode, currentMeasure, inSourceMeasureCurrentFraction);\n            }\n            return;\n        }\n\n        dirContentNode = dirNode.element(\"wedge\");\n        if (dirContentNode) {\n            this.interpretWedge(dirContentNode, currentMeasure, inSourceMeasurePreviousFraction, currentMeasure.MeasureNumber);\n            return;\n        }\n\n        dirContentNode = dirNode.element(\"rehearsal\");\n        if (dirContentNode) {\n            this.interpretRehearsalMark(dirContentNode, currentMeasure, inSourceMeasureCurrentFraction, currentMeasure.MeasureNumber);\n            return;\n        }\n    }\n    /** Usually called at end of last measure. */\n    public closeOpenExpressions(sourceMeasure: SourceMeasure, timestamp: Fraction): void {\n        for (const openCont of this.openContinuousDynamicExpressions) {\n            // add to current stafflinked expression // refactor into closeOpenContinuousDynamic?\n            this.createNewMultiExpressionIfNeeded(sourceMeasure, openCont.NumberXml, timestamp);\n\n            this.closeOpenContinuousDynamic(openCont, sourceMeasure, timestamp);\n        }\n        if (this.openContinuousTempoExpression) {\n            this.closeOpenContinuousTempo(Fraction.plus(sourceMeasure.AbsoluteTimestamp, timestamp));\n        }\n    }\n    public addOctaveShift(directionNode: IXmlElement, currentMeasure: SourceMeasure, endTimestamp: Fraction): void {\n        let octaveStaffNumber: number = 1;\n        const staffNode: IXmlElement = directionNode.element(\"staff\");\n        if (staffNode) {\n            try {\n                octaveStaffNumber = parseInt(staffNode.value, 10);\n            } catch (ex) {\n                const errorMsg: string = ITextTranslation.translateText(  \"ReaderErrorMessages/OctaveShiftStaffError\",\n                                                                          \"Invalid octave shift staff number -> set to default\");\n                this.musicSheet.SheetErrors.pushMeasureError(errorMsg);\n                octaveStaffNumber = 1;\n                log.debug(\"ExpressionReader.addOctaveShift\", errorMsg, ex);\n            }\n        }\n        const directionTypeNode: IXmlElement = directionNode.element(\"direction-type\");\n        if (directionTypeNode) {\n            const octaveShiftNode: IXmlElement = directionTypeNode.element(\"octave-shift\");\n            const placement: PlacementEnum = this.readPlacement(directionNode);\n            // if (placement === PlacementEnum.NotYetDefined && this.staffNumber === 1) {\n            //     placement = PlacementEnum.Above;\n            // }\n            if (octaveShiftNode !== undefined && octaveShiftNode.hasAttributes) {\n                try {\n                    const numberXml: number = this.readNumber(octaveShiftNode);\n                    if (octaveShiftNode.attribute(\"size\")) {\n                        const size: number = parseInt(octaveShiftNode.attribute(\"size\").value, 10);\n                        let octave: number = 0;\n                        if (size === 8) {\n                            octave = 1;\n                        } else if (size === 15) {\n                            octave = 2;\n                             }\n                        let type: string = octaveShiftNode.attribute(\"type\")?.value;\n                        if (!type) {\n                            if (placement === PlacementEnum.Above) {\n                                type = \"down\";\n                            } else if (placement === PlacementEnum.Below) {\n                                type = \"up\";\n                            }\n                        }\n                        if (type === \"up\" || type === \"down\") { // unfortunately not always given in MusicXML (e.g. Musescore 3.6.2) even though required\n                            const octaveShift: OctaveShift = new OctaveShift(type, octave);\n                            octaveShift.StaffNumber = octaveStaffNumber;\n                            this.getMultiExpression = this.createNewMultiExpressionIfNeeded(\n                                currentMeasure, numberXml);\n                            this.getMultiExpression.OctaveShiftStart = octaveShift;\n                            octaveShift.ParentStartMultiExpression = this.getMultiExpression;\n                            this.openOctaveShift = octaveShift;\n                        } else if (type === \"stop\") {\n                            if (this.openOctaveShift) {\n                                this.getMultiExpression = this.createNewMultiExpressionIfNeeded(\n                                    currentMeasure, this.openOctaveShift.numberXml, endTimestamp);\n                                const octaveShiftStartExpression: MultiExpression = this.getMultiExpression;\n                                octaveShiftStartExpression.OctaveShiftEnd = this.openOctaveShift;\n                                this.openOctaveShift.ParentEndMultiExpression = this.getMultiExpression;\n                                this.openOctaveShift = undefined;\n                            }\n                        } // TODO handle type === \"continue\"?\n                        else if (!type) {\n                            log.debug(\"octave-shift missing type in xml\");\n                        }\n                    }\n                } catch (ex) {\n                    const errorMsg: string = ITextTranslation.translateText(\"ReaderErrorMessages/OctaveShiftError\", \"Error while reading octave shift.\");\n                    this.musicSheet.SheetErrors.pushMeasureError(errorMsg);\n                    log.debug(\"ExpressionReader.addOctaveShift\", errorMsg, ex);\n                }\n            }\n        }\n    }\n    private initialize(): void {\n        this.placement = PlacementEnum.NotYetDefined;\n        this.soundTempo = 0;\n        this.soundDynamic = 0;\n        this.offsetDivisions = 0;\n    }\n    private readPlacement(node: IXmlElement): PlacementEnum {\n        const value: string = node.attribute(\"placement\")?.value;\n        if (value === \"above\") {\n            return PlacementEnum.Above;\n        } else if (value === \"below\") {\n            return PlacementEnum.Below;\n        } else {\n            return PlacementEnum.NotYetDefined;\n        }\n    }\n    private readExpressionPlacement(defAttr: IXmlAttribute, catchLogMessage: string): void {\n        try {\n            const y: number = parseInt(defAttr.value, 10);\n            if (y < 0) {\n                this.placement = PlacementEnum.Below;\n            } else if (y > 0) {\n                this.placement = PlacementEnum.Above;\n                 }\n        } catch (ex) {\n            log.debug(\"ExpressionReader.readExpressionParameters\", catchLogMessage, ex);\n        }\n\n    }\n    private interpretInstantaneousDynamics(dynamicsNode: IXmlElement,\n                                           currentMeasure: SourceMeasure,\n                                           inSourceMeasureCurrentFraction: Fraction,\n                                           fromNotation: boolean): void {\n        if (dynamicsNode.hasElements) {\n            if (dynamicsNode.hasAttributes && dynamicsNode.attribute(\"default-x\")) {\n                this.directionTimestamp = Fraction.createFromFraction(inSourceMeasureCurrentFraction);\n            }\n            const numberXml: number = this.readNumber(dynamicsNode); // probably never given, just to comply with createExpressionIfNeeded()\n            let expressionText: string = dynamicsNode.elements()[0].name;\n            if (expressionText === \"other-dynamics\") {\n                expressionText = dynamicsNode.elements()[0].value;\n            }\n            if (expressionText) {\n                // // ToDo: add doublettes recognition again as a afterReadingModule, as we can't check here if there is a repetition:\n                // // Make here a comparison with the active dynamic expression and only add it, if there is a change in dynamic\n                // // Exception is when there starts a repetition, where this might be different when repeating.\n                // // see PR #767 where this was removed\n                // let dynamicEnum: DynamicEnum;\n                // try {\n                //     dynamicEnum = DynamicEnum[expressionText];\n                // } catch (err) {\n                //     const errorMsg: string = ITextTranslation.translateText(\"ReaderErrorMessages/DynamicError\", \"Error while reading dynamic.\");\n                //     this.musicSheet.SheetErrors.pushMeasureError(errorMsg);\n                //     return;\n                // }\n                // if (!this.activeInstantaneousDynamic ||\n                //     (this.activeInstantaneousDynamic && this.activeInstantaneousDynamic.DynEnum !== dynamicEnum)) {\n                if (!fromNotation) {\n                    this.createNewMultiExpressionIfNeeded(currentMeasure, numberXml);\n                } else {\n                    this.createNewMultiExpressionIfNeeded(currentMeasure, numberXml,\n                        Fraction.createFromFraction(inSourceMeasureCurrentFraction));\n                }\n                const instantaneousDynamicExpression: InstantaneousDynamicExpression =\n                    new InstantaneousDynamicExpression(\n                        expressionText,\n                        this.soundDynamic,\n                        this.placement,\n                        this.staffNumber,\n                        currentMeasure);\n                instantaneousDynamicExpression.InMeasureTimestamp = inSourceMeasureCurrentFraction.clone();\n                this.getMultiExpression.addExpression(instantaneousDynamicExpression, \"\");\n                // addExpression unnecessary now?:\n                //const multiExpression = this.getMultiExpression(ExpressionType.InstantaneousDynamic, numberXml);\n                //multiExpression.addExpression(instantaneousDynamicExpression, \"\");\n                this.initialize();\n                if (this.activeInstantaneousDynamic) {\n                    this.activeInstantaneousDynamic.DynEnum = instantaneousDynamicExpression.DynEnum;\n                } else {\n                    this.activeInstantaneousDynamic = new InstantaneousDynamicExpression(expressionText, 0, PlacementEnum.NotYetDefined, 1, currentMeasure);\n                }\n                //}\n            }\n        }\n    }\n    private interpretWords(wordsNode: IXmlElement, currentMeasure: SourceMeasure, inSourceMeasureCurrentFraction: Fraction): void {\n        const text: string = wordsNode.value;\n        let fontStyle: FontStyles;\n        const fontStyleAttr: Attr = wordsNode.attribute(\"font-style\");\n        if (fontStyleAttr) {\n            const fontStyleText: string = fontStyleAttr.value;\n            if (fontStyleText === \"italic\") {\n                fontStyle = FontStyles.Italic;\n            }\n        }\n        if (text.length > 0) {\n            if (wordsNode.hasAttributes && wordsNode.attribute(\"default-x\")) {\n                this.directionTimestamp = Fraction.createFromFraction(inSourceMeasureCurrentFraction);\n            }\n            if (this.checkIfWordsNodeIsRepetitionInstruction(text)) {\n                return;\n            }\n            this.fillMultiOrTempoExpression(text, currentMeasure, inSourceMeasureCurrentFraction, fontStyle);\n            this.initialize();\n        }\n    }\n    private readNumber(node: IXmlElement): number {\n        let numberXml: number = 1; // default value\n        const numberStringXml: string = node.attribute(\"number\")?.value;\n        if (numberStringXml) {\n            numberXml = Number.parseInt(numberStringXml, 10);\n        }\n        return numberXml;\n    }\n    private interpretWedge(wedgeNode: IXmlElement, currentMeasure: SourceMeasure, inSourceMeasureCurrentFraction: Fraction, currentMeasureIndex: number): void {\n        if (wedgeNode !== undefined && wedgeNode.hasAttributes && wedgeNode.attribute(\"default-x\")) {\n            this.directionTimestamp = Fraction.createFromFraction(inSourceMeasureCurrentFraction);\n        }\n        const wedgeNumberXml: number = this.readNumber(wedgeNode);\n        //Ending needs to use previous fraction, not current.\n        //If current is used, when there is a system break it will mess up\n        if (wedgeNode.attribute(\"type\")?.value?.toLowerCase() === \"stop\") {\n            this.createNewMultiExpressionIfNeeded(currentMeasure, wedgeNumberXml, inSourceMeasureCurrentFraction);\n        } else {\n            this.createNewMultiExpressionIfNeeded(currentMeasure, wedgeNumberXml);\n        }\n        this.addWedge(wedgeNode, currentMeasure, inSourceMeasureCurrentFraction);\n        this.initialize();\n    }\n    private interpretRehearsalMark(\n        rehearsalNode: IXmlElement, currentMeasure: SourceMeasure,\n        inSourceMeasureCurrentFraction: Fraction, currentMeasureIndex: number): void {\n        // TODO create multi expression? for now we just need to have a static rehearsal mark though.\n        currentMeasure.rehearsalExpression = new RehearsalExpression(rehearsalNode.value, this.placement);\n    }\n    private createNewMultiExpressionIfNeeded(currentMeasure: SourceMeasure, numberXml: number,\n        timestamp: Fraction = undefined): MultiExpression {\n        if (!timestamp) {\n            timestamp = this.directionTimestamp;\n        }\n        let existingMultiExpression: MultiExpression = this.getMultiExpression;\n        if (!existingMultiExpression ||\n            existingMultiExpression &&\n            (existingMultiExpression.SourceMeasureParent !== currentMeasure ||\n                existingMultiExpression.numberXml !== numberXml ||\n                (existingMultiExpression.SourceMeasureParent === currentMeasure && existingMultiExpression.Timestamp !== timestamp))) {\n                    this.getMultiExpression = existingMultiExpression = new MultiExpression(currentMeasure, Fraction.createFromFraction(timestamp));\n            currentMeasure.StaffLinkedExpressions[this.globalStaffIndex].push(existingMultiExpression);\n        }\n        return existingMultiExpression;\n    }\n\n    private createNewTempoExpressionIfNeeded(currentMeasure: SourceMeasure): void {\n        if (!this.currentMultiTempoExpression ||\n            this.currentMultiTempoExpression.SourceMeasureParent !== currentMeasure ||\n            this.currentMultiTempoExpression.Timestamp !== this.directionTimestamp) {\n            this.currentMultiTempoExpression = new MultiTempoExpression(currentMeasure, Fraction.createFromFraction(this.directionTimestamp));\n            currentMeasure.TempoExpressions.push(this.currentMultiTempoExpression);\n        }\n    }\n    private addWedge(wedgeNode: IXmlElement, currentMeasure: SourceMeasure, inSourceMeasureCurrentFraction: Fraction): void {\n        if (wedgeNode !== undefined && wedgeNode.hasAttributes) {\n            const numberXml: number = this.readNumber(wedgeNode);\n            const type: string = wedgeNode.attribute(\"type\").value.toLowerCase();\n            try {\n                if (type === \"crescendo\" || type === \"diminuendo\") {\n                    const continuousDynamicExpression: ContinuousDynamicExpression =\n                        new ContinuousDynamicExpression(\n                            ContDynamicEnum[type],\n                            this.placement,\n                            this.staffNumber,\n                            currentMeasure,\n                            numberXml);\n                    this.openContinuousDynamicExpressions.push(continuousDynamicExpression);\n                    let multiExpression: MultiExpression = this.getMultiExpression;\n                    if (!multiExpression) {\n                        multiExpression = this.createNewMultiExpressionIfNeeded(currentMeasure, numberXml);\n                    }\n                    multiExpression.StartingContinuousDynamic = continuousDynamicExpression;\n                    continuousDynamicExpression.StartMultiExpression = multiExpression;\n                    if (this.activeInstantaneousDynamic !== undefined &&\n                        this.activeInstantaneousDynamic.StaffNumber === continuousDynamicExpression.StaffNumber) {\n                        this.activeInstantaneousDynamic = undefined;\n                    }\n                } else if (type === \"stop\") {\n                    for (const openCont of this.openContinuousDynamicExpressions) {\n                        if (openCont.NumberXml === numberXml) {\n                            if (openCont.NumberXml === numberXml) {\n                                this.closeOpenContinuousDynamic(openCont, currentMeasure, inSourceMeasureCurrentFraction);\n                            }\n                        }\n                    }\n                }\n            } catch (ex) {\n                const errorMsg: string = \"ReaderErrorMessages/WedgeError\" + \", Error while reading Crescendo / Diminuendo.\";\n                this.musicSheet.SheetErrors.pushMeasureError(errorMsg);\n                log.debug(\"ExpressionReader.addWedge\", errorMsg, ex);\n            }\n        }\n    }\n    private fillMultiOrTempoExpression(inputString: string, currentMeasure: SourceMeasure, inSourceMeasureCurrentFraction: Fraction,\n        fontStyle: FontStyles): void {\n        if (!inputString) {\n            return;\n        }\n        const tmpInputString: string = inputString.trim();\n        // split string at enumerating words or signs\n        //const splitStrings: string[] = tmpInputString.split(/([\\s,\\r\\n]and[\\s,\\r\\n]|[\\s,\\r\\n]und[\\s,\\r\\n]|[\\s,\\r\\n]e[\\s,\\r\\n]|[\\s,\\r\\n])+/g);\n\n        //for (const splitStr of splitStrings) {\n        this.createExpressionFromString(\"\", tmpInputString, currentMeasure, inSourceMeasureCurrentFraction, inputString, fontStyle);\n        //}\n    }\n    /*\n    private splitStringRecursive(input: [string, string], stringSeparators: string[]): [string, string][] {\n        let text: string = input[1];\n        let lastSeparator: string = input[0];\n        let resultList: [string, string][] = [];\n        for (let idx: number = 0, len: number = stringSeparators.length; idx < len; ++idx) {\n            let stringSeparator: string = stringSeparators[idx];\n            if (text.indexOf(stringSeparator) < 0) {\n                continue;\n            }\n            let splitStrings: string[] = text.split(stringSeparator, StringSplitOptions.RemoveEmptyEntries);\n\n            if (splitStrings.length !== 0) {\n                resultList.push(...this.splitStringRecursive([lastSeparator, splitStrings[0]], stringSeparators));\n                for (let index: number = 1; index < splitStrings.length; index++) {\n                    resultList.push(...this.splitStringRecursive([stringSeparator, splitStrings[index]], stringSeparators));\n                }\n            } else {\n                resultList.push([\"\", stringSeparator]);\n            }\n            break;\n        }\n        if (resultList.length === 0) {\n            resultList.push(input);\n        }\n        return resultList;\n    }\n    */\n    private createExpressionFromString(prefix: string, stringTrimmed: string,\n                                       currentMeasure: SourceMeasure, inSourceMeasureCurrentFraction, inputString: string,\n                                       fontStyle: FontStyles): boolean {\n        if (InstantaneousTempoExpression.isInputStringInstantaneousTempo(stringTrimmed) ||\n            ContinuousTempoExpression.isInputStringContinuousTempo(stringTrimmed)) {\n            // first check if there is already a tempo expression with the same function\n            if (currentMeasure.TempoExpressions.length > 0) {\n                for (let idx: number = 0, len: number = currentMeasure.TempoExpressions.length; idx < len; ++idx) {\n                    const multiTempoExpression: MultiTempoExpression = currentMeasure.TempoExpressions[idx];\n                    if (multiTempoExpression.Timestamp === this.directionTimestamp &&\n                        multiTempoExpression.InstantaneousTempo !== undefined &&\n                        multiTempoExpression.InstantaneousTempo.Label.indexOf(stringTrimmed) !== -1) {\n                        return false;\n                    }\n                }\n            }\n            this.createNewTempoExpressionIfNeeded(currentMeasure); // TODO process fontStyle? (also for other expressions)\n            this.currentMultiTempoExpression.CombinedExpressionsText = inputString;\n            if (InstantaneousTempoExpression.isInputStringInstantaneousTempo(stringTrimmed)) {\n                const instantaneousTempoExpression: InstantaneousTempoExpression = new InstantaneousTempoExpression(  stringTrimmed,\n                                                                                                                      this.placement,\n                                                                                                                      this.staffNumber,\n                                                                                                                      this.soundTempo,\n                                                                                                                      this.currentMultiTempoExpression);\n                this.currentMultiTempoExpression.addExpression(instantaneousTempoExpression, prefix);\n                return true;\n            }\n            if (ContinuousTempoExpression.isInputStringContinuousTempo(stringTrimmed)) {\n                const continuousTempoExpression: ContinuousTempoExpression = new ContinuousTempoExpression(\n                    stringTrimmed,\n                    this.placement,\n                    this.staffNumber,\n                    this.currentMultiTempoExpression);\n                this.currentMultiTempoExpression.addExpression(continuousTempoExpression, prefix);\n                return true;\n            }\n        }\n        if (ContinuousDynamicExpression.isInputStringContinuousDynamic(stringTrimmed)) {\n            // || InstantaneousDynamicExpression.isInputStringInstantaneousDynamic(stringTrimmed)\n            //   looks like <words> never has instantaneous dynamics like p or sf, those are in <dynamics>.\n            // if (InstantaneousDynamicExpression.isInputStringInstantaneousDynamic(stringTrimmed)) {\n            //     if (this.openContinuousDynamicExpression !== undefined && !this.openContinuousDynamicExpression.EndMultiExpression) {\n            //         this.closeOpenContinuousDynamic();\n            //     }\n            //     const instantaneousDynamicExpression: InstantaneousDynamicExpression =\n            //         new InstantaneousDynamicExpression(\n            //             stringTrimmed,\n            //             this.soundDynamic,\n            //             this.placement,\n            //             this.staffNumber,\n            //             currentMeasure);\n            //     this.getMultiExpression.addExpression(instantaneousDynamicExpression, prefix);\n            //     return true;\n            // }\n            // if (ContinuousDynamicExpression.isInputStringContinuousDynamic(stringTrimmed)) {\n            const continuousDynamicExpression: ContinuousDynamicExpression =\n                new ContinuousDynamicExpression(\n                    undefined,\n                    this.placement,\n                    this.staffNumber,\n                    currentMeasure,\n                    -1,\n                    stringTrimmed);\n            const openWordContinuousDynamic: MultiExpression = this.getMultiExpression;\n            if (openWordContinuousDynamic) {\n                this.closeOpenContinuousDynamic(openWordContinuousDynamic.StartingContinuousDynamic, currentMeasure, inSourceMeasureCurrentFraction);\n            }\n            this.createNewMultiExpressionIfNeeded(currentMeasure, -1);\n            if (this.activeInstantaneousDynamic !== undefined && this.activeInstantaneousDynamic.StaffNumber === continuousDynamicExpression.StaffNumber) {\n                this.activeInstantaneousDynamic = undefined;\n            }\n            this.openContinuousDynamicExpressions.push(continuousDynamicExpression);\n            continuousDynamicExpression.StartMultiExpression = this.getMultiExpression;\n            this.getMultiExpression.addExpression(continuousDynamicExpression, prefix);\n            return true;\n        }\n        if (MoodExpression.isInputStringMood(stringTrimmed)) {\n            const multiExpression: MultiExpression = this.createNewMultiExpressionIfNeeded(currentMeasure, -1);\n            currentMeasure.hasMoodExpressions = true;\n            const moodExpression: MoodExpression = new MoodExpression(stringTrimmed, this.placement, this.staffNumber);\n            moodExpression.fontStyle = fontStyle;\n            multiExpression.addExpression(moodExpression, prefix);\n            return true;\n        }\n\n        // create unknown:\n        const unknownMultiExpression: MultiExpression = this.createNewMultiExpressionIfNeeded(currentMeasure, -1);\n        // check here first if there might be a tempo expression doublette:\n        if (currentMeasure.TempoExpressions.length > 0) {\n            for (let idx: number = 0, len: number = currentMeasure.TempoExpressions.length; idx < len; ++idx) {\n                const multiTempoExpression: MultiTempoExpression = currentMeasure.TempoExpressions[idx];\n                if (multiTempoExpression.Timestamp === this.directionTimestamp &&\n                    multiTempoExpression.InstantaneousTempo !== undefined &&\n                    multiTempoExpression.EntriesList.length > 0 &&\n                    !this.hasDigit(stringTrimmed)) {\n                        // if at other parts of the score\n                        if (this.globalStaffIndex > 0) {\n                            // don't add duplicate TempoExpression\n                            if (multiTempoExpression.EntriesList[0].label.indexOf(stringTrimmed) >= 0) {\n                                return false;\n                        } else {\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n        let textAlignment: TextAlignmentEnum = TextAlignmentEnum.CenterBottom;\n        if (this.musicSheet.Rules.CompactMode) {\n            textAlignment = TextAlignmentEnum.LeftBottom;\n        }\n        const unknownExpression: UnknownExpression = new UnknownExpression(\n            stringTrimmed, this.placement, textAlignment, this.staffNumber);\n            unknownExpression.fontStyle = fontStyle;\n        unknownMultiExpression.addExpression(unknownExpression, prefix);\n\n        return false;\n    }\n    private closeOpenContinuousDynamic(openContinuousDynamicExpression: ContinuousDynamicExpression, endMeasure: SourceMeasure, timestamp: Fraction): void {\n        if (!openContinuousDynamicExpression) {\n            return;\n        }\n        const numberXml: number = openContinuousDynamicExpression.NumberXml;\n        openContinuousDynamicExpression.EndMultiExpression = this.createNewMultiExpressionIfNeeded(\n            endMeasure, numberXml, timestamp);\n        openContinuousDynamicExpression.StartMultiExpression.EndingContinuousDynamic = openContinuousDynamicExpression;\n        this.openContinuousDynamicExpressions = this.openContinuousDynamicExpressions.filter(dyn => dyn !== openContinuousDynamicExpression);\n    }\n    private closeOpenContinuousTempo(endTimestamp: Fraction): void {\n        this.openContinuousTempoExpression.AbsoluteEndTimestamp = endTimestamp;\n        this.openContinuousTempoExpression = undefined;\n    }\n    private checkIfWordsNodeIsRepetitionInstruction(inputString: string): boolean {\n        inputString = inputString.trim().toLowerCase();\n        if (inputString === \"coda\" ||\n            inputString === \"tocoda\" ||\n            inputString === \"to coda\" ||\n            inputString === \"fine\" ||\n            inputString === \"d.c.\" ||\n            inputString === \"dacapo\" ||\n            inputString === \"da capo\" ||\n            inputString === \"d.s.\" ||\n            inputString === \"dalsegno\" ||\n            inputString === \"dal segno\" ||\n            inputString === \"d.c. al fine\" ||\n            inputString === \"d.s. al fine\" ||\n            inputString === \"d.c. al coda\" ||\n            inputString === \"d.s. al coda\") {\n            return true;\n        }\n        return false;\n    }\n    private hasDigit(input: string): boolean {\n        return /\\d/.test(input);\n    }\n}\n","import {LyricWord} from \"../../VoiceData/Lyrics/LyricsWord\";\nimport {VoiceEntry} from \"../../VoiceData/VoiceEntry\";\nimport {IXmlElement} from \"../../../Common/FileIO/Xml\";\nimport {LyricsEntry} from \"../../VoiceData/Lyrics/LyricsEntry\";\nimport {ITextTranslation} from \"../../Interfaces/ITextTranslation\";\nimport {MusicSheet} from \"../../MusicSheet\";\n\nexport class LyricsReader {\n    private openLyricWords: { [_: number]: LyricWord } = {};\n    private currentLyricWord: LyricWord;\n    private musicSheet: MusicSheet;\n\n    constructor(musicSheet: MusicSheet) {\n        this.musicSheet = musicSheet;\n    }\n    /**\n     * This method adds a single LyricEntry to a VoiceEntry\n     * @param {IXmlElement[]} lyricNodeList\n     * @param {VoiceEntry} currentVoiceEntry\n     */\n    public addLyricEntry(lyricNodeList: IXmlElement[], currentVoiceEntry: VoiceEntry): void {\n        if (lyricNodeList) {\n            const lyricNodeListArr: IXmlElement[] = lyricNodeList;\n            for (let idx: number = 0, len: number = lyricNodeListArr.length; idx < len; ++idx) {\n                const lyricNode: IXmlElement = lyricNodeListArr[idx];\n                try {\n                    let syllabic: string = \"single\"; // Single as default\n                    if (lyricNode.element(\"text\")) {\n                        let textNode: IXmlElement = lyricNode.element(\"text\");\n                        if (lyricNode.element(\"syllabic\")) {\n                            syllabic = lyricNode.element(\"syllabic\").value;\n                        }\n                        if (textNode) {\n                            let text: string = \"\";\n                            const textAndElisionNodes: IXmlElement[] = lyricNode.elements();\n                            for (const node of textAndElisionNodes) {\n                                if (node.name === \"text\" || node.name === \"elision\") {\n                                    text += node.value;\n                                }\n                            }\n                            text = text.replace(\"  \", \" \"); // filter multiple spaces from concatenating e.g. text \"a \" with elision \" \"\n                            // <elision> separates Multiple syllabels on a single LyricNote\n                            // \"-\" text indicating separated syllabel should be ignored\n                            // we calculate the Dash element much later\n                            if (lyricNode.element(\"elision\") !== undefined && text === \"-\") {\n                                const lyricNodeChildren: IXmlElement[] = lyricNode.elements();\n                                let elisionIndex: number = 0;\n                                for (let i: number = 0; i < lyricNodeChildren.length; i++) {\n                                    const child: IXmlElement = lyricNodeChildren[i];\n                                    if (child.name === \"elision\") {\n                                        elisionIndex = i;\n                                        break;\n                                    }\n                                }\n                                let nextText: IXmlElement = undefined;\n                                let nextSyllabic: IXmlElement = undefined;\n                                // read the next nodes\n                                if (elisionIndex > 0) {\n                                    for (let i: number = elisionIndex; i < lyricNodeChildren.length; i++) {\n                                        const child: IXmlElement = lyricNodeChildren[i];\n                                        if (child.name === \"text\") {\n                                            nextText = child;\n                                        }\n                                        if (child.name === \"syllabic\") {\n                                            nextSyllabic = child;\n                                        }\n                                    }\n                                }\n                                if (nextText !== undefined && nextSyllabic) {\n                                    textNode = nextText;\n                                    syllabic = \"middle\";\n                                }\n                            }\n                            let currentLyricVerseNumber: number = 1;\n                            let errorNumberParse1: boolean = false;\n                            if (lyricNode.attributes() !== undefined && lyricNode.attribute(\"number\")) {\n                                try {\n                                    currentLyricVerseNumber = parseInt(lyricNode.attribute(\"number\").value, 10); // usually doesn't throw error, but returns NaN\n                                } catch (err) {\n                                    errorNumberParse1 = true;\n                                }\n                                errorNumberParse1 = errorNumberParse1 || isNaN(currentLyricVerseNumber);\n                                if (errorNumberParse1) {\n                                    try { // Sibelius format: \"part1verse1\"\n                                        const result: string[] = lyricNode.attribute(\"number\").value.toLowerCase().split(\"verse\");\n                                        if (result.length > 1) {\n                                            currentLyricVerseNumber = parseInt(result[1], 10);\n                                        }\n                                    } catch (err) {\n                                        const errorMsg: string =\n                                        ITextTranslation.translateText(\"ReaderErrorMessages/LyricVerseNumberError\", \"Invalid lyric verse number\");\n                                        this.musicSheet.SheetErrors.pushMeasureError(errorMsg);\n                                        continue;\n                                    }\n                                }\n                            }\n                            let lyricsEntry: LyricsEntry = undefined;\n                            if (syllabic === \"single\" || syllabic === \"end\") {\n                                if (this.openLyricWords[currentLyricVerseNumber]) { // word end given or some word still open\n                                    this.currentLyricWord = this.openLyricWords[currentLyricVerseNumber];\n                                    const syllableNumber: number = this.currentLyricWord.Syllables.length;\n                                    lyricsEntry = new LyricsEntry(text, currentLyricVerseNumber, this.currentLyricWord, currentVoiceEntry, syllableNumber);\n                                    this.currentLyricWord.Syllables.push(lyricsEntry);\n                                    delete this.openLyricWords[currentLyricVerseNumber];\n                                    this.currentLyricWord = undefined;\n                                } else { // single syllable given or end given while no word has been started\n                                    lyricsEntry = new LyricsEntry(text, currentLyricVerseNumber, undefined, currentVoiceEntry);\n                                }\n                                lyricsEntry.extend = lyricNode.element(\"extend\") !== undefined;\n                            } else if (syllabic === \"begin\") { // first finishing, if a word already is open (can only happen, when wrongly given)\n                                if (this.openLyricWords[currentLyricVerseNumber]) {\n                                    delete this.openLyricWords[currentLyricVerseNumber];\n                                    this.currentLyricWord = undefined;\n                                }\n                                this.currentLyricWord = new LyricWord();\n                                this.openLyricWords[currentLyricVerseNumber] = this.currentLyricWord;\n                                lyricsEntry = new LyricsEntry(text, currentLyricVerseNumber, this.currentLyricWord, currentVoiceEntry, 0);\n                                this.currentLyricWord.Syllables.push(lyricsEntry);\n                            } else if (syllabic === \"middle\") {\n                                if (this.openLyricWords[currentLyricVerseNumber]) {\n                                    this.currentLyricWord = this.openLyricWords[currentLyricVerseNumber];\n                                    const syllableNumber: number = this.currentLyricWord.Syllables.length;\n                                    lyricsEntry = new LyricsEntry(text, currentLyricVerseNumber, this.currentLyricWord, currentVoiceEntry, syllableNumber);\n                                    this.currentLyricWord.Syllables.push(lyricsEntry);\n                                } else {\n                                    // in case the wrong syllabel information is given, create a single Entry and add it to currentVoiceEntry\n                                    lyricsEntry = new LyricsEntry(text, currentLyricVerseNumber, undefined, currentVoiceEntry);\n                                }\n                            }\n                            // add each LyricEntry to currentVoiceEntry\n                            if (lyricsEntry) {\n                                // only add the lyric entry if not another entry has already been given:\n                                if (!currentVoiceEntry.LyricsEntries[currentLyricVerseNumber]) {\n                                    currentVoiceEntry.LyricsEntries.setValue(currentLyricVerseNumber, lyricsEntry);\n                                    if (currentVoiceEntry.ParentSourceStaffEntry?.VerticalContainerParent?.ParentMeasure) {\n                                        currentVoiceEntry.ParentSourceStaffEntry.VerticalContainerParent.ParentMeasure.hasLyrics = true;\n                                        // currentVoiceEntry.ParentSourceStaffEntry.ParentStaff.hasLyrics = true; // TODO enable, though rarely lyrics on rests\n                                    }\n                                }\n                                // save in currentInstrument the verseNumber (only once)\n                                if (!currentVoiceEntry.ParentVoice.Parent.LyricVersesNumbers[currentLyricVerseNumber]) {\n                                    currentVoiceEntry.ParentVoice.Parent.LyricVersesNumbers.push(currentLyricVerseNumber);\n                                }\n                            }\n                        }\n                    }\n                } catch (err) {\n                    const errorMsg: string = ITextTranslation.translateText(\"ReaderErrorMessages/LyricError\", \"Error while reading lyric entry.\");\n                    this.musicSheet.SheetErrors.pushMeasureError(errorMsg);\n                    continue;\n                }\n            }\n            // Squash to unique numbers\n            currentVoiceEntry.ParentVoice.Parent.LyricVersesNumbers =\n            currentVoiceEntry.ParentVoice.Parent.LyricVersesNumbers.filter((lvn, index, self) => self.indexOf(lvn) === index);\n        }\n    }\n}\n","import {SourceMeasure} from \"../../VoiceData/SourceMeasure\";\nimport {RepetitionInstruction, RepetitionInstructionEnum, AlignmentType} from \"../../VoiceData/Instructions/RepetitionInstruction\";\nimport {RepetitionInstructionComparer} from \"../../VoiceData/Instructions/RepetitionInstruction\";\nimport {ArgumentOutOfRangeException} from \"../../Exceptions\";\nimport {MusicSheet} from \"../../MusicSheet\";\n\nexport class RepetitionCalculator {\n  private musicSheet: MusicSheet;\n  private repetitionInstructions: RepetitionInstruction[] = [];\n  private currentMeasure: SourceMeasure;\n  private currentMeasureIndex: number;\n\n  /**\n   * Is called when all repetition symbols have been read from xml.\n   * Creates the repetition instructions and adds them to the corresponding measure.\n   * Creates the logical repetition objects for iteration and playback.\n   * @param musicSheet\n   * @param repetitionInstructions\n   */\n  public calculateRepetitions(musicSheet: MusicSheet, repetitionInstructions: RepetitionInstruction[]): void {\n    this.musicSheet = <MusicSheet>musicSheet;\n    this.repetitionInstructions = repetitionInstructions;\n    const sourceMeasures: SourceMeasure[] = this.musicSheet.SourceMeasures;\n    for (let idx: number = 0, len: number = this.repetitionInstructions.length; idx < len; ++idx) {\n      const instruction: RepetitionInstruction = this.repetitionInstructions[idx];\n      this.currentMeasureIndex = instruction.measureIndex;\n      this.currentMeasure = sourceMeasures[this.currentMeasureIndex];\n      this.handleRepetitionInstructions(instruction);\n    }\n\n    // if there are more than one instruction at measure begin or end,\n    // sort them according to the nesting of the repetitions:\n    for (let idx: number = 0, len: number = this.musicSheet.SourceMeasures.length; idx < len; ++idx) {\n      const measure: SourceMeasure = this.musicSheet.SourceMeasures[idx];\n      if (measure.FirstRepetitionInstructions.length > 1) {\n        measure.FirstRepetitionInstructions.sort(RepetitionInstructionComparer.Compare);\n      }\n      if (measure.LastRepetitionInstructions.length > 1) {\n        measure.LastRepetitionInstructions.sort(RepetitionInstructionComparer.Compare);\n      }\n    }\n  }\n\n  private handleRepetitionInstructions(currentRepetitionInstruction: RepetitionInstruction): boolean {\n    if (!this.currentMeasure) {\n      return false;\n    }\n    switch (currentRepetitionInstruction.type) {\n      case RepetitionInstructionEnum.StartLine:\n        this.currentMeasure.FirstRepetitionInstructions.push(currentRepetitionInstruction);\n        break;\n      case RepetitionInstructionEnum.BackJumpLine:\n        this.currentMeasure.LastRepetitionInstructions.push(currentRepetitionInstruction);\n        break;\n      case RepetitionInstructionEnum.Ending:\n        // set ending start or end\n        if (currentRepetitionInstruction.alignment === AlignmentType.Begin) {  // ending start\n          this.currentMeasure.FirstRepetitionInstructions.push(currentRepetitionInstruction);\n        } else { // ending end\n          for (let idx: number = 0, len: number = currentRepetitionInstruction.endingIndices.length; idx < len; ++idx) {\n            this.currentMeasure.LastRepetitionInstructions.push(currentRepetitionInstruction);\n          }\n        }\n        break;\n      case RepetitionInstructionEnum.Segno:\n        this.currentMeasure.FirstRepetitionInstructions.push(currentRepetitionInstruction);\n        break;\n      case RepetitionInstructionEnum.Fine:\n        this.currentMeasure.LastRepetitionInstructions.push(currentRepetitionInstruction);\n        break;\n      case RepetitionInstructionEnum.ToCoda:\n        this.currentMeasure.LastRepetitionInstructions.push(currentRepetitionInstruction);\n        break;\n      case RepetitionInstructionEnum.Coda:\n        this.currentMeasure.LastRepetitionInstructions.push(currentRepetitionInstruction);\n        break;\n      case RepetitionInstructionEnum.DaCapo:\n        this.currentMeasure.LastRepetitionInstructions.push(currentRepetitionInstruction);\n        break;\n      case RepetitionInstructionEnum.DalSegno:\n        this.currentMeasure.LastRepetitionInstructions.push(currentRepetitionInstruction);\n        break;\n      case RepetitionInstructionEnum.DalSegnoAlFine:\n        this.currentMeasure.LastRepetitionInstructions.push(currentRepetitionInstruction);\n        break;\n      case RepetitionInstructionEnum.DaCapoAlFine:\n        this.currentMeasure.LastRepetitionInstructions.push(currentRepetitionInstruction);\n        break;\n      case RepetitionInstructionEnum.DalSegnoAlCoda:\n        this.currentMeasure.LastRepetitionInstructions.push(currentRepetitionInstruction);\n        break;\n      case RepetitionInstructionEnum.DaCapoAlCoda:\n        this.currentMeasure.LastRepetitionInstructions.push(currentRepetitionInstruction);\n        break;\n      case RepetitionInstructionEnum.None:\n        break;\n      default:\n        throw new ArgumentOutOfRangeException(\"currentRepetitionInstruction\");\n    }\n    return true;\n  }\n}\n","import {MusicSheet} from \"../../MusicSheet\";\nimport {IXmlElement} from \"../../../Common/FileIO/Xml\";\nimport {SourceMeasure} from \"../../VoiceData/SourceMeasure\";\nimport {RepetitionInstruction, RepetitionInstructionEnum, AlignmentType} from \"../../VoiceData/Instructions/RepetitionInstruction\";\nimport {RepetitionInstructionComparer} from \"../../VoiceData/Instructions/RepetitionInstruction\";\nimport {StringUtil} from \"../../../Common/Strings/StringUtil\";\nexport class RepetitionInstructionReader {\n  /**\n   * A global list of all repetition instructions in the musicsheet.\n   */\n  public repetitionInstructions: RepetitionInstruction[];\n  public xmlMeasureList: IXmlElement[][];\n  private musicSheet: MusicSheet;\n  private currentMeasureIndex: number;\n\n  public set MusicSheet(value: MusicSheet) {\n    this.musicSheet = value;\n    this.xmlMeasureList = new Array(this.musicSheet.Instruments.length);\n    this.repetitionInstructions = [];\n  }\n\n  /**\n   * is called when starting reading an xml measure\n   * @param measure\n   * @param currentMeasureIndex\n   */\n  public prepareReadingMeasure(measure: SourceMeasure, currentMeasureIndex: number): void {\n    this.currentMeasureIndex = currentMeasureIndex;\n  }\n\n  public handleLineRepetitionInstructions(barlineNode: IXmlElement): boolean {\n    let pieceEndingDetected: boolean = false;\n    if (barlineNode.elements().length > 0) {\n      let location: string = \"\";\n      let hasRepeat: boolean = false;\n      let direction: string = \"\";\n      let type: string = \"\";\n      let style: string = \"\";\n      const endingIndices: number[] = [];\n\n      // read barline style\n      const styleNode: IXmlElement = barlineNode.element(\"bar-style\");\n\n      // if location is ommited in Xml, right is implied (from documentation)\n      if (styleNode) {\n        style = styleNode.value;\n      }\n      if (barlineNode.attributes().length > 0 && barlineNode.attribute(\"location\")) {\n        location = barlineNode.attribute(\"location\").value;\n      } else {\n        location = \"right\";\n      }\n      const barlineNodeElements: IXmlElement[] = barlineNode.elements();\n\n      // read repeat- or ending line information\n      for (let idx: number = 0, len: number = barlineNodeElements.length; idx < len; ++idx) {\n        const childNode: IXmlElement = barlineNodeElements[idx];\n        if (\"repeat\" === childNode.name && childNode.hasAttributes) {\n          hasRepeat = true;\n          direction = childNode.attribute(\"direction\").value;\n        } else if ( \"ending\" === childNode.name && childNode.hasAttributes &&\n                    childNode.attribute(\"type\") !== undefined && childNode.attribute(\"number\")) {\n          type = childNode.attribute(\"type\").value;\n          const num: string = childNode.attribute(\"number\").value;\n\n          // Parse the given ending indices:\n          // handle cases like: \"1, 2\" or \"1 + 2\" or even \"1 - 3, 6\"\n          const separatedEndingIndices: string[] = num.split(\"[,+]\");\n          for (let idx2: number = 0, len2: number = separatedEndingIndices.length; idx2 < len2; ++idx2) {\n            const separatedEndingIndex: string = separatedEndingIndices[idx2];\n            const indices: string[] = separatedEndingIndex.match(\"[0-9]\");\n\n            // check if possibly something like \"1-3\" is given..\n            if (separatedEndingIndex.search(\"-\") !== -1 && indices.length === 2) {\n              const startIndex: number = parseInt(indices[0], 10);\n              const endIndex: number = parseInt(indices[1], 10);\n              for (let index: number = startIndex; index <= endIndex; index++) {\n                endingIndices.push(index);\n              }\n            } else {\n              for (let idx3: number = 0, len3: number = indices.length; idx3 < len3; ++idx3) {\n                const index: string = indices[idx3];\n                endingIndices.push(parseInt(index, 10));\n              }\n            }\n          }\n        }\n      }\n\n      // reset measure counter if not lastMeasure\n      if (style === \"light-heavy\" && endingIndices.length === 0 && !hasRepeat) {\n        pieceEndingDetected = true;\n      }\n      if (hasRepeat || endingIndices.length > 0) {\n        if (location === \"left\") {\n          if (type === \"start\") {\n            const newInstruction: RepetitionInstruction = new RepetitionInstruction(this.currentMeasureIndex, RepetitionInstructionEnum.Ending,\n                                                                                    AlignmentType.Begin, undefined, endingIndices);\n            this.addInstruction(this.repetitionInstructions, newInstruction);\n          }\n          if (direction === \"forward\") {\n            // start new Repetition\n            const newInstruction: RepetitionInstruction = new RepetitionInstruction(this.currentMeasureIndex, RepetitionInstructionEnum.StartLine);\n            this.addInstruction(this.repetitionInstructions, newInstruction);\n          }\n        } else { // location right\n          if (type === \"stop\") {\n            const newInstruction: RepetitionInstruction = new RepetitionInstruction(this.currentMeasureIndex, RepetitionInstructionEnum.Ending,\n                                                                                    AlignmentType.End, undefined, endingIndices);\n            this.addInstruction(this.repetitionInstructions, newInstruction);\n          }\n          if (direction === \"backward\") {\n            const newInstruction: RepetitionInstruction = new RepetitionInstruction(this.currentMeasureIndex, RepetitionInstructionEnum.BackJumpLine);\n            this.addInstruction(this.repetitionInstructions, newInstruction);\n          }\n        }\n      }\n    }\n    return pieceEndingDetected;\n  }\n\n  public handleRepetitionInstructionsFromWordsOrSymbols(directionTypeNode: IXmlElement, relativeMeasurePosition: number): boolean {\n    const wordsNode: IXmlElement = directionTypeNode.element(\"words\");\n    const measureIndex: number = this.currentMeasureIndex;\n    if (wordsNode) {\n      const dsRegEx: string = \"d\\\\s?\\\\.s\\\\.\"; // Input for new RegExp(). TS eliminates the first \\\n      // must Trim string and ToLower before compare\n      const innerText: string = wordsNode.value.trim().toLowerCase();\n      if (StringUtil.StringContainsSeparatedWord(innerText, dsRegEx + \" al fine\", true)) {\n        // @correctness i don't think we should manipulate the measure index by relative position [ssch]\n        //   it's clearly assigned a measure in the xml\n        //   this has misfired in the past, see test_staverepetitions_coda_etc_positioning.musicxml\n        //   there, it put the 'To Coda' in measure 1, same as the 'Signo', which was not correct.\n        // if (relativeMeasurePosition < 0.5 && this.currentMeasureIndex < this.xmlMeasureList[0].length - 1) { // not in last measure\n        //   measureIndex--;\n        // }\n        const newInstruction: RepetitionInstruction = new RepetitionInstruction(measureIndex, RepetitionInstructionEnum.DalSegnoAlFine);\n        this.addInstruction(this.repetitionInstructions, newInstruction);\n        return true;\n      }\n      const dcRegEx: string = \"d\\\\.\\\\s?c\\\\.\";\n      if (StringUtil.StringContainsSeparatedWord(innerText, dcRegEx + \" al coda\", true)) {\n        // if (relativeMeasurePosition < 0.5) {\n        //   measureIndex--;\n        // }\n        const newInstruction: RepetitionInstruction = new RepetitionInstruction(measureIndex, RepetitionInstructionEnum.DalSegnoAlCoda);\n        this.addInstruction(this.repetitionInstructions, newInstruction);\n        return true;\n      }\n      if (StringUtil.StringContainsSeparatedWord(innerText, dcRegEx + \" al fine\", true)) {\n        // if (relativeMeasurePosition < 0.5 && this.currentMeasureIndex < this.xmlMeasureList[0].length - 1) { // not in last measure\n        //   measureIndex--;\n        // }\n        const newInstruction: RepetitionInstruction = new RepetitionInstruction(measureIndex, RepetitionInstructionEnum.DaCapoAlFine);\n        this.addInstruction(this.repetitionInstructions, newInstruction);\n        return true;\n      }\n      if (StringUtil.StringContainsSeparatedWord(innerText, dcRegEx + \" al coda\", true)) {\n        // if (relativeMeasurePosition < 0.5) {\n        //   measureIndex--;\n        // }\n        const newInstruction: RepetitionInstruction = new RepetitionInstruction(measureIndex, RepetitionInstructionEnum.DaCapoAlCoda);\n        this.addInstruction(this.repetitionInstructions, newInstruction);\n        return true;\n      }\n      if (StringUtil.StringContainsSeparatedWord(innerText, dcRegEx) ||\n        StringUtil.StringContainsSeparatedWord(innerText, \"da\\\\s?capo\", true)) {\n        // if (relativeMeasurePosition < 0.5 && this.currentMeasureIndex < this.xmlMeasureList[0].length - 1) { // not in last measure\n        //   measureIndex--;\n        // }\n        const newInstruction: RepetitionInstruction = new RepetitionInstruction(measureIndex, RepetitionInstructionEnum.DaCapo);\n        this.addInstruction(this.repetitionInstructions, newInstruction);\n        return true;\n      }\n      if (StringUtil.StringContainsSeparatedWord(innerText, dsRegEx, true) ||\n        StringUtil.StringContainsSeparatedWord(innerText, \"dal\\\\s?segno\", true)) {\n        // if (relativeMeasurePosition < 0.5 && this.currentMeasureIndex < this.xmlMeasureList[0].length - 1) { // not in last measure\n        //   measureIndex--;\n        // }\n        let newInstruction: RepetitionInstruction;\n        if (StringUtil.StringContainsSeparatedWord(innerText, \"al\\\\s?coda\", true)) {\n          newInstruction = new RepetitionInstruction(measureIndex, RepetitionInstructionEnum.DalSegnoAlCoda);\n        } else {\n          newInstruction = new RepetitionInstruction(measureIndex, RepetitionInstructionEnum.DalSegno);\n        }\n        this.addInstruction(this.repetitionInstructions, newInstruction);\n        return true;\n      }\n      if (StringUtil.StringContainsSeparatedWord(innerText, \"to\\\\s?coda\", true) ||\n        StringUtil.StringContainsSeparatedWord(innerText, \"a (la )?coda\", true)) {\n        // if (relativeMeasurePosition < 0.5) {\n        //   measureIndex--;\n        // }\n        const newInstruction: RepetitionInstruction = new RepetitionInstruction(measureIndex, RepetitionInstructionEnum.ToCoda);\n        this.addInstruction(this.repetitionInstructions, newInstruction);\n        return true;\n      }\n      if (StringUtil.StringContainsSeparatedWord(innerText, \"fine\", true)) {\n        // if (relativeMeasurePosition < 0.5) {\n        //   measureIndex--;\n        // }\n        const newInstruction: RepetitionInstruction = new RepetitionInstruction(measureIndex, RepetitionInstructionEnum.Fine);\n        this.addInstruction(this.repetitionInstructions, newInstruction);\n        return true;\n      }\n      if (StringUtil.StringContainsSeparatedWord(innerText, \"coda\", true)) {\n        // if (relativeMeasurePosition > 0.5) {\n        //   measureIndex++;\n        // }\n        const newInstruction: RepetitionInstruction = new RepetitionInstruction(measureIndex, RepetitionInstructionEnum.Coda);\n        this.addInstruction(this.repetitionInstructions, newInstruction);\n        return true;\n      }\n      if (StringUtil.StringContainsSeparatedWord(innerText, \"segno\", true)) {\n        // if (relativeMeasurePosition > 0.5) {\n        //   measureIndex++;\n        // }\n        const newInstruction: RepetitionInstruction = new RepetitionInstruction(measureIndex, RepetitionInstructionEnum.Segno);\n        this.addInstruction(this.repetitionInstructions, newInstruction);\n        return true;\n      }\n    } else if (directionTypeNode.element(\"segno\")) {\n      // if (relativeMeasurePosition > 0.5) {\n      //   measureIndex++;\n      // }\n      const newInstruction: RepetitionInstruction = new RepetitionInstruction(measureIndex, RepetitionInstructionEnum.Segno);\n      this.addInstruction(this.repetitionInstructions, newInstruction);\n      return true;\n    } else if (directionTypeNode.element(\"coda\")) {\n      // if (relativeMeasurePosition > 0.5) {\n      //   measureIndex++;\n      // }\n      const newInstruction: RepetitionInstruction = new RepetitionInstruction(measureIndex, RepetitionInstructionEnum.Coda);\n      this.addInstruction(this.repetitionInstructions, newInstruction);\n      return true;\n    }\n    return false;\n  }\n\n  public removeRedundantInstructions(): void {\n    let segnoCount: number = 0;\n    let codaCount: number = 0;\n    //const fineCount: number = 0;\n    let toCodaCount: number = 0;\n    let dalSegnaCount: number = 0;\n    for (let index: number = 0; index < this.repetitionInstructions.length; index++) {\n      const instruction: RepetitionInstruction = this.repetitionInstructions[index];\n      switch (instruction.type) {\n        case RepetitionInstructionEnum.Coda:\n          if (toCodaCount > 0) {\n            if (this.findInstructionInPreviousMeasure(index, instruction.measureIndex, RepetitionInstructionEnum.ToCoda)) {\n              instruction.type = RepetitionInstructionEnum.None;\n            }\n          }\n          if (codaCount === 0 && toCodaCount === 0) {\n            instruction.type = RepetitionInstructionEnum.ToCoda;\n            instruction.alignment = AlignmentType.End;\n            instruction.measureIndex--;\n          }\n          break;\n        case RepetitionInstructionEnum.Segno:\n          if (segnoCount - dalSegnaCount > 0) { // two segnos in a row\n            let foundInstruction: boolean = false;\n            for (let idx: number = 0, len: number = this.repetitionInstructions.length; idx < len; ++idx) {\n              const instr: RepetitionInstruction = this.repetitionInstructions[idx];\n              if (instruction.measureIndex - instr.measureIndex === 1) {\n                switch (instr.type) {\n                  case RepetitionInstructionEnum.BackJumpLine:\n                    if (toCodaCount - codaCount > 0) { // open toCoda existing\n                      instr.type = RepetitionInstructionEnum.DalSegnoAlCoda;\n                    } else {\n                      instr.type = RepetitionInstructionEnum.DalSegno;\n                    }\n                    instruction.type = RepetitionInstructionEnum.None;\n                    foundInstruction = true;\n                    break;\n                  case RepetitionInstructionEnum.DalSegno:\n                  case RepetitionInstructionEnum.DalSegnoAlFine:\n                  case RepetitionInstructionEnum.DalSegnoAlCoda:\n                    instruction.type = RepetitionInstructionEnum.None;\n                    foundInstruction = true;\n                    break;\n                  default:\n                    break;\n                }\n              }\n              if (foundInstruction) {\n                break;\n              }\n            }\n            if (foundInstruction) {\n              break;\n            }\n            // convert to dal segno instruction:\n            if (toCodaCount - codaCount > 0) { // open toCoda existing\n              instruction.type = RepetitionInstructionEnum.DalSegnoAlCoda;\n            } else {\n              instruction.type = RepetitionInstructionEnum.DalSegno;\n            }\n            instruction.alignment = AlignmentType.End;\n            instruction.measureIndex--;\n          }\n          break;\n        default:\n          break;\n      }\n\n      // check if this  instruction already exists or is otherwise redundant:\n      if (this.backwardSearchForPreviousIdenticalInstruction(index, instruction) || instruction.type === RepetitionInstructionEnum.None) {\n        this.repetitionInstructions.splice(index, 1);\n        index--;\n      } else {\n        switch (instruction.type) {\n          case RepetitionInstructionEnum.Fine:\n            //fineCount++;\n            break;\n          case RepetitionInstructionEnum.ToCoda:\n            toCodaCount++;\n            break;\n          case RepetitionInstructionEnum.Coda:\n            codaCount++;\n            break;\n          case RepetitionInstructionEnum.Segno:\n            segnoCount++;\n            break;\n          case RepetitionInstructionEnum.DalSegnoAlFine:\n          case RepetitionInstructionEnum.DalSegnoAlCoda:\n            dalSegnaCount++;\n            break;\n          default:\n            break;\n        }\n      }\n    }\n    this.repetitionInstructions.sort(RepetitionInstructionComparer.Compare);\n  }\n\n  private findInstructionInPreviousMeasure(currentInstructionIndex: number, currentMeasureIndex: number, searchedType: RepetitionInstructionEnum): boolean {\n    for (let index: number = currentInstructionIndex - 1; index >= 0; index--) {\n      const instruction: RepetitionInstruction = this.repetitionInstructions[index];\n      if (currentMeasureIndex - instruction.measureIndex === 1 && instruction.type === searchedType) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  private backwardSearchForPreviousIdenticalInstruction(currentInstructionIndex: number, currentInstruction: RepetitionInstruction): boolean {\n    for (let index: number = currentInstructionIndex - 1; index >= 0; index--) {\n      const instruction: RepetitionInstruction = this.repetitionInstructions[index];\n      if (instruction.equals(currentInstruction)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  private addInstruction(currentRepetitionInstructions: RepetitionInstruction[], newInstruction: RepetitionInstruction): void {\n    let addInstruction: boolean = true;\n    for (let idx: number = 0, len: number = currentRepetitionInstructions.length; idx < len; ++idx) {\n      const repetitionInstruction: RepetitionInstruction = currentRepetitionInstructions[idx];\n      if (newInstruction.equals(repetitionInstruction)) {\n        addInstruction = false;\n        break;\n      }\n    }\n    if (addInstruction) {\n      currentRepetitionInstructions.push(newInstruction);\n    }\n  }\n}\n","import { MusicSheet } from \"../../MusicSheet\";\nimport { IXmlElement, IXmlAttribute } from \"../../../Common/FileIO/Xml\";\nimport { Slur } from \"../../VoiceData/Expressions/ContinuousExpressions/Slur\";\nimport { Note } from \"../../VoiceData/Note\";\nimport log from \"loglevel\";\nimport { ITextTranslation } from \"../../Interfaces/ITextTranslation\";\nimport { PlacementEnum } from \"../../VoiceData/Expressions\";\n\nexport class SlurReader {\n    private musicSheet: MusicSheet;\n    private openSlurDict: { [_: number]: Slur } = {};\n    constructor(musicSheet: MusicSheet) {\n        this.musicSheet = musicSheet;\n    }\n    public addSlur(slurNodes: IXmlElement[], currentNote: Note): void {\n        try {\n            if (slurNodes) {\n                for (const slurNode of slurNodes) {\n                    if (slurNode.attributes().length > 0) {\n                        const type: string = slurNode.attribute(\"type\").value;\n                        let slurNumber: number = 1;\n                        try {\n                            const slurNumberAttribute: IXmlAttribute = slurNode.attribute(\"number\");\n                            if (slurNumberAttribute) {\n                                slurNumber = parseInt(slurNode.attribute(\"number\").value, 10);\n                            }\n                        } catch (ex) {\n                            log.debug(\"VoiceGenerator.addSlur number: \", ex);\n                        }\n\n                        let slurPlacementXml: PlacementEnum = PlacementEnum.NotYetDefined;\n                        const placementAttr: Attr = slurNode.attribute(\"placement\");\n                        if (placementAttr && placementAttr.value) {\n                            if (placementAttr.value === \"above\") {\n                                slurPlacementXml = PlacementEnum.Above;\n                            } else if (placementAttr.value === \"below\") {\n                                slurPlacementXml = PlacementEnum.Below;\n                            }\n                        }\n                        const orientationAttr: Attr = slurNode.attribute(\"orientation\"); // alternative for placement, used by Sibelius\n                        if (orientationAttr && orientationAttr.value) {\n                            if (orientationAttr.value === \"over\") {\n                                slurPlacementXml = PlacementEnum.Above;\n                            } else if (orientationAttr.value === \"under\") {\n                                slurPlacementXml = PlacementEnum.Below;\n                            }\n                        }\n                        if (type === \"start\") {\n                            let slur: Slur = this.openSlurDict[slurNumber];\n                            if (!slur) {\n                                slur = new Slur();\n                                this.openSlurDict[slurNumber] = slur;\n                            }\n                            slur.StartNote = currentNote;\n                            slur.PlacementXml = slurPlacementXml;\n                        } else if (type === \"stop\") {\n                            const slur: Slur = this.openSlurDict[slurNumber];\n                            if (slur) {\n                                slur.EndNote = currentNote;\n                                // check if not already a slur with same notes has been given:\n                                if (!currentNote.checkForDoubleSlur(slur)) {\n                                    // if not, link slur to notes:\n                                    currentNote.NoteSlurs.push(slur);\n                                    const slurStartNote: Note = slur.StartNote;\n                                    slurStartNote.NoteSlurs.push(slur);\n                                }\n                                delete this.openSlurDict[slurNumber];\n                            }\n                        }\n                    }\n                }\n            }\n        } catch (err) {\n            const errorMsg: string = ITextTranslation.translateText(\"ReaderErrorMessages/SlurError\", \"Error while reading slur.\");\n            this.musicSheet.SheetErrors.pushMeasureError(errorMsg);\n        }\n    }\n}\n","// created from 'create-ts-index'\n\nexport * from \"./ArticulationReader\";\nexport * from \"./ChordSymbolReader\";\nexport * from \"./ExpressionReader\";\nexport * from \"./LyricsReader\";\nexport * from \"./RepetitionCalculator\";\nexport * from \"./RepetitionInstructionReader\";\nexport * from \"./SlurReader\";\n","import log from \"loglevel\";\nimport { IVoiceMeasureReadPlugin } from \"../Interfaces/IVoiceMeasureReadPlugin\";\nimport { VoiceEntry, RhythmInstruction, KeyInstruction } from \"../VoiceData\";\n\nexport class ReaderPluginManager {\n    private voiceMeasureReadPlugins: IVoiceMeasureReadPlugin[] = [];\n    public addVoiceMeasureReadPlugin(plugin: IVoiceMeasureReadPlugin): void {\n        this.voiceMeasureReadPlugins.push(plugin);\n    }\n    public processVoiceMeasureReadPlugins(measureVoiceEntries: VoiceEntry[], activeKey: KeyInstruction, currentRhythm: RhythmInstruction): void {\n        for (const plugin of this.voiceMeasureReadPlugins) {\n            try {\n                plugin.measureReadCalculations(measureVoiceEntries, activeKey, currentRhythm);\n            } catch (ex) {\n                log.info(\"VoiceGenerator.addSingleNote: \", ex);\n            }\n\n        }\n    }\n}\n","import { LinkedVoice } from \"../VoiceData/LinkedVoice\";\nimport { Voice } from \"../VoiceData/Voice\";\nimport { MusicSheet } from \"../MusicSheet\";\nimport { VoiceEntry, StemDirectionType } from \"../VoiceData/VoiceEntry\";\nimport { Note } from \"../VoiceData/Note\";\nimport { SourceMeasure } from \"../VoiceData/SourceMeasure\";\nimport { SourceStaffEntry } from \"../VoiceData/SourceStaffEntry\";\nimport { Beam } from \"../VoiceData/Beam\";\nimport { Tie } from \"../VoiceData/Tie\";\nimport { TieTypes } from \"../../Common/Enums/\";\nimport { Tuplet } from \"../VoiceData/Tuplet\";\nimport { Fraction } from \"../../Common/DataObjects/Fraction\";\nimport { IXmlElement } from \"../../Common/FileIO/Xml\";\nimport { ITextTranslation } from \"../Interfaces/ITextTranslation\";\nimport { LyricsReader } from \"../ScoreIO/MusicSymbolModules/LyricsReader\";\nimport { MusicSheetReadingException } from \"../Exceptions\";\nimport { AccidentalEnum } from \"../../Common/DataObjects/Pitch\";\nimport { NoteEnum } from \"../../Common/DataObjects/Pitch\";\nimport { Staff } from \"../VoiceData/Staff\";\nimport { StaffEntryLink } from \"../VoiceData/StaffEntryLink\";\nimport { VerticalSourceStaffEntryContainer } from \"../VoiceData/VerticalSourceStaffEntryContainer\";\nimport log from \"loglevel\";\nimport { Pitch } from \"../../Common/DataObjects/Pitch\";\nimport { IXmlAttribute } from \"../../Common/FileIO/Xml\";\nimport { CollectionUtil } from \"../../Util/CollectionUtil\";\nimport { ArticulationReader } from \"./MusicSymbolModules/ArticulationReader\";\nimport { SlurReader } from \"./MusicSymbolModules/SlurReader\";\nimport { Notehead } from \"../VoiceData/Notehead\";\nimport { Arpeggio, ArpeggioType } from \"../VoiceData/Arpeggio\";\nimport { NoteType, NoteTypeHandler } from \"../VoiceData/NoteType\";\nimport { TabNote } from \"../VoiceData/TabNote\";\nimport { PlacementEnum } from \"../VoiceData/Expressions/AbstractExpression\";\nimport { ReaderPluginManager } from \"./ReaderPluginManager\";\nimport { Instrument } from \"../Instrument\";\n\nexport class VoiceGenerator {\n  constructor(pluginManager: ReaderPluginManager, staff: Staff, voiceId: number, slurReader: SlurReader, mainVoice: Voice = undefined) {\n    this.staff = staff;\n    this.instrument = staff.ParentInstrument;\n    this.musicSheet = this.instrument.GetMusicSheet;\n    this.slurReader = slurReader;\n    this.pluginManager = pluginManager;\n    if (mainVoice) {\n      this.voice = new LinkedVoice(this.instrument, voiceId, mainVoice);\n    } else {\n      this.voice = new Voice(this.instrument, voiceId);\n    }\n    this.instrument.Voices.push(this.voice); // apparently necessary for cursor.next(), for \"cursor with hidden instrument\" test\n    this.staff.Voices.push(this.voice);\n    this.lyricsReader = new LyricsReader(this.musicSheet);\n    this.articulationReader = new ArticulationReader(this.musicSheet.Rules);\n  }\n\n  public pluginManager: ReaderPluginManager; // currently only used in audio player\n  private slurReader: SlurReader;\n  private lyricsReader: LyricsReader;\n  private articulationReader: ArticulationReader;\n  private musicSheet: MusicSheet;\n  private voice: Voice;\n  private currentVoiceEntry: VoiceEntry;\n  private currentNote: Note;\n  private currentMeasure: SourceMeasure;\n  private currentStaffEntry: SourceStaffEntry;\n  private staff: Staff;\n  private instrument: Instrument;\n  // private lastBeamTag: string = \"\";\n  private openBeams: Beam[] = []; // works like a stack, with push and pop\n  private beamNumberOffset: number = 0;\n  private get openTieDict(): { [_: number]: Tie } { return this.staff.openTieDict; }\n  private currentOctaveShift: number = 0;\n  private tupletDict: { [_: number]: Tuplet } = {};\n  private openTupletNumber: number = 0;\n\n  public get GetVoice(): Voice {\n    return this.voice;\n  }\n\n  public get OctaveShift(): number {\n    return this.currentOctaveShift;\n  }\n\n  public set OctaveShift(value: number) {\n    this.currentOctaveShift = value;\n  }\n\n  /**\n   * Create new [[VoiceEntry]], add it to given [[SourceStaffEntry]] and if given so, to [[Voice]].\n   * @param musicTimestamp\n   * @param parentStaffEntry\n   * @param addToVoice\n   * @param isGrace States whether the new VoiceEntry (only) has grace notes\n   */\n  public createVoiceEntry(musicTimestamp: Fraction, parentStaffEntry: SourceStaffEntry, addToVoice: boolean,\n                          isGrace: boolean = false, graceNoteSlash: boolean = false, graceSlur: boolean = false): void {\n    this.currentVoiceEntry = new VoiceEntry(musicTimestamp.clone(), this.voice, parentStaffEntry, isGrace, graceNoteSlash, graceSlur);\n    if (addToVoice) {\n      this.voice.VoiceEntries.push(this.currentVoiceEntry);\n    }\n  }\n\n  /**\n   * Create [[Note]]s and handle Lyrics, Articulations, Beams, Ties, Slurs, Tuplets.\n   * @param noteNode\n   * @param noteDuration\n   * @param divisions\n   * @param restNote\n   * @param parentStaffEntry\n   * @param parentMeasure\n   * @param measureStartAbsoluteTimestamp\n   * @param maxTieNoteFraction\n   * @param chord\n   * @param octavePlusOne Software like Guitar Pro gives one octave too low, so we need to add one\n   * @param printObject whether the note should be rendered (true) or invisible (false)\n   * @returns {Note}\n   */\n  public read(noteNode: IXmlElement, noteDuration: Fraction, typeDuration: Fraction, noteTypeXml: NoteType, normalNotes: number, restNote: boolean,\n              parentStaffEntry: SourceStaffEntry, parentMeasure: SourceMeasure,\n              measureStartAbsoluteTimestamp: Fraction, maxTieNoteFraction: Fraction, chord: boolean, octavePlusOne: boolean,\n              printObject: boolean, isCueNote: boolean, isGraceNote: boolean, stemDirectionXml: StemDirectionType, tremoloStrokes: number,\n              stemColorXml: string, noteheadColorXml: string, vibratoStrokes: boolean,\n              dotsXml: number): Note {\n    this.currentStaffEntry = parentStaffEntry;\n    this.currentMeasure = parentMeasure;\n    //log.debug(\"read called:\", restNote);\n\n    try {\n      this.currentNote = restNote\n        ? this.addRestNote(noteNode.element(\"rest\"), noteDuration, noteTypeXml, normalNotes, printObject, isCueNote, noteheadColorXml)\n        : this.addSingleNote(noteNode, noteDuration, noteTypeXml, typeDuration, normalNotes, chord, octavePlusOne,\n                             printObject, isCueNote, isGraceNote, stemDirectionXml, tremoloStrokes, stemColorXml, noteheadColorXml, vibratoStrokes);\n      this.currentNote.DotsXml = dotsXml;\n      // read lyrics\n      const lyricElements: IXmlElement[] = noteNode.elements(\"lyric\");\n      if (this.lyricsReader !== undefined && lyricElements) {\n        this.lyricsReader.addLyricEntry(lyricElements, this.currentVoiceEntry);\n        this.voice.Parent.HasLyrics = true;\n      }\n      let hasTupletCommand: boolean = false;\n      const notationNode: IXmlElement = noteNode.element(\"notations\");\n      if (notationNode) {\n        // read articulations\n        if (this.articulationReader) {\n          this.readArticulations(notationNode, this.currentVoiceEntry, this.currentNote);\n        }\n        // read slurs\n        const slurElements: IXmlElement[] = notationNode.elements(\"slur\");\n        if (this.slurReader !== undefined &&\n            slurElements.length > 0 &&\n            !this.currentNote.ParentVoiceEntry.IsGrace) {\n          this.slurReader.addSlur(slurElements, this.currentNote);\n        }\n        // read Tuplets\n        const tupletElements: IXmlElement[] = notationNode.elements(\"tuplet\");\n        if (tupletElements.length > 0) {\n          this.openTupletNumber = this.addTuplet(noteNode, tupletElements);\n          hasTupletCommand = true;\n        }\n        // check for Arpeggios\n        const arpeggioNode: IXmlElement = notationNode.element(\"arpeggiate\");\n        if (arpeggioNode !== undefined) {\n          let currentArpeggio: Arpeggio;\n          if (this.currentVoiceEntry.Arpeggio) { // add note to existing Arpeggio\n            currentArpeggio = this.currentVoiceEntry.Arpeggio;\n          } else { // create new Arpeggio\n            let arpeggioAlreadyExists: boolean = false;\n            for (const voiceEntry of this.currentStaffEntry.VoiceEntries) {\n              if (voiceEntry.Arpeggio) {\n                arpeggioAlreadyExists = true;\n                currentArpeggio = voiceEntry.Arpeggio;\n                // TODO handle multiple arpeggios across multiple voices at same timestamp\n\n                // this.currentVoiceEntry.Arpeggio = currentArpeggio; // register the arpeggio in the current voice entry as well?\n                //   but then we duplicate information, and may have to take care not to render it multiple times\n\n                // we already have an arpeggio in another voice, at the current timestamp. add the notes there.\n                break;\n              }\n            }\n            if (!arpeggioAlreadyExists) {\n                let arpeggioType: ArpeggioType = ArpeggioType.ARPEGGIO_DIRECTIONLESS;\n                const directionAttr: Attr = arpeggioNode.attribute(\"direction\");\n                if (directionAttr) {\n                  switch (directionAttr.value) {\n                    case \"up\":\n                      arpeggioType = ArpeggioType.ROLL_UP;\n                      break;\n                    case \"down\":\n                      arpeggioType = ArpeggioType.ROLL_DOWN;\n                      break;\n                    default:\n                      arpeggioType = ArpeggioType.ARPEGGIO_DIRECTIONLESS;\n                  }\n                }\n\n                currentArpeggio = new Arpeggio(this.currentVoiceEntry, arpeggioType);\n                this.currentVoiceEntry.Arpeggio = currentArpeggio;\n            }\n          }\n          currentArpeggio.addNote(this.currentNote);\n        }\n        // check for Ties - must be the last check\n        const tiedNodeList: IXmlElement[] = notationNode.elements(\"tied\");\n        if (tiedNodeList.length > 0) {\n          this.addTie(tiedNodeList, measureStartAbsoluteTimestamp, maxTieNoteFraction, TieTypes.SIMPLE);\n        }\n        //check for slides, they are the same as Ties but with a different connection\n        const slideNodeList: IXmlElement[] = notationNode.elements(\"slide\");\n        if (slideNodeList.length > 0) {\n          this.addTie(slideNodeList, measureStartAbsoluteTimestamp, maxTieNoteFraction, TieTypes.SLIDE);\n        }\n        //check for guitar specific symbols:\n        const technicalNode: IXmlElement = notationNode.element(\"technical\");\n        if (technicalNode) {\n          const hammerNodeList: IXmlElement[] = technicalNode.elements(\"hammer-on\");\n          if (hammerNodeList.length > 0) {\n            this.addTie(hammerNodeList, measureStartAbsoluteTimestamp, maxTieNoteFraction, TieTypes.HAMMERON);\n          }\n          const pulloffNodeList: IXmlElement[] = technicalNode.elements(\"pull-off\");\n          if (pulloffNodeList.length > 0) {\n            this.addTie(pulloffNodeList, measureStartAbsoluteTimestamp, maxTieNoteFraction, TieTypes.PULLOFF);\n          }\n        }\n\n        // remove open ties, if there is already a gap between the last tie note and now.\n        // TODO this deletes valid ties, see #1097\n        // const openTieDict: { [_: number]: Tie } = this.openTieDict;\n        // for (const key in openTieDict) {\n        //   if (openTieDict.hasOwnProperty(key)) {\n        //     const tie: Tie = openTieDict[key];\n        //     if (Fraction.plus(tie.StartNote.ParentStaffEntry.Timestamp, tie.Duration).lt(this.currentStaffEntry.Timestamp)) {\n        //       delete openTieDict[key];\n        //     }\n        //   }\n        // }\n      }\n      // time-modification yields tuplet in currentNote\n      // mustn't execute method, if this is the Note where the Tuplet has been created\n      if (noteNode.element(\"time-modification\") !== undefined && !hasTupletCommand) {\n        this.handleTimeModificationNode(noteNode);\n      }\n    } catch (err) {\n      log.warn(err);\n      const errorMsg: string = ITextTranslation.translateText(\n        \"ReaderErrorMessages/NoteError\", \"Ignored erroneous Note.\"\n      );\n      this.musicSheet.SheetErrors.pushMeasureError(errorMsg);\n      this.musicSheet.SheetErrors.pushMeasureError(err);\n    }\n\n    return this.currentNote;\n  }\n\n  /**\n   * Create a new [[StaffEntryLink]] and sets the currenstStaffEntry accordingly.\n   * @param index\n   * @param currentStaff\n   * @param currentStaffEntry\n   * @param currentMeasure\n   * @returns {SourceStaffEntry}\n   */\n  public checkForStaffEntryLink(index: number, currentStaff: Staff, currentStaffEntry: SourceStaffEntry, currentMeasure: SourceMeasure): SourceStaffEntry {\n    const staffEntryLink: StaffEntryLink = new StaffEntryLink(this.currentVoiceEntry);\n    staffEntryLink.LinkStaffEntries.push(currentStaffEntry);\n    currentStaffEntry.Link = staffEntryLink;\n    const linkMusicTimestamp: Fraction = this.currentVoiceEntry.Timestamp.clone();\n    const verticalSourceStaffEntryContainer: VerticalSourceStaffEntryContainer = currentMeasure.getVerticalContainerByTimestamp(linkMusicTimestamp);\n    currentStaffEntry = verticalSourceStaffEntryContainer.StaffEntries[index];\n    if (!currentStaffEntry) {\n      currentStaffEntry = new SourceStaffEntry(verticalSourceStaffEntryContainer, currentStaff);\n      verticalSourceStaffEntryContainer.StaffEntries[index] = currentStaffEntry;\n    }\n    currentStaffEntry.VoiceEntries.push(this.currentVoiceEntry);\n    staffEntryLink.LinkStaffEntries.push(currentStaffEntry);\n    currentStaffEntry.Link = staffEntryLink;\n    return currentStaffEntry;\n  }\n\n  public checkForOpenBeam(): void {\n    if (this.openBeams.length > 0 && this.currentNote) {\n      this.handleOpenBeam();\n    }\n  }\n\n  public checkOpenTies(): void {\n    const openTieDict: { [key: number]: Tie } = this.openTieDict;\n    for (const key in openTieDict) {\n      if (openTieDict.hasOwnProperty(key)) {\n        const tie: Tie = openTieDict[key];\n        if (Fraction.plus(tie.StartNote.ParentStaffEntry.Timestamp, tie.Duration)\n          .lt(tie.StartNote.SourceMeasure.Duration)) {\n          delete openTieDict[key];\n        }\n      }\n    }\n  }\n\n  public hasVoiceEntry(): boolean {\n    return this.currentVoiceEntry !== undefined;\n  }\n\n  private readArticulations(notationNode: IXmlElement, currentVoiceEntry: VoiceEntry, currentNote: Note): void {\n    const articNode: IXmlElement = notationNode.element(\"articulations\");\n    if (articNode) {\n      this.articulationReader.addArticulationExpression(articNode, currentVoiceEntry);\n    }\n    const fermaNode: IXmlElement = notationNode.element(\"fermata\");\n    if (fermaNode) {\n      this.articulationReader.addFermata(fermaNode, currentVoiceEntry);\n    }\n    const tecNode: IXmlElement = notationNode.element(\"technical\");\n    if (tecNode) {\n      this.articulationReader.addTechnicalArticulations(tecNode, currentVoiceEntry, currentNote);\n    }\n    const ornaNode: IXmlElement = notationNode.element(\"ornaments\");\n    if (ornaNode) {\n      this.articulationReader.addOrnament(ornaNode, currentVoiceEntry);\n      // const tremoloNode: IXmlElement = ornaNode.element(\"tremolo\");\n      // tremolo should be and is added per note, not per VoiceEntry. see addSingleNote()\n    }\n\n  }\n\n  /**\n   * Create a new [[Note]] and adds it to the currentVoiceEntry\n   * @param node\n   * @param noteDuration\n   * @param divisions\n   * @param chord\n   * @param octavePlusOne Software like Guitar Pro gives one octave too low, so we need to add one\n   * @returns {Note}\n   */\n  private addSingleNote(node: IXmlElement, noteDuration: Fraction, noteTypeXml: NoteType, typeDuration: Fraction,\n                        normalNotes: number, chord: boolean, octavePlusOne: boolean,\n                        printObject: boolean, isCueNote: boolean, isGraceNote: boolean, stemDirectionXml: StemDirectionType, tremoloStrokes: number,\n                        stemColorXml: string, noteheadColorXml: string, vibratoStrokes: boolean): Note {\n    //log.debug(\"addSingleNote called\");\n    let noteAlter: number = 0;\n    let accidentalValue: string;\n    let noteAccidental: AccidentalEnum = AccidentalEnum.NONE;\n    let noteStep: NoteEnum = NoteEnum.C;\n    let displayStepUnpitched: NoteEnum = NoteEnum.C;\n    let noteOctave: number = 0;\n    let displayOctaveUnpitched: number = 0;\n    let playbackInstrumentId: string = undefined;\n    let noteheadShapeXml: string = undefined;\n    let noteheadFilledXml: boolean = undefined; // if undefined, the final filled parameter will be calculated from duration\n\n    const xmlnodeElementsArr: IXmlElement[] = node.elements();\n    for (let idx: number = 0, len: number = xmlnodeElementsArr.length; idx < len; ++idx) {\n      const noteElement: IXmlElement = xmlnodeElementsArr[idx];\n      try {\n        if (noteElement.name === \"pitch\") {\n          const noteElementsArr: IXmlElement[] = noteElement.elements();\n          for (let idx2: number = 0, len2: number = noteElementsArr.length; idx2 < len2; ++idx2) {\n            const pitchElement: IXmlElement = noteElementsArr[idx2];\n            noteheadShapeXml = undefined; // reinitialize for each pitch\n            noteheadFilledXml = undefined;\n            try {\n              if (pitchElement.name === \"step\") {\n                noteStep = NoteEnum[pitchElement.value];\n                if (noteStep === undefined) { // don't replace undefined check\n                  const errorMsg: string = ITextTranslation.translateText(\n                    \"ReaderErrorMessages/NotePitchError\",\n                    \"Invalid pitch while reading note.\"\n                  );\n                  this.musicSheet.SheetErrors.pushMeasureError(errorMsg);\n                  throw new MusicSheetReadingException(errorMsg, undefined);\n                }\n              } else if (pitchElement.name === \"alter\") {\n                noteAlter = parseFloat(pitchElement.value);\n                if (isNaN(noteAlter)) {\n                  const errorMsg: string = ITextTranslation.translateText(\n                    \"ReaderErrorMessages/NoteAlterationError\", \"Invalid alteration while reading note.\"\n                  );\n                  this.musicSheet.SheetErrors.pushMeasureError(errorMsg);\n                  throw new MusicSheetReadingException(errorMsg, undefined);\n                }\n                noteAccidental = Pitch.AccidentalFromHalfTones(noteAlter); // potentially overwritten by \"accidental\" noteElement\n              } else if (pitchElement.name === \"octave\") {\n                noteOctave = parseInt(pitchElement.value, 10);\n                if (isNaN(noteOctave)) {\n                  const errorMsg: string = ITextTranslation.translateText(\n                    \"ReaderErrorMessages/NoteOctaveError\", \"Invalid octave value while reading note.\"\n                  );\n                  this.musicSheet.SheetErrors.pushMeasureError(errorMsg);\n                  throw new MusicSheetReadingException(errorMsg, undefined);\n                }\n              }\n            } catch (ex) {\n              log.info(\"VoiceGenerator.addSingleNote read Step: \", ex.message);\n            }\n\n          }\n        } else if (noteElement.name === \"accidental\") {\n          accidentalValue = noteElement.value;\n          if (accidentalValue === \"natural\") {\n            noteAccidental = AccidentalEnum.NATURAL;\n            // following accidentals: ambiguous in alter value\n          } else if (accidentalValue === \"slash-flat\") {\n            noteAccidental = AccidentalEnum.SLASHFLAT;\n          } else if (accidentalValue === \"slash-quarter-sharp\") {\n            noteAccidental = AccidentalEnum.SLASHQUARTERSHARP;\n          } else if (accidentalValue === \"slash-sharp\") {\n            noteAccidental = AccidentalEnum.SLASHSHARP;\n          } else if (accidentalValue === \"double-slash-flat\") {\n            noteAccidental = AccidentalEnum.DOUBLESLASHFLAT;\n          } else if (accidentalValue === \"sori\") {\n            noteAccidental = AccidentalEnum.SORI;\n          } else if (accidentalValue === \"koron\") {\n            noteAccidental = AccidentalEnum.KORON;\n          }\n        } else if (noteElement.name === \"unpitched\") {\n          const displayStepElement: IXmlElement = noteElement.element(\"display-step\");\n          const octave: IXmlElement = noteElement.element(\"display-octave\");\n          if (octave) {\n            noteOctave = parseInt(octave.value, 10);\n            displayOctaveUnpitched = noteOctave - 3;\n            if (octavePlusOne) {\n              noteOctave += 1;\n            }\n            if (this.instrument.Staves[0].StafflineCount === 1) {\n              displayOctaveUnpitched += 1;\n            }\n          }\n          if (displayStepElement) {\n            noteStep = NoteEnum[displayStepElement.value.toUpperCase()];\n            let octaveShift: number = 0;\n            let noteValueShift: number = this.musicSheet.Rules.PercussionXMLDisplayStepNoteValueShift;\n            if (this.instrument.Staves[0].StafflineCount === 1) {\n              noteValueShift -= 3; // for percussion one line scores, we need to set the notes 3 lines lower\n            }\n            [displayStepUnpitched, octaveShift] = Pitch.lineShiftFromNoteEnum(noteStep, noteValueShift);\n            displayOctaveUnpitched += octaveShift;\n          }\n        } else if (noteElement.name === \"instrument\") {\n          if (noteElement.firstAttribute) {\n            playbackInstrumentId = noteElement.firstAttribute.value;\n          }\n        } else if (noteElement.name === \"notehead\") {\n          noteheadShapeXml = noteElement.value;\n          if (noteElement.attribute(\"filled\")) {\n            noteheadFilledXml = noteElement.attribute(\"filled\").value === \"yes\";\n          }\n        }\n      } catch (ex) {\n        log.info(\"VoiceGenerator.addSingleNote: \", ex);\n      }\n    }\n\n    noteOctave -= Pitch.OctaveXmlDifference;\n    const pitch: Pitch = new Pitch(noteStep, noteOctave, noteAccidental, accidentalValue);\n    const noteLength: Fraction = Fraction.createFromFraction(noteDuration);\n    let note: Note = undefined;\n    let stringNumber: number = -1;\n    let fretNumber: number = -1;\n    const bends: {bendalter: number, direction: string}[] = [];\n    // check for guitar tabs:\n    const notationNode: IXmlElement = node.element(\"notations\");\n    if (notationNode) {\n      const technicalNode: IXmlElement = notationNode.element(\"technical\");\n      if (technicalNode) {\n        const stringNode: IXmlElement = technicalNode.element(\"string\");\n        if (stringNode) {\n          stringNumber = parseInt(stringNode.value, 10);\n        }\n        const fretNode: IXmlElement = technicalNode.element(\"fret\");\n        if (fretNode) {\n          fretNumber = parseInt(fretNode.value, 10);\n        }\n        const bendElementsArr: IXmlElement[] = technicalNode.elements(\"bend\");\n        bendElementsArr.forEach(function (bend: IXmlElement): void {\n            const bendalterNote: IXmlElement = bend.element(\"bend-alter\");\n            const releaseNode: IXmlElement = bend.element(\"release\");\n            if (releaseNode !== undefined) {\n              bends.push({bendalter: parseInt (bendalterNote.value, 10), direction: \"down\"});\n            } else {\n              bends.push({bendalter: parseInt (bendalterNote.value, 10), direction: \"up\"});\n            }\n          });\n      }\n    }\n\n    if (stringNumber < 0 || fretNumber < 0) {\n      // create normal Note\n      note = new Note(this.currentVoiceEntry, this.currentStaffEntry, noteLength, pitch, this.currentMeasure);\n    } else {\n      // create TabNote\n      note = new TabNote(this.currentVoiceEntry, this.currentStaffEntry, noteLength, pitch, this.currentMeasure,\n                         stringNumber, fretNumber, bends, vibratoStrokes);\n    }\n\n    this.addNoteInfo(note, noteTypeXml, printObject, isCueNote, normalNotes,\n                     displayStepUnpitched, displayOctaveUnpitched,\n                     noteheadColorXml, noteheadColorXml);\n    note.TypeLength = typeDuration;\n    note.IsGraceNote = isGraceNote;\n    note.StemDirectionXml = stemDirectionXml; // maybe unnecessary, also in VoiceEntry\n    note.TremoloStrokes = tremoloStrokes; // could be a Tremolo object in future if we have more data to manage like two-note tremolo\n    note.PlaybackInstrumentId = playbackInstrumentId;\n    if ((noteheadShapeXml !== undefined && noteheadShapeXml !== \"normal\") || noteheadFilledXml !== undefined) {\n      note.Notehead = new Notehead(note, noteheadShapeXml, noteheadFilledXml);\n    } // if normal, leave note head undefined to save processing/runtime\n    if (stemDirectionXml === StemDirectionType.None) {\n      stemColorXml = \"#00000000\";  // just setting this to transparent for now\n    }\n    this.currentVoiceEntry.Notes.push(note);\n    this.currentVoiceEntry.StemDirectionXml = stemDirectionXml;\n    if (stemColorXml) {\n      this.currentVoiceEntry.StemColorXml = stemColorXml;\n      this.currentVoiceEntry.StemColor = stemColorXml;\n      note.StemColorXml = stemColorXml;\n    }\n    if (node.elements(\"beam\") && !chord) {\n      this.createBeam(node, note);\n    }\n    return note;\n  }\n\n  /**\n   * Create a new rest note and add it to the currentVoiceEntry.\n   * @param noteDuration\n   * @param divisions\n   * @returns {Note}\n   */\n  private addRestNote(node: IXmlElement, noteDuration: Fraction, noteTypeXml: NoteType,\n                      normalNotes: number, printObject: boolean, isCueNote: boolean, noteheadColorXml: string): Note {\n    const restFraction: Fraction = Fraction.createFromFraction(noteDuration);\n    const displayStepElement: IXmlElement = node.element(\"display-step\");\n    const octaveElement: IXmlElement = node.element(\"display-octave\");\n    let displayStep: NoteEnum;\n    let displayOctave: number;\n    let pitch: Pitch = undefined;\n    if (displayStepElement && octaveElement) {\n        displayStep = NoteEnum[displayStepElement.value.toUpperCase()];\n        displayOctave = parseInt(octaveElement.value, 10);\n        pitch = new Pitch(displayStep, displayOctave, AccidentalEnum.NONE);\n    }\n    const restNote: Note = new Note(this.currentVoiceEntry, this.currentStaffEntry, restFraction, pitch, this.currentMeasure, true);\n    this.addNoteInfo(restNote, noteTypeXml, printObject, isCueNote, normalNotes, displayStep, displayOctave, noteheadColorXml, noteheadColorXml);\n    this.currentVoiceEntry.Notes.push(restNote);\n    if (this.openBeams.length > 0) {\n      this.openBeams.last().ExtendedNoteList.push(restNote);\n    }\n    return restNote;\n  }\n\n  // common for \"normal\" notes and rest notes\n  private addNoteInfo(note: Note, noteTypeXml: NoteType, printObject: boolean, isCueNote: boolean, normalNotes: number,\n                      displayStep: NoteEnum, displayOctave: number,\n                      noteheadColorXml: string, noteheadColor: string): void {\n      // common for normal notes and rest note\n      note.NoteTypeXml = noteTypeXml;\n      note.PrintObject = printObject;\n      note.IsCueNote = isCueNote;\n      note.NormalNotes = normalNotes; // how many rhythmical notes the notes replace (e.g. for tuplets), see xml \"actual-notes\" and \"normal-notes\"\n      note.displayStepUnpitched = displayStep;\n      note.displayOctaveUnpitched = displayOctave;\n      note.NoteheadColorXml = noteheadColorXml; // color set in Xml, shouldn't be changed.\n      note.NoteheadColor = noteheadColorXml; // color currently used\n      // add TypeLength for rest notes like with Note?\n      // add IsGraceNote for rest notes like with Notes?\n      // add PlaybackInstrumentId for rest notes?\n    }\n\n  /**\n   * Handle the currentVoiceBeam.\n   * @param node\n   * @param note\n   */\n  private createBeam(node: IXmlElement, note: Note): void {\n    try {\n      const beamNode: IXmlElement = node.element(\"beam\");\n      let beamAttr: IXmlAttribute = undefined;\n      if (beamNode !== undefined && beamNode.hasAttributes) {\n        beamAttr = beamNode.attribute(\"number\");\n      }\n      if (beamAttr) {\n        let beamNumber: number = parseInt(beamAttr.value, 10);\n        const mainBeamNode: IXmlElement[] = node.elements(\"beam\");\n        const currentBeamTag: string = mainBeamNode[0].value;\n        if (mainBeamNode) {\n          if (currentBeamTag === \"begin\") {\n            if (beamNumber === this.openBeams.last()?.BeamNumber) {\n              // beam with same number already existed (error in XML), bump beam number\n              this.beamNumberOffset++;\n              beamNumber += this.beamNumberOffset;\n            } else if (this.openBeams.last()) {\n                this.handleOpenBeam();\n            }\n            this.openBeams.push(new Beam(beamNumber, this.beamNumberOffset));\n          } else {\n            beamNumber += this.beamNumberOffset;\n          }\n        }\n        let sameVoiceEntry: boolean = false;\n        if (!(beamNumber > 0 && beamNumber <= this.openBeams.length) || !this.openBeams[beamNumber - 1]) {\n          log.debug(\"[OSMD] invalid beamnumber\"); // this shouldn't happen, probably error in this method\n          return;\n        }\n        for (let idx: number = 0, len: number = this.openBeams[beamNumber - 1].Notes.length; idx < len; ++idx) {\n          const beamNote: Note = this.openBeams[beamNumber - 1].Notes[idx];\n          if (this.currentVoiceEntry === beamNote.ParentVoiceEntry) {\n            sameVoiceEntry = true;\n          }\n        }\n        if (!sameVoiceEntry) {\n          const openBeam: Beam = this.openBeams[beamNumber - 1];\n          openBeam.addNoteToBeam(note);\n          // const lastBeamNote: Note = openBeam.Notes.last();\n          // const graceStatusChanged: boolean = (lastBeamNote?.IsCueNote || lastBeamNote?.IsGraceNote) !== (note.IsCueNote) || (note.IsGraceNote);\n          if (currentBeamTag === \"end\") {\n            this.endBeam();\n          }\n        }\n      }\n    } catch (e) {\n      const errorMsg: string = ITextTranslation.translateText(\n        \"ReaderErrorMessages/BeamError\", \"Error while reading beam.\"\n      );\n      this.musicSheet.SheetErrors.pushMeasureError(errorMsg);\n      throw new MusicSheetReadingException(\"\", e);\n    }\n  }\n\n  private endBeam(): void {\n    this.openBeams.pop(); // pop the last open beam from the stack. the latest openBeam will be the one before that now\n    this.beamNumberOffset = Math.max(0, this.beamNumberOffset - 1);\n  }\n\n  /**\n   * Check for open [[Beam]]s at end of [[SourceMeasure]] and closes them explicity.\n   */\n  private handleOpenBeam(): void {\n    const openBeam: Beam = this.openBeams.last();\n    if (openBeam.Notes.length === 0) {\n      // TODO why is there such a beam? sample: test_percussion_display_step_from_xml\n      this.endBeam(); // otherwise beamLastNote.ParentStaffEntry will throw an undefined error\n      return;\n    }\n    if (openBeam.Notes.length === 1) {\n      const beamNote: Note = openBeam.Notes[0];\n      beamNote.NoteBeam = undefined;\n      this.endBeam();\n      return;\n    }\n    if (this.currentNote === CollectionUtil.last(openBeam.Notes)) {\n      this.endBeam();\n    } else {\n      const beamLastNote: Note = CollectionUtil.last(openBeam.Notes);\n      const beamLastNoteStaffEntry: SourceStaffEntry = beamLastNote.ParentStaffEntry;\n      const horizontalIndex: number = this.currentMeasure.getVerticalContainerIndexByTimestamp(beamLastNoteStaffEntry.Timestamp);\n      const verticalIndex: number = beamLastNoteStaffEntry.VerticalContainerParent.StaffEntries.indexOf(beamLastNoteStaffEntry);\n      if (horizontalIndex < this.currentMeasure.VerticalSourceStaffEntryContainers.length - 1) {\n        const nextStaffEntry: SourceStaffEntry = this.currentMeasure\n          .VerticalSourceStaffEntryContainers[horizontalIndex + 1]\n          .StaffEntries[verticalIndex];\n        if (nextStaffEntry) {\n          for (let idx: number = 0, len: number = nextStaffEntry.VoiceEntries.length; idx < len; ++idx) {\n            const voiceEntry: VoiceEntry = nextStaffEntry.VoiceEntries[idx];\n            if (voiceEntry.ParentVoice === this.voice) {\n              const candidateNote: Note = voiceEntry.Notes[0];\n              if (candidateNote.Length.lte(new Fraction(1, 8))) {\n                this.openBeams.last().addNoteToBeam(candidateNote);\n                this.endBeam();\n              } else {\n                this.endBeam();\n              }\n            }\n          }\n        }\n      } else {\n        this.endBeam();\n      }\n    }\n  }\n\n  /**\n   * Create a [[Tuplet]].\n   * @param node\n   * @param tupletNodeList\n   * @returns {number}\n   */\n  private addTuplet(node: IXmlElement, tupletNodeList: IXmlElement[]): number {\n    let bracketed: boolean = false; // xml bracket attribute value\n    // TODO refactor this to not duplicate lots of code for the cases tupletNodeList.length == 1 and > 1\n    if (tupletNodeList !== undefined && tupletNodeList.length > 1) {\n      let timeModNode: IXmlElement = node.element(\"time-modification\");\n      if (timeModNode) {\n        timeModNode = timeModNode.element(\"actual-notes\");\n      }\n      const tupletNodeListArr: IXmlElement[] = tupletNodeList;\n      for (let idx: number = 0, len: number = tupletNodeListArr.length; idx < len; ++idx) {\n        const tupletNode: IXmlElement = tupletNodeListArr[idx];\n        if (tupletNode !== undefined && tupletNode.attributes()) {\n          const bracketAttr: Attr = tupletNode.attribute(\"bracket\");\n          if (bracketAttr && bracketAttr.value === \"yes\") {\n            bracketed = true;\n          }\n\n          const type: Attr = tupletNode.attribute(\"type\");\n          if (type && type.value === \"start\") {\n            let tupletNumber: number = 1;\n            if (tupletNode.attribute(\"number\")) {\n              tupletNumber = parseInt(tupletNode.attribute(\"number\").value, 10);\n            }\n            let tupletLabelNumber: number = 0;\n            if (timeModNode) {\n              tupletLabelNumber = parseInt(timeModNode.value, 10);\n              if (isNaN(tupletLabelNumber)) {\n                const errorMsg: string = ITextTranslation.translateText(\n                  \"ReaderErrorMessages/TupletNoteDurationError\", \"Invalid tuplet note duration.\"\n                );\n                this.musicSheet.SheetErrors.pushMeasureError(errorMsg);\n                throw new MusicSheetReadingException(errorMsg, undefined);\n              }\n\n            }\n            const tuplet: Tuplet = new Tuplet(tupletLabelNumber, bracketed);\n            //Default to above\n            tuplet.tupletLabelNumberPlacement = PlacementEnum.Above;\n            //If we ever encounter a placement attribute for this tuplet, should override.\n            //Even previous placement attributes for the tuplet\n            const placementAttr: Attr = tupletNode.attribute(\"placement\");\n            if (placementAttr) {\n              if (placementAttr.value === \"below\") {\n                tuplet.tupletLabelNumberPlacement = PlacementEnum.Below;\n              }\n              tuplet.PlacementFromXml = true;\n            }\n            if (this.tupletDict[tupletNumber]) {\n              delete this.tupletDict[tupletNumber];\n              if (Object.keys(this.tupletDict).length === 0) {\n                this.openTupletNumber = 0;\n              } else if (Object.keys(this.tupletDict).length > 1) {\n                this.openTupletNumber--;\n              }\n            }\n            this.tupletDict[tupletNumber] = tuplet;\n            const subnotelist: Note[] = [];\n            subnotelist.push(this.currentNote);\n            tuplet.Notes.push(subnotelist);\n            tuplet.Fractions.push(this.getTupletNoteDurationFromType(node));\n            this.currentNote.NoteTuplet = tuplet;\n            this.openTupletNumber = tupletNumber;\n          } else if (type.value === \"stop\") {\n            let tupletNumber: number = 1;\n            if (tupletNode.attribute(\"number\")) {\n              tupletNumber = parseInt(tupletNode.attribute(\"number\").value, 10);\n            }\n            const tuplet: Tuplet = this.tupletDict[tupletNumber];\n            if (tuplet) {\n              const placementAttr: Attr = tupletNode.attribute(\"placement\");\n              if (placementAttr) {\n                if (placementAttr.value === \"below\") {\n                  tuplet.tupletLabelNumberPlacement = PlacementEnum.Below;\n                }  else {\n                  tuplet.tupletLabelNumberPlacement = PlacementEnum.Above;\n                }\n                tuplet.PlacementFromXml = true;\n              }\n              const subnotelist: Note[] = [];\n              subnotelist.push(this.currentNote);\n              tuplet.Notes.push(subnotelist);\n              //If our placement hasn't been from XML, check all the notes in the tuplet\n              //Search for the first non-rest and use it's stem direction\n              if (!tuplet.PlacementFromXml) {\n                let foundNonRest: boolean = false;\n                for (const subList of tuplet.Notes) {\n                  for (const note of subList) {\n                    if (!note.isRest()) {\n                      if(note.StemDirectionXml === StemDirectionType.Down) {\n                        tuplet.tupletLabelNumberPlacement = PlacementEnum.Below;\n                      } else {\n                        tuplet.tupletLabelNumberPlacement = PlacementEnum.Above;\n                      }\n                      foundNonRest = true;\n                      break;\n                    }\n                  }\n                  if (foundNonRest) {\n                    break;\n                  }\n                }\n              }\n              tuplet.Fractions.push(this.getTupletNoteDurationFromType(node));\n              this.currentNote.NoteTuplet = tuplet;\n              delete this.tupletDict[tupletNumber];\n              if (Object.keys(this.tupletDict).length === 0) {\n                this.openTupletNumber = 0;\n              } else if (Object.keys(this.tupletDict).length > 1) {\n                this.openTupletNumber--;\n              }\n            }\n          }\n        }\n      }\n    } else if (tupletNodeList[0]) {\n      const n: IXmlElement = tupletNodeList[0];\n      if (n.hasAttributes) {\n        const type: string = n.attribute(\"type\").value;\n        let tupletnumber: number = 1;\n        if (n.attribute(\"number\")) {\n          tupletnumber = parseInt(n.attribute(\"number\").value, 10);\n        }\n        const noTupletNumbering: boolean = isNaN(tupletnumber);\n\n        const bracketAttr: Attr = n.attribute(\"bracket\");\n        if (bracketAttr && bracketAttr.value === \"yes\") {\n          bracketed = true;\n        }\n        if (type === \"start\") {\n          let tupletLabelNumber: number = 0;\n          let timeModNode: IXmlElement = node.element(\"time-modification\");\n          if (timeModNode) {\n            timeModNode = timeModNode.element(\"actual-notes\");\n          }\n          if (timeModNode) {\n            tupletLabelNumber = parseInt(timeModNode.value, 10);\n            if (isNaN(tupletLabelNumber)) {\n              const errorMsg: string = ITextTranslation.translateText(\n                \"ReaderErrorMessages/TupletNoteDurationError\", \"Invalid tuplet note duration.\"\n              );\n              this.musicSheet.SheetErrors.pushMeasureError(errorMsg);\n              throw new MusicSheetReadingException(errorMsg);\n            }\n\n          }\n          if (noTupletNumbering) {\n            this.openTupletNumber++;\n            tupletnumber = this.openTupletNumber;\n          }\n          let tuplet: Tuplet = this.tupletDict[tupletnumber];\n          if (!tuplet) {\n            tuplet = this.tupletDict[tupletnumber] = new Tuplet(tupletLabelNumber, bracketed);\n            //Default to above\n            tuplet.tupletLabelNumberPlacement = PlacementEnum.Above;\n          }\n          //If we ever encounter a placement attribute for this tuplet, should override.\n          //Even previous placement attributes for the tuplet\n          const placementAttr: Attr = n.attribute(\"placement\");\n          if (placementAttr) {\n            if (placementAttr.value === \"below\") {\n              tuplet.tupletLabelNumberPlacement = PlacementEnum.Below;\n            } else {\n              //Just in case\n              tuplet.tupletLabelNumberPlacement = PlacementEnum.Above;\n            }\n            tuplet.PlacementFromXml = true;\n          }\n          const subnotelist: Note[] = [];\n          subnotelist.push(this.currentNote);\n          tuplet.Notes.push(subnotelist);\n          tuplet.Fractions.push(this.getTupletNoteDurationFromType(node));\n          this.currentNote.NoteTuplet = tuplet;\n          this.openTupletNumber = tupletnumber;\n        } else if (type === \"stop\") {\n          if (noTupletNumbering) {\n            tupletnumber = this.openTupletNumber;\n          }\n          const tuplet: Tuplet = this.tupletDict[this.openTupletNumber];\n          if (tuplet) {\n            const placementAttr: Attr = n.attribute(\"placement\");\n            if (placementAttr) {\n              if (placementAttr.value === \"below\") {\n                tuplet.tupletLabelNumberPlacement = PlacementEnum.Below;\n              } else {\n                tuplet.tupletLabelNumberPlacement = PlacementEnum.Above;\n              }\n              tuplet.PlacementFromXml = true;\n            }\n            const subnotelist: Note[] = [];\n            subnotelist.push(this.currentNote);\n            tuplet.Notes.push(subnotelist);\n            //If our placement hasn't been from XML, check all the notes in the tuplet\n            //Search for the first non-rest and use it's stem direction\n            if (!tuplet.PlacementFromXml) {\n              let foundNonRest: boolean = false;\n              for (const subList of tuplet.Notes) {\n                for (const note of subList) {\n                  if (!note.isRest()) {\n                    if(note.StemDirectionXml === StemDirectionType.Down) {\n                      tuplet.tupletLabelNumberPlacement = PlacementEnum.Below;\n                    } else {\n                      tuplet.tupletLabelNumberPlacement = PlacementEnum.Above;\n                    }\n                    foundNonRest = true;\n                    break;\n                  }\n                }\n                if (foundNonRest) {\n                  break;\n                }\n              }\n            }\n            tuplet.Fractions.push(this.getTupletNoteDurationFromType(node));\n            this.currentNote.NoteTuplet = tuplet;\n            if (Object.keys(this.tupletDict).length === 0) {\n              this.openTupletNumber = 0;\n            } else if (Object.keys(this.tupletDict).length > 1) {\n              this.openTupletNumber--;\n            }\n            delete this.tupletDict[tupletnumber];\n          }\n        }\n      }\n    }\n    return this.openTupletNumber;\n  }\n\n  /**\n   * This method handles the time-modification IXmlElement for the Tuplet case (tupletNotes not at begin/end of Tuplet).\n   * @param noteNode\n   */\n  private handleTimeModificationNode(noteNode: IXmlElement): void {\n    if (this.tupletDict[this.openTupletNumber]) {\n      try {\n        // Tuplet should already be created\n        const tuplet: Tuplet = this.tupletDict[this.openTupletNumber];\n        const notes: Note[] = CollectionUtil.last(tuplet.Notes);\n        const lastTupletVoiceEntry: VoiceEntry = notes[0].ParentVoiceEntry;\n        let noteList: Note[];\n        if (lastTupletVoiceEntry.Timestamp.Equals(this.currentVoiceEntry.Timestamp)) {\n          noteList = notes;\n        } else {\n          noteList = [];\n          tuplet.Notes.push(noteList);\n          tuplet.Fractions.push(this.getTupletNoteDurationFromType(noteNode));\n        }\n        noteList.push(this.currentNote);\n        this.currentNote.NoteTuplet = tuplet;\n      } catch (ex) {\n        const errorMsg: string = ITextTranslation.translateText(\n          \"ReaderErrorMessages/TupletNumberError\", \"Invalid tuplet number.\"\n        );\n        this.musicSheet.SheetErrors.pushMeasureError(errorMsg);\n        throw ex;\n      }\n\n    } else if (this.currentVoiceEntry.Notes.length > 0) {\n      const firstNote: Note = this.currentVoiceEntry.Notes[0];\n      if (firstNote.NoteTuplet) {\n        const tuplet: Tuplet = firstNote.NoteTuplet;\n        const notes: Note[] = CollectionUtil.last(tuplet.Notes);\n        notes.push(this.currentNote);\n        this.currentNote.NoteTuplet = tuplet;\n      }\n    }\n  }\n\n  private addTie(tieNodeList: IXmlElement[], measureStartAbsoluteTimestamp: Fraction, maxTieNoteFraction: Fraction, tieType: TieTypes): void {\n    if (tieNodeList) {\n      if (tieNodeList.length === 1) {\n        const tieNode: IXmlElement = tieNodeList[0];\n        if (tieNode !== undefined && tieNode.attributes()) {\n          const tieDirection: PlacementEnum = this.getTieDirection(tieNode);\n\n          const type: string = tieNode.attribute(\"type\").value;\n          try {\n            if (type === \"start\") {\n              const num: number = this.findCurrentNoteInTieDict(this.currentNote);\n              if (num < 0) {\n                delete this.openTieDict[num];\n              }\n              const newTieNumber: number = this.getNextAvailableNumberForTie();\n              const tie: Tie = new Tie(this.currentNote, tieType);\n              this.openTieDict[newTieNumber] = tie;\n              tie.TieNumber = newTieNumber;\n              tie.TieDirection = tieDirection;\n            } else if (type === \"stop\") {\n              const tieNumber: number = this.findCurrentNoteInTieDict(this.currentNote);\n              const tie: Tie = this.openTieDict[tieNumber];\n              if (tie) {\n                tie.AddNote(this.currentNote);\n                delete this.openTieDict[tieNumber];\n              }\n            }\n          } catch (err) {\n            const errorMsg: string = ITextTranslation.translateText(\"ReaderErrorMessages/TieError\", \"Error while reading tie.\");\n            this.musicSheet.SheetErrors.pushMeasureError(errorMsg);\n          }\n\n        }\n      } else if (tieNodeList.length === 2) { // stop+start\n        const tieNumber: number = this.findCurrentNoteInTieDict(this.currentNote);\n        if (tieNumber >= 0) {\n          const tie: Tie = this.openTieDict[tieNumber];\n          tie.AddNote(this.currentNote);\n          for (const tieNode of tieNodeList) {\n            const type: string = tieNode.attribute(\"type\").value;\n            if (type === \"start\") {\n              const placement: PlacementEnum = this.getTieDirection(tieNode);\n              tie.NoteIndexToTieDirection[tie.Notes.length - 1] = placement;\n            }\n          }\n        }\n      }\n    }\n  }\n\n  private getTieDirection(tieNode: IXmlElement): PlacementEnum {\n    let tieDirection: PlacementEnum = PlacementEnum.NotYetDefined;\n    // read tie direction/placement from XML\n    const placementAttr: IXmlAttribute = tieNode.attribute(\"placement\");\n    if (placementAttr) {\n      if (placementAttr.value === \"above\") {\n        tieDirection = PlacementEnum.Above;\n      } else if (placementAttr.value === \"below\") {\n        tieDirection = PlacementEnum.Below;\n      }\n    }\n    // tie direction can also be given like this:\n    const orientationAttr: IXmlAttribute = tieNode.attribute(\"orientation\");\n    if (orientationAttr) {\n      if (orientationAttr.value === \"over\") {\n        tieDirection = PlacementEnum.Above;\n      } else if (orientationAttr.value === \"under\") {\n        tieDirection = PlacementEnum.Below;\n      }\n    }\n    return tieDirection;\n  }\n\n  /**\n   * Find the next free int (starting from 0) to use as key in TieDict.\n   * @returns {number}\n   */\n  private getNextAvailableNumberForTie(): number {\n    const keys: string[] = Object.keys(this.openTieDict);\n    if (keys.length === 0) {\n      return 1;\n    }\n    keys.sort((a, b) => (+a - +b)); // FIXME Andrea: test\n    for (let i: number = 0; i < keys.length; i++) {\n      if (\"\" + (i + 1) !== keys[i]) {\n        return i + 1;\n      }\n    }\n    return +(keys[keys.length - 1]) + 1;\n  }\n\n  /**\n   * Search the tieDictionary for the corresponding candidateNote to the currentNote (same FundamentalNote && Octave).\n   * @param candidateNote\n   * @returns {number}\n   */\n  private findCurrentNoteInTieDict(candidateNote: Note): number {\n    const openTieDict: { [_: number]: Tie } = this.openTieDict;\n    for (const key in openTieDict) {\n      if (openTieDict.hasOwnProperty(key)) {\n        const tie: Tie = openTieDict[key];\n        const tieTabNote: TabNote = tie.Notes[0] as TabNote;\n        const tieCandidateNote: TabNote = candidateNote as TabNote;\n        if (tie.Pitch.FundamentalNote === candidateNote.Pitch.FundamentalNote && tie.Pitch.Octave === candidateNote.Pitch.Octave) {\n          return parseInt(key, 10);\n        } else if (tieTabNote.StringNumberTab !== undefined) {\n          if (tieTabNote.StringNumberTab === tieCandidateNote.StringNumberTab) {\n            return parseInt(key, 10);\n          }\n        }\n      }\n    }\n    return -1;\n  }\n\n  /**\n   * Calculate the normal duration of a [[Tuplet]] note.\n   * @param xmlNode\n   * @returns {any}\n   */\n  private getTupletNoteDurationFromType(xmlNode: IXmlElement): Fraction {\n    if (xmlNode.element(\"type\")) {\n      const typeNode: IXmlElement = xmlNode.element(\"type\");\n      if (typeNode) {\n        const type: string = typeNode.value;\n        try {\n          return NoteTypeHandler.getNoteDurationFromType(type);\n        } catch (e) {\n          const errorMsg: string = ITextTranslation.translateText(\"ReaderErrorMessages/NoteDurationError\", \"Invalid note duration.\");\n          this.musicSheet.SheetErrors.pushMeasureError(errorMsg);\n          throw new MusicSheetReadingException(\"\", e);\n        }\n\n      }\n    }\n    return undefined;\n  }\n}\n","// created from 'create-ts-index'\n\nexport * from \"./InstrumentReader\";\nexport * from \"./MusicSheetReader\";\nexport * from \"./MusicSymbolModuleFactory\";\nexport * from \"./VoiceGenerator\";\nexport * from \"./MusicSymbolModules\";\nexport * from \"./ReaderPluginManager\";\n","import {Instrument} from \"./Instrument\";\nimport {MidiInstrument} from \"./VoiceData/Instructions/ClefInstruction\";\nimport log from \"loglevel\";\n\nexport class SubInstrument {\n\n    constructor(parentInstrument: Instrument) {\n        this.parentInstrument = parentInstrument;\n        this.fixedKey = -1;\n        this.name = this.parseMidiInstrument(this.parentInstrument.Name);\n        this.midiInstrumentID = SubInstrument.midiInstrument[this.name];\n        this.volume = 1.0;\n    }\n\n    private static midiInstrument: { [key: string]: MidiInstrument } = {\n        \"alt\": MidiInstrument.Synth_Voice,\n        \"alto\": MidiInstrument.Synth_Voice,\n        \"banjo\": MidiInstrument.Banjo,\n        \"bariton\": MidiInstrument.Synth_Voice,\n        \"baritone\": MidiInstrument.Synth_Voice,\n        \"bass\": MidiInstrument.Synth_Voice,\n        \"blockflöte\": MidiInstrument.Recorder,\n        \"brass\": MidiInstrument.Trombone,\n        \"bratsche\": MidiInstrument.Viola,\n        \"cello\": MidiInstrument.Cello,\n        \"clarinet\": MidiInstrument.Clarinet,\n        \"contrabass\": MidiInstrument.Contrabass,\n        \"drums\": MidiInstrument.Percussion,\n        \"flute\": MidiInstrument.Flute,\n        \"flöte\": MidiInstrument.Flute,\n        \"frenchhorn\": MidiInstrument.French_Horn,\n        \"gitarre\": MidiInstrument.Acoustic_Guitar_nylon,\n        \"guitar\": MidiInstrument.Acoustic_Guitar_nylon,\n        \"harfe\": MidiInstrument.Orchestral_Harp,\n        \"harp\": MidiInstrument.Orchestral_Harp,\n        \"klarinette\": MidiInstrument.Clarinet,\n        \"klavier\": MidiInstrument.Acoustic_Grand_Piano,\n        \"kontrabass\": MidiInstrument.Contrabass,\n        \"oboe\": MidiInstrument.Oboe,\n        \"organ\": MidiInstrument.Church_Organ,\n        \"orgel\": MidiInstrument.Church_Organ,\n        \"orgue\": MidiInstrument.Church_Organ,\n        \"percussion\": MidiInstrument.Percussion,\n        \"piano\": MidiInstrument.Acoustic_Grand_Piano,\n        \"piccolo\": MidiInstrument.Piccolo,\n        \"posaune\": MidiInstrument.Trombone,\n        \"recorder\": MidiInstrument.Recorder,\n        \"sax\": MidiInstrument.Tenor_Sax,\n        \"schlagwerk\": MidiInstrument.Percussion,\n        \"schlagzeug\": MidiInstrument.Percussion,\n        \"sopran\": MidiInstrument.Synth_Voice,\n        \"steeldrum\": MidiInstrument.Steel_Drums,\n        \"streicher\": MidiInstrument.String_Ensemble_1,\n        \"strings\": MidiInstrument.String_Ensemble_1,\n        \"tenor\": MidiInstrument.Synth_Voice,\n        \"tpt\": MidiInstrument.Trumpet,\n        \"trombone\": MidiInstrument.Trombone,\n        \"trompete\": MidiInstrument.Trumpet,\n        \"trumpet\": MidiInstrument.Trumpet,\n        \"tuba\": MidiInstrument.Tuba,\n        \"unnamed\": MidiInstrument.Acoustic_Grand_Piano,\n        \"viola\": MidiInstrument.Viola,\n        \"violin\": MidiInstrument.Violin,\n        \"violon-c\": MidiInstrument.Cello,\n        \"violon.\": MidiInstrument.Violin,\n        \"voice\": MidiInstrument.Synth_Voice,\n        \"woodblock\": MidiInstrument.Woodblock\n    };\n\n    public idString: string;\n    public midiInstrumentID: MidiInstrument;\n    public volume: number;\n    public pan: number;\n    public fixedKey: number;\n    public name: string;\n\n    private parentInstrument: Instrument;\n\n    public get ParentInstrument(): Instrument {\n        return this.parentInstrument;\n    }\n    public static isPianoInstrument(instrument: MidiInstrument): boolean {\n        return (instrument === MidiInstrument.Acoustic_Grand_Piano\n          || instrument === MidiInstrument.Bright_Acoustic_Piano\n          || instrument === MidiInstrument.Electric_Grand_Piano\n          || instrument === MidiInstrument.Electric_Piano_1\n          || instrument === MidiInstrument.Electric_Piano_2);\n    }\n    public setMidiInstrument(instrumentType: string): void {\n        this.midiInstrumentID = SubInstrument.midiInstrument[this.parseMidiInstrument(instrumentType)];\n    }\n\n    private parseMidiInstrument(instrumentType: string): string {\n        // FIXME: test this function\n        try {\n            // find the best match for the given instrumentType:\n            if (instrumentType) {\n                const tmpName: string = instrumentType.toLowerCase().trim();\n                for (const key in SubInstrument.midiInstrument) {\n                    if (tmpName.indexOf(key) !== -1) {\n                        return key;\n                    }\n                }\n            }\n            // if the instrumentType didn't work, use the name:\n            if (this.parentInstrument.Name) {\n                const tmpName: string = this.parentInstrument.Name.toLowerCase().trim();\n                for (const key in SubInstrument.midiInstrument) {\n                    if (tmpName.indexOf(key) !== -1) {\n                        return key;\n                    }\n                }\n            }\n        } catch (e) {\n            log.error(\"Error parsing MIDI Instrument. Default to Grand Piano.\");\n        }\n        return \"unnamed\";\n    }\n\n}\n","import { VoiceEntry } from \"./VoiceEntry\";\nimport { Note } from \"./Note\";\n\nexport class Arpeggio {\n    constructor(parentVoiceEntry: VoiceEntry, type: ArpeggioType = ArpeggioType.ARPEGGIO_DIRECTIONLESS) {\n        this.parentVoiceEntry = parentVoiceEntry;\n        this.type = type;\n        this.notes = [];\n    }\n\n    public parentVoiceEntry: VoiceEntry;\n    public notes: Note[];\n    public type: ArpeggioType;\n\n    public addNote(note: Note): void {\n        this.notes.push(note);\n        note.Arpeggio = this;\n    }\n}\n\n/** Corresponds to VF.Stroke.Type for now. But we don't want VexFlow as a dependency here. */\nexport enum ArpeggioType {\n    BRUSH_DOWN = 1,\n    BRUSH_UP,\n    ROLL_DOWN,\n    ROLL_UP,\n    RASQUEDO_DOWN,\n    RASQUEDO_UP,\n    ARPEGGIO_DIRECTIONLESS\n}\n","import { PlacementEnum } from \"./Expressions/AbstractExpression\";\nimport { ArticulationEnum } from \"./VoiceEntry\";\n\nexport class Articulation {\n    public placement: PlacementEnum;\n    // TODO distinguish and save both placementXML and placementRendered\n    public articulationEnum: ArticulationEnum;\n\n    constructor(articulationEnum: ArticulationEnum, placement: PlacementEnum) {\n        this.articulationEnum = articulationEnum;\n        this.placement = placement; // undefined by default, to not restrict placement\n    }\n\n    public Equals(otherArticulation: Articulation): boolean {\n        return otherArticulation.articulationEnum === this.articulationEnum && otherArticulation.placement === this.placement;\n    }\n}\n","import {Note} from \"./Note\";\n\n/**\n * A [[Beam]] - the bar grouping multiple consecutive [[Note]]s.\n */\nexport class Beam {\n\n    private notes: Note[] = [];\n    private extendedNoteList: Note[] = [];\n    public BeamNumber: number;\n    public BeamNumberOffsetToXML: number = 0;\n\n    constructor(beamNumber: number = 1, beamNumberOffsetToXML: number = 0) {\n        this.BeamNumber = beamNumber;\n        this.BeamNumberOffsetToXML = beamNumberOffsetToXML;\n    }\n\n    public get Notes(): Note[] {\n        return this.notes;\n    }\n    public set Notes(value: Note[]) {\n        this.notes = value;\n    }\n    public get ExtendedNoteList(): Note[] {\n        return this.extendedNoteList;\n    }\n    public set ExtendedNoteList(value: Note[]) {\n        this.extendedNoteList = value;\n    }\n\n    /**\n     * Perform all the appropriate actions for adding a singleNote to the Beam.\n     * @param note\n     */\n    public addNoteToBeam(note: Note): void {\n        if (note) {\n            note.NoteBeam = this;\n            this.notes.push(note);\n            this.extendedNoteList.push(note);\n        }\n    }\n\n}\n\nexport enum BeamEnum {\n    BeamNone = -1,\n    BeamBegin = 0,\n    BeamContinue = 1,\n    BeamEnd = 2,\n    BeamForward = 3,\n    BeamBackward = 4,\n}\n","import {Pitch} from \"../../Common/DataObjects/Pitch\";\nimport {KeyInstruction} from \"./Instructions/KeyInstruction\";\nimport {MusicSheetCalculator} from \"../Graphical/MusicSheetCalculator\";\nimport {AccidentalEnum} from \"../../Common/DataObjects/Pitch\";\nimport { EngravingRules } from \"../Graphical/EngravingRules\";\n\nexport class ChordSymbolContainer {\n    private rootPitch: Pitch;\n    private chordKind: ChordSymbolEnum;\n    private bassPitch: Pitch;\n    private degrees: Degree[];\n    private rules: EngravingRules;\n\n    constructor(\n        rootPitch: Pitch,\n        chordKind: ChordSymbolEnum,\n        bassPitch: Pitch,\n        chordDegrees: Degree[],\n        rules: EngravingRules\n    ) {\n        this.rootPitch = rootPitch;\n        this.chordKind = chordKind;\n        this.bassPitch = bassPitch;\n        this.degrees = chordDegrees;\n        this.rules = rules;\n    }\n\n    public get RootPitch(): Pitch {\n        return this.rootPitch;\n    }\n\n    public get ChordKind(): ChordSymbolEnum {\n        return this.chordKind;\n    }\n\n    public get BassPitch(): Pitch {\n        return this.bassPitch;\n    }\n\n    public get ChordDegrees(): Degree[] {\n        return this.degrees;\n    }\n\n    public static calculateChordText(chordSymbol: ChordSymbolContainer, transposeHalftones: number, keyInstruction: KeyInstruction): string {\n        let transposedRootPitch: Pitch = chordSymbol.RootPitch;\n\n        if (MusicSheetCalculator.transposeCalculator) {\n            transposedRootPitch = MusicSheetCalculator.transposeCalculator.transposePitch(\n                chordSymbol.RootPitch,\n                keyInstruction,\n                transposeHalftones\n            );\n        }\n        if (chordSymbol.ChordKind === ChordSymbolEnum.none) {\n            return chordSymbol.getTextFromChordKindEnum(chordSymbol.ChordKind);\n        }\n        // main Note\n        let text: string = Pitch.getNoteEnumString(transposedRootPitch.FundamentalNote);\n        // main alteration\n        if (transposedRootPitch.Accidental !== AccidentalEnum.NONE) {\n            text += chordSymbol.getTextForAccidental(transposedRootPitch.Accidental);\n        }\n\n        // degrees\n        const degrees: DegreesInfo = {\n            adds: [],\n            alts: [],\n            subs: [],\n        };\n\n        for (const chordDegree of chordSymbol.ChordDegrees) {\n            if (chordDegree) {\n                let t: string = \"\";\n                if (chordDegree.alteration !== AccidentalEnum.NONE) {\n                    t += chordSymbol.getTextForAccidental(chordDegree.alteration);\n                }\n                t += chordDegree.value;\n                switch (chordDegree.text) {\n                    case ChordDegreeText.add:\n                        degrees.adds.push(t);\n                        break;\n                    case ChordDegreeText.alter:\n                        degrees.alts.push(t);\n                        break;\n                    case ChordDegreeText.subtract:\n                        degrees.subs.push(t);\n                        break;\n                    default:\n                }\n            }\n        }\n\n        // chord kind text\n        let chordKind: string = chordSymbol.getTextFromChordKindEnum(chordSymbol.ChordKind);\n        const degreeTypeAry: string[] = [\"adds\", \"alts\", \"subs\"];\n        const customChords: CustomChord[] = chordSymbol.rules.CustomChords;\n        for (const customChord of customChords) {\n            if (customChord.chordKind !== chordSymbol.chordKind) {\n                continue;\n            }\n\n            let hasCustomChordDegrees: boolean = true;\n            for (const degType of degreeTypeAry) {\n                for (const deg of (customChord.degrees[degType] || [])) {\n                    if (degrees[degType].indexOf(deg) < 0) {\n                        hasCustomChordDegrees = false;\n                        break;\n                    }\n                }\n                if (!hasCustomChordDegrees) {\n                    break;\n                }\n            }\n            if (hasCustomChordDegrees) {\n                for (const degType of degreeTypeAry) {\n                    for (const deg of (customChord.degrees[degType] || [])) {\n                        // delete degree since we don't want it displayed when the alternate name of the customChord should contain the degrees.\n                        degrees[degType].splice(degrees[degType].indexOf(deg), 1);\n                    }\n                }\n                chordKind = customChord.alternateName;\n            }\n        }\n\n        text += chordKind;\n        if (degrees.adds.length > 0) {\n            text += \"(\" + degrees.adds.join(\",\") + \")\";\n        }\n        if (degrees.alts.length > 0) {\n            text += \"(alt \" + degrees.alts.join(\",\") + \")\";\n        }\n        if (degrees.subs.length > 0) {\n            text += \"(omit \" + degrees.subs.join(\",\") + \")\";\n        }\n\n        // bass\n        if (chordSymbol.BassPitch) {\n            let transposedBassPitch: Pitch = chordSymbol.BassPitch;\n            if (MusicSheetCalculator.transposeCalculator) {\n                transposedBassPitch = MusicSheetCalculator.transposeCalculator.transposePitch(\n                    chordSymbol.BassPitch,\n                    keyInstruction,\n                    transposeHalftones\n                );\n            }\n            text += \"/\";\n            text += Pitch.getNoteEnumString(transposedBassPitch.FundamentalNote);\n            text += chordSymbol.getTextForAccidental(transposedBassPitch.Accidental);\n        }\n        return text;\n    }\n\n    private getTextForAccidental(alteration: AccidentalEnum): string {\n        const text: string = this.rules.ChordAccidentalTexts.getValue(alteration);\n        return text !== undefined ? text : \"\";\n    }\n\n    private getTextFromChordKindEnum(kind: ChordSymbolEnum): string {\n        return this.rules.ChordSymbolLabelTexts.getValue(kind) ?? \"\";\n    }\n\n}\n\nexport class Degree {\n    constructor(value: number, alteration: AccidentalEnum, text: ChordDegreeText) {\n        this.value = value;\n        this.alteration = alteration;\n        this.text = text;\n    }\n\n    public value: number;\n    public alteration: AccidentalEnum;\n    public text: ChordDegreeText;\n}\n\nexport interface DegreesInfo {\n    adds?: string[];\n    alts?: string[];\n    subs?: string[];\n}\n\nexport class CustomChord {\n    public alternateName: string;\n    public chordKind: ChordSymbolEnum;\n    public degrees: DegreesInfo;\n\n    constructor(\n        alternateName: string,\n        chordKind: ChordSymbolEnum,\n        degrees: DegreesInfo,\n    ) {\n        this.alternateName = alternateName;\n        this.chordKind = chordKind;\n        this.degrees = degrees;\n    }\n\n    public static createCustomChord(\n        altName: string,\n        chordKind: ChordSymbolEnum,\n        degrees: DegreesInfo,\n    ): CustomChord {\n        return new CustomChord(altName, chordKind, degrees);\n    }\n\n    public static renameCustomChord(\n        altName: string,\n        newAltName: string,\n        customChords: CustomChord[],\n    ): void {\n        for (const customChord of customChords) {\n            if (customChord.alternateName === altName) {\n                customChord.alternateName = newAltName;\n            }\n        }\n    }\n}\n\nexport enum ChordDegreeText {\n    add,\n    alter,\n    subtract\n}\n\nexport enum ChordSymbolEnum {\n    major,\n    minor,\n    augmented,\n    diminished,\n    dominant,\n    majorseventh,\n    minorseventh,\n    diminishedseventh,\n    augmentedseventh,\n    halfdiminished,\n    majorminor,\n    majorsixth,\n    minorsixth,\n    dominantninth,\n    majorninth,\n    minorninth,\n    dominant11th,\n    major11th,\n    minor11th,\n    dominant13th,\n    major13th,\n    minor13th,\n    suspendedsecond,\n    suspendedfourth,\n    Neapolitan,\n    Italian,\n    French,\n    German,\n    pedal,\n    power,\n    Tristan,\n    none\n}\n","import { SourceMeasure } from \"../SourceMeasure\";\n\nexport class AbstractExpression {\n    protected placement: PlacementEnum;\n    public parentMeasure: SourceMeasure; // could be undefined\n\n    constructor(placement: PlacementEnum) {\n        this.placement = placement;\n    }\n\n    protected static isStringInStringList(stringList: Array<string>, inputString: string): boolean {\n        for (let idx: number = 0, len: number = stringList.length; idx < len; ++idx) {\n            const s: string = stringList[idx];\n            if (inputString.toLowerCase() === s.toLowerCase().trim()) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /** Placement of the expression */\n    public get Placement(): PlacementEnum { return this.placement; }\n\n    public static PlacementEnumFromString(placementString: string): PlacementEnum {\n        switch (placementString.toLowerCase()) {\n            case \"above\":\n                return PlacementEnum.Above;\n            case \"below\":\n                return PlacementEnum.Below;\n            case \"aboveorbelow\":\n            case \"abovebelow\":\n                return PlacementEnum.AboveOrBelow;\n            case \"left\":\n                return PlacementEnum.Left;\n            case \"right\":\n                return PlacementEnum.Right;\n            case \"auto\":\n            default:\n                return PlacementEnum.NotYetDefined;\n        }\n    }\n}\n\nexport enum PlacementEnum {\n    Above = 0,\n    Below = 1,\n    Left = 2,\n    Right = 3,\n    NotYetDefined = 4,\n    AboveOrBelow = 5, // for piano scores, above for right hand, below for left hand\n}\n","import {PlacementEnum, AbstractExpression} from \"./AbstractExpression\";\nimport {MultiTempoExpression} from \"./MultiTempoExpression\";\n\nexport abstract class AbstractTempoExpression extends AbstractExpression {\n\n    constructor(label: string, placement: PlacementEnum, staffNumber: number, parentMultiTempoExpression: MultiTempoExpression) {\n        super(placement);\n        this.label = label;\n        this.staffNumber = staffNumber;\n        this.parentMultiTempoExpression = parentMultiTempoExpression;\n    }\n\n    protected label: string;\n    protected staffNumber: number;\n    protected parentMultiTempoExpression: MultiTempoExpression;\n\n    public get Label(): string {\n        return this.label;\n    }\n    public set Label(value: string) {\n        this.label = value;\n    }\n    public get Placement(): PlacementEnum {\n        return this.placement;\n    }\n    public set Placement(value: PlacementEnum) {\n        this.placement = value;\n    }\n    public get StaffNumber(): number {\n        return this.staffNumber;\n    }\n    public set StaffNumber(value: number) {\n        this.staffNumber = value;\n    }\n    public get ParentMultiTempoExpression(): MultiTempoExpression {\n        return this.parentMultiTempoExpression;\n    }\n\n    protected static isStringInStringList(wordsToFind: string[], inputString: string): boolean {\n        for (const wordToFind of wordsToFind) {\n            if (AbstractTempoExpression.stringContainsSeparatedWord(inputString.toLowerCase().trim(), wordToFind.toLowerCase().trim())) {\n                return true;\n            }\n        }\n        return false;\n    }\n    private static stringContainsSeparatedWord(str: string, word: string): boolean {\n        return (str === word || str.indexOf(\" \" + word) !== -1 || str.indexOf(word + \" \") !== -1);\n    }\n\n}\n","import {PlacementEnum, AbstractExpression} from \"../AbstractExpression\";\nimport {MultiExpression} from \"../MultiExpression\";\nimport {Fraction} from \"../../../../Common/DataObjects/Fraction\";\nimport {SourceMeasure} from \"../../SourceMeasure\";\n\nexport class ContinuousDynamicExpression extends AbstractExpression {\n    constructor(dynamicType: ContDynamicEnum, placement: PlacementEnum, staffNumber: number,\n                measure: SourceMeasure, numberXml: number,\n                label: string = \"\") {\n        super(placement);\n        super.parentMeasure = measure;\n        this.NumberXml = numberXml;\n        this.dynamicType = dynamicType;\n        this.label = label;\n        this.staffNumber = staffNumber;\n        this.startVolume = -1;\n        this.endVolume = -1;\n        if (label !== \"\") {\n            this.setType();\n        }\n    }\n\n    private static listContinuousDynamicIncreasing: string[] = [\"crescendo\", \"cresc\", \"cresc.\", \"cres.\"];\n    private static listContinuousDynamicDecreasing: string[] = [\"decrescendo\", \"decresc\", \"decr.\", \"diminuendo\", \"dim.\", \"dim\"];\n    // private static listContinuousDynamicGeneral: string[] = [\"subito\",\"al niente\",\"piu\",\"meno\"];\n    private dynamicType: ContDynamicEnum;\n    public NumberXml: number;\n    private startMultiExpression: MultiExpression;\n    private endMultiExpression: MultiExpression;\n    private startVolume: number;\n    private endVolume: number;\n    private staffNumber: number;\n    private label: string;\n\n    public get DynamicType(): ContDynamicEnum {\n        return this.dynamicType;\n    }\n    public set DynamicType(value: ContDynamicEnum) {\n        this.dynamicType = value;\n    }\n    public get StartMultiExpression(): MultiExpression {\n        return this.startMultiExpression;\n    }\n    public set StartMultiExpression(value: MultiExpression) {\n        this.startMultiExpression = value;\n    }\n    public get EndMultiExpression(): MultiExpression {\n        return this.endMultiExpression;\n    }\n    public set EndMultiExpression(value: MultiExpression) {\n        this.endMultiExpression = value;\n    }\n    public get Placement(): PlacementEnum {\n        return this.placement;\n    }\n    public set Placement(value: PlacementEnum) {\n        this.placement = value;\n    }\n    public get StartVolume(): number {\n        return this.startVolume;\n    }\n    public set StartVolume(value: number) {\n        this.startVolume = value;\n    }\n    public get EndVolume(): number {\n        return this.endVolume;\n    }\n    public set EndVolume(value: number) {\n        this.endVolume = value;\n    }\n    public get StaffNumber(): number {\n        return this.staffNumber;\n    }\n    public set StaffNumber(value: number) {\n        this.staffNumber = value;\n    }\n    public get Label(): string {\n        return this.label;\n    }\n    public set Label(value: string) {\n        this.label = value;\n        this.setType();\n    }\n    public static isInputStringContinuousDynamic(inputString: string): boolean {\n        if (!inputString) { return false; }\n        return (\n            ContinuousDynamicExpression.isStringInStringList(ContinuousDynamicExpression.listContinuousDynamicIncreasing, inputString)\n            || ContinuousDynamicExpression.isStringInStringList(ContinuousDynamicExpression.listContinuousDynamicDecreasing, inputString)\n        );\n    }\n    public getInterpolatedDynamic(currentAbsoluteTimestamp: Fraction): number {\n        const continuousAbsoluteStartTimestamp: Fraction = this.StartMultiExpression.AbsoluteTimestamp;\n        let continuousAbsoluteEndTimestamp: Fraction;\n        if (this.EndMultiExpression) {\n            continuousAbsoluteEndTimestamp = this.EndMultiExpression.AbsoluteTimestamp;\n        } else {\n            continuousAbsoluteEndTimestamp = Fraction.plus(\n                this.startMultiExpression.SourceMeasureParent.AbsoluteTimestamp, this.startMultiExpression.SourceMeasureParent.Duration\n            );\n        }\n        if (currentAbsoluteTimestamp.lt(continuousAbsoluteStartTimestamp)) { return -1; }\n        if (continuousAbsoluteEndTimestamp.lt(currentAbsoluteTimestamp)) { return -2; }\n        const interpolationRatio: number =\n            Fraction.minus(currentAbsoluteTimestamp, continuousAbsoluteStartTimestamp).RealValue\n            / Fraction.minus(continuousAbsoluteEndTimestamp, continuousAbsoluteStartTimestamp).RealValue;\n        const interpolatedVolume: number = Math.max(0.0, Math.min(99.9, this.startVolume + (this.endVolume - this.startVolume) * interpolationRatio));\n        return interpolatedVolume;\n    }\n    public isWedge(): boolean {\n        return !this.label;\n    }\n    private setType(): void {\n        if (ContinuousDynamicExpression.isStringInStringList(ContinuousDynamicExpression.listContinuousDynamicIncreasing, this.label)) {\n            this.dynamicType = ContDynamicEnum.crescendo;\n        } else if (ContinuousDynamicExpression.isStringInStringList(ContinuousDynamicExpression.listContinuousDynamicDecreasing, this.label)) {\n            this.dynamicType = ContDynamicEnum.diminuendo;\n        }\n    }\n}\n\nexport enum ContDynamicEnum {\n    crescendo = 0,\n    /** Diminuendo/Decrescendo. These terms are apparently sometimes synonyms, and a falling wedge is given in MusicXML as type=\"diminuendo\". */\n    diminuendo = 1\n}\n","import {Fraction} from \"../../../../Common/DataObjects/Fraction\";\nimport {PlacementEnum} from \"../AbstractExpression\";\nimport {MultiTempoExpression} from \"../MultiTempoExpression\";\nimport {AbstractTempoExpression} from \"../AbstractTempoExpression\";\n\nexport class ContinuousTempoExpression extends AbstractTempoExpression {\n    constructor(label: string, placement: PlacementEnum, staffNumber: number, parentMultiTempoExpression: MultiTempoExpression) {\n        super(label, placement, staffNumber, parentMultiTempoExpression);\n        //super.label = label;\n        //super.placement = placement;\n        //super.staffNumber = staffNumber;\n        //super.parentMultiTempoExpression = parentMultiTempoExpression;\n        this.setTempoType();\n    }\n\n    private static listContinuousTempoFaster: string[] = [\"accelerando\", \"piu mosso\", \"poco piu\", \"stretto\"];\n    private static listContinuousTempoSlower: string[] = [\n        \"poco meno\", \"meno mosso\", \"piu lento\", \"calando\", \"allargando\", \"rallentando\", \"ritardando\",\n        \"ritenuto\", \"ritard.\", \"ritard\", \"rit.\", \"rit\", \"riten.\", \"riten\",\n    ];\n    private absoluteEndTimestamp: Fraction;\n    private tempoType: ContinuousTempoType;\n    private startTempo: number;\n    private endTempo: number;\n\n    public static isInputStringContinuousTempo(inputString: string): boolean {\n        if (!inputString) { return false; }\n        return (\n            ContinuousTempoExpression.isStringInStringList(ContinuousTempoExpression.listContinuousTempoFaster, inputString)\n            || ContinuousTempoExpression.isStringInStringList(ContinuousTempoExpression.listContinuousTempoSlower, inputString)\n        );\n    }\n    public static isIncreasingTempo(tempoType: ContinuousTempoType): boolean {\n        return tempoType <= ContinuousTempoType.piuMosso;\n    }\n    public static isDecreasingTempo(tempoType: ContinuousTempoType): boolean {\n        return (tempoType >= ContinuousTempoType.allargando) && (tempoType <= ContinuousTempoType.ritenuto);\n    }\n\n    public get TempoType(): ContinuousTempoType {\n        return this.tempoType;\n    }\n    public set TempoType(value: ContinuousTempoType) {\n        this.tempoType = value;\n    }\n    public get StartTempo(): number {\n        return this.startTempo;\n    }\n    public set StartTempo(value: number) {\n        this.startTempo = value;\n    }\n    public get EndTempo(): number {\n        return this.endTempo;\n    }\n    public set EndTempo(value: number) {\n        this.endTempo = value;\n    }\n    public get AbsoluteEndTimestamp(): Fraction {\n        return this.absoluteEndTimestamp;\n    }\n    public set AbsoluteEndTimestamp(value: Fraction) {\n        this.absoluteEndTimestamp = value;\n    }\n    public get AbsoluteTimestamp(): Fraction {\n        return this.ParentMultiTempoExpression.AbsoluteTimestamp;\n    }\n    public getAbsoluteFloatTimestamp(): number {\n        return this.ParentMultiTempoExpression.AbsoluteTimestamp.RealValue;\n    }\n    public getInterpolatedTempo(currentAbsoluteTimestamp: Fraction): number {\n        const continuousAbsoluteStartTimestamp: Fraction = Fraction.plus(\n            this.parentMultiTempoExpression.SourceMeasureParent.AbsoluteTimestamp, this.parentMultiTempoExpression.Timestamp\n        );\n        if (currentAbsoluteTimestamp.lt(continuousAbsoluteStartTimestamp)) { return -1; }\n        if (this.absoluteEndTimestamp.lt(currentAbsoluteTimestamp)) { return -2; }\n        const interpolationRatio: number =\n            Fraction.minus(currentAbsoluteTimestamp, continuousAbsoluteStartTimestamp).RealValue\n            / Fraction.minus(this.absoluteEndTimestamp, continuousAbsoluteStartTimestamp).RealValue;\n        const interpolatedTempo: number = Math.max(0.0, Math.min(250.0, this.startTempo + (this.endTempo - this.startTempo) * interpolationRatio));\n        return interpolatedTempo;\n    }\n\n    private setTempoType(): void {\n        if (ContinuousTempoExpression.isStringInStringList(ContinuousTempoExpression.listContinuousTempoFaster, this.label)) {\n            this.tempoType = ContinuousTempoType.accelerando;\n        } else if (ContinuousTempoExpression.isStringInStringList(ContinuousTempoExpression.listContinuousTempoSlower, this.label)) {\n            this.tempoType = ContinuousTempoType.ritardando;\n        }\n    }\n}\n\nexport enum ContinuousTempoType {\n    accelerando = 0,\n    stretto = 1,\n    stringendo = 2,\n    mosso = 3,\n    piuMosso = 4,\n    allargando = 5,\n    calando = 6,\n    menoMosso = 7,\n    rallentando = 8,\n    ritardando = 9,\n    ritard = 10,\n    rit = 11,\n    ritenuto = 12,\n    rubato = 13,\n    precipitando = 14\n}\n","import {MultiExpression} from \"../MultiExpression\";\nimport { Pitch } from \"../../../../Common/DataObjects/Pitch\";\n\nexport class OctaveShift {\n    constructor(type: string, octave: number) {\n        this.setOctaveShiftValue(type, octave);\n    }\n\n    private octaveValue: OctaveEnum;\n    private staffNumber: number;\n    public numberXml: number = 1;\n    private startMultiExpression: MultiExpression;\n    private endMultiExpression: MultiExpression;\n\n    public get Type(): OctaveEnum {\n        return this.octaveValue;\n    }\n    public set Type(value: OctaveEnum) {\n        this.octaveValue = value;\n    }\n    public get StaffNumber(): number {\n        return this.staffNumber;\n    }\n    public set StaffNumber(value: number) {\n        this.staffNumber = value;\n    }\n    public get ParentStartMultiExpression(): MultiExpression {\n        return this.startMultiExpression;\n    }\n    public set ParentStartMultiExpression(value: MultiExpression) {\n        this.startMultiExpression = value;\n    }\n    public get ParentEndMultiExpression(): MultiExpression {\n        return this.endMultiExpression;\n    }\n    public set ParentEndMultiExpression(value: MultiExpression) {\n        this.endMultiExpression = value;\n    }\n\n    private setOctaveShiftValue(type: string, octave: number): void {\n        if (octave === 1 && type === \"down\") {\n            this.octaveValue = OctaveEnum.VA8;\n        } else if (octave === 1 && type === \"up\") {\n            this.octaveValue = OctaveEnum.VB8;\n        } else if (octave === 2 && type === \"down\") {\n            this.octaveValue = OctaveEnum.MA15;\n        } else if (octave === 2 && type === \"up\") {\n            this.octaveValue = OctaveEnum.MB15;\n        } else {\n            this.octaveValue = OctaveEnum.NONE;\n        }\n    }\n\n    /**\n     * Convert a source (XML) pitch of a note to the pitch needed to draw. E.g. 8va would draw +1 octave so we reduce by 1\n     * @param pitch Original pitch\n     * @param octaveShiftValue octave shift\n     * @returns New pitch with corrected octave shift\n     */\n    public static getPitchFromOctaveShift(pitch: Pitch, octaveShiftValue: OctaveEnum): Pitch {\n        if (!pitch) {\n            return undefined;\n        }\n        let result: number = pitch.Octave;\n        switch (octaveShiftValue) {\n            case OctaveEnum.VA8:\n                result -= 1;\n                break;\n            case OctaveEnum.VB8:\n                result += 1;\n                break;\n            case OctaveEnum.MA15:\n                result -= 2;\n                break;\n            case OctaveEnum.MB15:\n                result += 2;\n                break;\n            case OctaveEnum.NONE:\n            default:\n                result += 0;\n        }\n        return new Pitch(pitch.FundamentalNote, result, pitch.Accidental);\n    }\n}\n\nexport enum OctaveEnum {\n    VA8,\n    VB8,\n    MA15,\n    MB15,\n    NONE\n}\n","import {Note} from \"../../Note\";\nimport { Fraction } from \"../../../../Common/DataObjects/Fraction\";\nimport { PlacementEnum } from \"../AbstractExpression\";\n\nexport class Slur {\n    constructor() {\n        // ?\n    }\n\n    private startNote: Note;\n    private endNote: Note;\n    public PlacementXml: PlacementEnum; // how the slur is placed in the XML\n\n    public get StartNote(): Note {\n        return this.startNote;\n    }\n    public set StartNote(value: Note) {\n        this.startNote = value;\n    }\n    public get EndNote(): Note {\n        return this.endNote;\n    }\n    public set EndNote(value: Note) {\n        this.endNote = value;\n    }\n    public startNoteHasMoreStartingSlurs(): boolean {\n        if (!this.startNote) { return false; }\n        for (let idx: number = 0, len: number = this.startNote.NoteSlurs.length; idx < len; ++idx) {\n            const slur: Slur = this.startNote.NoteSlurs[idx];\n            if (slur !== this && slur.StartNote === this.startNote) {\n                return true;\n            }\n        }\n        return false;\n    }\n    public endNoteHasMoreEndingSlurs(): boolean {\n        if (!this.endNote) { return false; }\n        for (let idx: number = 0, len: number = this.endNote.NoteSlurs.length; idx < len; ++idx) {\n            const slur: Slur = this.endNote.NoteSlurs[idx];\n            if (slur !== this && slur.EndNote === this.endNote) {\n                return true;\n            }\n        }\n        return false;\n    }\n    public isCrossed(): boolean {\n        return (this.startNote.ParentStaffEntry.ParentStaff !== this.endNote.ParentStaffEntry.ParentStaff);\n    }\n    public isSlurLonger(): boolean {\n        if (!this.endNote || !this.startNote) {\n            return false;\n        }\n        const length: Fraction = Fraction.minus(this.endNote.getAbsoluteTimestamp(), this.startNote.getAbsoluteTimestamp());\n        for (let idx: number = 0, len: number = this.startNote.NoteSlurs.length; idx < len; ++idx) {\n            const slur: Slur = this.startNote.NoteSlurs[idx];\n            if (\n                slur !== this\n                && slur.EndNote !== undefined\n                && slur.StartNote !== undefined\n                && Fraction.minus(slur.EndNote.getAbsoluteTimestamp(), slur.StartNote.getAbsoluteTimestamp()).CompareTo(length) === -1\n            ) {\n                return true;\n            }\n        }\n        for (let idx: number = 0, len: number = this.endNote.NoteSlurs.length; idx < len; ++idx) {\n            const slur: Slur = this.endNote.NoteSlurs[idx];\n            if (\n                slur !== this\n                && slur.EndNote !== undefined\n                && slur.StartNote !== undefined\n                && Fraction.minus(slur.EndNote.getAbsoluteTimestamp(), slur.StartNote.getAbsoluteTimestamp()).CompareTo(length)\n            ) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n","export enum DynamicExpressionSymbolEnum {\n    p = 0,\n    f = 1,\n    s = 2,\n    z = 3,\n    m = 4,\n    r = 5\n}\n","import {PlacementEnum, AbstractExpression} from \"./AbstractExpression\";\nimport {MultiExpression} from \"./MultiExpression\";\nimport {DynamicExpressionSymbolEnum} from \"./DynamicExpressionSymbolEnum\";\n//import {ArgumentOutOfRangeException} from \"../../Exceptions\";\nimport {InvalidEnumArgumentException} from \"../../Exceptions\";\nimport log from \"loglevel\";\nimport { SourceMeasure } from \"../SourceMeasure\";\nimport { Dictionary } from \"typescript-collections\";\nimport { Fraction } from \"../../../Common/DataObjects/Fraction\";\n\nexport class InstantaneousDynamicExpression extends AbstractExpression {\n    public static staticConstructor(): void {\n\n        InstantaneousDynamicExpression.dynamicToRelativeVolumeDict.setValue(DynamicEnum.ffffff, 127.0 / 127.0);\n        InstantaneousDynamicExpression.dynamicToRelativeVolumeDict.setValue(DynamicEnum.fffff,  126.0 / 127.0);\n        InstantaneousDynamicExpression.dynamicToRelativeVolumeDict.setValue(DynamicEnum.ffff,   125.0 / 127.0);\n        InstantaneousDynamicExpression.dynamicToRelativeVolumeDict.setValue(DynamicEnum.fff,    124.0 / 127.0);\n        InstantaneousDynamicExpression.dynamicToRelativeVolumeDict.setValue(DynamicEnum.ff,     122.0 / 127.0);\n        InstantaneousDynamicExpression.dynamicToRelativeVolumeDict.setValue(DynamicEnum.f,      108.0 / 127.0);\n        InstantaneousDynamicExpression.dynamicToRelativeVolumeDict.setValue(DynamicEnum.mf,      76.0 / 127.0);\n        InstantaneousDynamicExpression.dynamicToRelativeVolumeDict.setValue(DynamicEnum.sf,     0.5);\n        InstantaneousDynamicExpression.dynamicToRelativeVolumeDict.setValue(DynamicEnum.sfp,    0.5);\n        InstantaneousDynamicExpression.dynamicToRelativeVolumeDict.setValue(DynamicEnum.sfpp,   0.5);\n        InstantaneousDynamicExpression.dynamicToRelativeVolumeDict.setValue(DynamicEnum.fp,     0.5);\n        InstantaneousDynamicExpression.dynamicToRelativeVolumeDict.setValue(DynamicEnum.rf,     0.5);\n        InstantaneousDynamicExpression.dynamicToRelativeVolumeDict.setValue(DynamicEnum.rfz,    0.5);\n        InstantaneousDynamicExpression.dynamicToRelativeVolumeDict.setValue(DynamicEnum.sfz,    0.5);\n        InstantaneousDynamicExpression.dynamicToRelativeVolumeDict.setValue(DynamicEnum.sffz,   0.5);\n        InstantaneousDynamicExpression.dynamicToRelativeVolumeDict.setValue(DynamicEnum.fz,     0.5);\n        InstantaneousDynamicExpression.dynamicToRelativeVolumeDict.setValue(DynamicEnum.mp,      60 / 127.0);\n        InstantaneousDynamicExpression.dynamicToRelativeVolumeDict.setValue(DynamicEnum.p,       28.0 / 127.0);\n        InstantaneousDynamicExpression.dynamicToRelativeVolumeDict.setValue(DynamicEnum.pp,      12.0 / 127.0);\n        InstantaneousDynamicExpression.dynamicToRelativeVolumeDict.setValue(DynamicEnum.ppp,     10.0 / 127.0);\n        InstantaneousDynamicExpression.dynamicToRelativeVolumeDict.setValue(DynamicEnum.pppp,    7.0 / 127.0);\n        InstantaneousDynamicExpression.dynamicToRelativeVolumeDict.setValue(DynamicEnum.ppppp,    5.0 / 127.0);\n        InstantaneousDynamicExpression.dynamicToRelativeVolumeDict.setValue(DynamicEnum.pppppp,   4.0 / 127.0);\n    }\n\n    constructor(dynamicExpression: string, soundDynamics: number, placement: PlacementEnum, staffNumber: number,\n                measure: SourceMeasure) {\n        super(placement);\n        super.parentMeasure = measure;\n        this.dynamicEnum = DynamicEnum[dynamicExpression.toLowerCase()];\n        this.soundDynamic = soundDynamics;\n        this.staffNumber = staffNumber;\n    }\n\n    public static dynamicToRelativeVolumeDict: Dictionary<DynamicEnum, number> = new Dictionary<DynamicEnum, number>();\n\n    private multiExpression: MultiExpression;\n    private dynamicEnum: DynamicEnum;\n    private soundDynamic: number;\n    private staffNumber: number;\n    private length: number;\n    public InMeasureTimestamp: Fraction;\n\n    public get ParentMultiExpression(): MultiExpression {\n        return this.multiExpression;\n    }\n    public set ParentMultiExpression(value: MultiExpression) {\n        this.multiExpression = value;\n    }\n    public get DynEnum(): DynamicEnum {\n        return this.dynamicEnum;\n    }\n    public set DynEnum(value: DynamicEnum) {\n        this.dynamicEnum = value;\n    }\n    public get SoundDynamic(): number {\n        return this.soundDynamic;\n    }\n    public set SoundDynamic(value: number) {\n        this.soundDynamic = value;\n    }\n    public get Placement(): PlacementEnum {\n        return this.placement;\n    }\n    public set Placement(value: PlacementEnum) {\n        this.placement = value;\n    }\n    public get StaffNumber(): number {\n        return this.staffNumber;\n    }\n    public set StaffNumber(value: number) {\n        this.staffNumber = value;\n    }\n    public get Length(): number {\n        if (Math.abs(this.length) < 0.0001) {\n            this.length = this.calculateLength();\n        }\n        return this.length;\n    }\n    public get MidiVolume(): number {\n        return this.Volume * 127;\n    }\n\n    public get Volume(): number {\n        return InstantaneousDynamicExpression.dynamicToRelativeVolumeDict.getValue(this.dynamicEnum);\n    }\n\n    public static isInputStringInstantaneousDynamic(inputString: string): boolean {\n        if (!inputString) { return false; }\n        return InstantaneousDynamicExpression.isStringInStringList(InstantaneousDynamicExpression.listInstantaneousDynamics, inputString);\n    }\n\n    //private static weight: number;\n    private static listInstantaneousDynamics: string[] =  [\n        \"pppppp\", \"ppppp\", \"pppp\", \"ppp\", \"pp\", \"p\",\n        \"ffffff\", \"fffff\", \"ffff\", \"fff\", \"ff\", \"f\",\n        \"mf\", \"mp\", \"sf\", \"sff\", \"sp\", \"spp\", \"fp\", \"rf\", \"rfz\", \"sfz\", \"sffz\", \"fz\",\n    ];\n\n    //public getInstantaneousDynamicSymbol(expressionSymbolEnum:DynamicExpressionSymbolEnum): FontInfo.MusicFontSymbol {\n    //    switch (expressionSymbolEnum) {\n    //        case DynamicExpressionSymbolEnum.p:\n    //            return FontInfo.MusicFontSymbol.P;\n    //        case DynamicExpressionSymbolEnum.f:\n    //            return FontInfo.MusicFontSymbol.F;\n    //        case DynamicExpressionSymbolEnum.s:\n    //            return FontInfo.MusicFontSymbol.S;\n    //        case DynamicExpressionSymbolEnum.z:\n    //            return FontInfo.MusicFontSymbol.Z;\n    //        case DynamicExpressionSymbolEnum.m:\n    //            return FontInfo.MusicFontSymbol.M;\n    //        case DynamicExpressionSymbolEnum.r:\n    //            return FontInfo.MusicFontSymbol.R;\n    //        default:\n    //            throw new ArgumentOutOfRangeException(\"expressionSymbolEnum\");\n    //    }\n    //}\n    public getDynamicExpressionSymbol(c: string): DynamicExpressionSymbolEnum  {\n        switch (c) {\n            case \"p\":\n                return DynamicExpressionSymbolEnum.p;\n            case \"f\":\n                return DynamicExpressionSymbolEnum.f;\n            case \"s\":\n                return DynamicExpressionSymbolEnum.s;\n            case \"z\":\n                return DynamicExpressionSymbolEnum.z;\n            case \"m\":\n                return DynamicExpressionSymbolEnum.m;\n            case \"r\":\n                return DynamicExpressionSymbolEnum.r;\n            default:\n                throw new InvalidEnumArgumentException(\"unknown DynamicExpressionSymbolEnum: \" + c);\n        }\n    }\n    private calculateLength(): number {\n        //let length: number = 0.0;\n        //let dynamic: string = DynamicEnum[this.dynamicEnum];\n        //for (let idx: number = 0, len: number = dynamic.length; idx < len; ++idx) {\n        //    let c: string = dynamic[idx];\n        //    let dynamicExpressionSymbol: DynamicExpressionSymbolEnum = this.getDynamicExpressionSymbol(c);\n        //    let symbol: FontInfo.MusicFontSymbol = this.getInstantaneousDynamicSymbol(dynamicExpressionSymbol);\n        //    length += FontInfo.Info.getBoundingBox(symbol).Width;\n        //}\n        //return length;\n        log.debug(\"[Andrea] instantaneousDynamicExpression: not implemented: calculateLength!\");\n        return 0.0;\n    }\n\n}\n\nexport enum DynamicEnum {\n    pppppp = 0,\n    ppppp = 1,\n    pppp = 2,\n    ppp = 3,\n    pp = 4,\n    p = 5,\n    mp = 6,\n    mf = 7,\n    f = 8,\n    ff = 9,\n    fff = 10,\n    ffff = 11,\n    fffff = 12,\n    ffffff = 13,\n    sf = 14,\n    sff = 15,\n    sfp = 16,\n    sfpp = 17,\n    fp = 18,\n    rf = 19,\n    rfz = 20,\n    sfz = 21,\n    sffz = 22,\n    fz = 23,\n    other = 24\n}\n\nInstantaneousDynamicExpression.staticConstructor();\n","import {AbstractTempoExpression} from \"./AbstractTempoExpression\";\nimport {PlacementEnum} from \"./AbstractExpression\";\nimport {ArgumentOutOfRangeException} from \"../../Exceptions\";\nimport {Fraction} from \"../../../Common/DataObjects/Fraction\";\nimport {MultiTempoExpression} from \"./MultiTempoExpression\";\n\nexport class InstantaneousTempoExpression extends AbstractTempoExpression {\n    constructor(label: string, placement: PlacementEnum, staffNumber: number,\n                soundTempo: number, parentMultiTempoExpression: MultiTempoExpression, isMetronomeMark: boolean = false) {\n        /*if (isMetronomeMark) {\n            label = \" = \" + soundTempo;\n        }*/\n        super(label, placement, staffNumber, parentMultiTempoExpression);\n        this.setTempoAndTempoType(soundTempo);\n    }\n\n    public dotted: boolean;\n    public beatUnit: string;\n    private static listInstantaneousTempoLarghissimo: string[] = [\"Larghissimo\", \"Sehr breit\", \"very, very slow\"]; // }), TempoEnum.larghissimo);\n    private static listInstantaneousTempoGrave: string[] = [\"Grave\", \"Schwer\", \"slow and solemn\"]; //  }), TempoEnum.grave);\n    private static listInstantaneousTempoLento: string[] = [\"Lento\", \"Lent\", \"Langsam\", \"slowly\"]; //  }), TempoEnum.lento);\n    private static listInstantaneousTempoLargo: string[] = [\"Largo\", \"Breit\", \"broadly\"]; //  }), TempoEnum.largo);\n    private static listInstantaneousTempoLarghetto: string[] = [\"Larghetto\", \"Etwas breit\", \"rather broadly\"]; //  }), TempoEnum.larghetto);\n    private static listInstantaneousTempoAdagio: string[] = [\"Adagio\", \"Langsam\", \"Ruhig\", \"slow and stately\"]; // }), TempoEnum.adagio);\n    private static listInstantaneousTempoAdagietto: string[] = [\"Adagietto\", \"Ziemlich ruhig\", \"Ziemlich langsam\", \"rather slow\"]; //  }), TempoEnum.adagietto);\n    private static listInstantaneousTempoAndanteModerato: string[] = [\"Andante moderato\"]; //  }), TempoEnum.andanteModerato);\n    private static listInstantaneousTempoAndante: string[] = [\"Andante\", \"Gehend\", \"Schreitend\", \"at a walking pace\"]; //  }), TempoEnum.andante);\n    private static listInstantaneousTempoAndantino: string[] = [\"Andantino\"]; //  }), TempoEnum.andantino);\n    private static listInstantaneousTempoModerato: string[] = [\"Moderato\", \"Mäßig\", \"Mod�r�\", \"moderately\"]; //  }), TempoEnum.moderato);\n    private static listInstantaneousTempoAllegretto: string[] = [\"Allegretto\", \"fast\"]; //  }), TempoEnum.allegretto);\n    private static listInstantaneousTempoAllegroModerato: string[] = [\"Allegro moderato\"]; //  }), TempoEnum.allegroModerato);\n    private static listInstantaneousTempoAllegro: string[] = [\"Allegro\", \"Rapide\", \"Vite\", \"Rasch\", \"Schnell\", \"Fr�hlich\"]; //  }), TempoEnum.allegro);\n    private static listInstantaneousTempoVivace: string[] = [\"Vivace\", \"Lebhaft\", \"Lebendig\", \"lively and fast\"]; //  }), TempoEnum.vivace);\n    private static listInstantaneousTempoVivacissimo: string[] = [\"Vivacissimo\", \"Sehr lebhaft\", \"Sehr lebendig\"]; //  }), TempoEnum.vivacissimo);\n    private static listInstantaneousTempoAllegrissimo: string[] = [\"Allegrissimo\", \"very fast\"]; //  }), TempoEnum.allegrissimo);\n    private static listInstantaneousTempoPresto: string[] = [\"Presto\", \"Sehr schnell\", \"Geschwind\"]; //  }), TempoEnum.presto);\n    private static listInstantaneousTempoPrestissimo: string[] = [\"Prestissimo\", \"äußerst schnell\"]; //  }), TempoEnum.prestissimo);\n    private static listInstantaneousTempoChangesGeneral: string[] = [\n        \"tempo primo\",\n        \"a tempo\",\n        \"tempo i\",\n        \"rubato\",\n        \"doppio movimento\",\n    ];\n    private static listInstantaneousTempoAddons: string[] = [\n        \"assai\",\n        \"amoroso\",\n        \"cantabile\",\n        \"con brio\",\n        \"con dolore\",\n        \"con espressione\",\n        \"con fuoco\",\n        \"con moto\",\n        \"con spirito\",\n        \"spiritoso\",\n        \"espressivo\",\n        \"giocoso\",\n        \"giusto\",\n        \"grazioso\",\n        \"lesto\",\n        \"lugubre\",\n        \"maestoso\",\n        \"ma non troppo\",\n        \"marcato\",\n        \"molto\",\n        \"morendo\",\n        \"mosso\",\n        \"non tanto\",\n        \"piu\",\n        \"un poco\",\n        \"poco\",\n        \"quasi\",\n        \"risoluto\",\n        \"scherzando\",\n        \"sostenuto\",\n        \"teneramente\",\n        \"tempo giusto\",\n        \"tranquillo\",\n        \"sehr\",\n        \"lieblich\",\n        \"liebevoll\",\n        \"mit Leidenschaft\",\n        \"mit Liebe\",\n        \"amourös\",\n        \"gesanglich\",\n        \"mit Schwung\",\n        \"mit Feuer\",\n        \"mit Schmerz\",\n        \"mit Ausdruck\",\n        \"mit Bewegung\",\n        \"geistvoll\",\n        \"ausdrucksvoll\",\n        \"freudig\",\n        \"verspielt\",\n        \"angemessen\",\n        \"graziös\",\n        \"mit Grazie\",\n        \"flink\",\n        \"behände\",\n        \"traurig\",\n        \"klagend\",\n        \"majestätisch\",\n        \"aber nicht zu sehr\",\n        \"markant\",\n        \"gemäßigt\",\n        \"viel\",\n        \"sehr\",\n        \"ersterbend\",\n        \"bewegt\",\n        \"nicht zu sehr\",\n        \"mehr\",\n        \"ein wenig\",\n        \"gleichsam\",\n        \"entschlossen\",\n        \"zupackend\",\n        \"heiter\",\n        \"nachdrücklich\",\n        \"getragen\",\n        \"gewichtig\",\n        \"zart\",\n        \"zärtlich\",\n        \"im angemessenen Zeitmaß\",\n        \"ruhig\",\n        \"ein wenig\",\n        \"alla marcia\",\n        \"ad libitum\",\n        \"alla breve\",\n    ];\n\n    private tempoEnum: TempoEnum;\n    private tempoInBpm: number;\n\n    // Must refactor: In c# use 'out' arguments\n    //private findTempoEnum(inputString: string, pre: string, post: string): TempoEnum {\n    //    let result: TempoEnum = this.splitStringAfterInstructionWord(inputString,\n    // InstantaneousTempoExpression.listInstantaneousTempoLarghissimo, TempoEnum.larghissimo, pre,\n    //        post);\n    //    if (result !== TempoEnum.none)\n    //        return result;\n    //    result = this.splitStringAfterInstructionWord(inputString, InstantaneousTempoExpression.listInstantaneousTempoGrave, TempoEnum.grave, pre,\n    //        post);\n    //    if (result !== TempoEnum.none)\n    //        return result;\n    //    return TempoEnum.none;\n    //}\n    //private splitStringAfterInstructionWord(inputString: string, instruction: string[], value: TempoEnum, pre: string, post: string): TempoEnum {\n    //    pre = undefined;\n    //    post = undefined;\n    //    for (let idx: number = 0, len: number = instruction.length; idx < len; ++idx) {\n    //        let instructionWord: string = instruction[idx];\n    //        let separators: string[] = [\" \" + instructionWord, instructionWord + \" \", \",\" + instructionWord, instructionWord + \",\"];\n    //        for (let j: number = 0; j < 4; j++) {\n    //            let splits:string[] = inputString.split(separators[j], 2);\n    //            if (splits.length > 1) {\n    //                pre = splits[0];\n    //                post = splits[1];\n    //                return value;\n    //            }\n    //        }\n    //    }\n    //    return TempoEnum.none;\n    //}\n    public static getDefaultValueForTempoType(tempoEnum: TempoEnum): number {\n        switch (tempoEnum) {\n            case TempoEnum.larghissimo:\n                return 20;\n            case TempoEnum.grave:\n                return 30;\n            case TempoEnum.lento:\n                return 48;\n            case TempoEnum.largo:\n                return 52;\n            case TempoEnum.larghetto:\n                return 63;\n            case TempoEnum.adagio:\n                return 70;\n            case TempoEnum.adagietto:\n                return 75;\n            case TempoEnum.andanteModerato:\n                return 88;\n            case TempoEnum.andante:\n                return 92;\n            case TempoEnum.andantino:\n                return 96;\n            case TempoEnum.moderato:\n                return 106;\n            case TempoEnum.allegretto:\n                return 112;\n            case TempoEnum.allegroModerato:\n                return 118;\n            case TempoEnum.allegro:\n                return 130;\n            case TempoEnum.vivace:\n                return 140;\n            case TempoEnum.vivacissimo:\n                return 155;\n            case TempoEnum.allegrissimo:\n                return 170;\n            case TempoEnum.presto:\n                return 184;\n            case TempoEnum.prestissimo:\n                return 200;\n            default:\n                throw new ArgumentOutOfRangeException(\"tempoEnum\");\n        }\n    }\n    public static isInputStringInstantaneousTempo(inputString: string): boolean {\n        if (!inputString) { return false; }\n        return (\n            (InstantaneousTempoExpression.isStringInStringList(InstantaneousTempoExpression.listInstantaneousTempoLarghissimo, inputString))\n            || (InstantaneousTempoExpression.isStringInStringList(InstantaneousTempoExpression.listInstantaneousTempoGrave, inputString))\n            || (InstantaneousTempoExpression.isStringInStringList(InstantaneousTempoExpression.listInstantaneousTempoLento, inputString))\n            || (InstantaneousTempoExpression.isStringInStringList(InstantaneousTempoExpression.listInstantaneousTempoLargo, inputString))\n            || (InstantaneousTempoExpression.isStringInStringList(InstantaneousTempoExpression.listInstantaneousTempoLarghetto, inputString))\n            || (InstantaneousTempoExpression.isStringInStringList(InstantaneousTempoExpression.listInstantaneousTempoAdagio, inputString))\n            || (InstantaneousTempoExpression.isStringInStringList(InstantaneousTempoExpression.listInstantaneousTempoAdagietto, inputString))\n            || (InstantaneousTempoExpression.isStringInStringList(InstantaneousTempoExpression.listInstantaneousTempoAndanteModerato, inputString))\n            || (InstantaneousTempoExpression.isStringInStringList(InstantaneousTempoExpression.listInstantaneousTempoAndante, inputString))\n            || (InstantaneousTempoExpression.isStringInStringList(InstantaneousTempoExpression.listInstantaneousTempoAndantino, inputString))\n            || (InstantaneousTempoExpression.isStringInStringList(InstantaneousTempoExpression.listInstantaneousTempoModerato, inputString))\n            || (InstantaneousTempoExpression.isStringInStringList(InstantaneousTempoExpression.listInstantaneousTempoAllegretto, inputString))\n            || (InstantaneousTempoExpression.isStringInStringList(InstantaneousTempoExpression.listInstantaneousTempoAllegroModerato, inputString))\n            || (InstantaneousTempoExpression.isStringInStringList(InstantaneousTempoExpression.listInstantaneousTempoAllegro, inputString))\n            || (InstantaneousTempoExpression.isStringInStringList(InstantaneousTempoExpression.listInstantaneousTempoVivace, inputString))\n            || (InstantaneousTempoExpression.isStringInStringList(InstantaneousTempoExpression.listInstantaneousTempoVivacissimo, inputString))\n            || (InstantaneousTempoExpression.isStringInStringList(InstantaneousTempoExpression.listInstantaneousTempoAllegrissimo, inputString))\n            || (InstantaneousTempoExpression.isStringInStringList(InstantaneousTempoExpression.listInstantaneousTempoPresto, inputString))\n            || (InstantaneousTempoExpression.isStringInStringList(InstantaneousTempoExpression.listInstantaneousTempoPrestissimo, inputString))\n            || (InstantaneousTempoExpression.isStringInStringList(InstantaneousTempoExpression.listInstantaneousTempoChangesGeneral, inputString))\n        );\n    }\n\n    public get Label(): string {\n        return this.label;\n    }\n    public set Label(value: string) {\n        this.label = value;\n    }\n    public get Placement(): PlacementEnum {\n        return this.placement;\n    }\n    public set Placement(value: PlacementEnum) {\n        this.placement = value;\n    }\n    public get StaffNumber(): number {\n        return this.staffNumber;\n    }\n    public set StaffNumber(value: number) {\n        this.staffNumber = value;\n    }\n    public get Enum(): TempoEnum {\n        return this.tempoEnum;\n    }\n    public get TempoInBpm(): number {\n        return this.tempoInBpm;\n    }\n    public set TempoInBpm(value: number) {\n        this.tempoInBpm = value;\n    }\n    public get ParentMultiTempoExpression(): MultiTempoExpression {\n        return this.parentMultiTempoExpression;\n    }\n    public getAbsoluteTimestamp(): Fraction {\n        return Fraction.plus(this.ParentMultiTempoExpression.SourceMeasureParent.AbsoluteTimestamp, this.ParentMultiTempoExpression.Timestamp);\n    }\n    public getAbsoluteFloatTimestamp(): number {\n        return Fraction.plus(this.ParentMultiTempoExpression.SourceMeasureParent.AbsoluteTimestamp, this.ParentMultiTempoExpression.Timestamp).RealValue;\n    }\n    private setTempoAndTempoType(soundTempo: number): void {\n        if (!this.label) {\n            this.tempoInBpm = soundTempo;\n            this.tempoEnum = TempoEnum.metronomeMark;\n            return;\n        }\n        if (InstantaneousTempoExpression.isStringInStringList(InstantaneousTempoExpression.listInstantaneousTempoLarghissimo, this.label)) {\n            if (soundTempo === 0) {\n                soundTempo = InstantaneousTempoExpression.getDefaultValueForTempoType(TempoEnum.larghissimo);\n            }\n            this.tempoInBpm = soundTempo;\n            this.tempoEnum = TempoEnum.larghissimo;\n            return;\n        }\n        if (InstantaneousTempoExpression.isStringInStringList(InstantaneousTempoExpression.listInstantaneousTempoGrave, this.label)) {\n            if (soundTempo === 0) {\n                soundTempo = InstantaneousTempoExpression.getDefaultValueForTempoType(TempoEnum.grave);\n            }\n            this.tempoInBpm = soundTempo;\n            this.tempoEnum = TempoEnum.grave;\n            return;\n        }\n        if (InstantaneousTempoExpression.isStringInStringList(InstantaneousTempoExpression.listInstantaneousTempoLento, this.label)) {\n            if (soundTempo === 0) {\n                soundTempo = InstantaneousTempoExpression.getDefaultValueForTempoType(TempoEnum.lento);\n            }\n            this.tempoInBpm = soundTempo;\n            this.tempoEnum = TempoEnum.lento;\n            return;\n        }\n        if (InstantaneousTempoExpression.isStringInStringList(InstantaneousTempoExpression.listInstantaneousTempoLargo, this.label)) {\n            if (soundTempo === 0) {\n                soundTempo = InstantaneousTempoExpression.getDefaultValueForTempoType(TempoEnum.largo);\n            }\n            this.tempoInBpm = soundTempo;\n            this.tempoEnum = TempoEnum.largo;\n            return;\n        }\n        if (InstantaneousTempoExpression.isStringInStringList(InstantaneousTempoExpression.listInstantaneousTempoLarghetto, this.label)) {\n            if (soundTempo === 0) {\n                soundTempo = InstantaneousTempoExpression.getDefaultValueForTempoType(TempoEnum.larghetto);\n            }\n            this.tempoInBpm = soundTempo;\n            this.tempoEnum = TempoEnum.larghetto;\n            return;\n        }\n        if (InstantaneousTempoExpression.isStringInStringList(InstantaneousTempoExpression.listInstantaneousTempoAdagio, this.label)) {\n            if (soundTempo === 0) {\n                soundTempo = InstantaneousTempoExpression.getDefaultValueForTempoType(TempoEnum.adagio);\n            }\n            this.tempoInBpm = soundTempo;\n            this.tempoEnum = TempoEnum.adagio;\n            return;\n        }\n        if (InstantaneousTempoExpression.isStringInStringList(InstantaneousTempoExpression.listInstantaneousTempoAdagietto, this.label)) {\n            if (soundTempo === 0) {\n                soundTempo = InstantaneousTempoExpression.getDefaultValueForTempoType(TempoEnum.adagietto);\n            }\n            this.tempoInBpm = soundTempo;\n            this.tempoEnum = TempoEnum.adagietto;\n            return;\n        }\n        if (InstantaneousTempoExpression.isStringInStringList(InstantaneousTempoExpression.listInstantaneousTempoAndanteModerato, this.label)) {\n            if (soundTempo === 0) {\n                soundTempo = InstantaneousTempoExpression.getDefaultValueForTempoType(TempoEnum.andanteModerato);\n            }\n            this.tempoInBpm = soundTempo;\n            this.tempoEnum = TempoEnum.andanteModerato;\n            return;\n        }\n        if (InstantaneousTempoExpression.isStringInStringList(InstantaneousTempoExpression.listInstantaneousTempoAndante, this.label)) {\n            if (soundTempo === 0) {\n                soundTempo = InstantaneousTempoExpression.getDefaultValueForTempoType(TempoEnum.andante);\n            }\n            this.tempoInBpm = soundTempo;\n            this.tempoEnum = TempoEnum.andante;\n            return;\n        }\n        if (InstantaneousTempoExpression.isStringInStringList(InstantaneousTempoExpression.listInstantaneousTempoAndantino, this.label)) {\n            if (soundTempo === 0) {\n                soundTempo = InstantaneousTempoExpression.getDefaultValueForTempoType(TempoEnum.andantino);\n            }\n            this.tempoInBpm = soundTempo;\n            this.tempoEnum = TempoEnum.andantino;\n            return;\n        }\n        if (InstantaneousTempoExpression.isStringInStringList(InstantaneousTempoExpression.listInstantaneousTempoModerato, this.label)) {\n            if (soundTempo === 0) {\n                soundTempo = InstantaneousTempoExpression.getDefaultValueForTempoType(TempoEnum.moderato);\n            }\n            this.tempoInBpm = soundTempo;\n            this.tempoEnum = TempoEnum.moderato;\n            return;\n        }\n        if (InstantaneousTempoExpression.isStringInStringList(InstantaneousTempoExpression.listInstantaneousTempoAllegretto, this.label)) {\n            if (soundTempo === 0) {\n                soundTempo = InstantaneousTempoExpression.getDefaultValueForTempoType(TempoEnum.allegretto);\n            }\n            this.tempoInBpm = soundTempo;\n            this.tempoEnum = TempoEnum.allegretto;\n            return;\n        }\n        if (InstantaneousTempoExpression.isStringInStringList(InstantaneousTempoExpression.listInstantaneousTempoAllegroModerato, this.label)) {\n            if (soundTempo === 0) {\n                soundTempo = InstantaneousTempoExpression.getDefaultValueForTempoType(TempoEnum.allegroModerato);\n            }\n            this.tempoInBpm = soundTempo;\n            this.tempoEnum = TempoEnum.allegroModerato;\n            return;\n        }\n        if (InstantaneousTempoExpression.isStringInStringList(InstantaneousTempoExpression.listInstantaneousTempoAllegro, this.label)) {\n            if (soundTempo === 0) {\n                soundTempo = InstantaneousTempoExpression.getDefaultValueForTempoType(TempoEnum.allegro);\n            }\n            this.tempoInBpm = soundTempo;\n            this.tempoEnum = TempoEnum.allegro;\n            return;\n        }\n        if (InstantaneousTempoExpression.isStringInStringList(InstantaneousTempoExpression.listInstantaneousTempoVivace, this.label)) {\n            if (soundTempo === 0) {\n                soundTempo = InstantaneousTempoExpression.getDefaultValueForTempoType(TempoEnum.vivace);\n            }\n            this.tempoInBpm = soundTempo;\n            this.tempoEnum = TempoEnum.vivace;\n            return;\n        }\n        if (InstantaneousTempoExpression.isStringInStringList(InstantaneousTempoExpression.listInstantaneousTempoVivacissimo, this.label)) {\n            if (soundTempo === 0) {\n                soundTempo = InstantaneousTempoExpression.getDefaultValueForTempoType(TempoEnum.vivacissimo);\n            }\n            this.tempoInBpm = soundTempo;\n            this.tempoEnum = TempoEnum.vivacissimo;\n            return;\n        }\n        if (InstantaneousTempoExpression.isStringInStringList(InstantaneousTempoExpression.listInstantaneousTempoAllegrissimo, this.label)) {\n            if (soundTempo === 0) {\n                soundTempo = InstantaneousTempoExpression.getDefaultValueForTempoType(TempoEnum.allegrissimo);\n            }\n            this.tempoInBpm = soundTempo;\n            this.tempoEnum = TempoEnum.allegrissimo;\n            return;\n        }\n        if (InstantaneousTempoExpression.isStringInStringList(InstantaneousTempoExpression.listInstantaneousTempoPresto, this.label)) {\n            if (soundTempo === 0) {\n                soundTempo = InstantaneousTempoExpression.getDefaultValueForTempoType(TempoEnum.presto);\n            }\n            this.tempoInBpm = soundTempo;\n            this.tempoEnum = TempoEnum.presto;\n            return;\n        }\n        if (InstantaneousTempoExpression.isStringInStringList(InstantaneousTempoExpression.listInstantaneousTempoPrestissimo, this.label)) {\n            if (soundTempo === 0) {\n                soundTempo = InstantaneousTempoExpression.getDefaultValueForTempoType(TempoEnum.prestissimo);\n            }\n            this.tempoInBpm = soundTempo;\n            this.tempoEnum = TempoEnum.prestissimo;\n            return;\n        }\n        if (InstantaneousTempoExpression.isStringInStringList(InstantaneousTempoExpression.listInstantaneousTempoAddons, this.label)) {\n            this.tempoInBpm = 0;\n            this.tempoEnum = TempoEnum.addon;\n            return;\n        }\n        if (InstantaneousTempoExpression.isStringInStringList(InstantaneousTempoExpression.listInstantaneousTempoChangesGeneral, this.label)) {\n            this.tempoInBpm = 0;\n            this.tempoEnum = TempoEnum.changes;\n            return;\n        }\n    }\n}\n\nexport enum TempoEnum {\n    none,\n    larghissimo,\n    grave,\n    lento,\n    largo,\n    larghetto,\n    adagio,\n    adagietto,\n    andanteModerato,\n    andante,\n    andantino,\n    moderato,\n    allegretto,\n    allegroModerato,\n    allegro,\n    vivace,\n    vivacissimo,\n    allegrissimo,\n    presto,\n    prestissimo,\n    lastRealTempo,\n    addon,\n    changes,\n    metronomeMark\n}\n","import {PlacementEnum, AbstractExpression} from \"./AbstractExpression\";\nimport { FontStyles } from \"../../../Common/Enums/FontStyles\";\n\nexport class MoodExpression extends AbstractExpression {\n    constructor(label: string, placement: PlacementEnum, staffNumber: number) {\n        super(placement);\n        this.label = label;\n        this.staffNumber = staffNumber;\n        this.setMoodType();\n    }\n\n    private static listMoodAffettuoso: string[] = [\"affettuoso\"];\n    private static listMoodAgitato: string[] = [\"agitato\"];\n    private static listMoodAppassionato: string[] = [\"appassionato\"];\n    private static listMoodAnimato: string[] = [\"animato\", \"lively\"];\n    private static listMoodBrillante: string[] = [\"brillante\"];\n    private static listMoodCantabile: string[] = [\"cantabile\"];\n    private static listMoodDolce: string[] = [\"dolce\"];\n    private static listMoodEnergico: string[] = [\"energico\"];\n    private static listMoodEroico: string[] = [\"eroico\"];\n    private static listMoodEspressivo: string[] = [\"espressivo\"];\n    private static listMoodFurioso: string[] = [\"furioso\"];\n    private static listMoodGiocoso: string[] = [\"giocoso\"];\n    private static listMoodGioioso: string[] = [\"gioioso\"];\n    private static listMoodLacrimoso: string[] = [\"lacrimoso\"];\n    private static listMoodGrandioso: string[] = [\"grandioso\"];\n    private static listMoodGrazioso: string[] = [\"grazioso\"];\n    private static listMoodLeggiero: string[] = [\"leggiero\"];\n    private static listMoodMaestoso: string[] = [\"maestoso\"];\n    private static listMoodMalinconico: string[] = [\"malinconico\"];\n    private static listMoodMarcato: string[] = [\"marcato\"];\n    private static listMoodMarziale: string[] = [\"marziale\"];\n    private static listMoodMesto: string[] = [\"mesto\"];\n    private static listMoodMorendo: string[] = [\"morendo\"];\n    private static listMoodNobilmente: string[] = [\"nobilmente\"];\n    private static listMoodPatetico: string[] = [\"patetico\"];\n    private static listMoodPesante: string[] = [\"pesante\"];\n    private static listMoodSautille: string[] = [\"sautille\"];\n    private static listMoodSaltando: string[] = [\"saltando\"];\n    private static listMoodScherzando: string[] = [\"scherzando\"];\n    private static listMoodSostenuto: string[] = [\"sostenuto\"];\n    private static listMoodSpiccato: string[] = [\"spiccato\"];\n    private static listMoodTenerezza: string[] = [\"tenerezza\"];\n    private static listMoodTranquillamente: string[] = [\"tranquillamente\"];\n    private static listMoodTrionfante: string[] = [\"trionfante\"];\n\n    private moodType: MoodEnum;\n    private label: string;\n    private staffNumber: number;\n    public fontStyle: FontStyles;\n\n    public static isInputStringMood(inputString: string): boolean {\n        if (!inputString) {\n            return false;\n        }\n        return (\n            MoodExpression.isStringInStringList(MoodExpression.listMoodAffettuoso, inputString)\n            || MoodExpression.isStringInStringList(MoodExpression.listMoodAgitato, inputString)\n            || MoodExpression.isStringInStringList(MoodExpression.listMoodAnimato, inputString)\n            || MoodExpression.isStringInStringList(MoodExpression.listMoodAppassionato, inputString)\n            || MoodExpression.isStringInStringList(MoodExpression.listMoodBrillante, inputString)\n            || MoodExpression.isStringInStringList(MoodExpression.listMoodCantabile, inputString)\n            || MoodExpression.isStringInStringList(MoodExpression.listMoodDolce, inputString)\n            || MoodExpression.isStringInStringList(MoodExpression.listMoodEnergico, inputString)\n            || MoodExpression.isStringInStringList(MoodExpression.listMoodEroico, inputString)\n            || MoodExpression.isStringInStringList(MoodExpression.listMoodEspressivo, inputString)\n            || MoodExpression.isStringInStringList(MoodExpression.listMoodFurioso, inputString)\n            || MoodExpression.isStringInStringList(MoodExpression.listMoodGiocoso, inputString)\n            || MoodExpression.isStringInStringList(MoodExpression.listMoodGioioso, inputString)\n            || MoodExpression.isStringInStringList(MoodExpression.listMoodGrandioso, inputString)\n            || MoodExpression.isStringInStringList(MoodExpression.listMoodGrazioso, inputString)\n            || MoodExpression.isStringInStringList(MoodExpression.listMoodLacrimoso, inputString)\n            || MoodExpression.isStringInStringList(MoodExpression.listMoodLeggiero, inputString)\n            || MoodExpression.isStringInStringList(MoodExpression.listMoodMaestoso, inputString)\n            || MoodExpression.isStringInStringList(MoodExpression.listMoodMalinconico, inputString)\n            || MoodExpression.isStringInStringList(MoodExpression.listMoodMarcato, inputString)\n            || MoodExpression.isStringInStringList(MoodExpression.listMoodMarziale, inputString)\n            || MoodExpression.isStringInStringList(MoodExpression.listMoodMesto, inputString)\n            || MoodExpression.isStringInStringList(MoodExpression.listMoodMorendo, inputString)\n            || MoodExpression.isStringInStringList(MoodExpression.listMoodNobilmente, inputString)\n            || MoodExpression.isStringInStringList(MoodExpression.listMoodPatetico, inputString)\n            || MoodExpression.isStringInStringList(MoodExpression.listMoodPesante, inputString)\n            || MoodExpression.isStringInStringList(MoodExpression.listMoodSaltando, inputString)\n            || MoodExpression.isStringInStringList(MoodExpression.listMoodSautille, inputString)\n            || MoodExpression.isStringInStringList(MoodExpression.listMoodScherzando, inputString)\n            || MoodExpression.isStringInStringList(MoodExpression.listMoodSostenuto, inputString)\n            || MoodExpression.isStringInStringList(MoodExpression.listMoodSpiccato, inputString)\n            || MoodExpression.isStringInStringList(MoodExpression.listMoodTenerezza, inputString)\n            || MoodExpression.isStringInStringList(MoodExpression.listMoodTranquillamente, inputString)\n            || MoodExpression.isStringInStringList(MoodExpression.listMoodTrionfante, inputString)\n        );\n    }\n\n    public get Label(): string {\n        return this.label;\n    }\n    public set Label(value: string) {\n        this.label = value;\n    }\n    public get Mood(): MoodEnum {\n        return this.moodType;\n    }\n    public set Mood(value: MoodEnum) {\n        this.moodType = value;\n    }\n    public get StaffNumber(): number {\n        return this.staffNumber;\n    }\n    public set StaffNumber(value: number) {\n        this.staffNumber = value;\n    }\n    public get Placement(): PlacementEnum {\n        return this.placement;\n    }\n    public set Placement(value: PlacementEnum) {\n        this.placement = value;\n    }\n\n    private setMoodType(): void {\n        if (MoodExpression.isStringInStringList(MoodExpression.listMoodAffettuoso, this.label)) {\n            this.moodType = MoodEnum.Affettuoso;\n        } else if (MoodExpression.isStringInStringList(MoodExpression.listMoodAgitato, this.label)) {\n            this.moodType = MoodEnum.Agitato;\n        } else if (MoodExpression.isStringInStringList(MoodExpression.listMoodAnimato, this.label)) {\n            this.moodType = MoodEnum.Animato;\n        } else if (MoodExpression.isStringInStringList(MoodExpression.listMoodAppassionato, this.label)) {\n            this.moodType = MoodEnum.Appassionato;\n        } else if (MoodExpression.isStringInStringList(MoodExpression.listMoodBrillante, this.label)) {\n            this.moodType = MoodEnum.Brillante;\n        } else if (MoodExpression.isStringInStringList(MoodExpression.listMoodCantabile, this.label)) {\n            this.moodType = MoodEnum.Cantabile;\n        } else if (MoodExpression.isStringInStringList(MoodExpression.listMoodDolce, this.label)) {\n            this.moodType = MoodEnum.Dolce;\n        } else if (MoodExpression.isStringInStringList(MoodExpression.listMoodEnergico, this.label)) {\n            this.moodType = MoodEnum.Energico;\n        } else if (MoodExpression.isStringInStringList(MoodExpression.listMoodEroico, this.label)) {\n            this.moodType = MoodEnum.Eroico;\n        } else if (MoodExpression.isStringInStringList(MoodExpression.listMoodEspressivo, this.label)) {\n            this.moodType = MoodEnum.Espressivo;\n        } else if (MoodExpression.isStringInStringList(MoodExpression.listMoodFurioso, this.label)) {\n            this.moodType = MoodEnum.Furioso;\n        } else if (MoodExpression.isStringInStringList(MoodExpression.listMoodGiocoso, this.label)) {\n            this.moodType = MoodEnum.Giocoso;\n        } else if (MoodExpression.isStringInStringList(MoodExpression.listMoodGioioso, this.label)) {\n            this.moodType = MoodEnum.Gioioso;\n        } else if (MoodExpression.isStringInStringList(MoodExpression.listMoodGrandioso, this.label)) {\n            this.moodType = MoodEnum.Grandioso;\n        } else if (MoodExpression.isStringInStringList(MoodExpression.listMoodGrazioso, this.label)) {\n            this.moodType = MoodEnum.Grazioso;\n        } else if (MoodExpression.isStringInStringList(MoodExpression.listMoodLacrimoso, this.label)) {\n            this.moodType = MoodEnum.Lacrimoso;\n        } else if (MoodExpression.isStringInStringList(MoodExpression.listMoodLeggiero, this.label)) {\n            this.moodType = MoodEnum.Leggiero;\n        } else if (MoodExpression.isStringInStringList(MoodExpression.listMoodMaestoso, this.label)) {\n            this.moodType = MoodEnum.Maestoso;\n        } else if (MoodExpression.isStringInStringList(MoodExpression.listMoodMalinconico, this.label)) {\n            this.moodType = MoodEnum.Malinconico;\n        } else if (MoodExpression.isStringInStringList(MoodExpression.listMoodMarcato, this.label)) {\n            this.moodType = MoodEnum.Marcato;\n        } else if (MoodExpression.isStringInStringList(MoodExpression.listMoodMarziale, this.label)) {\n            this.moodType = MoodEnum.Marziale;\n        } else if (MoodExpression.isStringInStringList(MoodExpression.listMoodMesto, this.label)) {\n            this.moodType = MoodEnum.Mesto;\n        } else if (MoodExpression.isStringInStringList(MoodExpression.listMoodMorendo, this.label)) {\n            this.moodType = MoodEnum.Morendo;\n        } else if (MoodExpression.isStringInStringList(MoodExpression.listMoodNobilmente, this.label)) {\n            this.moodType = MoodEnum.Nobilmente;\n        } else if (MoodExpression.isStringInStringList(MoodExpression.listMoodPatetico, this.label)) {\n            this.moodType = MoodEnum.Patetico;\n        } else if (MoodExpression.isStringInStringList(MoodExpression.listMoodPesante, this.label)) {\n            this.moodType = MoodEnum.Pesante;\n        } else if (MoodExpression.isStringInStringList(MoodExpression.listMoodSaltando, this.label)) {\n            this.moodType = MoodEnum.Saltando;\n        } else if (MoodExpression.isStringInStringList(MoodExpression.listMoodSautille, this.label)) {\n            this.moodType = MoodEnum.Sautille;\n        } else if (MoodExpression.isStringInStringList(MoodExpression.listMoodScherzando, this.label)) {\n            this.moodType = MoodEnum.Scherzando;\n        } else if (MoodExpression.isStringInStringList(MoodExpression.listMoodSostenuto, this.label)) {\n            this.moodType = MoodEnum.Sostenuto;\n        } else if (MoodExpression.isStringInStringList(MoodExpression.listMoodSpiccato, this.label)) {\n            this.moodType = MoodEnum.Spiccato;\n        } else if (MoodExpression.isStringInStringList(MoodExpression.listMoodTenerezza, this.label)) {\n            this.moodType = MoodEnum.Tenerezza;\n        } else if (MoodExpression.isStringInStringList(MoodExpression.listMoodTranquillamente, this.label)) {\n            this.moodType = MoodEnum.Tranquillamente;\n        } else if (MoodExpression.isStringInStringList(MoodExpression.listMoodTrionfante, this.label)) {\n            this.moodType = MoodEnum.Trionfante;\n        }\n    }\n}\n\nexport enum MoodEnum {\n    Affettuoso = 0,\n    Agitato = 1,\n    Appassionato = 2,\n    Animato = 3,\n    Brillante = 4,\n    Cantabile = 5,\n    Dolce = 6,\n    Energico = 7,\n    Eroico = 8,\n    Espressivo = 9,\n    Furioso = 10,\n    Giocoso = 11,\n    Gioioso = 12,\n    Lacrimoso = 13,\n    Grandioso = 14,\n    Grazioso = 15,\n    Leggiero = 16,\n    Maestoso = 17,\n    Malinconico = 18,\n    Marcato = 19,\n    Marziale = 20,\n    Mesto = 21,\n    Morendo = 22,\n    Nobilmente = 23,\n    Patetico = 24,\n    Pesante = 25,\n    Sautille = 26,\n    Saltando = 27,\n    Scherzando = 28,\n    Sostenuto = 29,\n    Spiccato = 30,\n    Tenerezza = 31,\n    Tranquillamente = 32,\n    Trionfante = 33,\n    Vivace = 34\n}\n","import {SourceMeasure} from \"../SourceMeasure\";\nimport {Fraction} from \"../../../Common/DataObjects/Fraction\";\nimport {InstantaneousDynamicExpression} from \"./InstantaneousDynamicExpression\";\nimport {ContinuousDynamicExpression} from \"./ContinuousExpressions/ContinuousDynamicExpression\";\nimport {OctaveShift} from \"./ContinuousExpressions/OctaveShift\";\nimport {MoodExpression} from \"./MoodExpression\";\nimport {UnknownExpression} from \"./UnknownExpression\";\nimport {AbstractExpression} from \"./AbstractExpression\";\nimport {PlacementEnum} from \"./AbstractExpression\";\nimport { FontStyles } from \"../../../Common/Enums/FontStyles\";\n\nexport class MultiExpression {\n\n    constructor(sourceMeasure: SourceMeasure, timestamp: Fraction) {\n        this.sourceMeasure = sourceMeasure;\n        this.timestamp = timestamp;\n    }\n\n    private sourceMeasure: SourceMeasure;\n    private staffNumber: number;\n    private timestamp: Fraction;\n    /** The 'number=\"x\"' given in XML, e.g. of a wedge, used to identify similar expressions. */\n    public numberXml: number;\n    private instantaneousDynamic: InstantaneousDynamicExpression;\n    private endingContinuousDynamic: ContinuousDynamicExpression;\n    private startingContinuousDynamic: ContinuousDynamicExpression;\n    private unknownList: UnknownExpression[] = [];\n    private moodList: MoodExpression[] = [];\n    private expressions: MultiExpressionEntry[] = [];\n    private combinedExpressionsText: string;\n    private octaveShiftStart: OctaveShift;\n    private octaveShiftEnd: OctaveShift;\n\n    public get SourceMeasureParent(): SourceMeasure {\n        return this.sourceMeasure;\n    }\n    public set SourceMeasureParent(value: SourceMeasure) {\n        this.sourceMeasure = value;\n    }\n    public get StaffNumber(): number {\n        return this.staffNumber;\n    }\n    public set StaffNumber(value: number) {\n        this.staffNumber = value;\n    }\n    public get Timestamp(): Fraction {\n        return this.timestamp;\n    }\n    public set Timestamp(value: Fraction) {\n        this.timestamp = value;\n    }\n    public get AbsoluteTimestamp(): Fraction {\n        return Fraction.plus(this.timestamp, this.sourceMeasure.AbsoluteTimestamp);\n    }\n    public get InstantaneousDynamic(): InstantaneousDynamicExpression {\n        return this.instantaneousDynamic;\n    }\n    public set InstantaneousDynamic(value: InstantaneousDynamicExpression) {\n        this.instantaneousDynamic = value;\n    }\n    public get EndingContinuousDynamic(): ContinuousDynamicExpression {\n        return this.endingContinuousDynamic;\n    }\n    public set EndingContinuousDynamic(value: ContinuousDynamicExpression) {\n        this.endingContinuousDynamic = value;\n    }\n    public get StartingContinuousDynamic(): ContinuousDynamicExpression {\n        return this.startingContinuousDynamic;\n    }\n    public set StartingContinuousDynamic(value: ContinuousDynamicExpression) {\n        this.startingContinuousDynamic = value;\n    }\n    public get MoodList():  MoodExpression[] {\n        return this.moodList;\n    }\n    public get UnknownList():  UnknownExpression[] {\n        return this.unknownList;\n    }\n    public get EntriesList():  MultiExpressionEntry[] {\n        return this.expressions;\n    }\n    public get OctaveShiftStart(): OctaveShift {\n        return this.octaveShiftStart;\n    }\n    public set OctaveShiftStart(value: OctaveShift) {\n        this.octaveShiftStart = value;\n    }\n    public get OctaveShiftEnd(): OctaveShift {\n        return this.octaveShiftEnd;\n    }\n    public set OctaveShiftEnd(value: OctaveShift) {\n        this.octaveShiftEnd = value;\n    }\n    public get CombinedExpressionsText(): string {\n        return this.combinedExpressionsText;\n    }\n    public set CombinedExpressionsText(value: string) {\n        this.combinedExpressionsText = value;\n    }\n    public getPlacementOfFirstEntry(): PlacementEnum {\n        let placement: PlacementEnum = PlacementEnum.Above;\n        if (this.expressions.length > 0) {\n            if (this.expressions[0].expression instanceof InstantaneousDynamicExpression) {\n                placement = (<InstantaneousDynamicExpression>(this.expressions[0].expression)).Placement;\n            } else if (this.expressions[0].expression instanceof ContinuousDynamicExpression) {\n                placement = (<ContinuousDynamicExpression>(this.expressions[0].expression)).Placement;\n            } else if (this.expressions[0].expression instanceof MoodExpression) {\n                placement = (<MoodExpression>(this.expressions[0].expression)).Placement;\n            } else if (this.expressions[0].expression instanceof UnknownExpression) {\n                placement = (<UnknownExpression>(this.expressions[0].expression)).Placement;\n            }\n        }\n        return placement;\n    }\n\n    public getFontstyleOfFirstEntry(): FontStyles {\n       let fontStyle: FontStyles = FontStyles.Regular;\n       if (this.expressions.length > 0) {\n           if (this.expressions[0].expression instanceof ContinuousDynamicExpression) {\n            fontStyle = FontStyles.Italic;\n           } else if (this.expressions[0].expression instanceof MoodExpression) {\n            fontStyle = FontStyles.Italic;\n           } else if (this.expressions[0].expression instanceof UnknownExpression) {\n            const unknownExpression: UnknownExpression = (this.expressions[0].expression as UnknownExpression);\n            fontStyle = unknownExpression.fontStyle ?? FontStyles.Regular;\n           }\n       }\n       return fontStyle;\n    }\n    //public getFirstEntry(staffLine: StaffLine, graphLabel: GraphicalLabel): AbstractGraphicalExpression {\n    //    let indexOfFirstNotInstDynExpr: number = 0;\n    //    if (this.expressions[0].expression instanceof InstantaneousDynamicExpression)\n    //        indexOfFirstNotInstDynExpr = 1;\n    //    if (this.expressions.length > 0) {\n    //        if (this.expressions[indexOfFirstNotInstDynExpr].expression instanceof ContinuousDynamicExpression)\n    //            return new GraphicalContinuousDynamicExpression(\n    // <ContinuousDynamicExpression>(this.expressions[indexOfFirstNotInstDynExpr].expression), graphLabel);\n    //        else if (this.expressions[indexOfFirstNotInstDynExpr].expression instanceof MoodExpression)\n    //            return new GraphicalMoodExpression(<MoodExpression>(this.expressions[indexOfFirstNotInstDynExpr].expression), graphLabel);\n    //        else if (this.expressions[indexOfFirstNotInstDynExpr].expression instanceof UnknownExpression)\n    //            return new GraphicalUnknownExpression(<UnknownExpression>(this.expressions[indexOfFirstNotInstDynExpr].expression), graphLabel);\n    //        else return undefined;\n    //    }\n    //    else return undefined;\n    //}\n    public addExpression(abstractExpression: AbstractExpression, prefix: string): void {\n        if (abstractExpression instanceof InstantaneousDynamicExpression) {\n            if (this.instantaneousDynamic) {\n                this.removeExpressionFromEntryList(this.InstantaneousDynamic);\n            }\n            this.instantaneousDynamic = <InstantaneousDynamicExpression>abstractExpression;\n            this.instantaneousDynamic.ParentMultiExpression = this;\n        } else if (abstractExpression instanceof ContinuousDynamicExpression) {\n            this.startingContinuousDynamic = <ContinuousDynamicExpression>abstractExpression;\n        } else if (abstractExpression instanceof MoodExpression) {\n            this.moodList.push(<MoodExpression>abstractExpression);\n        } else if (abstractExpression instanceof UnknownExpression) {\n            this.unknownList.push(<UnknownExpression>abstractExpression);\n        }\n        this.addExpressionToEntryList(abstractExpression, prefix);\n    }\n    public CompareTo(other: MultiExpression): number {\n        if (this.Timestamp.RealValue > other.Timestamp.RealValue) {\n            return 1;\n        }\n        if (this.Timestamp.RealValue < other.Timestamp.RealValue) {\n            return -1;\n        } else {\n            return 0;\n        }\n    }\n    private addExpressionToEntryList(expression: AbstractExpression, prefix: string): void {\n        const multiExpressionEntry: MultiExpressionEntry = new MultiExpressionEntry();\n        multiExpressionEntry.prefix = prefix;\n        multiExpressionEntry.expression = expression;\n        if (expression instanceof ContinuousDynamicExpression) {\n            multiExpressionEntry.label = (<ContinuousDynamicExpression>(expression)).Label;\n        } else if (expression instanceof MoodExpression) {\n            multiExpressionEntry.label = (<MoodExpression>(expression)).Label;\n        } else if (expression instanceof UnknownExpression) {\n            multiExpressionEntry.label = (<UnknownExpression>(expression)).Label;\n        } else {\n            multiExpressionEntry.label = \"\";\n        }\n        this.expressions.push(multiExpressionEntry);\n    }\n    private removeExpressionFromEntryList(expression: AbstractExpression): void {\n        for (let idx: number = 0, len: number = this.expressions.length; idx < len; ++idx) {\n            const entry: MultiExpressionEntry = this.expressions[idx];\n            if (entry.expression === expression) {\n                this.expressions.splice(idx, 1);\n                break;\n            }\n        }\n    }\n\n}\n\nexport class MultiExpressionEntry {\n    public prefix: string;\n    public expression: AbstractExpression;\n    public label: string;\n}\n","import {Fraction} from \"../../../Common/DataObjects/Fraction\";\nimport {SourceMeasure} from \"../SourceMeasure\";\nimport {InstantaneousTempoExpression} from \"./InstantaneousTempoExpression\";\nimport {PlacementEnum} from \"./AbstractExpression\";\nimport {FontStyles} from \"../../../Common/Enums/FontStyles\";\nimport {AbstractTempoExpression} from \"./AbstractTempoExpression\";\nimport {ContinuousTempoExpression} from \"./ContinuousExpressions/ContinuousTempoExpression\";\n\nexport class MultiTempoExpression {\n\n    constructor(sourceMeasure: SourceMeasure, timestamp: Fraction) {\n        this.sourceMeasure = sourceMeasure;\n        this.timestamp = timestamp;\n    }\n\n    private timestamp: Fraction;\n    private sourceMeasure: SourceMeasure;\n    private instantaneousTempo: InstantaneousTempoExpression;\n    private continuousTempo: ContinuousTempoExpression;\n    private expressions: TempoExpressionEntry[] = [];\n    private combinedExpressionsText: string;\n\n    public get Timestamp(): Fraction {\n        return this.timestamp;\n    }\n    public get AbsoluteTimestamp(): Fraction {\n        return Fraction.plus(this.sourceMeasure.AbsoluteTimestamp, this.timestamp);\n    }\n    public get SourceMeasureParent(): SourceMeasure {\n        return this.sourceMeasure;\n    }\n    public set SourceMeasureParent(value: SourceMeasure) {\n        this.sourceMeasure = value;\n    }\n    public get InstantaneousTempo(): InstantaneousTempoExpression {\n        return this.instantaneousTempo;\n    }\n    public get ContinuousTempo(): ContinuousTempoExpression {\n        return this.continuousTempo;\n    }\n    public get EntriesList(): TempoExpressionEntry[] {\n        return this.expressions;\n    }\n    public get CombinedExpressionsText(): string {\n        return this.combinedExpressionsText;\n    }\n    public set CombinedExpressionsText(value: string) {\n        this.combinedExpressionsText = value;\n    }\n    public getPlacementOfFirstEntry(): PlacementEnum {\n        let placement: PlacementEnum = PlacementEnum.Above;\n        if (this.expressions.length > 0) {\n            if (this.expressions[0].Expression instanceof InstantaneousTempoExpression) {\n                placement = (<InstantaneousTempoExpression>(this.expressions[0].Expression)).Placement;\n            } else if (this.expressions[0].Expression instanceof ContinuousTempoExpression) {\n                placement = (<ContinuousTempoExpression>(this.expressions[0].Expression)).Placement;\n            }\n        }\n        return placement;\n    }\n    public getFontstyleOfFirstEntry(): FontStyles {\n        let fontStyle: FontStyles = FontStyles.Regular;\n        if (this.expressions[0].Expression instanceof InstantaneousTempoExpression) {\n            fontStyle = FontStyles.Bold;\n        } else if (this.expressions[0].Expression instanceof ContinuousTempoExpression) {\n            fontStyle = FontStyles.Italic;\n        }\n        return fontStyle;\n    }\n    //public getFirstEntry(graphicalLabel: GraphicalLabel): AbstractGraphicalExpression {\n    //    let indexOfFirstNotInstDynExpr: number = 0;\n    //    if (this.expressions.length > 0) {\n    //        if (this.expressions[indexOfFirstNotInstDynExpr].Expression instanceof InstantaneousTempoExpression)\n    //            return new GraphicalInstantaneousTempoExpression(\n    // <InstantaneousTempoExpression>(this.expressions[indexOfFirstNotInstDynExpr].Expression), graphicalLabel);\n    //        else if (this.expressions[indexOfFirstNotInstDynExpr].Expression instanceof ContinuousTempoExpression)\n    //            return new GraphicalContinuousTempoExpression(\n    // <ContinuousTempoExpression>(this.expressions[indexOfFirstNotInstDynExpr].Expression), graphicalLabel);\n    //        else return undefined;\n    //    }\n    //    return undefined;\n    //}\n    public addExpression(abstractTempoExpression: AbstractTempoExpression, prefix: string): void {\n        if (this.checkIfAlreadyExists(abstractTempoExpression)) {\n            return;\n        }\n\n        if (abstractTempoExpression instanceof InstantaneousTempoExpression) {\n            this.instantaneousTempo = <InstantaneousTempoExpression>abstractTempoExpression;\n        } else if (abstractTempoExpression instanceof ContinuousTempoExpression) {\n            this.continuousTempo = <ContinuousTempoExpression>abstractTempoExpression;\n        }\n        const tempoExpressionEntry: TempoExpressionEntry = new TempoExpressionEntry();\n        tempoExpressionEntry.prefix = prefix;\n        tempoExpressionEntry.Expression = abstractTempoExpression;\n        tempoExpressionEntry.label = abstractTempoExpression.Label;\n        this.expressions.push(tempoExpressionEntry);\n    }\n    public CompareTo(other: MultiTempoExpression): number {\n        if (this.Timestamp.RealValue > other.Timestamp.RealValue) {\n            return 1;\n        }\n        if (this.Timestamp.RealValue < other.Timestamp.RealValue) {\n            return -1;\n        } else {\n            return 0;\n        }\n    }\n\n    private checkIfAlreadyExists(abstractTempoExpression: AbstractTempoExpression ): boolean {\n        for (const entry of this.expressions) {\n            if (entry.label === abstractTempoExpression.Label) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n}\n\nexport class TempoExpressionEntry {\n    public prefix: string;\n    protected expression: AbstractTempoExpression;\n    public label: string;\n\n    public get Expression(): AbstractTempoExpression {\n        return this.expression;\n    }\n\n    public set Expression(value: AbstractTempoExpression) {\n        this.expression = value;\n    }\n}\n","import { AbstractExpression, PlacementEnum } from \"./AbstractExpression\";\n\nexport class RehearsalExpression extends AbstractExpression {\n    constructor(label: string, placement: PlacementEnum) {\n        super(placement);\n        this.label = label;\n    }\n\n    public label: string;\n}\n","import { PlacementEnum, AbstractExpression } from \"./AbstractExpression\";\nimport { TextAlignmentEnum } from \"../../../Common/Enums/TextAlignment\";\nimport { FontStyles } from \"../../../Common/Enums/FontStyles\";\n\nexport class UnknownExpression extends AbstractExpression {\n    constructor(label: string, placement: PlacementEnum, textAlignment: TextAlignmentEnum, staffNumber: number) {\n        super(placement);\n        this.label = label;\n        this.staffNumber = staffNumber;\n        if (textAlignment === undefined) { // don't replace undefined check\n            textAlignment = TextAlignmentEnum.LeftBottom;\n        }\n        this.textAlignment = textAlignment;\n    }\n    private label: string;\n    private textAlignment: TextAlignmentEnum;\n    private staffNumber: number;\n    public fontStyle: FontStyles;\n\n    public get Label(): string {\n        return this.label;\n    }\n    public get Placement(): PlacementEnum {\n        return this.placement;\n    }\n    public set Placement(value: PlacementEnum) {\n        this.placement = value;\n    }\n    public get StaffNumber(): number {\n        return this.staffNumber;\n    }\n    public set StaffNumber(value: number) {\n        this.staffNumber = value;\n    }\n    public get TextAlignment(): TextAlignmentEnum {\n        return this.textAlignment;\n    }\n}\n","// created from 'create-ts-index'\n\nexport * from \"./AbstractExpression\";\nexport * from \"./AbstractTempoExpression\";\nexport * from \"./DynamicExpressionSymbolEnum\";\nexport * from \"./InstantaneousDynamicExpression\";\nexport * from \"./InstantaneousTempoExpression\";\nexport * from \"./MoodExpression\";\nexport * from \"./MultiExpression\";\nexport * from \"./MultiTempoExpression\";\nexport * from \"./RehearsalExpression\";\nexport * from \"./UnknownExpression\";\n","import {ContinuousDynamicExpression} from \"../Expressions/ContinuousExpressions/ContinuousDynamicExpression\";\nimport {InstantaneousDynamicExpression} from \"../Expressions/InstantaneousDynamicExpression\";\nimport {MultiExpression} from \"../Expressions/MultiExpression\";\n\nexport class DynamicsContainer /*implements IComparable<DynamicsContainer>*/ {\n    constructor(dynamicExpression: ContinuousDynamicExpression|InstantaneousDynamicExpression, staffNumber: number) {\n        if (dynamicExpression instanceof ContinuousDynamicExpression) {\n            this.continuousDynamicExpression = dynamicExpression;\n        } else if (dynamicExpression instanceof InstantaneousDynamicExpression) {\n            this.instantaneousDynamicExpression = dynamicExpression;\n        }\n        this.staffNumber = staffNumber;\n    }\n\n    public continuousDynamicExpression: ContinuousDynamicExpression;\n    public instantaneousDynamicExpression: InstantaneousDynamicExpression;\n    public staffNumber: number;\n\n    public parMultiExpression(): MultiExpression {\n        if (this.continuousDynamicExpression) {\n            return this.continuousDynamicExpression.StartMultiExpression;\n        }\n        if (this.instantaneousDynamicExpression) {\n            return this.instantaneousDynamicExpression.ParentMultiExpression;\n        }\n        return undefined;\n    }\n    public CompareTo(other: DynamicsContainer): number {\n        return this.parMultiExpression().AbsoluteTimestamp.CompareTo(other.parMultiExpression().AbsoluteTimestamp);\n    }\n}\n","import {SourceStaffEntry} from \"../SourceStaffEntry\";\n\nexport abstract class AbstractNotationInstruction {\n\n    constructor(parent: SourceStaffEntry) {\n        this.parent = parent;\n    }\n\n    protected parent: SourceStaffEntry;\n    /** States whether the object should be displayed. False if xmlNode.attribute(\"print-object\").value = \"no\". */\n    private printObject: boolean = true;\n\n    public get Parent(): SourceStaffEntry {\n        return this.parent;\n    }\n    public set Parent(value: SourceStaffEntry) {\n        this.parent = value;\n    }\n\n    public get PrintObject(): boolean {\n        return this.printObject;\n    }\n\n    public set PrintObject(value: boolean) {\n        this.printObject = value;\n    }\n}\n","import {Pitch} from \"../../../Common/DataObjects/Pitch\";\nimport {AbstractNotationInstruction} from \"./AbstractNotationInstruction\";\nimport {NoteEnum} from \"../../../Common/DataObjects/Pitch\";\nimport {AccidentalEnum} from \"../../../Common/DataObjects/Pitch\";\nimport {ArgumentOutOfRangeException} from \"../../Exceptions\";\n\n/**\n * A [[ClefInstruction]] is the clef placed at the beginning of the stave, which indicates the pitch of the notes.\n */\nexport class ClefInstruction extends AbstractNotationInstruction {\n    constructor(clefType: ClefEnum = ClefEnum.G, octaveOffset: number = 0, line: number = 2) {\n        super(undefined); // FIXME? Missing SourceStaffEntry!\n        this.line = line;\n        this.clefType = clefType;\n        this.octaveOffset = octaveOffset;\n        this.calcParameters();\n    }\n\n    private clefType: ClefEnum = ClefEnum.G;\n    private line: number = 2;\n    private octaveOffset: number = 0;\n    private clefPitch: Pitch;\n    private referenceCyPosition: number;\n\n    public static getDefaultClefFromMidiInstrument(instrument: MidiInstrument): ClefInstruction {\n        switch (instrument) {\n            case MidiInstrument.Acoustic_Grand_Piano:\n                return new ClefInstruction(ClefEnum.F, 0, 4);\n            case MidiInstrument.Electric_Bass_finger:\n                return new ClefInstruction(ClefEnum.F, 0, 4);\n            case MidiInstrument.Electric_Bass_pick:\n                return new ClefInstruction(ClefEnum.F, 0, 4);\n            case MidiInstrument.Fretless_Bass:\n                return new ClefInstruction(ClefEnum.F, 0, 4);\n            case MidiInstrument.Slap_Bass_1:\n                return new ClefInstruction(ClefEnum.F, 0, 4);\n            case MidiInstrument.Slap_Bass_2:\n                return new ClefInstruction(ClefEnum.F, 0, 4);\n            case MidiInstrument.Synth_Bass_1:\n                return new ClefInstruction(ClefEnum.F, 0, 4);\n            case MidiInstrument.Synth_Bass_2:\n                return new ClefInstruction(ClefEnum.F, 0, 4);\n            case MidiInstrument.Contrabass:\n                return new ClefInstruction(ClefEnum.F, 0, 4);\n            default:\n                return new ClefInstruction(ClefEnum.G, 0, 2);\n        }\n    }\n\n    public static getAllPossibleClefs(): ClefInstruction[] {\n        const clefList: ClefInstruction[] = [];\n        for (let i: number = 0; i <= 2; i++) {\n            const clefInstructionG: ClefInstruction = new ClefInstruction(ClefEnum.G, i, 2);\n            clefList.push(clefInstructionG);\n        }\n        for (let j: number = -2; j <= 0; j++) {\n            const clefInstructionF: ClefInstruction = new ClefInstruction(ClefEnum.F, j, 4);\n            clefList.push(clefInstructionF);\n        }\n        return clefList;\n    }\n\n    public static isSupportedClef(clef: ClefEnum): boolean {\n        switch (clef) {\n            case ClefEnum.G:\n            case ClefEnum.F:\n            case ClefEnum.C:\n            case ClefEnum.percussion:\n            case ClefEnum.TAB:\n                return true;\n            default:\n                return false;\n        }\n    }\n\n    public get ClefType(): ClefEnum {\n        return this.clefType;\n    }\n\n    public set ClefType(value: ClefEnum) {\n        this.clefType = value;\n    }\n\n    public get Line(): number {\n        return this.line;\n    }\n\n    public set Line(value: number) {\n        this.line = value;\n    }\n\n    public get OctaveOffset(): number {\n        return this.octaveOffset;\n    }\n\n    public set OctaveOffset(value: number) {\n        this.octaveOffset = value;\n    }\n\n    public get ClefPitch(): Pitch {\n        return this.clefPitch;\n    }\n\n    public set ClefPitch(value: Pitch) {\n        this.clefPitch = value;\n    }\n\n    public get ReferenceCyPosition(): number {\n        return this.referenceCyPosition;\n    }\n\n    public set ReferenceCyPosition(value: number) {\n        this.referenceCyPosition = value;\n    }\n\n    public Equals(other: ClefInstruction): boolean {\n        if (this === other) {\n            return true;\n        }\n        if (!this || !other) {\n            return false;\n        }\n        return (this.clefPitch === other.clefPitch && this.Line === other.Line);\n    }\n\n    public NotEqual(clef2: ClefInstruction): boolean {\n        return !this.Equals(clef2);\n    }\n\n    public ToString(): string {\n        return \"ClefType: \" + this.clefType;\n    }\n\n    private calcParameters(): void {\n        switch (this.clefType) {\n            case ClefEnum.G:\n                this.clefPitch = new Pitch(NoteEnum.G, 1 + this.octaveOffset, AccidentalEnum.NONE);\n                this.referenceCyPosition = (5 - this.line) + 2;\n                break;\n            case ClefEnum.F:\n                this.clefPitch = new Pitch(NoteEnum.F, 0 + this.octaveOffset, AccidentalEnum.NONE);\n                this.referenceCyPosition = (5 - this.line) + 1.5;\n                break;\n            case ClefEnum.C:\n                this.clefPitch = new Pitch(NoteEnum.C, 1 + this.octaveOffset, AccidentalEnum.NONE);\n                this.referenceCyPosition = (5 - this.line);\n                break;\n            case ClefEnum.percussion:\n                this.clefPitch = new Pitch(NoteEnum.C, 2, AccidentalEnum.NONE);\n                this.referenceCyPosition = 2;\n                break;\n            case ClefEnum.TAB:\n                this.clefPitch = new Pitch(NoteEnum.G, 0, AccidentalEnum.NONE);\n                this.referenceCyPosition = 0;\n                break;\n            default:\n                throw new ArgumentOutOfRangeException(\"clefType\");\n        }\n    }\n}\n\nexport enum ClefEnum {\n    G = 0,\n    F = 1,\n    C = 2,\n    percussion = 3,\n    TAB = 4\n}\n\n\nexport enum MidiInstrument {\n    None = -1,\n    Acoustic_Grand_Piano,\n    Bright_Acoustic_Piano,\n    Electric_Grand_Piano,\n    Honky_tonk_Piano,\n    Electric_Piano_1,\n    Electric_Piano_2,\n    Harpsichord,\n    Clavinet,\n    Celesta,\n    Glockenspiel,\n    Music_Box,\n    Vibraphone,\n    Marimba,\n    Xylophone,\n    Tubular_Bells,\n    Dulcimer,\n    Drawbar_Organ,\n    Percussive_Organ,\n    Rock_Organ,\n    Church_Organ,\n    Reed_Organ,\n    Accordion,\n    Harmonica,\n    Tango_Accordion,\n    Acoustic_Guitar_nylon,\n    Acoustic_Guitar_steel,\n    Electric_Guitar_jazz,\n    Electric_Guitar_clean,\n    Electric_Guitar_muted,\n    Overdriven_Guitar,\n    Distortion_Guitar,\n    Guitar_harmonics,\n    Acoustic_Bass,\n    Electric_Bass_finger,\n    Electric_Bass_pick,\n    Fretless_Bass,\n    Slap_Bass_1,\n    Slap_Bass_2,\n    Synth_Bass_1,\n    Synth_Bass_2,\n    Violin,\n    Viola,\n    Cello,\n    Contrabass,\n    Tremolo_Strings,\n    Pizzicato_Strings,\n    Orchestral_Harp,\n    Timpani,\n    String_Ensemble_1,\n    String_Ensemble_2,\n    Synth_Strings_1,\n    Synth_Strings_2,\n    Choir_Aahs,\n    Voice_Oohs,\n    Synth_Voice,\n    Orchestra_Hit,\n    Trumpet,\n    Trombone,\n    Tuba,\n    Muted_Trumpet,\n    French_Horn,\n    Brass_Section,\n    Synth_Brass_1,\n    Synth_Brass_2,\n    Soprano_Sax,\n    Alto_Sax,\n    Tenor_Sax,\n    Baritone_Sax,\n    Oboe,\n    English_Horn,\n    Bassoon,\n    Clarinet,\n    Piccolo,\n    Flute,\n    Recorder,\n    Pan_Flute,\n    Blown_Bottle,\n    Shakuhachi,\n    Whistle,\n    Ocarina,\n    Lead_1_square,\n    Lead_2_sawtooth,\n    Lead_3_calliope,\n    Lead_4_chiff,\n    Lead_5_charang,\n    Lead_6_voice,\n    Lead_7_fifths,\n    Lead_8_bass_lead,\n    Pad_1_new_age,\n    Pad_2_warm,\n    Pad_3_polysynth,\n    Pad_4_choir,\n    Pad_5_bowed,\n    Pad_6_metallic,\n    Pad_7_halo,\n    Pad_8_sweep,\n    FX_1_rain,\n    FX_2_soundtrack,\n    FX_3_crystal,\n    FX_4_atmosphere,\n    FX_5_brightness,\n    FX_6_goblins,\n    FX_7_echoes,\n    FX_8_scifi,\n    Sitar,\n    Banjo,\n    Shamisen,\n    Koto,\n    Kalimba,\n    Bag_pipe,\n    Fiddle,\n    Shanai,\n    Tinkle_Bell,\n    Agogo,\n    Steel_Drums,\n    Woodblock,\n    Taiko_Drum,\n    Melodic_Tom,\n    Synth_Drum,\n    Reverse_Cymbal,\n    Guitar_Fret_Noise,\n    Breath_Noise,\n    Seashore,\n    Bird_Tweet,\n    Telephone_Ring,\n    Helicopter,\n    Applause,\n    Gunshot,\n    Percussion = 128\n}\n","import {AbstractNotationInstruction} from \"./AbstractNotationInstruction\";\nimport {SourceStaffEntry} from \"../SourceStaffEntry\";\nimport {NoteEnum} from \"../../../Common/DataObjects/Pitch\";\nimport {AccidentalEnum} from \"../../../Common/DataObjects/Pitch\";\nimport {Pitch} from \"../../../Common/DataObjects/Pitch\";\n\n/**\n * A [[KeyInstruction]] is a key signature denoting which notes are to be sharpened or flattened.\n */\nexport class KeyInstruction extends AbstractNotationInstruction {\n    constructor(sourceStaffEntry: SourceStaffEntry = undefined, key: number = 0, mode: KeyEnum = KeyEnum.major) {\n        super(sourceStaffEntry);\n        this.Key = key;\n        this.keyTypeOriginal = key;\n        this.mode = mode;\n        this.alteratedNotes = this.calcAlteratedNotes();\n    }\n\n    private static sharpPositionList: NoteEnum[] = [NoteEnum.F, NoteEnum.C, NoteEnum.G, NoteEnum.D, NoteEnum.A, NoteEnum.E, NoteEnum.B];\n    private static flatPositionList: NoteEnum[] = [NoteEnum.B, NoteEnum.E, NoteEnum.A, NoteEnum.D, NoteEnum.G, NoteEnum.C, NoteEnum.F];\n\n    private keyType: number;\n    public keyTypeOriginal: number;\n    private mode: KeyEnum;\n    private alteratedNotes: NoteEnum[];\n    /** The halftones this instruction was transposed by, compared to the original. */\n    public isTransposedBy: number = 0;\n\n    public static copy(keyInstruction: KeyInstruction): KeyInstruction {\n        const newKeyInstruction: KeyInstruction = new KeyInstruction(keyInstruction.parent, keyInstruction.Key, keyInstruction.Mode);\n        // note that newKeyInstruction.keyTypeOriginal is set incorrectly in the constructor, but we fix that here:\n        newKeyInstruction.keyTypeOriginal = keyInstruction.keyTypeOriginal;\n        return newKeyInstruction;\n    }\n\n    public static getAllPossibleMajorKeyInstructions(): KeyInstruction[] {\n        const keyInstructionList: KeyInstruction[] = [];\n        for (let keyType: number = -7; keyType < 7; keyType++) {\n            const currentKeyInstruction: KeyInstruction = new KeyInstruction(undefined, keyType, KeyEnum.major);\n            keyInstructionList.push(currentKeyInstruction);\n        }\n        return keyInstructionList;\n    }\n\n    public get Key(): number {\n        return this.keyType;\n    }\n\n    public set Key(value: number) {\n        this.keyType = value;\n        this.alteratedNotes = this.calcAlteratedNotes();\n    }\n\n    public get Mode(): KeyEnum {\n        return this.mode;\n    }\n\n    public set Mode(value: KeyEnum) {\n        this.mode = value;\n    }\n\n    public get AlteratedNotes(): NoteEnum[] {\n        return this.alteratedNotes;\n    }\n\n    private calcAlteratedNotes(): NoteEnum[] {\n        const noteList: NoteEnum[] = [];\n        if (this.keyType > 0) {\n            for (let i: number = 0; i < this.keyType; i++) {\n                noteList.push(KeyInstruction.sharpPositionList[i]);\n            }\n        } else if (this.keyType < 0) {\n            for (let i: number = 0; i < -this.keyType; i++) {\n                noteList.push(KeyInstruction.flatPositionList[i]);\n            }\n        }\n        return noteList;\n    }\n\n    public willAlterateNote(note: NoteEnum): boolean {\n        if (this.alteratedNotes.indexOf(note) >= 0) {\n            return true;\n        }\n        return false;\n    }\n\n    public getAlterationForPitch(pitch: Pitch): AccidentalEnum {\n        if (this.keyType > 0 && this.alteratedNotes.indexOf(pitch.FundamentalNote) <= this.keyType) {\n        // if (this.keyType > 0 && this.alteratedNotes.indexOf(pitch.FundamentalNote) > -1) {\n            return AccidentalEnum.SHARP;\n        // } else if (this.keyType < 0 && this.alteratedNotes.indexOf(pitch.FundamentalNote) > -1) {\n        } else if (this.keyType < 0 && this.alteratedNotes.indexOf(pitch.FundamentalNote) <= Math.abs(this.keyType)) {\n            return AccidentalEnum.FLAT;\n        }\n        return AccidentalEnum.NONE;\n    }\n\n    public ToString(): string {\n        return \"Key: \" + this.keyType + \"\" + this.mode;\n    }\n\n    public OperatorEquals(key2: KeyInstruction): boolean {\n        const key1: KeyInstruction = this;\n        if (key1 === key2) {\n            return true;\n        }\n        if (!key1 || !key2) {\n            return false;\n        }\n        return (key1.Key === key2.Key && key1.Mode === key2.Mode);\n    }\n\n    public OperatorNotEqual(key2: KeyInstruction): boolean {\n        return !(this.OperatorEquals(key2));\n    }\n}\n\nexport class NoteEnumToHalfToneLink {\n    constructor(note: NoteEnum, halftone: number) {\n        this.note = note;\n        this.halfTone = halftone;\n    }\n\n    public note: NoteEnum;\n    public halfTone: number;\n}\n\nexport enum KeyEnum {\n    major = 0,\n    minor = 1,\n    none = 2,\n    dorian = 3,\n    phrygian = 4,\n    lydian = 5,\n    mixolydian = 6,\n    aeolian = 7,\n    ionian = 8,\n    locrian = 9,\n}\n","import {Repetition} from \"../../MusicSource/Repetition\";\n\nexport class RepetitionInstructionComparer /*implements IComparer<RepetitionInstruction>*/ {\n    public static Compare(x: RepetitionInstruction, y: RepetitionInstruction): number {\n        if (x.parentRepetition !== undefined && y.parentRepetition) {\n            if (x.alignment === AlignmentType.End && y.alignment === AlignmentType.End) {\n                if (x.parentRepetition.StartIndex < y.parentRepetition.StartIndex) {\n                    return 1;\n                }\n                if (x.parentRepetition.StartIndex > y.parentRepetition.StartIndex) {\n                    return -1;\n                }\n            }\n            if (x.alignment === AlignmentType.Begin && y.alignment === AlignmentType.Begin) {\n                if (x.parentRepetition.EndIndex < y.parentRepetition.EndIndex) {\n                    return 1;\n                }\n                if (x.parentRepetition.EndIndex > y.parentRepetition.EndIndex) {\n                    return -1;\n                }\n            }\n        }\n        return 0;\n    }\n}\n\nexport class RepetitionInstruction /*implements IComparable*/ {\n    /* FIXME: Check constructor calling from other classes\n     constructor(measureIndex: number, type: RepetitionInstructionEnum) {\n     this(measureIndex, [], type, AlignmentType.End, undefined);\n     if (type === RepetitionInstructionEnum.StartLine || type === RepetitionInstructionEnum.Segno || type === RepetitionInstructionEnum.Coda) {\n     this.alignment = AlignmentType.Begin;\n     }\n     }\n     constructor(measureIndex: number, type: RepetitionInstructionEnum, alignment: AlignmentType, parentRepetition: Repetition) {\n     this(measureIndex, [], type, alignment, parentRepetition);\n\n     }\n     constructor(measureIndex: number, endingIndex: number, type: RepetitionInstructionEnum, alignment: AlignmentType, parentRepetition: Repetition) {\n     this(measureIndex, [endingIndex], type, alignment, parentRepetition);\n\n     }\n     */\n    constructor(measureIndex: number, type: RepetitionInstructionEnum, alignment: AlignmentType = AlignmentType.End,\n                parentRepetition: Repetition = undefined, endingIndices: number[] = undefined) {\n        this.measureIndex = measureIndex;\n        if (endingIndices) {\n            this.endingIndices = endingIndices.slice(); // slice=arrayCopy\n        }\n        this.type = type;\n        this.alignment = alignment;\n        this.parentRepetition = parentRepetition;\n    }\n\n    public measureIndex: number;\n    public endingIndices: number[] = undefined;\n    public type: RepetitionInstructionEnum;\n    public alignment: AlignmentType;\n    public parentRepetition: Repetition;\n\n    public CompareTo(obj: Object): number {\n        const other: RepetitionInstruction = <RepetitionInstruction>obj;\n        if (this.measureIndex > other.measureIndex) {\n            return 1;\n        } else if (this.measureIndex < other.measureIndex) {\n            return -1;\n        }\n        if (this.alignment === AlignmentType.Begin) {\n            if (other.alignment === AlignmentType.End) {\n                return -1;\n            }\n            switch (this.type) {\n                case RepetitionInstructionEnum.Ending:\n                    return 1;\n                case RepetitionInstructionEnum.StartLine:\n                    if (other.type === RepetitionInstructionEnum.Ending) {\n                        return -1;\n                    }\n                    return 1;\n                case RepetitionInstructionEnum.Coda:\n                case RepetitionInstructionEnum.Segno:\n                    if (other.type === RepetitionInstructionEnum.Coda) {\n                        return 1;\n                    }\n                    return -1;\n                default:\n            }\n        } else {\n            if (other.alignment === AlignmentType.Begin) {\n                return 1;\n            }\n            switch (this.type) {\n                case RepetitionInstructionEnum.Ending:\n                    return -1;\n                case RepetitionInstructionEnum.Fine:\n                case RepetitionInstructionEnum.ToCoda:\n                    if (other.type === RepetitionInstructionEnum.Ending) {\n                        return 1;\n                    }\n                    return -1;\n                case RepetitionInstructionEnum.ForwardJump:\n                    switch (other.type) {\n                        case RepetitionInstructionEnum.Ending:\n                        case RepetitionInstructionEnum.Fine:\n                        case RepetitionInstructionEnum.ToCoda:\n                            return 1;\n                        default:\n                    }\n                    return -1;\n                case RepetitionInstructionEnum.DalSegnoAlFine:\n                case RepetitionInstructionEnum.DaCapoAlFine:\n                case RepetitionInstructionEnum.DalSegnoAlCoda:\n                case RepetitionInstructionEnum.DaCapoAlCoda:\n                case RepetitionInstructionEnum.DaCapo:\n                case RepetitionInstructionEnum.DalSegno:\n                case RepetitionInstructionEnum.BackJumpLine:\n                    return 1;\n                default:\n            }\n        }\n        return 0;\n    }\n\n    public equals(other: RepetitionInstruction): boolean {\n        if (\n            this.measureIndex !== other.measureIndex\n            || this.type !== other.type\n            || this.alignment !== other.alignment\n        ) {\n            return false;\n        }\n        if (this.endingIndices === other.endingIndices) {\n            return true;\n        }\n        if (!this.endingIndices || !other.endingIndices ||\n            this.endingIndices.length !== other.endingIndices.length) {\n            return false;\n        }\n        for (let i: number = 0; i < this.endingIndices.length; i++) {\n            if (this.endingIndices[i] !== other.endingIndices[i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n\nexport enum RepetitionInstructionEnum {\n    StartLine,\n    ForwardJump,\n    BackJumpLine,\n    Ending,\n    DaCapo,\n    DalSegno,\n    Fine,\n    ToCoda,\n    DalSegnoAlFine,\n    DaCapoAlFine,\n    DalSegnoAlCoda,\n    DaCapoAlCoda,\n    Coda,\n    Segno,\n    None,\n}\n\nexport enum AlignmentType {\n    Begin,\n    End,\n}\n","import {AbstractNotationInstruction} from \"./AbstractNotationInstruction\";\nimport {Fraction} from \"../../../Common/DataObjects/Fraction\";\n\n/**\n * A [[RhythmInstruction]] is the time signature which specifies the number of beats in each bar, and the value of one beat.\n */\nexport class RhythmInstruction extends AbstractNotationInstruction {\n    constructor(rhythm: Fraction, rhythmSymbolEnum: RhythmSymbolEnum) {\n        super(undefined); // FIXME no parent SourceStaffEntry\n        this.rhythm = rhythm;\n        this.numerator = rhythm.Numerator;\n        this.denominator = rhythm.Denominator;\n        this.symbolEnum = rhythmSymbolEnum;\n    }\n\n    private numerator: number;\n    private denominator: number;\n    private rhythm: Fraction;\n    private symbolEnum: RhythmSymbolEnum;\n\n    public get Rhythm(): Fraction {\n        return this.rhythm;\n    }\n\n    public set Rhythm(value: Fraction) {\n        this.rhythm = value;\n    }\n\n    public get SymbolEnum(): RhythmSymbolEnum {\n        return this.symbolEnum;\n    }\n\n    public set SymbolEnum(value: RhythmSymbolEnum) {\n        this.symbolEnum = value;\n    }\n\n    public clone(): RhythmInstruction {\n        return new RhythmInstruction(this.rhythm.clone(), this.symbolEnum);\n    }\n\n    public OperatorEquals(rhythm2: RhythmInstruction): boolean {\n        const rhythm1: RhythmInstruction = this;\n        if (rhythm1 === rhythm2) {\n            return true;\n        }\n        if (!rhythm1 || !rhythm2) {\n            return false;\n        }\n        return (rhythm1.numerator === rhythm2.numerator && rhythm1.denominator === rhythm2.denominator);\n    }\n\n    public OperatorNotEqual(rhythm2: RhythmInstruction): boolean {\n        const rhythm1: RhythmInstruction = this;\n        return !(rhythm1 === rhythm2);\n    }\n\n    public ToString(): string {\n        return \"Rhythm: \" + this.rhythm.toString();\n    }\n}\n\nexport enum RhythmSymbolEnum {\n    NONE = 0,\n    COMMON = 1,\n    CUT = 2,\n}\n","import { PlacementEnum } from \"../Expressions/AbstractExpression\";\nimport { Note } from \"../Note\";\n\nexport enum TechnicalInstructionType {\n    Fingering,\n    String,\n}\nexport class TechnicalInstruction {\n    public type: TechnicalInstructionType;\n    public value: string;\n    public placement: PlacementEnum;\n    public sourceNote: Note;\n}\n","// created from 'create-ts-index'\n\nexport * from \"./AbstractNotationInstruction\";\nexport * from \"./ClefInstruction\";\nexport * from \"./KeyInstruction\";\nexport * from \"./RepetitionInstruction\";\nexport * from \"./RhythmInstruction\";\nexport * from \"./TechnicalInstruction\";\n","import {Voice} from \"./Voice\";\nimport {Instrument} from \"../Instrument\";\n\nexport class LinkedVoice extends Voice {\n\n    constructor(parent: Instrument, voiceId: number, master: Voice) {\n        super(parent, voiceId);\n        this.master = master;\n    }\n\n    private master: Voice;\n    public get Master(): Voice {\n        return this.master;\n    }\n\n}\n","import {LyricWord} from \"./LyricsWord\";\nimport {VoiceEntry} from \"../VoiceEntry\";\n\nexport class LyricsEntry {\n    constructor(text: string, verseNumber: number, word: LyricWord, parent: VoiceEntry, syllableNumber: number = -1) {\n        this.text = text;\n        this.word = word;\n        this.parent = parent;\n        this.verseNumber = verseNumber;\n        if (syllableNumber >= 0) {\n            this.syllableIndex = syllableNumber;\n        }\n    }\n    private text: string;\n    private word: LyricWord;\n    private parent: VoiceEntry;\n    private verseNumber: number;\n    private syllableIndex: number;\n    public extend: boolean;\n\n    public get Text(): string {\n        return this.text;\n    }\n    public set Text(value: string) {\n        this.text = value;\n    }\n    public get Word(): LyricWord {\n        return this.word;\n    }\n    public get Parent(): VoiceEntry {\n        return this.parent;\n    }\n    public set Parent(value: VoiceEntry) {\n        this.parent = value;\n    }\n\n    public get VerseNumber(): number {\n        return this.verseNumber;\n    }\n\n    public get SyllableIndex(): number {\n        return this.syllableIndex;\n    }\n}\n","import {LyricsEntry} from \"./LyricsEntry\";\nimport {VoiceEntry} from \"../VoiceEntry\";\n\nexport class LyricWord {\n    private syllables: LyricsEntry[] = [];\n\n    public get Syllables(): LyricsEntry[] {\n        return this.syllables;\n    }\n    public containsVoiceEntry(voiceEntry: VoiceEntry): boolean {\n        for (let idx: number = 0, len: number = this.Syllables.length; idx < len; ++idx) {\n            const lyricsEntry: LyricsEntry = this.Syllables[idx];\n            if (lyricsEntry.Parent === voiceEntry) {\n                return true;\n            }\n        }\n        return false;\n    }\n    public findLyricEntryInVoiceEntry(voiceEntry: VoiceEntry): LyricsEntry {\n        for (let idx: number = 0, len: number = this.Syllables.length; idx < len; ++idx) {\n            const lyricsEntry: LyricsEntry = this.Syllables[idx];\n            if (lyricsEntry.Parent === voiceEntry) {\n                return lyricsEntry;\n            }\n        }\n    }\n}\n","import {VoiceEntry, StemDirectionType} from \"./VoiceEntry\";\nimport {SourceStaffEntry} from \"./SourceStaffEntry\";\nimport {Fraction} from \"../../Common/DataObjects/Fraction\";\nimport {NoteEnum, Pitch} from \"../../Common/DataObjects/Pitch\";\nimport {Beam} from \"./Beam\";\nimport {Tuplet} from \"./Tuplet\";\nimport {Tie} from \"./Tie\";\nimport {Staff} from \"./Staff\";\nimport {Slur} from \"./Expressions/ContinuousExpressions/Slur\";\nimport {NoteState} from \"../Graphical/DrawingEnums\";\nimport {Notehead} from \"./Notehead\";\nimport {Arpeggio} from \"./Arpeggio\";\nimport {NoteType} from \"./NoteType\";\nimport { SourceMeasure } from \"./SourceMeasure\";\nimport { TechnicalInstruction } from \"./Instructions\";\n\n/**\n * Represents a single pitch with a duration (length)\n */\nexport class Note {\n\n    constructor(voiceEntry: VoiceEntry, parentStaffEntry: SourceStaffEntry, length: Fraction, pitch: Pitch, sourceMeasure: SourceMeasure, isRest?: boolean) {\n        this.voiceEntry = voiceEntry;\n        this.parentStaffEntry = parentStaffEntry;\n        this.length = length;\n        this.pitch = pitch;\n        this.sourceMeasure = sourceMeasure;\n        this.isRestFlag = isRest ?? false;\n        if (pitch) {\n            this.halfTone = pitch.getHalfTone();\n        } else {\n          this.halfTone = 0;\n        }\n    }\n\n    /**\n     * The transposed (!!!) HalfTone of this note.\n     */\n    public halfTone: number;\n    public state: NoteState;\n    private voiceEntry: VoiceEntry;\n    private parentStaffEntry: SourceStaffEntry;\n    private length: Fraction;\n    private sourceMeasure: SourceMeasure;\n    /** The length/duration given in the <type> tag. different from length for tuplets/tremolos. */\n    private typeLength: Fraction;\n    /** The NoteType given in the XML, e.g. quarter, which can be a normal quarter or tuplet quarter -> can have different length/fraction */\n    private noteTypeXml: NoteType;\n    public DotsXml: number;\n    /** The amount of notes the tuplet of this note (if there is one) replaces. */\n    private normalNotes: number;\n    private isRestFlag: boolean;\n    /**\n     * The untransposed (!!!) source data.\n     */\n    private pitch: Pitch;\n    /** The transposed pitch, if the score is transposed, otherwise undefined. */\n    public TransposedPitch: Pitch;\n    public displayStepUnpitched: NoteEnum;\n    public displayOctaveUnpitched: number;\n    public get NoteAsString(): string {\n        return this.pitch.toString();\n    }\n    private beam: Beam;\n    private tuplet: Tuplet;\n    private tie: Tie;\n    private slurs: Slur[] = [];\n    private playbackInstrumentId: string = undefined;\n    private notehead: Notehead = undefined;\n    /** States whether the note should be displayed. False if xmlNode.attribute(\"print-object\").value = \"no\". */\n    private printObject: boolean = true;\n    /** The Arpeggio this note is part of. */\n    private arpeggio: Arpeggio;\n    /** States whether this is a cue note (Stichnote) (smaller size). */\n    private isCueNote: boolean;\n    public IsGraceNote: boolean;\n    /** The stem direction asked for in XML. Not necessarily final or wanted stem direction. */\n    private stemDirectionXml: StemDirectionType;\n    /** The number of tremolo strokes this note has (16th tremolo = 2 strokes).\n     * Could be a Tremolo object in future when there is more data like tremolo between two notes.\n     */\n    private tremoloStrokes: number;\n    /** Color of the stem given in the XML Stem tag. RGB Hexadecimal, like #00FF00.\n     * This is not used for rendering, which takes VoiceEntry.StemColor.\n     * It is merely given in the note's stem element in XML and stored here for reference.\n     * So, to read or change the stem color of a note, modify note.ParentVoiceEntry.StemColor.\n     */\n    private stemColorXml: string;\n    /** Color of the notehead given in the XML Notehead tag. RGB Hexadecimal, like #00FF00.\n     * This should not be changed, instead noteheadColor is used and modifiable for Rendering.\n     * Needs to be stored here and not in Note.Notehead,\n     * because Note.Notehead is undefined for normal Noteheads to save space and time.\n     */\n    private noteheadColorXml: string;\n    /** Color of the notehead currently set/desired for next render. RGB Hexadecimal, like #00FF00.\n     * Needs to be stored here and not in Note.Notehead,\n     * because Note.Notehead is undefined for normal Noteheads to save space and time.\n     */\n    private noteheadColor: string;\n    private noteheadColorCurrentlyRendered: string;\n    public Fingering: TechnicalInstruction; // this is also stored in VoiceEntry.TechnicalInstructions\n    public StringInstruction: TechnicalInstruction; // this is also stored in VoiceEntry.TechnicalInstructions\n    // note that there is also TabNote.StringNumber, so we can't use that identifier here\n    /** Used by GraphicalNote.FromNote(note) and osmd.rules.GNote(note) to get a GraphicalNote from a Note.\n     *  Note that we don't want the data model (Note) to be dependent on the graphical implementation (GraphicalNote),\n     *    and have (potentially circular) import dependencies of graphical parts, which also applies to other non-graphical classes.\n     *    That's why we don't save a GraphicalNote reference directly in Note.\n     */\n    public NoteToGraphicalNoteObjectId: number; // used with EngravingRules.NoteToGraphicalNoteMap\n\n    public get ParentVoiceEntry(): VoiceEntry {\n        return this.voiceEntry;\n    }\n    public set ParentVoiceEntry(value: VoiceEntry) {\n        this.voiceEntry = value;\n    }\n    public get ParentStaffEntry(): SourceStaffEntry {\n        return this.parentStaffEntry;\n    }\n    public get ParentStaff(): Staff {\n        return this.parentStaffEntry.ParentStaff;\n    }\n    public get Length(): Fraction {\n        return this.length;\n    }\n    public set Length(value: Fraction) {\n        this.length = value;\n    }\n    public get SourceMeasure(): SourceMeasure {\n        return this.sourceMeasure;\n    }\n    public get TypeLength(): Fraction {\n        return this.typeLength;\n    }\n    public set TypeLength(value: Fraction) {\n        this.typeLength = value;\n    }\n    public get NoteTypeXml(): NoteType {\n        return this.noteTypeXml;\n    }\n    public set NoteTypeXml(value: NoteType) {\n        this.noteTypeXml = value;\n    }\n    public get NormalNotes(): number {\n        return this.normalNotes;\n    }\n    public set NormalNotes(value: number) {\n        this.normalNotes = value;\n    }\n    public get Pitch(): Pitch {\n        return this.pitch;\n    }\n    public get NoteBeam(): Beam {\n        return this.beam;\n    }\n    public set NoteBeam(value: Beam) {\n        this.beam = value;\n    }\n    public set Notehead(value: Notehead) {\n        this.notehead = value;\n    }\n    public get Notehead(): Notehead {\n        return this.notehead;\n    }\n    public get NoteTuplet(): Tuplet {\n        return this.tuplet;\n    }\n    public set NoteTuplet(value: Tuplet) {\n        this.tuplet = value;\n    }\n    public get NoteTie(): Tie {\n        return this.tie;\n    }\n    public set NoteTie(value: Tie) {\n        this.tie = value;\n    }\n    public get NoteSlurs(): Slur[] {\n        return this.slurs;\n    }\n    public set NoteSlurs(value: Slur[]) {\n        this.slurs = value;\n    }\n    public get PlaybackInstrumentId(): string {\n        return this.playbackInstrumentId;\n    }\n    public set PlaybackInstrumentId(value: string) {\n        this.playbackInstrumentId = value;\n    }\n    public get PrintObject(): boolean {\n        return this.printObject;\n    }\n    public set PrintObject(value: boolean) {\n        this.printObject = value;\n    }\n    public get Arpeggio(): Arpeggio {\n        return this.arpeggio;\n    }\n    public set Arpeggio(value: Arpeggio) {\n        this.arpeggio = value;\n    }\n    public get IsCueNote(): boolean {\n        return this.isCueNote;\n    }\n    public set IsCueNote(value: boolean) {\n        this.isCueNote = value;\n    }\n    public get StemDirectionXml(): StemDirectionType {\n        return this.stemDirectionXml;\n    }\n    public set StemDirectionXml(value: StemDirectionType) {\n        this.stemDirectionXml = value;\n    }\n    public get TremoloStrokes(): number {\n        return this.tremoloStrokes;\n    }\n    public set TremoloStrokes(value: number) {\n        this.tremoloStrokes = value;\n    }\n    public get StemColorXml(): string {\n        return this.stemColorXml;\n    }\n    public set StemColorXml(value: string) {\n        this.stemColorXml = value;\n    }\n    public get NoteheadColorXml(): string {\n        return this.noteheadColorXml;\n    }\n    public set NoteheadColorXml(value: string) {\n        this.noteheadColorXml = value;\n    }\n    /** The desired notehead color for the next render. */\n    public get NoteheadColor(): string {\n        return this.noteheadColor;\n    }\n    public set NoteheadColor(value: string) {\n        this.noteheadColor = value;\n    }\n    public get NoteheadColorCurrentlyRendered(): string {\n        return this.noteheadColorCurrentlyRendered;\n    }\n    public set NoteheadColorCurrentlyRendered(value: string) {\n        this.noteheadColorCurrentlyRendered = value;\n    }\n\n    public isRest(): boolean {\n        return this.isRestFlag;\n    }\n\n    /** Note: May be dangerous to use if ParentStaffEntry.VerticalContainerParent etc is not set.\n     * better calculate this directly when you have access to the note's measure.\n     * whole rest: length = measure length. (4/4 in a 4/4 time signature, 3/4 in a 3/4 time signature, 1/4 in a 1/4 time signature, etc.)\n     */\n    public isWholeRest(): boolean {\n        return this.isRest() && this.Length.RealValue === this.sourceMeasure.ActiveTimeSignature.RealValue;\n    }\n\n    public ToString(): string {\n        if (this.pitch) {\n            return this.Pitch.ToString() + \", length: \" + this.length.toString();\n        } else {\n          return \"rest note, length: \" + this.length.toString();\n        }\n    }\n    public getAbsoluteTimestamp(): Fraction {\n        return Fraction.plus(\n            this.voiceEntry.Timestamp,\n            this.sourceMeasure.AbsoluteTimestamp\n        );\n    }\n    public checkForDoubleSlur(slur: Slur): boolean {\n        for (let idx: number = 0, len: number = this.slurs.length; idx < len; ++idx) {\n            const noteSlur: Slur = this.slurs[idx];\n            if (\n              noteSlur.StartNote !== undefined &&\n              noteSlur.EndNote !== undefined &&\n              slur.StartNote !== undefined &&\n              slur.StartNote === noteSlur.StartNote &&\n              noteSlur.EndNote === this\n            ) { return true; }\n        }\n        return false;\n    }\n}\n\nexport enum Appearance {\n    Normal,\n    Grace,\n    Cue\n}\n","import { Fraction } from \"../../Common/DataObjects/Fraction\";\nimport { ITextTranslation } from \"../Interfaces/ITextTranslation\";\nimport { MusicSheetReadingException } from \"../Exceptions\";\n\nexport enum NoteType {\n    // xml note types, e.g. given as <note><type>quarter, see:\n    //https://usermanuals.musicxml.com/MusicXML/Content/ST-MusicXML-note-type-value.htm\n\n    UNDEFINED, // e.g. not given in XML\n    _1024th, // enum member cannot start with a number\n    _512th,\n    _256th,\n    _128th,\n    _64th,\n    _32nd,\n    _16th,\n    EIGTH,\n    QUARTER,\n    HALF,\n    WHOLE,\n    BREVE,\n    LONG,\n    MAXIMA\n}\n\nexport class NoteTypeHandler {\n    public static NoteTypeXmlValues: string[] = [\"\", \"1024th\", \"512th\", \"256th\", \"128th\", \"64th\", \"32nd\", \"16th\",\n        \"eigth\", \"quarter\", \"half\", \"whole\", \"breve\", \"long\", \"maxima\"];\n    // alternative to array: use switch/case\n\n\n    public static NoteTypeToString(noteType: NoteType): string {\n        return this.NoteTypeXmlValues[noteType];\n        // assumes that the enum values are ordered from 0 to x, like NoteTypeXmlValues array members\n        // see NoteType_Test.ts\n    }\n\n    public static StringToNoteType(noteType: string): NoteType {\n        const indexInArray: number = this.NoteTypeXmlValues.indexOf(noteType);\n        return indexInArray !== -1 ? indexInArray : NoteType.UNDEFINED;\n    }\n\n        /**\n         *\n         * @param type\n         * @returns {Fraction} - a Note's Duration from a given type (type must be valid).\n         */\n    public static getNoteDurationFromType(type: string): Fraction {\n        switch (type) {\n            case \"1024th\":\n                return new Fraction(1, 1024);\n            case \"512th\":\n                return new Fraction(1, 512);\n            case \"256th\":\n                return new Fraction(1, 256);\n            case \"128th\":\n                return new Fraction(1, 128);\n            case \"64th\":\n                return new Fraction(1, 64);\n            case \"32th\":\n            case \"32nd\":\n                return new Fraction(1, 32);\n            case \"16th\":\n                return new Fraction(1, 16);\n            case \"eighth\":\n                return new Fraction(1, 8);\n            case \"quarter\":\n                return new Fraction(1, 4);\n            case \"half\":\n                return new Fraction(1, 2);\n            case \"whole\":\n                return new Fraction(1, 1);\n            case \"breve\":\n                return new Fraction(2, 1);\n            case \"long\":\n                return new Fraction(4, 1);\n            case \"maxima\":\n                return new Fraction(8, 1);\n            default: {\n                const errorMsg: string = ITextTranslation.translateText(\n                \"ReaderErrorMessages/NoteDurationError\", \"Invalid note duration.\"\n                );\n                throw new MusicSheetReadingException(errorMsg);\n            }\n        }\n    }\n}\n","import { Note } from \"./Note\";\nimport log from \"loglevel\";\n\n/**\n * A note head with shape and fill information belonging to a [[Note]].\n */\nexport class Notehead {\n    /**\n     * @param sourceNote\n     * @param shapeTypeXml The shape type given from XML.\n     *                     See https://usermanuals.musicxml.com/MusicXML/Content/ST-MusicXML-notehead-value.htm\n     * @param filledXml The XML flag to fill the note shape. Can be undefined if not included in XML.\n     *                  If undefined, the filled parameter will be calculated by note duration (d < half note => filled)\n     */\n    constructor(sourceNote: Note, shapeTypeXml: string, filledXml: boolean = undefined) {\n        this.sourceNote = sourceNote;\n        this.setShapeFromXml(shapeTypeXml, filledXml);\n    }\n\n    /** shape of the note head (normal, square, triangle, etc.) */\n    private shape: NoteHeadShape;\n    private filled: boolean;\n    /** the [[Note]] this NoteHead belongs to. */\n    private sourceNote: Note;\n    // note that color is stored in the sourceNote, because note.Notehead is undefined for normal noteheads.\n\n    /** Sets the note head's shape from XML parameters.\n     * @param shapeTypeXml The XML shape.\n     * @param filledXmlAttribute the filled parameter as given in XML.\n     *                           Can be undefined if not given in XML or if it should be calculated from note duration.\n     *                           If undefined, this.sourceNote should not be undefined.\n     */\n    public setShapeFromXml(shapeTypeXml: string, filledXmlAttribute: boolean = undefined): void {\n        this.shape = Notehead.ShapeTypeXmlToShape(shapeTypeXml);\n\n        let filled: boolean = filledXmlAttribute;\n        if (filled === undefined) { // don't replace undefined check\n            if (!this.sourceNote) {\n                // this should not happen. Either filledXmlAttribute or sourceNote should be defined.\n                log.warn(\"notehead: sourceNote and filledXmlAttribute undefined.\");\n                filled = true;\n            } else {\n                filled = this.sourceNote.Length.Denominator > 2;\n            }\n        }\n        this.filled = filled;\n    }\n\n    public get SourceNote(): Note {\n        return this.sourceNote;\n    }\n\n    public get Shape(): NoteHeadShape {\n        return this.shape;\n    }\n    public get Filled(): boolean {\n        return this.filled;\n    }\n\n    /** Converts xml attribute to NoteHeadShape.\n     * Necessary because \"circle-x\" is not a valid enum member name.\n     */\n    public static ShapeTypeXmlToShape(shapeTypeXml: string): NoteHeadShape {\n        switch (shapeTypeXml.toLowerCase()) {\n            case \"normal\":\n                return NoteHeadShape.NORMAL;\n            case \"x\":\n                return NoteHeadShape.X;\n            case \"slash\":\n                return NoteHeadShape.SLASH;\n            case \"diamond\":\n                return NoteHeadShape.DIAMOND;\n            case \"square\":\n                return NoteHeadShape.SQUARE;\n            case \"la\": // Musescore displays this as a square\n                return NoteHeadShape.SQUARE;\n            case \"do\":\n            case \"triangle\":\n                return NoteHeadShape.TRIANGLE;\n            case \"rectangle\":\n                return NoteHeadShape.RECTANGLE;\n            case \"circle-x\":\n                return NoteHeadShape.CIRCLEX;\n            default:\n                log.info(\"unsupported/unhandled xml notehead '\" + shapeTypeXml + \"'. Using normal notehead.\");\n                return NoteHeadShape.NORMAL;\n        }\n    }\n}\n\n/** shape of a note head, needs to be supported by MusicXML and Vexflow. */\nexport enum NoteHeadShape {\n    CIRCLEX,\n    DIAMOND,\n    NORMAL,\n    RECTANGLE,\n    SLASH,\n    SQUARE,\n    TRIANGLE,\n    X,\n    // TODO: Add the rest from https://usermanuals.musicxml.com/MusicXML/Content/ST-MusicXML-notehead-value.htm\n    // currently all Vexflow supported shapes present\n}\n","import { AccidentalEnum } from \"../../Common/DataObjects/Pitch\";\nimport { PlacementEnum } from \"./Expressions/AbstractExpression\";\n\nexport class OrnamentContainer {\n\n    constructor(ornament: OrnamentEnum) {\n        this.ornament = ornament;\n    }\n\n    private ornament: OrnamentEnum;\n    public placement: PlacementEnum = PlacementEnum.Above;\n    private accidentalAbove: AccidentalEnum = AccidentalEnum.NONE;\n    private accidentalBelow: AccidentalEnum = AccidentalEnum.NONE;\n\n    public get GetOrnament(): OrnamentEnum {\n        return this.ornament;\n    }\n    public get AccidentalAbove(): AccidentalEnum {\n        return this.accidentalAbove;\n    }\n    public set AccidentalAbove(value: AccidentalEnum) {\n        this.accidentalAbove = value;\n    }\n    public get AccidentalBelow(): AccidentalEnum {\n        return this.accidentalBelow;\n    }\n    public set AccidentalBelow(value: AccidentalEnum) {\n        this.accidentalBelow = value;\n    }\n\n}\n\nexport enum OrnamentEnum {\n    Trill,\n    Turn,\n    InvertedTurn,\n    DelayedTurn,\n    DelayedInvertedTurn,\n    Mordent,\n    InvertedMordent,\n    // the following ornaments are not yet supported by MusicXML (3.1).\n    // there is a \"other-ornament\"-node, but most programs probably don't export as such, e.g. Musescore\n    // see musicXML manuals -> Ornaments\n    /*\n    UpPrall,\n    DownPrall,\n    PrallUp,\n    PrallDown,\n    UpMordent,\n    DownMordent,\n    LinePrall,\n    PrallPrall\n    */\n}\n","import {Fraction} from \"../../Common/DataObjects/Fraction\";\nimport {VerticalSourceStaffEntryContainer} from \"./VerticalSourceStaffEntryContainer\";\nimport {SourceStaffEntry} from \"./SourceStaffEntry\";\nimport {RepetitionInstruction, RepetitionInstructionEnum, AlignmentType} from \"./Instructions/RepetitionInstruction\";\nimport {Staff} from \"./Staff\";\nimport {VoiceEntry} from \"./VoiceEntry\";\nimport {Voice} from \"./Voice\";\nimport {MusicSheet} from \"../MusicSheet\";\nimport {MultiExpression} from \"./Expressions/MultiExpression\";\nimport {MultiTempoExpression} from \"./Expressions/MultiTempoExpression\";\nimport {RehearsalExpression} from \"./Expressions/RehearsalExpression\";\nimport {AbstractNotationInstruction} from \"./Instructions/AbstractNotationInstruction\";\nimport {ClefInstruction} from \"./Instructions/ClefInstruction\";\nimport {KeyInstruction} from \"./Instructions/KeyInstruction\";\nimport {Repetition} from \"../MusicSource/Repetition\";\nimport {SystemLinesEnum} from \"../Graphical/SystemLinesEnum\";\nimport {EngravingRules} from \"../Graphical/EngravingRules\";\nimport {GraphicalMeasure} from \"../Graphical/GraphicalMeasure\";\nimport { RhythmInstruction } from \"./Instructions\";\n//import {BaseIdClass} from \"../../Util/BaseIdClass\"; // SourceMeasure originally extended BaseIdClass, but ids weren't used.\n\n/**\n * The Source Measure represents the source data of a unique measure, including all instruments with their staves.\n * There exists one source measure per XML measure or per paper sheet measure (e.g. the source measures are not doubled in repetitions)\n */\nexport class SourceMeasure {\n    /**\n     * The data entries and data lists will be filled with null values according to the total number of staves,\n     * so that existing objects can be referred to by staff index.\n     * @param completeNumberOfStaves\n     * @param rules\n     */\n    constructor(completeNumberOfStaves: number, rules: EngravingRules) {\n        this.completeNumberOfStaves = completeNumberOfStaves;\n        this.implicitMeasure = false;\n        this.hasEndLine = false;\n        this.endingBarStyleXml = \"\";\n        this.endingBarStyleEnum = SystemLinesEnum.SingleThin;\n        this.firstInstructionsStaffEntries = new Array(completeNumberOfStaves);\n        this.lastInstructionsStaffEntries = new Array(completeNumberOfStaves);\n        this.rules = rules;\n        this.TempoInBPM = 0;\n        for (let i: number = 0; i < completeNumberOfStaves; i++) {\n            this.graphicalMeasureErrors.push(false);\n            this.staffLinkedExpressions.push([]);\n        }\n    }\n\n    /**\n     * The unique measure list index starting with 0.\n     */\n    public measureListIndex: number;\n    /**\n     * The style of the ending bar line.\n     */\n    public endingBarStyleXml: string;\n    public endingBarStyleEnum: SystemLinesEnum;\n    /** Whether the MusicXML says to print a new system (line break). See OSMDOptions.newSystemFromXML */\n    public printNewSystemXml: boolean = false;\n    /** Whether the MusicXML says to print a new page (page break). See OSMDOptions.newPageFromXML */\n    public printNewPageXml: boolean = false;\n    public IsSystemStartMeasure: boolean = false;\n\n    private measureNumber: number;\n    public MeasureNumberXML: number;\n    public MeasureNumberPrinted: number; // measureNumber if MeasureNumberXML undefined or NaN. Set in getPrintedMeasureNumber()\n    public RhythmPrinted: RhythmInstruction; // the rhythm printed (rendered) in this measure\n    public multipleRestMeasures: number; // usually undefined (0), unless \"multiple-rest\" given in XML (e.g. 4 measure rest)\n    // public multipleRestMeasuresPerStaff: Dictionary<number, number>; // key: staffId. value: how many rest measures\n    private absoluteTimestamp: Fraction;\n    private completeNumberOfStaves: number;\n    private duration: Fraction;\n    private activeTimeSignature: Fraction;\n    public hasLyrics: boolean = false;\n    public hasMoodExpressions: boolean = false;\n    /** Whether the SourceMeasure only has rests, no other entries.\n     *  Not the same as GraphicalMeasure.hasOnlyRests, because one SourceMeasure can have many GraphicalMeasures (staffs).\n     */\n    public allRests: boolean = false;\n    public isReducedToMultiRest: boolean = false;\n    /** If this measure is a MultipleRestMeasure, this is the number of the measure in that sequence of measures. */\n    public multipleRestMeasureNumber: number = 0;\n    private staffLinkedExpressions: MultiExpression[][] = [];\n    private tempoExpressions: MultiTempoExpression[] = [];\n    public rehearsalExpression: RehearsalExpression;\n    private verticalSourceStaffEntryContainers: VerticalSourceStaffEntryContainer[] = [];\n    private implicitMeasure: boolean;\n    private hasEndLine: boolean;\n    public hasEndClef: boolean;\n    private graphicalMeasureErrors: boolean[] = [];\n    private firstInstructionsStaffEntries: SourceStaffEntry[];\n    private lastInstructionsStaffEntries: SourceStaffEntry[];\n    private firstRepetitionInstructions: RepetitionInstruction[] = [];\n    private lastRepetitionInstructions: RepetitionInstruction[] = [];\n    private rules: EngravingRules;\n    private tempoInBPM: number;\n    private verticalMeasureList: GraphicalMeasure[]; // useful, see GraphicalMusicSheet.GetGraphicalFromSourceStaffEntry\n\n    public get MeasureNumber(): number {\n        return this.measureNumber;\n    }\n\n    public set MeasureNumber(value: number) {\n        this.measureNumber = value;\n    }\n\n    public getPrintedMeasureNumber(): number {\n        if (this.rules.UseXMLMeasureNumbers) {\n            if (Number.isInteger(this.MeasureNumberXML)) { // false for NaN, undefined, null, \"5\" (string)\n                this.MeasureNumberPrinted = this.MeasureNumberXML;\n                return this.MeasureNumberPrinted;\n            }\n        }\n        this.MeasureNumberPrinted = this.MeasureNumber;\n        return this.MeasureNumberPrinted;\n    }\n\n    public get AbsoluteTimestamp(): Fraction {\n        return this.absoluteTimestamp;\n    }\n\n    public set AbsoluteTimestamp(value: Fraction) {\n        this.absoluteTimestamp = value;\n    }\n\n    public get CompleteNumberOfStaves(): number {\n        return this.completeNumberOfStaves;\n    }\n\n    public get Duration(): Fraction {\n        return this.duration; // can be 1/1 in a 4/4 measure\n    }\n\n    public set Duration(value: Fraction) {\n        this.duration = value;\n    }\n\n    public get ActiveTimeSignature(): Fraction {\n        return this.activeTimeSignature;\n    }\n\n    public set ActiveTimeSignature(value: Fraction) {\n        this.activeTimeSignature = value;\n    }\n\n    public get ImplicitMeasure(): boolean {\n        return this.implicitMeasure;\n    }\n\n    public set ImplicitMeasure(value: boolean) {\n        this.implicitMeasure = value;\n    }\n\n    public get HasEndLine(): boolean {\n        return this.hasEndLine;\n    }\n\n    public set HasEndLine(value: boolean) {\n        this.hasEndLine = value;\n    }\n\n    public get StaffLinkedExpressions(): MultiExpression[][] {\n        return this.staffLinkedExpressions;\n    }\n\n    public get TempoExpressions(): MultiTempoExpression[] {\n        return this.tempoExpressions;\n    }\n\n    public get VerticalSourceStaffEntryContainers(): VerticalSourceStaffEntryContainer[] {\n        return this.verticalSourceStaffEntryContainers;\n    }\n\n    public get FirstInstructionsStaffEntries(): SourceStaffEntry[] {\n        return this.firstInstructionsStaffEntries;\n    }\n\n    public get LastInstructionsStaffEntries(): SourceStaffEntry[] {\n        return this.lastInstructionsStaffEntries;\n    }\n\n    public get FirstRepetitionInstructions(): RepetitionInstruction[] {\n        return this.firstRepetitionInstructions;\n    }\n\n    public get LastRepetitionInstructions(): RepetitionInstruction[] {\n        return this.lastRepetitionInstructions;\n    }\n\n    public getErrorInMeasure(staffIndex: number): boolean {\n        return this.graphicalMeasureErrors[staffIndex];\n    }\n\n    public setErrorInGraphicalMeasure(staffIndex: number, hasError: boolean): void {\n        this.graphicalMeasureErrors[staffIndex] = hasError;\n    }\n\n    public getNextMeasure(measures: SourceMeasure[]): SourceMeasure {\n        return measures[this.measureListIndex + 1];\n    }\n\n    public getPreviousMeasure(measures: SourceMeasure[]): SourceMeasure {\n        if (this.measureListIndex > 1) {\n            return measures[this.measureListIndex - 1];\n        }\n        return undefined;\n    }\n\n    public get Rules(): EngravingRules {\n        return this.rules;\n    }\n\n    public get VerticalMeasureList(): GraphicalMeasure[] {\n        return this.verticalMeasureList;\n    }\n\n    public set VerticalMeasureList(value: GraphicalMeasure[]) {\n        this.verticalMeasureList = value;\n    }\n\n    public get TempoInBPM(): number {\n        return this.tempoInBPM;\n    }\n\n    public set TempoInBPM(value: number) {\n        this.tempoInBPM = value;\n    }\n\n    /**\n     * Check at the given timestamp if a VerticalContainer exists, if not creates a new, timestamp-ordered one,\n     * and at the given index, if a [[SourceStaffEntry]] exists, and if not, creates a new one.\n     * @param inMeasureTimestamp\n     * @param inSourceMeasureStaffIndex\n     * @param staff\n     * @returns {{createdNewContainer: boolean, staffEntry: SourceStaffEntry}}\n     */\n    public findOrCreateStaffEntry(inMeasureTimestamp: Fraction, inSourceMeasureStaffIndex: number,\n                                  staff: Staff): {createdNewContainer: boolean, staffEntry: SourceStaffEntry} {\n        let staffEntry: SourceStaffEntry = undefined;\n        // Find:\n        let existingVerticalSourceStaffEntryContainer: VerticalSourceStaffEntryContainer;\n        for (const container of this.verticalSourceStaffEntryContainers) {\n            if (container.Timestamp.Equals(inMeasureTimestamp)) {\n                existingVerticalSourceStaffEntryContainer = container;\n                break;\n            }\n        }\n        if (existingVerticalSourceStaffEntryContainer) {\n            if (existingVerticalSourceStaffEntryContainer.StaffEntries[inSourceMeasureStaffIndex]) {\n                staffEntry = existingVerticalSourceStaffEntryContainer.StaffEntries[inSourceMeasureStaffIndex];\n            } else {\n                staffEntry = new SourceStaffEntry(existingVerticalSourceStaffEntryContainer, staff);\n                existingVerticalSourceStaffEntryContainer.StaffEntries[inSourceMeasureStaffIndex] = staffEntry;\n            }\n            return {createdNewContainer: false, staffEntry: staffEntry};\n        }\n        const last: VerticalSourceStaffEntryContainer = this.verticalSourceStaffEntryContainers[this.verticalSourceStaffEntryContainers.length - 1];\n        if (this.verticalSourceStaffEntryContainers.length === 0 || last.Timestamp.lt(inMeasureTimestamp)) {\n            const container: VerticalSourceStaffEntryContainer = new VerticalSourceStaffEntryContainer(\n                this, inMeasureTimestamp.clone(), this.completeNumberOfStaves\n            );\n            this.verticalSourceStaffEntryContainers.push(container);\n            staffEntry = new SourceStaffEntry(container, staff);\n            container.StaffEntries[inSourceMeasureStaffIndex] = staffEntry;\n        } else {\n            for (\n                let i: number = this.verticalSourceStaffEntryContainers.length - 1;\n                i >= 0; i--\n            ) {\n                if (this.verticalSourceStaffEntryContainers[i].Timestamp.lt(inMeasureTimestamp)) {\n                    const container: VerticalSourceStaffEntryContainer = new VerticalSourceStaffEntryContainer(\n                        this, inMeasureTimestamp.clone(), this.completeNumberOfStaves\n                    );\n                    this.verticalSourceStaffEntryContainers.splice(i + 1, 0, container);\n                    staffEntry = new SourceStaffEntry(container, staff);\n                    container.StaffEntries[inSourceMeasureStaffIndex] = staffEntry;\n                    break;\n                }\n                if (i === 0) {\n                    const container: VerticalSourceStaffEntryContainer = new VerticalSourceStaffEntryContainer(\n                        this, inMeasureTimestamp.clone(), this.completeNumberOfStaves\n                    );\n                    this.verticalSourceStaffEntryContainers.splice(i, 0, container);\n                    staffEntry = new SourceStaffEntry(container, staff);\n                    container.StaffEntries[inSourceMeasureStaffIndex] = staffEntry;\n                    break;\n                }\n            }\n        }\n        return {createdNewContainer: true, staffEntry: staffEntry};\n    }\n\n    /**\n     * Check if a VerticalContainer, a staffEntry and a voiceEntry exist at the given timestamp.\n     * If not, create the necessary entries.\n     * @param sse\n     * @param voice\n     * @returns {{createdVoiceEntry: boolean, voiceEntry: VoiceEntry}}\n     */\n    public findOrCreateVoiceEntry(sse: SourceStaffEntry, voice: Voice): { createdVoiceEntry: boolean, voiceEntry: VoiceEntry } {\n        let ve: VoiceEntry = undefined;\n        let createdNewVoiceEntry: boolean = false;\n        for (const voiceEntry of sse.VoiceEntries) {\n            if (voiceEntry.ParentVoice === voice) {\n                ve = voiceEntry;\n                break;\n            }\n        }\n        if (!ve) {\n            ve = new VoiceEntry(sse.Timestamp, voice, sse);\n            createdNewVoiceEntry = true;\n        }\n        return {createdVoiceEntry: createdNewVoiceEntry, voiceEntry: ve};\n    }\n\n    /**\n     * Search for a non-null [[SourceStaffEntry]] at the given verticalIndex,\n     * starting from the given horizontalIndex and moving backwards. If none is found, then return undefined.\n     * @param verticalIndex\n     * @param horizontalIndex\n     * @returns {any}\n     */\n    public getPreviousSourceStaffEntryFromIndex(verticalIndex: number, horizontalIndex: number): SourceStaffEntry {\n        for (let i: number = horizontalIndex - 1; i >= 0; i--) {\n            if (this.verticalSourceStaffEntryContainers[i][verticalIndex]) {\n                return this.verticalSourceStaffEntryContainers[i][verticalIndex];\n            }\n        }\n        return undefined;\n    }\n\n    /**\n     * Return the index of the existing VerticalContainer at the given timestamp.\n     * @param musicTimestamp\n     * @returns {number}\n     */\n    public getVerticalContainerIndexByTimestamp(musicTimestamp: Fraction): number {\n        for (let idx: number = 0, len: number = this.VerticalSourceStaffEntryContainers.length; idx < len; ++idx) {\n            if (this.VerticalSourceStaffEntryContainers[idx].Timestamp.Equals(musicTimestamp)) {\n                return idx; // this.verticalSourceStaffEntryContainers.indexOf(verticalSourceStaffEntryContainer);\n            }\n        }\n        return -1;\n    }\n\n    /**\n     * Return the existing VerticalContainer at the given timestamp.\n     * @param musicTimestamp\n     * @returns {any}\n     */\n    public getVerticalContainerByTimestamp(musicTimestamp: Fraction): VerticalSourceStaffEntryContainer {\n        for (let idx: number = 0, len: number = this.VerticalSourceStaffEntryContainers.length; idx < len; ++idx) {\n            const verticalSourceStaffEntryContainer: VerticalSourceStaffEntryContainer = this.VerticalSourceStaffEntryContainers[idx];\n            if (verticalSourceStaffEntryContainer.Timestamp.Equals(musicTimestamp)) {\n                return verticalSourceStaffEntryContainer;\n            }\n        }\n        return undefined;\n    }\n\n    /**\n     * Check the [[SourceMeasure]] for a possible VerticalContainer with all of its [[StaffEntry]]s undefined,\n     * and if found, remove the VerticalContainer from the [[SourceMeasure]].\n     * @param index\n     */\n    public checkForEmptyVerticalContainer(index: number): void {\n        let undefinedCounter: number = 0;\n        for (let i: number = 0; i < this.completeNumberOfStaves; i++) {\n            if (!this.verticalSourceStaffEntryContainers[index][i]) {\n                undefinedCounter++;\n            }\n        }\n        if (undefinedCounter === this.completeNumberOfStaves) {\n            this.verticalSourceStaffEntryContainers.splice(index, 1);\n        }\n    }\n\n    /**\n     * This method is used for handling a measure with the following error (in the procedure of finding out the Instrument's Duration):\n     * If the LastStaffEntry is missing (implied restNote or error), then go back the StaffEntries until you find a TiedNote (tie Start),\n     * which gives the correct MeasureDuration.\n     * @param musicSheet\n     * @param maxInstDuration\n     * @returns {Fraction}\n     */\n    public reverseCheck(musicSheet: MusicSheet, maxInstDuration: Fraction): Fraction {\n        let maxDuration: Fraction = new Fraction(0, 1);\n        const instrumentsDurations: Fraction[] = [];\n        for (let i: number = 0; i < musicSheet.Instruments.length; i++) {\n            let instrumentDuration: Fraction = new Fraction(0, 1);\n            const inSourceMeasureInstrumentIndex: number = musicSheet.getGlobalStaffIndexOfFirstStaff(musicSheet.Instruments[i]);\n            for (let j: number = 0; j < musicSheet.Instruments[i].Staves.length; j++) {\n                const lastStaffEntry: SourceStaffEntry = this.getLastSourceStaffEntryForInstrument(inSourceMeasureInstrumentIndex + j);\n                if (lastStaffEntry !== undefined && !lastStaffEntry.hasTie()) {\n                    const verticalContainerIndex: number = this.verticalSourceStaffEntryContainers.indexOf(lastStaffEntry.VerticalContainerParent);\n                    for (let m: number = verticalContainerIndex - 1; m >= 0; m--) {\n                        const previousStaffEntry: SourceStaffEntry = this.verticalSourceStaffEntryContainers[m][inSourceMeasureInstrumentIndex + j];\n                        if (previousStaffEntry !== undefined && previousStaffEntry.hasTie()) {\n                            if (instrumentDuration.lt(Fraction.plus(previousStaffEntry.Timestamp, previousStaffEntry.calculateMaxNoteLength()))) {\n                                instrumentDuration = Fraction.plus(previousStaffEntry.Timestamp, previousStaffEntry.calculateMaxNoteLength());\n                                break;\n                            }\n                        }\n                    }\n                }\n            }\n            instrumentsDurations.push(instrumentDuration);\n        }\n        for (let idx: number = 0, len: number = instrumentsDurations.length; idx < len; ++idx) {\n            const instrumentsDuration: Fraction = instrumentsDurations[idx];\n            if (maxDuration.lt(instrumentsDuration)) {\n                maxDuration = instrumentsDuration;\n            }\n        }\n\n        return Fraction.max(maxDuration, maxInstDuration);\n    }\n\n    /**\n     * Calculate all the [[Instrument]]'s NotesDurations for this Measures.\n     * @param musicSheet\n     * @param instrumentMaxTieNoteFractions\n     * @returns {Fraction[]}\n     */\n    public calculateInstrumentsDuration(musicSheet: MusicSheet, instrumentMaxTieNoteFractions: Fraction[]): Fraction[] {\n        const instrumentsDurations: Fraction[] = [];\n        for (let i: number = 0; i < musicSheet.Instruments.length; i++) {\n            let instrumentDuration: Fraction = new Fraction(0, 1);\n            const inSourceMeasureInstrumentIndex: number = musicSheet.getGlobalStaffIndexOfFirstStaff(musicSheet.Instruments[i]);\n            for (let j: number = 0; j < musicSheet.Instruments[i].Staves.length; j++) {\n                const lastStaffEntry: SourceStaffEntry = this.getLastSourceStaffEntryForInstrument(inSourceMeasureInstrumentIndex + j);\n                if (lastStaffEntry !== undefined && lastStaffEntry.Timestamp) {\n                    if (instrumentDuration.lt(Fraction.plus(lastStaffEntry.Timestamp, lastStaffEntry.calculateMaxNoteLength()))) {\n                        instrumentDuration = Fraction.plus(lastStaffEntry.Timestamp, lastStaffEntry.calculateMaxNoteLength());\n                    }\n                }\n            }\n            if (instrumentDuration.lt(instrumentMaxTieNoteFractions[i])) {\n                instrumentDuration = instrumentMaxTieNoteFractions[i];\n            }\n            instrumentsDurations.push(instrumentDuration);\n        }\n        return instrumentsDurations;\n    }\n\n    public getEntriesPerStaff(staffIndex: number): SourceStaffEntry[] {\n        const sourceStaffEntries: SourceStaffEntry[] = [];\n        for (const container of this.VerticalSourceStaffEntryContainers) {\n            const sse: SourceStaffEntry = container.StaffEntries[staffIndex];\n            if (sse) {\n                sourceStaffEntries.push(sse);\n            }\n        }\n        return sourceStaffEntries;\n    }\n\n    /**\n     *\n     * @returns {boolean} true iff some measure begin instructions have been found for at least one staff\n     */\n    public hasBeginInstructions(): boolean {\n        for (let staffIndex: number = 0, len: number = this.FirstInstructionsStaffEntries.length; staffIndex < len; staffIndex++) {\n            const beginInstructionsStaffEntry: SourceStaffEntry = this.FirstInstructionsStaffEntries[staffIndex];\n            if (beginInstructionsStaffEntry !== undefined && beginInstructionsStaffEntry.Instructions.length > 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    public beginsWithLineRepetition(): boolean {\n        for (let idx: number = 0, len: number = this.FirstRepetitionInstructions.length; idx < len; ++idx) {\n            const instr: RepetitionInstruction = this.FirstRepetitionInstructions[idx];\n            if (instr.type === RepetitionInstructionEnum.StartLine) {\n                return true;\n            }\n            if (instr.parentRepetition !== undefined && instr === instr.parentRepetition.startMarker && !instr.parentRepetition.FromWords) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Check if this measure is a Repetition Ending.\n     * @returns {boolean}\n     */\n    public endsWithLineRepetition(): boolean {\n        for (let idx: number = 0, len: number = this.LastRepetitionInstructions.length; idx < len; ++idx) {\n            const instruction: RepetitionInstruction = this.LastRepetitionInstructions[idx];\n            if (instruction.type === RepetitionInstructionEnum.BackJumpLine) {\n                return true;\n            }\n\n            const rep: Repetition = instruction.parentRepetition;\n            if (!rep) {\n                continue;\n            }\n            if (rep.FromWords) {\n                continue;\n            }\n            for (let idx2: number = 0, len2: number = rep.BackwardJumpInstructions.length; idx2 < len2; ++idx2) {\n                const backJumpInstruction: RepetitionInstruction = rep.BackwardJumpInstructions[idx2];\n                if (instruction === backJumpInstruction) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Check if a Repetition starts at the next Measure.\n     * @returns {boolean}\n     */\n    public beginsWithWordRepetition(): boolean {\n        for (let idx: number = 0, len: number = this.FirstRepetitionInstructions.length; idx < len; ++idx) {\n            const instruction: RepetitionInstruction = this.FirstRepetitionInstructions[idx];\n            if (instruction.parentRepetition !== undefined &&\n                instruction === instruction.parentRepetition.startMarker && instruction.parentRepetition.FromWords) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Check if this Measure ends a Repetition.\n     * @returns {boolean}\n     */\n    public endsWithWordRepetition(): boolean {\n        for (let idx: number = 0, len: number = this.LastRepetitionInstructions.length; idx < len; ++idx) {\n            const instruction: RepetitionInstruction = this.LastRepetitionInstructions[idx];\n            const rep: Repetition = instruction.parentRepetition;\n            if (!rep) {\n                continue;\n            }\n            if (!rep.FromWords) {\n                continue;\n            }\n            for (let idx2: number = 0, len2: number = rep.BackwardJumpInstructions.length; idx2 < len2; ++idx2) {\n                const backJumpInstruction: RepetitionInstruction = rep.BackwardJumpInstructions[idx2];\n                if (instruction === backJumpInstruction) {\n                    return true;\n                }\n            }\n            if (instruction === rep.forwardJumpInstruction) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    public beginsRepetitionEnding(): boolean {\n        for (const instruction of this.FirstRepetitionInstructions) {\n            if (instruction.type === RepetitionInstructionEnum.Ending &&\n                instruction.alignment === AlignmentType.Begin) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    public endsRepetitionEnding(): boolean {\n        for (const instruction of this.LastRepetitionInstructions) {\n            if (instruction.type === RepetitionInstructionEnum.Ending &&\n                instruction.alignment === AlignmentType.End) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    public getKeyInstruction(staffIndex: number): KeyInstruction {\n        if (this.FirstInstructionsStaffEntries[staffIndex]) {\n            const sourceStaffEntry: SourceStaffEntry = this.FirstInstructionsStaffEntries[staffIndex];\n            for (let idx: number = 0, len: number = sourceStaffEntry.Instructions.length; idx < len; ++idx) {\n                const abstractNotationInstruction: AbstractNotationInstruction = sourceStaffEntry.Instructions[idx];\n                if (abstractNotationInstruction instanceof KeyInstruction) {\n                    return <KeyInstruction>abstractNotationInstruction;\n                }\n            }\n        }\n        return undefined;\n    }\n\n    /**\n     * Return the first non-null [[SourceStaffEntry]] at the given InstrumentIndex.\n     * @param instrumentIndex\n     * @returns {SourceStaffEntry}\n     */\n    private getLastSourceStaffEntryForInstrument(instrumentIndex: number): SourceStaffEntry {\n        let entry: SourceStaffEntry;\n        for (let i: number = this.verticalSourceStaffEntryContainers.length - 1; i >= 0; i--) {\n            entry = this.verticalSourceStaffEntryContainers[i].StaffEntries[instrumentIndex];\n            if (entry) {\n                break;\n            }\n        }\n        return entry;\n    }\n\n    public canBeReducedToMultiRest(): boolean {\n        let allRestsOrInvisible: boolean = true;\n        let visibleLyrics: boolean = false;\n        for (const container of this.verticalSourceStaffEntryContainers) {\n            if (!container) {\n                continue;\n            }\n            for (const staffEntry of container.StaffEntries) {\n                if (!staffEntry || !staffEntry.ParentStaff.ParentInstrument.Visible) {\n                    continue; // ignore notes in invisible instruments (instruments not shown)\n                }\n                if (staffEntry.ChordContainers.length > 0) {\n                    return false;\n                }\n                if (staffEntry.ParentStaff.hasLyrics) {\n                    visibleLyrics = true;\n                }\n                if (this.firstRepetitionInstructions.length > 0 || this.lastRepetitionInstructions.length > 0) {\n                    return false;\n                }\n                for (const voiceEntry of staffEntry.VoiceEntries) {\n                    for (const note of voiceEntry.Notes) {\n                        if (!note.isRest()) {\n                            allRestsOrInvisible = false;\n                            break;\n                        }\n                    }\n                    if (!allRestsOrInvisible) {\n                        break;\n                    }\n                }\n            }\n        }\n        if (!allRestsOrInvisible || visibleLyrics || this.hasMoodExpressions || this.tempoExpressions.length > 0) {\n            return false;\n        }\n        // check for StaffLinkedExpressions (e.g. MultiExpression, StaffText) (per staff)\n        for (const multiExpressions of this.staffLinkedExpressions) {\n            if (multiExpressions.length > 0) {\n                return false;\n            }\n        }\n        // check for clef instruction for next measure\n        for (const lastStaffEntry of this.lastInstructionsStaffEntries) {\n            for (let idx: number = 0, len: number = lastStaffEntry?.Instructions.length; idx < len; ++idx) {\n                const abstractNotationInstruction: AbstractNotationInstruction = lastStaffEntry.Instructions[idx];\n                if (abstractNotationInstruction instanceof ClefInstruction) {\n                    return false;\n                }\n            }\n        }\n        // don't auto-rest pickup measures that aren't whole measure rests\n        return this.Duration?.RealValue === this.ActiveTimeSignature?.RealValue;\n        // if adding further checks, replace the above line with this:\n        // if (this.Duration?.RealValue !== this.ActiveTimeSignature?.RealValue) {\n        //     return false;\n        // }\n        // // TODO further checks?\n        // return true;\n    }\n}\n","import {Fraction} from \"../../Common/DataObjects/Fraction\";\nimport {VerticalSourceStaffEntryContainer} from \"./VerticalSourceStaffEntryContainer\";\nimport {Staff} from \"./Staff\";\nimport {AbstractNotationInstruction} from \"./Instructions/AbstractNotationInstruction\";\nimport {VoiceEntry} from \"./VoiceEntry\";\nimport {Note} from \"./Note\";\nimport {StaffEntryLink} from \"./StaffEntryLink\";\nimport {ChordSymbolContainer} from \"./ChordSymbolContainer\";\nimport {ClefInstruction} from \"./Instructions/ClefInstruction\";\nimport {KeyInstruction} from \"./Instructions/KeyInstruction\";\nimport {RhythmInstruction} from \"./Instructions/RhythmInstruction\";\n\n/**\n * A [[SourceStaffEntry]] is a container spanning all the [[VoiceEntry]]s at one timestamp for one [[StaffLine]].\n */\nexport class SourceStaffEntry {\n    constructor(verticalContainerParent: VerticalSourceStaffEntryContainer, parentStaff: Staff) {\n        this.verticalContainerParent = verticalContainerParent;\n        this.parentStaff = parentStaff;\n    }\n\n    private parentStaff: Staff;\n    private verticalContainerParent: VerticalSourceStaffEntryContainer;\n    private voiceEntries: VoiceEntry[] = [];\n    private staffEntryLink: StaffEntryLink;\n    private instructions: AbstractNotationInstruction[] = [];\n    private chordSymbolContainers: ChordSymbolContainer[] = [];\n\n    public get ParentStaff(): Staff {\n        return this.parentStaff;\n    }\n\n    public get VerticalContainerParent(): VerticalSourceStaffEntryContainer {\n        return this.verticalContainerParent;\n    }\n\n    public get Timestamp(): Fraction {\n        if (this.VerticalContainerParent) {\n            return this.VerticalContainerParent.Timestamp;\n        }\n        return undefined;\n    }\n\n    public get AbsoluteTimestamp(): Fraction {\n        if (this.VerticalContainerParent) {\n            return Fraction.plus(this.VerticalContainerParent.ParentMeasure.AbsoluteTimestamp, this.VerticalContainerParent.Timestamp);\n        }\n        return undefined;\n    }\n\n    public get VoiceEntries(): VoiceEntry[] {\n        return this.voiceEntries;\n    }\n\n    public set VoiceEntries(value: VoiceEntry[]) {\n        this.voiceEntries = value;\n    }\n\n    public get Link(): StaffEntryLink {\n        return this.staffEntryLink;\n    }\n\n    public set Link(value: StaffEntryLink) {\n        this.staffEntryLink = value;\n    }\n\n    public get Instructions(): AbstractNotationInstruction[] {\n        return this.instructions;\n    }\n\n    public set Instructions(value: AbstractNotationInstruction[]) {\n        this.instructions = value;\n    }\n\n    public get ChordContainers(): ChordSymbolContainer[] {\n        return this.chordSymbolContainers;\n    }\n\n    public set ChordContainers(value: ChordSymbolContainer[]) {\n        this.chordSymbolContainers = value;\n    }\n\n    // public removeAllInstructionsOfType(type: AbstractNotationInstruction): number {\n    //     let i: number = 0;\n    //     let ret: number = 0;\n    //     while (i < this.instructions.length) {\n    //         let instruction: AbstractNotationInstruction = this.instructions[i];\n    //         if (instruction instanceof type) {\n    //             this.instructions.splice(i, 1);\n    //             ret++;\n    //         } else {\n    //             i++;\n    //         }\n    //     }\n    //     return ret;\n    // }\n    //\n    // public removeFirstInstructionOfType(type: AbstractNotationInstruction): boolean {\n    //     for (let i: number = 0; i < this.instructions.length; i++) {\n    //         if (this.instructions[i] instanceof type) {\n    //             this.instructions.splice(i, 1);\n    //             return true;\n    //         }\n    //     }\n    //     return false;\n    // }\n\n    public removeAllInstructionsOfTypeClefInstruction(): number {\n        let i: number = 0;\n        let ret: number = 0;\n        while (i < this.instructions.length) {\n            if (this.instructions[i] instanceof ClefInstruction) {\n                this.instructions.splice(i, 1);\n                ret++;\n            } else {\n                i++;\n            }\n        }\n        return ret;\n    }\n\n    /**\n     * Similar to RemoveAllInstructionsOfType but faster,\n     * because it stops searching when the first instruction of the given type is found.\n     * @returns {boolean}\n     */\n    public removeFirstInstructionOfTypeClefInstruction(): boolean {\n        for (let i: number = 0; i < this.instructions.length; i++) {\n            if (this.instructions[i] instanceof ClefInstruction) {\n                this.instructions.splice(i, 1);\n                return true;\n            }\n        }\n        return false;\n    }\n\n    public removeAllInstructionsOfTypeKeyInstruction(): number {\n        let i: number = 0;\n        let ret: number = 0;\n        while (i < this.instructions.length) {\n            if (this.instructions[i] instanceof KeyInstruction) {\n                this.instructions.splice(i, 1);\n                ret++;\n            } else {\n                i++;\n            }\n        }\n        return ret;\n    }\n\n    /**\n     * Similar to RemoveAllInstructionsOfType but faster,\n     * because it stops searching when the first instruction of the given type is found.\n     * @returns {boolean}\n     */\n    public removeFirstInstructionOfTypeKeyInstruction(): boolean {\n        for (let i: number = 0; i < this.instructions.length; i++) {\n            if (this.instructions[i] instanceof KeyInstruction) {\n                this.instructions.splice(i, 1);\n                return true;\n            }\n        }\n        return false;\n    }\n\n    public removeAllInstructionsOfTypeRhythmInstruction(): number {\n        let i: number = 0;\n        let ret: number = 0;\n        while (i < this.instructions.length) {\n            if (this.instructions[i] instanceof RhythmInstruction) {\n                this.instructions.splice(i, 1);\n                ret++;\n            } else {\n                i++;\n            }\n        }\n        return ret;\n    }\n\n    public removeFirstInstructionOfTypeRhythmInstruction(): boolean {\n        for (let i: number = 0; i < this.instructions.length; i++) {\n            if (this.instructions[i] instanceof RhythmInstruction) {\n                this.instructions.splice(i, 1);\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Calculate the [[SourceStaffEntry]]'s minimum NoteLength.\n     * @returns {Fraction}\n     */\n    public calculateMinNoteLength(): Fraction {\n        let duration: Fraction = new Fraction(Number.MAX_VALUE, 1);\n        for (let idx: number = 0, len: number = this.VoiceEntries.length; idx < len; ++idx) {\n            const voiceEntry: VoiceEntry = this.VoiceEntries[idx];\n            for (let idx2: number = 0, len2: number = voiceEntry.Notes.length; idx2 < len2; ++idx2) {\n                const note: Note = voiceEntry.Notes[idx2];\n                if (note.Length.lt(duration)) {\n                    duration = note.Length;\n                }\n            }\n        }\n        return duration;\n    }\n\n    public calculateMaxNoteLength(): Fraction {\n        let duration: Fraction = new Fraction(0, 1);\n        for (let idx: number = 0, len: number = this.VoiceEntries.length; idx < len; ++idx) {\n            const voiceEntry: VoiceEntry = this.VoiceEntries[idx];\n            for (let idx2: number = 0, len2: number = voiceEntry.Notes.length; idx2 < len2; ++idx2) {\n                const note: Note = voiceEntry.Notes[idx2];\n                if (note.NoteTie) {\n                    // only add notes from this and after this sse!!\n                    const tieRestDuration: Fraction = Fraction.createFromFraction(note.Length);\n                    let addFollowingNotes: boolean = false;\n                    for (const n of note.NoteTie.Notes) {\n                        if (n === note) {\n                            addFollowingNotes = true;\n                            continue;\n                        }\n                        if (addFollowingNotes) {\n                            tieRestDuration.Add(n.Length);\n                        }\n                    }\n                    if (duration.lt(tieRestDuration)) {\n                        duration = tieRestDuration;\n                    }\n                } else if (duration.lt(note.Length)) {\n                    duration = note.Length;\n                }\n            }\n        }\n        return duration;\n    }\n\n    public hasNotes(): boolean {\n        for (let idx: number = 0, len: number = this.VoiceEntries.length; idx < len; ++idx) {\n            const voiceEntry: VoiceEntry = this.VoiceEntries[idx];\n            if (voiceEntry.Notes.length > 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    public hasTie(): boolean {\n        for (let idx: number = 0, len: number = this.VoiceEntries.length; idx < len; ++idx) {\n            const voiceEntry: VoiceEntry = this.VoiceEntries[idx];\n            if (voiceEntry.hasTie()) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    public findLinkedNotes(linkedNotes: Note[]): void {\n        for (let idx: number = 0, len: number = this.voiceEntries.length; idx < len; ++idx) {\n            const voiceEntry: VoiceEntry = this.voiceEntries[idx];\n            for (let idx2: number = 0, len2: number = voiceEntry.Notes.length; idx2 < len2; ++idx2) {\n                const note: Note = voiceEntry.Notes[idx2];\n                if (note.ParentStaffEntry === this) {\n                    linkedNotes.push(note);\n                }\n            }\n        }\n    }\n\n    public get hasOnlyRests(): boolean {\n        for (const voiceEntry of this.voiceEntries) {\n            for (const note of voiceEntry.Notes) {\n                if (!note.isRest) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n}\n","import {Voice} from \"./Voice\";\nimport {Instrument} from \"../Instrument\";\nimport { Tie } from \"./Tie\";\n\nexport class Staff {\n\n    constructor(parentInstrument: Instrument, instrumentStaffId: number) {\n        this.parentInstrument = parentInstrument;\n        this.id = instrumentStaffId;\n        this.audible = true;\n        this.following = true;\n    }\n\n    public idInMusicSheet: number;\n    public audible: boolean;\n    public following: boolean;\n    public isTab: boolean = false;\n\n    private parentInstrument: Instrument;\n    private voices: Voice[] = [];\n    private volume: number = 1;\n    private id: number;\n    private stafflineCount: number = 5;\n    public hasLyrics: boolean = false;\n    public openTieDict: { [_: number]: Tie } = {};\n\n    public get ParentInstrument(): Instrument {\n        return this.parentInstrument;\n    }\n    public set ParentInstrument(value: Instrument) {\n        this.parentInstrument = value;\n    }\n    public get Voices(): Voice[] {\n        return this.voices;\n    }\n    public get Id(): number {\n        return this.id;\n    }\n    public get Volume(): number {\n        return this.volume;\n    }\n    public set Volume(value: number) {\n        this.volume = value;\n    }\n    public get StafflineCount(): number {\n        return this.stafflineCount;\n    }\n    public set StafflineCount(value: number) {\n        this.stafflineCount = value;\n    }\n}\n","import {VoiceEntry} from \"./VoiceEntry\";\nimport {SourceStaffEntry} from \"./SourceStaffEntry\";\n\n/**\n * Used for linked voices.\n */\nexport class StaffEntryLink {\n    constructor(voiceEntry: VoiceEntry) {\n        this.voiceEntry = voiceEntry;\n    }\n\n    private voiceEntry: VoiceEntry;\n    private linkStaffEntries: SourceStaffEntry[] = [];\n\n    public get GetVoiceEntry(): VoiceEntry {\n        return this.voiceEntry;\n    }\n    public get LinkStaffEntries(): SourceStaffEntry[] {\n        return this.linkStaffEntries;\n    }\n    public set LinkStaffEntries(value: SourceStaffEntry[]) {\n        this.linkStaffEntries = value;\n    }\n\n}\n","import { Note } from \"./Note\";\nimport { Fraction } from \"../../Common/DataObjects/Fraction\";\nimport { VoiceEntry } from \"./VoiceEntry\";\nimport { SourceStaffEntry } from \"./SourceStaffEntry\";\nimport { Pitch } from \"../../Common/DataObjects/Pitch\";\nimport { SourceMeasure } from \"./SourceMeasure\";\n\nexport class TabNote extends Note {\n    constructor(voiceEntry: VoiceEntry, parentStaffEntry: SourceStaffEntry, length: Fraction, pitch: Pitch, sourceMeasure: SourceMeasure,\n                stringNumber: number, fretNumber: number, bendArray: { bendalter: number, direction: string }[],\n                vibratoStroke: boolean) {\n        super(voiceEntry, parentStaffEntry, length, pitch, sourceMeasure);\n        this.stringNumberTab = stringNumber;\n        this.fretNumber = fretNumber;\n        this.bendArray = bendArray;\n        this.vibratoStroke = vibratoStroke;\n    }\n\n    private stringNumberTab: number; // there can also be string numbers for e.g. violin in treble clef.\n    private fretNumber: number;\n    private bendArray: { bendalter: number, direction: string }[];\n    private vibratoStroke: boolean;\n\n    /** Returns the string number the note should be played on. Note there can also be violin string numbers in treble clef. */\n    public get StringNumberTab(): number {\n        return this.stringNumberTab;\n    }\n\n    public get FretNumber(): number {\n        return this.fretNumber;\n    }\n\n    public get BendArray(): { bendalter: number, direction: string }[] {\n        return this.bendArray;\n    }\n\n    public get VibratoStroke(): boolean {\n        return this.vibratoStroke;\n    }\n}\n","import {Note} from \"./Note\";\nimport { Fraction } from \"../../Common/DataObjects/Fraction\";\nimport { Pitch } from \"../../Common/DataObjects/Pitch\";\nimport { TieTypes } from \"../../Common/Enums/\";\nimport { PlacementEnum } from \"../VoiceData/Expressions/AbstractExpression\";\nimport log from \"loglevel\";\n\n/**\n * A [[Tie]] connects two notes of the same pitch and name, indicating that they have to be played as a single note.\n */\nexport class Tie {\n\n    constructor(note: Note, type: TieTypes) {\n        this.AddNote(note);\n        this.type = type;\n    }\n\n    private notes: Note[] = [];\n    private type: TieTypes;\n    public TieNumber: number = 1;\n    public TieDirection: PlacementEnum = PlacementEnum.NotYetDefined;\n    /** Can contain tie directions at certain note indices.\n     *  For example, if it contains {2: PlacementEnum.Below}, then\n     *  the tie should go downwards from Tie.Notes[2] onwards,\n     *  even if tie.TieDirection is PlacementEnum.Above (tie starts going up on Notes[0]).\n     */\n    public NoteIndexToTieDirection: NoteIndexToPlacementEnum = {};\n\n    public getTieDirection(startNote?: Note): PlacementEnum {\n        if (!startNote) {\n            return this.TieDirection;\n        }\n        for (let i: number = 0; i < this.Notes.length; i++) {\n            const tieNote: Note = this.Notes[i];\n            if (tieNote === startNote) {\n                const directionAtIndex: PlacementEnum = this.NoteIndexToTieDirection[i];\n                if (directionAtIndex) {\n                    return directionAtIndex;\n                } else {\n                    return this.TieDirection;\n                }\n            }\n        }\n        log.debug(\"tie.getTieDuration note not in tie.Notes\");\n        // ^ happens in Christbaum measure 19 - probably note sharing stem\n        return this.TieDirection;\n    }\n\n    public get Notes(): Note[] {\n        return this.notes;\n    }\n\n    public get Type(): TieTypes {\n        return this.type;\n    }\n\n    public get StartNote(): Note {\n        return this.notes[0];\n    }\n\n    public get Duration(): Fraction {\n        const duration: Fraction = new Fraction();\n        for (const note of this.notes) {\n            duration.Add(note.Length);\n        }\n        return duration;\n    }\n\n    public get Pitch(): Pitch {\n        return this.StartNote.Pitch;\n    }\n\n    public AddNote(note: Note): void {\n        this.notes.push(note);\n        note.NoteTie = this;\n    }\n}\n\nexport interface NoteIndexToPlacementEnum {\n    [key: number]: PlacementEnum;\n  }\n","import { Note } from \"./Note\";\nimport { Fraction } from \"../../Common/DataObjects/Fraction\";\nimport { PlacementEnum } from \"./Expressions/AbstractExpression\";\n\n/**\n * Tuplets create irregular rhythms; e.g. triplets, quadruplets, quintuplets, etc.\n */\nexport class Tuplet {\n\n    constructor(tupletLabelNumber: number, bracket: boolean = false) {\n        this.tupletLabelNumber = tupletLabelNumber;\n        this.bracket = bracket;\n    }\n\n    private tupletLabelNumber: number;\n    public PlacementFromXml: boolean = false;\n    public tupletLabelNumberPlacement: PlacementEnum;\n    /** Notes contained in the tuplet, per VoiceEntry (list of VoiceEntries, which has a list of notes). */\n    private notes: Note[][] = []; // TODO should probably be VoiceEntry[], not Note[][].\n    private fractions: Fraction[] = [];\n    /** Whether this tuplet has a bracket. (e.g. showing |--3--| or just 3 for a triplet) */\n    private bracket: boolean;\n\n    public get TupletLabelNumber(): number {\n        return this.tupletLabelNumber;\n    }\n\n    public set TupletLabelNumber(value: number) {\n        this.tupletLabelNumber = value;\n    }\n\n    public get Notes(): Note[][] {\n        return this.notes;\n    }\n\n    public set Notes(value: Note[][]) {\n        this.notes = value;\n    }\n\n    public get Fractions(): Fraction[] {\n        return this.fractions;\n    }\n\n    public set Fractions(value: Fraction[]) {\n        this.fractions = value;\n    }\n\n    public get Bracket(): boolean {\n        return this.bracket;\n    }\n\n    public set Bracket(value: boolean) {\n        this.bracket = value;\n    }\n\n    /**\n     * Returns the index of the given Note in the Tuplet List (notes[0], notes[1],...).\n     * @param note\n     * @returns {number}\n     */\n    public getNoteIndex(note: Note): number {\n        for (let i: number = this.notes.length - 1; i >= 0; i--) {\n            for (let j: number = 0; j < this.notes[i].length; j++) {\n                if (note === this.notes[i][j]) {\n                    return i;\n                }\n            }\n        }\n        return 0;\n    }\n\n}\n","import {SourceMeasure} from \"./SourceMeasure\";\nimport {Fraction} from \"../../Common/DataObjects/Fraction\";\nimport {SourceStaffEntry} from \"./SourceStaffEntry\";\n\n/**\n * A [[VerticalSourceStaffEntryContainer]] contains the [[StaffEntry]]s at one timestamp through all the [[StaffLine]]s.\n */\nexport class VerticalSourceStaffEntryContainer {\n\n    constructor(parentMeasure: SourceMeasure, timestamp: Fraction, size: number) {\n        this.timestamp = timestamp;\n        this.staffEntries = new Array(size);\n        this.parentMeasure = parentMeasure;\n    }\n\n    private timestamp: Fraction;\n    private staffEntries: SourceStaffEntry[] = [];\n    private comments: Comment[] = [];\n    private parentMeasure: SourceMeasure;\n\n    public $get$(index: number): SourceStaffEntry {\n        return this.staffEntries[index];\n    }\n    public $set$(index: number, value: SourceStaffEntry): void {\n        this.staffEntries[index] = value;\n    }\n    public get Timestamp(): Fraction {\n        return this.timestamp;\n    }\n    public set Timestamp(value: Fraction) {\n        this.timestamp = value;\n    }\n    public get StaffEntries(): SourceStaffEntry[] {\n        return this.staffEntries;\n    }\n    public set StaffEntries(value: SourceStaffEntry[]) {\n        this.staffEntries = value;\n    }\n    public get Comments(): Comment[] {\n        return this.comments;\n    }\n    public set Comments(value: Comment[]) {\n        this.comments = value;\n    }\n    public get ParentMeasure(): SourceMeasure {\n        return this.parentMeasure;\n    }\n    public set ParentMeasure(value: SourceMeasure) {\n        this.parentMeasure = value;\n    }\n    public getAbsoluteTimestamp(): Fraction {\n        return Fraction.plus(this.timestamp, this.parentMeasure.AbsoluteTimestamp);\n    }\n\n}\n","import {Instrument} from \"../Instrument\";\nimport {VoiceEntry} from \"./VoiceEntry\";\n\n/**\n * A [[Voice]] contains all the [[VoiceEntry]]s in a voice in a [[StaffLine]].\n */\nexport class Voice {\n\n    private voiceEntries: VoiceEntry[] = [];\n    private parent: Instrument;\n    private visible: boolean;\n    private audible: boolean;\n    private following: boolean;\n    /**\n     * The Id given in the MusicXMl file to distinguish the different voices. It is unique per instrument.\n     */\n    private voiceId: number;\n    private volume: number = 1;\n\n    constructor(parent: Instrument, voiceId: number) {\n        this.parent = parent;\n        this.visible = true;\n        this.audible = true;\n        this.following = true;\n        this.voiceId = voiceId;\n    }\n\n    public get VoiceEntries(): VoiceEntry[] {\n        return this.voiceEntries;\n    }\n    public get Parent(): Instrument {\n        return this.parent;\n    }\n    public get Visible(): boolean {\n        return this.visible;\n    }\n    public set Visible(value: boolean) {\n        this.visible = value;\n    }\n    public get Audible(): boolean {\n        return this.audible;\n    }\n    public set Audible(value: boolean) {\n        this.audible = value;\n    }\n    public get Following(): boolean {\n        return this.following;\n    }\n    public set Following(value: boolean) {\n        this.following = value;\n    }\n    public get VoiceId(): number {\n        return this.voiceId;\n    }\n    public get Volume(): number {\n        return this.volume;\n    }\n    public set Volume(value: number) {\n        this.volume = value;\n    }\n\n}\n","import {Fraction} from \"../../Common/DataObjects/Fraction\";\nimport {Voice} from \"./Voice\";\nimport {SourceStaffEntry} from \"./SourceStaffEntry\";\nimport {Note} from \"./Note\";\nimport {Pitch} from \"../../Common/DataObjects/Pitch\";\nimport {LyricsEntry} from \"./Lyrics/LyricsEntry\";\nimport {TechnicalInstruction} from \"./Instructions/TechnicalInstruction\";\nimport {OrnamentContainer} from \"./OrnamentContainer\";\nimport {KeyInstruction} from \"./Instructions/KeyInstruction\";\nimport {OrnamentEnum} from \"./OrnamentContainer\";\nimport {AccidentalEnum} from \"../../Common/DataObjects/Pitch\";\nimport { Dictionary } from \"typescript-collections\";\nimport {Arpeggio} from \"./Arpeggio\";\nimport { SourceMeasure } from \"./SourceMeasure\";\nimport { Articulation } from \"./Articulation\";\n\n/**\n * A [[VoiceEntry]] contains the notes in a voice at a timestamp.\n */\nexport class VoiceEntry {\n    /**\n     *\n     * @param timestamp The relative timestamp within the source measure.\n     * @param parentVoice\n     * @param parentSourceStaffEntry\n     * @param isGrace States whether the VoiceEntry has (only) grace notes.\n     * @param graceNoteSlash States whether the grace note(s) have a slash (Acciaccatura, played before the beat)\n     */\n    constructor(timestamp: Fraction, parentVoice: Voice, parentSourceStaffEntry: SourceStaffEntry,\n                isGrace: boolean = false, graceNoteSlash: boolean = false, graceSlur: boolean = false) {\n        this.timestamp = timestamp;\n        this.parentVoice = parentVoice;\n        this.parentSourceStaffEntry = parentSourceStaffEntry;\n        this.isGrace = isGrace;\n        this.graceAfterMainNote = false;\n        this.graceNoteSlash = graceNoteSlash;\n        this.graceSlur = graceSlur;\n\n        // add currentVoiceEntry to staff entry:\n        if (parentSourceStaffEntry !== undefined) {\n            const list: VoiceEntry[] = parentSourceStaffEntry.VoiceEntries;\n            if (list.indexOf(this) === -1) {\n                list.push(this);\n            }\n        }\n    }\n\n    private parentVoice: Voice;\n    private parentSourceStaffEntry: SourceStaffEntry;\n    private timestamp: Fraction;\n    private notes: Note[] = [];\n    private isGrace: boolean;\n    /** States whether the grace notes come after a main note (at end of measure). */\n    private graceAfterMainNote: boolean;\n    private graceNoteSlash: boolean;\n    private graceSlur: boolean; // TODO grace slur system could be refined to be non-binary\n    private articulations: Articulation[] = [];\n    private technicalInstructions: TechnicalInstruction[] = [];\n    private lyricsEntries: Dictionary<number, LyricsEntry> = new Dictionary<number, LyricsEntry>();\n    /** The Arpeggio consisting of this VoiceEntry's notes. Undefined if no arpeggio exists. */\n    private arpeggio: Arpeggio;\n    private ornamentContainer: OrnamentContainer;\n    private wantedStemDirection: StemDirectionType = StemDirectionType.Undefined;\n    /** Stem direction specified in the xml stem element. */\n    private stemDirectionXml: StemDirectionType = StemDirectionType.Undefined;\n    private stemDirection: StemDirectionType = StemDirectionType.Undefined;\n    /** Color of the stem given in XML. RGB Hexadecimal, like #00FF00. */\n    private stemColorXml: string;\n    /** Color of the stem currently set. RGB Hexadecimal, like #00FF00. */\n    private stemColor: string;\n\n    public get ParentSourceStaffEntry(): SourceStaffEntry {\n        return this.parentSourceStaffEntry;\n    }\n    public get ParentVoice(): Voice {\n        return this.parentVoice;\n    }\n    public get Timestamp(): Fraction {\n        return this.timestamp;\n    }\n    public set Timestamp(value: Fraction) {\n        this.timestamp = value;\n    }\n    public get Notes(): Note[] {\n        return this.notes;\n    }\n    public get IsGrace(): boolean {\n        return this.isGrace;\n    }\n    public set IsGrace(value: boolean) {\n        this.isGrace = value;\n    }\n    public get GraceAfterMainNote(): boolean {\n        return this.graceAfterMainNote;\n    }\n    public set GraceAfterMainNote(value: boolean) {\n        this.graceAfterMainNote = value;\n    }\n    public get GraceNoteSlash(): boolean {\n        return this.graceNoteSlash;\n    }\n    public set GraceNoteSlash(value: boolean) {\n        this.graceNoteSlash = value;\n    }\n    public get GraceSlur(): boolean {\n        return this.graceSlur;\n    }\n    public set GraceSlur(value: boolean) {\n        this.graceSlur = value;\n    }\n    public get Articulations(): Articulation[] {\n        return this.articulations;\n    }\n    public get TechnicalInstructions(): TechnicalInstruction[] {\n        return this.technicalInstructions;\n    }\n    public get LyricsEntries(): Dictionary<number, LyricsEntry> {\n        return this.lyricsEntries;\n    }\n    public get Arpeggio(): Arpeggio {\n        return this.arpeggio;\n    }\n    public set Arpeggio(value: Arpeggio) {\n        this.arpeggio = value;\n    }\n    public get OrnamentContainer(): OrnamentContainer {\n        return this.ornamentContainer;\n    }\n    public set OrnamentContainer(value: OrnamentContainer) {\n        this.ornamentContainer = value;\n    }\n\n    // WantedStemDirection provides the stem direction to VexFlow in case of more than 1 voice\n    // for optimal graphical appearance\n    public set WantedStemDirection(value: StemDirectionType) {\n        this.wantedStemDirection = value;\n    }\n    public get WantedStemDirection(): StemDirectionType {\n        return this.wantedStemDirection;\n    }\n    public set StemDirectionXml(value: StemDirectionType) {\n        this.stemDirectionXml = value;\n    }\n    public get StemDirectionXml(): StemDirectionType {\n        return this.stemDirectionXml;\n    }\n    // StemDirection holds the actual value of the stem\n    public set StemDirection(value: StemDirectionType) {\n        this.stemDirection = value;\n    }\n    public get StemDirection(): StemDirectionType {\n        return this.stemDirection;\n    }\n    public get StemColorXml(): string {\n        return this.stemColorXml;\n    }\n    public set StemColorXml(value: string) {\n        this.stemColorXml = value;\n    }\n    public get StemColor(): string {\n        return this.stemColor;\n    }\n    public set StemColor(value: string) {\n        this.stemColor = value;\n    }\n\n    public hasArticulation(articulation: Articulation): boolean {\n        for (const existingArticulation of this.articulations) {\n            if (existingArticulation.Equals(articulation)) {\n                return true;\n            }\n        }\n        return false;\n    }\n    public static isSupportedArticulation(articulation: ArticulationEnum): boolean {\n        switch (articulation) {\n            case ArticulationEnum.accent:\n            case ArticulationEnum.strongaccent:\n            case ArticulationEnum.invertedstrongaccent:\n            case ArticulationEnum.staccato:\n            case ArticulationEnum.staccatissimo:\n            case ArticulationEnum.spiccato:\n            case ArticulationEnum.tenuto:\n            case ArticulationEnum.fermata:\n            case ArticulationEnum.invertedfermata:\n            case ArticulationEnum.breathmark:\n            case ArticulationEnum.caesura:\n            case ArticulationEnum.lefthandpizzicato:\n            case ArticulationEnum.naturalharmonic:\n            case ArticulationEnum.snappizzicato:\n            case ArticulationEnum.upbow:\n            case ArticulationEnum.downbow:\n            case ArticulationEnum.bend:\n                return true;\n            default:\n                return false;\n        }\n    }\n    public hasTie(): boolean {\n        for (let idx: number = 0, len: number = this.Notes.length; idx < len; ++idx) {\n            const note: Note = this.Notes[idx];\n            if (note.NoteTie) { return true; }\n        }\n        return false;\n    }\n    public hasSlur(): boolean {\n        for (let idx: number = 0, len: number = this.Notes.length; idx < len; ++idx) {\n            const note: Note = this.Notes[idx];\n            if (note.NoteSlurs.length > 0) { return true; }\n        }\n        return false;\n    }\n    public isStaccato(): boolean {\n        for (const articulation of this.Articulations) {\n            if (articulation.articulationEnum === ArticulationEnum.staccato) {\n                return true;\n            }\n        }\n        return false;\n    }\n    public isAccent(): boolean {\n        for (const articulation of this.Articulations) {\n            if (articulation.articulationEnum === ArticulationEnum.accent || articulation.articulationEnum === ArticulationEnum.strongaccent) {\n                return true;\n            }\n        }\n        return false;\n    }\n    public getVerseNumberForLyricEntry(lyricsEntry: LyricsEntry): number {\n        let verseNumber: number = 1;\n        this.lyricsEntries.forEach((key: number, value: LyricsEntry): void => {\n            if (lyricsEntry === value) {\n                verseNumber = key;\n            }\n        });\n        return verseNumber;\n    }\n    //public createVoiceEntriesForOrnament(activeKey: KeyInstruction): VoiceEntry[] {\n    //    return this.createVoiceEntriesForOrnament(this, activeKey);\n    //}\n    public createVoiceEntriesForOrnament(voiceEntryWithOrnament: VoiceEntry, activeKey: KeyInstruction): VoiceEntry[] {\n        if (!voiceEntryWithOrnament) {\n            voiceEntryWithOrnament = this;\n        }\n        const voiceEntries: VoiceEntry[] = [];\n        if (!voiceEntryWithOrnament.ornamentContainer) {\n            return;\n        }\n        const baseNote: Note = this.notes[0];\n        const baselength: Fraction = baseNote.Length;\n        const baseVoice: Voice = voiceEntryWithOrnament.ParentVoice;\n        const baseTimestamp: Fraction = voiceEntryWithOrnament.Timestamp;\n        let currentTimestamp: Fraction = Fraction.createFromFraction(baseTimestamp);\n        //let length: Fraction;\n        switch (voiceEntryWithOrnament.ornamentContainer.GetOrnament) {\n            case OrnamentEnum.Trill: {\n                const length: Fraction = new Fraction(baselength.Numerator, baselength.Denominator * 8);\n                const higherPitch: Pitch = baseNote.Pitch.getTransposedPitch(1);\n                let alteration: AccidentalEnum = activeKey.getAlterationForPitch(higherPitch);\n                if (voiceEntryWithOrnament.OrnamentContainer.AccidentalAbove !== AccidentalEnum.NONE) {\n                    alteration = voiceEntryWithOrnament.ornamentContainer.AccidentalAbove;\n                }\n                for (let i: number = 0; i < 8; i++) {\n                    currentTimestamp = Fraction.plus(baseTimestamp, new Fraction(i * length.Numerator, length.Denominator));\n                    if ((i % 2) === 0) {\n                        this.createBaseVoiceEntry(currentTimestamp, length, baseVoice, baseNote, voiceEntries);\n                    } else {\n                        this.createAlteratedVoiceEntry(currentTimestamp, length, baseVoice, baseNote.SourceMeasure, higherPitch, alteration, voiceEntries);\n                    }\n                }\n                break;\n            }\n            case OrnamentEnum.Turn: {\n                const length: Fraction = new Fraction(baselength.Numerator, baselength.Denominator * 4);\n                const lowerPitch: Pitch = baseNote.Pitch.getTransposedPitch(-1);\n                const lowerAlteration: AccidentalEnum = activeKey.getAlterationForPitch(lowerPitch);\n                const higherPitch: Pitch = baseNote.Pitch.getTransposedPitch(1);\n                const higherAlteration: AccidentalEnum = activeKey.getAlterationForPitch(higherPitch);\n                this.createAlteratedVoiceEntry(\n                    currentTimestamp, length, baseVoice, baseNote.SourceMeasure, higherPitch, higherAlteration, voiceEntries\n                );\n                currentTimestamp.Add(length);\n                this.createBaseVoiceEntry(currentTimestamp, length, baseVoice, baseNote, voiceEntries);\n                currentTimestamp.Add(length);\n                this.createAlteratedVoiceEntry(\n                    currentTimestamp, length, baseVoice, baseNote.SourceMeasure, lowerPitch, lowerAlteration, voiceEntries\n                );\n                currentTimestamp.Add(length);\n                this.createBaseVoiceEntry(currentTimestamp, length, baseVoice, baseNote, voiceEntries);\n                break;\n            }\n            case OrnamentEnum.InvertedTurn: {\n                const length: Fraction = new Fraction(baselength.Numerator, baselength.Denominator * 4);\n                const lowerPitch: Pitch = baseNote.Pitch.getTransposedPitch(-1);\n                const lowerAlteration: AccidentalEnum = activeKey.getAlterationForPitch(lowerPitch);\n                const higherPitch: Pitch = baseNote.Pitch.getTransposedPitch(1);\n                const higherAlteration: AccidentalEnum = activeKey.getAlterationForPitch(higherPitch);\n                this.createAlteratedVoiceEntry(\n                    currentTimestamp, length, baseVoice, baseNote.SourceMeasure, lowerPitch, lowerAlteration, voiceEntries\n                );\n                currentTimestamp.Add(length);\n                this.createBaseVoiceEntry(currentTimestamp, length, baseVoice, baseNote, voiceEntries);\n                currentTimestamp.Add(length);\n                this.createAlteratedVoiceEntry(\n                    currentTimestamp, length, baseVoice, baseNote.SourceMeasure, higherPitch, higherAlteration, voiceEntries\n                );\n                currentTimestamp.Add(length);\n                this.createBaseVoiceEntry(currentTimestamp, length, baseVoice, baseNote, voiceEntries);\n                break;\n            }\n            case OrnamentEnum.DelayedTurn: {\n                const length: Fraction = new Fraction(baselength.Numerator, baselength.Denominator * 2);\n                const lowerPitch: Pitch = baseNote.Pitch.getTransposedPitch(-1);\n                const lowerAlteration: AccidentalEnum = activeKey.getAlterationForPitch(lowerPitch);\n                const higherPitch: Pitch = baseNote.Pitch.getTransposedPitch(1);\n                const higherAlteration: AccidentalEnum = activeKey.getAlterationForPitch(higherPitch);\n                this.createBaseVoiceEntry(currentTimestamp, length, baseVoice, baseNote, voiceEntries);\n                currentTimestamp = Fraction.plus(baseTimestamp, length);\n                length.Denominator = baselength.Denominator * 8;\n                this.createAlteratedVoiceEntry(currentTimestamp, length, baseVoice, baseNote.SourceMeasure, higherPitch, higherAlteration, voiceEntries);\n                currentTimestamp.Add(length);\n                this.createBaseVoiceEntry(currentTimestamp, length, baseVoice, baseNote, voiceEntries);\n                currentTimestamp.Add(length);\n                this.createAlteratedVoiceEntry(currentTimestamp, length, baseVoice, baseNote.SourceMeasure, lowerPitch, lowerAlteration, voiceEntries);\n                currentTimestamp.Add(length);\n                this.createBaseVoiceEntry(currentTimestamp, length, baseVoice, baseNote, voiceEntries);\n                break;\n            }\n            case OrnamentEnum.DelayedInvertedTurn: {\n                const length: Fraction = new Fraction(baselength.Numerator, baselength.Denominator * 2);\n                const lowerPitch: Pitch = baseNote.Pitch.getTransposedPitch(-1);\n                const lowerAlteration: AccidentalEnum = activeKey.getAlterationForPitch(lowerPitch);\n                const higherPitch: Pitch = baseNote.Pitch.getTransposedPitch(1);\n                const higherAlteration: AccidentalEnum = activeKey.getAlterationForPitch(higherPitch);\n                this.createBaseVoiceEntry(currentTimestamp, length, baseVoice, baseNote, voiceEntries);\n                currentTimestamp = Fraction.plus(baseTimestamp, length);\n                length.Denominator = baselength.Denominator * 8;\n                this.createAlteratedVoiceEntry(currentTimestamp, length, baseVoice, baseNote.SourceMeasure, lowerPitch, lowerAlteration, voiceEntries);\n                currentTimestamp.Add(length);\n                this.createBaseVoiceEntry(currentTimestamp, length, baseVoice, baseNote, voiceEntries);\n                currentTimestamp.Add(length);\n                this.createAlteratedVoiceEntry(currentTimestamp, length, baseVoice, baseNote.SourceMeasure, higherPitch, higherAlteration, voiceEntries);\n                currentTimestamp.Add(length);\n                this.createBaseVoiceEntry(currentTimestamp, length, baseVoice, baseNote, voiceEntries);\n                break;\n            }\n            case OrnamentEnum.Mordent: {\n                const length: Fraction = new Fraction(baselength.Numerator, baselength.Denominator * 4);\n                const higherPitch: Pitch = baseNote.Pitch.getTransposedPitch(1);\n                const alteration: AccidentalEnum = activeKey.getAlterationForPitch(higherPitch);\n                this.createBaseVoiceEntry(currentTimestamp, length, baseVoice, baseNote, voiceEntries);\n                currentTimestamp.Add(length);\n                this.createAlteratedVoiceEntry(currentTimestamp, length, baseVoice, baseNote.SourceMeasure, higherPitch, alteration, voiceEntries);\n                length.Denominator = baselength.Denominator * 2;\n                currentTimestamp = Fraction.plus(baseTimestamp, length);\n                this.createBaseVoiceEntry(currentTimestamp, length, baseVoice, baseNote, voiceEntries);\n                break;\n            }\n            case OrnamentEnum.InvertedMordent: {\n                const length: Fraction = new Fraction(baselength.Numerator, baselength.Denominator * 4);\n                const lowerPitch: Pitch = baseNote.Pitch.getTransposedPitch(-1);\n                const alteration: AccidentalEnum = activeKey.getAlterationForPitch(lowerPitch);\n                this.createBaseVoiceEntry(currentTimestamp, length, baseVoice, baseNote, voiceEntries);\n                currentTimestamp.Add(length);\n                this.createAlteratedVoiceEntry(currentTimestamp, length, baseVoice, baseNote.SourceMeasure, lowerPitch, alteration, voiceEntries);\n                length.Denominator = baselength.Denominator * 2;\n                currentTimestamp = Fraction.plus(baseTimestamp, length);\n                this.createBaseVoiceEntry(currentTimestamp, length, baseVoice, baseNote, voiceEntries);\n                break;\n            }\n            default:\n                throw new RangeError();\n        }\n        return voiceEntries;\n    }\n    private createBaseVoiceEntry(\n        currentTimestamp: Fraction, length: Fraction, baseVoice: Voice, baseNote: Note, voiceEntries: VoiceEntry[]\n    ): void {\n        const voiceEntry: VoiceEntry = new VoiceEntry(currentTimestamp, baseVoice, baseNote.ParentStaffEntry);\n        const pitch: Pitch = new Pitch(baseNote.Pitch.FundamentalNote, baseNote.Pitch.Octave, baseNote.Pitch.Accidental);\n        const note: Note = new Note(voiceEntry, undefined, length, pitch, baseNote.SourceMeasure);\n        voiceEntry.Notes.push(note);\n        voiceEntries.push(voiceEntry);\n    }\n    private createAlteratedVoiceEntry(\n        currentTimestamp: Fraction, length: Fraction, baseVoice: Voice, sourceMeasure: SourceMeasure, higherPitch: Pitch,\n        alteration: AccidentalEnum, voiceEntries: VoiceEntry[]\n    ): void {\n        const voiceEntry: VoiceEntry = new VoiceEntry(currentTimestamp, baseVoice, undefined);\n        const pitch: Pitch = new Pitch(higherPitch.FundamentalNote, higherPitch.Octave, alteration);\n        const note: Note = new Note(voiceEntry, undefined, length, pitch, sourceMeasure);\n        voiceEntry.Notes.push(note);\n        voiceEntries.push(voiceEntry);\n    }\n\n}\n\nexport enum ArticulationEnum {\n    accent,\n    strongaccent,\n    marcatoup,\n    marcatodown,\n    invertedstrongaccent,\n    staccato,\n    staccatissimo,\n    spiccato,\n    tenuto,\n    fermata,\n    invertedfermata,\n    breathmark,\n    caesura,\n    lefthandpizzicato,\n    naturalharmonic,\n    snappizzicato,\n    upbow,\n    downbow,\n    scoop,\n    plop,\n    doit,\n    falloff,\n    stress,\n    unstress,\n    detachedlegato,\n    otherarticulation,\n    bend\n}\n\nexport enum StemDirectionType {\n    Undefined = -1,\n    Up = 0,\n    Down = 1,\n    None = 2,\n    Double = 3\n}\n","// created from 'create-ts-index'\n\nexport * from \"./Arpeggio\";\nexport * from \"./Beam\";\nexport * from \"./ChordSymbolContainer\";\nexport * from \"./LinkedVoice\";\nexport * from \"./Note\";\nexport * from \"./Notehead\";\nexport * from \"./NoteType\";\nexport * from \"./OrnamentContainer\";\nexport * from \"./SourceMeasure\";\nexport * from \"./SourceStaffEntry\";\nexport * from \"./Staff\";\nexport * from \"./StaffEntryLink\";\nexport * from \"./Tie\";\nexport * from \"./Tuplet\";\nexport * from \"./VerticalSourceStaffEntryContainer\";\nexport * from \"./Voice\";\nexport * from \"./VoiceEntry\";\nexport * from \"./Instructions\";\nexport * from \"./Note\";\nexport * from \"./NoteType\";\nexport * from \"./SourceMeasure\";\nexport * from \"./SourceStaffEntry\";\nexport * from \"./VerticalSourceStaffEntryContainer\";\nexport * from \"./Tie\";\n","// created from 'create-ts-index'\n\nexport * from \"./Exceptions\";\nexport * from \"./Instrument\";\nexport * from \"./InstrumentalGroup\";\nexport * from \"./Label\";\nexport * from \"./MusicSheet\";\nexport * from \"./SubInstrument\";\nexport * from \"./VoiceData\";\nexport * from \"./MusicSource\";\nexport * from \"./MusicParts\";\nexport * from \"./ScoreIO\";\nexport * from \"./Graphical\";\nexport * from \"./Interfaces\";\n","/**\n * Class with helper methods to handle asynchronous JavaScript requests\n */\nexport class AJAX {\n    /**\n     * Retrieve the content of the file at url\n     * @param url\n     * @returns {any}\n     */\n    public static ajax(url: string, timeout: number = 9000): Promise<string> {\n        let xhttp: XMLHttpRequest;\n        const mimeType: string = url.indexOf(\".mxl\") > -1 ? \"text/plain; charset=x-user-defined\" : \"application/xml\";\n        if (XMLHttpRequest) {\n            xhttp = new XMLHttpRequest();\n        } else if (ActiveXObject) {\n            // for IE<7\n            xhttp = new ActiveXObject(\"Microsoft.XMLHTTP\");\n        } else {\n            return Promise.reject(new Error(\"XMLHttp not supported.\"));\n        }\n        xhttp.timeout = timeout;\n        return new Promise((resolve: (value: string) => void, reject: (error: any) => void) => {\n            xhttp.onreadystatechange = (): void => {\n                if (xhttp.readyState === XMLHttpRequest.DONE) {\n                    if (xhttp.status === 200) {\n                        resolve(xhttp.responseText);\n                    } else if (xhttp.status === 0 && xhttp.responseText) {\n                        resolve(xhttp.responseText);\n                    } else {\n                        //reject(new Error(\"AJAX error: '\" + xhttp.statusText + \"'\"));\n                        reject(new Error(\"Could not retrieve requested URL \" + xhttp.status));\n                    }\n                }\n            };\n            xhttp.ontimeout = (e): void => {\n                // For IE and node\n                reject(new Error(\"Server request Timeout\"));\n            };\n            xhttp.overrideMimeType(mimeType);\n            xhttp.open(\"GET\", url, true);\n            xhttp.send();\n        });\n    }\n}\n","import {MusicPartManagerIterator} from \"../MusicalScore/MusicParts/MusicPartManagerIterator\";\nimport {MusicPartManager} from \"../MusicalScore/MusicParts/MusicPartManager\";\nimport {VoiceEntry} from \"../MusicalScore/VoiceData/VoiceEntry\";\nimport {VexFlowStaffEntry} from \"../MusicalScore/Graphical/VexFlow/VexFlowStaffEntry\";\nimport {MusicSystem} from \"../MusicalScore/Graphical/MusicSystem\";\nimport {OpenSheetMusicDisplay} from \"./OpenSheetMusicDisplay\";\nimport {GraphicalMusicSheet} from \"../MusicalScore/Graphical/GraphicalMusicSheet\";\nimport {Instrument} from \"../MusicalScore/Instrument\";\nimport {Note} from \"../MusicalScore/VoiceData/Note\";\nimport {Fraction} from \"../Common/DataObjects/Fraction\";\nimport { EngravingRules } from \"../MusicalScore/Graphical/EngravingRules\";\nimport { SourceMeasure } from \"../MusicalScore/VoiceData/SourceMeasure\";\nimport { StaffLine } from \"../MusicalScore/Graphical/StaffLine\";\nimport { GraphicalMeasure } from \"../MusicalScore/Graphical/GraphicalMeasure\";\nimport { VexFlowMeasure } from \"../MusicalScore/Graphical/VexFlow/VexFlowMeasure\";\nimport { CursorOptions } from \"./OSMDOptions\";\nimport { BoundingBox } from \"../MusicalScore/Graphical/BoundingBox\";\nimport { GraphicalNote } from \"../MusicalScore/Graphical/GraphicalNote\";\n\n/**\n * A cursor which can iterate through the music sheet.\n */\nexport class Cursor {\n  constructor(container: HTMLElement, openSheetMusicDisplay: OpenSheetMusicDisplay, cursorOptions: CursorOptions) {\n    this.container = container;\n    this.openSheetMusicDisplay = openSheetMusicDisplay;\n    this.rules = this.openSheetMusicDisplay.EngravingRules;\n    this.cursorOptions = cursorOptions;\n\n    // set cursor id\n    // TODO add this for the OSMD object as well and refactor this into a util method?\n    let id: number = 0;\n    this.cursorElementId = \"cursorImg-0\";\n    // find unique cursor id in document\n    while (document.getElementById(this.cursorElementId)) {\n      id++;\n      this.cursorElementId = `cursorImg-${id}`;\n    }\n\n    const curs: HTMLElement = document.createElement(\"img\");\n    curs.id = this.cursorElementId;\n    curs.style.position = \"absolute\";\n    if (this.cursorOptions.follow === true) {\n      this.wantedZIndex = \"-1\";\n      curs.style.zIndex = this.wantedZIndex;\n    } else {\n      this.wantedZIndex = \"-2\";\n      curs.style.zIndex = this.wantedZIndex;\n    }\n    this.cursorElement = <HTMLImageElement>curs;\n    this.container.appendChild(curs);\n  }\n\n  public adjustToBackgroundColor(): void {\n    let zIndex: string;\n    if (!this.rules.PageBackgroundColor) {\n          zIndex = this.wantedZIndex;\n    } else {\n      zIndex = \"1\";\n    }\n    this.cursorElement.style.zIndex = zIndex;\n  }\n\n  private container: HTMLElement;\n  public cursorElement: HTMLImageElement;\n  /** a unique id of the cursor's HTMLElement in the document.\n   * Should be constant between re-renders and backend changes,\n   * but different between different OSMD objects on the same page.\n   */\n  public cursorElementId: string;\n  /** The desired zIndex (layer) of the cursor when no background color is set.\n   *  When a background color is set, using a negative zIndex would make the cursor invisible.\n   */\n  public wantedZIndex: string;\n  private openSheetMusicDisplay: OpenSheetMusicDisplay;\n  private rules: EngravingRules;\n  private manager: MusicPartManager;\n  public iterator: MusicPartManagerIterator;\n  private graphic: GraphicalMusicSheet;\n  public hidden: boolean = true;\n  public currentPageNumber: number = 1;\n  private cursorOptions: CursorOptions;\n\n  /** Initialize the cursor. Necessary before using functions like show() and next(). */\n  public init(manager: MusicPartManager, graphic: GraphicalMusicSheet): void {\n    this.manager = manager;\n    this.graphic = graphic;\n    this.reset();\n    this.hidden = true;\n    this.hide();\n  }\n\n  /**\n   * Make the cursor visible\n   */\n  public show(): void {\n    this.hidden = false;\n    //this.resetIterator(); // TODO maybe not here? though setting measure range to draw, rerendering, then handling cursor show is difficult\n    this.update();\n    this.adjustToBackgroundColor();\n  }\n\n  public resetIterator(): void {\n    if (!this.openSheetMusicDisplay.Sheet || !this.openSheetMusicDisplay.Sheet.SourceMeasures) { // just a safety measure\n      console.log(\"OSMD.Cursor.resetIterator(): sheet or measures were null/undefined.\");\n      return;\n    }\n\n    // set selection start, so that when there's MinMeasureToDraw set, the cursor starts there right away instead of at measure 1\n    const lastSheetMeasureIndex: number = this.openSheetMusicDisplay.Sheet.SourceMeasures.length - 1; // last measure in data model\n    let startMeasureIndex: number = this.rules.MinMeasureToDrawIndex;\n    startMeasureIndex = Math.min(startMeasureIndex, lastSheetMeasureIndex);\n    let endMeasureIndex: number = this.rules.MaxMeasureToDrawIndex;\n    endMeasureIndex = Math.min(endMeasureIndex, lastSheetMeasureIndex);\n\n    if (this.openSheetMusicDisplay.Sheet && this.openSheetMusicDisplay.Sheet.SourceMeasures.length > startMeasureIndex) {\n      this.openSheetMusicDisplay.Sheet.SelectionStart = this.openSheetMusicDisplay.Sheet.SourceMeasures[startMeasureIndex].AbsoluteTimestamp;\n    }\n    if (this.openSheetMusicDisplay.Sheet && this.openSheetMusicDisplay.Sheet.SourceMeasures.length > endMeasureIndex) {\n      const lastMeasure: SourceMeasure = this.openSheetMusicDisplay.Sheet.SourceMeasures[endMeasureIndex];\n      this.openSheetMusicDisplay.Sheet.SelectionEnd = Fraction.plus(lastMeasure.AbsoluteTimestamp, lastMeasure.Duration);\n    }\n\n    this.iterator = this.manager.getIterator();\n  }\n\n  private getStaffEntryFromVoiceEntry(voiceEntry: VoiceEntry): VexFlowStaffEntry {\n    const measureIndex: number = voiceEntry.ParentSourceStaffEntry.VerticalContainerParent.ParentMeasure.measureListIndex;\n    const staffIndex: number = voiceEntry.ParentSourceStaffEntry.ParentStaff.idInMusicSheet;\n    return <VexFlowStaffEntry>this.graphic.findGraphicalStaffEntryFromMeasureList(staffIndex, measureIndex, voiceEntry.ParentSourceStaffEntry);\n  }\n\n  public update(): void {\n    if (this.hidden || this.hidden === undefined || this.hidden === null) {\n      return;\n    }\n    this.updateCurrentPage(); // attach cursor to new page DOM if necessary\n\n    // this.graphic?.Cursors?.length = 0;\n    const iterator: MusicPartManagerIterator = this.iterator;\n    // TODO when measure draw range (drawUpToMeasureNumber) was changed, next/update can fail to move cursor. but of course it can be reset before.\n\n    const voiceEntries: VoiceEntry[] = iterator.CurrentVisibleVoiceEntries();\n    if (iterator.EndReached || !iterator.CurrentVoiceEntries || voiceEntries.length === 0) {\n      return;\n    }\n    let x: number = 0, y: number = 0, height: number = 0;\n    let musicSystem: MusicSystem;\n    if (iterator.CurrentMeasure.isReducedToMultiRest) {\n      const multiRestGMeasure: GraphicalMeasure = this.graphic.findGraphicalMeasure(iterator.CurrentMeasureIndex, 0);\n      const totalRestMeasures: number = multiRestGMeasure.parentSourceMeasure.multipleRestMeasures;\n      const currentRestMeasureNumber: number = iterator.CurrentMeasure.multipleRestMeasureNumber;\n      const progressRatio: number = currentRestMeasureNumber / (totalRestMeasures + 1);\n      const effectiveWidth: number = multiRestGMeasure.PositionAndShape.Size.width - (multiRestGMeasure as VexFlowMeasure).beginInstructionsWidth;\n      x = multiRestGMeasure.PositionAndShape.AbsolutePosition.x + (multiRestGMeasure as VexFlowMeasure).beginInstructionsWidth + progressRatio * effectiveWidth;\n\n      musicSystem = multiRestGMeasure.ParentMusicSystem;\n    } else {\n          // get all staff entries inside the current voice entry\n          const gseArr: VexFlowStaffEntry[] = voiceEntries.map(ve => this.getStaffEntryFromVoiceEntry(ve));\n          // sort them by x position and take the leftmost entry\n          const gse: VexFlowStaffEntry =\n                gseArr.sort((a, b) => a?.PositionAndShape?.AbsolutePosition?.x <= b?.PositionAndShape?.AbsolutePosition?.x ? -1 : 1 )[0];\n          x = gse.PositionAndShape.AbsolutePosition.x;\n          musicSystem = gse.parentMeasure.ParentMusicSystem;\n\n          // debug: change color of notes under cursor (needs re-render)\n          // for (const gve of gse.graphicalVoiceEntries) {\n          //   for (const note of gve.notes) {\n          //     note.sourceNote.NoteheadColor = \"#0000FF\";\n          //   }\n          // }\n    }\n    if (!musicSystem) {\n      return;\n    }\n\n    // y is common for both multirest and non-multirest, given the MusicSystem\n    y = musicSystem.PositionAndShape.AbsolutePosition.y + musicSystem.StaffLines[0]?.PositionAndShape.RelativePosition.y ?? 0;\n    let endY: number = musicSystem.PositionAndShape.AbsolutePosition.y;\n    const bottomStaffline: StaffLine = musicSystem.StaffLines[musicSystem.StaffLines.length - 1];\n    if (bottomStaffline) { // can be undefined if drawFromMeasureNumber changed after cursor was shown\n      endY += bottomStaffline.PositionAndShape.RelativePosition.y + bottomStaffline.StaffHeight;\n    }\n    height = endY - y;\n\n    // Update the graphical cursor\n    const measurePositionAndShape: BoundingBox = this.graphic.findGraphicalMeasure(iterator.CurrentMeasureIndex, 0).PositionAndShape;\n    this.updateWidthAndStyle(measurePositionAndShape, x, y, height);\n\n    if (this.openSheetMusicDisplay.FollowCursor && this.cursorOptions.follow) {\n      if (!this.openSheetMusicDisplay.EngravingRules.RenderSingleHorizontalStaffline) {\n        const diff: number = this.cursorElement.getBoundingClientRect().top;\n        this.cursorElement.scrollIntoView({behavior: diff < 1000 ? \"smooth\" : \"auto\", block: \"center\"});\n      } else {\n        this.cursorElement.scrollIntoView({behavior: \"smooth\", inline: \"center\"});\n      }\n    }\n    // Show cursor\n    // // Old cursor: this.graphic.Cursors.push(cursor);\n    this.cursorElement.style.display = \"\";\n  }\n\n  public updateWidthAndStyle(measurePositionAndShape: BoundingBox, x: number, y: number, height: number): void {\n    const cursorElement: HTMLImageElement = this.cursorElement;\n    let newWidth: number = 0;\n    switch (this.cursorOptions.type) {\n      case 1:\n        cursorElement.style.top = (y * 10.0 * this.openSheetMusicDisplay.zoom) + \"px\";\n        cursorElement.style.left = ((x - 1.5) * 10.0 * this.openSheetMusicDisplay.zoom) + \"px\";\n        cursorElement.height = (height * 10.0 * this.openSheetMusicDisplay.zoom);\n        newWidth = 5 * this.openSheetMusicDisplay.zoom;\n        break;\n      case 2:\n        cursorElement.style.top = ((y-2.5) * 10.0 * this.openSheetMusicDisplay.zoom) + \"px\";\n        cursorElement.style.left = (x * 10.0 * this.openSheetMusicDisplay.zoom) + \"px\";\n        cursorElement.height = (1.5 * 10.0 * this.openSheetMusicDisplay.zoom);\n        newWidth = 5 * this.openSheetMusicDisplay.zoom;\n        break;\n      case 3:\n        cursorElement.style.top = measurePositionAndShape.AbsolutePosition.y * 10.0 * this.openSheetMusicDisplay.zoom +\"px\";\n        cursorElement.style.left = measurePositionAndShape.AbsolutePosition.x * 10.0 * this.openSheetMusicDisplay.zoom +\"px\";\n        cursorElement.height = (height * 10.0 * this.openSheetMusicDisplay.zoom);\n        newWidth = measurePositionAndShape.Size.width * 10 * this.openSheetMusicDisplay.zoom;\n        break;\n      case 4:\n        cursorElement.style.top = measurePositionAndShape.AbsolutePosition.y * 10.0 * this.openSheetMusicDisplay.zoom +\"px\";\n        cursorElement.style.left = measurePositionAndShape.AbsolutePosition.x * 10.0 * this.openSheetMusicDisplay.zoom +\"px\";\n        cursorElement.height = (height * 10.0 * this.openSheetMusicDisplay.zoom);\n        newWidth = (x-measurePositionAndShape.AbsolutePosition.x) * 10 * this.openSheetMusicDisplay.zoom;\n        break;\n        default:\n        cursorElement.style.top = (y * 10.0 * this.openSheetMusicDisplay.zoom) + \"px\";\n        cursorElement.style.left = ((x - 1.5) * 10.0 * this.openSheetMusicDisplay.zoom) + \"px\";\n        cursorElement.height = (height * 10.0 * this.openSheetMusicDisplay.zoom);\n        newWidth = 3 * 10.0 * this.openSheetMusicDisplay.zoom;\n        break;\n    }\n\n    if (newWidth !== cursorElement.width) {\n      cursorElement.width = newWidth;\n      this.updateStyle(newWidth, this.cursorOptions);\n    }\n  }\n\n  /**\n   * Hide the cursor\n   */\n  public hide(): void {\n    // Hide the actual cursor element\n    this.cursorElement.style.display = \"none\";\n    //this.graphic.Cursors.length = 0;\n    // Forcing the sheet to re-render is not necessary anymore\n    //if (!this.hidden) {\n    //    this.openSheetMusicDisplay.render();\n    //}\n    this.hidden = true;\n  }\n\n  /**\n   * Go to next entry\n   */\n  public next(): void {\n    this.iterator.moveToNextVisibleVoiceEntry(false); // moveToNext() would not skip notes in hidden (visible = false) parts\n    this.update();\n  }\n\n  /**\n   * reset cursor to start\n   */\n  public reset(): void {\n    this.resetIterator();\n    //this.iterator.moveToNext();\n    this.update();\n  }\n\n  private updateStyle(width: number, cursorOptions: CursorOptions = undefined): void {\n    if (cursorOptions !== undefined) {\n      this.cursorOptions = cursorOptions;\n    }\n    // Create a dummy canvas to generate the gradient for the cursor\n    // FIXME This approach needs to be improved\n    const c: HTMLCanvasElement = document.createElement(\"canvas\");\n    c.width = this.cursorElement.width;\n    c.height = 1;\n    const ctx: CanvasRenderingContext2D = c.getContext(\"2d\");\n    ctx.globalAlpha = this.cursorOptions.alpha;\n    // Generate the gradient\n    const gradient: CanvasGradient = ctx.createLinearGradient(0, 0, this.cursorElement.width, 0);\n    switch (this.cursorOptions.type) {\n      case 1:\n      case 2:\n      case 3:\n      case 4:\n        gradient.addColorStop(1, this.cursorOptions.color);\n        break;\n      default:\n        gradient.addColorStop(0, \"white\"); // it was: \"transparent\"\n        gradient.addColorStop(0.2, this.cursorOptions.color);\n        gradient.addColorStop(0.8, this.cursorOptions.color);\n        gradient.addColorStop(1, \"white\"); // it was: \"transparent\"\n      break;\n    }\n    ctx.fillStyle = gradient;\n    ctx.fillRect(0, 0, width, 1);\n    // Set the actual image\n    this.cursorElement.src = c.toDataURL(\"image/png\");\n  }\n\n  public get Iterator(): MusicPartManagerIterator {\n    return this.iterator;\n  }\n\n  public get Hidden(): boolean {\n    return this.hidden;\n  }\n\n  /** returns voices under the current Cursor position. Without instrument argument, all voices are returned. */\n  public VoicesUnderCursor(instrument?: Instrument): VoiceEntry[] {\n    return this.iterator.CurrentVisibleVoiceEntries(instrument);\n  }\n\n  public NotesUnderCursor(instrument?: Instrument): Note[] {\n    const voiceEntries: VoiceEntry[]  = this.VoicesUnderCursor(instrument);\n    const notes: Note[] = [];\n    voiceEntries.forEach(voiceEntry => {\n      notes.push.apply(notes, voiceEntry.Notes);\n    });\n    return notes;\n  }\n\n  public GNotesUnderCursor(instrument?: Instrument): GraphicalNote[] {\n    const voiceEntries: VoiceEntry[]  = this.VoicesUnderCursor(instrument);\n    const notes: GraphicalNote[] = [];\n    voiceEntries.forEach(voiceEntry => {\n      notes.push(...voiceEntry.Notes.map(note => this.rules.GNote(note)));\n    });\n    return notes;\n  }\n\n  /** Check if there was a change in current page, and attach cursor element to the corresponding HTMLElement (div).\n   *  This is only necessary if using PageFormat (multiple pages).\n   */\n  public updateCurrentPage(): number {\n    const timestamp: Fraction = this.iterator.currentTimeStamp;\n    for (const page of this.graphic.MusicPages) {\n      const lastSystemTimestamp: Fraction = page.MusicSystems.last().GetSystemsLastTimeStamp();\n      if (lastSystemTimestamp.gt(timestamp)) {\n        // gt: the last timestamp of the last system is equal to the first of the next page,\n        //   so we do need to use gt, not gte here.\n        const newPageNumber: number = page.PageNumber;\n        if (newPageNumber !== this.currentPageNumber) {\n          this.container.removeChild(this.cursorElement);\n          this.container = document.getElementById(\"osmdCanvasPage\" + newPageNumber);\n          this.container.appendChild(this.cursorElement);\n          // TODO maybe store this.pageCurrentlyAttachedTo, though right now it isn't necessary\n          // alternative to remove/append:\n          // this.openSheetMusicDisplay.enableOrDisableCursor(true);\n        }\n        return this.currentPageNumber = newPageNumber;\n      }\n    }\n    return 1;\n  }\n}\n","import { DrawingParametersEnum, ColoringModes } from \"../MusicalScore/Graphical/DrawingParameters\";\nimport { FontStyles } from \"../Common/Enums/FontStyles\";\n\nexport enum CursorType {\n    Standard = 0,\n    ThinLeft = 1,\n    ShortThinTopLeft = 2,\n    CurrentArea = 3,\n    CurrentAreaLeft = 4,\n}\n\n/** Possible options for the OpenSheetMusicDisplay constructor and osmd.setOptions(). None are mandatory.\n *  Note that after using setOptions(), you have to call osmd.render() again to make changes visible.\n *  Example: osmd.setOptions({defaultColorRest: \"#AAAAAA\", drawSubtitle: false}); osmd.render();\n *\n *  Note that some additional, usually more small scale options are available in EngravingRules,\n *  though not all of them are meant to be manipulated.\n *  The OSMDOptions are the main options we support.\n */\nexport interface IOSMDOptions {\n    /** Whether to let Vexflow align rests to preceding or following notes (Vexflow option). Default false (0).\n     * This can naturally reduce collisions of rest notes with other notes.\n     * Auto mode (2) only aligns rests when there are multiple voices in a measure,\n     * and at least once at the same x-coordinate.\n     * Auto is the recommended setting, and would be default,\n     * if it couldn't in rare cases deteriorate rest placement for existing users.\n     * The on mode (1) always aligns rests,\n     * also changing their position when there is no simultaneous note at the same x-coordinate,\n     * which is nonstandard.\n     */\n    alignRests?: AlignRestOption | number;\n    /** Whether to automatically create beams for notes that don't have beams set in XML. */\n    autoBeam?: boolean;\n    /** Options for autoBeaming like whether to beam over rests. See AutoBeamOptions interface. */\n    autoBeamOptions?: AutoBeamOptions;\n    /** Automatically resize score with canvas size. Default is true. */\n    autoResize?: boolean;\n    /** Render Backend, will be SVG if given undefined, \"SVG\" or \"svg\", otherwise Canvas. */\n    backend?: string;\n    /** Defines the mode that is used for coloring: XML (0), Boomwhacker(1), CustomColorSet (2). Default XML.\n     *  If coloringMode.CustomColorSet (2) is chosen, a coloringSetCustom parameter must be added.\n     */\n    coloringMode?: ColoringModes;\n    /** Set of 8 colors for automatic coloring of 7 notes from C to B + rest note in HTML form (e.g. \"#00ff00\" for green).  */\n    coloringSetCustom?: string[];\n    /** Whether to enable coloring noteheads and stems, depending on coloringMode. */\n    coloringEnabled?: boolean;\n    /** Whether to color the stems of notes the same as their noteheads. Default false. */\n    colorStemsLikeNoteheads?: boolean;\n    /** Dark mode (black background, white notes). Simply sets defaultColorMusic and EngravingRules.PageBackgroundColor. */\n    darkMode?: boolean;\n    /** Default color for all musical elements including key signature etc. Can be used for dark mode etc. Default undefined. */\n    defaultColorMusic?: string;\n    /** Default color for a note head (without stem). Default black (undefined).\n     * Only considered before loading a sample, not before render.\n     * To change the color after loading a sample and before render, use note(.sourceNote).NoteheadColor.\n     * The format is Vexflow format, either \"#rrggbb\" or \"#rrggbboo\" where <oo> is opacity (00 = transparent). All hex values.\n     * E.g., a half-transparent red would be \"#FF000080\", invisible/transparent would be \"#00000000\" or \"#12345600\".\n     */\n    defaultColorNotehead?: string;\n    /** Default color for a note stem. Default black (undefined). */\n    defaultColorStem?: string;\n    /** Default color for rests. Default black (undefined). */\n    defaultColorRest?: string;\n    /** Default color for Labels like title or lyrics. Default black (undefined). */\n    defaultColorLabel?: string;\n    /** Default color for labels in the title. Overrides defaultColorLabel for title labels like composer. Default black (undefined). */\n    defaultColorTitle?: string;\n    /** Default font used for text and labels, e.g. title or lyrics. Default Times New Roman\n     * Note that OSMD originally always used Times New Roman,\n     * so things like layout and spacing may still be optimized for it.\n     * Valid options are CSS font families available in the browser used for rendering,\n     * e.g. Times New Roman, Helvetica.\n     */\n    defaultFontFamily?: string;\n    /** Default font style, e.g. FontStyles.Bold (1). Default Regular (0). */\n    defaultFontStyle?: FontStyles;\n    /** Don't show/load cursor. Will override disableCursor in drawingParameters. */\n    disableCursor?: boolean;\n    /** Follow Cursor: Scroll the page when cursor.next() is called and the cursor moves into a new system outside of the current view frame. */\n    followCursor?: boolean;\n    /** Broad Parameters like compact or preview mode.\n     * Also try \"compacttight\", which is like compact but also reduces margins.\n     * To see what this mode does and maybe adjust the spacing parameters yourself instead of using the mode,\n     * see DrawingParameters.ts:setForCompactTightMode().\n     */\n    drawingParameters?: string | DrawingParametersEnum;\n    /** Whether to draw credits (title, subtitle, composer, lyricist) (in future: copyright etc., see <credit>). */\n    drawCredits?: boolean;\n    /** Whether to draw the title of the piece. If false, disables drawing Subtitle as well. */\n    drawTitle?: boolean;\n    /** Whether to draw the subtitle of the piece. If true, enables drawing Title as well. */\n    drawSubtitle?: boolean;\n    /** Whether to draw the composer name (top right of the score). */\n    drawComposer?: boolean;\n    /** Whether to draw the lyricist's name, if given (top left of the score). */\n    drawLyricist?: boolean;\n    /** Whether to draw metronome marks. Default true. (currently OSMD can only draw one at the beginning) */\n    drawMetronomeMarks?: boolean;\n    /** Whether to draw part (instrument) names. Setting this to false also disables drawPartAbbreviations,\n     *  unless explicitly enabled (drawPartNames: false, drawPartAbbreviations: true).\n     */\n    drawPartNames?: boolean;\n    /** Whether to draw part (instrument) name abbreviations each system after the first. Only draws if drawPartNames. Default true. */\n    drawPartAbbreviations?: boolean;\n    /** Whether to draw measure numbers (labels). Default true.\n     * Draws a measure number label at first measure, system start measure,\n     * and every [measureNumberInterval] measures.\n     * See the [measureNumberInterval] option, default is 2.\n     */\n    drawMeasureNumbers?: boolean;\n    /** Whether to only draw measure numbers at the start of a system (\"new line\"), instead of every [measureNumberInterval] measures. Default false. */\n    drawMeasureNumbersOnlyAtSystemStart?: boolean;\n    /** Whether to draw time signatures (e.g. 4/4). Default true. */\n    drawTimeSignatures?: boolean;\n    /** The interval of measure numbers to draw, i.e. it draws the measure number above the beginning label every x measures. Default 2. */\n    measureNumberInterval?: number;\n    /** Whether to read measure numbers from the \"number\" attribute in the xml file as opposed to defaulting to start at measure 1. Default true. */\n    useXMLMeasureNumbers?: boolean;\n    /** Whether to draw fingerings (only left to the note for now). Default true (unless solo part). */\n    drawFingerings?: boolean;\n    /** Where to draw fingerings (above, below, aboveorbelow, left, right, or auto).\n     * Default AboveOrBelow. Auto experimental\n     */\n    fingeringPosition?: string;\n    /** For above/below fingerings, whether to draw them directly above/below notes (default), or above/below staffline. */\n    fingeringInsideStafflines?: boolean;\n    /** Whether to draw hidden/invisible notes (print-object=\"no\" in XML). Default false. Not yet supported. */ // TODO\n    drawHiddenNotes?: boolean;\n    /** Whether to draw lyrics (and their extensions and dashes). */\n    drawLyrics?: boolean;\n    /** Whether to calculate extra slurs with bezier curves not covered by Vexflow slurs. Default true. */\n    drawSlurs?: boolean;\n    /** Only draw measure n to m, where m is the number specified. (for n, see drawFromMeasureNumber) */\n    drawUpToMeasureNumber?: number;\n    /** Only draw the first n systems, where n is the number specified. */\n    drawUpToSystemNumber?: number;\n    /** Only draw the first n pages, where n is the number specified. */\n    drawUpToPageNumber?: number;\n    /** Only draw measure n to m, where n is the number you specify. (for m, see drawUpToMeasureNumber) */\n    drawFromMeasureNumber?: number;\n    /** Whether to fill measures that don't have notes given in the XML with whole rests (visible = 1, invisible = 2, for layouting). Default No (0). */\n    fillEmptyMeasuresWithWholeRest?: FillEmptyMeasuresWithWholeRests | number;\n    /** Whether to set the wanted stem direction by xml (default) or automatically. */\n    setWantedStemDirectionByXml?: boolean;\n    /** Whether tuplets are labeled with ratio (e.g. 5:2 instead of 5 for quintuplets). Default false. */\n    tupletsRatioed?: boolean;\n    /** Whether all tuplets should be bracketed (e.g. |--5--| instead of 5). Default false.\n     * If false, only tuplets given as bracketed in XML (bracket=\"yes\") will be bracketed.\n     */\n    tupletsBracketed?: boolean;\n    /** Whether all triplets should be bracketed. Overrides tupletsBracketed for triplets.\n     * If false, only triplets given as bracketed in XML (bracket=\"yes\") will be bracketed.\n     * (Bracketing all triplets can be cluttering)\n     */\n    tripletsBracketed?: boolean;\n    /** See OpenSheetMusicDisplay.PageFormatStandards for standard options like \"A4 P\" or \"Endless\".\n     *  Default Endless.\n     *  Uses OpenSheetMusicDisplay.StringToPageFormat().\n     *  Unfortunately it would be error-prone to set a PageFormat type directly.\n     */\n    pageFormat?: string;\n    /** A custom page/canvas background color. Default undefined/transparent.\n     *  Example: \"#FFFFFF\" = white. \"#12345600\" = transparent.\n     *  This can be useful when you want to export an image with e.g. white background color\n     * instead of transparent, from a CanvasBackend.\n     *  Note: Using a background color will prevent the cursor from being visible for now\n     * (will be fixed at some point).\n     */\n    pageBackgroundColor?: string;\n    /** This makes OSMD render on one single horizontal (staff-)line.\n     * This option should be set before loading a score. It only starts working after load(),\n     * calling setOptions() after load and then render() doesn't work in this case.\n     */\n    renderSingleHorizontalStaffline?: boolean;\n    /** Whether to begin a new system (\"line break\") when given in XML ('new-system=\"yes\"').\n     *  Default false, because OSMD does its own layout that will do line breaks interactively\n     *  at different measures. So this option may result in a system break after a single measure in a system.\n     */\n    newSystemFromXML?: boolean;\n    /** Whether to begin a new page (\"page break\") when given in XML ('new-page=\"yes\"').\n     *  Default false, because OSMD does its own layout that will do page breaks interactively\n     * (when given a PageFormat) at different measures.\n     * So this option may result in a page break after a single measure on a page.\n     */\n    newPageFromXML?: boolean;\n    /** A custom function that is executed when the xml is read, modifies it, and returns a new xml string that OSMD then parses. */\n    onXMLRead?(xml: string): string;\n    /** The cutoff number for rendering percussion clef stafflines as a single line. Default is 4.\n     *  This is number of instruments specified, e.g. a drumset:\n     *     <score-part id=\"P1\">\n     *       <part-name>Drumset</part-name>\n     *       <part-abbreviation>D. Set</part-abbreviation>\n     *       <score-instrument id=\"P1-I36\">\n     *           <instrument-name>Acoustic Bass Drum</instrument-name>\n     *           </score-instrument>\n     *       <score-instrument id=\"P1-I37\">\n     *           <instrument-name>Bass Drum 1</instrument-name>\n     *           </score-instrument>\n     *       <score-instrument id=\"P1-I38\">\n     *           <instrument-name>Side Stick</instrument-name>\n     *           </score-instrument>\n     *       <score-instrument id=\"P1-I39\">\n     *           <instrument-name>Acoustic Snare</instrument-name>\n     *           </score-instrument>\n     *           ...\n     *   Would still render as 5 stafflines by default, since we have 4 (or greater) instruments in this part.\n     *   While a snare:\n     *   <score-part id=\"P2\">\n     *   <part-name>Concert Snare Drum</part-name>\n     *   <part-abbreviation>Con. Sn.</part-abbreviation>\n     *   <score-instrument id=\"P2-I38\">\n     *       <instrument-name>Side Stick</instrument-name>\n     *       </score-instrument>\n     *   <score-instrument id=\"P2-I39\">\n     *       <instrument-name>Acoustic Snare</instrument-name>\n     *       </score-instrument>\n     *       ...\n     *   Would render with 1 line on the staff, since we only have 2 voices.\n     *   If this value is 0, the feature is turned off.\n     *   If this value is -1, it will render all percussion clefs as a single line.\n     */\n    percussionOneLineCutoff?: number;\n    /** This property is only active if the above property is active (percussionOneLineCutoff)\n     *  This is the cutoff for forcing all voices to the single line, instead of rendering them at different\n     *  positions above/below the line.\n     *  The default is 3, so if a part has less than voices, all of them will be rendered on the line.\n     *  This is for cases like a Concert snare, which has multiple 'instruments' available (snare, side stick)\n     *  should still render only on the line since there is no ambiguity.\n     *  If this value is 0, the feature is turned off.\n     *  IF this value is -1, it will render all percussion clef voices on the single line.\n     */\n    percussionForceVoicesOneLineCutoff?: number;\n    /** The softmaxFactor for Vexflow's formatter. Default is 5, default in Vexflow is 100 (voice.js).\n     *  Lowering this factor makes the spacing between individual notes smaller (especially from one half note to the next).\n     *  So, to get more compact scores, try lowering this value (or set osmd.zoom, which simply scales),\n     *  or try 100 for a more expansive layout.\n     *  Setting this is the same as setting osmd.EngravingRules.SoftmaxFactorVexFlow.\n     */\n    spacingFactorSoftmax?: number;\n    /**\n     * Number in pixels, of spacing between multi-line labels\n     */\n    spacingBetweenTextLines?: number;\n    /**\n     * Set to true if the last system line should be streched across the whole page just as the other systems. Default is false\n     */\n    stretchLastSystemLine?: boolean;\n    /**\n     * Set to true if subsequent measures full of rests should be auto-converted to multi-rest measure. Default is true\n     * This works across instruments- If all instruments have subsequent measures with nothing but rests, multirest measures are generated\n     */\n    autoGenerateMutipleRestMeasuresFromRestMeasures?: boolean;\n    /**\n     * Defines multiple simultaneous cursors. If left undefined the standard cursor will be used.\n     */\n    cursorsOptions?: CursorOptions[];\n    /**\n     * Defines which skyline and bottom-line batch calculation algorithm to use.\n     */\n    preferredSkyBottomLineBatchCalculatorBackend?: SkyBottomLineBatchCalculatorBackendType;\n    /**\n     * Defines the minimum number of measures in the entire sheet music where the skyline and bottom-line batch calculation is enabled.\n     */\n    skyBottomLineBatchMinMeasures?: number;\n}\n\nexport enum AlignRestOption {\n    Never = 0, // false should also work\n    Always = 1, // true should also work\n    Auto = 2\n}\n\nexport enum FillEmptyMeasuresWithWholeRests {\n    No = 0,\n    YesVisible = 1,\n    YesInvisible = 2 // fill with invisible whole rests\n}\n\nexport enum BackendType {\n    SVG = 0,\n    Canvas = 1\n}\n\nexport enum SkyBottomLineBatchCalculatorBackendType {\n    Plain = 0,\n    WebGL = 1,\n}\n\n/** Handles [[IOSMDOptions]], e.g. returning default options with OSMDOptionsStandard() */\nexport class OSMDOptions {\n    /** Returns the default options for OSMD.\n     * These are e.g. used if no options are given in the [[OpenSheetMusicDisplay]] constructor.\n     */\n    public static OSMDOptionsStandard(): IOSMDOptions {\n        return {\n            autoResize: true,\n            backend: \"svg\",\n            drawingParameters: DrawingParametersEnum.default,\n        };\n    }\n\n    public static BackendTypeFromString(value: string): BackendType {\n        if (value && value.toLowerCase() === \"canvas\") {\n            return BackendType.Canvas;\n        } else {\n            return BackendType.SVG;\n        }\n    }\n}\n\nexport interface AutoBeamOptions {\n    /** Whether to extend beams over rests. Default false. */\n    beam_rests?: boolean;\n    /** Whether to extend beams only over rests that are in the middle of a potential beam. Default false. */\n    beam_middle_rests_only?: boolean;\n    /** Whether to maintain stem direction of autoBeamed notes. Discouraged, reduces beams. Default false. */\n    maintain_stem_directions?: boolean;\n    /** Groups of notes (fractions) to beam within a measure.\n     * List of fractions, each fraction being [nominator, denominator].\n     * E.g. [[3,4],[1,4]] will beam the first 3 quarters of a measure, then the last quarter.\n     */\n    groups?: [number[]];\n}\n\nexport interface CursorOptions {\n    /**\n     * Type of cursor:\n     * 0: Standard highlighting current notes\n     * 1: Thin line left to the current notes\n     * 2: Short thin line on top of stave and left to the current notes\n     * 3: Current measure\n     * 4: Current measure to left of current notes\n     */\n    type: CursorType;\n    /**\n     * Color to draw the cursor\n     */\n    color: string;\n    /**\n     * alpha value to be used with color (0.0 transparent, 0.5 medium, 1.0 opaque).\n     */\n    alpha: number;\n    /**\n     * If true, this cursor will be followed.\n     */\n    follow: boolean;\n}\n","import { IXmlElement } from \"./../Common/FileIO/Xml\";\nimport { VexFlowMusicSheetCalculator } from \"./../MusicalScore/Graphical/VexFlow/VexFlowMusicSheetCalculator\";\nimport { VexFlowBackend } from \"./../MusicalScore/Graphical/VexFlow/VexFlowBackend\";\nimport { MusicSheetReader } from \"./../MusicalScore/ScoreIO/MusicSheetReader\";\nimport { GraphicalMusicSheet } from \"./../MusicalScore/Graphical/GraphicalMusicSheet\";\nimport { MusicSheetCalculator } from \"./../MusicalScore/Graphical/MusicSheetCalculator\";\nimport { VexFlowMusicSheetDrawer } from \"./../MusicalScore/Graphical/VexFlow/VexFlowMusicSheetDrawer\";\nimport { SvgVexFlowBackend } from \"./../MusicalScore/Graphical/VexFlow/SvgVexFlowBackend\";\nimport { CanvasVexFlowBackend } from \"./../MusicalScore/Graphical/VexFlow/CanvasVexFlowBackend\";\nimport { MusicSheet } from \"./../MusicalScore/MusicSheet\";\nimport { Cursor } from \"./Cursor\";\nimport { MXLHelper } from \"../Common/FileIO/Mxl\";\nimport { AJAX } from \"./AJAX\";\nimport log from \"loglevel\";\nimport { DrawingParametersEnum, DrawingParameters, ColoringModes } from \"../MusicalScore/Graphical/DrawingParameters\";\nimport { IOSMDOptions, OSMDOptions, AutoBeamOptions, BackendType, CursorOptions } from \"./OSMDOptions\";\nimport { EngravingRules, PageFormat } from \"../MusicalScore/Graphical/EngravingRules\";\nimport { AbstractExpression } from \"../MusicalScore/VoiceData/Expressions/AbstractExpression\";\nimport { Dictionary } from \"typescript-collections\";\nimport { AutoColorSet } from \"../MusicalScore/Graphical/DrawingEnums\";\nimport { GraphicalMusicPage } from \"../MusicalScore/Graphical/GraphicalMusicPage\";\nimport { MusicPartManagerIterator } from \"../MusicalScore/MusicParts/MusicPartManagerIterator\";\nimport { ITransposeCalculator } from \"../MusicalScore/Interfaces/ITransposeCalculator\";\nimport { NoteEnum } from \"../Common/DataObjects/Pitch\";\n\n/**\n * The main class and control point of OpenSheetMusicDisplay.<br>\n * It can display MusicXML sheet music files in an HTML element container.<br>\n * After the constructor, use load() and render() to load and render a MusicXML file.\n */\nexport class OpenSheetMusicDisplay {\n    protected version: string = \"1.5.1-release\"; // getter: this.Version\n    // at release, bump version and change to -release, afterwards to -dev again\n\n    /**\n     * Creates and attaches an OpenSheetMusicDisplay object to an HTML element container.<br>\n     * After the constructor, use load() and render() to load and render a MusicXML file.\n     * @param container The container element OSMD will be rendered into.<br>\n     *                  Either a string specifying the ID of an HTML container element,<br>\n     *                  or a reference to the HTML element itself (e.g. div)\n     * @param options An object for rendering options like the backend (svg/canvas) or autoResize.<br>\n     *                For defaults see the OSMDOptionsStandard method in the [[OSMDOptions]] class.\n     */\n    constructor(container: string | HTMLElement,\n                options: IOSMDOptions = OSMDOptions.OSMDOptionsStandard()) {\n        // Store container element\n        if (typeof container === \"string\") {\n            // ID passed\n            this.container = document.getElementById(<string>container);\n        } else if (container && \"appendChild\" in <any>container) {\n            // Element passed\n            this.container = <HTMLElement>container;\n        }\n        if (!this.container) {\n            throw new Error(\"Please pass a valid div container to OpenSheetMusicDisplay\");\n        }\n\n        if (options.autoResize === undefined) {\n            options.autoResize = true;\n        }\n        this.backendType = BackendType.SVG; // default, can be changed by options\n        this.setOptions(options);\n    }\n\n    private cursorsOptions: CursorOptions[] = [];\n    public cursors: Cursor[] = [];\n    public get cursor(): Cursor { // lowercase for backwards compatibility since cursor -> cursors change\n        return this.cursors[0];\n    }\n    public zoom: number = 1.0;\n    protected zoomUpdated: boolean = false;\n    /** Timeout in milliseconds used in osmd.load(string) when string is a URL. */\n    public loadUrlTimeout: number = 5000;\n\n    protected container: HTMLElement;\n    protected backendType: BackendType;\n    protected needBackendUpdate: boolean;\n    protected sheet: MusicSheet;\n    protected drawer: VexFlowMusicSheetDrawer;\n    protected drawBoundingBox: string;\n    protected drawSkyLine: boolean;\n    protected drawBottomLine: boolean;\n    protected graphic: GraphicalMusicSheet;\n    protected drawingParameters: DrawingParameters;\n    protected rules: EngravingRules;\n    protected autoResizeEnabled: boolean;\n    protected resizeHandlerAttached: boolean;\n    protected followCursor: boolean;\n    protected OnXMLRead: Function;\n\n    /**\n     * Load a MusicXML file\n     * @param content is either the url of a file, or the root node of a MusicXML document, or the string content of a .xml/.mxl file\n     * @param tempTitle is used as the title for the piece if there is no title in the XML.\n     */\n    public load(content: string | Document, tempTitle: string = \"Untitled Score\"): Promise<{}> {\n        // Warning! This function is asynchronous! No error handling is done here.\n        this.reset();\n        //console.log(\"typeof content: \" + typeof content);\n        if (typeof content === \"string\") {\n            const str: string = <string>content;\n            const self: OpenSheetMusicDisplay = this;\n            // console.log(\"substring: \" + str.substr(0, 5));\n            if (str.substr(0, 4) === \"\\x50\\x4b\\x03\\x04\") {\n                log.debug(\"[OSMD] This is a zip file, unpack it first: \" + str);\n                // This is a zip file, unpack it first\n                return MXLHelper.MXLtoXMLstring(str).then(\n                    (x: string) => {\n                        return self.load(x);\n                    },\n                    (err: any) => {\n                        log.debug(err);\n                        throw new Error(\"OpenSheetMusicDisplay: Invalid MXL file\");\n                    }\n                );\n            }\n            // Javascript loads strings as utf-16, which is wonderful BS if you want to parse UTF-8 :S\n            if (str.substr(0, 3) === \"\\uf7ef\\uf7bb\\uf7bf\") {\n                log.debug(\"[OSMD] UTF with BOM detected, truncate first three bytes and pass along: \" + str);\n                // UTF with BOM detected, truncate first three bytes and pass along\n                return self.load(str.substr(3));\n            }\n            let trimmedStr: string = str;\n            if (/^\\s/.test(trimmedStr)) { // only trim if we need to. (end of string is irrelevant)\n                trimmedStr = trimmedStr.trim(); // trim away empty lines at beginning etc\n            }\n            if (trimmedStr.substr(0, 6).includes(\"<?xml\")) { // first character is sometimes null, making first five characters '<?xm'.\n                const modifiedXml: string = this.OnXMLRead(trimmedStr); // by default just returns trimmedStr unless a function options.OnXMLRead was set.\n                log.debug(\"[OSMD] Finally parsing XML content, length: \" + modifiedXml.length);\n                // Parse the string representing an xml file\n                const parser: DOMParser = new DOMParser();\n                content = parser.parseFromString(modifiedXml, \"application/xml\");\n            } else if (trimmedStr.length < 2083) { // TODO do proper URL format check\n                log.debug(\"[OSMD] Retrieve the file at the given URL: \" + trimmedStr);\n                // Assume now \"str\" is a URL\n                // Retrieve the file at the given URL\n                return AJAX.ajax(trimmedStr, this.loadUrlTimeout).then(\n                    (s: string) => { return self.load(s); },\n                    (exc: Error) => { throw exc; }\n                );\n            } else {\n                console.error(\"[OSMD] osmd.load(string): Could not process string. Did not find <?xml at beginning.\");\n            }\n        }\n\n        if (!content || !(<any>content).nodeName) {\n            return Promise.reject(new Error(\"OpenSheetMusicDisplay: The document which was provided is invalid\"));\n        }\n        const xmlDocument: Document = (<Document>content);\n        const xmlDocumentNodes: NodeList = xmlDocument.childNodes;\n        log.debug(\"[OSMD] load(), Document url: \" + xmlDocument.URL);\n\n        let scorePartwiseElement: Element;\n        for (let i: number = 0, length: number = xmlDocumentNodes.length; i < length; i += 1) {\n            const node: Node = xmlDocumentNodes[i];\n            if (node.nodeType === Node.ELEMENT_NODE && node.nodeName.toLowerCase() === \"score-partwise\") {\n                scorePartwiseElement = <Element>node;\n                break;\n            }\n        }\n        if (!scorePartwiseElement) {\n            console.error(\"Could not parse MusicXML, no valid partwise element found\");\n            return Promise.reject(new Error(\"OpenSheetMusicDisplay: Document is not a valid 'partwise' MusicXML\"));\n        }\n        const score: IXmlElement = new IXmlElement(scorePartwiseElement);\n        const reader: MusicSheetReader = new MusicSheetReader(undefined, this.rules);\n        this.sheet = reader.createMusicSheet(score, tempTitle);\n        if (this.sheet === undefined) {\n            // error loading sheet, probably already logged, do nothing\n            return Promise.reject(new Error(\"given music sheet was incomplete or could not be loaded.\"));\n        }\n        log.info(`[OSMD] Loaded sheet ${this.sheet.TitleString} successfully.`);\n\n        this.needBackendUpdate = true;\n        this.updateGraphic();\n\n        return Promise.resolve({});\n    }\n\n    /**\n     * (Re-)creates the graphic sheet from the music sheet\n     */\n    public updateGraphic(): void {\n        const calc: MusicSheetCalculator = new VexFlowMusicSheetCalculator(this.rules);\n        this.graphic = new GraphicalMusicSheet(this.sheet, calc);\n        if (this.drawingParameters.drawCursors) {\n            this.cursors.forEach(cursor => {\n                cursor.init(this.sheet.MusicPartManager, this.graphic);\n            });\n        }\n    }\n\n    /**\n     * Render the music sheet in the container\n     */\n    public render(): void {\n        if (!this.graphic) {\n            throw new Error(\"OpenSheetMusicDisplay: Before rendering a music sheet, please load a MusicXML file\");\n        }\n        this.drawer?.clear(); // clear canvas before setting width\n        // this.graphic.GetCalculator.clearSystemsAndMeasures(); // maybe?\n        // this.graphic.GetCalculator.clearRecreatedObjects();\n\n        // Set page width\n        let width: number = this.container.offsetWidth;\n        if (this.rules.RenderSingleHorizontalStaffline) {\n            width = this.rules.SheetMaximumWidth; // set safe maximum (browser limit), will be reduced later\n            // reduced later in MusicSheetCalculator.calculatePageLabels (sets sheet.pageWidth to page.PositionAndShape.Size.width before labels)\n            // rough calculation:\n            // width = 600 * this.sheet.SourceMeasures.length;\n        }\n        // log.debug(\"[OSMD] render width: \" + width);\n\n        this.sheet.pageWidth = width / this.zoom / 10.0;\n        if (this.rules.PageFormat && !this.rules.PageFormat.IsUndefined) {\n            this.rules.PageHeight = this.sheet.pageWidth / this.rules.PageFormat.aspectRatio;\n            log.debug(\"[OSMD] PageHeight: \" + this.rules.PageHeight);\n        } else {\n            log.debug(\"[OSMD] endless/undefined pageformat, id: \" + this.rules.PageFormat.idString);\n            this.rules.PageHeight = 100001; // infinite page height // TODO maybe Number.MAX_VALUE or Math.pow(10, 20)?\n        }\n\n        // Before introducing the following optimization (maybe irrelevant), tests\n        // have to be modified to ensure that width is > 0 when executed\n        //if (isNaN(width) || width === 0) {\n        //    return;\n        //}\n\n        // Calculate again\n        this.graphic.reCalculate();\n\n        if (this.drawingParameters.drawCursors) {\n            this.graphic.Cursors.length = 0;\n        }\n\n        // needBackendUpdate is well intentioned, but we need to cover all cases.\n        //   backends also need an update when this.zoom was set from outside, which unfortunately doesn't have a setter method to set this in.\n        //   so just for compatibility, we need to assume users set osmd.zoom, so we'd need to check whether it was changed compared to last time.\n        if (true || this.needBackendUpdate) {\n            this.createOrRefreshRenderBackend();\n            this.needBackendUpdate = false;\n        }\n\n        this.drawer.setZoom(this.zoom);\n        // Finally, draw\n        this.drawer.drawSheet(this.graphic);\n\n        this.enableOrDisableCursors(this.drawingParameters.drawCursors);\n\n        if (this.drawingParameters.drawCursors) {\n            // Update the cursor position\n            this.cursors.forEach(cursor => {\n                cursor.update();\n            });\n        }\n        this.zoomUpdated = false;\n        //console.log(\"[OSMD] render finished\");\n    }\n\n    protected createOrRefreshRenderBackend(): void {\n        // console.log(\"[OSMD] createOrRefreshRenderBackend()\");\n\n        // Remove old backends\n        if (this.drawer && this.drawer.Backends) {\n            // removing single children to remove all is error-prone, because sometimes a random SVG-child remains.\n            // for (const backend of this.drawer.Backends) {\n            //     backend.removeFromContainer(this.container);\n            // }\n            if (this.drawer.Backends[0]) {\n                this.drawer.Backends[0].removeAllChildrenFromContainer(this.container);\n            }\n            this.drawer.Backends.clear();\n        }\n\n        // Create the drawer\n        this.drawingParameters.Rules = this.rules;\n        this.drawer = new VexFlowMusicSheetDrawer(this.drawingParameters); // note that here the drawer.drawableBoundingBoxElement is lost. now saved in OSMD.\n        this.drawer.drawableBoundingBoxElement = this.DrawBoundingBox;\n        this.drawer.bottomLineVisible = this.drawBottomLine;\n        this.drawer.skyLineVisible = this.drawSkyLine;\n\n        // Set page width\n        let width: number = this.container.offsetWidth;\n        if (this.rules.RenderSingleHorizontalStaffline) {\n            width = this.graphic.MusicPages[0].PositionAndShape.Size.width * 10 * this.zoom;\n            // this.container.style.width = width + \"px\";\n            // console.log(\"width: \" + width)\n        }\n        // TODO width may need to be coordinated with render() where width is also used\n        let height: number;\n        const canvasDimensionsLimit: number = 32767; // browser limitation. Chrome/Firefox (16 bit, 32768 causes an error).\n        // Could be calculated by canvas-size module.\n        // see #678 on Github and here: https://stackoverflow.com/a/11585939/10295942\n\n        // TODO check if resize is necessary. set needResize or something when size was changed\n        for (const page of this.graphic.MusicPages) {\n            if (page.PageNumber > this.rules.MaxPageToDrawNumber) {\n                break; // don't add the bounding boxes of pages that aren't drawn to the container height etc\n            }\n            const backend: VexFlowBackend = this.createBackend(this.backendType, page);\n            const sizeWarningPartTwo: string = \" exceeds CanvasBackend limit of 32767. Cutting off score.\";\n            if (backend.getOSMDBackendType() === BackendType.Canvas && width > canvasDimensionsLimit) {\n                log.warn(\"[OSMD] Warning: width of \" + width + sizeWarningPartTwo);\n                width = canvasDimensionsLimit;\n            }\n            if (this.rules.PageFormat && !this.rules.PageFormat.IsUndefined) {\n                height = width / this.rules.PageFormat.aspectRatio;\n                // console.log(\"pageformat given. height: \" + page.PositionAndShape.Size.height);\n            } else {\n                height = page.PositionAndShape.Size.height;\n                height += this.rules.PageBottomMargin;\n                height += this.rules.CompactMode ? this.rules.PageTopMarginNarrow : this.rules.PageTopMargin;\n                if (this.rules.RenderTitle) {\n                    height += this.rules.TitleTopDistance;\n                }\n                height *= this.zoom * 10.0;\n                // console.log(\"pageformat not given. height: \" + page.PositionAndShape.Size.height);\n            }\n            if (backend.getOSMDBackendType() === BackendType.Canvas && height > canvasDimensionsLimit) {\n                log.warn(\"[OSMD] Warning: height of \" + height + sizeWarningPartTwo);\n                height = Math.min(height, canvasDimensionsLimit); // this cuts off the the score, but doesn't break rendering.\n                // TODO optional: reduce zoom to fit the score within the limit.\n            }\n\n            backend.resize(width, height);\n            backend.clear(); // set bgcolor if defined (this.rules.PageBackgroundColor, see OSMDOptions)\n            this.drawer.Backends.push(backend);\n            this.graphic.drawer = this.drawer;\n        }\n    }\n\n    // for now SVG only, see generateImages_browserless (PNG/SVG)\n    public exportSVG(): void {\n        for (const backend of this.drawer?.Backends) {\n            if (backend instanceof SvgVexFlowBackend) {\n                (backend as SvgVexFlowBackend).export();\n            }\n            // if we add CanvasVexFlowBackend exporting, rename function to export() or exportImages() again\n        }\n    }\n\n    /** States whether the render() function can be safely called. */\n    public IsReadyToRender(): boolean {\n        return this.graphic !== undefined;\n    }\n\n    /** Clears what OSMD has drawn on its canvas. */\n    public clear(): void {\n        this.drawer.clear();\n        this.reset(); // without this, resize will draw loaded sheet again\n    }\n\n    /** Set OSMD rendering options using an IOSMDOptions object.\n     *  Can be called during runtime. Also called by constructor.\n     *  For example, setOptions({autoResize: false}) will disable autoResize even during runtime.\n     */\n    public setOptions(options: IOSMDOptions): void {\n        if (!this.rules) {\n            this.rules = new EngravingRules();\n        }\n        if (!this.drawingParameters) {\n            this.drawingParameters = new DrawingParameters();\n            this.drawingParameters.Rules = this.rules;\n        }\n        if (options === undefined || options === null) {\n            log.warn(\"warning: osmd.setOptions() called without an options parameter, has no effect.\"\n                + \"\\n\" + \"example usage: osmd.setOptions({drawCredits: false, drawPartNames: false})\");\n            return;\n        }\n        this.OnXMLRead = function(xml): string {return xml;};\n        if (options.onXMLRead) {\n            this.OnXMLRead = options.onXMLRead;\n        }\n        if (options.drawingParameters) {\n            this.drawingParameters.DrawingParametersEnum =\n                (<any>DrawingParametersEnum)[options.drawingParameters.toLowerCase()];\n                // see DrawingParameters.ts: set DrawingParametersEnum, and DrawingParameters.ts:setForCompactTightMode()\n        }\n\n        const backendNotInitialized: boolean = !this.drawer || !this.drawer.Backends || this.drawer.Backends.length < 1;\n        let needBackendUpdate: boolean = backendNotInitialized;\n        if (options.backend !== undefined) {\n            const backendTypeGiven: BackendType = OSMDOptions.BackendTypeFromString(options.backend);\n            needBackendUpdate = needBackendUpdate || this.backendType !== backendTypeGiven;\n            this.backendType = backendTypeGiven;\n        }\n        this.needBackendUpdate = needBackendUpdate;\n        // TODO this is a necessary step during the OSMD constructor. Maybe move this somewhere else\n\n        // individual drawing parameters options\n        if (options.autoBeam !== undefined) { // only change an option if it was given in options, otherwise it will be undefined\n            this.rules.AutoBeamNotes = options.autoBeam;\n        }\n        const autoBeamOptions: AutoBeamOptions = options.autoBeamOptions;\n        if (autoBeamOptions) {\n            if (autoBeamOptions.maintain_stem_directions === undefined) {\n                autoBeamOptions.maintain_stem_directions = false;\n            }\n            this.rules.AutoBeamOptions = autoBeamOptions;\n            if (autoBeamOptions.groups && autoBeamOptions.groups.length) {\n                for (const fraction of autoBeamOptions.groups) {\n                    if (fraction.length !== 2) {\n                        throw new Error(\"Each fraction in autoBeamOptions.groups must be of length 2, e.g. [3,4] for beaming three fourths\");\n                    }\n                }\n            }\n        }\n        if (options.percussionOneLineCutoff !== undefined) {\n            this.rules.PercussionOneLineCutoff = options.percussionOneLineCutoff;\n        }\n        if (this.rules.PercussionOneLineCutoff !== 0 &&\n            options.percussionForceVoicesOneLineCutoff !== undefined) {\n            this.rules.PercussionForceVoicesOneLineCutoff = options.percussionForceVoicesOneLineCutoff;\n        }\n        if (options.alignRests !== undefined) {\n            this.rules.AlignRests = options.alignRests;\n        }\n        if (options.coloringMode !== undefined) {\n            this.setColoringMode(options);\n        }\n        if (options.coloringEnabled !== undefined) {\n            this.rules.ColoringEnabled = options.coloringEnabled;\n        }\n        if (options.colorStemsLikeNoteheads !== undefined) {\n            this.rules.ColorStemsLikeNoteheads = options.colorStemsLikeNoteheads;\n        }\n        if (options.disableCursor) {\n            this.drawingParameters.drawCursors = false;\n        }\n\n        // alternative to if block: this.drawingsParameters.drawCursors = options.drawCursors !== false. No if, but always sets drawingParameters.\n        // note that every option can be undefined, which doesn't mean the option should be set to false.\n        if (options.drawHiddenNotes) {\n            this.drawingParameters.drawHiddenNotes = true; // not yet supported\n        }\n        if (options.drawCredits !== undefined) {\n            this.drawingParameters.DrawCredits = options.drawCredits; // sets DrawComposer, DrawTitle, DrawSubtitle, DrawLyricist.\n        }\n        if (options.drawComposer !== undefined) {\n            this.drawingParameters.DrawComposer = options.drawComposer;\n        }\n        if (options.drawTitle !== undefined) {\n            this.drawingParameters.DrawTitle = options.drawTitle;\n        }\n        if (options.drawSubtitle !== undefined) {\n            this.drawingParameters.DrawSubtitle = options.drawSubtitle;\n        }\n        if (options.drawLyricist !== undefined) {\n            this.drawingParameters.DrawLyricist = options.drawLyricist;\n        }\n        if (options.drawMetronomeMarks !== undefined) {\n            this.rules.MetronomeMarksDrawn = options.drawMetronomeMarks;\n        }\n        if (options.drawPartNames !== undefined) {\n            this.drawingParameters.DrawPartNames = options.drawPartNames; // indirectly writes to EngravingRules\n\n            // by default, disable part abbreviations too, unless set explicitly.\n            if (!options.drawPartAbbreviations) {\n                this.rules.RenderPartAbbreviations = options.drawPartNames;\n            }\n        }\n        if (options.drawPartAbbreviations !== undefined) {\n            this.rules.RenderPartAbbreviations = options.drawPartAbbreviations;\n        }\n        if (options.drawFingerings === false) {\n            this.rules.RenderFingerings = false;\n        }\n        if (options.drawMeasureNumbers !== undefined) {\n            this.rules.RenderMeasureNumbers = options.drawMeasureNumbers;\n        }\n        if (options.drawMeasureNumbersOnlyAtSystemStart) {\n            this.rules.RenderMeasureNumbersOnlyAtSystemStart = options.drawMeasureNumbersOnlyAtSystemStart;\n        }\n        if (options.drawLyrics !== undefined) {\n            this.rules.RenderLyrics = options.drawLyrics;\n        }\n        if (options.drawTimeSignatures !== undefined) {\n            this.rules.RenderTimeSignatures = options.drawTimeSignatures;\n        }\n        if (options.drawSlurs !== undefined) {\n            this.rules.RenderSlurs = options.drawSlurs;\n        }\n        if (options.measureNumberInterval !== undefined) {\n            this.rules.MeasureNumberLabelOffset = options.measureNumberInterval;\n        }\n        if (options.useXMLMeasureNumbers !== undefined) {\n            this.rules.UseXMLMeasureNumbers = options.useXMLMeasureNumbers;\n        }\n        if (options.fingeringPosition !== undefined) {\n            this.rules.FingeringPosition = AbstractExpression.PlacementEnumFromString(options.fingeringPosition);\n        }\n        if (options.fingeringInsideStafflines !== undefined) {\n            this.rules.FingeringInsideStafflines = options.fingeringInsideStafflines;\n        }\n        if (options.newSystemFromXML !== undefined) {\n            this.rules.NewSystemAtXMLNewSystemAttribute = options.newSystemFromXML;\n        }\n        if (options.newPageFromXML !== undefined) {\n            this.rules.NewPageAtXMLNewPageAttribute = options.newPageFromXML;\n        }\n        if (options.fillEmptyMeasuresWithWholeRest !== undefined) {\n            this.rules.FillEmptyMeasuresWithWholeRest = options.fillEmptyMeasuresWithWholeRest;\n        }\n        if (options.followCursor !== undefined) {\n            this.FollowCursor = options.followCursor;\n        }\n        if (options.setWantedStemDirectionByXml !== undefined) {\n            this.rules.SetWantedStemDirectionByXml = options.setWantedStemDirectionByXml;\n        }\n        if (options.darkMode) {\n            this.rules.applyDefaultColorMusic(\"#FFFFFF\");\n            this.rules.PageBackgroundColor = \"#000000\";\n        } else if (options.darkMode === false) { // not if undefined!\n            this.rules.applyDefaultColorMusic(\"#000000\");\n            this.rules.PageBackgroundColor = undefined;\n        }\n        if (options.defaultColorMusic) {\n            this.rules.applyDefaultColorMusic(options.defaultColorMusic);\n        }\n        if (options.defaultColorNotehead) {\n            this.rules.DefaultColorNotehead = options.defaultColorNotehead;\n        }\n        if (options.defaultColorRest) {\n            this.rules.DefaultColorRest = options.defaultColorRest;\n        }\n        if (options.defaultColorStem) {\n            this.rules.DefaultColorStem = options.defaultColorStem;\n        }\n        if (options.defaultColorLabel) {\n            this.rules.DefaultColorLabel = options.defaultColorLabel;\n        }\n        if (options.defaultColorTitle) {\n            this.rules.DefaultColorTitle = options.defaultColorTitle;\n        }\n        if (options.defaultFontFamily) {\n            this.rules.DefaultFontFamily = options.defaultFontFamily; // default \"Times New Roman\", also used if font family not found\n        }\n        if (options.defaultFontStyle) {\n            this.rules.DefaultFontStyle = options.defaultFontStyle; // e.g. FontStyles.Bold\n        }\n        if (options.drawUpToMeasureNumber) {\n            this.rules.MaxMeasureToDrawIndex = options.drawUpToMeasureNumber - 1;\n        }\n        if (options.drawFromMeasureNumber) {\n            this.rules.MinMeasureToDrawIndex = options.drawFromMeasureNumber - 1;\n        }\n        if (options.drawUpToPageNumber) {\n            this.rules.MaxPageToDrawNumber = options.drawUpToPageNumber;\n        }\n        if (options.drawUpToSystemNumber) {\n            this.rules.MaxSystemToDrawNumber = options.drawUpToSystemNumber;\n        }\n        if (options.tupletsRatioed) {\n            this.rules.TupletsRatioed = true;\n        }\n        if (options.tupletsBracketed) {\n            this.rules.TupletsBracketed = true;\n        }\n        if (options.tripletsBracketed) {\n            this.rules.TripletsBracketed = true;\n        }\n        if (options.autoResize) {\n            if (!this.resizeHandlerAttached) {\n                this.autoResize();\n            }\n            this.autoResizeEnabled = true;\n        } else if (options.autoResize === false) { // not undefined\n            this.autoResizeEnabled = false;\n            // we could remove the window EventListener here, but not necessary.\n        }\n        if (options.pageFormat !== undefined) { // only change this option if it was given, see above\n            this.setPageFormat(options.pageFormat);\n        }\n        if (options.pageBackgroundColor !== undefined) {\n            this.rules.PageBackgroundColor = options.pageBackgroundColor;\n        }\n        if (options.renderSingleHorizontalStaffline !== undefined) {\n            this.rules.RenderSingleHorizontalStaffline = options.renderSingleHorizontalStaffline;\n        }\n        if (options.spacingFactorSoftmax !== undefined) {\n            this.rules.SoftmaxFactorVexFlow = options.spacingFactorSoftmax;\n        }\n        if (options.spacingBetweenTextLines !== undefined) {\n            this.rules.SpacingBetweenTextLines = options.spacingBetweenTextLines;\n        }\n        if (options.stretchLastSystemLine !== undefined) {\n            this.rules.StretchLastSystemLine = options.stretchLastSystemLine;\n        }\n        if (options.autoGenerateMutipleRestMeasuresFromRestMeasures !== undefined) {\n            this.rules.AutoGenerateMutipleRestMeasuresFromRestMeasures = options.autoGenerateMutipleRestMeasuresFromRestMeasures;\n        }\n        if (options.cursorsOptions !== undefined) {\n            this.cursorsOptions = options.cursorsOptions;\n        } else {\n            this.cursorsOptions = [{type: 0, color: this.EngravingRules.DefaultColorCursor, alpha: 0.5, follow: true}];\n        }\n        if (options.preferredSkyBottomLineBatchCalculatorBackend !== undefined) {\n            this.rules.PreferredSkyBottomLineBatchCalculatorBackend = options.preferredSkyBottomLineBatchCalculatorBackend;\n        }\n        if (options.skyBottomLineBatchMinMeasures !== undefined) {\n            this.rules.SkyBottomLineBatchMinMeasures = options.skyBottomLineBatchMinMeasures;\n        }\n    }\n\n    public setColoringMode(options: IOSMDOptions): void {\n        if (options.coloringMode === ColoringModes.XML) {\n            this.rules.ColoringMode = ColoringModes.XML;\n            return;\n        }\n        const noteIndices: NoteEnum[] = [NoteEnum.C, NoteEnum.D, NoteEnum.E, NoteEnum.F, NoteEnum.G, NoteEnum.A, NoteEnum.B, -1];\n        let colorSetString: string[];\n        if (options.coloringMode === ColoringModes.CustomColorSet) {\n            if (!options.coloringSetCustom || options.coloringSetCustom.length !== 8) {\n                throw new Error(\"Invalid amount of colors: With coloringModes.customColorSet, \" +\n                    \"you have to provide a coloringSetCustom parameter with 8 strings (C to B, rest note).\");\n            }\n            // validate strings input\n            for (const colorString of options.coloringSetCustom) {\n                const regExp: RegExp = /^\\#[0-9a-fA-F]{6}$/;\n                if (!regExp.test(colorString)) {\n                    throw new Error(\n                        \"One of the color strings in options.coloringSetCustom was not a valid HTML Hex color:\\n\" + colorString);\n                }\n            }\n            colorSetString = options.coloringSetCustom;\n        } else if (options.coloringMode === ColoringModes.AutoColoring) {\n            colorSetString = [];\n            const keys: string[] = Object.keys(AutoColorSet);\n            for (let i: number = 0; i < keys.length; i++) {\n                colorSetString.push(AutoColorSet[keys[i]]);\n            }\n        } // for both cases:\n        const coloringSetCurrent: Dictionary<NoteEnum | number, string> = new Dictionary<NoteEnum | number, string>();\n        for (let i: number = 0; i < noteIndices.length; i++) {\n            coloringSetCurrent.setValue(noteIndices[i], colorSetString[i]);\n        }\n        coloringSetCurrent.setValue(-1, colorSetString[7]);\n        this.rules.ColoringSetCurrent = coloringSetCurrent;\n\n        this.rules.ColoringMode = options.coloringMode;\n    }\n\n    /**\n     * Sets the logging level for this OSMD instance. By default, this is set to `warn`.\n     *\n     * @param: content can be `trace`, `debug`, `info`, `warn` or `error`.\n     */\n    public setLogLevel(level: string): void {\n        switch (level) {\n            case \"trace\":\n                log.setLevel(log.levels.TRACE);\n                break;\n            case \"debug\":\n                log.setLevel(log.levels.DEBUG);\n                break;\n            case \"info\":\n                log.setLevel(log.levels.INFO);\n                break;\n            case \"warn\":\n                log.setLevel(log.levels.WARN);\n                break;\n            case \"error\":\n                log.setLevel(log.levels.ERROR);\n                break;\n            case \"silent\":\n                log.setLevel(log.levels.SILENT);\n                break;\n            default:\n                log.warn(`Could not set log level to ${level}. Using warn instead.`);\n                log.setLevel(log.levels.WARN);\n                break;\n        }\n    }\n\n    public getLogLevel(): number {\n        return log.getLevel();\n    }\n\n    /**\n     * Initialize this object to default values\n     * FIXME: Probably unnecessary\n     */\n    protected reset(): void {\n        if (this.drawingParameters.drawCursors) {\n            this.cursors.forEach(cursor => {\n                cursor.hide();\n            });\n        }\n        this.sheet = undefined;\n        this.graphic = undefined;\n        this.zoom = 1.0;\n    }\n\n    /**\n     * Attach the appropriate handler to the window.onResize event\n     */\n    protected autoResize(): void {\n\n        const self: OpenSheetMusicDisplay = this;\n        this.handleResize(\n            () => {\n                // empty\n            },\n            () => {\n                // The following code is probably not needed\n                // (the width should adapt itself to the max allowed)\n                //let width: number = Math.max(\n                //    document.documentElement.clientWidth,\n                //    document.body.scrollWidth,\n                //    document.documentElement.scrollWidth,\n                //    document.body.offsetWidth,\n                //    document.documentElement.offsetWidth\n                //);\n                //self.container.style.width = width + \"px\";\n\n                // recalculate beams, are otherwise not updated and can detach from stems, see #724\n                if (this.graphic?.GetCalculator instanceof VexFlowMusicSheetCalculator) { // null and type check\n                    (this.graphic.GetCalculator as VexFlowMusicSheetCalculator).beamsNeedUpdate = true;\n                }\n                if (self.IsReadyToRender()) {\n                    self.render();\n                }\n            }\n        );\n    }\n\n    /**\n     * Helper function for managing window's onResize events\n     * @param startCallback is the function called when resizing starts\n     * @param endCallback is the function called when resizing (kind-of) ends\n     */\n    protected handleResize(startCallback: () => void, endCallback: () => void): void {\n        let rtime: number;\n        let timeout: number = undefined;\n        const delta: number = 200;\n        const self: OpenSheetMusicDisplay = this;\n\n        function resizeStart(): void {\n            if (!self.AutoResizeEnabled) {\n                return;\n            }\n            rtime = (new Date()).getTime();\n            if (!timeout) {\n                startCallback();\n                rtime = (new Date()).getTime();\n                timeout = window.setTimeout(resizeEnd, delta);\n            }\n        }\n\n        function resizeEnd(): void {\n            timeout = undefined;\n            window.clearTimeout(timeout);\n            if ((new Date()).getTime() - rtime < delta) {\n                timeout = window.setTimeout(resizeEnd, delta);\n            } else {\n                endCallback();\n            }\n        }\n\n        if ((<any>window).attachEvent) {\n            // Support IE<9\n            (<any>window).attachEvent(\"onresize\", resizeStart);\n        } else {\n            window.addEventListener(\"resize\", resizeStart);\n        }\n        this.resizeHandlerAttached = true;\n\n        window.setTimeout(startCallback, 0);\n        window.setTimeout(endCallback, 1);\n    }\n\n    /** Enable or disable (hide) the cursor.\n     * @param enable whether to enable (true) or disable (false) the cursor\n     */\n    public enableOrDisableCursors(enable: boolean): void {\n        this.drawingParameters.drawCursors = enable;\n        if (enable) {\n            for (let i: number = 0; i < this.cursorsOptions.length; i++){\n                // save previous cursor state\n                const hidden: boolean = this.cursors[i]?.Hidden;\n                const previousIterator: MusicPartManagerIterator = this.cursors[i]?.Iterator;\n                this.cursors[i]?.hide();\n\n                // check which page/backend to draw the cursor on (the pages may have changed since last cursor)\n                let backendToDrawOn: VexFlowBackend = this.drawer?.Backends[0];\n                if (backendToDrawOn && this.rules.RestoreCursorAfterRerender && this.cursors[i]) {\n                    const newPageNumber: number = this.cursors[i].updateCurrentPage();\n                    backendToDrawOn = this.drawer.Backends[newPageNumber - 1];\n                }\n                // create new cursor\n                if (backendToDrawOn && backendToDrawOn.getRenderElement()) {\n                    this.cursors[i] = new Cursor(backendToDrawOn.getRenderElement(), this, this.cursorsOptions[i]);\n                }\n                if (this.sheet && this.graphic && this.cursors[i]) { // else init is called in load()\n                    this.cursors[i].init(this.sheet.MusicPartManager, this.graphic);\n                }\n\n                // restore old cursor state\n                if (this.rules.RestoreCursorAfterRerender) {\n                    this.cursors[i].hidden = hidden;\n                    if (previousIterator) {\n                        this.cursors[i].iterator = previousIterator;\n                        this.cursors[i].update();\n                    }\n                }\n            }\n        } else { // disable cursor\n            this.cursors.forEach(cursor => {\n                cursor.hide();\n            });\n            // this.cursor = undefined;\n            // TODO cursor should be disabled, not just hidden. otherwise user can just call osmd.cursor.hide().\n            // however, this could cause null calls (cursor.next() etc), maybe that needs some solution.\n        }\n    }\n\n    public createBackend(type: BackendType, page: GraphicalMusicPage): VexFlowBackend {\n        let backend: VexFlowBackend;\n        if (type === undefined || type === BackendType.SVG) {\n            backend = new SvgVexFlowBackend(this.rules);\n        } else {\n            backend = new CanvasVexFlowBackend(this.rules);\n        }\n        backend.graphicalMusicPage = page; // the page the backend renders on. needed to identify DOM element to extract image/SVG\n        backend.initialize(this.container, this.zoom);\n        backend.getContext().setFillStyle(this.rules.DefaultColorMusic);\n        backend.getContext().setStrokeStyle(this.rules.DefaultColorMusic);\n        return backend;\n    }\n\n    /** Standard page format options like A4 or Letter, in portrait and landscape. E.g. PageFormatStandards[\"A4_P\"] or PageFormatStandards[\"Letter_L\"]. */\n    public static PageFormatStandards: { [type: string]: PageFormat } = {\n        \"A3_L\": new PageFormat(420, 297, \"A3_L\"), // id strings should use underscores instead of white spaces to facilitate use as URL parameters.\n        \"A3_P\": new PageFormat(297, 420, \"A3_P\"),\n        \"A4_L\": new PageFormat(297, 210, \"A4_L\"),\n        \"A4_P\": new PageFormat(210, 297, \"A4_P\"),\n        \"A5_L\": new PageFormat(210, 148, \"A5_L\"),\n        \"A5_P\": new PageFormat(148, 210, \"A5_P\"),\n        \"A6_L\": new PageFormat(148, 105, \"A6_L\"),\n        \"A6_P\": new PageFormat(105, 148, \"A6_P\"),\n        \"Endless\": PageFormat.UndefinedPageFormat,\n        \"Letter_L\": new PageFormat(279.4, 215.9, \"Letter_L\"),\n        \"Letter_P\": new PageFormat(215.9, 279.4, \"Letter_P\")\n    };\n\n    public static StringToPageFormat(pageFormatString: string): PageFormat {\n        let pageFormat: PageFormat = PageFormat.UndefinedPageFormat; // default: 'endless' page height, take canvas/container width\n\n        // check for widthxheight parameter, e.g. \"800x600\"\n        if (pageFormatString.match(\"^[0-9]+x[0-9]+$\")) {\n            const widthAndHeight: string[] = pageFormatString.split(\"x\");\n            const width: number = Number.parseInt(widthAndHeight[0], 10);\n            const height: number = Number.parseInt(widthAndHeight[1], 10);\n            if (width > 0 && width < 32768 && height > 0 && height < 32768) {\n                pageFormat = new PageFormat(width, height, `customPageFormat${pageFormatString}`);\n            }\n        }\n\n        // check for formatId from OpenSheetMusicDisplay.PageFormatStandards\n        pageFormatString = pageFormatString.replace(\" \", \"_\");\n        pageFormatString = pageFormatString.replace(\"Landscape\", \"L\");\n        pageFormatString = pageFormatString.replace(\"Portrait\", \"P\");\n        //console.log(\"change format to: \" + formatId);\n        if (OpenSheetMusicDisplay.PageFormatStandards.hasOwnProperty(pageFormatString)) {\n            pageFormat = OpenSheetMusicDisplay.PageFormatStandards[pageFormatString];\n            return pageFormat;\n        }\n        return pageFormat;\n    }\n\n    /** Sets page format by string. Used by setOptions({pageFormat: \"A4_P\"}) for example. */\n    public setPageFormat(formatId: string): void {\n        const newPageFormat: PageFormat = OpenSheetMusicDisplay.StringToPageFormat(formatId);\n        this.needBackendUpdate = !(newPageFormat.Equals(this.rules.PageFormat));\n        this.rules.PageFormat = newPageFormat;\n    }\n\n    public setCustomPageFormat(width: number, height: number): void {\n        if (width > 0 && height > 0) {\n            const f: PageFormat = new PageFormat(width, height);\n            this.rules.PageFormat = f;\n        }\n    }\n\n    //#region GETTER / SETTER\n    public set DrawSkyLine(value: boolean) {\n        this.drawSkyLine = value;\n        if (this.drawer) {\n            this.drawer.skyLineVisible = value;\n            // this.render(); // note: we probably shouldn't automatically render when someone sets the setter\n            //   this can cause a lot of rendering time.\n        }\n    }\n    public get DrawSkyLine(): boolean {\n        return this.drawer.skyLineVisible;\n    }\n\n    public set DrawBottomLine(value: boolean) {\n        this.drawBottomLine = value;\n        if (this.drawer) {\n            this.drawer.bottomLineVisible = value;\n            // this.render(); // note: we probably shouldn't automatically render when someone sets the setter\n            //   this can cause a lot of rendering time.\n        }\n    }\n    public get DrawBottomLine(): boolean {\n        return this.drawer.bottomLineVisible;\n    }\n    public set DrawBoundingBox(value: string) {\n        this.setDrawBoundingBox(value, true);\n    }\n    public get DrawBoundingBox(): string {\n        return this.drawBoundingBox;\n    }\n    public setDrawBoundingBox(value: string, render: boolean = false): void {\n        this.drawBoundingBox = value;\n        if (this.drawer) {\n            this.drawer.drawableBoundingBoxElement = value; // drawer is sometimes created anew, losing this value, so it's saved in OSMD now.\n        }\n        if (render) {\n            this.render(); // may create new Drawer.\n        }\n    }\n\n    public get AutoResizeEnabled(): boolean {\n        return this.autoResizeEnabled;\n    }\n    public set AutoResizeEnabled(value: boolean) {\n        this.autoResizeEnabled = value;\n    }\n\n    public get Zoom(): number {\n        return this.zoom;\n    }\n    public set Zoom(value: number) {\n        this.zoom = value;\n        this.zoomUpdated = true;\n        if (this.graphic?.GetCalculator instanceof VexFlowMusicSheetCalculator) { // null and type check\n            (this.graphic.GetCalculator as VexFlowMusicSheetCalculator).beamsNeedUpdate = this.zoomUpdated;\n        }\n    }\n\n    public set FollowCursor(value: boolean) {\n        this.followCursor = value;\n    }\n\n    public get FollowCursor(): boolean {\n        return this.followCursor;\n    }\n\n    public set TransposeCalculator(calculator: ITransposeCalculator) {\n        MusicSheetCalculator.transposeCalculator = calculator;\n    }\n\n    public get TransposeCalculator(): ITransposeCalculator {\n        return MusicSheetCalculator.transposeCalculator;\n    }\n\n    public get Sheet(): MusicSheet {\n        return this.sheet;\n    }\n    public get Drawer(): VexFlowMusicSheetDrawer {\n        return this.drawer;\n    }\n    public get GraphicSheet(): GraphicalMusicSheet {\n        return this.graphic;\n    }\n    public get DrawingParameters(): DrawingParameters {\n        return this.drawingParameters;\n    }\n    public get EngravingRules(): EngravingRules { // custom getter, useful for engraving parameter setting in Demo\n        return this.rules;\n    }\n    /** Returns the version of OSMD this object is built from (the version you are using). */\n    public get Version(): string {\n        return this.version;\n    }\n    //#endregion\n}\n","// created from 'create-ts-index'\n\nexport * from \"./AJAX\";\nexport * from \"./Cursor\";\nexport * from \"./OSMDOptions\";\nexport * from \"./OpenSheetMusicDisplay\";\n","import { ITransposeCalculator } from \"../../MusicalScore/Interfaces\";\nimport { Pitch, NoteEnum, AccidentalEnum } from \"../../Common/DataObjects\";\nimport { KeyInstruction } from \"../../MusicalScore/VoiceData/Instructions\";\n\n/** Calculates transposition of individual notes and keys,\n * which is used by multiple OSMD classes to transpose the whole sheet.\n * Note: This class may not look like much, but a lot of thought has gone into the algorithms,\n * and the exact usage within OSMD classes. */\nexport class TransposeCalculator implements ITransposeCalculator {\n    private static keyMapping: number[] = [0, -5, 2, -3, 4, -1, 6, 1, -4, 3, -2, 5];\n    private static noteEnums: NoteEnum[] = [NoteEnum.C, NoteEnum.D, NoteEnum.E, NoteEnum.F, NoteEnum.G, NoteEnum.A, NoteEnum.B];\n    public transposePitch(pitch: Pitch, currentKeyInstruction: KeyInstruction, halftones: number): Pitch {\n\n        let transposedFundamentalNote: NoteEnum = NoteEnum.C;\n        let transposedOctave: number = 0;\n        let transposedAccidental: AccidentalEnum = AccidentalEnum.NONE;\n        const result: { halftone: number, overflow: number } = Pitch.CalculateTransposedHalfTone(pitch, halftones);\n        let transposedHalfTone: number = result.halftone;\n        let octaveChange: number = result.overflow;\n\n        for (let i: number = 0; i < TransposeCalculator.noteEnums.length; i++) {\n            const currentValue: number = <number>TransposeCalculator.noteEnums[i];\n            if (currentValue === transposedHalfTone) {\n                const noteIndex: number = i;\n                transposedFundamentalNote = TransposeCalculator.noteEnums[noteIndex];\n                transposedOctave = <number>(pitch.Octave + octaveChange);\n                transposedAccidental = AccidentalEnum.NONE;\n                return new Pitch(transposedFundamentalNote, transposedOctave, transposedAccidental);\n            } else if (currentValue > transposedHalfTone) {\n                break;\n            }\n        }\n        for (let i: number = 0; i < TransposeCalculator.noteEnums.length; i++) {\n            const currentValue: number = <number>TransposeCalculator.noteEnums[i];\n            if (currentValue > transposedHalfTone) {\n                let noteIndex: number = i;\n                const accidentalHalfTones: number = Pitch.HalfTonesFromAccidental(pitch.Accidental);\n\n                if (accidentalHalfTones > 0 || (accidentalHalfTones === 0 && currentKeyInstruction.Key >= 0)) {\n                    noteIndex--;\n                }\n                while (noteIndex < 0) {\n                    noteIndex += 7;\n                    transposedHalfTone += 12;\n                    octaveChange--;\n                }\n                while (noteIndex >= 7) {\n                    noteIndex -= 7;\n                    transposedHalfTone -= 12;\n                    octaveChange++;\n                }\n                transposedFundamentalNote = TransposeCalculator.noteEnums[noteIndex];\n                transposedAccidental = Pitch.AccidentalFromHalfTones(transposedHalfTone - <number>transposedFundamentalNote);\n                transposedOctave = <number>(pitch.Octave + octaveChange);\n                break;\n            }\n        }\n\n        const transposedPitch: Pitch = new Pitch(transposedFundamentalNote, transposedOctave, transposedAccidental);\n        return transposedPitch;\n    }\n    public transposeKey(keyInstruction: KeyInstruction, transpose: number): void {\n        let currentIndex: number = 0;\n        let previousKeyType: number = 0;\n        for (; currentIndex < TransposeCalculator.keyMapping.length; currentIndex++) {\n            previousKeyType = TransposeCalculator.keyMapping[currentIndex];\n            if (previousKeyType === keyInstruction.keyTypeOriginal) {\n                break;\n            }\n        }\n        let newIndex: number = (currentIndex + transpose);\n        while (newIndex >= 12) {\n            newIndex -= 12;\n        }\n        while (newIndex < 0) {\n            newIndex += 12;\n        }\n        keyInstruction.Key = TransposeCalculator.keyMapping[newIndex];\n        keyInstruction.isTransposedBy = transpose;\n    }\n}\n","export * from \"./TransposeCalculator\";\n","export * from \"./Transpose\";\n","import { Dictionary } from \"typescript-collections\";\n\ndeclare global {\n    interface Array<T> {\n        /** Returns the last element from an array */\n        last(): T;\n        /** Deletes all elements from an array */\n        clear(): void;\n        /** Returns true if the element is found in the array */\n        contains(elem: T): boolean;\n    }\n}\n\nif (!Array.prototype.last) {\n    // using Object.defineProperty instead of assigning Array.prototype.x directly prevents prototype pollution, see #980\n    Object.defineProperty(Array.prototype, \"last\", {\n        enumerable: false,\n        value: function<T>(): T {\n            return this[this.length - 1];\n        }\n    });\n}\n\nif (!Array.prototype.clear) {\n    Object.defineProperty(Array.prototype, \"clear\", {\n        enumerable: false,\n        value: function<T>(): void {\n            this.length = 0;\n        }\n    });\n}\n\nif (!Array.prototype.contains) {\n    Object.defineProperty(Array.prototype, \"contains\", {\n        enumerable: false,\n        value: function<T>(elem: T): boolean {\n            return this.indexOf(elem) !== -1;\n        }\n    });\n}\n\n/**\n * This class implements static methods to perform useful operations on lists, dictionaries, ...\n */\nexport class CollectionUtil {\n\n    public static contains2(array: any[], object: any): boolean {\n        for (let i: number = 0; i < array.length; i++) {\n            if (array[i] === object) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    public static last(array: any[]): any {\n        return array[array.length - 1];\n    }\n\n    /**\n     * Iterates through a dictionary and calls iterationFunction.\n     * If iterationFunction returns true the key gets stored.\n     * all stored key will finally be removed from the dictionary.\n     * @param dict\n     * @param iterationFunction\n     */\n    public static removeDictElementIfTrue<S, T, V>(thisPointer: S, dict: Dictionary<T, V>,\n                                                   iterationFunction: (thisPointer: S, key: T, value: V) => boolean): void {\n        const toDeleteEntries: T[] = [];\n        dict.forEach(function (key: T, value: V): void {\n            const shallDelete: boolean = iterationFunction(thisPointer, key, value);\n            if (shallDelete) {\n                toDeleteEntries.push(key);\n            }\n        });\n\n        for (let i: number = 0; i < toDeleteEntries.length; i++) {\n            dict.remove(toDeleteEntries[i]);\n        }\n    }\n\n    public static getLastElement<T>(array: T[]): T {\n        return array[array.length - 1];\n    }\n\n    public static binarySearch<T>(array: T[],\n                                  element: T,\n                                  cmp: (elem1: T, elem2: T) => number,\n                                  startIndex: number = 0,\n                                  endIndex: number = array.length - 1): number {\n        let mid: number = 1;\n        while (startIndex <= endIndex) {\n            mid = Math.floor((startIndex + endIndex) / 2);\n            const c: number = cmp(array[mid], element);\n            if (c === 0) {\n                return mid;\n            }\n            if (c < 0) {\n                startIndex = mid + 1;\n            }\n            if (0 < c) {\n                endIndex = mid;\n            }\n        }\n\n        return -mid;\n    }\n}\n","/**\n * Some useful Maths methods.\n */\nexport class PSMath {\n\n    public static log(base: number, x: number): number {\n        return Math.log(x) / Math.log(base);\n    }\n\n    public static log10(x: number): number {\n        return PSMath.log(10, x);\n    }\n\n    public static meanSimple(values: number[]): number {\n        let sum: number = 0;\n        for (let i: number = 0; i < values.length; i++) {\n            sum += values[i];\n        }\n        return sum / values.length;\n    }\n\n    public static meanWeighted(values: number[], weights: number[]): number {\n        if (values.length !== weights.length || values.length === 0) {\n            return 0;\n        }\n        let sumWeigtedValues: number = 0;\n        let sumWeights: number = 0;\n        for (let i: number = 0; i < values.length; i++) {\n            const weight: number = weights[i];\n            sumWeigtedValues += values[i] * weight;\n            sumWeights += weight;\n        }\n        return sumWeigtedValues / sumWeights;\n    }\n\n}\n\n\n\n","// created from 'create-ts-index'\n\n//export * from \"./BaseIdClass\";\nexport * from \"./CollectionUtil\";\nexport * from \"./PSMath\";\n","export * from \"./OpenSheetMusicDisplay\";\nexport * from \"./MusicalScore\";\nexport * from \"./Util\";\nexport * from \"./Common\";\nexport * from \"./Plugins\";\n","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar BSTreeKV_1 = require(\"./BSTreeKV\");\n/**\n * Special-case of the binary search tree in which the search key is equal to the element type.\n * This definition is suitable when the element type can not be split between what defines its order\n * and what does not (eg. primitive types as opposed to indexed records).\n *\n * The table below shows some use-case examples for both interfaces:\n *\n *           element type              |  most suitable interface\n * ------------------------------------|----------------------------\n *    number                           |  BSTree<number>\n *    string                           |  BSTree<string>\n * { order: number, data: string }     |  BSTreeKV<{order: number}, {order: number, data: string}>\n *\n * @see BSTreeKV\n */\nvar BSTree = /** @class */ (function (_super) {\n    __extends(BSTree, _super);\n    function BSTree() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return BSTree;\n}(BSTreeKV_1.default));\nexports.default = BSTree;\n//# sourceMappingURL=BSTree.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar util = require(\"./util\");\nvar Queue_1 = require(\"./Queue\");\n/**\n * General binary search tree implementation.\n *\n * This interface allows one to search elements using a subset of their attributes (thus the\n * tree can be used as an index for complex objects).\n * The attributes required to define an ordering in the tree must be defined in the type K.\n * Any additional attribute must be defined in the type V.\n *\n * @see BSTree\n */\nvar BSTreeKV = /** @class */ (function () {\n    /**\n     * Creates an empty binary search tree.\n     * @class <p>A binary search tree is a binary tree in which each\n     * internal node stores an element such that the elements stored in the\n     * left subtree are less than it and the elements\n     * stored in the right subtree are greater.</p>\n     * <p>Formally, a binary search tree is a node-based binary tree data structure which\n     * has the following properties:</p>\n     * <ul>\n     * <li>The left subtree of a node contains only nodes with elements less\n     * than the node's element</li>\n     * <li>The right subtree of a node contains only nodes with elements greater\n     * than the node's element</li>\n     * <li>Both the left and right subtrees must also be binary search trees.</li>\n     * </ul>\n     * <p>If the inserted elements are custom objects a compare function must\n     * be provided at construction time, otherwise the <=, === and >= operators are\n     * used to compare elements. Example:</p>\n     * <pre>\n     * function compare(a, b) {\n     *  if (a is less than b by some ordering criterion) {\n     *     return -1;\n     *  } if (a is greater than b by the ordering criterion) {\n     *     return 1;\n     *  }\n     *  // a must be equal to b\n     *  return 0;\n     * }\n     * </pre>\n     * @constructor\n     * @param {function(Object,Object):number=} compareFunction optional\n     * function used to compare two elements. Must return a negative integer,\n     * zero, or a positive integer as the first argument is less than, equal to,\n     * or greater than the second.\n     */\n    function BSTreeKV(compareFunction) {\n        this.root = null;\n        this.compare = compareFunction || util.defaultCompare;\n        this.nElements = 0;\n    }\n    /**\n     * Adds the specified element to this tree if it is not already present.\n     * @param {Object} element the element to insert.\n     * @return {boolean} true if this tree did not already contain the specified element.\n     */\n    BSTreeKV.prototype.add = function (element) {\n        if (util.isUndefined(element)) {\n            return false;\n        }\n        if (this.insertNode(this.createNode(element)) !== null) {\n            this.nElements++;\n            return true;\n        }\n        return false;\n    };\n    /**\n     * Removes all of the elements from this tree.\n     */\n    BSTreeKV.prototype.clear = function () {\n        this.root = null;\n        this.nElements = 0;\n    };\n    /**\n     * Returns true if this tree contains no elements.\n     * @return {boolean} true if this tree contains no elements.\n     */\n    BSTreeKV.prototype.isEmpty = function () {\n        return this.nElements === 0;\n    };\n    /**\n     * Returns the number of elements in this tree.\n     * @return {number} the number of elements in this tree.\n     */\n    BSTreeKV.prototype.size = function () {\n        return this.nElements;\n    };\n    /**\n     * Returns true if this tree contains the specified element.\n     * @param {Object} element element to search for.\n     * @return {boolean} true if this tree contains the specified element,\n     * false otherwise.\n     */\n    BSTreeKV.prototype.contains = function (element) {\n        if (util.isUndefined(element)) {\n            return false;\n        }\n        return this.searchNode(this.root, element) !== null;\n    };\n    /**\n     * Looks for the value with the provided search key.\n     * @param {Object} element The key to look for\n     * @return {Object} The value found or undefined if it was not found.\n     */\n    BSTreeKV.prototype.search = function (element) {\n        var ret = this.searchNode(this.root, element);\n        if (ret === null) {\n            return undefined;\n        }\n        return ret.element;\n    };\n    /**\n     * Removes the specified element from this tree if it is present.\n     * @return {boolean} true if this tree contained the specified element.\n     */\n    BSTreeKV.prototype.remove = function (element) {\n        var node = this.searchNode(this.root, element);\n        if (node === null) {\n            return false;\n        }\n        this.removeNode(node);\n        this.nElements--;\n        return true;\n    };\n    /**\n     * Executes the provided function once for each element present in this tree in\n     * in-order.\n     * @param {function(Object):*} callback function to execute, it is invoked with one\n     * argument: the element value, to break the iteration you can optionally return false.\n     */\n    BSTreeKV.prototype.inorderTraversal = function (callback) {\n        this.inorderTraversalAux(this.root, callback, {\n            stop: false\n        });\n    };\n    /**\n     * Executes the provided function once for each element present in this tree in pre-order.\n     * @param {function(Object):*} callback function to execute, it is invoked with one\n     * argument: the element value, to break the iteration you can optionally return false.\n     */\n    BSTreeKV.prototype.preorderTraversal = function (callback) {\n        this.preorderTraversalAux(this.root, callback, {\n            stop: false\n        });\n    };\n    /**\n     * Executes the provided function once for each element present in this tree in post-order.\n     * @param {function(Object):*} callback function to execute, it is invoked with one\n     * argument: the element value, to break the iteration you can optionally return false.\n     */\n    BSTreeKV.prototype.postorderTraversal = function (callback) {\n        this.postorderTraversalAux(this.root, callback, {\n            stop: false\n        });\n    };\n    /**\n     * Executes the provided function once for each element present in this tree in\n     * level-order.\n     * @param {function(Object):*} callback function to execute, it is invoked with one\n     * argument: the element value, to break the iteration you can optionally return false.\n     */\n    BSTreeKV.prototype.levelTraversal = function (callback) {\n        this.levelTraversalAux(this.root, callback);\n    };\n    /**\n     * Returns the minimum element of this tree.\n     * @return {*} the minimum element of this tree or undefined if this tree is\n     * is empty.\n     */\n    BSTreeKV.prototype.minimum = function () {\n        if (this.isEmpty() || this.root === null) {\n            return undefined;\n        }\n        return this.minimumAux(this.root).element;\n    };\n    /**\n     * Returns the maximum element of this tree.\n     * @return {*} the maximum element of this tree or undefined if this tree is\n     * is empty.\n     */\n    BSTreeKV.prototype.maximum = function () {\n        if (this.isEmpty() || this.root === null) {\n            return undefined;\n        }\n        return this.maximumAux(this.root).element;\n    };\n    /**\n     * Executes the provided function once for each element present in this tree in inorder.\n     * Equivalent to inorderTraversal.\n     * @param {function(Object):*} callback function to execute, it is\n     * invoked with one argument: the element value, to break the iteration you can\n     * optionally return false.\n     */\n    BSTreeKV.prototype.forEach = function (callback) {\n        this.inorderTraversal(callback);\n    };\n    /**\n     * Returns an array containing all of the elements in this tree in in-order.\n     * @return {Array} an array containing all of the elements in this tree in in-order.\n     */\n    BSTreeKV.prototype.toArray = function () {\n        var array = [];\n        this.inorderTraversal(function (element) {\n            array.push(element);\n            return true;\n        });\n        return array;\n    };\n    /**\n     * Returns the height of this tree.\n     * @return {number} the height of this tree or -1 if is empty.\n     */\n    BSTreeKV.prototype.height = function () {\n        return this.heightAux(this.root);\n    };\n    /**\n     * @private\n     */\n    BSTreeKV.prototype.searchNode = function (node, element) {\n        var cmp = 1;\n        while (node !== null && cmp !== 0) {\n            cmp = this.compare(element, node.element);\n            if (cmp < 0) {\n                node = node.leftCh;\n            }\n            else if (cmp > 0) {\n                node = node.rightCh;\n            }\n        }\n        return node;\n    };\n    /**\n     * @private\n     */\n    BSTreeKV.prototype.transplant = function (n1, n2) {\n        if (n1.parent === null) {\n            this.root = n2;\n        }\n        else if (n1 === n1.parent.leftCh) {\n            n1.parent.leftCh = n2;\n        }\n        else {\n            n1.parent.rightCh = n2;\n        }\n        if (n2 !== null) {\n            n2.parent = n1.parent;\n        }\n    };\n    /**\n     * @private\n     */\n    BSTreeKV.prototype.removeNode = function (node) {\n        if (node.leftCh === null) {\n            this.transplant(node, node.rightCh);\n        }\n        else if (node.rightCh === null) {\n            this.transplant(node, node.leftCh);\n        }\n        else {\n            var y = this.minimumAux(node.rightCh);\n            if (y.parent !== node) {\n                this.transplant(y, y.rightCh);\n                y.rightCh = node.rightCh;\n                y.rightCh.parent = y;\n            }\n            this.transplant(node, y);\n            y.leftCh = node.leftCh;\n            y.leftCh.parent = y;\n        }\n    };\n    /**\n     * @private\n     */\n    BSTreeKV.prototype.inorderTraversalAux = function (node, callback, signal) {\n        if (node === null || signal.stop) {\n            return;\n        }\n        this.inorderTraversalAux(node.leftCh, callback, signal);\n        if (signal.stop) {\n            return;\n        }\n        signal.stop = callback(node.element) === false;\n        if (signal.stop) {\n            return;\n        }\n        this.inorderTraversalAux(node.rightCh, callback, signal);\n    };\n    /**\n     * @private\n     */\n    BSTreeKV.prototype.levelTraversalAux = function (node, callback) {\n        var queue = new Queue_1.default();\n        if (node !== null) {\n            queue.enqueue(node);\n        }\n        node = queue.dequeue() || null;\n        while (node != null) {\n            if (callback(node.element) === false) {\n                return;\n            }\n            if (node.leftCh !== null) {\n                queue.enqueue(node.leftCh);\n            }\n            if (node.rightCh !== null) {\n                queue.enqueue(node.rightCh);\n            }\n            node = queue.dequeue() || null;\n        }\n    };\n    /**\n     * @private\n     */\n    BSTreeKV.prototype.preorderTraversalAux = function (node, callback, signal) {\n        if (node === null || signal.stop) {\n            return;\n        }\n        signal.stop = callback(node.element) === false;\n        if (signal.stop) {\n            return;\n        }\n        this.preorderTraversalAux(node.leftCh, callback, signal);\n        if (signal.stop) {\n            return;\n        }\n        this.preorderTraversalAux(node.rightCh, callback, signal);\n    };\n    /**\n     * @private\n     */\n    BSTreeKV.prototype.postorderTraversalAux = function (node, callback, signal) {\n        if (node === null || signal.stop) {\n            return;\n        }\n        this.postorderTraversalAux(node.leftCh, callback, signal);\n        if (signal.stop) {\n            return;\n        }\n        this.postorderTraversalAux(node.rightCh, callback, signal);\n        if (signal.stop) {\n            return;\n        }\n        signal.stop = callback(node.element) === false;\n    };\n    BSTreeKV.prototype.minimumAux = function (node) {\n        while (node != null && node.leftCh !== null) {\n            node = node.leftCh;\n        }\n        return node;\n    };\n    BSTreeKV.prototype.maximumAux = function (node) {\n        while (node != null && node.rightCh !== null) {\n            node = node.rightCh;\n        }\n        return node;\n    };\n    /**\n     * @private\n     */\n    BSTreeKV.prototype.heightAux = function (node) {\n        if (node === null) {\n            return -1;\n        }\n        return Math.max(this.heightAux(node.leftCh), this.heightAux(node.rightCh)) + 1;\n    };\n    /*\n    * @private\n    */\n    BSTreeKV.prototype.insertNode = function (node) {\n        var parent = null;\n        var position = this.root;\n        while (position !== null) {\n            var cmp = this.compare(node.element, position.element);\n            if (cmp === 0) {\n                return null;\n            }\n            else if (cmp < 0) {\n                parent = position;\n                position = position.leftCh;\n            }\n            else {\n                parent = position;\n                position = position.rightCh;\n            }\n        }\n        node.parent = parent;\n        if (parent === null) {\n            // tree is empty\n            this.root = node;\n        }\n        else if (this.compare(node.element, parent.element) < 0) {\n            parent.leftCh = node;\n        }\n        else {\n            parent.rightCh = node;\n        }\n        return node;\n    };\n    /**\n     * @private\n     */\n    BSTreeKV.prototype.createNode = function (element) {\n        return {\n            element: element,\n            leftCh: null,\n            rightCh: null,\n            parent: null\n        };\n    };\n    return BSTreeKV;\n}());\nexports.default = BSTreeKV;\n//# sourceMappingURL=BSTreeKV.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar util = require(\"./util\");\nvar Dictionary_1 = require(\"./Dictionary\");\nvar Set_1 = require(\"./Set\");\nvar Bag = /** @class */ (function () {\n    /**\n     * Creates an empty bag.\n     * @class <p>A bag is a special kind of set in which members are\n     * allowed to appear more than once.</p>\n     * <p>If the inserted elements are custom objects a function\n     * which converts elements to unique strings must be provided. Example:</p>\n     *\n     * <pre>\n     * function petToString(pet) {\n     *  return pet.name;\n     * }\n     * </pre>\n     *\n     * @constructor\n     * @param {function(Object):string=} toStrFunction optional function used\n     * to convert elements to strings. If the elements aren't strings or if toString()\n     * is not appropriate, a custom function which receives an object and returns a\n     * unique string must be provided.\n     */\n    function Bag(toStrFunction) {\n        this.toStrF = toStrFunction || util.defaultToString;\n        this.dictionary = new Dictionary_1.default(this.toStrF);\n        this.nElements = 0;\n    }\n    /**\n     * Adds nCopies of the specified object to this bag.\n     * @param {Object} element element to add.\n     * @param {number=} nCopies the number of copies to add, if this argument is\n     * undefined 1 copy is added.\n     * @return {boolean} true unless element is undefined.\n     */\n    Bag.prototype.add = function (element, nCopies) {\n        if (nCopies === void 0) { nCopies = 1; }\n        if (util.isUndefined(element) || nCopies <= 0) {\n            return false;\n        }\n        if (!this.contains(element)) {\n            var node = {\n                value: element,\n                copies: nCopies\n            };\n            this.dictionary.setValue(element, node);\n        }\n        else {\n            this.dictionary.getValue(element).copies += nCopies;\n        }\n        this.nElements += nCopies;\n        return true;\n    };\n    /**\n     * Counts the number of copies of the specified object in this bag.\n     * @param {Object} element the object to search for..\n     * @return {number} the number of copies of the object, 0 if not found\n     */\n    Bag.prototype.count = function (element) {\n        if (!this.contains(element)) {\n            return 0;\n        }\n        else {\n            return this.dictionary.getValue(element).copies;\n        }\n    };\n    /**\n     * Returns true if this bag contains the specified element.\n     * @param {Object} element element to search for.\n     * @return {boolean} true if this bag contains the specified element,\n     * false otherwise.\n     */\n    Bag.prototype.contains = function (element) {\n        return this.dictionary.containsKey(element);\n    };\n    /**\n     * Removes nCopies of the specified object to this bag.\n     * If the number of copies to remove is greater than the actual number\n     * of copies in the Bag, all copies are removed.\n     * @param {Object} element element to remove.\n     * @param {number=} nCopies the number of copies to remove, if this argument is\n     * undefined 1 copy is removed.\n     * @return {boolean} true if at least 1 element was removed.\n     */\n    Bag.prototype.remove = function (element, nCopies) {\n        if (nCopies === void 0) { nCopies = 1; }\n        if (util.isUndefined(element) || nCopies <= 0) {\n            return false;\n        }\n        if (!this.contains(element)) {\n            return false;\n        }\n        else {\n            var node = this.dictionary.getValue(element);\n            if (nCopies > node.copies) {\n                this.nElements -= node.copies;\n            }\n            else {\n                this.nElements -= nCopies;\n            }\n            node.copies -= nCopies;\n            if (node.copies <= 0) {\n                this.dictionary.remove(element);\n            }\n            return true;\n        }\n    };\n    /**\n     * Returns an array containing all of the elements in this big in arbitrary order,\n     * including multiple copies.\n     * @return {Array} an array containing all of the elements in this bag.\n     */\n    Bag.prototype.toArray = function () {\n        var a = [];\n        var values = this.dictionary.values();\n        for (var _i = 0, values_1 = values; _i < values_1.length; _i++) {\n            var node = values_1[_i];\n            var element = node.value;\n            var copies = node.copies;\n            for (var j = 0; j < copies; j++) {\n                a.push(element);\n            }\n        }\n        return a;\n    };\n    /**\n     * Returns a set of unique elements in this bag.\n     * @return {collections.Set<T>} a set of unique elements in this bag.\n     */\n    Bag.prototype.toSet = function () {\n        var toret = new Set_1.default(this.toStrF);\n        var elements = this.dictionary.values();\n        for (var _i = 0, elements_1 = elements; _i < elements_1.length; _i++) {\n            var ele = elements_1[_i];\n            var value = ele.value;\n            toret.add(value);\n        }\n        return toret;\n    };\n    /**\n     * Executes the provided function once for each element\n     * present in this bag, including multiple copies.\n     * @param {function(Object):*} callback function to execute, it is\n     * invoked with one argument: the element. To break the iteration you can\n     * optionally return false.\n     */\n    Bag.prototype.forEach = function (callback) {\n        this.dictionary.forEach(function (k, v) {\n            var value = v.value;\n            var copies = v.copies;\n            for (var i = 0; i < copies; i++) {\n                if (callback(value) === false) {\n                    return false;\n                }\n            }\n            return true;\n        });\n    };\n    /**\n     * Returns the number of elements in this bag.\n     * @return {number} the number of elements in this bag.\n     */\n    Bag.prototype.size = function () {\n        return this.nElements;\n    };\n    /**\n     * Returns true if this bag contains no elements.\n     * @return {boolean} true if this bag contains no elements.\n     */\n    Bag.prototype.isEmpty = function () {\n        return this.nElements === 0;\n    };\n    /**\n     * Removes all of the elements from this bag.\n     */\n    Bag.prototype.clear = function () {\n        this.nElements = 0;\n        this.dictionary.clear();\n    };\n    return Bag;\n}()); // End of bag\nexports.default = Bag;\n//# sourceMappingURL=Bag.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar util = require(\"./util\");\nvar Dictionary = /** @class */ (function () {\n    /**\n     * Creates an empty dictionary.\n     * @class <p>Dictionaries map keys to values; each key can map to at most one value.\n     * This implementation accepts any kind of objects as keys.</p>\n     *\n     * <p>If the keys are custom objects a function which converts keys to unique\n     * strings must be provided. Example:</p>\n     * <pre>\n     * function petToString(pet) {\n     *  return pet.name;\n     * }\n     * </pre>\n     * @constructor\n     * @param {function(Object):string=} toStrFunction optional function used\n     * to convert keys to strings. If the keys aren't strings or if toString()\n     * is not appropriate, a custom function which receives a key and returns a\n     * unique string must be provided.\n     */\n    function Dictionary(toStrFunction) {\n        this.table = {};\n        this.nElements = 0;\n        this.toStr = toStrFunction || util.defaultToString;\n    }\n    /**\n     * Returns the value to which this dictionary maps the specified key.\n     * Returns undefined if this dictionary contains no mapping for this key.\n     * @param {Object} key key whose associated value is to be returned.\n     * @return {*} the value to which this dictionary maps the specified key or\n     * undefined if the map contains no mapping for this key.\n     */\n    Dictionary.prototype.getValue = function (key) {\n        var pair = this.table['$' + this.toStr(key)];\n        if (util.isUndefined(pair)) {\n            return undefined;\n        }\n        return pair.value;\n    };\n    /**\n     * Associates the specified value with the specified key in this dictionary.\n     * If the dictionary previously contained a mapping for this key, the old\n     * value is replaced by the specified value.\n     * @param {Object} key key with which the specified value is to be\n     * associated.\n     * @param {Object} value value to be associated with the specified key.\n     * @return {*} previous value associated with the specified key, or undefined if\n     * there was no mapping for the key or if the key/value are undefined.\n     */\n    Dictionary.prototype.setValue = function (key, value) {\n        if (util.isUndefined(key) || util.isUndefined(value)) {\n            return undefined;\n        }\n        var ret;\n        var k = '$' + this.toStr(key);\n        var previousElement = this.table[k];\n        if (util.isUndefined(previousElement)) {\n            this.nElements++;\n            ret = undefined;\n        }\n        else {\n            ret = previousElement.value;\n        }\n        this.table[k] = {\n            key: key,\n            value: value\n        };\n        return ret;\n    };\n    /**\n     * Removes the mapping for this key from this dictionary if it is present.\n     * @param {Object} key key whose mapping is to be removed from the\n     * dictionary.\n     * @return {*} previous value associated with specified key, or undefined if\n     * there was no mapping for key.\n     */\n    Dictionary.prototype.remove = function (key) {\n        var k = '$' + this.toStr(key);\n        var previousElement = this.table[k];\n        if (!util.isUndefined(previousElement)) {\n            delete this.table[k];\n            this.nElements--;\n            return previousElement.value;\n        }\n        return undefined;\n    };\n    /**\n     * Returns an array containing all of the keys in this dictionary.\n     * @return {Array} an array containing all of the keys in this dictionary.\n     */\n    Dictionary.prototype.keys = function () {\n        var array = [];\n        for (var name_1 in this.table) {\n            if (util.has(this.table, name_1)) {\n                var pair = this.table[name_1];\n                array.push(pair.key);\n            }\n        }\n        return array;\n    };\n    /**\n     * Returns an array containing all of the values in this dictionary.\n     * @return {Array} an array containing all of the values in this dictionary.\n     */\n    Dictionary.prototype.values = function () {\n        var array = [];\n        for (var name_2 in this.table) {\n            if (util.has(this.table, name_2)) {\n                var pair = this.table[name_2];\n                array.push(pair.value);\n            }\n        }\n        return array;\n    };\n    /**\n     * Executes the provided function once for each key-value pair\n     * present in this dictionary.\n     * @param {function(Object,Object):*} callback function to execute, it is\n     * invoked with two arguments: key and value. To break the iteration you can\n     * optionally return false.\n     */\n    Dictionary.prototype.forEach = function (callback) {\n        for (var name_3 in this.table) {\n            if (util.has(this.table, name_3)) {\n                var pair = this.table[name_3];\n                var ret = callback(pair.key, pair.value);\n                if (ret === false) {\n                    return;\n                }\n            }\n        }\n    };\n    /**\n     * Returns true if this dictionary contains a mapping for the specified key.\n     * @param {Object} key key whose presence in this dictionary is to be\n     * tested.\n     * @return {boolean} true if this dictionary contains a mapping for the\n     * specified key.\n     */\n    Dictionary.prototype.containsKey = function (key) {\n        return !util.isUndefined(this.getValue(key));\n    };\n    /**\n     * Removes all mappings from this dictionary.\n     * @this {collections.Dictionary}\n     */\n    Dictionary.prototype.clear = function () {\n        this.table = {};\n        this.nElements = 0;\n    };\n    /**\n     * Returns the number of keys in this dictionary.\n     * @return {number} the number of key-value mappings in this dictionary.\n     */\n    Dictionary.prototype.size = function () {\n        return this.nElements;\n    };\n    /**\n     * Returns true if this dictionary contains no mappings.\n     * @return {boolean} true if this dictionary contains no mappings.\n     */\n    Dictionary.prototype.isEmpty = function () {\n        return this.nElements <= 0;\n    };\n    Dictionary.prototype.toString = function () {\n        var toret = '{';\n        this.forEach(function (k, v) {\n            toret += \"\\n\\t\" + k + \" : \" + v;\n        });\n        return toret + '\\n}';\n    };\n    return Dictionary;\n}()); // End of dictionary\nexports.default = Dictionary;\n//# sourceMappingURL=Dictionary.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Dictionary_1 = require(\"./Dictionary\");\nvar util = require(\"./util\");\nvar FactoryDictionary = /** @class */ (function (_super) {\n    __extends(FactoryDictionary, _super);\n    /**\n     * Creates an empty dictionary.\n     * @class <p>Dictionaries map keys to values; each key can map to at most one value.\n     * This implementation accepts any kind of objects as keys.</p>\n     *\n     * <p>The default factory function should return a new object of the provided\n     * type. Example:</p>\n     * <pre>\n     * function petFactory() {\n     *  return new Pet();\n     * }\n     * </pre>\n     *\n     * <p>If the keys are custom objects a function which converts keys to unique\n     * strings must be provided. Example:</p>\n     * <pre>\n     * function petToString(pet) {\n     *  return pet.name;\n     * }\n     * </pre>\n     * @constructor\n     * @param {function():V=} defaultFactoryFunction function used to create a\n     * default object.\n     * @param {function(Object):string=} toStrFunction optional function used\n     * to convert keys to strings. If the keys aren't strings or if toString()\n     * is not appropriate, a custom function which receives a key and returns a\n     * unique string must be provided.\n     */\n    function FactoryDictionary(defaultFactoryFunction, toStrFunction) {\n        var _this = _super.call(this, toStrFunction) || this;\n        _this.defaultFactoryFunction = defaultFactoryFunction;\n        return _this;\n    }\n    /**\n     * Associates the specified default value with the specified key in this dictionary,\n     * if it didn't contain the key yet. If the key existed, the existing value will be used.\n     * @param {Object} key key with which the specified value is to be\n     * associated.\n     * @param {Object} defaultValue default value to be associated with the specified key.\n     * @return {*} previous value associated with the specified key, or the default value,\n     * if the key didn't exist yet.\n     */\n    FactoryDictionary.prototype.setDefault = function (key, defaultValue) {\n        var currentValue = _super.prototype.getValue.call(this, key);\n        if (util.isUndefined(currentValue)) {\n            this.setValue(key, defaultValue);\n            return defaultValue;\n        }\n        return currentValue;\n    };\n    /**\n     * Returns the value to which this dictionary maps the specified key.\n     * Returns a default value created by the factory passed in the constructor,\n     * if this dictionary contains no mapping for this key. The missing key will\n     * automatically be added to the dictionary.\n     * @param {Object} key key whose associated value is to be returned.\n     * @return {*} the value to which this dictionary maps the specified key or\n     * a default value if the map contains no mapping for this key.\n     */\n    FactoryDictionary.prototype.getValue = function (key) {\n        return this.setDefault(key, this.defaultFactoryFunction());\n    };\n    return FactoryDictionary;\n}(Dictionary_1.default));\nexports.default = FactoryDictionary;\n//# sourceMappingURL=FactoryDictionary.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar collections = require(\"./util\");\nvar arrays = require(\"./arrays\");\nvar Heap = /** @class */ (function () {\n    /**\n     * Creates an empty Heap.\n     * @class\n     * <p>A heap is a binary tree, where the nodes maintain the heap property:\n     * each node is smaller than each of its children and therefore a MinHeap\n     * This implementation uses an array to store elements.</p>\n     * <p>If the inserted elements are custom objects a compare function must be provided,\n     *  at construction time, otherwise the <=, === and >= operators are\n     * used to compare elements. Example:</p>\n     *\n     * <pre>\n     * function compare(a, b) {\n     *  if (a is less than b by some ordering criterion) {\n     *     return -1;\n     *  } if (a is greater than b by the ordering criterion) {\n     *     return 1;\n     *  }\n     *  // a must be equal to b\n     *  return 0;\n     * }\n     * </pre>\n     *\n     * <p>If a Max-Heap is wanted (greater elements on top) you can a provide a\n     * reverse compare function to accomplish that behavior. Example:</p>\n     *\n     * <pre>\n     * function reverseCompare(a, b) {\n     *  if (a is less than b by some ordering criterion) {\n     *     return 1;\n     *  } if (a is greater than b by the ordering criterion) {\n     *     return -1;\n     *  }\n     *  // a must be equal to b\n     *  return 0;\n     * }\n     * </pre>\n     *\n     * @constructor\n     * @param {function(Object,Object):number=} compareFunction optional\n     * function used to compare two elements. Must return a negative integer,\n     * zero, or a positive integer as the first argument is less than, equal to,\n     * or greater than the second.\n     */\n    function Heap(compareFunction) {\n        /**\n         * Array used to store the elements of the heap.\n         * @type {Array.<Object>}\n         * @private\n         */\n        this.data = [];\n        this.compare = compareFunction || collections.defaultCompare;\n    }\n    /**\n     * Returns the index of the left child of the node at the given index.\n     * @param {number} nodeIndex The index of the node to get the left child\n     * for.\n     * @return {number} The index of the left child.\n     * @private\n     */\n    Heap.prototype.leftChildIndex = function (nodeIndex) {\n        return (2 * nodeIndex) + 1;\n    };\n    /**\n     * Returns the index of the right child of the node at the given index.\n     * @param {number} nodeIndex The index of the node to get the right child\n     * for.\n     * @return {number} The index of the right child.\n     * @private\n     */\n    Heap.prototype.rightChildIndex = function (nodeIndex) {\n        return (2 * nodeIndex) + 2;\n    };\n    /**\n     * Returns the index of the parent of the node at the given index.\n     * @param {number} nodeIndex The index of the node to get the parent for.\n     * @return {number} The index of the parent.\n     * @private\n     */\n    Heap.prototype.parentIndex = function (nodeIndex) {\n        return Math.floor((nodeIndex - 1) / 2);\n    };\n    /**\n     * Returns the index of the smaller child node (if it exists).\n     * @param {number} leftChild left child index.\n     * @param {number} rightChild right child index.\n     * @return {number} the index with the minimum value or -1 if it doesn't\n     * exists.\n     * @private\n     */\n    Heap.prototype.minIndex = function (leftChild, rightChild) {\n        if (rightChild >= this.data.length) {\n            if (leftChild >= this.data.length) {\n                return -1;\n            }\n            else {\n                return leftChild;\n            }\n        }\n        else {\n            if (this.compare(this.data[leftChild], this.data[rightChild]) <= 0) {\n                return leftChild;\n            }\n            else {\n                return rightChild;\n            }\n        }\n    };\n    /**\n     * Moves the node at the given index up to its proper place in the heap.\n     * @param {number} index The index of the node to move up.\n     * @private\n     */\n    Heap.prototype.siftUp = function (index) {\n        var parent = this.parentIndex(index);\n        while (index > 0 && this.compare(this.data[parent], this.data[index]) > 0) {\n            arrays.swap(this.data, parent, index);\n            index = parent;\n            parent = this.parentIndex(index);\n        }\n    };\n    /**\n     * Moves the node at the given index down to its proper place in the heap.\n     * @param {number} nodeIndex The index of the node to move down.\n     * @private\n     */\n    Heap.prototype.siftDown = function (nodeIndex) {\n        //smaller child index\n        var min = this.minIndex(this.leftChildIndex(nodeIndex), this.rightChildIndex(nodeIndex));\n        while (min >= 0 && this.compare(this.data[nodeIndex], this.data[min]) > 0) {\n            arrays.swap(this.data, min, nodeIndex);\n            nodeIndex = min;\n            min = this.minIndex(this.leftChildIndex(nodeIndex), this.rightChildIndex(nodeIndex));\n        }\n    };\n    /**\n     * Retrieves but does not remove the root element of this heap.\n     * @return {*} The value at the root of the heap. Returns undefined if the\n     * heap is empty.\n     */\n    Heap.prototype.peek = function () {\n        if (this.data.length > 0) {\n            return this.data[0];\n        }\n        else {\n            return undefined;\n        }\n    };\n    /**\n     * Adds the given element into the heap.\n     * @param {*} element the element.\n     * @return true if the element was added or fals if it is undefined.\n     */\n    Heap.prototype.add = function (element) {\n        if (collections.isUndefined(element)) {\n            return false;\n        }\n        this.data.push(element);\n        this.siftUp(this.data.length - 1);\n        return true;\n    };\n    /**\n     * Retrieves and removes the root element of this heap.\n     * @return {*} The value removed from the root of the heap. Returns\n     * undefined if the heap is empty.\n     */\n    Heap.prototype.removeRoot = function () {\n        if (this.data.length > 0) {\n            var obj = this.data[0];\n            this.data[0] = this.data[this.data.length - 1];\n            this.data.splice(this.data.length - 1, 1);\n            if (this.data.length > 0) {\n                this.siftDown(0);\n            }\n            return obj;\n        }\n        return undefined;\n    };\n    /**\n     * Returns true if this heap contains the specified element.\n     * @param {Object} element element to search for.\n     * @return {boolean} true if this Heap contains the specified element, false\n     * otherwise.\n     */\n    Heap.prototype.contains = function (element) {\n        var equF = collections.compareToEquals(this.compare);\n        return arrays.contains(this.data, element, equF);\n    };\n    /**\n     * Returns the number of elements in this heap.\n     * @return {number} the number of elements in this heap.\n     */\n    Heap.prototype.size = function () {\n        return this.data.length;\n    };\n    /**\n     * Checks if this heap is empty.\n     * @return {boolean} true if and only if this heap contains no items; false\n     * otherwise.\n     */\n    Heap.prototype.isEmpty = function () {\n        return this.data.length <= 0;\n    };\n    /**\n     * Removes all of the elements from this heap.\n     */\n    Heap.prototype.clear = function () {\n        this.data.length = 0;\n    };\n    /**\n     * Executes the provided function once for each element present in this heap in\n     * no particular order.\n     * @param {function(Object):*} callback function to execute, it is\n     * invoked with one argument: the element value, to break the iteration you can\n     * optionally return false.\n     */\n    Heap.prototype.forEach = function (callback) {\n        arrays.forEach(this.data, callback);\n    };\n    return Heap;\n}());\nexports.default = Heap;\n//# sourceMappingURL=Heap.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Dictionary_1 = require(\"./Dictionary\");\nvar util = require(\"./util\");\n/**\n * This class is used by the LinkedDictionary Internally\n * Has to be a class, not an interface, because it needs to have\n * the 'unlink' function defined.\n */\nvar LinkedDictionaryPair = /** @class */ (function () {\n    function LinkedDictionaryPair(key, value) {\n        this.key = key;\n        this.value = value;\n    }\n    LinkedDictionaryPair.prototype.unlink = function () {\n        this.prev.next = this.next;\n        this.next.prev = this.prev;\n    };\n    return LinkedDictionaryPair;\n}());\n/**\n * The head and tail elements of the list have null key and value properties but they\n * usually link to normal nodes.\n */\nvar HeadOrTailLinkedDictionaryPair = /** @class */ (function () {\n    function HeadOrTailLinkedDictionaryPair() {\n        this.key = null;\n        this.value = null;\n    }\n    HeadOrTailLinkedDictionaryPair.prototype.unlink = function () {\n        this.prev.next = this.next;\n        this.next.prev = this.prev;\n    };\n    return HeadOrTailLinkedDictionaryPair;\n}());\nfunction isHeadOrTailLinkedDictionaryPair(p) {\n    return !p.next;\n}\nvar LinkedDictionary = /** @class */ (function (_super) {\n    __extends(LinkedDictionary, _super);\n    function LinkedDictionary(toStrFunction) {\n        var _this = _super.call(this, toStrFunction) || this;\n        _this.head = new HeadOrTailLinkedDictionaryPair();\n        _this.tail = new HeadOrTailLinkedDictionaryPair();\n        _this.head.next = _this.tail;\n        _this.tail.prev = _this.head;\n        return _this;\n    }\n    /**\n     * Inserts the new node to the 'tail' of the list, updating the\n     * neighbors, and moving 'this.tail' (the End of List indicator) that\n     * to the end.\n     */\n    LinkedDictionary.prototype.appendToTail = function (entry) {\n        var lastNode = this.tail.prev;\n        lastNode.next = entry;\n        entry.prev = lastNode;\n        entry.next = this.tail;\n        this.tail.prev = entry;\n    };\n    /**\n     * Retrieves a linked dictionary from the table internally\n     */\n    LinkedDictionary.prototype.getLinkedDictionaryPair = function (key) {\n        if (util.isUndefined(key)) {\n            return undefined;\n        }\n        var k = '$' + this.toStr(key);\n        var pair = (this.table[k]);\n        return pair;\n    };\n    /**\n     * Returns the value to which this dictionary maps the specified key.\n     * Returns undefined if this dictionary contains no mapping for this key.\n     * @param {Object} key key whose associated value is to be returned.\n     * @return {*} the value to which this dictionary maps the specified key or\n     * undefined if the map contains no mapping for this key.\n     */\n    LinkedDictionary.prototype.getValue = function (key) {\n        var pair = this.getLinkedDictionaryPair(key);\n        if (!util.isUndefined(pair)) {\n            return pair.value;\n        }\n        return undefined;\n    };\n    /**\n     * Removes the mapping for this key from this dictionary if it is present.\n     * Also, if a value is present for this key, the entry is removed from the\n     * insertion ordering.\n     * @param {Object} key key whose mapping is to be removed from the\n     * dictionary.\n     * @return {*} previous value associated with specified key, or undefined if\n     * there was no mapping for key.\n     */\n    LinkedDictionary.prototype.remove = function (key) {\n        var pair = this.getLinkedDictionaryPair(key);\n        if (!util.isUndefined(pair)) {\n            _super.prototype.remove.call(this, key); // This will remove it from the table\n            pair.unlink(); // This will unlink it from the chain\n            return pair.value;\n        }\n        return undefined;\n    };\n    /**\n     * Removes all mappings from this LinkedDictionary.\n     * @this {collections.LinkedDictionary}\n     */\n    LinkedDictionary.prototype.clear = function () {\n        _super.prototype.clear.call(this);\n        this.head.next = this.tail;\n        this.tail.prev = this.head;\n    };\n    /**\n     * Internal function used when updating an existing KeyValue pair.\n     * It places the new value indexed by key into the table, but maintains\n     * its place in the linked ordering.\n     */\n    LinkedDictionary.prototype.replace = function (oldPair, newPair) {\n        var k = '$' + this.toStr(newPair.key);\n        // set the new Pair's links to existingPair's links\n        newPair.next = oldPair.next;\n        newPair.prev = oldPair.prev;\n        // Delete Existing Pair from the table, unlink it from chain.\n        // As a result, the nElements gets decremented by this operation\n        this.remove(oldPair.key);\n        // Link new Pair in place of where oldPair was,\n        // by pointing the old pair's neighbors to it.\n        newPair.prev.next = newPair;\n        newPair.next.prev = newPair;\n        this.table[k] = newPair;\n        // To make up for the fact that the number of elements was decremented,\n        // We need to increase it by one.\n        ++this.nElements;\n    };\n    /**\n     * Associates the specified value with the specified key in this dictionary.\n     * If the dictionary previously contained a mapping for this key, the old\n     * value is replaced by the specified value.\n     * Updating of a key that already exists maintains its place in the\n     * insertion order into the map.\n     * @param {Object} key key with which the specified value is to be\n     * associated.\n     * @param {Object} value value to be associated with the specified key.\n     * @return {*} previous value associated with the specified key, or undefined if\n     * there was no mapping for the key or if the key/value are undefined.\n     */\n    LinkedDictionary.prototype.setValue = function (key, value) {\n        if (util.isUndefined(key) || util.isUndefined(value)) {\n            return undefined;\n        }\n        var existingPair = this.getLinkedDictionaryPair(key);\n        var newPair = new LinkedDictionaryPair(key, value);\n        var k = '$' + this.toStr(key);\n        // If there is already an element for that key, we\n        // keep it's place in the LinkedList\n        if (!util.isUndefined(existingPair)) {\n            this.replace(existingPair, newPair);\n            return existingPair.value;\n        }\n        else {\n            this.appendToTail(newPair);\n            this.table[k] = newPair;\n            ++this.nElements;\n            return undefined;\n        }\n    };\n    /**\n     * Returns an array containing all of the keys in this LinkedDictionary, ordered\n     * by insertion order.\n     * @return {Array} an array containing all of the keys in this LinkedDictionary,\n     * ordered by insertion order.\n     */\n    LinkedDictionary.prototype.keys = function () {\n        var array = [];\n        this.forEach(function (key, value) {\n            array.push(key);\n        });\n        return array;\n    };\n    /**\n     * Returns an array containing all of the values in this LinkedDictionary, ordered by\n     * insertion order.\n     * @return {Array} an array containing all of the values in this LinkedDictionary,\n     * ordered by insertion order.\n     */\n    LinkedDictionary.prototype.values = function () {\n        var array = [];\n        this.forEach(function (key, value) {\n            array.push(value);\n        });\n        return array;\n    };\n    /**\n     * Executes the provided function once for each key-value pair\n     * present in this LinkedDictionary. It is done in the order of insertion\n     * into the LinkedDictionary\n     * @param {function(Object,Object):*} callback function to execute, it is\n     * invoked with two arguments: key and value. To break the iteration you can\n     * optionally return false.\n     */\n    LinkedDictionary.prototype.forEach = function (callback) {\n        var crawlNode = this.head.next;\n        while (!isHeadOrTailLinkedDictionaryPair(crawlNode)) {\n            var ret = callback(crawlNode.key, crawlNode.value);\n            if (ret === false) {\n                return;\n            }\n            crawlNode = crawlNode.next;\n        }\n    };\n    return LinkedDictionary;\n}(Dictionary_1.default)); // End of LinkedDictionary\nexports.default = LinkedDictionary;\n// /**\n//  * Returns true if this dictionary is equal to the given dictionary.\n//  * Two dictionaries are equal if they contain the same mappings.\n//  * @param {collections.Dictionary} other the other dictionary.\n//  * @param {function(Object,Object):boolean=} valuesEqualFunction optional\n//  * function used to check if two values are equal.\n//  * @return {boolean} true if this dictionary is equal to the given dictionary.\n//  */\n// collections.Dictionary.prototype.equals = function(other,valuesEqualFunction) {\n// \tconst eqF = valuesEqualFunction || collections.defaultEquals;\n// \tif(!(other instanceof collections.Dictionary)){\n// \t\treturn false;\n// \t}\n// \tif(this.size() !== other.size()){\n// \t\treturn false;\n// \t}\n// \treturn this.equalsAux(this.firstNode,other.firstNode,eqF);\n// }\n//# sourceMappingURL=LinkedDictionary.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar util = require(\"./util\");\nvar arrays = require(\"./arrays\");\nvar LinkedList = /** @class */ (function () {\n    /**\n     * Creates an empty Linked List.\n     * @class A linked list is a data structure consisting of a group of nodes\n     * which together represent a sequence.\n     * @constructor\n     */\n    function LinkedList() {\n        /**\n         * First node in the list\n         * @type {Object}\n         * @private\n         */\n        this.firstNode = null;\n        /**\n         * Last node in the list\n         * @type {Object}\n         * @private\n         */\n        this.lastNode = null;\n        /**\n         * Number of elements in the list\n         * @type {number}\n         * @private\n         */\n        this.nElements = 0;\n    }\n    /**\n     * Adds an element to this list.\n     * @param {Object} item element to be added.\n     * @param {number=} index optional index to add the element. If no index is specified\n     * the element is added to the end of this list.\n     * @return {boolean} true if the element was added or false if the index is invalid\n     * or if the element is undefined.\n     */\n    LinkedList.prototype.add = function (item, index) {\n        if (util.isUndefined(index)) {\n            index = this.nElements;\n        }\n        if (index < 0 || index > this.nElements || util.isUndefined(item)) {\n            return false;\n        }\n        var newNode = this.createNode(item);\n        if (this.nElements === 0 || this.lastNode === null) {\n            // First node in the list.\n            this.firstNode = newNode;\n            this.lastNode = newNode;\n        }\n        else if (index === this.nElements) {\n            // Insert at the end.\n            this.lastNode.next = newNode;\n            this.lastNode = newNode;\n        }\n        else if (index === 0) {\n            // Change first node.\n            newNode.next = this.firstNode;\n            this.firstNode = newNode;\n        }\n        else {\n            var prev = this.nodeAtIndex(index - 1);\n            if (prev === null) {\n                return false;\n            }\n            newNode.next = prev.next;\n            prev.next = newNode;\n        }\n        this.nElements++;\n        return true;\n    };\n    /**\n     * Returns the first element in this list.\n     * @return {*} the first element of the list or undefined if the list is\n     * empty.\n     */\n    LinkedList.prototype.first = function () {\n        if (this.firstNode !== null) {\n            return this.firstNode.element;\n        }\n        return undefined;\n    };\n    /**\n     * Returns the last element in this list.\n     * @return {*} the last element in the list or undefined if the list is\n     * empty.\n     */\n    LinkedList.prototype.last = function () {\n        if (this.lastNode !== null) {\n            return this.lastNode.element;\n        }\n        return undefined;\n    };\n    /**\n     * Returns the element at the specified position in this list.\n     * @param {number} index desired index.\n     * @return {*} the element at the given index or undefined if the index is\n     * out of bounds.\n     */\n    LinkedList.prototype.elementAtIndex = function (index) {\n        var node = this.nodeAtIndex(index);\n        if (node === null) {\n            return undefined;\n        }\n        return node.element;\n    };\n    /**\n     * Returns the index in this list of the first occurrence of the\n     * specified element, or -1 if the List does not contain this element.\n     * <p>If the elements inside this list are\n     * not comparable with the === operator a custom equals function should be\n     * provided to perform searches, the function must receive two arguments and\n     * return true if they are equal, false otherwise. Example:</p>\n     *\n     * <pre>\n     * const petsAreEqualByName = function(pet1, pet2) {\n     *  return pet1.name === pet2.name;\n     * }\n     * </pre>\n     * @param {Object} item element to search for.\n     * @param {function(Object,Object):boolean=} equalsFunction Optional\n     * function used to check if two elements are equal.\n     * @return {number} the index in this list of the first occurrence\n     * of the specified element, or -1 if this list does not contain the\n     * element.\n     */\n    LinkedList.prototype.indexOf = function (item, equalsFunction) {\n        var equalsF = equalsFunction || util.defaultEquals;\n        if (util.isUndefined(item)) {\n            return -1;\n        }\n        var currentNode = this.firstNode;\n        var index = 0;\n        while (currentNode !== null) {\n            if (equalsF(currentNode.element, item)) {\n                return index;\n            }\n            index++;\n            currentNode = currentNode.next;\n        }\n        return -1;\n    };\n    /**\n     * Returns true if this list contains the specified element.\n     * <p>If the elements inside the list are\n     * not comparable with the === operator a custom equals function should be\n     * provided to perform searches, the function must receive two arguments and\n     * return true if they are equal, false otherwise. Example:</p>\n     *\n     * <pre>\n     * const petsAreEqualByName = function(pet1, pet2) {\n     *  return pet1.name === pet2.name;\n     * }\n     * </pre>\n     * @param {Object} item element to search for.\n     * @param {function(Object,Object):boolean=} equalsFunction Optional\n     * function used to check if two elements are equal.\n     * @return {boolean} true if this list contains the specified element, false\n     * otherwise.\n     */\n    LinkedList.prototype.contains = function (item, equalsFunction) {\n        return (this.indexOf(item, equalsFunction) >= 0);\n    };\n    /**\n     * Removes the first occurrence of the specified element in this list.\n     * <p>If the elements inside the list are\n     * not comparable with the === operator a custom equals function should be\n     * provided to perform searches, the function must receive two arguments and\n     * return true if they are equal, false otherwise. Example:</p>\n     *\n     * <pre>\n     * const petsAreEqualByName = function(pet1, pet2) {\n     *  return pet1.name === pet2.name;\n     * }\n     * </pre>\n     * @param {Object} item element to be removed from this list, if present.\n     * @return {boolean} true if the list contained the specified element.\n     */\n    LinkedList.prototype.remove = function (item, equalsFunction) {\n        var equalsF = equalsFunction || util.defaultEquals;\n        if (this.nElements < 1 || util.isUndefined(item)) {\n            return false;\n        }\n        var previous = null;\n        var currentNode = this.firstNode;\n        while (currentNode !== null) {\n            if (equalsF(currentNode.element, item)) {\n                if (previous === null) {\n                    this.firstNode = currentNode.next;\n                    if (currentNode === this.lastNode) {\n                        this.lastNode = null;\n                    }\n                }\n                else if (currentNode === this.lastNode) {\n                    this.lastNode = previous;\n                    previous.next = currentNode.next;\n                    currentNode.next = null;\n                }\n                else {\n                    previous.next = currentNode.next;\n                    currentNode.next = null;\n                }\n                this.nElements--;\n                return true;\n            }\n            previous = currentNode;\n            currentNode = currentNode.next;\n        }\n        return false;\n    };\n    /**\n     * Removes all of the elements from this list.\n     */\n    LinkedList.prototype.clear = function () {\n        this.firstNode = null;\n        this.lastNode = null;\n        this.nElements = 0;\n    };\n    /**\n     * Returns true if this list is equal to the given list.\n     * Two lists are equal if they have the same elements in the same order.\n     * @param {LinkedList} other the other list.\n     * @param {function(Object,Object):boolean=} equalsFunction optional\n     * function used to check if two elements are equal. If the elements in the lists\n     * are custom objects you should provide a function, otherwise\n     * the === operator is used to check equality between elements.\n     * @return {boolean} true if this list is equal to the given list.\n     */\n    LinkedList.prototype.equals = function (other, equalsFunction) {\n        var eqF = equalsFunction || util.defaultEquals;\n        if (!(other instanceof LinkedList)) {\n            return false;\n        }\n        if (this.size() !== other.size()) {\n            return false;\n        }\n        return this.equalsAux(this.firstNode, other.firstNode, eqF);\n    };\n    /**\n     * @private\n     */\n    LinkedList.prototype.equalsAux = function (n1, n2, eqF) {\n        while (n1 !== null && n2 !== null) {\n            if (!eqF(n1.element, n2.element)) {\n                return false;\n            }\n            n1 = n1.next;\n            n2 = n2.next;\n        }\n        return true;\n    };\n    /**\n     * Removes the element at the specified position in this list.\n     * @param {number} index given index.\n     * @return {*} removed element or undefined if the index is out of bounds.\n     */\n    LinkedList.prototype.removeElementAtIndex = function (index) {\n        if (index < 0 || index >= this.nElements || this.firstNode === null || this.lastNode === null) {\n            return undefined;\n        }\n        var element;\n        if (this.nElements === 1) {\n            //First node in the list.\n            element = this.firstNode.element;\n            this.firstNode = null;\n            this.lastNode = null;\n        }\n        else {\n            var previous = this.nodeAtIndex(index - 1);\n            if (previous === null) {\n                element = this.firstNode.element;\n                this.firstNode = this.firstNode.next;\n            }\n            else if (previous.next === this.lastNode) {\n                element = this.lastNode.element;\n                this.lastNode = previous;\n            }\n            if (previous !== null && previous.next !== null) {\n                element = previous.next.element;\n                previous.next = previous.next.next;\n            }\n        }\n        this.nElements--;\n        return element;\n    };\n    /**\n     * Executes the provided function once for each element present in this list in order.\n     * @param {function(Object):*} callback function to execute, it is\n     * invoked with one argument: the element value, to break the iteration you can\n     * optionally return false.\n     */\n    LinkedList.prototype.forEach = function (callback) {\n        var currentNode = this.firstNode;\n        while (currentNode !== null) {\n            if (callback(currentNode.element) === false) {\n                break;\n            }\n            currentNode = currentNode.next;\n        }\n    };\n    /**\n     * Reverses the order of the elements in this linked list (makes the last\n     * element first, and the first element last).\n     */\n    LinkedList.prototype.reverse = function () {\n        var previous = null;\n        var current = this.firstNode;\n        var temp = null;\n        while (current !== null) {\n            temp = current.next;\n            current.next = previous;\n            previous = current;\n            current = temp;\n        }\n        temp = this.firstNode;\n        this.firstNode = this.lastNode;\n        this.lastNode = temp;\n    };\n    /**\n     * Returns an array containing all of the elements in this list in proper\n     * sequence.\n     * @return {Array.<*>} an array containing all of the elements in this list,\n     * in proper sequence.\n     */\n    LinkedList.prototype.toArray = function () {\n        var array = [];\n        var currentNode = this.firstNode;\n        while (currentNode !== null) {\n            array.push(currentNode.element);\n            currentNode = currentNode.next;\n        }\n        return array;\n    };\n    /**\n     * Returns the number of elements in this list.\n     * @return {number} the number of elements in this list.\n     */\n    LinkedList.prototype.size = function () {\n        return this.nElements;\n    };\n    /**\n     * Returns true if this list contains no elements.\n     * @return {boolean} true if this list contains no elements.\n     */\n    LinkedList.prototype.isEmpty = function () {\n        return this.nElements <= 0;\n    };\n    LinkedList.prototype.toString = function () {\n        return arrays.toString(this.toArray());\n    };\n    /**\n     * @private\n     */\n    LinkedList.prototype.nodeAtIndex = function (index) {\n        if (index < 0 || index >= this.nElements) {\n            return null;\n        }\n        if (index === (this.nElements - 1)) {\n            return this.lastNode;\n        }\n        var node = this.firstNode;\n        for (var i = 0; i < index && node !== null; i++) {\n            node = node.next;\n        }\n        return node;\n    };\n    /**\n     * @private\n     */\n    LinkedList.prototype.createNode = function (item) {\n        return {\n            element: item,\n            next: null\n        };\n    };\n    return LinkedList;\n}()); // End of linked list\nexports.default = LinkedList;\n//# sourceMappingURL=LinkedList.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar util = require(\"./util\");\nvar Dictionary_1 = require(\"./Dictionary\");\nvar arrays = require(\"./arrays\");\nvar MultiDictionary = /** @class */ (function () {\n    /**\n     * Creates an empty multi dictionary.\n     * @class <p>A multi dictionary is a special kind of dictionary that holds\n     * multiple values against each key. Setting a value into the dictionary will\n     * add the value to an array at that key. Getting a key will return an array,\n     * holding all the values set to that key.\n     * You can configure to allow duplicates in the values.\n     * This implementation accepts any kind of objects as keys.</p>\n     *\n     * <p>If the keys are custom objects a function which converts keys to strings must be\n     * provided. Example:</p>\n     *\n     * <pre>\n     * function petToString(pet) {\n     *     return pet.name;\n     * }\n     * </pre>\n     * <p>If the values are custom objects a function to check equality between values\n     * must be provided. Example:</p>\n     *\n     * <pre>\n     * function petsAreEqualByAge(pet1,pet2) {\n     *     return pet1.age === pet2.age;\n     * }\n     * </pre>\n     * @constructor\n     * @param {function(Object):string=} toStrFunction optional function\n     * to convert keys to strings. If the keys aren't strings or if toString()\n     * is not appropriate, a custom function which receives a key and returns a\n     * unique string must be provided.\n     * @param {function(Object,Object):boolean=} valuesEqualsFunction optional\n     * function to check if two values are equal.\n     *\n     * @param allowDuplicateValues\n     */\n    function MultiDictionary(toStrFunction, valuesEqualsFunction, allowDuplicateValues) {\n        if (allowDuplicateValues === void 0) { allowDuplicateValues = false; }\n        this.dict = new Dictionary_1.default(toStrFunction);\n        this.equalsF = valuesEqualsFunction || util.defaultEquals;\n        this.allowDuplicate = allowDuplicateValues;\n    }\n    /**\n     * Returns an array holding the values to which this dictionary maps\n     * the specified key.\n     * Returns an empty array if this dictionary contains no mappings for this key.\n     * @param {Object} key key whose associated values are to be returned.\n     * @return {Array} an array holding the values to which this dictionary maps\n     * the specified key.\n     */\n    MultiDictionary.prototype.getValue = function (key) {\n        var values = this.dict.getValue(key);\n        if (util.isUndefined(values)) {\n            return [];\n        }\n        return arrays.copy(values);\n    };\n    /**\n     * Adds the value to the array associated with the specified key, if\n     * it is not already present.\n     * @param {Object} key key with which the specified value is to be\n     * associated.\n     * @param {Object} value the value to add to the array at the key\n     * @return {boolean} true if the value was not already associated with that key.\n     */\n    MultiDictionary.prototype.setValue = function (key, value) {\n        if (util.isUndefined(key) || util.isUndefined(value)) {\n            return false;\n        }\n        var array = this.dict.getValue(key);\n        if (util.isUndefined(array)) {\n            this.dict.setValue(key, [value]);\n            return true;\n        }\n        if (!this.allowDuplicate) {\n            if (arrays.contains(array, value, this.equalsF)) {\n                return false;\n            }\n        }\n        array.push(value);\n        return true;\n    };\n    /**\n     * Removes the specified values from the array of values associated with the\n     * specified key. If a value isn't given, all values associated with the specified\n     * key are removed.\n     * @param {Object} key key whose mapping is to be removed from the\n     * dictionary.\n     * @param {Object=} value optional argument to specify the value to remove\n     * from the array associated with the specified key.\n     * @return {*} true if the dictionary changed, false if the key doesn't exist or\n     * if the specified value isn't associated with the specified key.\n     */\n    MultiDictionary.prototype.remove = function (key, value) {\n        if (util.isUndefined(value)) {\n            var v = this.dict.remove(key);\n            return !util.isUndefined(v);\n        }\n        var array = this.dict.getValue(key);\n        if (!util.isUndefined(array) && arrays.remove(array, value, this.equalsF)) {\n            if (array.length === 0) {\n                this.dict.remove(key);\n            }\n            return true;\n        }\n        return false;\n    };\n    /**\n     * Returns an array containing all of the keys in this dictionary.\n     * @return {Array} an array containing all of the keys in this dictionary.\n     */\n    MultiDictionary.prototype.keys = function () {\n        return this.dict.keys();\n    };\n    /**\n     * Returns an array containing all of the values in this dictionary.\n     * @return {Array} an array containing all of the values in this dictionary.\n     */\n    MultiDictionary.prototype.values = function () {\n        var values = this.dict.values();\n        var array = [];\n        for (var _i = 0, values_1 = values; _i < values_1.length; _i++) {\n            var v = values_1[_i];\n            for (var _a = 0, v_1 = v; _a < v_1.length; _a++) {\n                var w = v_1[_a];\n                array.push(w);\n            }\n        }\n        return array;\n    };\n    /**\n     * Returns true if this dictionary at least one value associatted the specified key.\n     * @param {Object} key key whose presence in this dictionary is to be\n     * tested.\n     * @return {boolean} true if this dictionary at least one value associatted\n     * the specified key.\n     */\n    MultiDictionary.prototype.containsKey = function (key) {\n        return this.dict.containsKey(key);\n    };\n    /**\n     * Removes all mappings from this dictionary.\n     */\n    MultiDictionary.prototype.clear = function () {\n        this.dict.clear();\n    };\n    /**\n     * Returns the number of keys in this dictionary.\n     * @return {number} the number of key-value mappings in this dictionary.\n     */\n    MultiDictionary.prototype.size = function () {\n        return this.dict.size();\n    };\n    /**\n     * Returns true if this dictionary contains no mappings.\n     * @return {boolean} true if this dictionary contains no mappings.\n     */\n    MultiDictionary.prototype.isEmpty = function () {\n        return this.dict.isEmpty();\n    };\n    return MultiDictionary;\n}()); // end of multi dictionary\nexports.default = MultiDictionary;\n//# sourceMappingURL=MultiDictionary.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Direction;\n(function (Direction) {\n    Direction[Direction[\"BEFORE\"] = 0] = \"BEFORE\";\n    Direction[Direction[\"AFTER\"] = 1] = \"AFTER\";\n    Direction[Direction[\"INSIDE_AT_END\"] = 2] = \"INSIDE_AT_END\";\n    Direction[Direction[\"INSIDE_AT_START\"] = 3] = \"INSIDE_AT_START\";\n})(Direction || (Direction = {}));\nvar MultiRootTree = /** @class */ (function () {\n    function MultiRootTree(rootIds, nodes) {\n        if (rootIds === void 0) { rootIds = []; }\n        if (nodes === void 0) { nodes = {}; }\n        this.rootIds = rootIds;\n        this.nodes = nodes;\n        this.initRootIds();\n        this.initNodes();\n    }\n    MultiRootTree.prototype.initRootIds = function () {\n        for (var _i = 0, _a = this.rootIds; _i < _a.length; _i++) {\n            var rootId = _a[_i];\n            this.createEmptyNodeIfNotExist(rootId);\n        }\n    };\n    MultiRootTree.prototype.initNodes = function () {\n        for (var nodeKey in this.nodes) {\n            if (this.nodes.hasOwnProperty(nodeKey)) {\n                for (var _i = 0, _a = this.nodes[nodeKey]; _i < _a.length; _i++) {\n                    var nodeListItem = _a[_i];\n                    this.createEmptyNodeIfNotExist(nodeListItem);\n                }\n            }\n        }\n    };\n    MultiRootTree.prototype.createEmptyNodeIfNotExist = function (nodeKey) {\n        if (!this.nodes[nodeKey]) {\n            this.nodes[nodeKey] = [];\n        }\n    };\n    MultiRootTree.prototype.getRootIds = function () {\n        var clone = this.rootIds.slice();\n        return clone;\n    };\n    MultiRootTree.prototype.getNodes = function () {\n        var clone = {};\n        for (var nodeKey in this.nodes) {\n            if (this.nodes.hasOwnProperty(nodeKey)) {\n                clone[nodeKey] = this.nodes[nodeKey].slice();\n            }\n        }\n        return clone;\n    };\n    MultiRootTree.prototype.getObject = function () {\n        return {\n            rootIds: this.getRootIds(),\n            nodes: this.getNodes(),\n        };\n    };\n    MultiRootTree.prototype.toObject = function () {\n        return this.getObject();\n    };\n    MultiRootTree.prototype.flatten = function () {\n        var _this = this;\n        var extraPropsObject = [];\n        for (var i = 0; i < this.rootIds.length; i++) {\n            var rootId = this.rootIds[i];\n            extraPropsObject.push({\n                id: rootId,\n                level: 0,\n                hasParent: false,\n                childrenCount: 0,\n            });\n            traverse(rootId, this.nodes, extraPropsObject, 0);\n        }\n        for (var _i = 0, extraPropsObject_1 = extraPropsObject; _i < extraPropsObject_1.length; _i++) {\n            var o = extraPropsObject_1[_i];\n            o.childrenCount = countChildren(o.id);\n        }\n        return extraPropsObject;\n        function countChildren(id) {\n            if (!_this.nodes[id]) {\n                return 0;\n            }\n            else {\n                var childrenCount = _this.nodes[id].length;\n                return childrenCount;\n            }\n        }\n        function traverse(startId, nodes, returnArray, level) {\n            if (level === void 0) { level = 0; }\n            if (!startId || !nodes || !returnArray || !nodes[startId]) {\n                return;\n            }\n            level++;\n            var idsList = nodes[startId];\n            for (var i = 0; i < idsList.length; i++) {\n                var id = idsList[i];\n                returnArray.push({ id: id, level: level, hasParent: true });\n                traverse(id, nodes, returnArray, level);\n            }\n            level--;\n        }\n    };\n    MultiRootTree.prototype.moveIdBeforeId = function (moveId, beforeId) {\n        return this.moveId(moveId, beforeId, Direction.BEFORE);\n    };\n    MultiRootTree.prototype.moveIdAfterId = function (moveId, afterId) {\n        return this.moveId(moveId, afterId, Direction.AFTER);\n    };\n    MultiRootTree.prototype.moveIdIntoId = function (moveId, insideId, atStart) {\n        if (atStart === void 0) { atStart = true; }\n        if (atStart) {\n            return this.moveId(moveId, insideId, Direction.INSIDE_AT_START);\n        }\n        else {\n            return this.moveId(moveId, insideId, Direction.INSIDE_AT_END);\n        }\n    };\n    MultiRootTree.prototype.swapRootIdWithRootId = function (rootId, withRootId) {\n        var leftIndex = this.findRootId(rootId);\n        var rightIndex = this.findRootId(withRootId);\n        this.swapRootPositionWithRootPosition(leftIndex, rightIndex);\n    };\n    MultiRootTree.prototype.swapRootPositionWithRootPosition = function (swapRootPosition, withRootPosition) {\n        var temp = this.rootIds[withRootPosition];\n        this.rootIds[withRootPosition] = this.rootIds[swapRootPosition];\n        this.rootIds[swapRootPosition] = temp;\n    };\n    MultiRootTree.prototype.deleteId = function (id) {\n        this.rootDeleteId(id);\n        this.nodeAndSubNodesDelete(id);\n        this.nodeRefrencesDelete(id);\n    };\n    MultiRootTree.prototype.insertIdBeforeId = function (beforeId, insertId) {\n        var foundRootIdIndex = this.findRootId(beforeId);\n        if (foundRootIdIndex > -1) {\n            this.insertIdIntoRoot(insertId, foundRootIdIndex);\n        }\n        for (var nodeKey in this.nodes) {\n            if (this.nodes.hasOwnProperty(nodeKey)) {\n                var foundNodeIdIndex = this.findNodeId(nodeKey, beforeId);\n                if (foundNodeIdIndex > -1) {\n                    this.insertIdIntoNode(nodeKey, insertId, foundNodeIdIndex);\n                }\n            }\n        }\n    };\n    MultiRootTree.prototype.insertIdAfterId = function (belowId, insertId) {\n        var foundRootIdIndex = this.findRootId(belowId);\n        if (foundRootIdIndex > -1) {\n            this.insertIdIntoRoot(insertId, foundRootIdIndex + 1);\n        }\n        for (var nodeKey in this.nodes) {\n            if (this.nodes.hasOwnProperty(nodeKey)) {\n                var foundNodeIdIndex = this.findNodeId(nodeKey, belowId);\n                if (foundNodeIdIndex > -1) {\n                    this.insertIdIntoNode(nodeKey, insertId, foundNodeIdIndex + 1);\n                }\n            }\n        }\n    };\n    MultiRootTree.prototype.insertIdIntoId = function (insideId, insertId) {\n        this.nodeInsertAtEnd(insideId, insertId);\n        this.nodes[insertId] = [];\n    };\n    MultiRootTree.prototype.insertIdIntoRoot = function (id, position) {\n        if (position === undefined) {\n            this.rootInsertAtEnd(id);\n        }\n        else {\n            if (position < 0) {\n                var length_1 = this.rootIds.length;\n                this.rootIds.splice((position + length_1 + 1), 0, id);\n            }\n            else {\n                this.rootIds.splice(position, 0, id);\n            }\n        }\n        this.nodes[id] = this.nodes[id] || [];\n    };\n    MultiRootTree.prototype.insertIdIntoNode = function (nodeKey, id, position) {\n        this.nodes[nodeKey] = this.nodes[nodeKey] || [];\n        this.nodes[id] = this.nodes[id] || [];\n        if (position === undefined) {\n            this.nodeInsertAtEnd(nodeKey, id);\n        }\n        else {\n            if (position < 0) {\n                var length_2 = this.nodes[nodeKey].length;\n                this.nodes[nodeKey].splice((position + length_2 + 1), 0, id);\n            }\n            else {\n                this.nodes[nodeKey].splice(position, 0, id);\n            }\n        }\n    };\n    MultiRootTree.prototype.moveId = function (moveId, beforeId, direction) {\n        var sourceId = moveId;\n        var sourceRootIndex = this.findRootId(sourceId);\n        var sourceNodeKey;\n        var sourceNodeIdIndex;\n        if (this.nodes[beforeId]) {\n            sourceNodeKey = beforeId;\n        }\n        for (var nodeKey in this.nodes) {\n            if (this.nodes.hasOwnProperty(nodeKey)) {\n                sourceNodeIdIndex = this.findNodeId(nodeKey, beforeId);\n                break;\n            }\n        }\n        // got all\n        var targetId = beforeId;\n        var targetRootIndex = this.findRootId(targetId);\n        var targetNodeKey;\n        var targetNodeIdIndex;\n        if (this.nodes[beforeId]) {\n            targetNodeKey = beforeId;\n        }\n        for (var nodeKey in this.nodes) {\n            if (this.nodes.hasOwnProperty(nodeKey)) {\n                targetNodeIdIndex = this.findNodeId(nodeKey, beforeId);\n                break;\n            }\n        }\n        // got all\n        if (sourceRootIndex > -1) {\n            if (targetRootIndex > -1) {\n                // moving root to root\n                // console.log(`Moving ROOT to ROOT`);\n                // console.log(`RootIds:`);\n                // console.log(this.rootIds);\n                // console.log(`TargetIndex=${targetRootIndex}, SourceIndex=${sourceRootIndex}`);\n                // console.log(`TargetId=${targetId}, SourceId=${sourceId}`);\n                this.rootDelete(sourceRootIndex); // indexes change now\n                if (targetRootIndex > sourceRootIndex) {\n                    targetRootIndex--;\n                }\n                else {\n                }\n                switch (direction) {\n                    case Direction.BEFORE:\n                        this.insertIdIntoRoot(sourceId, targetRootIndex);\n                        break;\n                    case Direction.AFTER:\n                        this.insertIdIntoRoot(sourceId, targetRootIndex + 1);\n                        break;\n                    case Direction.INSIDE_AT_START:\n                        this.nodeInsertAtStart(targetId, sourceId);\n                        break;\n                    case Direction.INSIDE_AT_END:\n                        this.nodeInsertAtEnd(targetId, sourceId);\n                        break;\n                }\n            }\n            else {\n                // moving root (source) ABOVE node (target)\n                // will remove one entry from roots\n                this.rootDelete(sourceRootIndex);\n                for (var nodeKey in this.nodes) {\n                    if (this.nodes.hasOwnProperty(nodeKey)) {\n                        var index = this.findNodeId(nodeKey, targetId);\n                        if (index > -1) {\n                            switch (direction) {\n                                case Direction.BEFORE:\n                                    this.insertIdIntoNode(nodeKey, sourceId, index);\n                                    break;\n                                case Direction.AFTER:\n                                    this.insertIdIntoNode(nodeKey, sourceId, index + 1);\n                                    break;\n                                case Direction.INSIDE_AT_START:\n                                    this.nodeInsertAtStart(targetId, sourceId);\n                                    break;\n                                case Direction.INSIDE_AT_END:\n                                    this.nodeInsertAtEnd(targetId, sourceId);\n                                    break;\n                            }\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n        else {\n            if (targetRootIndex > -1) {\n                // moving node (source) ABOVE root (target)\n                // delete source id from each node\n                for (var nodeKey in this.nodes) {\n                    if (this.nodes.hasOwnProperty(nodeKey)) {\n                        var index = this.findNodeId(nodeKey, sourceId);\n                        if (index > -1) {\n                            // this.nodeInsertId(nodeKey, sourceId, index);\n                            this.nodeDeleteAtIndex(nodeKey, index);\n                            break;\n                        }\n                    }\n                }\n                switch (direction) {\n                    case Direction.BEFORE:\n                        this.insertIdIntoRoot(sourceId, targetRootIndex);\n                        break;\n                    case Direction.AFTER:\n                        this.insertIdIntoRoot(sourceId, targetRootIndex + 1);\n                        break;\n                    case Direction.INSIDE_AT_START:\n                        this.nodeInsertAtStart(targetId, sourceId);\n                        break;\n                    case Direction.INSIDE_AT_END:\n                        this.nodeInsertAtEnd(targetId, sourceId);\n                        break;\n                }\n            }\n            else {\n                // moving node (source) ABOVE node (target)\n                // delete source id from each node\n                for (var nodeKey in this.nodes) {\n                    if (this.nodes.hasOwnProperty(nodeKey)) {\n                        var index = this.findNodeId(nodeKey, sourceId);\n                        if (index > -1) {\n                            this.nodeDeleteAtIndex(nodeKey, index);\n                            break;\n                        }\n                    }\n                }\n                for (var nodeKey in this.nodes) {\n                    if (this.nodes.hasOwnProperty(nodeKey)) {\n                        var index = this.findNodeId(nodeKey, targetId);\n                        if (index > -1) {\n                            switch (direction) {\n                                case Direction.BEFORE:\n                                    this.insertIdIntoNode(nodeKey, sourceId, index);\n                                    break;\n                                case Direction.AFTER:\n                                    this.insertIdIntoNode(nodeKey, sourceId, index + 1);\n                                    break;\n                                case Direction.INSIDE_AT_START:\n                                    this.nodeInsertAtStart(targetId, sourceId);\n                                    break;\n                                case Direction.INSIDE_AT_END:\n                                    this.nodeInsertAtEnd(targetId, sourceId);\n                                    break;\n                            }\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n    };\n    MultiRootTree.prototype.swapArrayElements = function (arr, indexA, indexB) {\n        var temp = arr[indexA];\n        arr[indexA] = arr[indexB];\n        arr[indexB] = temp;\n        return arr;\n    };\n    MultiRootTree.prototype.rootDeleteId = function (id) {\n        var index = this.findRootId(id);\n        if (index > -1) {\n            this.rootDelete(index);\n        }\n    };\n    MultiRootTree.prototype.nodeAndSubNodesDelete = function (nodeKey) {\n        var toDeleteLater = [];\n        for (var i = 0; i < this.nodes[nodeKey].length; i++) {\n            var id = this.nodes[nodeKey][i];\n            this.nodeAndSubNodesDelete(id);\n            toDeleteLater.push(nodeKey);\n        }\n        this.nodeDelete(nodeKey);\n        for (var i = 0; i < toDeleteLater.length; i++) {\n            this.nodeDelete(toDeleteLater[i]);\n        }\n    };\n    MultiRootTree.prototype.nodeRefrencesDelete = function (id) {\n        for (var nodeKey in this.nodes) {\n            if (this.nodes.hasOwnProperty(nodeKey)) {\n                for (var i = 0; i < this.nodes[nodeKey].length; i++) {\n                    var targetId = this.nodes[nodeKey][i];\n                    if (targetId === id) {\n                        this.nodeDeleteAtIndex(nodeKey, i);\n                    }\n                }\n            }\n        }\n    };\n    MultiRootTree.prototype.nodeDelete = function (nodeKey) {\n        delete this.nodes[nodeKey];\n    };\n    MultiRootTree.prototype.findRootId = function (id) {\n        return this.rootIds.indexOf(id);\n    };\n    MultiRootTree.prototype.findNodeId = function (nodeKey, id) {\n        return this.nodes[nodeKey].indexOf(id);\n    };\n    MultiRootTree.prototype.findNode = function (nodeKey) {\n        return this.nodes[nodeKey];\n    };\n    MultiRootTree.prototype.nodeInsertAtStart = function (nodeKey, id) {\n        this.nodes[nodeKey].unshift(id);\n    };\n    MultiRootTree.prototype.nodeInsertAtEnd = function (nodeKey, id) {\n        this.nodes[nodeKey].push(id);\n    };\n    MultiRootTree.prototype.rootDelete = function (index) {\n        this.rootIds.splice(index, 1);\n    };\n    MultiRootTree.prototype.nodeDeleteAtIndex = function (nodeKey, index) {\n        this.nodes[nodeKey].splice(index, 1);\n    };\n    MultiRootTree.prototype.rootInsertAtStart = function (id) {\n        this.rootIds.unshift(id);\n    };\n    MultiRootTree.prototype.rootInsertAtEnd = function (id) {\n        this.rootIds.push(id);\n    };\n    return MultiRootTree;\n}());\nexports.default = MultiRootTree;\n//# sourceMappingURL=MultiRootTree.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar util = require(\"./util\");\nvar Heap_1 = require(\"./Heap\");\nvar PriorityQueue = /** @class */ (function () {\n    /**\n     * Creates an empty priority queue.\n     * @class <p>In a priority queue each element is associated with a \"priority\",\n     * elements are dequeued in highest-priority-first order (the elements with the\n     * highest priority are dequeued first). Priority Queues are implemented as heaps.\n     * If the inserted elements are custom objects a compare function must be provided,\n     * otherwise the <=, === and >= operators are used to compare object priority.</p>\n     * <pre>\n     * function compare(a, b) {\n     *  if (a is less than b by some ordering criterion) {\n     *     return -1;\n     *  } if (a is greater than b by the ordering criterion) {\n     *     return 1;\n     *  }\n     *  // a must be equal to b\n     *  return 0;\n     * }\n     * </pre>\n     * @constructor\n     * @param {function(Object,Object):number=} compareFunction optional\n     * function used to compare two element priorities. Must return a negative integer,\n     * zero, or a positive integer as the first argument is less than, equal to,\n     * or greater than the second.\n     */\n    function PriorityQueue(compareFunction) {\n        this.heap = new Heap_1.default(util.reverseCompareFunction(compareFunction));\n    }\n    /**\n     * Inserts the specified element into this priority queue.\n     * @param {Object} element the element to insert.\n     * @return {boolean} true if the element was inserted, or false if it is undefined.\n     */\n    PriorityQueue.prototype.enqueue = function (element) {\n        return this.heap.add(element);\n    };\n    /**\n     * Inserts the specified element into this priority queue.\n     * @param {Object} element the element to insert.\n     * @return {boolean} true if the element was inserted, or false if it is undefined.\n     */\n    PriorityQueue.prototype.add = function (element) {\n        return this.heap.add(element);\n    };\n    /**\n     * Retrieves and removes the highest priority element of this queue.\n     * @return {*} the the highest priority element of this queue,\n     *  or undefined if this queue is empty.\n     */\n    PriorityQueue.prototype.dequeue = function () {\n        if (this.heap.size() !== 0) {\n            var el = this.heap.peek();\n            this.heap.removeRoot();\n            return el;\n        }\n        return undefined;\n    };\n    /**\n     * Retrieves, but does not remove, the highest priority element of this queue.\n     * @return {*} the highest priority element of this queue, or undefined if this queue is empty.\n     */\n    PriorityQueue.prototype.peek = function () {\n        return this.heap.peek();\n    };\n    /**\n     * Returns true if this priority queue contains the specified element.\n     * @param {Object} element element to search for.\n     * @return {boolean} true if this priority queue contains the specified element,\n     * false otherwise.\n     */\n    PriorityQueue.prototype.contains = function (element) {\n        return this.heap.contains(element);\n    };\n    /**\n     * Checks if this priority queue is empty.\n     * @return {boolean} true if and only if this priority queue contains no items; false\n     * otherwise.\n     */\n    PriorityQueue.prototype.isEmpty = function () {\n        return this.heap.isEmpty();\n    };\n    /**\n     * Returns the number of elements in this priority queue.\n     * @return {number} the number of elements in this priority queue.\n     */\n    PriorityQueue.prototype.size = function () {\n        return this.heap.size();\n    };\n    /**\n     * Removes all of the elements from this priority queue.\n     */\n    PriorityQueue.prototype.clear = function () {\n        this.heap.clear();\n    };\n    /**\n     * Executes the provided function once for each element present in this queue in\n     * no particular order.\n     * @param {function(Object):*} callback function to execute, it is\n     * invoked with one argument: the element value, to break the iteration you can\n     * optionally return false.\n     */\n    PriorityQueue.prototype.forEach = function (callback) {\n        this.heap.forEach(callback);\n    };\n    return PriorityQueue;\n}()); // end of priority queue\nexports.default = PriorityQueue;\n//# sourceMappingURL=PriorityQueue.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar LinkedList_1 = require(\"./LinkedList\");\nvar Queue = /** @class */ (function () {\n    /**\n     * Creates an empty queue.\n     * @class A queue is a First-In-First-Out (FIFO) data structure, the first\n     * element added to the queue will be the first one to be removed. This\n     * implementation uses a linked list as a container.\n     * @constructor\n     */\n    function Queue() {\n        this.list = new LinkedList_1.default();\n    }\n    /**\n     * Inserts the specified element into the end of this queue.\n     * @param {Object} elem the element to insert.\n     * @return {boolean} true if the element was inserted, or false if it is undefined.\n     */\n    Queue.prototype.enqueue = function (elem) {\n        return this.list.add(elem);\n    };\n    /**\n     * Inserts the specified element into the end of this queue.\n     * @param {Object} elem the element to insert.\n     * @return {boolean} true if the element was inserted, or false if it is undefined.\n     */\n    Queue.prototype.add = function (elem) {\n        return this.list.add(elem);\n    };\n    /**\n     * Retrieves and removes the head of this queue.\n     * @return {*} the head of this queue, or undefined if this queue is empty.\n     */\n    Queue.prototype.dequeue = function () {\n        if (this.list.size() !== 0) {\n            var el = this.list.first();\n            this.list.removeElementAtIndex(0);\n            return el;\n        }\n        return undefined;\n    };\n    /**\n     * Retrieves, but does not remove, the head of this queue.\n     * @return {*} the head of this queue, or undefined if this queue is empty.\n     */\n    Queue.prototype.peek = function () {\n        if (this.list.size() !== 0) {\n            return this.list.first();\n        }\n        return undefined;\n    };\n    /**\n     * Returns the number of elements in this queue.\n     * @return {number} the number of elements in this queue.\n     */\n    Queue.prototype.size = function () {\n        return this.list.size();\n    };\n    /**\n     * Returns true if this queue contains the specified element.\n     * <p>If the elements inside this stack are\n     * not comparable with the === operator, a custom equals function should be\n     * provided to perform searches, the function must receive two arguments and\n     * return true if they are equal, false otherwise. Example:</p>\n     *\n     * <pre>\n     * const petsAreEqualByName (pet1, pet2) {\n     *  return pet1.name === pet2.name;\n     * }\n     * </pre>\n     * @param {Object} elem element to search for.\n     * @param {function(Object,Object):boolean=} equalsFunction optional\n     * function to check if two elements are equal.\n     * @return {boolean} true if this queue contains the specified element,\n     * false otherwise.\n     */\n    Queue.prototype.contains = function (elem, equalsFunction) {\n        return this.list.contains(elem, equalsFunction);\n    };\n    /**\n     * Checks if this queue is empty.\n     * @return {boolean} true if and only if this queue contains no items; false\n     * otherwise.\n     */\n    Queue.prototype.isEmpty = function () {\n        return this.list.size() <= 0;\n    };\n    /**\n     * Removes all of the elements from this queue.\n     */\n    Queue.prototype.clear = function () {\n        this.list.clear();\n    };\n    /**\n     * Executes the provided function once for each element present in this queue in\n     * FIFO order.\n     * @param {function(Object):*} callback function to execute, it is\n     * invoked with one argument: the element value, to break the iteration you can\n     * optionally return false.\n     */\n    Queue.prototype.forEach = function (callback) {\n        this.list.forEach(callback);\n    };\n    return Queue;\n}()); // End of queue\nexports.default = Queue;\n//# sourceMappingURL=Queue.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar util = require(\"./util\");\nvar arrays = require(\"./arrays\");\nvar Dictionary_1 = require(\"./Dictionary\");\nvar Set = /** @class */ (function () {\n    /**\n     * Creates an empty set.\n     * @class <p>A set is a data structure that contains no duplicate items.</p>\n     * <p>If the inserted elements are custom objects a function\n     * which converts elements to strings must be provided. Example:</p>\n     *\n     * <pre>\n     * function petToString(pet) {\n     *  return pet.name;\n     * }\n     * </pre>\n     *\n     * @constructor\n     * @param {function(Object):string=} toStringFunction optional function used\n     * to convert elements to strings. If the elements aren't strings or if toString()\n     * is not appropriate, a custom function which receives an object and returns a\n     * unique string must be provided.\n     */\n    function Set(toStringFunction) {\n        this.dictionary = new Dictionary_1.default(toStringFunction);\n    }\n    /**\n     * Returns true if this set contains the specified element.\n     * @param {Object} element element to search for.\n     * @return {boolean} true if this set contains the specified element,\n     * false otherwise.\n     */\n    Set.prototype.contains = function (element) {\n        return this.dictionary.containsKey(element);\n    };\n    /**\n     * Adds the specified element to this set if it is not already present.\n     * @param {Object} element the element to insert.\n     * @return {boolean} true if this set did not already contain the specified element.\n     */\n    Set.prototype.add = function (element) {\n        if (this.contains(element) || util.isUndefined(element)) {\n            return false;\n        }\n        else {\n            this.dictionary.setValue(element, element);\n            return true;\n        }\n    };\n    /**\n     * Performs an intersection between this and another set.\n     * Removes all values that are not present this set and the given set.\n     * @param {collections.Set} otherSet other set.\n     */\n    Set.prototype.intersection = function (otherSet) {\n        var set = this;\n        this.forEach(function (element) {\n            if (!otherSet.contains(element)) {\n                set.remove(element);\n            }\n            return true;\n        });\n    };\n    /**\n     * Performs a union between this and another set.\n     * Adds all values from the given set to this set.\n     * @param {collections.Set} otherSet other set.\n     */\n    Set.prototype.union = function (otherSet) {\n        var set = this;\n        otherSet.forEach(function (element) {\n            set.add(element);\n            return true;\n        });\n    };\n    /**\n     * Performs a difference between this and another set.\n     * Removes from this set all the values that are present in the given set.\n     * @param {collections.Set} otherSet other set.\n     */\n    Set.prototype.difference = function (otherSet) {\n        var set = this;\n        otherSet.forEach(function (element) {\n            set.remove(element);\n            return true;\n        });\n    };\n    /**\n     * Checks whether the given set contains all the elements in this set.\n     * @param {collections.Set} otherSet other set.\n     * @return {boolean} true if this set is a subset of the given set.\n     */\n    Set.prototype.isSubsetOf = function (otherSet) {\n        if (this.size() > otherSet.size()) {\n            return false;\n        }\n        var isSub = true;\n        this.forEach(function (element) {\n            if (!otherSet.contains(element)) {\n                isSub = false;\n                return false;\n            }\n            return true;\n        });\n        return isSub;\n    };\n    /**\n     * Removes the specified element from this set if it is present.\n     * @return {boolean} true if this set contained the specified element.\n     */\n    Set.prototype.remove = function (element) {\n        if (!this.contains(element)) {\n            return false;\n        }\n        else {\n            this.dictionary.remove(element);\n            return true;\n        }\n    };\n    /**\n     * Executes the provided function once for each element\n     * present in this set.\n     * @param {function(Object):*} callback function to execute, it is\n     * invoked with one arguments: the element. To break the iteration you can\n     * optionally return false.\n     */\n    Set.prototype.forEach = function (callback) {\n        this.dictionary.forEach(function (k, v) {\n            return callback(v);\n        });\n    };\n    /**\n     * Returns an array containing all of the elements in this set in arbitrary order.\n     * @return {Array} an array containing all of the elements in this set.\n     */\n    Set.prototype.toArray = function () {\n        return this.dictionary.values();\n    };\n    /**\n     * Returns true if this set contains no elements.\n     * @return {boolean} true if this set contains no elements.\n     */\n    Set.prototype.isEmpty = function () {\n        return this.dictionary.isEmpty();\n    };\n    /**\n     * Returns the number of elements in this set.\n     * @return {number} the number of elements in this set.\n     */\n    Set.prototype.size = function () {\n        return this.dictionary.size();\n    };\n    /**\n     * Removes all of the elements from this set.\n     */\n    Set.prototype.clear = function () {\n        this.dictionary.clear();\n    };\n    /*\n    * Provides a string representation for display\n    */\n    Set.prototype.toString = function () {\n        return arrays.toString(this.toArray());\n    };\n    return Set;\n}()); // end of Set\nexports.default = Set;\n//# sourceMappingURL=Set.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar LinkedList_1 = require(\"./LinkedList\");\nvar Stack = /** @class */ (function () {\n    /**\n     * Creates an empty Stack.\n     * @class A Stack is a Last-In-First-Out (LIFO) data structure, the last\n     * element added to the stack will be the first one to be removed. This\n     * implementation uses a linked list as a container.\n     * @constructor\n     */\n    function Stack() {\n        this.list = new LinkedList_1.default();\n    }\n    /**\n     * Pushes an item onto the top of this stack.\n     * @param {Object} elem the element to be pushed onto this stack.\n     * @return {boolean} true if the element was pushed or false if it is undefined.\n     */\n    Stack.prototype.push = function (elem) {\n        return this.list.add(elem, 0);\n    };\n    /**\n     * Pushes an item onto the top of this stack.\n     * @param {Object} elem the element to be pushed onto this stack.\n     * @return {boolean} true if the element was pushed or false if it is undefined.\n     */\n    Stack.prototype.add = function (elem) {\n        return this.list.add(elem, 0);\n    };\n    /**\n     * Removes the object at the top of this stack and returns that object.\n     * @return {*} the object at the top of this stack or undefined if the\n     * stack is empty.\n     */\n    Stack.prototype.pop = function () {\n        return this.list.removeElementAtIndex(0);\n    };\n    /**\n     * Looks at the object at the top of this stack without removing it from the\n     * stack.\n     * @return {*} the object at the top of this stack or undefined if the\n     * stack is empty.\n     */\n    Stack.prototype.peek = function () {\n        return this.list.first();\n    };\n    /**\n     * Returns the number of elements in this stack.\n     * @return {number} the number of elements in this stack.\n     */\n    Stack.prototype.size = function () {\n        return this.list.size();\n    };\n    /**\n     * Returns true if this stack contains the specified element.\n     * <p>If the elements inside this stack are\n     * not comparable with the === operator, a custom equals function should be\n     * provided to perform searches, the function must receive two arguments and\n     * return true if they are equal, false otherwise. Example:</p>\n     *\n     * <pre>\n     * const petsAreEqualByName (pet1, pet2) {\n     *  return pet1.name === pet2.name;\n     * }\n     * </pre>\n     * @param {Object} elem element to search for.\n     * @param {function(Object,Object):boolean=} equalsFunction optional\n     * function to check if two elements are equal.\n     * @return {boolean} true if this stack contains the specified element,\n     * false otherwise.\n     */\n    Stack.prototype.contains = function (elem, equalsFunction) {\n        return this.list.contains(elem, equalsFunction);\n    };\n    /**\n     * Checks if this stack is empty.\n     * @return {boolean} true if and only if this stack contains no items; false\n     * otherwise.\n     */\n    Stack.prototype.isEmpty = function () {\n        return this.list.isEmpty();\n    };\n    /**\n     * Removes all of the elements from this stack.\n     */\n    Stack.prototype.clear = function () {\n        this.list.clear();\n    };\n    /**\n     * Executes the provided function once for each element present in this stack in\n     * LIFO order.\n     * @param {function(Object):*} callback function to execute, it is\n     * invoked with one argument: the element value, to break the iteration you can\n     * optionally return false.\n     */\n    Stack.prototype.forEach = function (callback) {\n        this.list.forEach(callback);\n    };\n    return Stack;\n}()); // End of stack\nexports.default = Stack;\n//# sourceMappingURL=Stack.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar util = require(\"./util\");\n/**\n * Returns the position of the first occurrence of the specified item\n * within the specified array.4\n * @param {*} array the array in which to search the element.\n * @param {Object} item the element to search.\n * @param {function(Object,Object):boolean=} equalsFunction optional function used to\n * check equality between 2 elements.\n * @return {number} the position of the first occurrence of the specified element\n * within the specified array, or -1 if not found.\n */\nfunction indexOf(array, item, equalsFunction) {\n    var equals = equalsFunction || util.defaultEquals;\n    var length = array.length;\n    for (var i = 0; i < length; i++) {\n        if (equals(array[i], item)) {\n            return i;\n        }\n    }\n    return -1;\n}\nexports.indexOf = indexOf;\n/**\n * Returns the position of the last occurrence of the specified element\n * within the specified array.\n * @param {*} array the array in which to search the element.\n * @param {Object} item the element to search.\n * @param {function(Object,Object):boolean=} equalsFunction optional function used to\n * check equality between 2 elements.\n * @return {number} the position of the last occurrence of the specified element\n * within the specified array or -1 if not found.\n */\nfunction lastIndexOf(array, item, equalsFunction) {\n    var equals = equalsFunction || util.defaultEquals;\n    var length = array.length;\n    for (var i = length - 1; i >= 0; i--) {\n        if (equals(array[i], item)) {\n            return i;\n        }\n    }\n    return -1;\n}\nexports.lastIndexOf = lastIndexOf;\n/**\n * Returns true if the specified array contains the specified element.\n * @param {*} array the array in which to search the element.\n * @param {Object} item the element to search.\n * @param {function(Object,Object):boolean=} equalsFunction optional function to\n * check equality between 2 elements.\n * @return {boolean} true if the specified array contains the specified element.\n */\nfunction contains(array, item, equalsFunction) {\n    return indexOf(array, item, equalsFunction) >= 0;\n}\nexports.contains = contains;\n/**\n * Removes the first ocurrence of the specified element from the specified array.\n * @param {*} array the array in which to search element.\n * @param {Object} item the element to search.\n * @param {function(Object,Object):boolean=} equalsFunction optional function to\n * check equality between 2 elements.\n * @return {boolean} true if the array changed after this call.\n */\nfunction remove(array, item, equalsFunction) {\n    var index = indexOf(array, item, equalsFunction);\n    if (index < 0) {\n        return false;\n    }\n    array.splice(index, 1);\n    return true;\n}\nexports.remove = remove;\n/**\n * Returns the number of elements in the specified array equal\n * to the specified object.\n * @param {Array} array the array in which to determine the frequency of the element.\n * @param {Object} item the element whose frequency is to be determined.\n * @param {function(Object,Object):boolean=} equalsFunction optional function used to\n * check equality between 2 elements.\n * @return {number} the number of elements in the specified array\n * equal to the specified object.\n */\nfunction frequency(array, item, equalsFunction) {\n    var equals = equalsFunction || util.defaultEquals;\n    var length = array.length;\n    var freq = 0;\n    for (var i = 0; i < length; i++) {\n        if (equals(array[i], item)) {\n            freq++;\n        }\n    }\n    return freq;\n}\nexports.frequency = frequency;\n/**\n * Returns true if the two specified arrays are equal to one another.\n * Two arrays are considered equal if both arrays contain the same number\n * of elements, and all corresponding pairs of elements in the two\n * arrays are equal and are in the same order.\n * @param {Array} array1 one array to be tested for equality.\n * @param {Array} array2 the other array to be tested for equality.\n * @param {function(Object,Object):boolean=} equalsFunction optional function used to\n * check equality between elemements in the arrays.\n * @return {boolean} true if the two arrays are equal\n */\nfunction equals(array1, array2, equalsFunction) {\n    var equals = equalsFunction || util.defaultEquals;\n    if (array1.length !== array2.length) {\n        return false;\n    }\n    var length = array1.length;\n    for (var i = 0; i < length; i++) {\n        if (!equals(array1[i], array2[i])) {\n            return false;\n        }\n    }\n    return true;\n}\nexports.equals = equals;\n/**\n * Returns shallow a copy of the specified array.\n * @param {*} array the array to copy.\n * @return {Array} a copy of the specified array\n */\nfunction copy(array) {\n    return array.concat();\n}\nexports.copy = copy;\n/**\n * Swaps the elements at the specified positions in the specified array.\n * @param {Array} array The array in which to swap elements.\n * @param {number} i the index of one element to be swapped.\n * @param {number} j the index of the other element to be swapped.\n * @return {boolean} true if the array is defined and the indexes are valid.\n */\nfunction swap(array, i, j) {\n    if (i < 0 || i >= array.length || j < 0 || j >= array.length) {\n        return false;\n    }\n    var temp = array[i];\n    array[i] = array[j];\n    array[j] = temp;\n    return true;\n}\nexports.swap = swap;\nfunction toString(array) {\n    return '[' + array.toString() + ']';\n}\nexports.toString = toString;\n/**\n * Executes the provided function once for each element present in this array\n * starting from index 0 to length - 1.\n * @param {Array} array The array in which to iterate.\n * @param {function(Object):*} callback function to execute, it is\n * invoked with one argument: the element value, to break the iteration you can\n * optionally return false.\n */\nfunction forEach(array, callback) {\n    for (var _i = 0, array_1 = array; _i < array_1.length; _i++) {\n        var ele = array_1[_i];\n        if (callback(ele) === false) {\n            return;\n        }\n    }\n}\nexports.forEach = forEach;\n//# sourceMappingURL=arrays.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// Copyright 2013 Basarat Ali Syed. All Rights Reserved.\n//\n// Licensed under MIT open source license http://opensource.org/licenses/MIT\n//\n// Orginal javascript code was by Mauricio Santos\n//\nvar _arrays = require(\"./arrays\");\nexports.arrays = _arrays;\nvar Bag_1 = require(\"./Bag\");\nexports.Bag = Bag_1.default;\nvar BSTree_1 = require(\"./BSTree\");\nexports.BSTree = BSTree_1.default;\nvar BSTreeKV_1 = require(\"./BSTreeKV\");\nexports.BSTreeKV = BSTreeKV_1.default;\nvar Dictionary_1 = require(\"./Dictionary\");\nexports.Dictionary = Dictionary_1.default;\nvar Heap_1 = require(\"./Heap\");\nexports.Heap = Heap_1.default;\nvar LinkedDictionary_1 = require(\"./LinkedDictionary\");\nexports.LinkedDictionary = LinkedDictionary_1.default;\nvar LinkedList_1 = require(\"./LinkedList\");\nexports.LinkedList = LinkedList_1.default;\nvar MultiDictionary_1 = require(\"./MultiDictionary\");\nexports.MultiDictionary = MultiDictionary_1.default;\nvar FactoryDictionary_1 = require(\"./FactoryDictionary\");\nexports.FactoryDictionary = FactoryDictionary_1.default;\nvar FactoryDictionary_2 = require(\"./FactoryDictionary\");\nexports.DefaultDictionary = FactoryDictionary_2.default;\nvar Queue_1 = require(\"./Queue\");\nexports.Queue = Queue_1.default;\nvar PriorityQueue_1 = require(\"./PriorityQueue\");\nexports.PriorityQueue = PriorityQueue_1.default;\nvar Set_1 = require(\"./Set\");\nexports.Set = Set_1.default;\nvar Stack_1 = require(\"./Stack\");\nexports.Stack = Stack_1.default;\nvar MultiRootTree_1 = require(\"./MultiRootTree\");\nexports.MultiRootTree = MultiRootTree_1.default;\nvar _util = require(\"./util\");\nexports.util = _util;\n//# sourceMappingURL=index.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar _hasOwnProperty = Object.prototype.hasOwnProperty;\nexports.has = function (obj, prop) {\n    return _hasOwnProperty.call(obj, prop);\n};\n/**\n * Default function to compare element order.\n * @function\n */\nfunction defaultCompare(a, b) {\n    if (a < b) {\n        return -1;\n    }\n    else if (a === b) {\n        return 0;\n    }\n    else {\n        return 1;\n    }\n}\nexports.defaultCompare = defaultCompare;\n/**\n * Default function to test equality.\n * @function\n */\nfunction defaultEquals(a, b) {\n    return a === b;\n}\nexports.defaultEquals = defaultEquals;\n/**\n * Default function to convert an object to a string.\n * @function\n */\nfunction defaultToString(item) {\n    if (item === null) {\n        return 'COLLECTION_NULL';\n    }\n    else if (isUndefined(item)) {\n        return 'COLLECTION_UNDEFINED';\n    }\n    else if (isString(item)) {\n        return '$s' + item;\n    }\n    else {\n        return '$o' + item.toString();\n    }\n}\nexports.defaultToString = defaultToString;\n/**\n * Joins all the properies of the object using the provided join string\n */\nfunction makeString(item, join) {\n    if (join === void 0) { join = ','; }\n    if (item === null) {\n        return 'COLLECTION_NULL';\n    }\n    else if (isUndefined(item)) {\n        return 'COLLECTION_UNDEFINED';\n    }\n    else if (isString(item)) {\n        return item.toString();\n    }\n    else {\n        var toret = '{';\n        var first = true;\n        for (var prop in item) {\n            if (exports.has(item, prop)) {\n                if (first) {\n                    first = false;\n                }\n                else {\n                    toret = toret + join;\n                }\n                toret = toret + prop + ':' + item[prop];\n            }\n        }\n        return toret + '}';\n    }\n}\nexports.makeString = makeString;\n/**\n * Checks if the given argument is a function.\n * @function\n */\nfunction isFunction(func) {\n    return (typeof func) === 'function';\n}\nexports.isFunction = isFunction;\n/**\n * Checks if the given argument is undefined.\n * @function\n */\nfunction isUndefined(obj) {\n    return (typeof obj) === 'undefined';\n}\nexports.isUndefined = isUndefined;\n/**\n * Checks if the given argument is a string.\n * @function\n */\nfunction isString(obj) {\n    return Object.prototype.toString.call(obj) === '[object String]';\n}\nexports.isString = isString;\n/**\n * Reverses a compare function.\n * @function\n */\nfunction reverseCompareFunction(compareFunction) {\n    if (isUndefined(compareFunction) || !isFunction(compareFunction)) {\n        return function (a, b) {\n            if (a < b) {\n                return 1;\n            }\n            else if (a === b) {\n                return 0;\n            }\n            else {\n                return -1;\n            }\n        };\n    }\n    else {\n        return function (d, v) {\n            return compareFunction(d, v) * -1;\n        };\n    }\n}\nexports.reverseCompareFunction = reverseCompareFunction;\n/**\n * Returns an equal function given a compare function.\n * @function\n */\nfunction compareToEquals(compareFunction) {\n    return function (a, b) {\n        return compareFunction(a, b) === 0;\n    };\n}\nexports.compareToEquals = compareToEquals;\n//# sourceMappingURL=util.js.map","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n// This file implements utility methods used by the rest of the VexFlow\n// codebase.\n//\n\n/* eslint max-classes-per-file: \"off\" */\n\nconst Vex = () => { };\n\n// Default log function sends all arguments to console.\nVex.L = (block, args) => {\n  if (!args) return;\n  const line = Array.prototype.slice.call(args).join(' ');\n  window.console.log(block + ': ' + line);\n};\n\nVex.MakeException = (name) => {\n  const exception = class extends Error {\n    constructor(message, data) {\n      super(message);\n      this.name = name;\n      this.message = message;\n      this.data = data;\n    }\n  };\n\n  return exception;\n};\n\n// Default runtime exception.\nclass RuntimeError {\n  constructor(code, message) {\n    this.code = code;\n    this.message = message;\n  }\n\n  toString() {\n    return '[RuntimeError] ' + this.code + ':' + this.message;\n  }\n}\n\n// Shortcut method for `RuntimeError`.\nVex.RuntimeError = RuntimeError;\nVex.RERR = Vex.RuntimeError;\n\n// Merge `destination` hash with `source` hash, overwriting like keys\n// in `source` if necessary.\nVex.Merge = (destination, source) => {\n  for (const property in source) { // eslint-disable-line guard-for-in\n    destination[property] = source[property];\n  }\n  return destination;\n};\n\n// DEPRECATED. Use `Math.*`.\nVex.Min = Math.min;\nVex.Max = Math.max;\nVex.forEach = (a, fn) => {\n  for (let i = 0; i < a.length; i++) {\n    fn(a[i], i);\n  }\n};\n\n// Round number to nearest fractional value (`.5`, `.25`, etc.)\nVex.RoundN = (x, n) =>\n  (x % n) >= (n / 2)\n    ? parseInt(x / n, 10) * n + n\n    : parseInt(x / n, 10) * n;\n\n// Locate the mid point between stave lines. Returns a fractional line if a space.\nVex.MidLine = (a, b) => {\n  let mid_line = b + (a - b) / 2;\n  if (mid_line % 2 > 0) {\n    mid_line = Vex.RoundN(mid_line * 10, 5) / 10;\n  }\n  return mid_line;\n};\n\n// Take `arr` and return a new list consisting of the sorted, unique,\n// contents of arr. Does not modify `arr`.\nVex.SortAndUnique = (arr, cmp, eq) => {\n  if (arr.length > 1) {\n    const newArr = [];\n    let last;\n    arr.sort(cmp);\n\n    for (let i = 0; i < arr.length; ++i) {\n      if (i === 0 || !eq(arr[i], last)) {\n        newArr.push(arr[i]);\n      }\n      last = arr[i];\n    }\n\n    return newArr;\n  } else {\n    return arr;\n  }\n};\n\n// Check if array `a` contains `obj`.\nVex.Contains = (a, obj) => {\n  let i = a.length;\n  while (i--) {\n    if (a[i] === obj) {\n      return true;\n    }\n  }\n  return false;\n};\n\n// Get the 2D Canvas context from DOM element `canvas_sel`.\nVex.getCanvasContext = canvas_sel => {\n  if (!canvas_sel) {\n    throw new Vex.RERR('BadArgument', 'Invalid canvas selector: ' + canvas_sel);\n  }\n\n  const canvas = document.getElementById(canvas_sel);\n  if (!(canvas && canvas.getContext)) {\n    throw new Vex.RERR(\n      'UnsupportedBrowserError', 'This browser does not support HTML5 Canvas'\n    );\n  }\n\n  return canvas.getContext('2d');\n};\n\n// Draw a tiny dot marker on the specified canvas. A great debugging aid.\n//\n// `ctx`: Canvas context.\n// `x`, `y`: Dot coordinates.\nVex.drawDot = (ctx, x, y, color = '#55') => {\n  ctx.save();\n  ctx.setFillStyle(color);\n\n  // draw a circle\n  ctx.beginPath();\n  ctx.arc(x, y, 3, 0, Math.PI * 2, true);\n  ctx.closePath();\n  ctx.fill();\n  ctx.restore();\n};\n\n// Benchmark. Run function `f` once and report time elapsed shifted by `s` milliseconds.\nVex.BM = (s, f) => {\n  const start_time = new Date().getTime();\n  f();\n  const elapsed = new Date().getTime() - start_time;\n  Vex.L(s + elapsed + 'ms');\n};\n\n// Get stack trace.\nVex.StackTrace = () => {\n  const err = new Error();\n  return err.stack;\n};\n\n// Dump warning to console.\nVex.W = (...args) => {\n  const line = args.join(' ');\n  window.console.log('Warning: ', line, Vex.StackTrace());\n};\n\n// Used by various classes (e.g., SVGContext) to provide a\n// unique prefix to element names (or other keys in shared namespaces).\nVex.Prefix = text => Vex.Prefix.prefix + text;\nVex.Prefix.prefix = 'vf-';\n\nexport { Vex };\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n// Fraction class that represents a rational number\n//\n// @author zz85\n// @author incompleteopus (modifications)\n\n/* eslint-disable no-underscore-dangle */\n\nimport { Vex } from './vex';\nexport class Fraction {\n  /**\n   * GCD: Find greatest common divisor using Euclidean algorithm\n   */\n  static GCD(a, b) {\n    if (typeof a !== 'number' || typeof b !== 'number') {\n      throw new Vex.RERR('BadArgument', `Invalid numbers: ${a}, ${b}`);\n    }\n\n    let t;\n\n    while (b !== 0) {\n      t = b;\n      b = a % b;\n      a = t;\n    }\n\n    return a;\n  }\n\n  /**\n   * LCM: Lowest common multiple\n   */\n  static LCM(a, b) {\n    return ((a * b) / Fraction.GCD(a, b));\n  }\n\n  /**\n   * LCMM: Lowest common multiple for more than two numbers\n   */\n  static LCMM(args) {\n    if (args.length === 0) {\n      return 0;\n    } else if (args.length === 1) {\n      return args[0];\n    } else if (args.length === 2) {\n      return Fraction.LCM(args[0], args[1]);\n    } else {\n      const arg0 = args[0];\n      args.shift();\n      return Fraction.LCM(arg0, Fraction.LCMM(args));\n    }\n  }\n\n  constructor(numerator, denominator) {\n    this.set(numerator, denominator);\n  }\n  set(numerator, denominator) {\n    this.numerator = numerator === undefined ? 1 : numerator;\n    this.denominator = denominator === undefined ? 1 : denominator;\n    return this;\n  }\n  value() {\n    return this.numerator / this.denominator;\n  }\n  simplify() {\n    let u = this.numerator;\n    let d = this.denominator;\n\n    const gcd = Fraction.GCD(u, d);\n    u /= gcd;\n    d /= gcd;\n\n    if (d < 0) {\n      d = -d;\n      u = -u;\n    }\n    return this.set(u, d);\n  }\n  add(param1, param2) {\n    let otherNumerator;\n    let otherDenominator;\n\n    if (param1 instanceof Fraction) {\n      otherNumerator = param1.numerator;\n      otherDenominator = param1.denominator;\n    } else {\n      if (param1 !== undefined) {\n        otherNumerator = param1;\n      } else {\n        otherNumerator = 0;\n      }\n\n      if (param2 !== undefined) {\n        otherDenominator = param2;\n      } else {\n        otherDenominator = 1;\n      }\n    }\n\n    const lcm = Fraction.LCM(this.denominator, otherDenominator);\n    const a = lcm / this.denominator;\n    const b = lcm / otherDenominator;\n\n    const u = this.numerator * a + otherNumerator * b;\n    return this.set(u, lcm);\n  }\n  subtract(param1, param2) {\n    let otherNumerator;\n    let otherDenominator;\n\n    if (param1 instanceof Fraction) {\n      otherNumerator = param1.numerator;\n      otherDenominator = param1.denominator;\n    } else {\n      if (param1 !== undefined) {\n        otherNumerator = param1;\n      } else {\n        otherNumerator = 0;\n      }\n\n      if (param2 !== undefined) {\n        otherDenominator = param2;\n      } else {\n        otherDenominator = 1;\n      }\n    }\n\n    const lcm = Fraction.LCM(this.denominator, otherDenominator);\n    const a = lcm / this.denominator;\n    const b = lcm / otherDenominator;\n\n    const u = this.numerator * a - otherNumerator * b;\n    return this.set(u, lcm);\n  }\n  multiply(param1, param2) {\n    let otherNumerator;\n    let otherDenominator;\n\n    if (param1 instanceof Fraction) {\n      otherNumerator = param1.numerator;\n      otherDenominator = param1.denominator;\n    } else {\n      if (param1 !== undefined) {\n        otherNumerator = param1;\n      } else {\n        otherNumerator = 1;\n      }\n\n      if (param2 !== undefined) {\n        otherDenominator = param2;\n      } else {\n        otherDenominator = 1;\n      }\n    }\n\n    return this.set(this.numerator * otherNumerator, this.denominator * otherDenominator);\n  }\n  divide(param1, param2) {\n    let otherNumerator;\n    let otherDenominator;\n\n    if (param1 instanceof Fraction) {\n      otherNumerator = param1.numerator;\n      otherDenominator = param1.denominator;\n    } else {\n      if (param1 !== undefined) {\n        otherNumerator = param1;\n      } else {\n        otherNumerator = 1;\n      }\n\n      if (param2 !== undefined) {\n        otherDenominator = param2;\n      } else {\n        otherDenominator = 1;\n      }\n    }\n\n    return this.set(this.numerator * otherDenominator, this.denominator * otherNumerator);\n  }\n\n  // Simplifies both sides and checks if they are equal.\n  equals(compare) {\n    const a = Fraction.__compareA.copy(compare).simplify();\n    const b = Fraction.__compareB.copy(this).simplify();\n\n    return (a.numerator === b.numerator) && (a.denominator === b.denominator);\n  }\n\n  // Greater than operator.\n  greaterThan(compare) {\n    const a = Fraction.__compareB.copy(this);\n    a.subtract(compare);\n    return (a.numerator > 0);\n  }\n\n  // Greater than or equals operator.\n  greaterThanEquals(compare) {\n    const a = Fraction.__compareB.copy(this);\n    a.subtract(compare);\n    return (a.numerator >= 0);\n  }\n\n  // Less than operator.\n  lessThan(compare) {\n    return !(this.greaterThanEquals(compare));\n  }\n\n  // Less than or equals operator.\n  lessThanEquals(compare) {\n    return !(this.greaterThan(compare));\n  }\n\n  // Creates a new copy with this current values.\n  clone() {\n    return new Fraction(this.numerator, this.denominator);\n  }\n\n  // Copies value of another Fraction into itself.\n  copy(copy) {\n    if (typeof copy === 'number') {\n      return this.set(copy || 0, 1);\n    }\n    return this.set(copy.numerator, copy.denominator);\n  }\n\n  // Returns the integer component eg. (4/2) == 2\n  quotient() {\n    return Math.floor(this.numerator / this.denominator);\n  }\n\n  // Returns the fraction component when reduced to a mixed number\n  fraction() {\n    return this.numerator % this.denominator;\n  }\n\n  // Returns the absolute value\n  abs() {\n    this.denominator = Math.abs(this.denominator);\n    this.numerator = Math.abs(this.numerator);\n    return this;\n  }\n\n  // Returns a raw string representation\n  toString() {\n    return this.numerator + '/' + this.denominator;\n  }\n\n  // Returns a simplified string respresentation\n  toSimplifiedString() {\n    return Fraction.__tmp.copy(this).simplify().toString();\n  }\n\n  // Returns string representation in mixed form\n  toMixedString() {\n    let s = '';\n    const q = this.quotient();\n    const f = Fraction.__tmp.copy(this);\n\n    if (q < 0) {\n      f.abs().fraction();\n    } else {\n      f.fraction();\n    }\n\n    if (q !== 0) {\n      s += q;\n\n      if (f.numerator !== 0) {\n        s += ' ' + f.toSimplifiedString();\n      }\n    } else {\n      if (f.numerator === 0) {\n        s = '0';\n      } else {\n        s = f.toSimplifiedString();\n      }\n    }\n\n    return s;\n  }\n\n  // Parses a fraction string\n  parse(str) {\n    const i = str.split('/');\n    const n = parseInt(i[0], 10);\n    const d = (i[1]) ? parseInt(i[1], 10) : 1;\n\n    return this.set(n, d);\n  }\n}\n\n// Temporary cached objects\nFraction.__compareA = new Fraction();\nFraction.__compareB = new Fraction();\nFraction.__tmp = new Fraction();\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// @author Mohit Cheppudira\n//\n// ## Description\n//\n// This file implements a registry for VexFlow elements. It allows users\n// to track, query, and manage some subset of generated elements, and\n// dynamically get and set attributes.\n//\n// There are two ways to regiser with a registry:\n//\n// 1) Explicitly call `element.register(registry)`, or,\n// 2) Call `Registry.enableDefaultRegistry(registry)` when ready, and all future\n//    elements will automatically register with it.\n//\n// Once an element is registered, selected attributes are tracked and indexed by\n// the registry. This allows fast look up of elements by attributes like id, type,\n// and class.\n\nimport { Vex } from './vex';\n\nexport const X = Vex.MakeException('RegistryError');\n\nfunction setIndexValue(index, name, value, id, elem) {\n  if (!index[name][value]) index[name][value] = {};\n  index[name][value][id] = elem;\n}\n\nexport class Registry {\n  static get INDEXES() { return ['type']; }\n\n  constructor() {\n    this.clear();\n  }\n\n  // If you call `enableDefaultRegistry`, any new elements will auto-register with\n  // the provided registry as soon as they're constructed.\n  static enableDefaultRegistry(registry) {\n    Registry.defaultRegistry = registry;\n  }\n\n  static getDefaultRegistry() {\n    return Registry.defaultRegistry;\n  }\n\n  static disableDefaultRegistry() {\n    Registry.defaultRegistry = null;\n  }\n\n  clear() {\n    // Indexes are represented as maps of maps (of maps). This allows\n    // for both multi-labeling (e.g., an element can have multiple classes)\n    // and efficient lookup.\n    this.index = {\n      id: {},\n      type: {},\n      class: {},\n    };\n    return this;\n  }\n\n  // Updates the indexes for element 'id'. If an element's attribute changes\n  // from A -> B, make sure to remove the element from A.\n  updateIndex({ id, name, value, oldValue }) {\n    const elem = this.getElementById(id);\n    if (oldValue !== null && this.index[name][oldValue]) {\n      delete this.index[name][oldValue][id];\n    }\n    if (value !== null) {\n      setIndexValue(this.index, name, value, elem.getAttribute('id'), elem);\n    }\n  }\n\n  // Register element `elem` with this registry. This adds the element to its index and watches\n  // it for attribute changes.\n  register(elem, id) {\n    id = id || elem.getAttribute('id');\n\n    if (!id) {\n      throw new X('Can\\'t add element without `id` attribute to registry', elem);\n    }\n\n    // Manually add id to index, then update other indexes.\n    elem.setAttribute('id', id);\n    setIndexValue(this.index, 'id', id, id, elem);\n    Registry.INDEXES.forEach(name => {\n      this.updateIndex({ id, name, value: elem.getAttribute(name), oldValue: null });\n    });\n    elem.onRegister(this);\n    return this;\n  }\n\n  getElementById(id) {\n    return this.index.id[id] ? this.index.id[id][id] : null;\n  }\n\n  getElementsByAttribute(attrName, value) {\n    const index = this.index[attrName];\n    if (index && index[value]) {\n      return Object.keys(index[value]).map(i => index[value][i]);\n    } else {\n      return [];\n    }\n  }\n\n  getElementsByType(type) { return this.getElementsByAttribute('type', type); }\n  getElementsByClass(className) { return this.getElementsByAttribute('class', className); }\n\n  // This is called by the element when an attribute value changes. If an indexed\n  // attribute changes, then update the local index.\n  onUpdate({ id, name, value, oldValue }) {\n    function includes(array, value) {\n      return array.filter(x => x === value).length > 0;\n    }\n\n    if (!includes(Registry.INDEXES.concat(['id', 'class']), name)) return this;\n    this.updateIndex({ id, name, value, oldValue });\n    return this;\n  }\n}\n\nRegistry.defaultRegistry = null;\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// @author Mohit Cheppudira\n//\n// ## Description\n//\n// This file implements a generic base class for VexFlow, with implementations\n// of general functions and properties that can be inherited by all VexFlow elements.\n\nimport { Vex } from './vex';\nimport { Registry } from './registry';\n\nexport class Element {\n  static newID() { return 'auto' + (Element.ID++); }\n\n  constructor({ type } = {}) {\n    this.attrs = {\n      id: Element.newID(),\n      el: null,\n      type: type || 'Base',\n      classes: {},\n    };\n\n    this.boundingBox = null;\n    this.context = null;\n    this.rendered = false;\n\n    // If a default registry exist, then register with it right away.\n    if (Registry.getDefaultRegistry()) {\n      Registry.getDefaultRegistry().register(this);\n    }\n  }\n\n  // set the draw style of a stemmable note:\n  setStyle(style) { this.style = style; return this; }\n  getStyle() { return this.style; }\n\n  // Apply current style to Canvas `context`\n  applyStyle(context = this.context, style = this.getStyle()) {\n    if (!style) return this;\n\n    context.save();\n    if (style.shadowColor) context.setShadowColor(style.shadowColor);\n    if (style.shadowBlur) context.setShadowBlur(style.shadowBlur);\n    if (style.fillStyle) context.setFillStyle(style.fillStyle);\n    if (style.strokeStyle) context.setStrokeStyle(style.strokeStyle);\n    if (style.lineWidth) context.setLineWidth(style.lineWidth);\n    return this;\n  }\n\n  restoreStyle(context = this.context, style = this.getStyle()) {\n    if (!style) return this;\n    context.restore();\n    return this;\n  }\n\n  // draw with style of an element.\n  drawWithStyle() {\n    this.checkContext();\n    this.applyStyle();\n    this.draw();\n    this.restoreStyle();\n  }\n\n  // An element can have multiple class labels.\n  hasClass(className) { return (this.attrs.classes[className] === true); }\n  addClass(className) {\n    this.attrs.classes[className] = true;\n    if (this.registry) {\n      this.registry.onUpdate({\n        id: this.getAttribute('id'),\n        name: 'class',\n        value: className,\n        oldValue: null,\n      });\n    }\n    return this;\n  }\n\n  removeClass(className) {\n    delete this.attrs.classes[className];\n    if (this.registry) {\n      this.registry.onUpdate({\n        id: this.getAttribute('id'),\n        name: 'class',\n        value: null,\n        oldValue: className,\n      });\n    }\n    return this;\n  }\n\n  // This is called by the registry after the element is registered.\n  onRegister(registry) { this.registry = registry; return this; }\n  isRendered() { return this.rendered; }\n  setRendered(rendered = true) { this.rendered = rendered; return this; }\n\n  getAttributes() { return this.attrs; }\n  getAttribute(name) { return this.attrs[name]; }\n  setAttribute(name, value) {\n    const id = this.attrs.id;\n    const oldValue = this.attrs[name];\n    this.attrs[name] = value;\n    if (this.registry) {\n      // Register with old id to support id changes.\n      this.registry.onUpdate({ id, name, value, oldValue });\n    }\n    return this;\n  }\n\n  getContext() { return this.context; }\n  setContext(context) { this.context = context; return this; }\n  getBoundingBox() { return this.boundingBox; }\n\n  // Validators\n  checkContext() {\n    if (!this.context) {\n      throw new Vex.RERR('NoContext', 'No rendering context attached to instance');\n    }\n    return this.context;\n  }\n}\n\nElement.ID = 1000;\n","// ## Description\n//\n// Object which computes metrics for a bounding box by continuously\n// taking canvas path commands\n\n// Warning: This file is merely a crutch to get bounding box information without\n// explicit metadata. This is likely to get deprecated following SMuFL support.\n//\n// taken from: https://github.com/gabelerner/canvg/blob/860e418aca67b9a41e858a223d74d375793ec364/ca\n// nvg.js#L449\n\nexport class BoundingBoxComputation {\n  constructor(x1, y1, x2, y2) { // pass in initial points if you want\n    this.x1 = Number.NaN;\n    this.y1 = Number.NaN;\n    this.x2 = Number.NaN;\n    this.y2 = Number.NaN;\n\n    this.addPoint(x1, y1);\n    this.addPoint(x2, y2);\n  }\n\n  width() {\n    return this.x2 - this.x1;\n  }\n\n  height() {\n    return this.y2 - this.y1;\n  }\n\n  addPoint(x, y) {\n    if (x != null) {\n      if (isNaN(this.x1) || isNaN(this.x2)) {\n        this.x1 = x;\n        this.x2 = x;\n      }\n      if (x < this.x1) this.x1 = x;\n      if (x > this.x2) this.x2 = x;\n    }\n\n    if (y != null) {\n      if (isNaN(this.y1) || isNaN(this.y2)) {\n        this.y1 = y;\n        this.y2 = y;\n      }\n      if (y < this.y1) this.y1 = y;\n      if (y > this.y2) this.y2 = y;\n    }\n  }\n\n  addX(x) {\n    this.addPoint(x, null);\n  }\n\n  addY(y) {\n    this.addPoint(null, y);\n  }\n\n  addQuadraticCurve(p0x, p0y, p1x, p1y, p2x, p2y) {\n    const cp1x = p0x + 2 / 3 * (p1x - p0x); // CP1 = QP0 + 2/3 *(QP1-QP0)\n    const cp1y = p0y + 2 / 3 * (p1y - p0y); // CP1 = QP0 + 2/3 *(QP1-QP0)\n    const cp2x = cp1x + 1 / 3 * (p2x - p0x); // CP2 = CP1 + 1/3 *(QP2-QP0)\n    const cp2y = cp1y + 1 / 3 * (p2y - p0y); // CP2 = CP1 + 1/3 *(QP2-QP0)\n    this.addBezierCurve(p0x, p0y, cp1x, cp1y, cp2x, cp2y, p2x, p2y);\n  }\n\n  addBezierCurve(p0x, p0y, p1x, p1y, p2x, p2y, p3x, p3y) {\n    // from http://blog.hackers-cafe.net/2009/06/how-to-calculate-bezier-curves-bounding.html\n    const p0 = [p0x, p0y];\n    const p1 = [p1x, p1y];\n    const p2 = [p2x, p2y];\n    const p3 = [p3x, p3y];\n    let i;\n\n    this.addPoint(p0[0], p0[1]);\n    this.addPoint(p3[0], p3[1]);\n\n    const f = (t, i) => Math.pow(1 - t, 3) * p0[i] +\n      3 * Math.pow(1 - t, 2) * t * p1[i] +\n      3 * (1 - t) * Math.pow(t, 2) * p2[i] +\n      Math.pow(t, 3) * p3[i];\n\n    for (i = 0; i <= 1; i++) {\n      const b = 6 * p0[i] - 12 * p1[i] + 6 * p2[i];\n      const a = -3 * p0[i] + 9 * p1[i] - 9 * p2[i] + 3 * p3[i];\n      const c = 3 * p1[i] - 3 * p0[i];\n\n      if (a === 0) {\n        if (b === 0) continue;\n        const t = -c / b;\n        if (0 < t && t < 1) {\n          if (i === 0) this.addX(f(t, i));\n          if (i === 1) this.addY(f(t, i));\n        }\n        continue;\n      }\n\n      const b2ac = Math.pow(b, 2) - 4 * c * a;\n      if (b2ac < 0) continue;\n      const t1 = (-b + Math.sqrt(b2ac)) / (2 * a);\n      if (0 < t1 && t1 < 1) {\n        if (i === 0) this.addX(f(t1, i));\n        if (i === 1) this.addY(f(t1, i));\n      }\n      const t2 = (-b - Math.sqrt(b2ac)) / (2 * a);\n      if (0 < t2 && t2 < 1) {\n        if (i === 0) this.addX(f(t2, i));\n        if (i === 1) this.addY(f(t2, i));\n      }\n    }\n  }\n}\n","// Vex Music Notation\n// Mohit Muthanna <mohit@muthanna.com>\n//\n// Copyright Mohit Muthanna 2010\n\n// Bounding boxes for interactive notation\n\nexport class BoundingBox {\n  static copy(that) {\n    return new BoundingBox(that.x, that.y, that.w, that.h);\n  }\n\n  constructor(x, y, w, h) {\n    this.x = x;\n    this.y = y;\n    this.w = w;\n    this.h = h;\n  }\n  getX() { return this.x; }\n  getY() { return this.y; }\n  getW() { return this.w; }\n  getH() { return this.h; }\n  setX(x) { this.x = x; return this; }\n  setY(y) { this.y = y; return this; }\n  setW(w) { this.w = w; return this; }\n  setH(h) { this.h = h; return this; }\n  move(x, y) { this.x += x; this.y += y; }\n  clone() { return BoundingBox.copy(this); }\n\n  // Merge my box with given box. Creates a bigger bounding box unless\n  // the given box is contained in this one.\n  mergeWith(boundingBox, ctx) {\n    const that = boundingBox;\n\n    const new_x = this.x < that.x ? this.x : that.x;\n    const new_y = this.y < that.y ? this.y : that.y;\n    const new_w = Math.max(this.x + this.w, that.x + that.w) - new_x;\n    const new_h = Math.max(this.y + this.h, that.y + that.h) - new_y;\n\n    this.x = new_x;\n    this.y = new_y;\n    this.w = new_w;\n    this.h = new_h;\n\n    if (ctx) this.draw(ctx);\n    return this;\n  }\n\n  draw(ctx, x, y) {\n    if (!x) x = 0;\n    if (!y) y = 0;\n    ctx.rect(this.x + x, this.y + y, this.w, this.h);\n    ctx.stroke();\n  }\n}\n","export const Font = {\n\"glyphs\":{\n\"v0\":{\"x_min\":0,\"x_max\":514.5,\"ha\":525,\"o\":\"m 236 648 b 246 648 238 648 242 648 b 288 646 261 648 283 648 b 472 513 364 634 428 587 b 514 347 502 464 514 413 b 462 163 514 272 499 217 b 257 44 409 83 333 44 b 50 163 181 44 103 83 b 0 347 14 217 0 272 b 40 513 0 413 12 464 b 236 648 87 591 155 638 m 277 614 b 253 616 273 616 261 616 b 242 616 247 616 243 616 b 170 499 193 609 181 589 b 159 348 163 446 159 398 b 166 222 159 308 161 266 b 201 91 174 138 183 106 b 257 76 215 81 235 76 b 311 91 277 76 299 81 b 347 222 330 106 338 138 b 353 348 352 266 353 308 b 344 499 353 398 351 446 b 277 614 333 587 322 606 m 257 -1 l 258 -1 l 255 -1 l 257 -1 m 257 673 l 258 673 l 255 673 l 257 673 \"},\n\"v1\":{\"x_min\":-1.359375,\"x_max\":344.359375,\"ha\":351,\"o\":\"m 126 637 l 129 638 l 198 638 l 266 638 l 269 635 b 274 631 272 634 273 632 l 277 627 l 277 395 b 279 156 277 230 277 161 b 329 88 281 123 295 106 b 344 69 341 81 344 79 b 337 55 344 62 343 59 l 333 54 l 197 54 l 61 54 l 58 55 b 50 69 53 59 50 62 b 65 88 50 79 53 81 b 80 97 72 91 74 93 b 117 156 103 113 112 129 b 117 345 117 161 117 222 l 117 528 l 100 503 l 38 406 b 14 383 24 384 23 383 b -1 398 5 383 -1 390 b 4 415 -1 403 1 409 b 16 437 5 416 10 426 l 72 539 l 100 596 b 121 632 119 631 119 631 b 126 637 122 634 125 635 m 171 -1 l 172 -1 l 170 -1 l 171 -1 m 171 673 l 172 673 l 170 673 l 171 673 \"},\n\"v2\":{\"x_min\":-1.359375,\"x_max\":458.6875,\"ha\":468,\"o\":\"m 197 648 b 216 648 201 648 208 648 b 258 646 232 648 253 648 b 419 546 333 637 393 599 b 432 489 428 528 432 509 b 356 342 432 440 405 384 b 235 278 322 313 288 295 b 69 170 166 256 107 217 b 69 169 69 170 69 169 b 69 169 69 169 69 169 b 74 173 69 169 72 170 b 209 222 112 204 163 222 b 310 195 247 222 274 215 b 371 179 332 184 352 179 b 396 181 379 179 387 179 b 428 202 409 184 423 194 b 442 212 431 209 436 212 b 458 197 450 212 458 206 b 441 148 458 190 449 165 b 299 44 409 84 353 44 b 288 45 295 44 292 44 b 250 61 274 45 268 49 b 122 99 212 86 164 99 b 73 91 104 99 88 97 b 28 63 53 84 34 72 b 14 54 25 56 20 54 b 1 62 9 54 4 56 l -1 65 l -1 79 b 0 99 -1 91 0 95 b 2 113 1 102 2 108 b 164 309 20 197 81 272 b 285 470 232 341 277 398 b 287 487 287 476 287 481 b 171 595 287 551 239 595 b 155 595 166 595 160 595 b 142 592 145 594 142 594 b 145 589 142 592 142 591 b 179 527 168 576 179 551 b 132 455 179 496 163 467 b 104 451 122 452 112 451 b 27 530 62 451 27 487 b 29 555 27 538 27 546 b 197 648 44 601 115 639 m 228 -1 l 230 -1 l 227 -1 l 228 -1 m 228 673 l 230 673 l 227 673 l 228 673 \"},\n\"v3\":{\"x_min\":-1.359375,\"x_max\":409.6875,\"ha\":418,\"o\":\"m 174 648 b 191 648 176 648 183 648 b 225 648 204 648 220 648 b 402 523 317 638 389 588 b 404 503 404 517 404 510 b 402 484 404 495 404 488 b 264 373 389 437 334 394 b 257 370 259 371 257 371 b 257 370 257 370 257 370 b 264 369 258 370 261 369 b 409 202 359 334 409 267 b 318 72 409 152 381 104 b 200 43 281 52 240 43 b 23 113 134 43 69 68 b 0 169 6 129 0 149 b 77 249 0 210 29 249 l 77 249 b 152 174 125 249 152 212 b 103 102 152 145 137 116 b 103 102 103 102 103 102 b 147 94 103 101 132 95 b 153 94 149 94 151 94 b 265 206 219 94 265 141 b 264 226 265 213 265 219 b 147 355 253 299 204 353 b 126 371 133 356 126 362 b 147 388 126 383 132 388 b 254 474 196 391 238 424 b 259 502 258 484 259 494 b 182 592 259 544 228 582 b 156 595 175 595 166 595 b 115 592 142 595 129 594 l 111 591 l 115 588 b 152 524 141 574 152 549 b 92 449 152 491 130 458 b 76 448 87 448 81 448 b -1 530 32 448 -1 488 b 20 581 -1 548 5 566 b 174 648 55 619 108 641 m 204 -1 l 205 -1 l 202 -1 l 204 -1 m 204 673 l 205 673 l 202 673 l 204 673 \"},\n\"v4\":{\"x_min\":0,\"x_max\":468.21875,\"ha\":478,\"o\":\"m 174 637 b 232 638 175 638 189 638 b 277 638 245 638 259 638 l 378 638 l 381 635 b 389 623 386 632 389 627 b 382 609 389 617 386 613 b 366 589 381 606 372 598 l 313 528 l 245 451 l 209 410 l 155 348 l 84 267 b 59 240 72 252 59 240 b 59 240 59 240 59 240 b 151 238 59 238 68 238 l 242 238 l 242 303 b 243 371 242 369 242 370 b 289 426 245 374 254 385 l 303 441 l 317 456 l 338 483 l 360 506 l 371 520 b 386 527 375 526 381 527 b 400 519 392 527 397 524 b 401 440 401 516 401 514 b 401 377 401 423 401 402 l 401 238 l 426 238 b 453 237 449 238 450 238 b 465 217 461 234 465 226 b 460 202 465 212 464 206 b 426 197 454 197 453 197 l 401 197 l 401 180 b 451 88 402 129 412 109 b 468 69 465 81 468 79 b 461 55 468 62 466 59 l 458 54 l 321 54 l 185 54 l 182 55 b 175 69 176 59 175 62 b 191 88 175 79 176 81 b 240 180 230 109 240 129 l 240 197 l 125 197 b 73 195 104 195 87 195 b 8 197 10 195 9 197 b 0 212 2 199 0 205 b 0 212 0 212 0 212 b 20 242 0 219 0 219 b 163 610 104 344 163 492 b 174 637 163 628 166 634 m 234 -1 l 235 -1 l 232 -1 l 234 -1 m 234 673 l 235 673 l 232 673 l 234 673 \"},\n\"v5\":{\"x_min\":0,\"x_max\":409.6875,\"ha\":418,\"o\":\"m 47 637 b 53 638 49 638 50 638 b 69 634 55 638 61 637 b 210 610 114 619 161 610 b 363 634 259 610 311 619 b 382 638 372 637 378 638 b 392 634 386 638 389 637 b 397 623 396 630 397 627 b 393 610 397 620 396 616 b 298 505 368 552 338 520 b 212 494 277 498 246 494 b 65 517 163 494 106 502 b 61 517 62 517 61 517 b 61 517 61 517 61 517 b 51 408 61 517 51 412 b 51 408 51 408 51 408 b 51 408 51 408 51 408 b 61 412 53 408 55 409 b 125 434 80 421 103 430 b 185 441 145 440 166 441 b 409 244 310 441 409 353 b 401 191 409 227 406 209 b 197 43 375 105 287 43 b 159 47 183 43 171 44 b 23 123 112 56 61 86 b 0 180 6 140 0 159 b 76 260 0 220 31 260 b 92 259 81 260 87 259 b 152 183 132 251 152 216 b 100 112 152 152 134 122 b 95 111 98 112 95 111 b 95 111 95 111 95 111 b 129 98 95 109 119 101 b 148 97 136 97 141 97 b 264 235 206 97 261 158 b 265 248 265 240 265 244 b 210 398 265 312 243 373 b 179 408 201 406 194 408 b 174 408 178 408 176 408 b 53 369 130 408 88 394 b 34 359 39 359 38 359 b 17 374 24 359 17 365 b 39 628 17 384 38 625 b 47 637 40 631 43 635 m 204 -1 l 205 -1 l 202 -1 l 204 -1 m 204 673 l 205 673 l 202 673 l 204 673 \"},\n\"v6\":{\"x_min\":0,\"x_max\":475.03125,\"ha\":485,\"o\":\"m 255 648 b 274 648 259 648 266 648 b 314 646 288 648 307 648 b 450 555 374 637 438 594 b 454 530 453 546 454 538 b 375 451 454 485 416 451 b 328 467 359 451 343 455 b 300 526 310 483 300 503 b 352 598 300 557 319 589 b 356 599 355 598 356 599 b 352 602 356 599 355 601 b 288 616 330 612 308 616 b 210 584 257 616 230 605 b 164 433 189 559 174 508 b 160 374 163 415 160 381 b 160 374 160 374 160 374 b 160 374 160 374 160 374 b 168 377 160 374 164 376 b 258 395 200 390 228 395 b 366 367 294 395 328 387 b 475 223 436 333 475 283 b 472 197 475 215 473 206 b 349 65 462 141 419 95 b 259 43 317 51 288 43 b 167 69 230 43 200 52 b 4 290 80 113 20 195 b 0 349 1 309 0 328 b 20 467 0 391 6 433 b 255 648 58 563 155 637 m 269 363 b 257 363 265 363 261 363 b 210 345 236 363 220 356 b 186 226 196 324 186 272 b 187 198 186 216 186 206 b 213 95 191 151 202 112 b 257 76 221 83 238 76 b 270 77 261 76 266 76 b 321 156 299 81 310 99 b 329 229 326 183 329 206 b 321 301 329 252 326 274 b 269 363 311 342 298 359 m 236 -1 l 238 -1 l 235 -1 l 236 -1 m 236 673 l 238 673 l 235 673 l 236 673 \"},\n\"v7\":{\"x_min\":0,\"x_max\":442.359375,\"ha\":451,\"o\":\"m 147 648 b 166 649 153 649 160 649 b 313 598 217 649 273 630 b 340 587 323 588 328 587 l 341 587 b 412 628 367 587 390 601 b 427 638 416 635 421 638 b 439 632 431 638 435 637 b 442 623 441 630 442 628 b 430 569 442 616 439 603 b 352 369 408 492 377 410 b 300 259 325 324 313 298 b 273 84 283 205 273 140 b 265 55 273 65 272 59 l 261 54 l 181 54 l 99 54 l 96 55 b 91 61 95 56 92 59 l 89 63 l 89 77 b 147 263 89 133 111 202 b 261 401 176 313 212 355 b 378 541 315 449 349 489 l 382 548 l 375 544 b 240 495 333 512 285 495 b 129 535 198 495 160 509 b 84 560 108 552 95 560 b 76 559 81 560 78 560 b 31 487 59 555 43 530 b 14 470 27 473 24 470 b 1 477 8 470 4 471 l 0 480 l 0 553 l 0 627 l 1 630 b 16 638 4 635 9 638 b 23 635 17 638 20 637 b 49 626 36 626 39 626 b 96 638 59 626 80 630 b 104 639 99 638 102 639 b 117 644 107 641 112 642 b 147 648 125 645 137 648 m 220 -1 l 221 -1 l 219 -1 l 220 -1 m 220 673 l 221 673 l 219 673 l 220 673 \"},\n\"v8\":{\"x_min\":0,\"x_max\":488.640625,\"ha\":499,\"o\":\"m 217 648 b 245 649 225 648 235 649 b 453 516 343 649 430 595 b 458 478 455 503 458 491 b 412 370 458 440 441 398 b 411 369 412 369 411 369 b 415 365 411 367 412 367 b 488 231 462 331 488 281 b 472 165 488 208 483 186 b 243 43 434 86 338 43 b 63 104 178 43 112 62 b 0 233 20 140 0 186 b 73 365 0 283 24 331 l 77 369 l 72 374 b 29 476 42 406 29 441 b 217 648 29 557 103 635 m 258 605 b 242 606 253 605 247 606 b 157 552 198 606 157 580 b 160 541 157 548 159 544 b 319 413 176 503 242 452 l 337 403 l 338 406 b 359 476 352 428 359 452 b 258 605 359 537 318 595 m 138 326 b 130 330 134 328 130 330 b 130 330 130 330 130 330 b 107 305 127 330 112 313 b 84 231 91 281 84 256 b 243 86 84 156 151 86 b 249 87 245 86 246 87 b 347 156 303 88 347 120 b 344 172 347 162 345 167 b 156 319 325 227 257 281 b 138 326 151 322 144 324 m 243 -1 l 245 -1 l 242 -1 l 243 -1 m 243 673 l 245 673 l 242 673 l 243 673 \"},\n\"v9\":{\"x_min\":0,\"x_max\":475.03125,\"ha\":485,\"o\":\"m 191 646 b 212 649 198 648 205 649 b 255 644 227 649 243 646 b 458 448 348 616 428 539 b 475 342 469 415 475 378 b 460 244 475 308 469 274 b 193 44 421 124 303 44 b 91 69 157 44 122 51 b 19 161 43 97 19 126 b 21 181 19 167 20 174 b 98 241 32 220 65 241 b 170 186 129 241 160 223 b 172 166 171 179 172 173 b 121 94 172 134 152 102 b 117 93 118 94 117 93 b 121 90 117 93 118 91 b 185 76 142 80 164 76 b 270 119 220 76 251 91 b 308 259 287 145 300 194 b 313 317 310 277 313 310 b 313 317 313 317 313 317 b 313 317 313 317 313 317 b 304 315 313 317 308 316 b 216 295 273 302 245 295 b 145 308 193 295 170 299 b 19 398 88 327 42 360 b 0 469 5 420 0 444 b 24 551 0 496 8 526 b 191 646 54 596 125 637 m 227 614 b 215 616 224 616 220 616 b 202 614 210 616 206 616 b 152 535 174 610 163 592 b 144 463 147 509 144 485 b 152 391 144 440 147 417 b 216 328 163 344 179 328 b 280 391 253 328 269 344 b 288 463 285 417 288 440 b 280 535 288 485 285 509 b 227 614 269 594 258 610 m 236 -1 l 238 -1 l 235 -1 l 236 -1 m 236 673 l 238 673 l 235 673 l 236 673 \"},\n\"va\":{\"x_min\":-149.71875,\"x_max\":148.359375,\"ha\":151,\"o\":\"m -8 -1 b -1 0 -5 -1 -4 0 b 16 -11 5 0 13 -4 b 83 -186 17 -12 47 -90 l 148 -358 l 148 -363 b 127 -385 148 -376 138 -385 b 112 -378 122 -385 118 -383 b 54 -226 110 -374 114 -385 b 0 -81 24 -147 0 -81 b -55 -226 -1 -81 -25 -147 b -114 -378 -115 -385 -111 -374 b -129 -385 -119 -383 -123 -385 b -149 -363 -140 -385 -149 -376 l -149 -358 l -84 -186 b -19 -11 -49 -90 -19 -12 b -8 -1 -17 -8 -12 -4 \"},\n\"vb\":{\"x_min\":0,\"x_max\":428.75,\"ha\":438,\"o\":\"m 262 186 b 273 186 266 186 272 186 b 274 186 273 186 274 186 b 285 186 274 186 280 186 b 428 48 375 181 428 122 b 386 -68 428 12 416 -29 b 155 -187 329 -145 236 -187 b 12 -111 92 -187 38 -162 b 0 -51 4 -91 0 -72 b 262 186 0 58 122 179 \"},\n\"vc\":{\"x_min\":0,\"x_max\":447.8125,\"ha\":457,\"o\":\"m 0 86 l 0 173 l 223 173 l 447 173 l 447 86 l 447 0 l 223 0 l 0 0 l 0 86 \"},\n\"vf\":{\"x_min\":0,\"x_max\":370.21875,\"ha\":378,\"o\":\"m 0 0 l 0 277 l 61 277 l 122 277 l 122 0 l 122 -278 l 61 -278 l 0 -278 l 0 0 m 246 -1 l 246 277 l 308 277 l 370 277 l 370 -1 l 370 -278 l 308 -278 l 246 -278 l 246 -1 \"},\n\"v10\":{\"x_min\":0,\"x_max\":559.421875,\"ha\":571,\"o\":\"m 5 127 b 14 127 6 127 9 127 b 51 126 25 127 43 127 b 175 98 93 122 138 112 l 186 94 b 279 51 210 86 255 65 b 285 47 280 51 283 48 b 319 27 291 44 311 31 l 326 22 b 359 0 332 19 352 4 l 367 -6 b 371 -9 368 -6 370 -8 l 379 -15 b 387 -22 383 -18 386 -20 l 398 -30 l 411 -40 l 417 -47 l 427 -55 l 434 -61 b 441 -66 436 -62 439 -65 l 446 -72 l 453 -77 l 462 -87 b 558 -188 490 -113 549 -176 b 559 -195 559 -191 559 -194 b 548 -205 559 -201 555 -205 b 541 -204 547 -205 544 -205 b 534 -198 539 -201 536 -199 l 525 -191 b 481 -162 518 -187 490 -167 b 472 -155 477 -159 472 -156 b 468 -152 470 -155 469 -154 b 461 -149 466 -152 464 -151 b 428 -130 454 -145 441 -137 b 371 -99 413 -122 372 -99 b 363 -95 371 -99 367 -98 b 353 -91 357 -94 353 -91 b 348 -90 353 -91 352 -91 b 332 -81 343 -87 341 -86 b 27 -12 230 -37 127 -13 b 0 -5 4 -11 2 -11 b 0 58 0 -2 0 27 b 0 122 0 88 0 120 b 5 127 1 124 4 126 \"},\n\"v11\":{\"x_min\":-155.171875,\"x_max\":153.8125,\"ha\":157,\"o\":\"m -137 353 b -130 353 -136 353 -133 353 b -112 349 -125 353 -119 352 b -100 342 -110 347 -104 344 b 0 317 -69 326 -35 317 b 111 349 38 317 76 328 b 129 353 117 352 123 353 b 153 327 142 353 153 344 b 144 302 153 320 153 317 b 27 6 93 226 50 113 b 21 -13 24 -11 24 -11 b 0 -26 17 -22 8 -26 b -24 -12 -9 -26 -19 -22 b -28 5 -24 -9 -27 -2 b -145 302 -53 117 -95 224 b -155 327 -155 317 -155 320 b -137 353 -155 340 -148 349 \"},\n\"v18\":{\"x_min\":0,\"x_max\":323.9375,\"ha\":331,\"o\":\"m 217 535 b 225 537 220 537 221 537 b 245 524 235 537 242 533 l 246 521 l 247 390 l 247 258 l 273 265 b 306 270 288 269 299 270 b 322 259 315 270 319 267 b 323 208 323 256 323 233 b 322 158 323 184 323 159 b 288 140 318 148 315 147 b 247 130 254 131 247 130 b 247 65 247 130 247 104 b 247 20 247 51 247 36 l 247 -88 l 273 -81 b 306 -76 289 -77 299 -76 b 318 -81 311 -76 315 -77 b 323 -123 323 -87 323 -86 l 323 -138 l 323 -154 b 318 -195 323 -191 323 -190 b 269 -210 314 -199 315 -199 b 249 -216 259 -213 250 -216 l 247 -216 l 247 -349 l 246 -483 l 245 -487 b 225 -499 242 -495 234 -499 b 206 -487 219 -499 210 -495 l 205 -483 l 205 -355 l 205 -227 l 204 -227 l 181 -233 l 138 -244 b 117 -249 127 -247 117 -249 b 115 -385 115 -249 115 -256 l 115 -523 l 114 -526 b 95 -538 110 -534 102 -538 b 74 -526 87 -538 78 -534 l 73 -523 l 73 -391 b 72 -260 73 -269 73 -260 b 72 -260 72 -260 72 -260 b 19 -273 61 -263 23 -273 b 0 -260 10 -273 4 -267 b 0 -209 0 -256 0 -256 l 0 -162 l 1 -158 b 61 -134 5 -148 5 -148 l 73 -131 l 73 -22 b 72 86 73 79 73 86 b 72 86 72 86 72 86 b 19 74 61 83 23 74 b 0 86 10 74 4 79 b 0 137 0 90 0 90 l 0 184 l 1 188 b 61 212 5 198 5 198 l 73 215 l 73 348 l 73 481 l 74 485 b 95 498 78 492 87 498 b 103 495 98 498 100 496 b 114 485 107 494 111 489 l 115 481 l 115 353 l 115 226 l 121 226 b 159 235 123 227 141 231 l 198 247 l 205 248 l 205 384 l 205 521 l 206 524 b 217 535 209 528 212 533 m 205 9 b 205 119 205 70 205 119 l 205 119 b 182 113 204 119 194 116 l 138 102 b 117 97 127 99 117 97 b 115 -12 115 97 115 91 l 115 -122 l 121 -120 b 159 -111 123 -119 141 -115 l 198 -101 l 205 -98 l 205 9 \"},\n\"v1b\":{\"x_min\":0,\"x_max\":559.421875,\"ha\":571,\"o\":\"m 544 204 b 548 204 545 204 547 204 b 559 194 555 204 559 199 b 559 190 559 192 559 191 b 530 156 559 188 556 184 b 462 86 510 134 481 104 b 453 76 458 81 454 77 l 446 70 l 441 65 b 434 59 439 63 436 61 l 427 54 b 409 37 426 51 416 44 b 392 23 398 29 394 26 b 387 19 389 22 387 20 b 379 13 386 19 383 16 l 371 8 l 367 5 l 359 -1 l 337 -16 b 285 -48 319 -29 298 -41 l 279 -52 b 186 -95 255 -66 210 -87 l 175 -99 b 23 -129 127 -117 68 -129 b 17 -129 20 -129 19 -129 b 1 -123 2 -129 2 -129 b 0 -49 0 -122 0 -83 b 0 4 0 -22 0 1 b 27 11 2 9 4 9 b 185 31 78 12 145 20 b 198 34 186 31 193 33 b 314 73 234 44 277 58 b 349 88 328 79 340 84 b 353 90 352 90 353 90 b 363 94 353 90 357 93 b 371 98 367 97 371 98 b 428 129 372 98 413 120 b 461 148 441 136 454 144 b 468 151 464 149 466 151 b 472 154 469 152 470 154 b 481 161 473 155 477 158 b 525 190 490 166 518 186 l 534 197 b 540 201 536 198 539 199 b 544 204 541 202 544 204 \"},\n\"v1d\":{\"x_min\":0,\"x_max\":619.3125,\"ha\":632,\"o\":\"m 274 184 b 307 186 285 186 296 186 b 616 22 465 186 597 116 b 619 -1 617 13 619 5 b 308 -187 619 -104 483 -187 b 0 -1 133 -187 0 -102 b 5 36 0 11 1 23 b 274 184 29 115 141 176 m 289 161 b 272 162 284 162 277 162 b 171 41 209 162 171 108 b 205 -73 171 5 182 -34 b 345 -163 243 -133 298 -163 b 436 -98 385 -163 420 -142 b 446 -43 443 -80 446 -62 b 289 161 446 47 377 147 \"},\n\"v1e\":{\"x_min\":-402.890625,\"x_max\":401.53125,\"ha\":410,\"o\":\"m -219 173 b -213 174 -217 174 -215 174 b -202 173 -209 174 -205 173 b -114 86 -200 172 -179 151 b -28 0 -66 37 -28 0 b 40 84 -28 0 2 37 b 117 174 111 173 110 172 b 122 174 118 174 119 174 b 132 173 125 174 129 173 b 295 11 134 172 171 134 l 307 -1 l 336 34 b 374 76 366 72 368 74 b 381 77 375 77 378 77 b 401 56 392 77 401 68 b 400 48 401 54 401 51 b 223 -172 397 41 230 -166 b 210 -176 220 -174 215 -176 b 201 -174 206 -176 204 -176 b 112 -87 198 -173 178 -152 b 27 0 65 -38 27 0 b -42 -86 27 0 -4 -38 b -118 -174 -112 -174 -111 -173 b -123 -176 -119 -176 -121 -176 b -133 -174 -126 -176 -130 -174 b -296 -12 -136 -173 -172 -137 l -308 0 l -337 -34 b -375 -77 -367 -73 -370 -76 b -382 -79 -377 -79 -379 -79 b -402 -58 -393 -79 -402 -69 b -401 -49 -402 -55 -402 -52 b -224 172 -398 -43 -228 167 b -219 173 -223 172 -220 173 \"},\n\"v1f\":{\"x_min\":-340.28125,\"x_max\":338.921875,\"ha\":346,\"o\":\"m -32 520 b -29 521 -31 520 -31 521 b -23 519 -27 521 -24 520 b -20 513 -21 517 -20 516 b -21 506 -20 512 -20 509 b -31 474 -23 502 -27 488 l -53 402 l -66 352 l -68 349 l -57 349 b -32 351 -51 349 -40 351 b 123 370 19 352 74 359 b 137 371 127 370 133 371 b 170 356 152 371 164 366 b 171 355 170 355 170 355 b 216 366 174 355 183 358 b 280 378 268 377 266 377 b 287 378 283 378 284 378 b 332 349 307 378 322 369 b 338 319 336 341 338 330 b 332 301 338 310 336 302 b 242 280 329 299 246 280 b 242 280 242 280 242 280 b 235 288 236 280 235 283 b 235 292 235 290 235 291 b 236 302 236 297 236 299 b 220 337 236 316 230 330 l 216 340 l 210 335 b 159 276 189 322 172 301 b 118 149 152 265 156 274 b 81 34 84 36 85 36 b -8 13 78 33 -4 13 b -8 13 -8 13 -8 13 b -14 20 -12 15 -14 15 b -8 44 -14 24 -12 31 b -2 66 -5 55 -2 65 b -2 66 -2 66 -2 66 l -2 66 b -43 41 -2 66 -21 55 b -114 4 -98 8 -98 8 b -144 0 -123 0 -134 0 b -242 99 -197 0 -242 43 b -242 109 -242 102 -242 105 b -212 219 -240 122 -242 116 b -185 312 -197 270 -185 312 l -185 312 b -189 312 -185 312 -186 312 b -259 312 -200 312 -227 312 b -321 310 -291 312 -310 310 b -334 312 -330 310 -334 312 b -340 319 -338 313 -340 316 b -336 326 -340 322 -338 324 b -291 337 -334 326 -314 331 l -247 347 l -210 348 b -172 348 -190 348 -172 348 b -168 363 -172 348 -171 355 b -145 442 -151 424 -145 441 b -133 452 -144 444 -140 446 l -77 489 b -32 520 -53 506 -32 520 m 57 334 b 53 335 55 335 54 335 b 44 334 50 335 49 335 b -70 316 8 326 -28 320 b -78 309 -78 316 -78 316 b -108 202 -80 305 -88 274 b -141 81 -136 112 -141 93 b -140 74 -141 79 -141 77 b -117 49 -137 59 -127 49 b -107 52 -114 49 -110 51 b 16 127 -106 54 14 126 b 42 217 16 127 42 215 b 49 241 42 222 44 229 b 73 320 53 251 73 317 b 57 334 73 327 65 333 \"},\n\"v20\":{\"x_min\":-571.671875,\"x_max\":570.3125,\"ha\":582,\"o\":\"m -559 351 b -551 352 -556 352 -553 352 b -530 338 -543 352 -533 348 b -529 169 -530 337 -529 291 l -529 1 l -507 27 l -441 112 b -382 174 -394 169 -390 174 b -378 174 -381 174 -379 174 b -281 86 -370 174 -375 179 b -196 0 -234 37 -196 0 b -126 84 -196 0 -164 37 b -50 174 -55 173 -57 172 b -44 174 -49 174 -47 174 b -35 173 -42 174 -38 173 b 53 86 -32 172 -12 151 b 138 0 100 37 138 0 b 208 84 140 0 170 37 b 284 174 279 173 279 172 b 289 174 285 174 288 174 b 300 173 294 174 298 173 b 462 11 303 172 340 134 l 475 -1 l 503 34 b 541 76 534 72 536 74 b 548 77 544 77 545 77 b 570 56 560 77 570 68 b 567 48 570 54 568 51 b 392 -172 564 41 397 -166 b 378 -176 387 -174 382 -176 b 368 -174 375 -176 371 -176 b 280 -87 367 -173 347 -152 b 194 0 234 -38 194 0 b 126 -86 194 0 163 -38 b 49 -174 54 -174 55 -173 b 44 -176 47 -176 46 -176 b 34 -174 40 -176 36 -174 b -54 -87 31 -173 10 -152 b -140 0 -102 -38 -140 0 b -209 -86 -140 0 -171 -38 b -285 -174 -280 -174 -279 -173 b -291 -176 -287 -176 -288 -176 b -300 -174 -294 -176 -298 -174 b -464 -11 -303 -173 -374 -102 l -476 0 l -506 -37 b -539 -76 -528 -65 -537 -74 b -551 -80 -543 -79 -547 -80 b -570 -68 -558 -80 -566 -76 l -571 -65 l -571 136 b -570 340 -571 331 -571 337 b -559 351 -568 344 -564 348 \"},\n\"v22\":{\"x_min\":0,\"x_max\":432.828125,\"ha\":442,\"o\":\"m 209 186 b 213 187 210 187 212 187 b 216 187 215 187 216 187 b 224 174 216 186 220 180 b 420 -1 269 105 338 43 b 432 -12 431 -8 432 -9 b 421 -23 432 -15 432 -16 b 228 -180 345 -70 264 -137 b 219 -188 221 -188 221 -188 l 219 -188 b 208 -177 215 -188 215 -188 b 10 1 163 -106 93 -44 b 0 11 0 6 0 8 b 10 22 0 13 0 15 b 202 179 87 69 167 136 b 209 186 206 183 209 186 \"},\n\"v23\":{\"x_min\":0,\"x_max\":133.390625,\"ha\":136,\"o\":\"m 54 66 b 65 68 58 68 61 68 b 122 37 88 68 110 56 b 133 -1 130 26 133 12 b 104 -58 133 -23 123 -44 b 66 -69 92 -65 78 -69 b 10 -38 44 -69 23 -58 b 0 -1 2 -27 0 -13 b 54 66 0 30 20 61 \"},\n\"v25\":{\"x_min\":0,\"x_max\":318.5,\"ha\":325,\"o\":\"m 20 376 b 167 377 23 377 96 377 b 296 376 231 377 294 377 b 318 347 311 371 318 359 b 296 316 318 333 311 320 b 159 315 294 315 227 315 b 21 316 91 315 24 315 b 0 345 6 320 0 333 b 20 376 0 359 6 371 \"},\n\"v26\":{\"x_min\":-21.78125,\"x_max\":483.1875,\"ha\":493,\"o\":\"m -8 631 b -1 632 -6 632 -4 632 b 19 620 8 632 16 628 b 20 383 20 616 20 616 l 20 148 l 21 151 b 140 199 59 183 102 199 b 206 179 164 199 187 192 l 210 176 l 210 396 l 210 617 l 212 621 b 231 632 216 628 223 632 b 250 620 239 632 247 628 b 251 383 251 616 251 616 l 251 148 l 254 151 b 370 199 291 183 332 199 b 415 191 385 199 400 197 b 483 84 458 176 483 134 b 461 0 483 58 476 29 b 332 -142 439 -40 411 -72 l 255 -215 b 231 -229 240 -229 239 -229 b 216 -223 224 -229 220 -227 b 210 -158 210 -217 210 -223 b 210 -120 210 -148 210 -136 l 210 -29 l 205 -34 b 100 -142 182 -65 159 -88 l 23 -215 b -1 -229 9 -229 6 -229 b -20 -216 -9 -229 -17 -224 l -21 -212 l -21 201 l -21 616 l -20 620 b -8 631 -17 624 -13 630 m 110 131 b 96 133 106 133 100 133 b 89 133 93 133 91 133 b 24 87 63 129 40 113 l 20 80 l 20 -37 l 20 -156 l 23 -152 b 144 81 96 -72 144 20 l 144 83 b 110 131 144 113 134 126 m 341 131 b 328 133 337 133 332 133 b 322 133 326 133 323 133 b 257 87 296 129 273 113 l 251 80 l 251 -37 l 251 -156 l 255 -152 b 375 81 328 -72 375 20 l 375 83 b 341 131 375 113 367 126 \"},\n\"v27\":{\"x_min\":0,\"x_max\":432.828125,\"ha\":442,\"o\":\"m 208 184 b 213 187 209 186 212 187 b 224 176 217 187 221 183 b 245 147 225 172 235 159 b 419 -1 288 90 347 38 b 431 -8 424 -4 431 -8 b 432 -12 432 -9 432 -11 b 430 -18 432 -13 432 -16 b 364 -61 424 -20 383 -47 b 225 -183 307 -102 250 -152 b 223 -187 224 -184 223 -187 b 220 -188 221 -188 220 -188 b 208 -176 216 -188 210 -184 b 187 -148 205 -173 197 -159 b 12 0 144 -90 84 -38 b 0 11 4 5 0 8 b 16 24 0 13 4 18 b 183 158 83 69 141 115 b 208 184 194 169 198 173 m 183 105 b 176 113 181 109 176 113 b 172 109 176 113 175 112 b 92 45 149 90 117 62 l 88 41 l 102 31 b 247 -105 160 -6 210 -55 l 254 -115 l 257 -112 l 269 -102 b 340 -45 287 -87 319 -61 l 344 -43 l 330 -33 b 183 105 272 6 221 54 \"},\n\"v28\":{\"x_min\":-73.5,\"x_max\":72.140625,\"ha\":74,\"o\":\"m -72 252 l -73 254 l 0 254 l 72 254 l 70 252 b 0 -1 70 248 0 -1 b -72 252 -1 -1 -72 248 \"},\n\"v29\":{\"x_min\":-590.71875,\"x_max\":589.359375,\"ha\":601,\"o\":\"m 175 273 b 182 274 178 273 181 274 b 202 262 190 274 198 269 b 204 158 204 259 204 259 l 204 56 l 250 112 b 303 174 296 172 298 172 b 308 174 304 174 307 174 b 318 173 313 174 317 173 b 481 11 322 172 357 134 l 494 -1 l 522 34 b 560 76 553 72 555 74 b 567 77 563 77 564 77 b 589 56 579 77 589 68 b 586 48 589 54 588 51 b 411 -172 583 41 416 -166 b 397 -176 406 -174 401 -176 b 387 -174 393 -176 390 -176 b 299 -87 386 -173 366 -152 b 213 0 253 -38 213 0 b 208 -6 213 0 210 -2 l 204 -12 l 204 -147 b 204 -210 204 -173 204 -194 b 198 -292 204 -297 204 -287 b 183 -299 194 -297 189 -299 b 164 -287 175 -299 167 -295 b 163 -174 163 -284 163 -284 l 161 -63 l 119 -117 b 65 -176 76 -170 73 -176 b 61 -176 63 -176 62 -176 b -35 -87 51 -174 57 -180 b -121 0 -83 -38 -121 0 b -190 -86 -122 0 -152 -38 b -266 -174 -261 -174 -259 -173 b -272 -176 -268 -176 -270 -176 b -281 -174 -276 -176 -280 -174 b -371 -86 -284 -173 -304 -152 b -457 0 -417 -38 -457 0 l -457 0 b -477 -26 -457 0 -470 -16 b -548 -227 -524 -88 -548 -161 b -536 -303 -548 -254 -544 -280 b -533 -317 -534 -309 -533 -313 b -553 -338 -533 -330 -541 -338 b -577 -315 -566 -338 -571 -333 b -590 -227 -586 -287 -590 -258 b -518 -9 -590 -154 -564 -77 b -465 56 -509 2 -504 8 l -402 134 b -363 174 -374 170 -371 174 b -359 174 -362 174 -360 174 b -262 86 -351 174 -356 179 b -176 0 -216 37 -176 0 b -107 84 -176 0 -145 37 b -31 174 -36 173 -38 172 b -25 174 -29 174 -28 174 b -16 173 -23 174 -19 173 b 147 11 -13 172 35 123 l 157 -1 l 160 1 l 163 4 l 163 130 b 164 260 163 256 163 258 b 175 273 166 266 170 270 \"},\n\"v2a\":{\"x_min\":-21.78125,\"x_max\":366.140625,\"ha\":374,\"o\":\"m 276 1378 b 284 1379 279 1379 281 1379 b 306 1360 292 1379 298 1374 b 352 1247 326 1326 343 1286 b 366 1139 362 1213 366 1175 b 347 1009 366 1093 359 1049 l 344 1002 l 347 992 b 352 971 348 986 351 977 b 366 863 362 936 366 899 b 347 732 366 818 359 773 l 344 725 l 347 716 b 352 695 348 710 351 700 b 366 588 362 659 366 623 b 223 262 366 464 314 345 b 189 233 212 252 212 252 b 35 76 126 183 73 129 b -1 16 20 56 2 27 b -19 4 -4 9 -12 4 l -21 4 l -21 137 l -21 270 l -17 270 b 186 344 59 281 134 308 b 319 606 270 399 319 499 b 317 650 319 620 319 635 l 315 659 l 314 655 b 223 537 288 607 258 570 b 189 509 212 528 212 528 b 35 352 126 459 73 405 b -1 292 20 333 2 303 b -19 280 -4 285 -12 280 l -21 280 l -21 413 l -21 546 l -17 546 b 186 620 59 557 134 584 b 319 882 270 675 319 775 b 317 925 319 896 319 911 l 315 935 l 314 931 b 223 813 288 884 258 846 b 189 785 212 805 212 805 b 35 628 126 735 73 681 b -1 569 20 609 2 580 b -19 556 -4 562 -12 556 l -21 556 l -21 689 l -21 823 l -17 823 b 202 907 68 835 152 867 b 319 1157 280 968 319 1061 b 270 1338 319 1218 303 1281 b 262 1358 264 1349 262 1353 b 262 1364 262 1360 262 1363 b 276 1378 265 1371 269 1376 \"},\n\"v2c\":{\"x_min\":-597.53125,\"x_max\":596.171875,\"ha\":608,\"o\":\"m -413 173 b -408 174 -412 174 -409 174 b -397 173 -404 174 -400 173 b -308 86 -394 172 -374 151 b -223 0 -261 37 -223 0 b -153 84 -223 0 -191 37 b -77 174 -83 173 -84 172 b -72 174 -76 174 -74 174 b -62 173 -68 174 -63 173 b 25 86 -59 172 -39 151 b 112 0 73 37 111 0 b 181 84 112 0 144 37 b 257 174 251 173 251 172 b 262 174 258 174 261 174 b 273 173 266 174 270 173 b 436 9 276 172 347 101 l 447 -1 l 477 36 b 522 79 511 79 513 79 l 522 79 b 552 51 533 79 539 73 b 596 -112 582 6 596 -51 b 567 -262 596 -161 586 -213 b 539 -322 558 -287 544 -316 b 524 -327 534 -326 529 -327 b 504 -315 515 -327 507 -323 b 503 -308 503 -312 503 -309 b 511 -285 503 -302 504 -297 b 555 -113 540 -227 555 -169 b 544 -34 555 -86 551 -59 b 522 19 540 -16 530 8 l 521 22 l 481 -26 l 405 -122 b 353 -176 366 -172 362 -176 b 349 -176 352 -176 351 -176 b 253 -87 341 -176 347 -180 b 167 0 206 -38 167 0 b 99 -86 167 0 136 -38 b 21 -174 27 -174 28 -173 b 17 -176 20 -176 19 -176 b 6 -174 13 -176 9 -174 b -81 -87 4 -173 -14 -152 b -167 0 -129 -38 -167 0 b -236 -86 -167 0 -198 -38 b -313 -174 -307 -174 -306 -173 b -318 -176 -314 -176 -315 -176 b -328 -174 -321 -176 -325 -174 b -491 -12 -330 -173 -367 -137 l -503 0 l -530 -34 b -570 -77 -562 -73 -564 -76 b -577 -79 -571 -79 -574 -79 b -597 -58 -588 -79 -597 -69 b -596 -49 -597 -55 -597 -52 b -417 172 -593 -43 -423 167 b -413 173 -417 172 -415 173 \"},\n\"v2d\":{\"x_min\":0,\"x_max\":438.28125,\"ha\":447,\"o\":\"m 212 190 b 219 191 213 191 216 191 b 236 176 225 191 228 190 b 419 18 277 105 341 49 b 436 5 431 13 434 11 b 438 -1 438 4 438 1 b 424 -16 438 -8 432 -13 b 356 -49 409 -20 379 -36 b 234 -180 306 -83 258 -133 b 219 -192 230 -188 224 -192 b 200 -176 213 -192 206 -187 b 9 -15 157 -102 89 -45 b 0 0 2 -12 0 -6 b 16 18 0 9 2 12 b 200 176 93 48 159 104 b 212 190 205 186 208 188 m 239 113 b 236 117 238 116 238 117 b 230 108 235 117 234 115 b 92 -15 196 58 140 8 b 88 -18 91 -16 88 -18 b 92 -20 88 -18 91 -19 b 198 -116 130 -43 166 -74 b 200 -117 200 -117 200 -117 b 201 -117 200 -117 201 -117 b 264 -43 212 -98 242 -62 b 345 15 288 -19 321 4 b 348 18 347 16 348 16 b 344 20 348 18 347 19 b 239 113 307 41 266 79 \"},\n\"v2f\":{\"x_min\":-1.359375,\"x_max\":680.5625,\"ha\":694,\"o\":\"m 597 1042 b 604 1042 600 1042 602 1042 b 642 1002 627 1042 642 1022 b 619 966 642 988 635 974 b 439 927 574 942 503 927 l 426 927 l 426 921 b 430 838 428 893 430 866 b 345 480 430 696 398 560 b 179 391 307 423 249 391 b 156 392 171 391 164 392 b 138 394 149 394 142 394 b 103 434 115 396 103 416 b 129 471 103 451 111 466 b 141 474 133 473 137 474 b 172 459 153 474 164 469 b 181 455 175 456 176 455 b 187 456 182 455 185 455 b 253 520 212 460 234 483 b 315 836 294 605 315 714 b 311 928 315 867 314 898 b 302 945 310 943 311 942 b 245 953 283 950 262 953 b 130 891 193 953 149 931 b 84 860 119 870 102 860 b 36 905 61 860 39 877 b 36 910 36 907 36 909 b 80 970 36 931 50 949 b 249 1017 125 1000 187 1017 b 322 1009 273 1017 299 1014 l 341 1003 b 436 991 372 995 406 991 b 577 1031 495 991 545 1004 b 597 1042 583 1038 590 1041 m 416 360 b 424 360 419 360 421 360 b 481 309 454 360 479 338 b 503 145 484 280 495 199 b 585 -185 525 16 555 -106 b 630 -245 596 -213 613 -237 l 634 -247 l 638 -245 b 647 -244 641 -245 645 -244 b 680 -278 666 -244 680 -262 b 664 -308 680 -290 675 -301 b 638 -312 658 -310 650 -312 b 613 -309 631 -312 623 -310 b 477 -201 555 -303 502 -260 b 417 -2 460 -159 434 -72 b 416 5 417 1 416 5 b 416 5 416 5 416 5 b 411 -5 415 5 413 0 b 359 -97 397 -33 377 -70 b 353 -106 355 -102 353 -105 b 359 -112 353 -108 355 -109 b 409 -130 375 -123 390 -129 b 426 -134 420 -130 421 -131 b 431 -147 428 -137 431 -141 b 420 -162 431 -152 427 -159 b 382 -169 409 -166 396 -169 b 323 -155 363 -169 341 -165 l 317 -152 l 314 -155 b 62 -303 240 -240 148 -295 b 36 -305 55 -305 44 -305 b 23 -303 29 -305 24 -305 b -1 -273 6 -299 -1 -287 b 31 -240 -1 -256 10 -240 b 36 -240 32 -240 34 -240 b 42 -241 38 -241 39 -241 b 134 -204 63 -241 99 -226 b 367 288 265 -115 357 81 b 375 330 368 313 370 320 b 416 360 383 347 400 358 m 360 -359 b 379 -359 363 -359 371 -359 b 424 -360 396 -359 416 -359 b 646 -502 536 -373 624 -430 b 649 -527 649 -510 649 -519 b 530 -673 649 -578 604 -635 l 521 -677 l 529 -681 b 653 -811 592 -714 637 -762 b 660 -853 658 -827 660 -839 b 645 -911 660 -873 656 -892 b 426 -1021 608 -981 519 -1021 b 283 -989 377 -1021 328 -1011 b 235 -949 249 -972 239 -964 b 234 -936 234 -946 234 -941 b 234 -928 234 -934 234 -931 l 235 -925 l 234 -927 l 225 -934 b 87 -982 186 -966 138 -982 b 80 -982 85 -982 83 -982 b 55 -981 70 -981 58 -981 b 17 -943 32 -981 17 -964 b 54 -904 17 -921 35 -904 b 78 -914 62 -904 72 -909 l 83 -918 l 88 -918 b 190 -831 122 -918 166 -881 b 269 -506 242 -727 269 -612 b 268 -462 269 -492 269 -477 b 266 -449 266 -458 266 -452 b 265 -444 266 -445 266 -444 b 257 -446 264 -444 261 -445 b 132 -545 196 -470 152 -505 b 88 -573 122 -563 104 -573 b 39 -523 63 -573 39 -553 b 63 -476 39 -505 44 -494 b 360 -359 136 -408 235 -369 m 419 -424 b 393 -423 411 -423 406 -423 l 375 -423 l 377 -426 b 379 -439 377 -427 378 -434 b 383 -510 382 -463 383 -487 b 314 -811 383 -609 360 -710 b 266 -893 296 -850 285 -870 b 264 -898 265 -896 264 -898 l 264 -898 b 264 -898 264 -898 264 -898 b 268 -898 264 -898 266 -898 b 273 -898 270 -898 272 -898 b 300 -909 283 -898 291 -900 b 426 -957 340 -941 385 -957 b 476 -949 443 -957 460 -954 b 547 -853 522 -931 547 -893 b 485 -745 547 -816 526 -775 b 397 -707 460 -727 432 -714 b 366 -675 375 -703 366 -692 b 396 -642 366 -657 377 -645 b 530 -557 455 -637 511 -601 b 536 -527 534 -548 536 -537 b 419 -424 536 -480 490 -437 \"},\n\"v30\":{\"x_min\":-21.78125,\"x_max\":367.5,\"ha\":375,\"o\":\"m 276 1900 b 284 1901 279 1900 281 1901 b 306 1883 291 1901 298 1896 b 367 1686 347 1825 367 1757 b 343 1558 367 1643 359 1600 l 338 1549 l 343 1537 b 367 1411 359 1497 367 1454 b 343 1282 367 1367 359 1324 l 338 1272 l 343 1261 b 367 1135 359 1221 367 1178 b 343 1007 367 1090 359 1047 l 338 996 l 343 985 b 367 859 359 945 367 902 b 343 731 367 814 359 771 l 338 720 l 343 709 b 367 582 359 667 367 626 b 289 362 367 503 340 426 b 239 312 276 345 259 330 b 29 77 152 237 76 152 b -1 18 14 54 2 30 b -19 4 -4 11 -12 4 l -21 4 l -21 133 l -20 260 l -13 262 b 98 299 17 269 62 284 b 111 305 103 302 110 305 b 167 334 123 310 156 327 b 319 595 264 391 319 491 b 313 659 319 616 318 638 b 310 667 311 664 311 667 b 307 663 310 667 308 666 b 240 588 289 637 269 614 b 16 331 141 505 62 413 b -1 294 8 316 1 302 b -19 280 -4 287 -12 280 l -21 280 l -21 408 l -20 537 l -13 538 b 98 576 17 545 62 560 b 111 581 103 578 110 581 b 167 610 123 587 156 603 b 319 871 264 667 319 767 b 313 935 319 892 318 913 b 310 942 311 941 311 942 b 307 939 310 942 308 941 b 240 864 289 913 269 889 b 16 607 141 781 62 689 b -1 570 8 592 1 578 b -19 556 -4 563 -12 556 l -21 556 l -21 684 l -20 813 l -13 814 b 98 852 17 821 62 836 b 111 857 103 855 110 857 b 167 886 123 863 156 880 b 319 1147 264 943 319 1043 b 313 1211 319 1168 318 1189 b 310 1218 311 1217 311 1218 b 307 1215 310 1218 308 1217 b 240 1140 289 1188 269 1165 b 16 884 141 1057 62 966 b -1 846 8 868 1 855 b -19 832 -4 839 -12 832 l -21 832 l -21 960 l -20 1089 l -13 1090 b 98 1128 17 1097 62 1111 b 111 1134 103 1131 110 1134 b 167 1163 123 1139 156 1156 b 319 1424 264 1220 319 1320 b 313 1486 319 1444 318 1465 b 310 1494 311 1493 311 1494 b 307 1492 310 1494 308 1493 b 240 1417 289 1464 269 1442 b 16 1160 141 1333 62 1242 b -1 1121 8 1145 1 1131 b -19 1109 -4 1115 -12 1109 l -21 1109 l -21 1236 l -20 1365 l -13 1367 b 98 1404 17 1374 62 1388 b 111 1410 103 1407 110 1410 b 250 1508 172 1437 215 1467 b 319 1701 296 1564 319 1633 b 270 1859 319 1757 303 1814 b 262 1882 265 1868 262 1875 b 276 1900 262 1890 266 1896 \"},\n\"v31\":{\"x_min\":0,\"x_max\":386.5625,\"ha\":394,\"o\":\"m 0 173 l 0 347 l 193 347 l 386 347 l 386 173 l 386 0 l 193 0 l 0 0 l 0 173 \"},\n\"v33\":{\"x_min\":-423.3125,\"x_max\":421.9375,\"ha\":431,\"o\":\"m -10 276 b -2 277 -8 277 -5 277 b 17 265 5 277 13 273 b 19 163 19 260 19 260 l 19 68 l 39 45 b 277 -95 122 -34 200 -81 b 289 -97 281 -97 285 -97 b 378 0 332 -97 371 -54 b 378 11 378 4 378 6 b 302 83 378 55 345 83 b 242 66 283 83 262 77 b 208 56 231 59 219 56 b 148 120 175 56 148 81 b 200 186 148 151 164 172 b 261 198 220 194 240 198 b 420 45 341 198 411 137 b 421 22 421 37 421 29 b 257 -198 421 -86 347 -188 b 242 -198 251 -198 247 -198 b 20 -105 181 -198 95 -163 l 19 -104 l 19 -183 b 19 -216 19 -195 19 -206 b 12 -273 19 -272 17 -267 b -2 -278 8 -277 2 -278 b -21 -266 -10 -278 -19 -274 b -23 -165 -23 -263 -23 -262 l -23 -69 l -44 -47 b -250 86 -117 23 -183 66 b -295 94 -270 93 -284 94 b -315 91 -302 94 -308 94 b -381 5 -356 81 -381 43 b -355 -56 -381 -16 -372 -40 b -299 -81 -338 -73 -319 -81 b -246 -68 -283 -81 -265 -77 b -212 -58 -234 -61 -223 -58 b -168 -77 -196 -58 -179 -65 b -151 -122 -156 -90 -151 -105 b -179 -174 -151 -141 -160 -162 b -239 -195 -194 -184 -217 -192 b -257 -197 -245 -195 -250 -197 b -423 -5 -349 -197 -423 -113 b -423 0 -423 -4 -423 -1 b -277 194 -420 97 -362 173 b -247 197 -268 197 -258 197 b -24 104 -185 197 -100 162 l -23 102 l -23 181 b -21 265 -23 260 -23 260 b -10 276 -20 269 -14 274 \"},\n\"v34\":{\"x_min\":0,\"x_max\":622.03125,\"ha\":635,\"o\":\"m 398 417 b 406 419 401 419 404 419 b 427 398 417 419 427 409 b 427 391 427 395 427 392 b 34 -274 424 385 38 -272 b 20 -280 29 -278 25 -280 b 0 -259 9 -280 0 -270 b 0 -252 0 -256 0 -254 b 393 413 2 -247 389 410 b 398 417 394 415 397 416 m 592 417 b 600 419 594 419 597 419 b 622 398 611 419 622 409 b 620 391 622 395 620 392 b 227 -274 617 385 231 -272 b 213 -280 223 -278 219 -280 b 193 -259 202 -280 193 -270 b 194 -252 193 -256 193 -254 b 586 413 196 -247 582 410 b 592 417 588 415 590 416 \"},\n\"v36\":{\"x_min\":-1.359375,\"x_max\":1064.390625,\"ha\":1086,\"o\":\"m 296 692 b 314 694 302 694 307 694 b 386 685 337 694 366 689 b 548 498 480 660 548 580 b 548 481 548 492 548 487 b 455 395 541 426 499 395 b 370 462 420 395 383 417 b 362 496 364 477 362 488 b 377 514 362 509 367 514 b 393 501 386 514 390 510 b 432 474 397 484 413 474 b 470 487 445 474 458 478 b 491 530 484 496 491 510 b 490 544 491 534 491 539 b 333 660 479 606 411 657 l 323 662 l 315 646 b 269 524 285 591 269 556 b 321 431 269 492 287 466 b 349 395 338 413 343 408 b 363 342 359 378 363 362 b 359 312 363 333 362 322 b 285 158 348 266 318 206 b 281 152 283 155 281 152 b 281 152 281 152 281 152 b 287 154 283 152 284 152 b 318 155 298 154 308 155 b 461 98 371 155 419 136 l 464 97 l 483 112 b 503 129 494 120 503 127 b 504 130 503 129 504 129 b 503 138 504 131 503 134 b 500 180 500 152 500 166 b 553 326 500 238 518 288 b 604 366 560 331 592 358 b 649 381 617 376 632 381 b 696 362 665 381 681 374 b 724 302 714 347 724 324 b 695 238 724 278 714 255 b 660 210 691 234 662 212 b 579 148 658 209 582 151 b 579 148 579 148 579 148 b 596 106 579 144 589 119 b 622 77 604 88 609 83 b 657 69 632 72 645 69 b 748 112 688 69 721 84 b 755 123 754 117 755 120 b 755 127 755 124 755 126 b 751 165 752 137 751 151 b 758 219 751 183 754 202 b 894 387 774 290 820 347 b 896 390 896 388 896 388 b 891 398 896 391 895 392 b 622 560 827 477 730 535 b 600 580 605 564 600 569 b 617 596 600 591 607 596 b 628 595 622 596 624 596 b 1057 248 846 552 1020 412 b 1064 191 1061 229 1064 209 b 922 0 1064 94 1005 9 b 902 -1 916 -1 909 -1 b 774 76 847 -1 800 26 b 769 83 770 81 770 83 b 769 81 769 83 769 83 b 627 -1 733 29 677 -1 b 548 27 597 -1 570 8 b 515 88 537 37 525 61 l 513 95 l 510 93 l 453 45 b 390 0 396 0 396 0 b 390 0 390 0 390 0 b 374 15 381 0 377 4 b 268 105 359 69 314 105 b 250 104 262 105 257 105 l 243 102 l 234 90 b 155 1 201 49 159 2 b 147 -1 152 0 149 -1 b 130 15 138 -1 130 6 b 132 20 130 18 132 19 b 136 31 133 22 134 27 b 220 131 149 74 178 109 b 231 137 225 134 230 136 b 302 278 280 202 302 244 b 265 335 302 299 295 309 b 209 442 234 363 213 402 b 209 455 209 446 209 451 b 279 648 209 502 232 564 l 285 659 l 283 659 b 176 627 238 653 210 645 b 57 477 111 594 66 538 b 55 459 55 471 55 464 b 72 409 55 437 61 415 b 93 403 78 405 87 403 b 152 467 123 403 151 431 b 168 488 153 483 157 488 b 185 462 181 488 185 483 l 185 460 b 137 344 183 409 168 369 b 78 322 119 328 98 322 b 13 360 50 322 25 335 b -1 426 4 380 -1 402 b 89 610 -1 488 32 559 b 296 692 147 659 210 685 m 926 348 b 921 353 924 351 922 353 b 914 348 920 353 918 351 b 823 167 857 306 823 237 b 828 124 823 154 826 138 b 890 31 837 79 862 40 b 896 31 892 31 894 31 b 956 104 916 31 940 59 b 970 191 965 129 970 159 b 966 241 970 208 969 224 b 926 348 959 277 945 313 m 627 326 b 619 326 624 326 622 326 b 598 316 611 326 604 323 b 568 215 579 288 568 255 b 568 208 568 213 568 210 b 571 183 570 195 570 184 l 571 183 b 594 201 571 183 582 191 l 634 231 b 660 259 653 247 656 248 b 664 278 662 266 664 272 b 627 326 664 299 649 320 \"},\n\"v38\":{\"x_min\":-1.359375,\"x_max\":651.96875,\"ha\":665,\"o\":\"m 389 644 b 405 645 394 645 400 645 b 504 566 450 645 492 613 b 507 541 506 557 507 549 b 480 471 507 514 498 489 l 477 467 l 483 470 b 609 591 539 485 586 531 b 613 601 611 595 613 599 b 631 609 619 607 624 609 b 651 588 641 609 651 602 b 200 -946 651 584 204 -941 b 182 -957 197 -953 190 -957 b 163 -945 174 -957 166 -953 b 161 -939 161 -942 161 -942 b 217 -743 161 -931 170 -904 b 272 -555 247 -639 272 -555 b 272 -555 272 -555 272 -555 b 264 -560 272 -555 268 -557 b 140 -603 227 -589 182 -603 b 36 -567 102 -603 65 -592 b -1 -487 12 -548 -1 -517 b 17 -427 -1 -466 5 -445 b 103 -380 38 -395 70 -380 b 191 -433 137 -380 172 -398 b 205 -484 201 -448 205 -466 b 178 -553 205 -509 196 -535 l 175 -557 l 182 -555 b 307 -435 236 -539 284 -494 b 372 -213 308 -430 372 -215 b 372 -213 372 -213 372 -213 b 364 -219 372 -213 368 -216 b 240 -262 328 -247 283 -262 b 137 -226 202 -262 166 -249 b 99 -145 112 -206 99 -176 b 118 -84 99 -124 106 -104 b 204 -38 138 -54 171 -38 b 292 -91 238 -38 273 -56 b 306 -141 302 -106 306 -124 b 279 -212 306 -167 296 -194 l 276 -215 l 281 -213 b 408 -93 336 -198 385 -151 b 473 129 409 -88 473 127 b 473 129 473 129 473 129 b 465 122 473 129 469 126 b 341 80 428 94 383 80 b 236 115 303 80 266 91 b 200 195 213 136 200 165 b 217 256 200 217 206 238 b 304 303 239 287 272 303 b 393 249 338 303 374 285 b 406 199 402 234 406 217 b 379 129 406 173 397 148 l 377 126 l 382 127 b 509 248 436 142 485 190 b 574 470 510 254 574 469 b 574 470 574 470 574 470 b 566 464 574 470 570 467 b 442 421 529 435 484 421 b 337 458 404 421 367 433 b 300 537 313 478 300 508 b 389 644 300 585 334 635 \"},\n\"v39\":{\"x_min\":-171.5,\"x_max\":251.8125,\"ha\":257,\"o\":\"m -8 631 b -1 632 -6 632 -4 632 b 19 620 8 632 16 628 b 20 553 20 616 20 614 b 20 491 20 503 20 491 l 20 491 b 153 535 47 501 149 535 b 174 514 167 535 174 524 b 164 496 174 508 171 501 b 92 470 164 495 132 484 l 20 445 l 20 390 b 20 363 20 378 20 370 b 20 333 20 340 20 333 l 20 333 b 153 377 47 344 149 377 b 174 356 167 377 174 367 b 164 338 174 349 171 342 b 92 312 164 338 132 326 l 20 288 l 20 219 l 20 148 l 21 151 b 137 199 59 183 99 199 b 182 191 152 199 167 197 b 251 84 227 176 251 134 b 228 0 251 58 243 29 b 100 -142 206 -40 178 -72 l 23 -215 b -1 -229 9 -229 6 -229 b -20 -216 -9 -229 -17 -224 b -21 30 -21 -212 -21 -212 b -21 273 -21 163 -21 273 b -84 252 -21 273 -50 263 b -152 230 -133 234 -145 230 b -157 231 -155 230 -156 231 b -171 252 -166 234 -171 244 b -160 270 -171 259 -167 266 b -27 316 -159 270 -93 294 l -21 319 l -21 374 b -21 431 -21 406 -21 431 b -84 409 -21 431 -50 421 b -152 388 -133 392 -145 388 b -157 390 -155 388 -156 388 b -171 409 -166 392 -171 401 b -160 428 -171 417 -167 424 b -27 474 -159 428 -93 451 l -21 476 l -21 546 b -20 620 -21 614 -21 616 b -8 631 -17 624 -13 630 m 110 131 b 96 133 106 133 100 133 b 89 133 93 133 91 133 b 24 87 63 129 40 113 l 20 80 l 20 -37 l 20 -156 l 23 -152 b 144 81 96 -72 144 20 l 144 83 b 110 131 144 113 134 126 \"},\n\"v3b\":{\"x_min\":0,\"x_max\":484.5625,\"ha\":494,\"o\":\"m 228 245 b 239 247 234 247 239 247 b 243 247 240 247 242 247 b 303 238 257 247 287 242 b 484 -2 417 208 484 104 b 412 -177 484 -65 461 -127 b 243 -248 363 -226 303 -248 b 6 -63 138 -248 36 -180 b 0 -1 1 -41 0 -20 b 228 245 0 127 98 240 m 255 181 b 240 183 247 183 245 183 b 232 181 238 183 235 183 b 142 152 200 180 168 170 l 138 149 l 190 97 l 242 44 l 294 97 l 345 149 l 340 152 b 255 181 315 169 284 180 m 147 -54 l 197 -1 l 147 51 l 95 104 l 91 99 b 62 -1 72 70 62 34 b 66 -43 62 -15 63 -29 b 91 -101 72 -63 80 -84 l 95 -106 l 147 -54 m 393 99 b 389 104 390 102 389 104 b 337 51 389 104 366 80 l 285 -1 l 337 -54 l 389 -106 l 393 -101 b 421 -1 412 -72 421 -36 b 393 99 421 34 412 69 m 294 -98 b 242 -45 265 -69 242 -45 b 190 -98 242 -45 219 -69 l 138 -151 l 142 -154 b 242 -184 172 -174 206 -184 b 340 -154 276 -184 311 -174 l 345 -151 l 294 -98 \"},\n\"v3c\":{\"x_min\":0,\"x_max\":450.53125,\"ha\":460,\"o\":\"m 189 302 b 204 303 193 302 198 303 b 303 224 250 303 292 270 b 306 199 304 216 306 208 b 279 129 306 173 296 147 l 276 126 l 281 127 b 408 249 337 142 385 190 b 412 259 409 254 412 258 b 430 267 417 265 423 267 b 450 247 441 267 450 259 b 200 -605 450 242 204 -599 b 182 -616 197 -612 190 -616 b 163 -602 174 -616 166 -610 b 161 -598 161 -601 161 -601 b 217 -402 161 -589 170 -562 b 272 -213 247 -298 272 -213 b 272 -213 272 -213 272 -213 b 264 -219 272 -213 268 -216 b 140 -262 227 -247 182 -262 b 36 -226 102 -262 65 -249 b 0 -145 12 -206 0 -176 b 17 -84 0 -124 5 -104 b 103 -38 38 -54 70 -38 b 191 -91 137 -38 172 -56 b 205 -141 201 -106 205 -124 b 178 -212 205 -167 196 -194 l 175 -215 l 182 -213 b 307 -93 236 -198 284 -151 b 372 129 308 -88 372 127 b 372 129 372 129 372 129 b 364 122 372 129 368 126 b 240 80 328 94 283 80 b 137 115 202 80 166 91 b 99 194 111 136 99 165 b 189 302 99 244 133 292 \"},\n\"v3e\":{\"x_min\":0,\"x_max\":406.96875,\"ha\":415,\"o\":\"m 21 183 b 28 183 24 183 25 183 b 42 181 34 183 39 183 b 127 108 47 179 47 179 b 202 41 168 72 202 41 b 279 108 204 41 238 72 b 357 177 321 145 356 176 b 375 183 363 181 370 183 b 406 151 392 183 406 169 b 404 137 406 147 405 141 b 322 62 401 131 398 129 b 251 0 284 27 251 0 b 322 -63 251 -1 284 -29 b 404 -138 398 -130 401 -133 b 406 -152 405 -142 406 -148 b 375 -184 406 -170 392 -184 b 357 -179 370 -184 363 -183 b 279 -109 356 -177 321 -147 b 202 -43 238 -73 204 -43 b 127 -109 202 -43 168 -73 b 49 -179 85 -147 50 -177 b 31 -184 43 -183 36 -184 b 0 -152 13 -184 0 -170 b 2 -138 0 -148 0 -142 b 83 -63 5 -133 8 -130 b 155 0 122 -29 155 -1 b 83 62 155 0 122 27 b 8 129 43 97 10 127 b 0 151 2 136 0 144 b 21 183 0 165 8 177 \"},\n\"v3f\":{\"x_min\":-24.5,\"x_max\":317.140625,\"ha\":324,\"o\":\"m -24 -147 l -24 -5 l -20 -5 b -1 -19 -12 -5 -4 -11 b 58 -123 6 -43 31 -86 b 196 -278 93 -173 134 -219 b 317 -570 274 -356 317 -460 b 294 -713 317 -617 308 -666 l 289 -724 l 294 -735 b 317 -873 308 -780 317 -827 b 235 -1132 317 -963 288 -1054 b 209 -1165 228 -1140 224 -1146 b 189 -1177 204 -1172 196 -1177 b 171 -1164 182 -1177 175 -1172 b 168 -1154 170 -1161 168 -1159 b 181 -1132 168 -1149 172 -1142 b 269 -891 238 -1064 269 -975 b 269 -881 269 -886 269 -884 b 262 -814 269 -857 265 -827 b 258 -800 261 -811 259 -806 b 142 -628 240 -731 198 -667 b -8 -589 112 -606 47 -589 b -20 -589 -13 -589 -19 -589 l -24 -589 l -24 -449 l -24 -308 l -20 -308 b -1 -322 -12 -308 -4 -313 b 58 -424 6 -345 31 -388 b 194 -580 93 -476 136 -523 b 259 -660 221 -606 245 -635 b 261 -663 259 -662 261 -663 b 264 -656 262 -663 262 -660 b 269 -587 268 -632 269 -610 b 264 -521 269 -566 268 -544 b 262 -512 264 -517 262 -513 b 258 -498 261 -509 259 -503 b 142 -326 240 -428 198 -365 b -8 -287 112 -303 47 -288 b -20 -287 -13 -287 -19 -287 l -24 -287 l -24 -147 \"},\n\"v40\":{\"x_min\":-1.359375,\"x_max\":436.921875,\"ha\":446,\"o\":\"m 213 205 b 217 205 215 205 216 205 b 234 194 224 205 234 199 b 236 187 234 194 235 190 l 245 167 l 261 129 l 270 106 b 355 -61 294 54 329 -13 b 420 -163 381 -105 402 -138 b 436 -188 435 -184 436 -184 b 436 -191 436 -190 436 -190 b 421 -206 436 -201 431 -206 l 421 -206 l 416 -206 l 405 -201 b 217 -158 347 -172 283 -158 b 31 -201 153 -158 88 -172 l 20 -206 l 14 -206 l 14 -206 b 0 -191 5 -206 0 -201 b -1 -188 0 -190 -1 -190 b 14 -163 -1 -186 0 -184 b 95 -34 36 -136 72 -77 b 166 106 119 8 148 68 l 175 129 l 183 148 l 200 188 b 213 205 205 199 208 202 \"},\n\"v41\":{\"x_min\":-1.359375,\"x_max\":556.6875,\"ha\":568,\"o\":\"m 294 322 b 318 323 299 322 308 323 b 360 320 334 323 352 322 b 526 217 430 310 490 273 b 543 166 537 202 543 184 b 447 70 543 117 503 70 b 445 70 447 70 446 70 b 359 159 394 72 359 113 b 368 201 359 173 362 187 b 442 245 382 229 412 245 b 455 244 446 245 451 245 b 460 244 458 244 460 244 b 460 244 460 244 460 244 b 454 248 460 244 458 245 b 325 291 417 276 372 291 b 285 287 313 291 299 290 b 144 -2 183 269 144 190 b 281 -290 144 -208 179 -280 b 304 -291 289 -291 298 -291 b 524 -105 412 -291 506 -212 b 541 -84 526 -88 530 -84 b 556 -101 551 -84 556 -90 b 549 -138 556 -111 553 -122 b 334 -322 521 -237 435 -310 b 302 -324 323 -323 313 -324 b 13 -101 172 -324 54 -234 b -1 -1 4 -68 -1 -34 b 294 322 -1 161 121 303 \"},\n\"v42\":{\"x_min\":-348.4375,\"x_max\":24.5,\"ha\":25,\"o\":\"m -330 155 b -322 156 -329 156 -326 156 b -315 156 -319 156 -317 156 b -298 147 -311 155 -308 154 b -19 30 -224 98 -122 55 l 2 26 b 24 -1 17 22 24 13 b 2 -27 24 -15 17 -23 l -19 -31 b -298 -148 -122 -56 -224 -99 b -322 -158 -313 -158 -315 -158 b -348 -131 -338 -158 -348 -145 b -344 -117 -348 -127 -347 -122 b -328 -104 -341 -112 -338 -111 b -127 -8 -269 -65 -202 -33 b -106 0 -115 -4 -106 -1 b -127 6 -106 0 -115 2 b -328 102 -202 31 -269 63 b -344 116 -338 109 -341 111 b -348 130 -347 120 -348 124 b -330 155 -348 141 -341 152 \"},\n\"v43\":{\"x_min\":-442.359375,\"x_max\":441,\"ha\":450,\"o\":\"m -31 487 b -1 488 -21 488 -10 488 b 434 104 216 488 397 330 b 441 27 438 79 441 47 b 439 12 441 20 439 15 b 419 0 435 4 427 0 b 404 5 413 0 408 1 b 398 30 400 11 398 13 b 0 351 390 213 213 351 b -59 348 -20 351 -39 349 b -400 30 -251 324 -393 191 b -405 5 -400 13 -401 11 b -420 0 -409 1 -415 0 b -441 12 -428 0 -436 4 b -442 27 -441 15 -442 20 b -435 104 -442 47 -439 79 b -31 487 -401 316 -235 474 m -13 131 b -1 133 -9 133 -5 133 b 51 105 19 133 39 123 b 61 70 58 95 61 83 b 51 34 61 58 58 45 b -1 6 39 16 19 6 b -46 27 -17 6 -34 13 b -62 69 -57 38 -62 54 b -13 131 -62 98 -44 124 \"},\n\"v44\":{\"x_min\":-21.78125,\"x_max\":251.8125,\"ha\":257,\"o\":\"m -8 631 b -1 632 -6 632 -4 632 b 19 620 8 632 16 628 b 20 383 20 616 20 616 l 20 148 l 21 151 b 137 199 59 183 99 199 b 182 191 152 199 167 197 b 251 84 227 176 251 134 b 228 0 251 58 243 29 b 100 -142 206 -40 178 -72 l 23 -215 b 0 -229 9 -229 6 -229 b -20 -216 -9 -229 -17 -224 l -21 -212 l -21 201 l -21 616 l -20 620 b -8 631 -17 624 -13 630 m 110 131 b 96 133 106 133 100 133 b 89 133 93 133 91 133 b 24 87 63 129 40 113 l 20 80 l 20 -37 l 20 -156 l 23 -152 b 144 81 96 -72 144 20 l 144 83 b 110 131 144 113 134 126 \"},\n\"v45\":{\"x_min\":-402.890625,\"x_max\":401.53125,\"ha\":410,\"o\":\"m -10 273 b -4 274 -9 273 -6 274 b 16 262 4 274 12 269 b 17 158 17 259 17 259 l 17 56 l 62 112 b 117 174 110 172 110 172 b 122 174 118 174 119 174 b 132 173 125 174 129 173 b 295 11 134 172 171 134 l 307 -1 l 336 34 b 374 76 366 72 368 74 b 381 77 375 77 378 77 b 401 56 392 77 401 68 b 400 48 401 54 401 51 b 223 -172 397 41 230 -166 b 210 -176 220 -174 215 -176 b 201 -174 206 -176 204 -176 b 112 -87 198 -173 178 -152 b 27 0 65 -38 27 0 b 21 -6 27 0 24 -2 l 17 -12 l 17 -147 b 17 -210 17 -173 17 -194 b 10 -292 17 -297 16 -287 b -2 -299 6 -297 2 -299 b -21 -287 -10 -299 -19 -295 b -24 -174 -23 -284 -23 -284 l -24 -63 l -66 -117 b -121 -176 -110 -170 -114 -176 b -125 -176 -122 -176 -123 -176 b -296 -12 -134 -174 -125 -184 l -308 0 l -337 -34 b -375 -77 -367 -73 -370 -76 b -382 -79 -377 -79 -379 -79 b -402 -58 -393 -79 -402 -69 b -401 -49 -402 -55 -402 -52 b -224 170 -398 -43 -231 165 b -212 174 -221 173 -216 174 b -202 173 -208 174 -205 174 b -39 11 -200 172 -151 122 l -28 -1 l -25 1 l -24 4 l -24 130 b -23 260 -24 256 -24 258 b -10 273 -20 266 -16 270 \"},\n\"v46\":{\"x_min\":0,\"x_max\":627.46875,\"ha\":640,\"o\":\"m 306 190 b 314 191 308 191 311 191 b 326 184 318 191 322 190 l 336 173 b 510 52 377 127 442 80 b 515 49 513 51 515 49 b 611 16 537 40 579 24 b 627 0 624 13 627 9 b 607 -18 627 -11 624 -13 b 330 -181 490 -49 389 -109 b 314 -192 323 -190 319 -192 b 306 -191 311 -192 308 -192 b 294 -177 302 -188 302 -188 b 257 -140 287 -170 265 -148 b 19 -18 193 -84 114 -44 b 0 0 2 -13 0 -11 b 16 16 0 9 2 13 b 110 49 47 24 89 40 b 117 52 111 49 114 51 b 145 65 126 56 130 58 b 281 163 200 93 245 124 b 300 186 288 170 291 174 b 306 190 300 187 303 188 m 317 137 b 313 142 315 141 314 142 b 308 137 313 142 311 141 b 161 4 276 84 220 33 b 155 0 159 1 155 0 b 163 -4 155 0 159 -2 b 308 -138 220 -34 276 -84 b 313 -142 311 -141 313 -142 b 317 -138 314 -142 315 -141 b 464 -4 351 -84 406 -34 b 470 0 468 -2 470 0 b 464 4 470 0 468 1 b 317 137 406 33 351 84 \"},\n\"v47\":{\"x_min\":-24.5,\"x_max\":315.78125,\"ha\":322,\"o\":\"m -24 -145 l -24 -5 l -20 -5 b 1 -26 -10 -5 -6 -9 b 175 -241 31 -86 96 -166 b 314 -548 259 -323 304 -420 b 315 -589 315 -555 315 -571 b 314 -630 315 -606 315 -623 b 298 -730 311 -664 306 -699 l 295 -742 l 296 -748 b 314 -850 304 -778 311 -813 b 315 -892 315 -857 315 -874 b 314 -932 315 -909 315 -925 b 298 -1032 311 -967 306 -1002 l 295 -1045 l 296 -1050 b 314 -1153 304 -1081 311 -1115 b 315 -1193 315 -1160 315 -1177 b 314 -1235 315 -1211 315 -1228 b 217 -1526 306 -1338 270 -1444 b 201 -1533 213 -1532 208 -1533 b 182 -1522 193 -1533 185 -1529 b 179 -1514 181 -1518 179 -1517 b 189 -1489 179 -1508 182 -1501 b 266 -1217 240 -1403 266 -1308 b 262 -1156 266 -1196 265 -1177 b 110 -907 247 -1043 190 -950 b 0 -889 87 -895 50 -889 l -1 -889 l -24 -889 l -24 -749 l -24 -610 l -20 -610 b 1 -631 -10 -610 -6 -614 b 175 -846 31 -691 96 -771 b 259 -956 213 -884 236 -914 b 265 -966 262 -961 264 -966 b 265 -966 265 -966 265 -966 b 265 -953 265 -964 265 -959 b 266 -920 266 -943 266 -932 b 262 -853 266 -898 265 -873 b 110 -605 247 -741 190 -648 b 0 -587 87 -592 50 -587 l -1 -587 l -24 -587 l -24 -448 l -24 -308 l -20 -308 b 1 -328 -10 -308 -6 -312 b 175 -544 31 -388 96 -469 b 259 -655 213 -581 236 -612 b 265 -663 262 -659 264 -663 b 265 -663 265 -663 265 -663 b 265 -650 265 -663 265 -657 b 266 -617 266 -641 266 -630 b 262 -551 266 -595 265 -570 b 110 -303 247 -438 190 -345 b 0 -284 87 -290 50 -284 l -1 -284 l -24 -284 l -24 -145 \"},\n\"v49\":{\"x_min\":0,\"x_max\":630.203125,\"ha\":643,\"o\":\"m 308 204 b 314 205 310 205 313 205 b 326 201 319 205 323 204 b 355 154 328 199 338 180 b 401 83 362 142 392 95 l 409 72 b 431 41 412 66 424 49 b 619 -174 498 -51 570 -134 b 630 -192 626 -180 630 -186 b 626 -202 630 -195 628 -199 b 616 -206 623 -205 620 -206 b 552 -188 608 -206 592 -202 b 310 -155 488 -169 392 -155 b 268 -156 295 -155 281 -155 b 77 -188 197 -161 126 -173 b 13 -206 35 -202 20 -206 b 9 -206 12 -206 10 -206 b 0 -191 2 -202 0 -197 b 8 -176 0 -186 2 -180 b 204 49 58 -136 138 -43 l 220 72 l 227 83 b 295 188 245 108 281 166 b 308 204 299 197 304 202 m 315 147 b 314 147 315 147 314 147 b 314 147 314 147 314 147 b 306 129 314 145 310 138 l 296 105 b 281 72 292 97 284 77 l 274 56 b 181 -123 247 -4 212 -72 l 174 -134 l 176 -133 b 314 -123 215 -127 272 -123 b 451 -133 356 -123 413 -127 l 454 -134 l 449 -123 b 353 56 417 -72 381 -4 l 347 72 b 332 105 344 77 336 97 l 322 129 b 315 147 318 138 315 145 \"},\n\"v4a\":{\"x_min\":70.78125,\"x_max\":378.390625,\"ha\":315,\"o\":\"m 246 373 b 254 373 249 373 251 373 b 372 324 303 373 360 351 b 378 302 377 317 378 309 b 338 251 378 278 362 255 b 328 249 334 249 332 249 b 283 294 303 249 283 270 b 288 315 283 301 284 308 b 289 319 289 317 289 319 b 289 319 289 319 289 319 b 283 320 289 320 287 320 b 270 322 279 322 274 322 b 206 288 242 322 215 308 b 206 283 206 287 206 285 b 257 223 206 267 230 238 b 284 206 272 213 277 210 b 351 90 328 173 351 130 b 340 47 351 74 348 59 b 205 -30 314 -2 264 -30 b 182 -29 198 -30 190 -30 b 84 15 147 -24 103 -5 b 70 48 74 24 70 36 b 108 99 70 70 85 94 b 121 102 112 101 117 102 b 167 56 147 102 167 80 b 159 31 167 48 164 40 l 156 26 l 157 26 b 190 20 167 22 178 20 b 220 26 201 20 212 22 b 258 65 243 34 258 51 b 257 70 258 66 258 69 b 204 126 249 94 234 109 b 114 258 148 158 114 209 b 125 302 114 273 118 288 b 246 373 147 342 193 370 \"},\n\"v4b\":{\"x_min\":0,\"x_max\":503.609375,\"ha\":514,\"o\":\"m 274 430 b 277 430 276 430 277 430 b 310 394 296 430 310 415 b 308 383 310 391 308 387 b 306 367 307 381 307 374 b 236 120 298 305 272 210 b 40 -273 189 -5 125 -134 b 20 -287 35 -283 27 -287 b 5 -281 14 -287 9 -285 b 0 -267 1 -277 0 -273 b 9 -242 0 -262 2 -255 b 246 395 137 -12 232 242 b 274 430 249 416 257 427 m 468 430 b 472 430 469 430 470 430 b 503 394 490 430 503 415 b 502 383 503 391 503 387 b 499 367 502 381 500 374 b 431 120 491 305 465 210 b 234 -273 382 -5 318 -134 b 213 -287 228 -283 220 -287 b 198 -281 208 -287 202 -285 b 193 -267 194 -277 193 -273 b 202 -242 193 -262 196 -255 b 439 395 330 -12 426 242 b 468 430 442 416 451 427 \"},\n\"v4d\":{\"x_min\":-311.6875,\"x_max\":310.328125,\"ha\":317,\"o\":\"m -9 388 b -2 390 -8 390 -5 390 b 5 388 1 390 4 390 b 19 378 10 387 16 383 b 23 333 23 371 23 371 b 24 298 23 299 24 298 b 81 276 34 298 65 285 b 213 91 145 240 190 177 b 224 24 217 76 224 36 b 257 24 224 24 235 24 b 299 19 292 24 292 24 b 310 -1 306 15 310 6 b 299 -23 310 -11 306 -19 b 257 -27 292 -27 292 -27 b 224 -29 235 -27 224 -29 b 213 -95 224 -40 217 -80 b 81 -280 190 -181 145 -244 b 24 -301 65 -290 34 -301 b 23 -335 24 -301 23 -303 l 23 -340 b 17 -381 23 -374 23 -374 b -1 -391 13 -388 5 -391 b -21 -381 -9 -391 -17 -388 b -27 -340 -27 -374 -27 -374 l -27 -335 b -28 -301 -27 -303 -27 -301 b -85 -280 -38 -301 -69 -290 b -217 -95 -149 -244 -194 -181 b -228 -29 -221 -80 -228 -40 b -259 -27 -228 -29 -238 -27 b -300 -23 -294 -27 -294 -27 b -311 -2 -307 -19 -311 -11 b -294 23 -311 8 -304 19 b -259 24 -291 23 -284 24 b -228 24 -239 24 -228 24 b -217 91 -228 36 -221 76 b -85 276 -194 177 -149 240 b -28 298 -69 285 -38 298 b -27 333 -27 298 -27 299 b -27 371 -27 362 -27 369 b -9 388 -24 378 -17 385 m -27 136 b -28 247 -27 197 -28 247 b -61 216 -31 247 -53 226 b -123 33 -95 172 -121 98 l -125 24 l -76 24 l -27 24 l -27 136 m 29 242 b 24 247 27 245 24 247 b 23 136 24 247 23 197 l 23 24 l 72 24 l 121 24 l 119 33 b 29 242 115 116 77 206 m -27 -140 l -27 -27 l -76 -27 l -125 -27 l -123 -36 b -61 -220 -121 -102 -95 -176 b -28 -251 -53 -230 -31 -251 b -27 -140 -28 -251 -27 -201 m 119 -36 l 121 -27 l 72 -27 l 23 -27 l 23 -140 b 24 -251 23 -201 24 -251 b 57 -220 27 -251 49 -230 b 119 -36 91 -176 117 -102 \"},\n\"v4e\":{\"x_min\":0,\"x_max\":239.5625,\"ha\":244,\"o\":\"m 10 460 b 20 462 13 462 14 462 b 39 449 28 462 35 458 l 40 446 l 40 326 b 40 205 40 259 40 205 b 127 227 40 205 80 215 b 220 249 196 244 213 249 b 227 247 224 249 225 248 b 238 237 231 245 235 241 l 239 233 l 239 -106 l 239 -448 l 238 -451 b 219 -463 234 -459 225 -463 b 198 -451 210 -463 202 -459 l 197 -448 l 197 -324 b 197 -201 197 -248 197 -201 b 110 -223 196 -201 157 -210 b 17 -245 42 -240 24 -245 b 10 -242 13 -245 13 -244 b 0 -233 6 -241 2 -237 l 0 -230 l 0 108 l 0 446 l 0 449 b 10 460 2 453 6 458 m 197 22 b 197 70 197 41 197 58 b 196 116 197 113 197 116 l 196 116 b 118 97 196 116 160 106 l 40 77 l 40 -18 b 40 -112 40 -69 40 -112 l 119 -93 l 197 -73 l 197 22 \"},\n\"v51\":{\"x_min\":-1.359375,\"x_max\":455.96875,\"ha\":465,\"o\":\"m 352 541 b 357 542 353 542 355 542 b 377 530 364 542 372 537 l 378 526 l 378 394 l 379 262 l 404 266 b 436 270 420 269 430 270 b 450 265 443 270 446 269 b 455 220 455 259 455 260 l 455 208 l 455 161 l 454 156 b 411 140 449 147 447 147 b 378 133 393 137 379 134 b 378 68 378 133 378 106 b 378 22 378 54 378 38 l 379 -87 l 404 -83 b 436 -79 420 -80 430 -79 b 450 -84 443 -79 446 -80 b 455 -129 455 -90 455 -88 l 455 -141 l 455 -188 l 454 -192 b 413 -209 449 -202 447 -202 b 382 -215 398 -212 383 -215 l 378 -215 l 378 -345 l 378 -380 b 375 -485 378 -484 378 -480 b 357 -494 371 -491 364 -494 b 340 -485 351 -494 344 -491 b 336 -383 337 -480 336 -484 l 336 -349 l 336 -223 l 334 -223 b 291 -231 334 -223 314 -227 l 247 -240 l 247 -371 l 246 -503 l 245 -506 b 225 -519 242 -514 234 -519 b 206 -506 219 -519 210 -514 l 205 -503 l 205 -376 l 205 -248 l 160 -256 l 115 -265 l 115 -396 l 115 -527 l 114 -531 b 95 -544 110 -539 102 -544 b 76 -531 87 -544 78 -539 l 73 -527 l 73 -399 b 73 -273 73 -330 73 -273 b 49 -277 73 -273 61 -274 b 17 -281 32 -280 24 -281 b 4 -276 10 -281 8 -280 b -1 -234 0 -269 -1 -272 b 0 -219 -1 -229 0 -224 l 0 -170 l 1 -167 b 10 -158 2 -163 6 -159 b 49 -149 13 -156 16 -155 l 73 -145 l 73 -34 b 73 76 73 26 73 76 b 49 72 73 76 61 74 b 17 68 32 69 24 68 b 4 73 10 68 8 69 b -1 115 0 80 -1 77 b 0 130 -1 120 0 124 l 0 179 l 1 181 b 10 191 2 186 6 190 b 49 199 13 192 16 194 l 73 204 l 73 338 b 73 374 73 352 73 365 b 77 483 73 484 73 477 b 95 492 81 489 88 492 b 111 483 100 492 107 489 b 115 378 115 477 115 483 l 115 342 b 117 212 115 223 115 212 b 204 229 117 212 200 227 l 205 229 l 205 365 l 205 502 l 206 505 b 225 517 210 513 219 517 b 245 505 234 517 242 513 l 246 502 l 247 369 l 247 237 l 249 237 b 336 254 253 238 336 254 b 337 390 336 254 337 302 l 337 526 l 338 530 b 352 541 341 535 347 539 m 336 15 b 336 126 336 102 336 126 l 336 126 b 291 117 336 126 315 122 l 247 109 l 247 -1 l 247 -112 l 249 -112 b 336 -95 253 -111 336 -95 b 336 15 336 -95 336 -56 m 205 -120 b 205 -55 205 -120 205 -93 b 205 -9 205 -41 205 -24 l 205 101 l 160 93 l 115 84 l 115 -26 b 115 -83 115 -49 115 -69 b 117 -137 115 -133 115 -137 b 205 -120 118 -137 204 -120 \"},\n\"v52\":{\"x_min\":-10.890625,\"x_max\":298.078125,\"ha\":294,\"o\":\"m 138 473 b 142 474 140 473 141 474 b 164 459 148 474 153 470 b 191 402 183 442 191 423 b 181 353 191 388 187 371 b 178 349 179 352 178 349 b 179 348 178 348 179 348 b 185 349 181 348 182 348 b 255 376 210 355 234 363 b 272 381 264 381 266 381 b 298 355 287 381 298 370 b 288 330 298 348 298 345 b 171 34 238 254 194 141 b 166 13 168 16 168 16 b 144 1 161 5 152 1 b 121 15 134 1 125 5 b 115 33 119 18 117 24 b 0 330 91 145 49 252 b -10 355 -9 345 -10 348 b 13 381 -10 371 0 381 b 31 376 19 381 25 380 b 132 345 61 358 103 345 l 136 345 l 137 355 b 145 378 138 359 142 370 b 152 415 149 394 152 405 b 137 452 152 427 148 438 b 133 464 134 458 133 460 b 138 473 133 467 134 470 \"},\n\"v53\":{\"x_min\":0,\"x_max\":902.421875,\"ha\":921,\"o\":\"m 17 240 b 24 241 19 241 21 241 b 32 240 28 241 31 241 b 46 229 38 238 43 234 b 50 88 50 223 50 237 b 50 -1 50 63 50 34 b 50 -90 50 -36 50 -65 b 46 -231 50 -238 50 -224 b 25 -242 42 -238 34 -242 b 0 -224 14 -242 4 -235 b 0 2 0 -222 0 -108 b 0 223 0 112 0 220 b 17 240 2 230 9 237 m 110 240 b 118 241 111 241 114 241 b 126 240 121 241 123 241 b 142 223 133 237 140 230 b 144 123 144 220 144 205 b 144 29 144 45 144 29 b 144 29 144 29 144 29 b 393 183 166 106 264 167 b 450 186 412 184 431 186 b 756 29 600 186 732 120 b 756 29 756 29 756 29 b 758 123 758 29 758 45 b 760 227 758 226 758 223 b 784 241 766 237 774 241 b 804 229 792 241 800 237 b 809 88 808 223 809 237 l 809 -1 l 809 -90 b 804 -231 809 -238 808 -224 b 784 -242 800 -238 792 -242 b 762 -231 775 -242 766 -238 b 758 -124 756 -224 758 -231 b 756 -30 758 -47 758 -30 b 756 -30 756 -30 756 -30 b 509 -184 736 -108 637 -169 b 450 -187 488 -187 469 -187 b 144 -30 300 -187 168 -122 b 144 -30 144 -30 144 -30 b 144 -124 144 -30 144 -47 b 140 -231 144 -231 144 -224 b 118 -242 134 -238 126 -242 b 92 -224 107 -242 96 -235 b 92 2 92 -222 92 -108 b 92 223 92 112 92 220 b 110 240 95 230 102 237 m 432 161 b 413 162 426 162 420 162 b 313 41 351 162 313 109 b 347 -73 313 5 323 -34 b 487 -163 385 -133 439 -163 b 578 -97 526 -163 562 -142 b 588 -43 585 -80 588 -62 b 432 161 588 47 518 147 m 868 240 b 876 241 869 241 872 241 b 884 240 879 241 882 241 b 898 229 890 238 894 234 b 902 88 902 223 902 237 l 902 -1 l 902 -90 b 898 -231 902 -238 902 -224 b 876 -242 892 -238 884 -242 b 852 -224 865 -242 854 -235 b 850 2 850 -222 850 -108 b 852 223 850 112 850 220 b 868 240 853 230 860 237 \"},\n\"v54\":{\"x_min\":-24.5,\"x_max\":317.140625,\"ha\":324,\"o\":\"m -24 -161 l -24 -5 l -20 -5 b 0 -24 -9 -5 -2 -12 b 171 -315 21 -124 84 -233 b 317 -660 268 -406 317 -531 b 187 -1014 317 -782 274 -909 b 161 -1034 172 -1034 171 -1034 b 141 -1013 149 -1034 141 -1025 b 152 -991 141 -1004 142 -1002 b 266 -682 228 -899 266 -788 b 174 -430 266 -588 236 -498 b -23 -317 136 -388 66 -348 b -24 -161 -23 -316 -24 -285 \"},\n\"v55\":{\"x_min\":0,\"x_max\":551.25,\"ha\":563,\"o\":\"m 289 644 b 304 645 294 645 299 645 b 404 566 349 645 392 613 b 406 541 405 557 406 549 b 379 471 406 514 397 489 l 377 467 l 382 470 b 509 591 438 485 485 531 b 513 601 510 595 513 599 b 530 609 518 607 524 609 b 551 588 540 609 551 602 b 200 -605 551 584 204 -599 b 182 -616 197 -612 190 -616 b 163 -602 174 -616 166 -610 b 161 -598 161 -601 161 -601 b 217 -402 161 -589 170 -562 b 272 -213 247 -298 272 -213 b 272 -213 272 -213 272 -213 b 264 -219 272 -213 268 -216 b 140 -262 227 -247 182 -262 b 36 -226 102 -262 65 -249 b 0 -145 12 -206 0 -176 b 17 -84 0 -124 5 -104 b 103 -38 38 -54 70 -38 b 191 -91 137 -38 172 -56 b 205 -141 201 -106 205 -124 b 178 -212 205 -167 196 -194 l 175 -215 l 182 -213 b 307 -93 236 -198 284 -151 b 372 129 308 -88 372 127 b 372 129 372 129 372 129 b 364 122 372 129 368 126 b 240 80 328 94 283 80 b 137 115 202 80 166 91 b 99 195 112 136 99 165 b 118 256 99 217 106 238 b 204 303 138 287 171 303 b 292 249 238 303 273 285 b 306 199 302 234 306 217 b 279 129 306 173 296 148 l 276 126 l 281 127 b 408 248 336 142 385 190 b 473 470 409 254 473 469 b 473 470 473 470 473 470 b 465 464 473 470 469 467 b 341 421 428 435 383 421 b 236 458 303 421 266 433 b 200 537 212 478 200 508 b 289 644 200 585 234 635 \"},\n\"v58\":{\"x_min\":-21.78125,\"x_max\":367.5,\"ha\":375,\"o\":\"m 259 1553 b 265 1553 261 1553 264 1553 b 288 1540 272 1553 277 1550 b 367 1351 340 1493 367 1424 b 336 1221 367 1308 357 1263 l 332 1211 l 333 1208 b 367 1077 356 1170 367 1124 b 336 945 367 1032 357 986 l 332 935 l 333 932 b 367 800 356 893 367 848 b 336 669 367 756 357 710 l 332 659 l 333 656 b 367 523 356 617 367 571 b 345 412 367 485 360 446 b 231 273 322 356 284 310 b -1 19 121 195 27 93 b -17 4 -4 11 -10 5 l -21 4 l -21 134 l -21 265 l -17 265 b 133 291 20 265 96 278 b 318 537 245 328 318 433 b 307 603 318 559 315 582 b 303 614 304 612 304 614 b 298 609 302 614 300 613 b 231 549 281 589 258 567 b -1 295 121 471 27 369 b -17 280 -4 287 -10 281 l -21 280 l -21 410 l -21 541 l -17 541 b 133 567 20 541 96 555 b 318 813 245 605 318 709 b 307 880 318 835 315 859 b 303 891 304 888 304 891 b 298 885 302 891 300 888 b 231 825 281 866 258 843 b -1 571 121 748 27 645 b -17 556 -4 563 -10 557 l -21 556 l -21 687 l -21 817 l -17 817 b 133 843 20 817 96 830 b 318 1089 245 881 318 985 b 307 1156 318 1111 315 1134 b 303 1167 304 1164 304 1167 b 298 1161 302 1167 300 1164 b 231 1102 281 1140 258 1120 b -1 848 121 1024 27 921 b -17 832 -4 839 -10 834 l -21 832 l -21 963 l -21 1093 l -17 1093 b 114 1113 12 1093 78 1103 b 313 1314 215 1142 289 1218 b 318 1364 317 1331 318 1347 b 255 1511 318 1422 295 1478 b 243 1532 247 1519 243 1525 b 259 1553 243 1540 250 1550 \"},\n\"v59\":{\"x_min\":0,\"x_max\":464.140625,\"ha\":474,\"o\":\"m 0 0 l 0 347 l 76 347 l 153 347 l 153 0 l 153 -348 l 76 -348 l 0 -348 l 0 0 m 308 -1 l 308 347 l 386 347 l 464 347 l 464 -1 l 464 -348 l 386 -348 l 308 -348 l 308 -1 \"},\n\"v5a\":{\"x_min\":-171.5,\"x_max\":170.140625,\"ha\":174,\"o\":\"m -6 566 b 0 567 -5 567 -2 567 b 14 556 6 567 12 563 b 92 285 14 555 50 433 b 170 13 166 33 170 19 b 168 13 170 13 170 13 b 161 1 168 8 167 4 l 159 0 l 122 0 l 84 0 l 81 1 b 21 195 76 5 78 -5 b -32 381 -8 297 -32 381 b -87 197 -32 381 -57 298 b -141 8 -115 94 -140 9 b -155 0 -142 2 -149 0 b -171 15 -163 0 -171 5 b -14 556 -171 18 -24 528 b -6 566 -14 560 -10 564 \"},\n\"v5b\":{\"x_min\":-441,\"x_max\":439.640625,\"ha\":449,\"o\":\"m -428 -2 b -421 0 -427 -1 -424 0 b -406 -6 -416 0 -409 -2 b -400 -31 -401 -12 -400 -15 b -1 -352 -392 -215 -215 -352 b 58 -349 19 -352 38 -351 b 398 -31 250 -326 392 -192 b 404 -6 398 -15 400 -12 b 419 -1 408 -2 413 -1 b 439 -13 427 -1 435 -5 b 439 -29 439 -16 439 -22 b 434 -105 439 -48 438 -80 b 0 -489 397 -333 213 -489 b -68 -484 -23 -489 -44 -488 b -441 -36 -280 -452 -436 -263 b -441 -30 -441 -34 -441 -31 b -428 -2 -441 -11 -439 -5 m -13 -9 b -1 -8 -9 -8 -5 -8 b 50 -36 19 -8 39 -19 b 61 -72 57 -47 61 -59 b 50 -106 61 -84 57 -97 b -1 -134 39 -124 19 -134 b -46 -115 -17 -134 -34 -129 b -62 -72 -57 -102 -62 -87 b -13 -9 -62 -44 -44 -16 \"},\n\"v5c\":{\"x_min\":0,\"x_max\":447.8125,\"ha\":457,\"o\":\"m 0 -87 l 0 0 l 223 0 l 447 0 l 447 -87 l 447 -174 l 223 -174 l 0 -174 l 0 -87 \"},\n\"v5d\":{\"x_min\":-1.359375,\"x_max\":592.078125,\"ha\":604,\"o\":\"m 280 692 b 295 694 283 692 289 694 b 310 692 300 694 307 692 b 357 630 340 684 357 657 b 336 580 357 612 351 594 b 311 538 321 566 311 549 b 352 492 311 512 330 492 b 366 495 357 492 362 492 b 397 553 390 503 397 517 b 415 603 397 576 402 591 b 460 623 427 617 443 623 b 509 599 479 623 498 614 b 522 559 518 587 522 573 b 494 506 522 538 513 519 b 451 495 481 498 473 496 b 415 488 432 495 426 494 b 394 449 404 483 394 464 b 394 448 394 448 394 448 l 394 440 l 397 433 b 428 409 404 420 413 413 b 438 408 431 408 435 408 b 479 431 450 408 462 415 b 528 455 495 448 510 455 b 548 452 534 455 541 453 b 592 391 577 442 592 416 b 549 331 592 365 577 340 b 528 327 541 328 534 327 b 479 351 510 327 495 335 b 438 374 464 367 450 374 b 417 369 431 374 424 373 b 394 333 402 360 394 348 b 400 312 394 326 396 319 b 451 287 408 294 420 288 b 513 258 484 285 499 278 b 522 223 519 247 522 234 b 461 159 522 190 496 159 b 449 161 457 159 453 159 b 397 229 416 167 397 191 b 366 288 397 265 390 278 b 352 290 362 290 357 290 b 315 262 336 290 321 280 b 311 245 313 256 311 251 b 334 204 311 233 318 220 b 355 170 348 190 351 184 b 357 152 356 166 357 159 b 355 136 357 147 356 140 b 295 88 345 104 321 88 b 232 152 264 88 232 112 b 255 204 232 174 238 186 b 279 244 273 222 279 231 l 279 245 b 238 290 279 270 259 290 b 224 288 234 290 228 290 b 193 229 200 278 193 265 b 141 161 193 191 174 167 b 129 159 137 159 133 159 b 68 223 93 159 68 190 b 77 258 68 234 70 247 b 138 287 91 278 106 285 b 185 302 166 287 175 291 b 196 333 193 312 196 323 b 174 369 196 347 187 360 b 152 374 166 373 159 374 b 111 351 140 374 126 367 b 62 327 95 335 80 327 b 51 328 58 327 54 327 b -1 391 16 334 -1 363 b 53 455 -1 420 17 449 b 62 455 57 455 59 455 b 111 431 80 455 95 448 b 152 408 127 415 140 408 b 161 409 155 408 159 408 b 193 433 176 413 186 420 l 196 440 l 196 448 b 196 451 196 449 196 449 b 190 471 196 459 194 463 b 137 495 182 489 167 495 l 134 495 l 134 495 b 68 560 95 495 68 521 b 129 623 68 596 95 623 b 144 621 134 623 138 623 b 193 553 175 614 193 589 b 224 495 193 517 200 503 b 238 492 228 492 234 492 b 279 538 259 492 279 512 b 254 580 279 549 269 566 b 232 630 239 594 232 612 b 280 692 232 657 250 684 m 307 456 b 295 458 303 458 299 458 b 230 391 258 458 230 426 b 236 360 230 381 231 371 b 295 324 249 337 272 324 b 353 360 318 324 341 337 b 360 391 357 370 360 381 b 307 456 360 421 340 451 \"},\n\"v60\":{\"x_min\":-590.71875,\"x_max\":589.359375,\"ha\":601,\"o\":\"m -367 173 b -362 174 -366 174 -364 174 b -351 173 -357 174 -353 173 b -262 86 -348 172 -328 151 b -176 0 -216 37 -176 0 b -107 84 -176 0 -145 37 b -31 174 -36 173 -38 172 b -25 174 -29 174 -28 174 b -16 173 -23 174 -19 173 b 72 86 -13 172 6 151 b 157 0 119 37 157 0 b 227 84 159 0 189 37 b 303 174 298 173 296 172 b 308 174 304 174 307 174 b 318 173 313 174 317 173 b 481 11 322 172 357 134 l 494 -1 l 522 34 b 560 76 553 72 555 74 b 567 77 563 77 564 77 b 589 56 579 77 589 68 b 586 48 589 54 588 51 b 411 -172 583 41 416 -166 b 397 -176 406 -174 401 -176 b 387 -174 393 -176 390 -176 b 299 -87 386 -173 366 -152 b 213 0 253 -38 213 0 b 144 -86 213 0 182 -38 b 68 -174 73 -174 74 -173 b 62 -176 66 -176 65 -176 b 53 -174 59 -176 55 -174 b -35 -87 50 -173 29 -152 b -121 0 -83 -38 -121 0 b -190 -86 -122 0 -152 -38 b -266 -174 -261 -174 -259 -173 b -272 -176 -268 -176 -270 -176 b -281 -174 -276 -176 -280 -174 b -371 -86 -284 -173 -304 -152 b -457 0 -417 -38 -457 0 l -457 0 b -477 -26 -457 0 -470 -16 b -548 -227 -524 -88 -548 -161 b -536 -303 -548 -254 -544 -280 b -533 -317 -534 -309 -533 -313 b -553 -338 -533 -330 -541 -338 b -577 -315 -566 -338 -571 -333 b -590 -227 -586 -287 -590 -258 b -518 -9 -590 -154 -564 -77 b -465 56 -509 2 -504 8 l -402 134 b -367 173 -375 169 -372 172 \"},\n\"v62\":{\"x_min\":46.28125,\"x_max\":669.671875,\"ha\":563,\"o\":\"m 183 376 b 189 376 185 376 187 376 b 212 374 197 376 208 376 b 265 337 234 369 253 355 b 274 317 268 331 273 320 b 274 316 274 317 274 316 b 280 323 276 316 276 319 b 311 358 288 337 299 348 b 319 366 315 360 318 365 b 356 376 326 373 340 376 b 382 371 364 376 374 374 b 428 337 400 366 417 352 b 436 317 431 331 436 320 b 438 316 436 317 436 316 b 442 323 438 316 439 319 b 475 358 451 337 462 348 b 483 366 477 360 481 365 b 518 376 488 373 503 376 b 544 373 528 376 536 376 b 604 285 579 360 604 326 b 597 249 604 273 601 258 b 543 63 596 247 544 70 b 541 54 543 61 541 55 b 540 44 540 51 540 47 b 552 23 540 33 545 23 b 552 23 552 23 552 23 b 647 126 586 29 627 72 b 658 138 651 136 653 138 b 660 138 660 138 660 138 b 669 129 666 137 669 136 b 654 88 669 122 665 109 b 562 -12 631 43 602 9 l 549 -19 b 521 -27 540 -24 530 -27 b 447 30 490 -27 458 -4 b 443 58 445 38 443 48 b 450 93 443 72 446 84 b 504 278 453 97 504 272 b 507 288 506 283 506 287 b 509 298 507 292 509 295 b 491 326 509 310 502 320 b 487 327 490 327 488 327 b 479 324 484 327 483 326 b 441 270 462 316 443 288 b 435 249 441 265 436 254 b 398 127 434 248 419 195 b 362 4 379 61 362 5 b 328 -1 359 -1 362 -1 b 314 -1 323 -1 319 -1 b 302 -1 310 -1 306 -1 b 266 4 266 -1 269 -1 b 265 6 265 5 265 5 b 303 144 265 13 272 34 b 343 278 325 216 343 276 b 344 288 343 281 344 285 b 345 298 345 291 345 295 b 330 326 345 310 340 320 b 323 327 328 327 325 327 b 317 324 322 327 321 326 b 279 270 300 316 281 288 b 273 249 279 265 274 254 b 236 127 272 248 255 195 b 200 4 216 61 200 5 b 164 -1 197 -1 198 -1 b 151 -1 161 -1 156 -1 b 140 -1 147 -1 142 -1 b 103 4 104 -1 106 -1 b 103 6 103 5 103 5 b 141 144 103 13 108 34 b 181 278 161 216 179 276 b 182 288 181 281 181 285 b 183 298 182 291 183 295 b 168 324 183 310 178 320 b 160 327 166 326 163 327 b 141 320 156 327 151 324 b 69 230 112 305 85 272 b 57 215 65 217 62 215 b 55 215 57 215 55 215 b 46 224 49 215 46 217 b 59 260 46 231 50 242 b 151 363 81 306 112 341 b 161 369 155 365 160 367 b 183 376 166 371 174 374 \"},\n\"v68\":{\"x_min\":-597.53125,\"x_max\":596.171875,\"ha\":608,\"o\":\"m -533 324 b -525 327 -530 326 -528 327 b -504 305 -514 327 -504 317 b -504 305 -504 305 -504 305 b -513 284 -504 299 -504 299 b -556 112 -541 226 -556 167 b -545 33 -556 84 -552 58 b -524 -20 -541 15 -532 -9 l -522 -23 l -491 15 l -413 111 b -355 174 -367 169 -363 174 b -351 174 -353 174 -352 174 b -254 86 -343 174 -348 179 b -168 -1 -208 37 -168 -1 b -100 84 -168 -1 -137 37 b -23 173 -28 173 -29 172 b -19 174 -21 174 -20 174 b -8 173 -14 174 -10 173 b 155 11 -5 172 43 123 l 166 -1 l 168 1 l 170 4 l 170 130 b 171 260 170 256 170 258 b 191 274 175 269 183 274 b 205 267 196 274 201 272 b 212 158 212 262 210 273 l 212 56 l 257 112 b 311 173 304 172 304 172 b 317 174 313 174 314 174 b 326 173 319 174 323 173 b 490 11 329 172 366 134 l 502 -1 l 530 34 b 568 76 560 72 563 74 b 575 77 570 77 573 77 b 596 56 586 77 596 68 b 594 48 596 54 596 51 b 417 -172 592 41 424 -166 b 405 -176 415 -174 409 -176 b 396 -174 401 -176 398 -176 b 307 -87 393 -173 372 -152 b 221 -1 259 -38 221 -1 b 216 -6 221 -1 219 -2 l 212 -12 l 212 -147 b 212 -210 212 -173 212 -194 b 205 -292 212 -297 210 -287 b 191 -299 201 -297 196 -299 b 172 -287 183 -299 175 -295 b 170 -174 171 -284 171 -284 l 170 -63 l 127 -117 b 73 -176 84 -170 80 -176 b 68 -176 72 -176 70 -176 b -27 -87 59 -174 65 -180 b -114 0 -74 -38 -112 0 b -182 -86 -114 0 -145 -38 b -258 -174 -253 -174 -253 -173 b -264 -176 -259 -176 -262 -176 b -274 -174 -268 -176 -272 -174 b -438 -11 -277 -173 -348 -102 l -449 0 l -479 -37 b -524 -80 -513 -80 -514 -80 l -524 -80 b -553 -52 -534 -80 -540 -74 b -597 109 -583 -8 -597 48 b -560 280 -597 165 -585 224 b -533 324 -548 310 -540 322 \"},\n\"v6c\":{\"x_min\":-1.359375,\"x_max\":193.28125,\"ha\":197,\"o\":\"m 78 233 b 87 233 81 233 84 233 b 187 140 132 233 174 195 b 193 102 190 127 193 115 b 43 -113 193 22 136 -62 b 27 -119 36 -116 31 -119 b 19 -108 21 -119 19 -115 b 29 -97 19 -102 20 -101 b 102 13 73 -72 102 -27 b 92 51 102 26 98 40 l 91 54 l 84 54 b 8 104 53 54 21 74 b -1 142 1 116 -1 130 b 78 233 -1 187 31 227 \"},\n\"v6d\":{\"x_min\":-590.71875,\"x_max\":589.359375,\"ha\":601,\"o\":\"m 544 335 b 553 337 548 337 551 337 b 575 313 563 337 570 330 b 589 226 583 285 589 256 b 517 8 589 152 563 76 b 464 -58 507 -4 503 -9 l 401 -136 b 362 -176 372 -172 370 -176 b 357 -176 360 -176 359 -176 b 261 -87 349 -174 355 -180 b 175 0 215 -38 175 0 b 106 -86 175 0 144 -38 b 29 -174 35 -174 36 -173 b 24 -176 28 -176 27 -176 b 14 -174 21 -176 17 -174 b -73 -87 12 -173 -8 -152 b -159 0 -121 -38 -159 0 b -228 -86 -160 0 -190 -38 b -304 -174 -299 -174 -298 -173 b -310 -176 -306 -176 -308 -176 b -319 -174 -314 -176 -318 -174 b -483 -12 -323 -173 -359 -137 l -495 0 l -524 -34 b -562 -77 -553 -73 -556 -76 b -568 -79 -564 -79 -566 -79 b -590 -58 -581 -79 -590 -69 b -588 -49 -590 -55 -589 -52 b -412 170 -585 -43 -417 165 b -398 174 -408 173 -402 174 b -389 173 -394 174 -392 174 b -300 86 -387 172 -366 151 b -215 -1 -254 37 -215 -1 b -145 84 -215 -1 -183 37 b -69 173 -74 173 -76 172 b -63 174 -68 174 -66 174 b -54 173 -61 174 -57 173 b 34 86 -51 172 -31 151 b 119 -1 81 37 119 -1 b 189 84 121 -1 151 37 b 265 173 259 173 258 172 b 270 174 266 174 269 174 b 280 173 274 174 279 173 b 370 84 283 172 303 151 b 455 -1 416 37 455 -1 l 455 -1 b 476 24 455 -1 469 15 b 547 226 522 87 547 159 b 534 302 547 252 543 278 b 532 317 533 308 532 313 b 544 335 532 326 536 333 \"},\n\"v6f\":{\"x_min\":-80.3125,\"x_max\":78.9375,\"ha\":81,\"o\":\"m 63 191 b 69 192 65 192 66 192 b 77 188 72 192 76 191 b 78 183 78 187 78 186 b 74 158 78 179 77 172 l 66 115 b 9 -161 49 30 10 -158 b -10 -187 6 -172 -1 -181 b -34 -194 -17 -191 -25 -194 b -80 -147 -58 -194 -80 -174 b -80 -141 -80 -144 -80 -142 b 9 70 -80 -134 -73 -117 l 49 163 b 63 191 59 188 61 190 \"},\n\"v70\":{\"x_min\":0,\"x_max\":436.921875,\"ha\":446,\"o\":\"m 213 190 b 217 191 215 191 216 191 b 231 184 223 191 228 188 b 249 154 240 167 246 159 b 419 18 292 91 348 45 b 436 -1 435 11 436 8 b 424 -16 436 -9 434 -13 b 308 -87 394 -26 340 -59 b 231 -186 276 -117 257 -142 b 219 -192 228 -191 225 -192 b 198 -174 209 -192 208 -191 b 47 -33 161 -113 110 -63 b 10 -16 34 -26 17 -19 b 0 -1 2 -13 0 -9 b 17 18 0 8 1 11 b 198 173 95 48 156 101 b 213 190 206 187 208 188 \"},\n\"v72\":{\"x_min\":-423.3125,\"x_max\":421.9375,\"ha\":431,\"o\":\"m -262 197 b -247 197 -257 197 -253 197 b -118 162 -210 197 -163 184 b 40 45 -61 134 -13 98 b 277 -95 119 -33 200 -81 b 289 -97 281 -97 285 -97 b 378 0 332 -97 371 -55 b 378 11 378 4 378 6 b 302 83 378 55 345 83 b 242 66 283 83 262 77 b 208 56 231 59 219 56 b 148 120 175 56 148 81 b 201 186 148 151 164 172 b 261 198 220 194 240 198 b 420 45 341 198 411 136 b 421 22 421 37 421 29 b 245 -199 421 -93 338 -199 b 238 -198 243 -199 240 -199 b -44 -47 148 -194 50 -141 b -250 86 -114 22 -183 66 b -295 94 -270 91 -283 94 b -315 91 -302 94 -307 94 b -381 4 -356 81 -381 43 b -355 -56 -381 -18 -372 -40 b -298 -81 -338 -73 -319 -81 b -246 -68 -283 -81 -265 -77 b -212 -58 -234 -61 -223 -58 b -178 -69 -200 -58 -189 -62 b -151 -122 -160 -81 -151 -101 b -171 -167 -151 -138 -157 -155 b -239 -195 -185 -181 -213 -192 b -257 -197 -245 -197 -250 -197 b -423 -5 -352 -197 -423 -109 b -412 65 -423 16 -419 40 b -262 197 -389 137 -329 188 \"},\n\"v74\":{\"x_min\":-206.890625,\"x_max\":428.75,\"ha\":438,\"o\":\"m 389 -351 b 394 -351 390 -351 393 -351 b 428 -385 413 -351 428 -367 b 428 -394 428 -388 428 -391 b 394 -428 426 -406 421 -410 l 332 -473 l 269 -516 l 205 -560 l 141 -603 l 77 -648 l 13 -692 l -50 -737 l -114 -780 l -145 -802 b -171 -813 -157 -810 -163 -813 b -175 -813 -172 -813 -174 -813 b -206 -777 -194 -811 -206 -795 b -202 -760 -206 -771 -205 -766 b -87 -675 -197 -752 -206 -757 l -34 -639 l 83 -557 l 145 -514 l 209 -470 l 272 -427 b 389 -351 375 -356 381 -352 \"},\n\"v75\":{\"x_min\":-149.71875,\"x_max\":148.359375,\"ha\":151,\"o\":\"m -137 381 b -130 383 -134 383 -133 383 b -111 371 -122 383 -114 378 b -55 224 -110 370 -85 305 b 0 80 -25 145 -1 80 b 54 224 0 80 24 145 b 112 377 114 384 110 373 b 127 384 118 381 122 384 b 148 362 138 384 148 374 l 148 356 l 83 183 b 16 9 47 88 17 11 b -1 0 12 2 5 0 b -14 5 -5 0 -10 1 b -84 183 -19 9 -13 -6 l -149 356 l -149 362 b -137 381 -149 371 -145 378 \"},\n\"v78\":{\"x_min\":0,\"x_max\":193.28125,\"ha\":197,\"o\":\"m 85 514 b 95 517 88 517 89 517 b 114 505 103 517 110 513 l 115 502 l 115 376 b 115 249 115 306 115 249 b 141 258 117 249 127 252 l 167 266 l 172 266 b 190 254 181 265 187 262 l 193 251 l 193 202 l 193 188 b 187 147 193 149 191 152 b 147 130 183 142 182 141 l 115 119 l 115 9 b 115 -99 115 -51 115 -99 b 141 -91 115 -99 127 -95 b 171 -81 166 -81 167 -81 l 171 -81 b 191 -94 181 -81 189 -87 b 193 -142 191 -97 193 -120 b 191 -195 193 -167 191 -194 b 125 -227 187 -205 187 -204 l 115 -230 l 115 -366 l 115 -503 l 114 -506 b 95 -519 110 -514 102 -519 b 74 -506 87 -519 78 -514 l 73 -503 l 73 -374 b 73 -245 73 -260 73 -245 b 73 -245 73 -245 73 -245 b 55 -252 72 -245 63 -249 l 32 -260 b 19 -263 27 -262 23 -263 b 4 -256 13 -263 8 -260 b 0 -215 0 -251 0 -254 b 0 -199 0 -210 0 -206 l 0 -152 l 1 -149 b 8 -140 2 -145 5 -141 b 42 -127 9 -140 24 -133 l 73 -116 l 73 -5 b 73 23 73 4 73 15 b 73 105 73 70 73 105 b 49 97 73 105 61 101 b 17 88 32 91 23 88 b 4 95 10 88 8 91 b 0 137 0 101 0 98 b 0 151 0 141 0 145 l 0 199 l 1 202 b 43 224 5 212 5 212 l 73 234 l 73 367 l 73 502 l 74 505 b 85 514 77 509 81 513 \"},\n\"v79\":{\"x_min\":-1.359375,\"x_max\":899.703125,\"ha\":918,\"o\":\"m 307 349 b 332 351 315 351 323 351 b 443 340 367 351 408 347 b 741 47 607 306 720 195 b 744 0 743 31 744 16 b 660 -303 744 -90 713 -206 b 28 -755 534 -531 304 -695 b 14 -756 23 -755 19 -756 b -1 -741 4 -756 -1 -750 b 21 -720 -1 -731 1 -728 b 567 -56 337 -601 548 -344 b 568 -11 568 -41 568 -24 b 442 285 568 129 525 233 b 325 319 406 308 367 319 b 93 177 232 319 137 266 b 84 154 91 170 84 155 b 84 154 84 154 84 154 b 88 156 84 154 85 155 b 159 177 110 170 134 177 b 257 134 194 177 231 162 b 294 41 281 108 294 73 b 171 -97 294 -24 246 -90 b 156 -98 166 -97 161 -98 b 6 74 73 -98 6 -22 b 6 80 6 76 6 79 b 307 349 10 223 141 340 m 839 215 b 845 216 841 216 842 216 b 862 213 852 216 860 215 b 899 163 887 206 899 184 b 872 117 899 145 890 127 b 847 111 865 112 856 111 b 808 130 833 111 818 117 b 796 162 800 140 796 151 b 839 215 796 187 812 212 m 839 -112 b 845 -112 841 -112 842 -112 b 862 -115 852 -112 860 -113 b 899 -165 887 -122 899 -144 b 872 -210 899 -183 890 -201 b 847 -217 865 -215 856 -217 b 808 -198 833 -217 818 -210 b 796 -165 800 -188 796 -177 b 839 -112 796 -140 812 -116 \"},\n\"v7a\":{\"x_min\":-1.359375,\"x_max\":386.5625,\"ha\":394,\"o\":\"m 249 535 b 257 537 251 537 253 537 b 276 524 266 537 273 533 l 277 521 l 279 419 l 279 316 l 304 323 b 337 328 319 326 330 328 b 353 316 347 328 349 324 b 355 266 355 315 355 290 b 353 215 355 241 355 217 b 319 198 349 206 347 205 b 279 187 284 190 279 188 b 279 156 279 187 279 174 b 279 136 279 151 279 144 l 279 84 l 289 87 l 330 98 b 367 105 352 102 362 105 b 378 101 372 105 375 104 b 386 61 385 95 386 94 b 386 40 386 55 386 48 l 386 -5 l 385 -8 b 374 -19 383 -12 378 -18 b 291 -40 372 -19 347 -26 b 279 -43 284 -41 279 -43 b 279 -83 279 -43 279 -59 b 279 -95 279 -87 279 -91 l 279 -145 l 304 -140 b 337 -133 321 -136 330 -133 b 349 -140 343 -133 347 -136 b 355 -181 355 -145 355 -142 l 355 -197 l 355 -210 b 349 -252 355 -249 355 -247 b 300 -269 345 -258 347 -258 b 280 -274 291 -272 281 -273 l 279 -274 l 277 -378 l 277 -483 l 276 -487 b 257 -499 273 -495 265 -499 b 238 -487 249 -499 242 -495 l 236 -483 l 236 -384 l 236 -285 l 235 -285 l 212 -291 l 170 -301 b 148 -308 159 -305 148 -306 b 147 -415 147 -308 147 -313 l 147 -523 l 145 -526 b 126 -538 141 -534 133 -538 b 106 -526 118 -538 110 -534 l 104 -523 l 104 -420 b 103 -317 104 -326 104 -317 b 103 -317 103 -317 103 -317 b 50 -330 92 -322 54 -330 b 31 -317 42 -330 35 -326 b 29 -267 29 -315 29 -315 l 29 -219 l 32 -216 b 92 -192 36 -206 36 -206 l 104 -190 l 104 -138 b 103 -87 104 -91 104 -87 b 103 -87 103 -87 103 -87 b 88 -91 103 -87 96 -88 l 49 -101 b 17 -106 32 -105 23 -106 b 6 -102 13 -106 10 -105 b -1 -62 0 -97 -1 -95 b 0 -41 -1 -56 0 -49 l 0 4 l 1 6 b 10 16 2 11 6 15 b 91 37 12 18 38 24 l 104 41 l 104 93 b 103 144 104 140 104 144 b 103 144 103 144 103 144 b 50 131 92 141 54 131 b 31 144 42 131 35 137 b 29 195 29 147 29 148 l 29 242 l 32 245 b 92 269 36 255 36 255 l 104 273 l 104 377 l 104 481 l 106 485 b 126 498 110 492 118 498 b 134 495 129 498 132 496 b 145 485 138 494 142 489 l 147 481 l 147 383 l 147 283 l 152 284 b 190 294 155 285 171 290 l 230 303 l 236 305 l 236 413 l 236 521 l 238 524 b 249 535 240 528 243 533 m 236 126 b 235 177 236 154 236 177 l 235 177 b 213 172 235 177 225 174 l 170 161 b 147 155 157 158 147 155 b 147 124 147 155 147 142 b 147 102 147 117 147 111 l 147 52 l 153 54 l 228 72 l 236 74 l 236 126 m 236 -105 b 235 -54 236 -65 236 -54 l 235 -54 b 231 -55 235 -54 234 -54 b 172 -69 227 -55 204 -62 l 149 -76 l 147 -76 l 147 -127 l 147 -179 l 152 -177 b 190 -167 155 -177 171 -173 l 230 -158 l 236 -156 l 236 -105 \"},\n\"v7c\":{\"x_min\":0,\"x_max\":300.8125,\"ha\":307,\"o\":\"m 49 505 b 53 506 50 505 51 506 b 70 496 58 506 62 503 b 81 485 73 492 78 488 l 96 473 l 111 459 l 122 449 l 134 438 l 182 396 l 255 330 b 292 291 292 298 292 298 l 292 290 l 292 284 l 283 270 b 209 36 234 197 209 113 b 288 -170 209 -44 235 -119 b 299 -184 295 -179 299 -181 b 300 -191 300 -187 300 -188 b 285 -206 300 -199 294 -206 b 280 -206 283 -206 281 -206 b 247 -201 270 -202 259 -201 b 176 -222 223 -201 197 -208 b 114 -340 136 -249 114 -292 b 172 -471 114 -384 134 -433 b 185 -492 182 -481 185 -487 b 181 -502 185 -496 183 -499 b 171 -508 176 -505 174 -508 b 152 -498 166 -508 160 -503 b 0 -284 65 -428 12 -352 b 0 -260 0 -278 0 -270 b 1 -238 0 -252 0 -242 b 148 -140 16 -177 73 -140 b 209 -148 167 -140 189 -142 b 215 -149 212 -148 215 -149 b 215 -149 215 -149 215 -149 l 215 -149 b 201 -136 215 -148 209 -142 l 157 -97 l 96 -41 b 17 34 21 24 17 29 b 17 37 17 36 17 36 b 17 38 17 37 17 38 b 25 56 17 44 17 44 b 110 298 81 131 110 219 b 46 474 110 367 88 431 b 38 491 40 480 38 487 b 49 505 38 498 42 502 \"},\n\"v7d\":{\"x_min\":-1.359375,\"x_max\":436.921875,\"ha\":446,\"o\":\"m 213 205 b 217 205 215 205 216 205 b 234 194 224 205 234 199 b 236 187 234 194 235 190 l 245 167 l 261 129 l 270 106 b 355 -61 294 54 329 -13 b 420 -163 381 -105 402 -138 b 436 -188 435 -184 436 -184 b 436 -191 436 -190 436 -190 b 421 -206 436 -201 431 -206 l 421 -206 l 416 -206 l 405 -201 b 217 -158 347 -172 283 -158 b 31 -201 153 -158 88 -172 l 20 -206 l 14 -206 l 14 -206 b 0 -191 5 -206 0 -201 b -1 -188 0 -190 -1 -190 b 14 -163 -1 -186 0 -184 b 95 -34 36 -136 72 -77 b 166 106 119 8 148 68 l 175 129 l 183 148 l 200 188 b 213 205 205 199 208 202 \"},\n\"v7f\":{\"x_min\":0,\"x_max\":367.5,\"ha\":375,\"o\":\"m 0 124 l 0 187 l 61 187 l 122 187 l 122 138 l 122 91 l 153 61 l 183 30 l 213 61 l 243 91 l 243 138 l 243 187 l 306 187 l 367 187 l 367 124 l 367 61 l 321 61 l 274 61 l 243 30 l 213 0 l 243 -31 l 274 -62 l 321 -62 l 367 -62 l 367 -124 l 367 -188 l 306 -188 l 243 -188 l 243 -140 l 243 -93 l 213 -62 l 183 -31 l 153 -62 l 122 -93 l 122 -140 l 122 -188 l 61 -188 l 0 -188 l 0 -124 l 0 -62 l 46 -62 l 92 -62 l 123 -31 l 153 0 l 123 30 l 92 61 l 46 61 l 0 61 l 0 124 \"},\n\"v80\":{\"x_min\":29.9375,\"x_max\":420.578125,\"ha\":371,\"o\":\"m 115 345 b 221 347 117 345 166 347 b 411 345 306 347 409 345 b 420 330 416 342 420 335 b 415 319 420 326 419 321 b 178 118 397 303 179 118 b 178 117 178 118 178 117 b 181 117 178 117 178 117 b 189 117 182 117 185 117 b 193 117 190 117 191 117 b 247 98 215 117 232 111 b 296 75 266 83 280 76 b 302 75 299 75 300 75 b 322 91 311 75 315 79 b 322 91 322 91 322 91 b 322 91 322 91 322 91 b 319 91 322 91 321 91 b 313 90 318 90 315 90 b 283 107 300 90 288 97 b 277 126 279 114 277 121 b 319 167 277 149 295 167 b 319 167 319 167 319 167 b 362 118 347 167 362 147 b 355 82 362 108 359 96 b 311 33 349 65 340 55 b 224 1 284 12 253 1 b 194 5 213 1 204 2 b 168 18 183 8 178 11 b 110 36 151 30 130 36 b 57 15 88 36 68 29 b 47 11 54 12 51 11 b 31 20 40 11 34 13 b 29 26 31 22 29 25 b 68 66 29 36 39 45 b 285 250 73 71 281 248 b 285 250 285 250 285 250 b 231 252 285 252 261 252 b 137 250 190 252 141 250 b 93 227 122 248 110 241 b 78 220 88 222 83 220 b 66 227 74 220 70 222 b 63 234 65 229 63 231 b 85 291 63 241 69 252 b 115 345 108 342 108 344 \"},\n\"v81\":{\"x_min\":0,\"x_max\":428.75,\"ha\":438,\"o\":\"m 262 186 b 273 186 266 186 272 186 b 274 186 273 186 274 186 b 285 186 274 186 280 186 b 428 48 375 181 428 122 b 386 -68 428 12 416 -29 b 155 -187 329 -145 236 -187 b 12 -111 92 -187 38 -162 b 0 -51 4 -91 0 -72 b 262 186 0 58 122 179 m 366 131 b 352 134 362 133 357 134 b 219 81 321 134 269 115 b 47 -111 126 23 50 -62 b 47 -112 47 -111 47 -112 b 77 -136 47 -129 58 -136 b 264 -45 118 -136 194 -101 b 382 109 336 12 382 76 b 366 131 382 120 377 129 \"},\n\"v83\":{\"x_min\":-1.359375,\"x_max\":847.96875,\"ha\":865,\"o\":\"m 488 1499 b 495 1500 490 1500 492 1500 b 541 1465 507 1500 521 1490 b 679 1078 622 1372 679 1210 b 677 1050 679 1068 677 1060 b 477 642 668 893 604 764 l 443 609 l 431 596 l 431 592 l 438 562 l 449 508 l 460 458 b 481 355 475 390 481 355 b 481 355 481 355 481 355 b 490 356 481 355 485 355 b 528 358 495 356 511 358 b 558 356 540 358 552 356 b 839 95 699 338 808 237 b 847 22 845 72 847 47 b 631 -303 847 -113 766 -242 b 620 -309 623 -308 620 -309 l 620 -310 b 631 -359 620 -310 626 -333 l 646 -435 l 660 -496 b 672 -588 668 -535 672 -563 b 664 -653 672 -610 669 -630 b 383 -875 630 -792 509 -875 b 201 -810 321 -875 257 -855 b 129 -680 151 -768 129 -730 b 274 -530 129 -592 200 -530 b 351 -553 300 -530 326 -538 b 412 -669 393 -582 412 -626 b 287 -805 412 -735 366 -800 l 279 -805 l 285 -809 b 383 -830 318 -823 351 -830 b 586 -718 464 -830 540 -789 b 626 -584 612 -678 626 -631 b 619 -528 626 -566 623 -548 b 612 -495 619 -526 616 -510 b 577 -324 590 -387 577 -324 b 577 -324 577 -324 577 -324 b 568 -326 575 -324 571 -324 b 528 -334 558 -328 537 -333 b 465 -338 506 -337 485 -338 b 24 -11 269 -338 87 -206 b -1 145 8 41 -1 93 b 96 442 -1 249 32 351 b 322 714 166 541 236 626 l 352 745 l 345 782 l 332 843 l 315 921 b 303 984 310 950 304 978 b 295 1082 298 1017 295 1049 b 413 1426 295 1208 336 1329 b 488 1499 436 1456 477 1496 m 549 1301 b 541 1301 547 1301 544 1301 b 411 1207 500 1301 447 1263 b 355 1004 374 1152 355 1079 b 359 942 355 984 356 963 b 371 881 362 927 363 917 l 385 818 b 392 782 389 799 392 784 l 392 782 b 434 828 393 782 424 816 b 607 1165 534 941 594 1060 b 608 1193 608 1175 608 1183 b 597 1270 608 1224 604 1254 b 549 1301 589 1286 571 1299 m 398 528 b 393 555 396 542 393 553 b 392 555 393 555 393 555 b 317 470 390 555 347 505 b 190 298 266 408 212 334 b 127 70 148 227 127 148 b 155 -77 127 19 137 -30 b 468 -303 209 -216 333 -303 b 519 -299 484 -303 502 -302 b 568 -284 541 -295 568 -287 l 568 -284 b 563 -263 568 -284 566 -274 l 534 -120 l 511 -13 l 496 61 l 480 133 b 469 187 472 176 469 187 b 468 188 469 187 469 188 b 416 162 462 188 430 172 b 337 13 364 126 337 69 b 413 -124 337 -40 363 -93 b 428 -144 424 -131 428 -137 b 428 -149 428 -145 428 -148 b 409 -166 426 -161 419 -166 b 394 -162 405 -166 400 -165 b 240 77 302 -122 240 -27 l 240 77 b 430 342 240 197 315 301 l 436 344 l 426 394 l 398 528 m 548 194 b 526 195 540 195 532 195 b 519 195 524 195 521 195 l 514 195 l 518 177 l 539 79 l 552 15 l 566 -48 l 594 -187 l 605 -240 b 612 -266 609 -254 611 -266 b 612 -266 612 -266 612 -266 b 641 -248 613 -266 630 -256 b 744 -98 692 -212 730 -156 b 751 -40 749 -79 751 -59 b 548 194 751 76 665 181 \"},\n\"v84\":{\"x_min\":25.859375,\"x_max\":164.6875,\"ha\":168,\"o\":\"m 34 369 b 40 370 35 370 38 370 b 59 353 49 370 50 367 b 164 40 122 254 155 158 b 164 0 164 33 164 16 b 164 -40 164 -16 164 -34 b 59 -353 155 -158 122 -254 b 40 -371 53 -366 47 -371 b 34 -370 38 -371 36 -370 b 25 -358 28 -367 25 -363 b 31 -337 25 -352 27 -347 b 92 0 72 -234 92 -117 b 31 335 92 116 72 233 b 25 356 27 345 25 352 b 34 369 25 363 28 366 \"},\n\"v86\":{\"x_min\":-571.671875,\"x_max\":570.3125,\"ha\":582,\"o\":\"m -386 173 b -381 174 -385 174 -383 174 b -370 173 -377 174 -372 173 b -281 86 -367 172 -347 151 b -196 0 -235 37 -196 0 b -126 84 -196 0 -164 37 b -50 174 -55 173 -57 172 b -44 174 -49 174 -47 174 b -35 173 -42 174 -38 173 b 53 86 -32 172 -12 151 b 138 0 100 37 138 0 b 208 84 140 0 170 37 b 284 174 279 173 277 172 b 289 174 285 174 288 174 b 299 173 294 174 298 173 b 462 11 303 172 338 134 l 475 -1 l 503 34 b 541 76 534 72 536 74 b 548 77 544 77 545 77 b 570 56 560 77 570 68 b 567 48 570 54 568 51 b 392 -172 564 41 397 -166 b 378 -176 387 -174 382 -176 b 368 -174 374 -176 371 -176 b 280 -87 367 -173 345 -152 b 194 0 234 -38 194 0 b 125 -86 194 0 163 -38 b 49 -174 54 -174 55 -173 b 43 -176 47 -176 46 -176 b 34 -174 40 -176 36 -174 b -54 -87 31 -173 10 -152 b -140 0 -102 -38 -140 0 b -209 -86 -141 0 -171 -38 b -285 -174 -280 -174 -279 -173 b -291 -176 -287 -176 -289 -176 b -300 -174 -295 -176 -299 -174 b -464 -12 -304 -173 -340 -137 l -476 0 l -504 -34 b -543 -77 -534 -73 -537 -76 b -549 -79 -545 -79 -547 -79 b -571 -58 -562 -79 -571 -69 b -568 -49 -571 -55 -570 -52 b -392 172 -566 -43 -396 167 b -386 173 -390 172 -387 173 \"},\n\"v8a\":{\"x_min\":-170.140625,\"x_max\":168.78125,\"ha\":172,\"o\":\"m -160 567 b -122 567 -159 567 -149 567 l -87 567 l -84 566 b -74 553 -78 563 -77 560 b -20 366 -73 551 -49 466 b 31 186 8 267 31 186 b 85 371 31 186 55 269 b 140 559 114 473 138 557 b 153 567 141 564 148 567 b 168 559 159 567 166 564 b 168 555 168 557 168 557 b 92 281 168 548 159 513 b 14 13 50 134 14 13 b 0 0 14 6 6 0 b -17 15 -8 0 -17 8 b -93 283 -17 15 -51 136 b -170 552 -166 533 -170 548 b -170 553 -170 552 -170 552 b -160 567 -170 560 -167 564 \"},\n\"v8b\":{\"x_min\":0,\"x_max\":319.859375,\"ha\":326,\"o\":\"m 149 508 b 159 509 152 509 155 509 b 186 494 170 509 181 503 b 190 440 190 487 190 488 l 190 430 l 190 377 l 242 377 l 251 377 b 303 373 298 377 296 377 b 319 345 314 367 319 356 b 304 319 319 335 314 324 b 250 315 296 315 299 315 l 242 315 l 190 315 l 190 262 l 190 252 b 186 198 190 204 190 205 b 159 183 179 188 170 183 b 132 198 148 183 138 188 b 127 252 127 205 127 204 l 127 262 l 127 315 l 76 315 l 68 315 b 14 319 20 315 21 315 b 0 347 4 324 0 335 b 14 373 0 356 4 367 b 68 377 21 377 20 377 l 76 377 l 127 377 l 127 430 l 127 440 b 132 494 127 488 127 487 b 149 508 136 501 142 505 \"},\n\"v8c\":{\"x_min\":-330.75,\"x_max\":329.390625,\"ha\":336,\"o\":\"m -133 483 b -117 484 -127 484 -122 484 b 31 373 -51 484 9 440 b 35 348 34 365 35 356 b -25 285 35 313 10 285 b -87 331 -55 285 -76 302 b -167 402 -100 376 -133 402 b -191 398 -175 402 -183 401 b -227 341 -215 388 -227 369 b -225 320 -227 334 -227 327 b -13 74 -209 230 -125 133 b 6 65 -4 70 5 66 l 9 63 l 10 65 b 117 231 12 68 40 112 l 189 341 l 242 424 b 268 460 262 456 264 458 b 283 464 273 463 277 464 b 308 438 296 464 308 453 l 308 437 b 287 396 308 430 308 428 l 95 98 l 59 43 l 58 41 l 65 37 b 253 -156 151 -8 217 -77 b 281 -285 272 -199 281 -244 b 148 -481 281 -381 231 -463 b 115 -485 137 -484 126 -485 b -32 -376 51 -485 -9 -442 b -36 -349 -35 -366 -36 -358 b 25 -287 -36 -315 -12 -287 b 85 -333 54 -287 74 -302 b 166 -403 99 -377 133 -403 b 190 -399 174 -403 182 -402 b 225 -342 215 -390 225 -370 b 224 -322 225 -335 225 -328 b 12 -76 208 -231 125 -134 b -8 -66 2 -72 -6 -68 l -10 -65 l -12 -66 b -118 -231 -13 -68 -42 -113 l -190 -342 l -243 -426 b -269 -462 -264 -458 -265 -458 b -284 -466 -274 -464 -279 -466 b -310 -440 -298 -466 -310 -455 l -310 -438 b -288 -398 -310 -430 -308 -430 l -96 -99 l -59 -44 l -59 -43 l -66 -38 b -281 284 -198 33 -281 158 l -281 284 b -133 483 -281 392 -220 474 m 254 177 b 266 179 258 177 262 179 b 319 149 287 179 307 167 b 329 115 326 140 329 127 b 319 79 329 102 326 90 b 268 51 307 61 287 51 b 221 72 250 51 234 58 b 205 115 210 84 205 99 b 254 177 205 142 223 170 m -281 -54 b -269 -52 -277 -52 -273 -52 b -223 -73 -253 -52 -235 -59 b -206 -116 -212 -84 -206 -101 b -216 -151 -206 -129 -209 -141 b -269 -179 -228 -170 -249 -179 b -314 -159 -285 -179 -302 -173 b -330 -116 -325 -147 -330 -131 b -281 -54 -330 -88 -313 -61 \"},\n\"v8d\":{\"x_min\":-1.359375,\"x_max\":255.890625,\"ha\":261,\"o\":\"m 118 514 b 127 517 121 517 122 517 b 147 505 136 517 142 513 l 148 502 l 148 403 b 148 306 148 351 148 306 b 174 315 149 306 160 310 l 200 324 l 205 323 b 223 312 213 323 220 319 l 225 308 l 225 260 b 225 245 225 255 225 249 b 220 204 225 208 224 209 b 179 188 216 199 215 199 l 148 177 l 148 124 l 148 70 l 189 84 b 236 98 219 94 230 98 b 247 94 240 98 243 97 b 255 52 254 88 255 87 b 255 33 255 47 255 40 l 254 -12 l 253 -15 b 249 -22 253 -18 250 -20 l 245 -24 l 196 -41 l 148 -58 l 148 -108 b 148 -158 148 -136 148 -158 b 174 -148 148 -158 160 -154 b 204 -140 198 -140 200 -140 l 204 -140 b 224 -152 213 -140 221 -145 b 225 -201 224 -155 225 -177 b 224 -254 225 -226 224 -251 b 157 -284 220 -262 220 -262 l 148 -288 l 148 -395 l 148 -503 l 147 -506 b 127 -519 142 -514 134 -519 b 107 -506 119 -519 111 -514 l 106 -503 l 106 -403 b 106 -303 106 -316 106 -303 b 104 -303 104 -303 104 -303 b 88 -310 104 -303 96 -306 l 63 -319 b 51 -322 59 -320 55 -322 b 36 -315 46 -322 40 -319 b 31 -273 32 -309 31 -312 b 31 -258 31 -269 31 -263 l 31 -210 l 34 -206 b 40 -198 35 -204 38 -199 b 74 -186 42 -197 57 -191 l 106 -173 l 106 -123 b 106 -97 106 -112 106 -104 b 106 -72 106 -76 106 -72 b 104 -72 106 -72 106 -72 b 20 -99 89 -79 23 -99 b 0 -84 10 -99 2 -93 b -1 -37 0 -81 -1 -59 b 0 11 -1 -15 0 9 b 58 40 4 22 2 22 l 106 56 l 106 109 b 106 123 106 115 106 119 b 106 162 106 147 106 162 b 81 155 106 162 93 159 b 50 147 65 149 55 147 b 36 152 43 147 40 148 b 31 194 32 158 31 156 b 31 209 31 198 31 204 l 31 256 l 34 260 b 76 281 38 269 38 269 l 106 292 l 106 396 l 106 502 l 107 505 b 118 514 110 509 114 513 \"},\n\"v8f\":{\"x_min\":-21.78125,\"x_max\":362.0625,\"ha\":369,\"o\":\"m 302 1031 b 308 1032 304 1032 307 1032 b 330 1016 318 1032 325 1027 b 362 867 351 970 362 920 b 340 738 362 824 353 780 l 336 727 l 340 717 b 362 591 355 677 362 634 b 257 323 362 496 325 401 b 204 272 243 306 227 290 b 20 56 129 206 66 133 b -1 18 12 44 0 22 b -19 4 -4 9 -12 4 l -21 4 l -21 140 l -21 276 l -12 277 b 167 333 61 288 127 309 b 319 598 262 388 319 491 b 311 664 319 620 317 642 l 310 673 l 304 664 b 204 548 279 620 250 587 b 20 333 129 483 66 409 b -1 292 12 320 0 298 b -19 280 -4 285 -12 280 l -21 280 l -21 416 l -21 552 l -12 553 b 167 609 61 564 127 585 b 319 874 264 666 319 770 b 294 992 319 914 311 954 b 288 1011 288 1004 288 1007 b 302 1031 288 1021 294 1028 \"},\n\"v90\":{\"x_min\":-171.5,\"x_max\":483.1875,\"ha\":493,\"o\":\"m -8 631 b -1 632 -6 632 -4 632 b 19 620 8 632 16 628 b 20 495 20 616 20 616 b 20 373 20 427 20 373 b 115 410 20 373 63 390 l 210 448 l 210 531 b 212 620 210 614 210 616 b 231 632 215 628 223 632 b 246 627 236 632 242 631 b 251 541 251 620 251 628 l 251 463 l 315 489 b 387 514 368 509 381 514 b 393 513 390 514 392 514 b 406 494 402 510 406 502 b 397 476 406 487 404 480 b 323 446 396 474 363 462 l 251 417 l 251 283 l 251 148 l 254 151 b 370 199 291 183 332 199 b 415 191 385 199 400 197 b 483 84 458 176 483 134 b 461 0 483 58 476 29 b 332 -142 439 -40 411 -72 l 255 -215 b 231 -229 240 -229 239 -229 b 216 -223 224 -229 220 -227 b 210 -158 210 -217 210 -223 b 210 -120 210 -148 210 -136 l 210 -29 l 205 -34 b 100 -142 182 -65 159 -88 l 23 -215 b -1 -229 9 -229 6 -229 b -19 -217 -9 -229 -16 -224 l -20 -215 l -21 48 l -21 310 l -83 287 b -152 262 -133 266 -145 262 b -157 263 -153 262 -155 262 b -171 283 -166 266 -171 274 b -161 301 -171 290 -167 297 b -91 328 -160 302 -129 315 l -21 356 l -21 487 l -20 617 l -19 621 b -8 631 -17 626 -12 630 m 210 288 b 210 401 210 351 210 401 b 114 365 209 401 167 384 l 20 327 l 20 238 l 20 148 l 21 151 b 140 199 59 183 102 199 b 206 180 164 199 187 192 l 209 177 b 209 177 209 177 209 177 b 210 288 210 177 210 199 m 110 131 b 96 133 106 133 100 133 b 89 133 93 133 91 133 b 24 87 63 129 40 113 l 20 80 l 20 -37 l 20 -156 l 23 -152 b 144 81 96 -72 144 20 l 144 83 b 110 131 144 113 134 126 m 341 131 b 328 133 337 133 332 133 b 322 133 326 133 323 133 b 257 87 296 129 273 113 l 251 80 l 251 -37 l 251 -156 l 255 -152 b 375 81 328 -72 375 20 l 375 83 b 341 131 375 113 367 126 \"},\n\"v92\":{\"x_min\":0,\"x_max\":598.890625,\"ha\":611,\"o\":\"m 62 181 b 77 183 66 183 72 183 b 91 181 83 183 88 183 b 202 131 100 180 106 177 l 299 87 l 394 131 b 517 183 499 181 502 183 b 519 183 517 183 518 183 b 598 104 567 183 598 144 b 577 49 598 84 592 65 b 518 15 567 38 563 37 b 484 0 499 6 484 0 b 518 -16 484 -1 499 -8 b 577 -51 563 -38 567 -40 b 598 -105 592 -66 598 -86 b 519 -184 598 -145 567 -184 b 517 -184 518 -184 517 -184 b 394 -133 502 -184 499 -183 l 299 -88 l 202 -133 b 81 -184 99 -183 95 -184 b 77 -184 80 -184 78 -184 b 0 -105 29 -184 0 -145 b 20 -51 0 -86 5 -66 b 80 -16 29 -40 34 -38 b 114 -1 98 -8 114 -1 b 80 15 114 0 98 6 b 20 49 34 37 29 38 b 0 104 6 65 0 84 b 62 181 0 140 23 174 m 88 134 b 74 136 85 134 80 136 b 68 134 72 136 69 136 b 46 104 54 130 46 117 b 55 81 46 95 49 88 b 149 34 59 76 53 80 b 224 -1 190 15 224 0 b 144 -38 224 -1 187 -18 b 54 -84 59 -79 58 -79 b 46 -105 49 -90 46 -98 b 76 -137 46 -122 58 -137 b 78 -137 77 -137 77 -137 b 194 -86 87 -137 76 -141 b 298 -36 250 -58 298 -36 b 298 -36 298 -36 298 -36 b 402 -84 299 -36 345 -58 b 518 -137 522 -141 510 -137 b 521 -137 519 -137 519 -137 b 551 -105 539 -137 551 -122 b 541 -83 551 -98 548 -90 b 447 -36 537 -77 544 -81 b 374 -1 406 -16 374 -1 b 447 34 374 0 406 15 b 541 81 544 80 537 76 b 551 104 548 88 551 97 b 521 136 551 120 539 136 b 518 136 519 136 519 136 b 517 136 518 136 517 136 l 517 136 b 402 83 511 136 511 136 b 298 34 345 56 299 34 b 298 34 298 34 298 34 b 194 84 298 34 250 56 b 88 134 137 111 89 133 \"},\n\"v93\":{\"x_min\":0,\"x_max\":438.28125,\"ha\":447,\"o\":\"m 212 205 b 219 205 213 205 216 205 b 239 183 228 205 231 204 b 421 -163 298 40 363 -83 b 438 -191 434 -180 438 -186 b 436 -197 438 -192 438 -195 b 424 -206 434 -204 431 -206 b 406 -201 420 -206 415 -205 b 216 -156 347 -172 281 -156 b 23 -205 148 -156 80 -173 b 14 -206 20 -206 17 -206 b 0 -191 6 -206 0 -201 b 6 -176 0 -187 1 -183 b 202 192 63 -104 142 45 b 212 205 205 199 208 202 m 264 48 l 249 81 l 243 94 l 242 91 b 89 -126 208 36 137 -66 b 81 -138 85 -133 81 -138 b 81 -138 81 -138 81 -138 b 81 -138 81 -138 81 -138 b 95 -133 81 -138 87 -136 b 280 -94 156 -108 221 -94 b 334 -98 299 -94 317 -95 b 343 -99 338 -99 343 -99 b 343 -99 343 -99 343 -99 b 338 -94 343 -99 341 -97 b 264 48 318 -58 287 1 \"},\n\"v94\":{\"x_min\":-149.71875,\"x_max\":148.359375,\"ha\":151,\"o\":\"m -9 215 b 0 217 -6 217 -4 217 b 19 205 8 217 14 213 b 20 142 20 202 20 201 l 20 84 l 23 84 b 144 -27 81 74 129 30 b 148 -66 147 -40 148 -54 b 36 -213 148 -134 103 -197 b 0 -219 24 -217 12 -219 b -145 -104 -68 -219 -129 -173 b -149 -68 -148 -91 -149 -79 b -24 84 -149 6 -98 74 l -21 84 l -21 142 b -19 205 -20 201 -20 202 b -9 215 -17 209 -13 213 m -21 -15 b -23 41 -21 37 -21 41 b -23 41 -23 41 -23 41 b -76 11 -35 40 -62 26 b -108 -65 -98 -11 -108 -38 b -1 -176 -108 -122 -65 -176 b 107 -65 63 -176 107 -122 b 74 11 107 -38 96 -11 b 20 41 61 26 32 41 b 20 -15 20 41 20 15 b 19 -74 20 -72 20 -72 b 0 -87 14 -83 6 -87 b -19 -74 -8 -87 -16 -83 b -21 -15 -20 -72 -20 -72 \"},\n\"v95\":{\"x_min\":0,\"x_max\":406.96875,\"ha\":415,\"o\":\"m 55 181 b 70 183 61 183 66 183 b 111 170 85 183 99 179 b 160 130 115 167 137 149 l 202 95 l 245 130 b 319 181 299 176 302 179 b 334 183 325 183 330 183 b 406 109 375 183 406 148 b 401 81 406 99 405 91 b 348 24 394 65 390 59 b 318 -1 332 11 318 0 b 348 -26 318 -1 332 -12 b 401 -83 390 -61 394 -66 b 406 -111 405 -93 406 -101 b 334 -184 406 -149 375 -184 b 319 -183 330 -184 325 -184 b 245 -131 302 -180 299 -177 l 202 -97 l 160 -131 b 85 -183 107 -177 103 -180 b 70 -184 80 -184 76 -184 b 0 -111 31 -184 0 -149 b 4 -83 0 -101 1 -93 b 58 -26 10 -66 16 -61 b 88 -1 74 -12 88 -1 b 58 24 88 0 74 11 b 10 69 23 54 17 59 b 0 109 2 81 0 95 b 55 181 0 142 21 173 m 83 133 b 72 136 78 136 76 136 b 57 131 66 136 61 134 b 46 109 49 126 46 117 b 50 93 46 104 47 98 b 107 45 51 91 77 70 b 160 0 137 20 160 0 b 107 -47 160 -1 137 -22 b 50 -94 77 -72 51 -93 b 46 -111 47 -99 46 -105 b 59 -134 46 -120 50 -130 b 72 -137 62 -136 68 -137 b 83 -136 76 -137 80 -136 b 144 -84 84 -134 107 -116 b 202 -36 176 -58 202 -36 b 261 -84 202 -36 230 -58 b 323 -136 299 -116 321 -134 b 334 -137 326 -136 330 -137 b 345 -134 338 -137 343 -136 b 360 -111 355 -130 360 -120 b 355 -94 360 -105 359 -99 b 299 -47 353 -93 329 -72 b 245 0 269 -22 245 -1 b 299 45 245 0 269 20 b 355 93 329 70 353 91 b 360 109 359 98 360 104 b 345 133 360 119 355 129 b 334 136 343 134 338 136 b 323 134 330 136 326 134 b 261 83 321 133 299 115 b 202 34 230 56 202 34 b 144 83 202 34 176 56 b 83 133 106 115 84 133 \"},\n\"v97\":{\"x_min\":-228.671875,\"x_max\":227.3125,\"ha\":232,\"o\":\"m -217 487 l -213 488 l 0 488 l 212 488 l 216 487 b 225 476 220 484 224 480 l 227 473 l 227 244 l 227 15 l 225 12 b 206 0 223 4 215 0 b 197 1 204 0 200 0 b 187 12 193 4 189 6 l 186 15 l 186 138 l 186 262 l -1 262 l -187 262 l -187 138 l -187 15 l -189 12 b -208 0 -193 4 -200 0 b -227 12 -216 0 -223 4 l -228 15 l -228 244 l -228 473 l -227 476 b -217 487 -225 480 -221 484 \"},\n\"v9a\":{\"x_min\":-21.78125,\"x_max\":367.5,\"ha\":375,\"o\":\"m 230 1031 b 238 1032 232 1032 235 1032 b 259 1014 245 1032 251 1027 b 367 662 330 906 367 782 b 364 602 367 641 367 621 b 232 317 352 488 304 384 b 57 120 155 245 103 187 b -1 18 31 84 6 40 b -19 4 -4 11 -12 4 l -21 4 l -21 159 l -21 315 l -16 315 b 96 335 10 315 62 324 b 315 695 227 380 315 527 b 313 738 315 709 314 724 b 224 991 304 825 273 916 b 216 1013 219 999 216 1007 b 230 1031 216 1021 220 1028 \"},\n\"v9b\":{\"x_min\":-24.5,\"x_max\":313.0625,\"ha\":319,\"o\":\"m -24 -133 l -24 -5 l -20 -5 b -1 -19 -12 -5 -4 -11 b 142 -213 13 -61 74 -144 b 258 -376 196 -269 230 -315 b 313 -605 295 -449 313 -528 b 292 -742 313 -652 306 -699 b 288 -752 289 -748 288 -752 b 288 -752 288 -752 288 -752 b 292 -764 289 -753 291 -757 b 313 -907 306 -811 313 -860 b 292 -1045 313 -954 306 -1002 b 288 -1054 289 -1050 288 -1054 b 288 -1054 288 -1054 288 -1054 b 292 -1067 289 -1054 291 -1060 b 313 -1210 306 -1113 313 -1161 b 292 -1346 313 -1257 306 -1304 b 288 -1357 289 -1353 288 -1357 b 288 -1357 288 -1357 288 -1357 b 292 -1368 289 -1357 291 -1363 b 313 -1512 306 -1415 313 -1464 b 292 -1648 313 -1560 306 -1605 b 288 -1660 289 -1654 288 -1660 b 288 -1660 288 -1660 288 -1660 b 292 -1671 289 -1660 291 -1665 b 313 -1814 306 -1719 313 -1766 b 250 -2040 313 -1897 291 -1977 b 232 -2062 238 -2057 236 -2059 b 221 -2065 230 -2063 225 -2065 b 200 -2045 210 -2065 201 -2057 b 200 -2043 200 -2044 200 -2044 b 208 -2026 200 -2037 202 -2034 b 269 -1826 249 -1966 269 -1897 b 153 -1544 269 -1726 230 -1625 b -9 -1472 115 -1506 58 -1481 b -21 -1471 -14 -1471 -19 -1471 l -24 -1471 l -24 -1343 l -24 -1215 l -20 -1215 b -1 -1229 -12 -1215 -4 -1221 b 142 -1424 13 -1270 74 -1353 b 257 -1582 196 -1478 228 -1524 b 264 -1594 261 -1589 264 -1594 l 264 -1594 b 265 -1582 264 -1594 264 -1589 b 270 -1525 268 -1562 270 -1544 b 153 -1243 270 -1424 228 -1321 b -9 -1170 115 -1203 58 -1178 b -21 -1168 -14 -1170 -19 -1168 l -24 -1168 l -24 -1041 l -24 -913 l -20 -913 b -1 -927 -12 -913 -4 -918 b 142 -1121 13 -967 74 -1050 b 257 -1281 196 -1175 228 -1221 b 264 -1292 261 -1286 264 -1292 l 264 -1292 b 265 -1279 264 -1292 264 -1286 b 270 -1222 268 -1261 270 -1242 b 153 -941 270 -1121 228 -1018 b -9 -867 115 -900 58 -875 b -21 -866 -14 -867 -19 -866 l -24 -866 l -24 -738 l -24 -610 l -20 -610 b -1 -624 -12 -610 -4 -616 b 142 -818 13 -664 74 -749 b 257 -978 196 -873 228 -918 b 264 -989 261 -984 264 -989 l 264 -989 b 265 -977 264 -989 264 -984 b 270 -920 268 -959 270 -939 b 153 -638 270 -818 228 -716 b -9 -564 115 -598 58 -573 b -21 -563 -14 -564 -19 -563 l -24 -563 l -24 -435 l -24 -308 l -20 -308 b -1 -322 -12 -308 -4 -313 b 142 -516 13 -363 74 -446 b 257 -675 196 -571 228 -616 b 264 -687 261 -681 264 -687 l 264 -687 b 265 -674 264 -687 264 -681 b 270 -617 268 -656 270 -637 b 153 -335 270 -516 228 -413 b -9 -262 115 -295 58 -270 b -21 -260 -14 -262 -19 -260 l -24 -260 l -24 -133 \"},\n\"v9c\":{\"x_min\":-166.0625,\"x_max\":-25.859375,\"ha\":0,\"o\":\"m -49 369 b -42 370 -46 369 -44 370 b -27 360 -36 370 -29 366 b -25 355 -27 359 -25 358 b -32 335 -25 351 -28 347 b -92 52 -66 248 -87 159 b -93 -1 -93 43 -93 20 b -92 -54 -93 -23 -93 -45 b -32 -337 -85 -162 -66 -251 b -25 -355 -27 -349 -25 -352 b -42 -371 -25 -365 -32 -371 b -61 -353 -50 -371 -51 -369 b -163 -63 -119 -262 -153 -165 b -166 -1 -166 -37 -166 -31 b -163 62 -166 30 -166 36 b -61 352 -153 163 -119 260 b -49 369 -54 365 -51 366 \"},\n\"v9e\":{\"x_min\":0,\"x_max\":607.0625,\"ha\":619,\"o\":\"m 243 631 b 250 632 246 632 249 632 b 270 620 259 632 268 628 l 272 616 l 272 201 l 272 -212 l 270 -216 b 251 -229 268 -224 259 -229 b 227 -215 243 -229 240 -229 l 151 -142 b 32 -16 81 -80 53 -49 b 0 84 9 18 0 52 b 111 199 0 149 42 199 b 137 197 119 199 127 198 b 228 151 168 191 197 177 l 231 148 l 231 383 b 232 620 231 616 231 616 b 243 631 234 624 238 630 m 168 131 b 152 133 163 133 157 133 b 107 102 130 133 111 120 b 106 86 107 97 106 91 b 111 41 106 73 108 56 b 227 -152 125 -13 171 -90 l 231 -156 l 231 -37 l 231 80 l 225 87 b 168 131 210 111 190 126 m 347 631 b 353 632 348 632 351 632 b 374 620 363 632 371 628 b 375 383 375 616 375 616 l 375 148 l 377 151 b 492 199 415 183 454 199 b 537 191 507 199 522 197 b 607 84 582 176 607 134 b 583 0 607 58 598 29 b 455 -142 562 -40 533 -72 l 378 -215 b 355 -229 364 -229 362 -229 b 334 -216 345 -229 337 -224 l 333 -212 l 333 201 l 333 616 l 334 620 b 347 631 337 624 341 630 m 465 131 b 451 133 461 133 455 133 b 445 133 449 133 446 133 b 379 87 419 129 396 113 l 375 80 l 375 -37 l 375 -156 l 378 -152 b 499 81 451 -72 499 20 l 499 83 b 465 131 499 113 490 126 \"},\n\"va3\":{\"x_min\":58.53125,\"x_max\":228.671875,\"ha\":294,\"o\":\"m 138 371 b 142 373 140 371 141 373 b 178 342 149 373 156 366 b 228 251 217 297 228 278 b 228 244 228 248 228 247 b 176 147 227 212 212 184 b 123 73 152 122 132 93 b 121 62 122 70 121 66 b 145 13 121 48 129 31 b 153 -2 151 6 153 1 b 149 -9 153 -5 152 -6 b 144 -11 148 -11 145 -11 b 129 -1 140 -11 136 -8 b 61 87 89 37 68 68 b 58 113 59 95 58 105 b 110 215 58 144 74 177 b 163 287 134 240 155 269 b 166 299 166 291 166 295 b 141 348 166 313 157 330 b 133 360 134 356 133 358 b 133 363 133 362 133 362 b 138 371 133 367 136 370 \"},\n\"va5\":{\"x_min\":0,\"x_max\":349.8125,\"ha\":357,\"o\":\"m 88 302 b 103 303 93 302 98 303 b 202 224 149 303 191 270 b 205 199 204 216 205 208 b 178 129 205 173 196 147 l 175 126 l 182 127 b 307 249 236 142 284 190 b 313 259 308 254 311 258 b 329 267 317 265 323 267 b 349 247 340 267 349 259 b 201 -263 349 242 204 -258 b 182 -273 197 -270 190 -273 b 163 -260 174 -273 166 -269 b 161 -256 161 -259 161 -258 b 217 -59 161 -248 170 -220 b 272 129 247 43 272 127 b 272 129 272 129 272 129 b 264 122 272 129 268 126 b 140 80 227 94 183 80 b 36 115 102 80 65 91 b 0 194 10 136 0 165 b 88 302 0 244 32 292 \"},\n\"va9\":{\"x_min\":-24.5,\"x_max\":314.421875,\"ha\":321,\"o\":\"m -24 -145 l -24 -5 l -20 -5 b 0 -23 -9 -5 -2 -12 b 27 -87 4 -38 14 -66 b 138 -220 53 -136 88 -177 b 235 -328 179 -255 208 -288 b 314 -592 287 -409 314 -501 b 292 -732 314 -639 307 -687 l 289 -742 l 294 -756 b 314 -896 307 -802 314 -849 b 292 -1035 314 -943 307 -991 l 289 -1045 l 294 -1057 b 314 -1197 307 -1104 314 -1152 b 292 -1338 314 -1246 307 -1292 l 289 -1347 l 294 -1360 b 314 -1500 307 -1407 314 -1454 b 273 -1689 314 -1565 300 -1628 b 250 -1712 265 -1710 261 -1712 b 228 -1691 236 -1712 228 -1704 l 228 -1685 l 234 -1675 b 270 -1507 258 -1621 270 -1564 b 98 -1193 270 -1381 209 -1261 b 40 -1174 76 -1179 58 -1174 b -10 -1189 24 -1174 8 -1178 b -20 -1192 -14 -1192 -16 -1192 l -24 -1192 l -24 -1052 l -24 -913 l -20 -913 b 0 -931 -9 -913 -2 -920 b 27 -995 4 -946 14 -974 b 138 -1128 53 -1043 88 -1085 b 257 -1275 190 -1172 228 -1220 b 262 -1283 259 -1279 262 -1283 l 262 -1283 b 269 -1249 264 -1282 268 -1260 b 270 -1206 270 -1233 270 -1220 b 98 -891 270 -1075 206 -957 b 40 -871 76 -877 58 -871 b -10 -886 24 -871 8 -875 b -20 -889 -14 -889 -16 -889 l -24 -889 l -24 -749 l -24 -610 l -20 -610 b 0 -628 -9 -610 -2 -617 b 27 -692 4 -644 14 -671 b 138 -825 53 -741 88 -782 b 257 -973 190 -870 228 -917 b 262 -981 259 -977 262 -981 l 262 -981 b 269 -946 264 -979 268 -957 b 270 -903 270 -931 270 -917 b 98 -588 270 -774 206 -655 b 40 -569 76 -574 58 -569 b -10 -584 24 -569 8 -574 b -20 -587 -14 -587 -16 -587 l -24 -587 l -24 -448 l -24 -308 l -20 -308 b 0 -326 -9 -308 -2 -315 b 27 -390 4 -341 14 -369 b 138 -523 53 -438 88 -480 b 257 -670 190 -567 228 -614 b 262 -678 259 -674 262 -678 b 262 -678 262 -678 262 -678 b 269 -644 264 -677 268 -656 b 270 -601 270 -628 270 -614 b 98 -285 270 -471 206 -352 b 40 -266 76 -273 58 -266 b -10 -281 24 -266 8 -272 b -20 -284 -14 -284 -16 -284 l -24 -284 l -24 -145 \"},\n\"vaa\":{\"x_min\":-1.359375,\"x_max\":752.703125,\"ha\":768,\"o\":\"m 490 985 b 504 986 495 986 500 986 b 604 907 551 986 593 954 b 607 884 607 900 607 892 b 581 813 607 857 597 831 l 578 810 l 583 811 b 710 932 638 827 687 873 b 714 943 711 936 713 942 b 730 952 720 949 725 952 b 752 931 741 952 752 943 b 200 -946 752 927 204 -941 b 182 -957 197 -953 190 -957 b 163 -945 174 -957 166 -953 b 161 -939 161 -942 161 -942 b 217 -743 161 -931 170 -904 b 272 -555 247 -639 272 -555 b 272 -555 272 -555 272 -555 b 264 -560 272 -555 268 -557 b 140 -603 227 -589 182 -603 b 36 -567 102 -603 65 -592 b -1 -487 12 -548 -1 -517 b 17 -427 -1 -466 5 -445 b 103 -380 38 -395 70 -380 b 191 -433 137 -380 172 -398 b 205 -484 201 -448 205 -466 b 178 -553 205 -509 196 -535 l 175 -557 l 182 -555 b 307 -435 236 -539 284 -494 b 372 -213 308 -430 372 -215 b 372 -213 372 -213 372 -213 b 364 -219 372 -213 368 -216 b 240 -262 328 -247 283 -262 b 137 -226 202 -262 166 -249 b 99 -145 112 -206 99 -176 b 118 -84 99 -124 106 -104 b 204 -38 138 -54 171 -38 b 292 -91 238 -38 273 -56 b 306 -141 302 -106 306 -124 b 279 -212 306 -167 296 -194 l 276 -215 l 281 -213 b 408 -93 336 -198 385 -151 b 473 129 409 -88 473 127 b 473 129 473 129 473 129 b 465 122 473 129 469 126 b 341 80 428 94 383 80 b 236 115 303 80 266 91 b 200 195 213 136 200 165 b 217 256 200 217 206 238 b 304 303 239 287 272 303 b 393 249 338 303 374 285 b 406 199 402 234 406 217 b 379 129 406 173 397 148 l 377 126 l 382 127 b 509 248 436 142 485 190 b 574 470 510 254 574 469 b 574 470 574 470 574 470 b 566 464 574 470 570 467 b 442 421 529 435 484 421 b 337 458 404 421 367 433 b 300 538 314 477 300 508 b 318 598 300 559 306 580 b 404 645 340 630 372 645 b 494 592 439 645 475 627 b 507 541 502 577 507 559 b 480 471 507 516 498 489 l 477 467 l 483 470 b 608 589 537 485 586 531 b 675 811 611 595 675 810 b 675 811 675 811 675 811 b 666 806 675 811 671 809 b 543 763 628 777 585 763 b 438 799 504 763 468 775 b 401 878 412 820 401 849 b 490 985 401 928 434 977 \"},\n\"vab\":{\"x_min\":0,\"x_max\":272.21875,\"ha\":278,\"o\":\"m 243 631 b 250 632 246 632 249 632 b 270 620 259 632 268 628 l 272 616 l 272 201 l 272 -212 l 270 -216 b 251 -229 268 -224 259 -229 b 227 -215 243 -229 240 -229 l 151 -142 b 32 -16 81 -80 53 -49 b 0 84 9 18 0 52 b 111 199 0 149 42 199 b 137 197 119 199 127 198 b 228 151 168 191 197 177 l 231 148 l 231 383 b 232 620 231 616 231 616 b 243 631 234 624 238 630 m 168 131 b 152 133 163 133 157 133 b 107 102 130 133 111 120 b 106 86 107 97 106 91 b 111 41 106 73 108 56 b 227 -152 125 -13 171 -90 l 231 -156 l 231 -37 l 231 80 l 225 87 b 168 131 210 111 190 126 \"},\n\"vad\":{\"x_min\":0,\"x_max\":873.828125,\"ha\":892,\"o\":\"m 0 0 l 0 703 l 81 703 l 164 703 l 164 0 l 164 -705 l 81 -705 l 0 -705 l 0 0 m 225 0 l 225 703 l 246 703 l 268 703 l 268 366 l 268 30 l 274 36 b 314 79 284 44 302 63 b 413 302 357 137 392 213 b 432 327 419 324 421 327 b 449 306 443 327 447 322 b 611 115 457 195 529 115 b 651 122 624 115 638 117 b 728 316 705 140 724 188 b 729 388 728 342 729 366 b 671 635 729 533 711 602 b 581 662 649 652 616 662 b 477 637 545 662 510 653 l 475 635 l 477 634 b 503 627 488 632 495 631 b 545 556 532 612 545 584 b 491 480 545 524 526 491 b 465 474 481 476 473 474 b 379 563 417 474 379 516 b 389 602 379 576 382 588 b 541 691 409 641 479 681 b 582 694 555 692 568 694 b 865 462 714 694 834 598 b 873 392 871 440 873 416 b 865 317 873 367 871 341 b 639 84 839 194 748 101 b 612 83 630 83 620 83 b 511 116 577 83 543 94 b 504 120 509 119 506 120 b 504 120 504 120 504 120 b 469 59 504 120 488 93 l 432 -1 l 469 -61 b 504 -122 488 -94 504 -122 b 504 -122 504 -122 504 -122 b 511 -117 506 -122 509 -120 b 612 -84 543 -95 577 -84 b 665 -91 630 -84 647 -87 b 869 -338 771 -122 850 -216 b 873 -392 872 -356 873 -374 b 798 -595 873 -469 847 -539 b 581 -695 741 -662 660 -695 b 406 -626 517 -695 454 -671 b 381 -563 389 -607 381 -585 b 465 -477 381 -519 413 -477 b 545 -559 514 -477 545 -519 b 503 -628 545 -587 532 -613 b 477 -635 495 -632 488 -634 l 475 -637 l 477 -638 b 581 -663 510 -655 545 -663 b 671 -637 616 -663 649 -653 b 729 -391 711 -603 729 -534 b 728 -317 729 -367 728 -344 b 623 -117 722 -173 698 -124 b 611 -116 619 -116 615 -116 b 449 -308 528 -116 457 -198 b 432 -328 447 -323 443 -328 b 413 -303 421 -328 419 -326 b 314 -80 392 -215 357 -138 b 274 -37 302 -65 284 -45 l 268 -31 l 268 -367 l 268 -705 l 246 -705 l 225 -705 l 225 0 \"},\n\"vb1\":{\"x_min\":78.9375,\"x_max\":485.921875,\"ha\":417,\"o\":\"m 362 378 b 378 380 367 380 372 380 b 472 348 415 380 453 367 b 485 315 481 338 485 327 b 462 273 485 298 477 281 b 439 267 454 269 446 267 b 398 290 424 267 409 274 b 344 319 385 309 364 319 b 281 269 315 319 289 301 b 279 262 280 266 279 262 b 276 256 279 260 277 258 b 274 249 276 254 274 251 b 238 127 273 248 257 192 b 201 4 217 61 201 5 b 166 -1 198 -1 200 -1 b 153 -1 163 -1 157 -1 b 141 -1 148 -1 144 -1 b 104 4 106 -1 107 -1 b 104 6 104 5 104 5 b 142 144 104 13 110 34 b 182 278 164 219 181 276 b 183 288 182 281 182 285 b 185 302 185 292 185 298 b 164 330 185 317 176 328 b 159 330 163 330 161 330 b 102 302 140 330 119 320 b 91 294 95 295 93 294 b 88 294 91 294 89 294 b 78 303 83 294 78 298 b 81 312 78 306 78 309 b 200 373 106 347 160 373 b 215 371 205 373 209 371 b 266 335 235 367 254 353 b 269 331 268 333 269 331 b 269 331 269 331 269 331 b 273 335 269 331 270 334 b 362 378 298 359 330 376 \"},\n\"vb3\":{\"x_min\":0,\"x_max\":227.3125,\"ha\":232,\"o\":\"m 91 213 b 100 215 93 215 96 215 b 227 58 167 215 224 144 b 227 52 227 56 227 54 b 61 -201 227 -43 164 -138 b 29 -216 44 -212 36 -216 b 23 -210 27 -216 24 -213 b 21 -205 21 -208 21 -206 b 34 -192 21 -201 25 -197 b 122 -55 89 -161 122 -106 b 104 6 122 -33 117 -12 l 103 9 l 96 9 b 4 79 57 9 17 38 b 0 112 1 90 0 101 b 91 213 0 163 36 209 \"},\n\"vb4\":{\"x_min\":-597.53125,\"x_max\":596.171875,\"ha\":608,\"o\":\"m -533 324 b -525 327 -530 326 -528 327 b -504 305 -514 327 -504 317 b -504 305 -504 305 -504 305 b -513 284 -504 299 -504 299 b -556 112 -541 226 -556 167 b -545 33 -556 84 -552 58 b -524 -20 -541 15 -532 -9 l -522 -23 l -491 15 l -413 111 b -355 174 -367 169 -363 174 b -351 174 -353 174 -352 174 b -254 86 -343 174 -348 179 b -168 -1 -208 37 -168 -1 b -100 84 -168 -1 -137 37 b -23 173 -28 173 -29 172 b -19 174 -21 174 -20 174 b -8 173 -14 174 -10 173 b 80 86 -5 172 13 151 b 166 -1 127 37 166 -1 b 235 84 166 -1 197 37 b 311 173 306 173 304 172 b 317 174 313 174 314 174 b 326 173 319 174 323 173 b 490 11 329 172 366 134 l 502 -1 l 530 34 b 568 76 560 72 563 74 b 575 77 570 77 573 77 b 596 56 586 77 596 68 b 594 48 596 54 596 51 b 417 -172 592 41 424 -166 b 405 -176 415 -174 409 -176 b 396 -174 401 -176 398 -176 b 307 -87 393 -173 372 -152 b 221 -1 259 -38 221 -1 b 152 -86 221 -1 190 -38 b 76 -176 81 -174 83 -173 b 70 -176 74 -176 73 -176 b 61 -174 66 -176 62 -174 b -27 -87 58 -173 38 -152 b -114 -1 -74 -38 -112 -1 b -182 -86 -114 -1 -145 -38 b -258 -176 -253 -174 -253 -173 b -264 -176 -259 -176 -262 -176 b -274 -174 -268 -176 -272 -174 b -438 -11 -277 -173 -348 -102 l -449 0 l -479 -37 b -524 -80 -513 -80 -514 -80 l -524 -80 b -553 -52 -534 -80 -540 -74 b -597 109 -583 -8 -597 48 b -560 280 -597 165 -585 224 b -533 324 -548 310 -540 322 \"},\n\"vb6\":{\"x_min\":0,\"x_max\":556.6875,\"ha\":568,\"o\":\"m 289 545 b 298 546 292 545 295 546 b 318 533 306 546 315 541 b 319 428 319 530 319 528 l 319 327 l 334 327 b 526 223 412 326 485 285 b 543 172 537 206 543 190 b 447 76 543 122 503 76 b 445 76 446 76 446 76 b 359 165 394 77 359 119 b 368 205 359 179 362 192 b 441 251 382 233 412 251 b 455 249 446 251 451 251 b 460 248 458 249 460 248 b 460 248 460 248 460 248 b 454 254 460 249 458 251 b 334 295 419 280 378 294 l 319 295 l 319 4 l 319 -287 l 321 -285 b 328 -285 322 -285 325 -285 b 524 -99 424 -277 507 -198 b 541 -79 526 -84 530 -79 b 556 -97 551 -79 556 -84 b 548 -133 556 -105 553 -117 b 334 -317 521 -233 434 -306 b 322 -319 329 -317 323 -317 l 319 -319 l 319 -424 b 319 -471 319 -444 319 -459 b 313 -541 319 -544 318 -535 b 298 -548 308 -545 303 -548 b 279 -534 289 -548 281 -542 b 277 -424 277 -531 277 -530 l 277 -317 l 273 -317 b 13 -95 153 -305 51 -217 b 0 2 4 -62 0 -29 b 182 295 0 126 66 238 b 274 324 210 309 249 320 l 277 324 l 277 427 b 279 533 277 528 277 530 b 289 545 281 538 285 542 m 277 2 b 277 291 277 161 277 291 b 268 288 277 291 273 290 b 144 1 179 265 144 184 b 276 -284 144 -199 175 -267 l 277 -285 l 277 2 \"},\n\"vb7\":{\"x_min\":-176.9375,\"x_max\":251.8125,\"ha\":257,\"o\":\"m -8 631 b -1 632 -6 632 -4 632 b 19 620 8 632 16 628 b 20 503 20 616 20 614 b 20 391 20 442 20 391 b 84 424 20 391 49 406 l 147 456 l 152 456 b 153 456 153 456 153 456 b 175 435 166 456 175 446 b 172 427 175 433 174 430 b 92 380 170 420 172 421 l 20 342 l 20 245 l 20 148 l 21 151 b 137 199 59 183 99 199 b 182 191 152 199 167 197 b 251 84 227 176 251 134 b 228 0 251 58 243 29 b 100 -142 206 -40 178 -72 l 23 -215 b 0 -229 9 -229 6 -229 b -20 -216 -9 -229 -17 -224 b -21 54 -21 -212 -21 -212 b -21 322 -21 201 -21 322 b -85 290 -21 322 -50 308 l -148 256 l -153 256 b -155 256 -155 256 -155 256 b -176 277 -167 256 -176 266 b -174 285 -176 280 -175 283 b -93 333 -171 294 -174 292 l -21 370 l -21 494 b -20 620 -21 616 -21 616 b -8 631 -17 624 -13 630 m 110 131 b 96 133 106 133 100 133 b 89 133 93 133 91 133 b 24 87 63 129 40 113 l 20 80 l 20 -37 l 20 -156 l 23 -152 b 144 81 96 -72 144 20 l 144 83 b 110 131 144 113 134 126 \"},\n\"vb9\":{\"x_min\":-122.5,\"x_max\":121.140625,\"ha\":124,\"o\":\"m -16 145 b 0 147 -10 147 -5 147 b 121 -1 66 147 121 77 b 114 -49 121 -16 118 -33 b -1 -148 95 -112 47 -148 b -85 -106 -31 -148 -61 -134 b -122 -1 -110 -76 -122 -38 b -16 145 -122 68 -81 134 m 12 111 b 0 113 8 113 4 113 b -68 22 -29 113 -61 73 b -70 0 -69 15 -70 6 b -13 -113 -70 -49 -47 -98 b -1 -115 -9 -115 -5 -115 b 63 -40 24 -115 53 -83 b 68 -1 66 -27 68 -15 b 12 111 68 48 46 97 \"},\n\"vba\":{\"x_min\":-118.421875,\"x_max\":597.53125,\"ha\":381,\"o\":\"m 460 574 b 464 574 461 574 462 574 b 488 574 470 574 481 574 b 500 573 491 574 498 574 b 594 503 543 570 588 538 b 597 488 596 498 597 494 b 528 417 597 449 564 417 b 502 423 519 417 510 419 b 465 481 477 434 465 458 b 488 528 465 499 472 516 b 490 530 490 530 490 530 b 490 530 490 530 490 530 b 468 517 488 530 475 523 b 349 340 419 485 377 420 b 347 330 348 334 347 330 b 383 328 347 328 363 328 b 428 326 423 328 424 328 b 442 302 438 320 442 312 b 430 281 442 294 438 285 b 385 276 424 277 426 276 l 377 276 l 332 276 l 330 269 b 178 -117 303 126 250 -9 b 1 -249 129 -194 69 -237 b -20 -251 -6 -251 -13 -251 b -114 -187 -65 -251 -100 -227 b -118 -156 -117 -177 -118 -166 b -51 -84 -118 -116 -91 -84 b -31 -87 -46 -84 -39 -86 b 16 -152 0 -95 16 -124 b -12 -205 16 -173 8 -194 b -16 -208 -14 -206 -16 -208 b -14 -208 -16 -208 -14 -208 b -9 -206 -14 -208 -12 -208 b 74 -124 23 -197 54 -166 b 172 224 98 -79 125 22 b 185 276 178 252 183 274 b 185 276 185 276 185 276 b 141 276 185 276 181 276 b 91 280 96 276 96 276 b 77 302 83 285 77 294 b 91 326 77 312 83 320 b 148 328 95 328 96 328 l 198 330 l 202 341 b 460 574 249 473 351 566 \"},\n\"vbf\":{\"x_min\":-53.078125,\"x_max\":513.140625,\"ha\":485,\"o\":\"m 185 383 b 196 384 187 383 191 384 b 277 334 230 384 259 365 b 288 301 281 324 288 306 b 288 297 288 298 288 297 b 294 302 289 297 291 299 b 394 370 323 338 367 367 b 404 371 398 370 401 371 b 510 272 453 371 498 328 b 513 237 513 262 513 251 b 507 172 513 217 511 192 b 326 -34 487 59 412 -26 b 314 -36 322 -36 318 -36 b 274 -24 298 -36 283 -31 l 265 -16 b 224 44 246 -1 232 20 b 223 49 224 47 223 49 b 223 49 223 49 223 49 b 149 -197 221 48 149 -194 b 149 -198 149 -197 149 -198 b 170 -210 149 -202 155 -205 b 187 -215 174 -210 175 -212 b 204 -231 201 -219 204 -222 b 197 -245 204 -240 202 -242 l 194 -248 l 76 -248 l -42 -248 l -46 -245 b -53 -231 -51 -242 -53 -240 b -35 -215 -53 -222 -49 -217 b -13 -210 -21 -212 -20 -212 b -6 -208 -10 -209 -8 -208 b 0 -206 -6 -208 -2 -206 b 25 -188 13 -201 21 -195 b 163 280 28 -183 163 276 b 166 291 163 283 164 287 b 167 302 167 295 167 299 b 155 324 167 315 161 324 b 155 324 155 324 155 324 b 65 230 125 322 85 280 b 53 215 61 217 58 215 b 51 215 53 215 51 215 b 42 224 46 215 42 217 b 57 263 42 231 47 244 b 140 360 77 305 104 337 b 152 370 144 365 149 369 b 185 383 157 376 172 381 m 374 306 b 366 308 371 308 368 308 b 300 273 348 308 321 294 b 284 254 288 262 287 259 b 280 242 283 249 281 245 b 257 169 279 240 270 213 l 236 98 l 236 93 b 251 48 238 77 243 61 b 279 27 258 37 272 27 b 281 27 279 27 280 27 b 291 31 281 27 287 30 b 396 170 334 52 378 109 b 406 247 402 197 406 224 b 401 277 406 259 405 270 b 374 306 397 290 383 303 \"},\n\"vc3\":{\"x_min\":-10.890625,\"x_max\":299.4375,\"ha\":294,\"o\":\"m 136 460 b 142 462 137 462 140 462 b 166 449 152 462 161 456 b 171 428 168 446 168 445 b 288 131 194 322 238 209 b 298 115 295 120 296 117 b 299 106 298 112 299 109 b 273 81 299 91 287 81 b 255 86 268 81 261 83 b 155 116 225 104 183 116 l 152 116 l 149 108 b 141 83 148 102 144 91 b 134 48 137 69 134 58 b 149 9 134 34 140 24 b 153 -1 152 5 153 1 b 149 -9 153 -5 152 -6 b 144 -11 148 -11 147 -11 b 122 2 138 -11 133 -6 b 95 61 104 20 95 38 b 107 108 95 74 99 90 b 108 113 107 111 108 112 b 107 113 108 113 108 113 b 102 113 106 113 104 113 b 31 86 76 108 53 98 b 14 80 24 81 20 80 b -10 106 0 80 -10 91 b 0 131 -10 115 -9 116 b 115 430 49 209 91 317 b 136 460 119 451 123 456 \"},\n\"vd0\":{\"x_min\":-10.890625,\"x_max\":299.4375,\"ha\":294,\"o\":\"m 44 174 b 51 174 47 174 49 174 b 68 173 55 174 61 174 l 287 112 l 551 40 b 615 20 617 22 609 23 b 626 0 622 16 626 8 b 615 -22 626 -9 622 -18 b 613 -23 613 -23 613 -23 b 613 -23 613 -23 613 -23 b 287 -113 613 -24 597 -29 l 68 -174 b 53 -176 61 -176 57 -176 b 39 -172 47 -176 43 -174 b 27 -151 31 -167 27 -159 b 39 -129 27 -141 31 -133 b 230 -74 43 -124 20 -131 l 370 -36 l 468 -9 b 498 0 484 -4 498 -1 b 468 8 498 0 484 2 l 370 34 l 230 73 b 40 126 28 129 43 124 b 27 149 31 131 27 140 b 44 174 27 161 34 170 m 205 110 l 205 300 b 205 330 245 330 245 300 l 245 300 l 245 -300 b 245 -330 205 -330 205 -300 l 205 -300 l 205 110 l 345 90 m 345 90 l 345 330 b 345 360 385 360 385 330 l 385 330 l 385 -270 b 385 -300 345 -300 345 -270 l 345 -270 l 345 90 \"},\n\"vd1\":{\"x_min\":-20,\"x_max\":320,\"ha\":257,\"o\":\"m -8 200 b -8 210 8 200 16 200 l 20 148 -199 l 23 -615 b 0 -629 9 -629 6 -629 l -21 -612 l -21 -201 l -21 216 l -20 200 m 16 200 l 310 0 l 240 0 l 16 140 l 16 -120 l 240 0 l 310 0 l 16 -200 \"},\n\"vd2\":{\"x_min\":0,\"x_max\":430.75,\"ha\":386,\"o\":\"m 0 200 l 0 -200 l 430 -200 l 430 200 l 0 200 \"},\n\"vd3\":{\"x_min\":0,\"x_max\":430.75,\"ha\":386,\"o\":\"m 0 200 l 0 -200 l 430 -200 l 430 200 l 0 200 l 50 150 l 380 150 l 380 -150 l 50 -150 l 50 150 \"},\n\"vd4\":{\"x_min\":0,\"x_max\":430.75,\"ha\":360,\"o\":\"m 0 150 l 0 -150 l 430 -150 l 430 150 l 0 150 \"},\n\"vd5\":{\"x_min\":0,\"x_max\":430.75,\"ha\":360,\"o\":\"m 0 150 l 0 -150 l 430 -150 l 430 150 l 0 150 l 50 100 l 380 100 l 380 -100 l 50 -100 l 50 100\"},\n\"vd6\":{\"x_min\":0,\"x_max\":430.75,\"ha\":360,\"o\":\"m -146 537 b -138 538 -143 538 -141 538 b -118 525 -129 538 -121 533 b -117 390 -117 522 -117 521 b -115 259 -117 268 -117 259 b -115 259 -115 259 -115 259 b -59 272 -104 263 -62 272 b -39 259 -50 272 -42 267 b -37 209 -38 257 -37 233 b -39 159 -37 185 -38 162 b -85 138 -43 149 -44 149 l -117 131 l -117 21 b -115 -88 -117 -80 -117 -88 b -115 -88 -115 -88 -115 -88 b -59 -75 -104 -84 -62 -75 b -44 -81 -52 -75 -48 -77 b -38 -124 -38 -87 -38 -85 b -38 -138 -38 -124 -38 -138 b -38 -152 -38 -138 -38 -152 b -44 -195 -38 -191 -38 -190 b -85 -209 -48 -200 -48 -200 l -117 -217 l -117 -349 b -118 -486 -117 -481 -117 -482 b -138 -499 -121 -494 -129 -499 b -153 -493 -143 -499 -149 -497 b -159 -415 -158 -487 -159 -496 b -159 -355 -159 -398 -159 -379 b -159 -227 -159 -284 -159 -227 b -205 -238 -159 -227 -180 -232 b -250 -249 -230 -244 -250 -249 b -251 -386 -251 -249 -251 -311 b -252 -525 -251 -521 -251 -522 b -272 -538 -255 -534 -264 -538 b -287 -532 -277 -538 -283 -536 b -293 -452 -292 -527 -293 -536 b -293 -391 -293 -436 -293 -415 b -294 -260 -293 -269 -293 -260 b -294 -260 -294 -260 -294 -260 b -348 -272 -306 -264 -345 -272 b -368 -259 -357 -272 -365 -267 b -369 -209 -369 -257 -369 -233 b -368 -159 -369 -185 -369 -162 b -323 -139 -364 -149 -362 -148 l -293 -131 l -293 -22 b -294 87 -293 80 -293 87 b -294 87 -294 87 -294 87 b -348 75 -306 84 -345 75 b -368 88 -357 75 -365 80 b -369 138 -369 91 -369 114 b -368 188 -369 162 -369 186 b -323 209 -364 198 -362 199 l -293 216 l -293 349 b -292 486 -293 481 -293 482 b -272 499 -288 494 -280 499 b -257 493 -266 499 -261 497 b -251 414 -251 487 -251 496 b -251 354 -251 398 -251 378 b -251 226 -251 284 -251 226 b -205 238 -250 226 -230 231 b -159 249 -180 244 -159 249 b -159 385 -159 249 -159 310 b -157 525 -159 521 -159 522 b -146 537 -156 530 -151 535 z m -159 11 b -159 120 -159 98 -159 120 l -159 120 b -175 116 -160 120 -167 119 b -221 105 -184 114 -204 109 l -251 98 l -251 -12 b -251 -121 -251 -72 -251 -121 b -205 -110 -250 -121 -230 -116 b -159 -99 -180 -104 -159 -99 b -159 11 -159 -99 -159 -49 z m 89 517 b 97 519 92 518 94 519 b 117 505 106 519 114 513 b 119 376 119 502 119 501 l 119 249 l 145 258 b 176 267 169 266 172 267 b 177 267 176 267 177 267 b 196 255 186 267 192 263 l 197 252 l 197 205 b 197 181 197 195 197 187 b 193 149 197 153 197 153 b 152 131 190 144 187 143 l 119 120 l 119 10 b 119 -100 119 -62 119 -100 b 145 -91 120 -100 131 -96 b 173 -82 159 -86 171 -82 b 176 -81 174 -81 175 -81 b 196 -94 185 -81 193 -87 b 198 -151 197 -97 198 -125 b 197 -194 198 -172 197 -192 b 153 -218 193 -203 192 -204 l 119 -230 l 119 -367 l 118 -504 l 117 -507 b 97 -519 113 -514 105 -519 b 82 -512 92 -519 87 -517 b 76 -434 77 -507 76 -516 b 76 -374 76 -418 76 -398 b 76 -245 76 -303 76 -245 b 52 -254 76 -245 65 -249 b 19 -263 34 -260 25 -263 b 6 -257 13 -263 10 -261 b 0 -214 0 -251 0 -253 b 0 -200 0 -210 0 -205 b 0 -188 0 -196 0 -192 b 6 -143 0 -147 0 -149 b 46 -126 10 -139 10 -139 l 76 -115 l 76 -5 b 76 106 76 56 76 106 b 51 98 76 106 64 102 b 18 89 34 92 25 89 b 6 95 13 89 10 91 b 0 139 0 101 0 99 b 0 153 0 143 0 148 b 0 179 0 163 0 172 b 44 225 0 215 3 211 l 76 236 l 76 369 b 78 505 76 501 76 502 b 89 517 80 510 85 515 z \"},\n\"vd7\":{\"x_min\":0,\"x_max\":430.75,\"ha\":360,\"o\":\"m 283 633 b 291 634 286 634 289 634 b 311 621 300 634 308 629 b 313 505 313 618 313 617 b 313 393 313 443 313 393 b 378 425 313 393 343 407 l 443 458 l 448 458 b 449 458 449 458 449 458 b 471 437 462 458 471 448 b 469 429 471 434 470 432 b 387 382 466 421 469 423 l 313 344 l 313 247 l 313 150 l 315 152 b 433 201 353 184 394 201 b 479 193 448 201 464 198 b 549 86 524 177 549 135 b 526 1 549 59 541 29 b 395 -143 504 -39 475 -71 b 316 -214 351 -182 341 -191 b 292 -229 302 -228 300 -229 b 272 -216 283 -229 275 -224 b 271 55 271 -212 271 -212 b 270 323 271 203 270 323 b 205 291 270 323 241 308 l 140 258 l 135 258 b 134 258 135 258 134 258 b 112 279 121 258 112 267 b 114 287 112 281 113 284 b 196 334 117 295 114 293 l 271 371 l 271 495 b 272 621 271 617 271 618 b 283 633 274 626 279 631 z m 404 133 b 391 134 400 134 395 134 b 384 134 388 134 386 134 b 318 88 358 130 335 114 l 313 81 l 313 -37 l 313 -156 l 316 -152 b 439 83 391 -71 439 22 l 439 84 b 404 133 439 115 430 128 z m -8 633 l -8 633 b 0 634 -6 634 -3 634 b 20 621 8 634 17 629 b 21 384 21 618 21 617 l 21 150 l 24 152 b 141 201 62 184 102 201 b 187 193 157 201 172 198 b 257 86 232 177 257 135 b 234 1 257 59 250 29 b 103 -143 212 -39 183 -71 b 24 -214 60 -182 49 -191 b 0 -229 10 -228 8 -229 b -20 -216 -9 -229 -17 -224 l -21 -212 l -21 203 l -21 618 l -20 621 b -8 633 -18 626 -13 631 z m 113 133 l 113 133 b 99 134 109 134 103 134 b 93 134 97 134 94 134 b 26 88 66 130 43 114 l 21 81 l 21 -37 l 21 -156 l 25 -152 b 148 83 99 -71 148 22 l 148 84 b 113 133 148 115 138 128 z \"},\n},\n\"cssFontWeight\":\"normal\",\"ascender\":1903,\"underlinePosition\":-125,\"cssFontStyle\":\"normal\",\"boundingBox\":{\"yMin\":-2065.375,\"xMin\":-695.53125,\"yMax\":1901.578125,\"xMax\":1159.671875},\n\"resolution\":1000,\"descender\":-2066,\"familyName\":\"VexFlow-18\",\"lineHeight\":4093,\"underlineThickness\":50\n};\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n\nimport { Vex } from './vex';\nimport { Element } from './element';\nimport { BoundingBoxComputation } from './boundingboxcomputation';\nimport { BoundingBox } from './boundingbox';\nimport { Font } from './fonts/vexflow_font';\n\nfunction processOutline(outline, originX, originY, scaleX, scaleY, outlineFns) {\n  let command;\n  let x;\n  let y;\n  let i = 0;\n\n  function nextX() { return originX + outline[i++] * scaleX; }\n  function nextY() { return originY + outline[i++] * scaleY; }\n\n  while (i < outline.length) {\n    command = outline[i++];\n    switch (command) {\n      case 'm':\n      case 'l':\n        outlineFns[command](nextX(), nextY());\n        break;\n      case 'q':\n        x = nextX();\n        y = nextY();\n        outlineFns.q(nextX(), nextY(), x, y);\n        break;\n      case 'b':\n        x = nextX();\n        y = nextY();\n        outlineFns.b(nextX(), nextY(), nextX(), nextY(), x, y);\n        break;\n      default:\n        break;\n    }\n  }\n}\n\nexport class Glyph extends Element {\n  /* Static methods used to implement loading / unloading of glyphs */\n  static loadMetrics(font, code, cache) {\n    const glyph = font.glyphs[code];\n    if (!glyph) {\n      throw new Vex.RERR('BadGlyph', `Glyph ${code} does not exist in font.`);\n    }\n\n    const x_min = glyph.x_min;\n    const x_max = glyph.x_max;\n    const ha = glyph.ha;\n\n    let outline;\n\n    if (glyph.o) {\n      if (cache) {\n        if (glyph.cached_outline) {\n          outline = glyph.cached_outline;\n        } else {\n          outline = glyph.o.split(' ');\n          glyph.cached_outline = outline;\n        }\n      } else {\n        if (glyph.cached_outline) delete glyph.cached_outline;\n        outline = glyph.o.split(' ');\n      }\n\n      return {\n        x_min,\n        x_max,\n        ha,\n        outline,\n      };\n    } else {\n      throw new Vex.RERR('BadGlyph', `Glyph ${code} has no outline defined.`);\n    }\n  }\n\n  /**\n   * A quick and dirty static glyph renderer. Renders glyphs from the default\n   * font defined in Vex.Flow.Font.\n   *\n   * @param {!Object} ctx The canvas context.\n   * @param {number} x_pos X coordinate.\n   * @param {number} y_pos Y coordinate.\n   * @param {number} point The point size to use.\n   * @param {string} val The glyph code in Vex.Flow.Font.\n   * @param {boolean} nocache If set, disables caching of font outline.\n   */\n  static renderGlyph(ctx, x_pos, y_pos, point, val, nocache) {\n    const scale = point * 72.0 / (Font.resolution * 100.0);\n    const metrics = Glyph.loadMetrics(Font, val, !nocache);\n    Glyph.renderOutline(ctx, metrics.outline, scale, x_pos, y_pos);\n  }\n\n  static renderOutline(ctx, outline, scale, x_pos, y_pos) {\n    ctx.beginPath();\n    ctx.moveTo(x_pos, y_pos);\n    processOutline(outline, x_pos, y_pos, scale, -scale, {\n      m: ctx.moveTo.bind(ctx),\n      l: ctx.lineTo.bind(ctx),\n      q: ctx.quadraticCurveTo.bind(ctx),\n      b: ctx.bezierCurveTo.bind(ctx),\n    });\n    ctx.fill();\n  }\n\n  static getOutlineBoundingBox(outline, scale, x_pos, y_pos) {\n    const bboxComp = new BoundingBoxComputation();\n\n    processOutline(outline, x_pos, y_pos, scale, -scale, {\n      m: bboxComp.addPoint.bind(bboxComp),\n      l: bboxComp.addPoint.bind(bboxComp),\n      q: bboxComp.addQuadraticCurve.bind(bboxComp),\n      b: bboxComp.addBezierCurve.bind(bboxComp),\n    });\n\n    return new BoundingBox(\n      bboxComp.x1,\n      bboxComp.y1,\n      bboxComp.width(),\n      bboxComp.height()\n    );\n  }\n\n  /**\n   * @constructor\n   */\n  constructor(code, point, options) {\n    super();\n    this.setAttribute('type', 'Glyph');\n\n    this.code = code;\n    this.point = point;\n    this.options = {\n      cache: true,\n      font: Font,\n    };\n\n    this.metrics = null;\n    this.x_shift = 0;\n    this.y_shift = 0;\n\n    this.originShift = {\n      x: 0,\n      y: 0,\n    };\n\n    if (options) {\n      this.setOptions(options);\n    } else {\n      this.reset();\n    }\n  }\n\n  setOptions(options) {\n    Vex.Merge(this.options, options);\n    this.reset();\n  }\n\n  setPoint(point) { this.point = point; return this; }\n  setStave(stave) { this.stave = stave; return this; }\n  setXShift(x_shift) { this.x_shift = x_shift; return this; }\n  setYShift(y_shift) { this.y_shift = y_shift; return this; }\n\n  reset() {\n    this.scale = this.point * 72 / (this.options.font.resolution * 100);\n    this.metrics = Glyph.loadMetrics(\n      this.options.font,\n      this.code,\n      this.options.cache\n    );\n    this.bbox = Glyph.getOutlineBoundingBox(\n      this.metrics.outline,\n      this.scale,\n      0,\n      0\n    );\n  }\n\n  getMetrics() {\n    if (!this.metrics) {\n      throw new Vex.RuntimeError('BadGlyph', `Glyph ${this.code} is not initialized.`);\n    }\n\n    return {\n      x_min: this.metrics.x_min * this.scale,\n      x_max: this.metrics.x_max * this.scale,\n      width: this.bbox.getW(),\n      height: this.bbox.getH(),\n    };\n  }\n\n  setOriginX(x) {\n    const { bbox } = this;\n    const originX = Math.abs(bbox.getX() / bbox.getW());\n    const xShift = (x - originX) * bbox.getW();\n    this.originShift.x = -xShift;\n  }\n\n  setOriginY(y) {\n    const { bbox } = this;\n    const originY = Math.abs(bbox.getY() / bbox.getH());\n    const yShift = (y - originY) * bbox.getH();\n    this.originShift.y = -yShift;\n  }\n\n  setOrigin(x, y) {\n    this.setOriginX(x);\n    this.setOriginY(y);\n  }\n\n  render(ctx, x, y) {\n    if (!this.metrics) {\n      throw new Vex.RuntimeError('BadGlyph', `Glyph ${this.code} is not initialized.`);\n    }\n\n    const outline = this.metrics.outline;\n    const scale = this.scale;\n\n    this.setRendered();\n    this.applyStyle(ctx);\n    Glyph.renderOutline(ctx, outline, scale, x + this.originShift.x, y + this.originShift.y);\n    this.restoreStyle(ctx);\n  }\n\n  renderToStave(x) {\n    this.checkContext();\n\n    if (!this.metrics) {\n      throw new Vex.RuntimeError('BadGlyph', `Glyph ${this.code} is not initialized.`);\n    }\n\n    if (!this.stave) {\n      throw new Vex.RuntimeError('GlyphError', 'No valid stave');\n    }\n\n    const outline = this.metrics.outline;\n    const scale = this.scale;\n\n    this.setRendered();\n    this.applyStyle();\n    Glyph.renderOutline(this.context, outline, scale,\n      x + this.x_shift, this.stave.getYForGlyphs() + this.y_shift);\n    this.restoreStyle();\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n\n/* eslint-disable key-spacing */\n\nimport { Vex } from './vex';\nimport { Fraction } from './fraction';\nimport { Glyph } from './glyph';\n\nconst Flow = {\n  STEM_WIDTH: 1.5,\n  STEM_HEIGHT: 35,\n  STAVE_LINE_THICKNESS: 1,\n  RESOLUTION: 16384,\n  DEFAULT_NOTATION_FONT_SCALE: 39,\n  DEFAULT_TABLATURE_FONT_SCALE: 39,\n  SLASH_NOTEHEAD_WIDTH: 15,\n\n  // HACK:\n  // Since text origins are positioned at the baseline, we must\n  // compensate for the ascender of the text. Of course, 1 staff space is\n  // a very poor approximation.\n  //\n  // This will be deprecated in the future. This is a temporary solution until\n  // we have more robust text metrics.\n  TEXT_HEIGHT_OFFSET_HACK: 1,\n\n  /* Kerning (DEPRECATED) */\n  IsKerned: true,\n};\n\n\nFlow.clefProperties = clef => {\n  if (!clef) throw new Vex.RERR('BadArgument', 'Invalid clef: ' + clef);\n\n  const props = Flow.clefProperties.values[clef];\n  if (!props) throw new Vex.RERR('BadArgument', 'Invalid clef: ' + clef);\n\n  return props;\n};\n\nFlow.clefProperties.values = {\n  'treble': { line_shift: 0 },\n  'bass': { line_shift: 6 },\n  'tenor': { line_shift: 4 },\n  'alto': { line_shift: 3 },\n  'soprano': { line_shift: 1 },\n  'percussion': { line_shift: 0 },\n  'mezzo-soprano': { line_shift: 2 },\n  'baritone-c': { line_shift: 5 },\n  'baritone-f': { line_shift: 5 },\n  'subbass': { line_shift: 7 },\n  'french': { line_shift: -1 },\n};\n\n/*\n  Take a note in the format \"Key/Octave\" (e.g., \"C/5\") and return properties.\n\n  The last argument, params, is a struct the currently can contain one option,\n  octave_shift for clef ottavation (0 = default; 1 = 8va; -1 = 8vb, etc.).\n*/\nFlow.keyProperties = (key, clef, params) => {\n  if (clef === undefined) {\n    clef = 'treble';\n  }\n\n  const options = { octave_shift: 0 };\n\n  if (typeof params === 'object') {\n    Vex.Merge(options, params);\n  }\n\n  const pieces = key.split('/');\n\n  if (pieces.length < 2) {\n    throw new Vex.RERR('BadArguments', `Key must have note + octave and an optional glyph: ${key}`);\n  }\n\n  const k = pieces[0].toUpperCase();\n  const value = Flow.keyProperties.note_values[k];\n  if (!value) throw new Vex.RERR('BadArguments', 'Invalid key name: ' + k);\n  if (value.octave) pieces[1] = value.octave;\n\n  let octave = parseInt(pieces[1], 10);\n\n  // Octave_shift is the shift to compensate for clef 8va/8vb.\n  octave += -1 * options.octave_shift;\n\n  const base_index = (octave * 7) - (4 * 7);\n  let line = (base_index + value.index) / 2;\n  line += Flow.clefProperties(clef).line_shift;\n\n  let stroke = 0;\n\n  if (line <= 0 && (((line * 2) % 2) === 0)) stroke = 1;  // stroke up\n  if (line >= 6 && (((line * 2) % 2) === 0)) stroke = -1; // stroke down\n\n  // Integer value for note arithmetic.\n  const int_value = typeof (value.int_val) !== 'undefined'\n    ? (octave * 12) + value.int_val\n    : null;\n\n  /* Check if the user specified a glyph. */\n  const code = value.code;\n  const shift_right = value.shift_right;\n  let extraProps = {};\n  if (pieces.length > 2 && pieces[2]) {\n    const glyph_name = pieces[2].toUpperCase();\n    extraProps = Flow.keyProperties.customNoteHeads[glyph_name] || {};\n  }\n\n  return {\n    key: k,\n    octave,\n    line,\n    int_value,\n    accidental: value.accidental,\n    code,\n    stroke,\n    shift_right,\n    displaced: false,\n    ...extraProps,\n  };\n};\n\nFlow.keyProperties.note_values = {\n  'C': { index: 0, int_val: 0, accidental: null },\n  'CN': { index: 0, int_val: 0, accidental: 'n' },\n  'C#': { index: 0, int_val: 1, accidental: '#' },\n  'C##': { index: 0, int_val: 2, accidental: '##' },\n  'CB': { index: 0, int_val: -1, accidental: 'b' },\n  'CBB': { index: 0, int_val: -2, accidental: 'bb' },\n  'D': { index: 1, int_val: 2, accidental: null },\n  'DN': { index: 1, int_val: 2, accidental: 'n' },\n  'D#': { index: 1, int_val: 3, accidental: '#' },\n  'D##': { index: 1, int_val: 4, accidental: '##' },\n  'DB': { index: 1, int_val: 1, accidental: 'b' },\n  'DBB': { index: 1, int_val: 0, accidental: 'bb' },\n  'E': { index: 2, int_val: 4, accidental: null },\n  'EN': { index: 2, int_val: 4, accidental: 'n' },\n  'E#': { index: 2, int_val: 5, accidental: '#' },\n  'E##': { index: 2, int_val: 6, accidental: '##' },\n  'EB': { index: 2, int_val: 3, accidental: 'b' },\n  'EBB': { index: 2, int_val: 2, accidental: 'bb' },\n  'F': { index: 3, int_val: 5, accidental: null },\n  'FN': { index: 3, int_val: 5, accidental: 'n' },\n  'F#': { index: 3, int_val: 6, accidental: '#' },\n  'F##': { index: 3, int_val: 7, accidental: '##' },\n  'FB': { index: 3, int_val: 4, accidental: 'b' },\n  'FBB': { index: 3, int_val: 3, accidental: 'bb' },\n  'G': { index: 4, int_val: 7, accidental: null },\n  'GN': { index: 4, int_val: 7, accidental: 'n' },\n  'G#': { index: 4, int_val: 8, accidental: '#' },\n  'G##': { index: 4, int_val: 9, accidental: '##' },\n  'GB': { index: 4, int_val: 6, accidental: 'b' },\n  'GBB': { index: 4, int_val: 5, accidental: 'bb' },\n  'A': { index: 5, int_val: 9, accidental: null },\n  'AN': { index: 5, int_val: 9, accidental: 'n' },\n  'A#': { index: 5, int_val: 10, accidental: '#' },\n  'A##': { index: 5, int_val: 11, accidental: '##' },\n  'AB': { index: 5, int_val: 8, accidental: 'b' },\n  'ABB': { index: 5, int_val: 7, accidental: 'bb' },\n  'B': { index: 6, int_val: 11, accidental: null },\n  'BN': { index: 6, int_val: 11, accidental: 'n' },\n  'B#': { index: 6, int_val: 12, accidental: '#' },\n  'B##': { index: 6, int_val: 13, accidental: '##' },\n  'BB': { index: 6, int_val: 10, accidental: 'b' },\n  'BBB': { index: 6, int_val: 9, accidental: 'bb' },\n  'R': { index: 6, int_val: 9, rest: true }, // Rest\n  'X': {\n    index: 6,\n    accidental: '',\n    octave: 4,\n    code: 'v3e',\n    shift_right: 5.5,\n  },\n};\n\n// Custom note heads\nFlow.keyProperties.customNoteHeads = {\n  /* Diamond */\n  'D0': {\n    code: 'v27',\n    shift_right: 0, // deprecated for stem_{up,down}_x_offset\n    stem_up_x_offset: 0,\n    stem_down_x_offset: 0,\n    stem_up_y_offset: -1,\n    stem_down_y_offset: 0\n  },\n  'D1': { code: 'v2d', shift_right: -0.5 },\n  'D2': { code: 'v22', shift_right: -0.5 },\n  'D3': { code: 'v70', shift_right: -0.5 },\n\n  /* Triangle */\n  'T0': { code: 'v49', shift_right: -2, stem_up_y_offset: -4, stem_down_y_offset: 4 },\n  'T1': { code: 'v93', shift_right: 0.5, stem_up_y_offset: -4, stem_down_y_offset: 4 },\n  'T2': { code: 'v40', shift_right: 0.5, stem_up_y_offset: -4, stem_down_y_offset: 4 },\n  'T3': { code: 'v7d', shift_right: 0.5, stem_up_y_offset: -4, stem_down_y_offset: 4 },\n\n  /* Cross */\n  'X0': {\n    code: 'v92',\n    stem_up_x_offset: -2,\n    stem_down_x_offset: 0,\n    stem_up_y_offset: 4,\n    stem_down_y_offset: 4\n  },\n  'X1': { code: 'v95', shift_right: -0.5, stem_up_y_offset: 4, stem_down_y_offset: 4 },\n  'X2': { code: 'v3e', shift_right: 0.5, stem_up_y_offset: 4, stem_down_y_offset: 4 },\n  'X3': {\n    code: 'v3b',\n    shift_right: 0,\n    stem_up_x_offset: -1.2,\n    stem_down_x_offset: 0,\n    stem_up_y_offset: -1,\n    stem_down_y_offset: 2\n  },\n\n  /* Square */\n  'S1': { code: 'vd3', shift_right: 0 },\n  'S2': { code: 'vd2', shift_right: 0 },\n\n  /* Rectangle */\n  'R1': { code: 'vd5', shift_right: 0 },\n  'R2': { code: 'vd4', shift_right: 0 },\n};\n\nFlow.integerToNote = integer => {\n  if (typeof (integer) === 'undefined') {\n    throw new Vex.RERR('BadArguments', 'Undefined integer for integerToNote');\n  }\n\n  if (integer < -2) {\n    throw new Vex.RERR('BadArguments', `integerToNote requires integer > -2: ${integer}`);\n  }\n\n  const noteValue = Flow.integerToNote.table[integer];\n  if (!noteValue) {\n    throw new Vex.RERR('BadArguments', `Unknown note value for integer: ${integer}`);\n  }\n\n  return noteValue;\n};\n\nFlow.integerToNote.table = {\n  0: 'C',\n  1: 'C#',\n  2: 'D',\n  3: 'D#',\n  4: 'E',\n  5: 'F',\n  6: 'F#',\n  7: 'G',\n  8: 'G#',\n  9: 'A',\n  10: 'A#',\n  11: 'B',\n};\n\nFlow.tabToGlyph = (fret, scale = 1.0) => {\n  let glyph = null;\n  let width = 0;\n  let shift_y = 0;\n\n  if (fret.toString().toUpperCase() === 'X') {\n    const glyphMetrics = new Glyph('v7f', Flow.DEFAULT_TABLATURE_FONT_SCALE).getMetrics();\n    glyph = 'v7f';\n    width = glyphMetrics.width;\n    shift_y = -glyphMetrics.height / 2;\n  } else {\n    width = Flow.textWidth(fret.toString());\n  }\n\n  return {\n    text: fret,\n    code: glyph,\n    getWidth: () => width * scale,\n    shift_y,\n  };\n};\n\nFlow.textWidth = text => 7 * text.toString().length;\n\nFlow.articulationCodes = artic => Flow.articulationCodes.articulations[artic];\n\nFlow.articulationCodes.articulations = {\n  'a.': { code: 'v23', between_lines: true }, // Staccato\n  'av': { code: 'v28', between_lines: true }, // Staccatissimo\n  'a>': { code: 'v42', between_lines: true }, // Accent\n  'a-': { code: 'v25', between_lines: true }, // Tenuto\n  'a^': { code: 'va', between_lines: false }, // Marcato\n  'a+': { code: 'v8b', between_lines: false }, // Left hand pizzicato\n  'ao': { code: 'v94', between_lines: false }, // Snap pizzicato\n  'ah': { code: 'vb9', between_lines: false }, // Natural harmonic or open note\n  'a@a': { code: 'v43', between_lines: false }, // Fermata above staff\n  'a@u': { code: 'v5b', between_lines: false }, // Fermata below staff\n  'a|': { code: 'v75', between_lines: false }, // Bow up - up stroke\n  'am': { code: 'v97', between_lines: false }, // Bow down - down stroke\n  'a,': { code: 'vb3', between_lines: false }, // Choked\n};\n\nFlow.accidentalCodes = acc => Flow.accidentalCodes.accidentals[acc];\n\nFlow.accidentalCodes.accidentals = {\n  '#': { code: 'v18', parenRightPaddingAdjustment: -1 },\n  '##': { code: 'v7f', parenRightPaddingAdjustment: -1 },\n  'b': { code: 'v44', parenRightPaddingAdjustment: -2 },\n  'bb': { code: 'v26', parenRightPaddingAdjustment: -2 },\n  'n': { code: 'v4e', parenRightPaddingAdjustment: -1 },\n  '{': { code: 'v9c', parenRightPaddingAdjustment: -1 },\n  '}': { code: 'v84', parenRightPaddingAdjustment: -1 },\n  'db': { code: 'v9e', parenRightPaddingAdjustment: -1 },\n  'd': { code: 'vab', parenRightPaddingAdjustment: 0 },\n  'bbs': { code: 'v90', parenRightPaddingAdjustment: -1 },\n  '++': { code: 'v51', parenRightPaddingAdjustment: -1 },\n  '+': { code: 'v78', parenRightPaddingAdjustment: -1 },\n  '+-': { code: 'v8d', parenRightPaddingAdjustment: -1 },\n  '++-': { code: 'v7a', parenRightPaddingAdjustment: -1 },\n  'bs': { code: 'vb7', parenRightPaddingAdjustment: -1 },\n  'bss': { code: 'v39', parenRightPaddingAdjustment: -1 },\n  'o': { code: 'vd0', parenRightPaddingAdjustment: -1 },\n  'k': { code: 'vd1', parenRightPaddingAdjustment: -1 },\n  'ashs': { code: 'vd6', parenRightPaddingAdjustment: -1 },  // arabic sharp half sharp\n  'afhf': { code: 'vd7', parenRightPaddingAdjustment: -1 },  // arabic flat half flat\n};\n\nFlow.accidentalColumnsTable = {\n  1: {\n    a: [1],\n    b: [1],\n  },\n  2: {\n    a: [1, 2],\n  },\n  3: {\n    a: [1, 3, 2],\n    b: [1, 2, 1],\n    second_on_bottom: [1, 2, 3],\n  },\n  4: {\n    a: [1, 3, 4, 2],\n    b: [1, 2, 3, 1],\n    spaced_out_tetrachord: [1, 2, 1, 2],\n  },\n  5: {\n    a: [1, 3, 5, 4, 2],\n    b: [1, 2, 4, 3, 1],\n    spaced_out_pentachord: [1, 2, 3, 2, 1],\n    very_spaced_out_pentachord: [1, 2, 1, 2, 1],\n  },\n  6: {\n    a: [1, 3, 5, 6, 4, 2],\n    b: [1, 2, 4, 5, 3, 1],\n    spaced_out_hexachord: [1, 3, 2, 1, 3, 2],\n    very_spaced_out_hexachord: [1, 2, 1, 2, 1, 2],\n  },\n};\n\nFlow.ornamentCodes = acc => Flow.ornamentCodes.ornaments[acc];\n\nFlow.ornamentCodes.ornaments = {\n  'mordent': { code: 'v1e' },\n  'mordent_inverted': { code: 'v45' },\n  'turn': { code: 'v72' },\n  'turn_inverted': { code: 'v33' },\n  'tr': { code: 'v1f' },\n  'upprall': { code: 'v60' },\n  'downprall': { code: 'vb4' },\n  'prallup': { code: 'v6d' },\n  'pralldown': { code: 'v2c' },\n  'upmordent': { code: 'v29' },\n  'downmordent': { code: 'v68' },\n  'lineprall': { code: 'v20' },\n  'prallprall': { code: 'v86' },\n};\n\nFlow.keySignature = spec => {\n  const keySpec = Flow.keySignature.keySpecs[spec];\n\n  if (!keySpec) {\n    throw new Vex.RERR('BadKeySignature', `Bad key signature spec: '${spec}'`);\n  }\n\n  if (!keySpec.acc) {\n    return [];\n  }\n\n  const notes = Flow.keySignature.accidentalList(keySpec.acc);\n\n  const acc_list = [];\n  for (let i = 0; i < keySpec.num; ++i) {\n    const line = notes[i];\n    acc_list.push({ type: keySpec.acc, line });\n  }\n\n  return acc_list;\n};\n\nFlow.keySignature.keySpecs = {\n  'C': { acc: null, num: 0 },\n  'Am': { acc: null, num: 0 },\n  'F': { acc: 'b', num: 1 },\n  'Dm': { acc: 'b', num: 1 },\n  'Bb': { acc: 'b', num: 2 },\n  'Gm': { acc: 'b', num: 2 },\n  'Eb': { acc: 'b', num: 3 },\n  'Cm': { acc: 'b', num: 3 },\n  'Ab': { acc: 'b', num: 4 },\n  'Fm': { acc: 'b', num: 4 },\n  'Db': { acc: 'b', num: 5 },\n  'Bbm': { acc: 'b', num: 5 },\n  'Gb': { acc: 'b', num: 6 },\n  'Ebm': { acc: 'b', num: 6 },\n  'Cb': { acc: 'b', num: 7 },\n  'Abm': { acc: 'b', num: 7 },\n  'G': { acc: '#', num: 1 },\n  'Em': { acc: '#', num: 1 },\n  'D': { acc: '#', num: 2 },\n  'Bm': { acc: '#', num: 2 },\n  'A': { acc: '#', num: 3 },\n  'F#m': { acc: '#', num: 3 },\n  'E': { acc: '#', num: 4 },\n  'C#m': { acc: '#', num: 4 },\n  'B': { acc: '#', num: 5 },\n  'G#m': { acc: '#', num: 5 },\n  'F#': { acc: '#', num: 6 },\n  'D#m': { acc: '#', num: 6 },\n  'C#': { acc: '#', num: 7 },\n  'A#m': { acc: '#', num: 7 },\n};\n\nFlow.unicode = {\n  // Unicode accidentals\n  'sharp': String.fromCharCode(parseInt('266F', 16)),\n  'flat': String.fromCharCode(parseInt('266D', 16)),\n  'natural': String.fromCharCode(parseInt('266E', 16)),\n  // Major Chord\n  'triangle': String.fromCharCode(parseInt('25B3', 16)),\n  // half-diminished\n  'o-with-slash': String.fromCharCode(parseInt('00F8', 16)),\n  // Diminished\n  'degrees': String.fromCharCode(parseInt('00B0', 16)),\n  'circle': String.fromCharCode(parseInt('25CB', 16)),\n};\n\nFlow.keySignature.accidentalList = (acc) => {\n  const patterns = {\n    'b': [2, 0.5, 2.5, 1, 3, 1.5, 3.5],\n    '#': [0, 1.5, -0.5, 1, 2.5, 0.5, 2],\n  };\n\n  return patterns[acc];\n};\n\nFlow.parseNoteDurationString = durationString => {\n  if (typeof (durationString) !== 'string') {\n    return null;\n  }\n\n  const regexp = /(\\d*\\/?\\d+|[a-z])(d*)([nrhms]|$)/;\n\n  const result = regexp.exec(durationString);\n  if (!result) {\n    return null;\n  }\n\n  const duration = result[1];\n  const dots = result[2].length;\n  let type = result[3];\n\n  if (type.length === 0) {\n    type = 'n';\n  }\n\n  return {\n    duration,\n    dots,\n    type,\n  };\n};\n\nFlow.parseNoteStruct = noteStruct => {\n  const duration = noteStruct.duration;\n\n  // Preserve backwards-compatibility\n  const durationStringData = Flow.parseNoteDurationString(duration);\n  if (!durationStringData) {\n    return null;\n  }\n\n  let ticks = Flow.durationToTicks(durationStringData.duration);\n  if (ticks == null) {\n    return null;\n  }\n\n  let type = noteStruct.type;\n  const customTypes = [];\n\n  if (type) {\n    if (!Flow.getGlyphProps.validTypes[type]) {\n      return null;\n    }\n  } else {\n    type = durationStringData.type || 'n';\n\n    // If we have keys, try and check if we've got a custom glyph\n    if (noteStruct.keys !== undefined) {\n      noteStruct.keys.forEach((k, i) => {\n        const result = k.split('/');\n        // We have a custom glyph specified after the note eg. /X2\n        if (result && result.length === 3) {\n          customTypes[i] = result[2];\n        }\n      });\n    }\n  }\n\n  const dots = noteStruct.dots ? noteStruct.dots : durationStringData.dots;\n\n  if (typeof (dots) !== 'number') {\n    return null;\n  }\n\n  let currentTicks = ticks;\n\n  for (let i = 0; i < dots; i++) {\n    if (currentTicks <= 1) return null;\n\n    currentTicks = currentTicks / 2;\n    ticks += currentTicks;\n  }\n\n  return {\n    duration: durationStringData.duration,\n    type,\n    customTypes,\n    dots,\n    ticks,\n  };\n};\n\n// Used to convert duration aliases to the number based duration.\n// If the input isn't an alias, simply return the input.\n//\n// example: 'q' -> '4', '8' -> '8'\nFlow.sanitizeDuration = duration => {\n  const alias = Flow.durationAliases[duration];\n  if (alias !== undefined) {\n    duration = alias;\n  }\n\n  if (Flow.durationToTicks.durations[duration] === undefined) {\n    throw new Vex.RERR('BadArguments', `The provided duration is not valid: ${duration}`);\n  }\n\n  return duration;\n};\n\n// Convert the `duration` to an fraction\nFlow.durationToFraction = duration => new Fraction().parse(Flow.sanitizeDuration(duration));\n\n// Convert the `duration` to an number\nFlow.durationToNumber = duration => Flow.durationToFraction(duration).value();\n\n// Convert the `duration` to total ticks\nFlow.durationToTicks = duration => {\n  duration = Flow.sanitizeDuration(duration);\n\n  const ticks = Flow.durationToTicks.durations[duration];\n  if (ticks === undefined) {\n    return null;\n  }\n\n  return ticks;\n};\n\nFlow.durationToTicks.durations = {\n  '1/2': Flow.RESOLUTION * 2,\n  '1': Flow.RESOLUTION / 1,\n  '2': Flow.RESOLUTION / 2,\n  '4': Flow.RESOLUTION / 4,\n  '8': Flow.RESOLUTION / 8,\n  '16': Flow.RESOLUTION / 16,\n  '32': Flow.RESOLUTION / 32,\n  '64': Flow.RESOLUTION / 64,\n  '128': Flow.RESOLUTION / 128,\n  '256': Flow.RESOLUTION / 256,\n};\n\nFlow.durationAliases = {\n  'w': '1',\n  'h': '2',\n  'q': '4',\n\n  // This is the default duration used to render bars (BarNote). Bars no longer\n  // consume ticks, so this should be a no-op.\n  //\n  // TODO(0xfe): This needs to be cleaned up.\n  'b': '256',\n};\n\n// Return a glyph given duration and type. The type can be a custom glyph code from customNoteHeads.\nFlow.getGlyphProps = (duration, type) => {\n  duration = Flow.sanitizeDuration(duration);\n\n  const code = Flow.getGlyphProps.duration_codes[duration];\n  if (code === undefined) {\n    return null;\n  }\n\n  if (!type) {\n    type = 'n';\n  }\n\n  let glyphTypeProperties = code.type[type];\n\n  if (glyphTypeProperties === undefined) {\n    // Try and get it from the custom list of note heads\n    const customGlyphTypeProperties = Flow.keyProperties.customNoteHeads[type.toUpperCase()];\n\n    // If not, then return with nothing\n    if (customGlyphTypeProperties === undefined) {\n      return null;\n    }\n\n    // Otherwise set it as the code_head value\n    glyphTypeProperties = {\n      code_head: customGlyphTypeProperties.code,\n      ...customGlyphTypeProperties,\n    };\n  }\n\n  return { ...code.common, ...glyphTypeProperties };\n};\n\nFlow.getGlyphProps.validTypes = {\n  'n': { name: 'note' },\n  'r': { name: 'rest' },\n  'h': { name: 'harmonic' },\n  'm': { name: 'muted' },\n  's': { name: 'slash' },\n};\n\nFlow.getGlyphProps.duration_codes = {\n  '1/2': {\n    common: {\n      getWidth(scale = Flow.DEFAULT_NOTATION_FONT_SCALE) {\n        return new Glyph(this.code_head || 'v53', scale).getMetrics().width;\n      },\n      stem: false,\n      stem_offset: 0,\n      flag: false,\n      stem_up_extension: -Flow.STEM_HEIGHT,\n      stem_down_extension: -Flow.STEM_HEIGHT,\n      tabnote_stem_up_extension: -Flow.STEM_HEIGHT,\n      tabnote_stem_down_extension: -Flow.STEM_HEIGHT,\n      dot_shiftY: 0,\n      line_above: 0,\n      line_below: 0,\n    },\n    type: {\n      'n': { // Breve note\n        code_head: 'v53',\n      },\n      'h': { // Breve note harmonic\n        code_head: 'v59',\n      },\n      'm': { // Breve note muted -\n        code_head: 'vf',\n        stem_offset: 0,\n      },\n      'r': { // Breve rest\n        code_head: 'v31',\n        rest: true,\n        position: 'B/5',\n        dot_shiftY: 0.5,\n      },\n      's': { // Breve note slash -\n        // Drawn with canvas primitives\n        getWidth: () => Flow.SLASH_NOTEHEAD_WIDTH,\n        position: 'B/4',\n      },\n    },\n  },\n  '1': {\n    common: {\n      getWidth(scale = Flow.DEFAULT_NOTATION_FONT_SCALE) {\n        return new Glyph(this.code_head || 'v1d', scale).getMetrics().width;\n      },\n      stem: false,\n      stem_offset: 0,\n      flag: false,\n      stem_up_extension: -Flow.STEM_HEIGHT,\n      stem_down_extension: -Flow.STEM_HEIGHT,\n      tabnote_stem_up_extension: -Flow.STEM_HEIGHT,\n      tabnote_stem_down_extension: -Flow.STEM_HEIGHT,\n      dot_shiftY: 0,\n      line_above: 0,\n      line_below: 0,\n    },\n    type: {\n      'n': { // Whole note\n        code_head: 'v1d',\n      },\n      'h': { // Whole note harmonic\n        code_head: 'v46',\n      },\n      'm': { // Whole note muted\n        code_head: 'v92',\n        stem_offset: -3,\n      },\n      'r': { // Whole rest\n        code_head: 'v5c',\n        rest: true,\n        position: 'D/5',\n        dot_shiftY: 0.5,\n      },\n      's': { // Whole note slash\n        // Drawn with canvas primitives\n        getWidth: () => Flow.SLASH_NOTEHEAD_WIDTH,\n        position: 'B/4',\n      },\n    },\n  },\n  '2': {\n    common: {\n      getWidth(scale = Flow.DEFAULT_NOTATION_FONT_SCALE) {\n        return new Glyph(this.code_head || 'v81', scale).getMetrics().width;\n      },\n      stem: true,\n      stem_offset: 0,\n      flag: false,\n      stem_up_extension: 0,\n      stem_down_extension: 0,\n      tabnote_stem_up_extension: 0,\n      tabnote_stem_down_extension: 0,\n      dot_shiftY: 0,\n      line_above: 0,\n      line_below: 0,\n    },\n    type: {\n      'n': { // Half note\n        code_head: 'v81',\n      },\n      'h': { // Half note harmonic\n        code_head: 'v2d',\n      },\n      'm': { // Half note muted\n        code_head: 'v95',\n        stem_offset: -3,\n      },\n      'r': { // Half rest\n        code_head: 'vc',\n        stem: false,\n        rest: true,\n        position: 'B/4',\n        dot_shiftY: -0.5,\n      },\n      's': { // Half note slash\n        // Drawn with canvas primitives\n        getWidth: () => Flow.SLASH_NOTEHEAD_WIDTH,\n        position: 'B/4',\n      },\n    },\n  },\n  '4': {\n    common: {\n      getWidth(scale = Flow.DEFAULT_NOTATION_FONT_SCALE) {\n        return new Glyph(this.code_head || 'vb', scale).getMetrics().width;\n      },\n      stem: true,\n      stem_offset: 0,\n      flag: false,\n      stem_up_extension: 0,\n      stem_down_extension: 0,\n      tabnote_stem_up_extension: 0,\n      tabnote_stem_down_extension: 0,\n      dot_shiftY: 0,\n      line_above: 0,\n      line_below: 0,\n    },\n    type: {\n      'n': { // Quarter note\n        code_head: 'vb',\n      },\n      'h': { // Quarter harmonic\n        code_head: 'v22',\n      },\n      'm': { // Quarter muted\n        code_head: 'v3e',\n        stem_offset: -3,\n      },\n      'r': { // Quarter rest\n        code_head: 'v7c',\n        stem: false,\n        rest: true,\n        position: 'B/4',\n        dot_shiftY: -0.5,\n        line_above: 1.5,\n        line_below: 1.5,\n      },\n      's': { // Quarter slash\n        // Drawn with canvas primitives\n        getWidth: () => Flow.SLASH_NOTEHEAD_WIDTH,\n        position: 'B/4',\n      },\n    },\n  },\n  '8': {\n    common: {\n      getWidth(scale = Flow.DEFAULT_NOTATION_FONT_SCALE) {\n        return new Glyph(this.code_head || 'vb', scale).getMetrics().width;\n      },\n      stem: true,\n      stem_offset: 0,\n      flag: true,\n      beam_count: 1,\n      code_flag_upstem: 'v54',\n      code_flag_downstem: 'v9a',\n      stem_up_extension: 0,\n      stem_down_extension: 0,\n      tabnote_stem_up_extension: 0,\n      tabnote_stem_down_extension: 0,\n      dot_shiftY: 0,\n      line_above: 0,\n      line_below: 0,\n    },\n    type: {\n      'n': { // Eighth note\n        code_head: 'vb',\n      },\n      'h': { // Eighth note harmonic\n        code_head: 'v22',\n      },\n      'm': { // Eighth note muted\n        code_head: 'v3e',\n      },\n      'r': { // Eighth rest\n        code_head: 'va5',\n        stem: false,\n        flag: false,\n        rest: true,\n        position: 'B/4',\n        dot_shiftY: -0.5,\n        line_above: 1.0,\n        line_below: 1.0,\n      },\n      's': { // Eight slash\n        // Drawn with canvas primitives\n        getWidth: () => Flow.SLASH_NOTEHEAD_WIDTH,\n        position: 'B/4',\n      },\n    },\n  },\n  '16': {\n    common: {\n      beam_count: 2,\n      getWidth(scale = Flow.DEFAULT_NOTATION_FONT_SCALE) {\n        return new Glyph(this.code_head || 'vb', scale).getMetrics().width;\n      },\n      stem: true,\n      stem_offset: 0,\n      flag: true,\n      code_flag_upstem: 'v3f',\n      code_flag_downstem: 'v8f',\n      stem_up_extension: 0,\n      stem_down_extension: 0,\n      tabnote_stem_up_extension: 0,\n      tabnote_stem_down_extension: 0,\n      dot_shiftY: 0,\n      line_above: 0,\n      line_below: 0,\n    },\n    type: {\n      'n': { // Sixteenth note\n        code_head: 'vb',\n      },\n      'h': { // Sixteenth note harmonic\n        code_head: 'v22',\n      },\n      'm': { // Sixteenth note muted\n        code_head: 'v3e',\n      },\n      'r': { // Sixteenth rest\n        code_head: 'v3c',\n        stem: false,\n        flag: false,\n        rest: true,\n        position: 'B/4',\n        dot_shiftY: -0.5,\n        line_above: 1.0,\n        line_below: 2.0,\n      },\n      's': { // Sixteenth slash\n        // Drawn with canvas primitives\n        getWidth: () => Flow.SLASH_NOTEHEAD_WIDTH,\n        position: 'B/4',\n      },\n    },\n  },\n  '32': {\n    common: {\n      beam_count: 3,\n      getWidth(scale = Flow.DEFAULT_NOTATION_FONT_SCALE) {\n        return new Glyph(this.code_head || 'vb', scale).getMetrics().width;\n      },\n      stem: true,\n      stem_offset: 0,\n      flag: true,\n      code_flag_upstem: 'v47',\n      code_flag_downstem: 'v2a',\n      stem_up_extension: 9,\n      stem_down_extension: 9,\n      tabnote_stem_up_extension: 8,\n      tabnote_stem_down_extension: 5,\n      dot_shiftY: 0,\n      line_above: 0,\n      line_below: 0,\n    },\n    type: {\n      'n': { // Thirty-second note\n        code_head: 'vb',\n      },\n      'h': { // Thirty-second harmonic\n        code_head: 'v22',\n      },\n      'm': { // Thirty-second muted\n        code_head: 'v3e',\n      },\n      'r': { // Thirty-second rest\n        code_head: 'v55',\n        stem: false,\n        flag: false,\n        rest: true,\n        position: 'B/4',\n        dot_shiftY: -1.5,\n        line_above: 2.0,\n        line_below: 2.0,\n      },\n      's': { // Thirty-second slash\n        // Drawn with canvas primitives\n        getWidth: () => Flow.SLASH_NOTEHEAD_WIDTH,\n        position: 'B/4',\n      },\n    },\n  },\n  '64': {\n    common: {\n      beam_count: 4,\n      getWidth(scale = Flow.DEFAULT_NOTATION_FONT_SCALE) {\n        return new Glyph(this.code_head || 'vb', scale).getMetrics().width;\n      },\n      stem: true,\n      stem_offset: 0,\n      flag: true,\n      code_flag_upstem: 'va9',\n      code_flag_downstem: 'v58',\n      stem_up_extension: 13,\n      stem_down_extension: 13,\n      tabnote_stem_up_extension: 12,\n      tabnote_stem_down_extension: 9,\n      dot_shiftY: 0,\n      line_above: 0,\n      line_below: 0,\n    },\n    type: {\n      'n': { // Sixty-fourth note\n        code_head: 'vb',\n      },\n      'h': { // Sixty-fourth harmonic\n        code_head: 'v22',\n      },\n      'm': { // Sixty-fourth muted\n        code_head: 'v3e',\n      },\n      'r': { // Sixty-fourth rest\n        code_head: 'v38',\n        stem: false,\n        flag: false,\n        rest: true,\n        position: 'B/4',\n        dot_shiftY: -1.5,\n        line_above: 2.0,\n        line_below: 3.0,\n      },\n      's': { // Sixty-fourth slash\n        // Drawn with canvas primitives\n        getWidth: () => Flow.SLASH_NOTEHEAD_WIDTH,\n        position: 'B/4',\n      },\n    },\n  },\n  '128': {\n    common: {\n      beam_count: 5,\n      getWidth(scale = Flow.DEFAULT_NOTATION_FONT_SCALE) {\n        return new Glyph(this.code_head || 'vb', scale).getMetrics().width;\n      },\n      stem: true,\n      stem_offset: 0,\n      flag: true,\n      code_flag_upstem: 'v9b',\n      code_flag_downstem: 'v30',\n      stem_up_extension: 22,\n      stem_down_extension: 22,\n      tabnote_stem_up_extension: 21,\n      tabnote_stem_down_extension: 18,\n      dot_shiftY: 0,\n      line_above: 0,\n      line_below: 0,\n    },\n    type: {\n      'n': {  // Hundred-twenty-eight note\n        code_head: 'vb',\n      },\n      'h': { // Hundred-twenty-eight harmonic\n        code_head: 'v22',\n      },\n      'm': { // Hundred-twenty-eight muted\n        code_head: 'v3e',\n      },\n      'r': {  // Hundred-twenty-eight rest\n        code_head: 'vaa',\n        stem: false,\n        flag: false,\n        rest: true,\n        position: 'B/4',\n        dot_shiftY: 1.5,\n        line_above: 3.0,\n        line_below: 3.0,\n      },\n      's': { // Hundred-twenty-eight rest\n        // Drawn with canvas primitives\n        getWidth: () => Flow.SLASH_NOTEHEAD_WIDTH,\n        position: 'B/4',\n      },\n    },\n  },\n};\n\n// For future collaboration with the SMuFL Standard Music Font Layout\n\nFlow.smufl = {};\n\n// add references between smufl glyph names and code points.\nFlow.smufl.to_code_points = {\n  // staff brackets and dividers (e000-e00f)\n  bracketTop: 'v1b',\n  bracketBottom: 'v10',\n\n  // barlines (e030-e03f)\n  barlineTick: 'v6f',\n\n  // repeats (e040-e04f)\n  segno: 'v8c',\n  coda: 'v4d',\n\n  // clefs (e050-e07f)\n  gClef: 'v83',\n  cClef: 'vad',\n  fClef: 'v79',\n  unpitchedPercussionClef1: 'v59', // same as breveNoteheadHarmonic\n  '6stringTabClef': 'v2f',\n\n  // time signatures (e080-e09f)\n  timeSig0: 'v0',\n  timeSig1: 'v1',\n  timeSig2: 'v2',\n  timeSig3: 'v3',\n  timeSig4: 'v4',\n  timeSig5: 'v5',\n  timeSig6: 'v6',\n  timeSig7: 'v7',\n  timeSig8: 'v8',\n  timeSig9: 'v9',\n  timeSigCommon: 'v41',\n  timeSigCutCommon: 'vb6',\n\n  // notehead (e0a0-e0ff)\n  noteheadDoubleWhole: 'v53',\n  noteheadWhole: 'v1d',\n  noteheadHalf: 'v81',\n  noteheadBlack: 'vb',\n  noteheadXWhole: 'v92',\n  noteheadXHalf: 'v95',\n  noteheadXBlack: 'v3e',\n  noteheadCircleX: 'v3b',\n  noteheadTriangleUpWhole: 'v49',\n  noteheadTriangleUpHalf: 'v93',\n  noteheadTriangleUpBlack: 'v40',\n  noteheadDiamondWhole: 'v46',\n  noteheadDiamondHalf: 'v2d',\n  noteheadDiamondBlack: 'v22',\n\n  // individual notes (e1d0-e1ef)\n  augmentationDot: 'v23',\n\n  // temolos (e220-e23f)\n  tremolo1: 'v74',\n\n  // flags (e240-e25f)\n  flag8thUp: 'v54',\n  flag8thDown: 'v9a',\n  flag16thUp: 'v3f',\n  flag16thDown: 'v8f',\n  flag32ndUp: 'v47',\n  flag32ndDown: 'v2a',\n  flag64thUp: 'va9',\n  flag64thDown: 'v58',\n  flag128thUp: 'v9b',\n  flag128thDown: 'v30',\n\n  // standard accidentals (e260-e26f)\n  accidentalFlat: 'v44',\n  accidentalNatural: 'v4e',\n  accidentalSharp: 'v18',\n  accidentalDoubleSharp: 'v7f',\n  accidentalDoubleFlat: 'v26',\n  accidentalParensLeft: 'v9c',\n  accidentalParensRight: 'v84',\n\n  // stein-zimmermann accidentals (24-edo) (e280-e28f)\n  accidentalQuarterToneFlatStein: 'vab',\n  accidentalThreeQuarterTonesFlatZimmermann: 'v9e',\n  accidentalQuarterToneSharpStein: 'v78',\n  accidentalThreeQuarterTonesSharpStein: 'v51',\n\n  // arel-ezgi-uzdilek accidentals (e440-e44f)\n  accidentalBuyukMucennebFlat: 'v39',\n  accidentalBakiyeFlat: 'vb7',\n  accidentalKomaSharp: 'v51', // same as accidentalQuarterToneSharpStein\n  accidentalKucukMucennebSharp: 'v8d',\n\n  // persian accidentals (e460-e46f)\n  accidentalKoron: 'vd1',\n  accidentalSori: 'vd0',\n\n  // articulation (e4a0-e4bf)\n  articAccentAbove: 'v42',\n  articAccentBelow: 'v42', // same as above\n  articTenutoAbove: 'v25',\n  articTenutoBelow: 'v25', // same as above\n  articStaccatoAbove: 'v23', // = dot\n  articStaccatoBelow: 'v23', // = dot\n  articStaccatissimoAbove: 'v28',\n  articMarcatoAbove: 'va',\n\n  // holds and pauses (e4c0-e4df)\n  fermataAbove: 'v43',\n  fermataBelow: 'v5b',\n  breathMarkComma: 'v6c',\n  breathMarkUpbow: 'v8a', // looks better than current upbow\n  caesura: 'v34',\n  caesuraCurved: 'v4b',\n\n  // rests (e4e0-e4ff)\n  restMaxima: 'v59', // not designed for this, but should do the trick\n  // need restLonga -- used in multimeasure rests, like above\n  restDoubleWhole: 'v31',\n  restWhole: 'v5c',\n  restHalf: 'vc',\n  restQuarter: 'v7c',\n  rest8th: 'va5',\n  rest16th: 'v3c',\n  rest32nd: 'v55',\n  rest64th: 'v38',\n  rest128th: 'vaa',\n\n  // dynamics (e520-e54f)\n  dynamicPiano: 'vbf',\n  dynamicMezzo: 'v62',\n  dynamicForte: 'vba',\n  dynamicRinforzando: 'vba',\n  dynamicSforzando: 'v4a',\n  dynamicZ: 'v80',\n\n  // common ornaments (e560-e56f)\n  ornamentTrill: 'v1f',\n  ornamentTurn: 'v72',\n  ornamentTurnSlash: 'v33',\n  ornamentMordent: 'v45',\n  ornamentMordentInverted: 'v1e',\n  ornamentTremblement: 'v86',\n\n  // precomposed trills and mordents (e5b0-e5cf)\n  ornamentPrecompAppoggTrill: 'v20',\n  ornamentPrecompSlideTrillDAnglebert: 'v60',\n  ornamentPrecompSlideTrillBach: 'v29',\n  ornamentPrecompTrillSuffixDandrieu: 'v6d',\n  ornamentPrecompDoubleCadenceUpperPrefix: 'vb4',\n  ornamentPrecompDoubleCadenceUpperPrefixTurn: 'v68',\n  ornamentPrecompTrillLowerSuffix: 'v2c',\n\n  // string techniques (e610-e62f)\n  stringsDownBow: 'v94',\n  stringsUpBow: 'v75',\n  stringsHarmonic: 'vb9',\n\n  // plucked techniques (e630-e63f)\n  pluckedSnapPizzicatoAbove: 'v94',\n  pluckedLeftHandPizzicato: 'v8b', // plus sign\n\n  // keyboard techniques (e650-e67f)\n  keyboardPedalPed: 'v36',\n  keyboardPedalUp: 'v5d',\n\n  // percussion playing technique pictograms (e7f0-e80f)\n  pictChokeCymbal: 'vb3',\n\n  // multi-segment lines (eaa0-eb0f)\n  wiggleArpeggiatoUp: 'va3', // rotated 90deg from reference implementation\n\n  // arrows and arrowheads (eb60-eb8f)\n  arrowheadBlackUp: 'vc3',\n  arrowheadBlackDown: 'v52',\n\n  // not found:\n  // noteheadDiamondWhole: 'v27', stylistic alternate to v46?\n  // noteheadDiamondBlack: 'v70', stylistic alternate to v22?\n  // noteheadTriangleUpBlack: 'v7d', stylistic alternate to v40?\n  // accidentalSlashedDoubleFlat: 'v90',\n  // accidentalOneAndAHalfSharpTurned: 'v7a',\n  // unused marcato alternative?  'v5a',\n  // arpeggioBrushDown: 'v11',\n};\n\n// Some defaults\nFlow.TIME4_4 = {\n  num_beats: 4,\n  beat_value: 4,\n  resolution: Flow.RESOLUTION,\n};\nexport { Flow };\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// Mohit Muthanna <mohit@muthanna.com>\n//\n// A rendering context for the Raphael backend.\n//\n// Copyright Mohit Cheppudira 2010\n\nimport { Vex } from './vex';\n\n/** @constructor */\nexport class CanvasContext {\n  static get WIDTH() {\n    return 600;\n  }\n  static get HEIGHT() {\n    return 400;\n  }\n  static get CANVAS_BROWSER_SIZE_LIMIT() {\n    return 32767; // Chrome/Firefox. Could be determined more precisely by npm module canvas-size\n  }\n\n  static SanitizeCanvasDims(width, height) {\n    if (Math.max(width, height) > this.CANVAS_BROWSER_SIZE_LIMIT) {\n      Vex.W(\n        'Canvas dimensions exceed browser limit. Cropping to ' +\n        this.CANVAS_BROWSER_SIZE_LIMIT\n      );\n      if (width > this.CANVAS_BROWSER_SIZE_LIMIT) {\n        width = this.CANVAS_BROWSER_SIZE_LIMIT;\n        // note: Math.min return 0 for undefined, NaN for null. Would change inputs.\n      }\n      if (height > this.CANVAS_BROWSER_SIZE_LIMIT) {\n        height = this.CANVAS_BROWSER_SIZE_LIMIT;\n      }\n    }\n    return [width, height];\n  }\n\n  constructor(context) {\n    // Use a name that is unlikely to clash with a canvas context\n    // property\n    this.vexFlowCanvasContext = context;\n    if (!context.canvas) {\n      this.canvas = {\n        width: CanvasContext.WIDTH,\n        height: CanvasContext.HEIGHT,\n      };\n    } else {\n      this.canvas = context.canvas;\n    }\n  }\n\n  clear() {\n    this.vexFlowCanvasContext.clearRect(0, 0, this.canvas.width, this.canvas.height);\n  }\n\n  // Containers not implemented\n  openGroup() {}\n  closeGroup() {}\n  add() {}\n\n  setFont(family, size, weight) {\n    this.vexFlowCanvasContext.font = (weight || '') + ' ' + size + 'pt ' + family;\n    return this;\n  }\n\n  setRawFont(font) {\n    this.vexFlowCanvasContext.font = font;\n    return this;\n  }\n\n  setFillStyle(style) {\n    this.vexFlowCanvasContext.fillStyle = style;\n    return this;\n  }\n\n  setBackgroundFillStyle(style) {\n    this.background_fillStyle = style;\n    return this;\n  }\n\n  setStrokeStyle(style) {\n    this.vexFlowCanvasContext.strokeStyle = style;\n    return this;\n  }\n\n  setShadowColor(style) {\n    this.vexFlowCanvasContext.shadowColor = style;\n    return this;\n  }\n\n  setShadowBlur(blur) {\n    this.vexFlowCanvasContext.shadowBlur = blur;\n    return this;\n  }\n\n  setLineWidth(width) {\n    this.vexFlowCanvasContext.lineWidth = width;\n    return this;\n  }\n\n  setLineCap(cap_type) {\n    this.vexFlowCanvasContext.lineCap = cap_type;\n    return this;\n  }\n\n  // setLineDash: is the one native method in a canvas context\n  // that begins with set, therefore we don't bolster the method\n  // if it already exists (see renderer.bolsterCanvasContext).\n  // If it doesn't exist, we bolster it and assume it's looking for\n  // a ctx.lineDash method, as previous versions of VexFlow\n  // expected.\n  setLineDash(dash) {\n    this.vexFlowCanvasContext.lineDash = dash;\n    return this;\n  }\n\n  scale(x, y) {\n    return this.vexFlowCanvasContext.scale(parseFloat(x), parseFloat(y));\n  }\n\n  resize(width, height) {\n    [width, height] = this.SanitizeCanvasDims(parseInt(width, 10), parseInt(height, 10));\n    return this.vexFlowCanvasContext.resize(width, height);\n  }\n\n  rect(x, y, width, height) {\n    return this.vexFlowCanvasContext.rect(x, y, width, height);\n  }\n\n  fillRect(x, y, width, height) {\n    return this.vexFlowCanvasContext.fillRect(x, y, width, height);\n  }\n\n  clearRect(x, y, width, height) {\n    return this.vexFlowCanvasContext.clearRect(x, y, width, height);\n  }\n\n  beginPath() {\n    return this.vexFlowCanvasContext.beginPath();\n  }\n\n  moveTo(x, y) {\n    return this.vexFlowCanvasContext.moveTo(x, y);\n  }\n\n  lineTo(x, y) {\n    return this.vexFlowCanvasContext.lineTo(x, y);\n  }\n\n  bezierCurveTo(x1, y1, x2, y2, x, y) {\n    return this.vexFlowCanvasContext.bezierCurveTo(x1, y1, x2, y2, x, y);\n  }\n\n  quadraticCurveTo(x1, y1, x, y) {\n    return this.vexFlowCanvasContext.quadraticCurveTo(x1, y1, x, y);\n  }\n\n  // This is an attempt (hack) to simulate the HTML5 canvas\n  // arc method.\n  arc(x, y, radius, startAngle, endAngle, antiClockwise) {\n    return this.vexFlowCanvasContext.arc(x, y, radius, startAngle, endAngle, antiClockwise);\n  }\n\n  // Adapted from the source for Raphael's Element.glow\n  glow() {\n    return this.vexFlowCanvasContext.glow();\n  }\n\n  fill() {\n    return this.vexFlowCanvasContext.fill();\n  }\n\n  stroke() {\n    return this.vexFlowCanvasContext.stroke();\n  }\n\n  closePath() {\n    return this.vexFlowCanvasContext.closePath();\n  }\n\n  measureText(text) {\n    return this.vexFlowCanvasContext.measureText(text);\n  }\n\n  fillText(text, x, y) {\n    return this.vexFlowCanvasContext.fillText(text, x, y);\n  }\n\n  save() {\n    return this.vexFlowCanvasContext.save();\n  }\n\n  restore() {\n    return this.vexFlowCanvasContext.restore();\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n// A rendering context for the Raphael backend.\n//\n// ## Warning: Deprecated for SVGContext\n// Except in instances where SVG support for IE < 9.0 is\n// needed, SVGContext is recommended.\n\nexport class RaphaelContext {\n  constructor(element) {\n    this.element = element;\n    this.paper = Raphael(element); // eslint-disable-line\n    this.path = '';\n    this.pen = { x: 0, y: 0 };\n    this.lineWidth = 1.0;\n    this.state = {\n      scale: { x: 1, y: 1 },\n      font_family: 'Arial',\n      font_size: 8,\n      font_weight: 800,\n    };\n\n    this.attributes = {\n      'stroke-width': 0.3,\n      'fill': 'black',\n      'stroke': 'black',\n      'font': '10pt Arial',\n    };\n\n    this.background_attributes = {\n      'stroke-width': 0,\n      'fill': 'white',\n      'stroke': 'white',\n      'font': '10pt Arial',\n    };\n\n    this.shadow_attributes = {\n      width: 0,\n      color: 'black',\n    };\n\n    this.state_stack = [];\n  }\n\n  // Containers not implemented\n  openGroup() {}\n  closeGroup() {}\n  add() {}\n\n  setFont(family, size, weight) {\n    this.state.font_family = family;\n    this.state.font_size = size;\n    this.state.font_weight = weight;\n    this.attributes.font = (this.state.font_weight || '') + ' ' +\n      (this.state.font_size * this.state.scale.x) + 'pt ' +\n      this.state.font_family;\n    return this;\n  }\n\n  setRawFont(font) {\n    this.attributes.font = font;\n    return this;\n  }\n\n  setFillStyle(style) {\n    this.attributes.fill = style;\n    return this;\n  }\n\n  setBackgroundFillStyle(style) {\n    this.background_attributes.fill = style;\n    this.background_attributes.stroke = style;\n    return this;\n  }\n\n  setStrokeStyle(style) {\n    this.attributes.stroke = style;\n    return this;\n  }\n\n  setShadowColor(style) {\n    this.shadow_attributes.color = style;\n    return this;\n  }\n\n  setShadowBlur(blur) {\n    this.shadow_attributes.width = blur;\n    return this;\n  }\n\n  setLineWidth(width) {\n    this.attributes['stroke-width'] = width;\n    this.lineWidth = width;\n  }\n\n  // Empty because there is no equivalent in SVG\n  setLineDash() { return this; }\n  setLineCap() { return this; }\n\n  scale(x, y) {\n    this.state.scale = { x, y };\n    // The scale() method is deprecated as of Raphael.JS 2.0, and\n    // can no longer be used as an option in an Element.attr() call.\n    // It is preserved here for users running earlier versions of\n    // Raphael.JS, though it has no effect on the SVG output in\n    // Raphael 2 and higher.\n    this.attributes.transform = 'S' + x + ',' + y + ',0,0';\n    this.attributes.scale = x + ',' + y + ',0,0';\n    this.attributes.font = this.state.font_size * this.state.scale.x + 'pt ' +\n      this.state.font_family;\n    this.background_attributes.transform = 'S' + x + ',' + y + ',0,0';\n    this.background_attributes.font = this.state.font_size *\n      this.state.scale.x + 'pt ' +\n      this.state.font_family;\n    return this;\n  }\n\n  clear() { this.paper.clear(); }\n\n  resize(width, height) {\n    this.element.style.width = width;\n    this.paper.setSize(width, height);\n    return this;\n  }\n\n  // Sets the SVG `viewBox` property, which results in auto scaling images when its container\n  // is resized.\n  //\n  // Usage: `ctx.setViewBox(\"0 0 600 400\")`\n  setViewBox(viewBox) {\n    this.paper.canvas.setAttribute('viewBox', viewBox);\n  }\n\n  rect(x, y, width, height) {\n    if (height < 0) {\n      y += height;\n      height = -height;\n    }\n\n    this.paper.rect(x, y, width - 0.5, height - 0.5)\n      .attr(this.attributes)\n      .attr('fill', 'none')\n      .attr('stroke-width', this.lineWidth);\n    return this;\n  }\n\n  fillRect(x, y, width, height) {\n    if (height < 0) {\n      y += height;\n      height = -height;\n    }\n\n    this.paper.rect(x, y, width - 0.5, height - 0.5).attr(this.attributes);\n    return this;\n  }\n\n  clearRect(x, y, width, height) {\n    if (height < 0) {\n      y += height;\n      height = -height;\n    }\n\n    this.paper.rect(x, y, width - 0.5, height - 0.5)\n      .attr(this.background_attributes);\n    return this;\n  }\n\n  beginPath() {\n    this.path = '';\n    this.pen.x = 0;\n    this.pen.y = 0;\n    return this;\n  }\n\n  moveTo(x, y) {\n    this.path += 'M' + x + ',' + y;\n    this.pen.x = x;\n    this.pen.y = y;\n    return this;\n  }\n\n  lineTo(x, y) {\n    this.path += 'L' + x + ',' + y;\n    this.pen.x = x;\n    this.pen.y = y;\n    return this;\n  }\n\n  bezierCurveTo(x1, y1, x2, y2, x, y) {\n    this.path += 'C' +\n      x1 + ',' +\n      y1 + ',' +\n      x2 + ',' +\n      y2 + ',' +\n      x + ',' +\n      y;\n    this.pen.x = x;\n    this.pen.y = y;\n    return this;\n  }\n\n  quadraticCurveTo(x1, y1, x, y) {\n    this.path += 'Q' +\n      x1 + ',' +\n      y1 + ',' +\n      x + ',' +\n      y;\n    this.pen.x = x;\n    this.pen.y = y;\n    return this;\n  }\n\n  // This is an attempt (hack) to simulate the HTML5 canvas\n  // arc method.\n  arc(x, y, radius, startAngle, endAngle, antiClockwise) {\n    function normalizeAngle(angle) {\n      while (angle < 0) {\n        angle += Math.PI * 2;\n      }\n\n      while (angle > Math.PI * 2) {\n        angle -= Math.PI * 2;\n      }\n      return angle;\n    }\n\n    startAngle = normalizeAngle(startAngle);\n    endAngle = normalizeAngle(endAngle);\n\n    if (startAngle > endAngle) {\n      const tmp = startAngle;\n      startAngle = endAngle;\n      endAngle = tmp;\n      antiClockwise = !antiClockwise;\n    }\n\n    const delta = endAngle - startAngle;\n\n    if (delta > Math.PI) {\n      this.arcHelper(x, y, radius, startAngle, startAngle + delta / 2, antiClockwise);\n      this.arcHelper(x, y, radius, startAngle + delta / 2, endAngle, antiClockwise);\n    } else {\n      this.arcHelper(x, y, radius, startAngle, endAngle, antiClockwise);\n    }\n    return this;\n  }\n\n  arcHelper(x, y, radius, startAngle, endAngle, antiClockwise) {\n    const x1 = x + radius * Math.cos(startAngle);\n    const y1 = y + radius * Math.sin(startAngle);\n\n    const x2 = x + radius * Math.cos(endAngle);\n    const y2 = y + radius * Math.sin(endAngle);\n\n    let largeArcFlag = 0;\n    let sweepFlag = 0;\n    if (antiClockwise) {\n      sweepFlag = 1;\n      if (endAngle - startAngle < Math.PI) {\n        largeArcFlag = 1;\n      }\n    } else if (endAngle - startAngle > Math.PI) {\n      largeArcFlag = 1;\n    }\n\n    this.path += 'M' + x1 + ',' + y1 + ',A' +\n      radius + ',' + radius + ',0,' + largeArcFlag + ',' + sweepFlag + ',' +\n      x2 + ',' + y2 + 'M' + this.pen.x + ',' + this.pen.y;\n  }\n\n  // Adapted from the source for Raphael's Element.glow\n  glow() {\n    const out = this.paper.set();\n    if (this.shadow_attributes.width > 0) {\n      const sa = this.shadow_attributes;\n      const num_paths = sa.width / 2;\n      for (let i = 1; i <= num_paths; i++) {\n        out.push(this.paper.path(this.path).attr({\n          stroke: sa.color,\n          'stroke-linejoin': 'round',\n          'stroke-linecap': 'round',\n          'stroke-width': +(sa.width / num_paths * i).toFixed(3),\n          opacity: +((sa.opacity || 0.3) / num_paths).toFixed(3),\n          // See note in this.scale(): In Raphael the scale() method\n          // is deprecated and removed as of Raphael 2.0 and replaced\n          // by the transform() method.  It is preserved here for\n          // users with earlier versions of Raphael, but has no effect\n          // on the output SVG in Raphael 2.0+.\n          transform: this.attributes.transform,\n          scale: this.attributes.scale,\n        }));\n      }\n    }\n    return out;\n  }\n\n  fill() {\n    const elem = this.paper.path(this.path)\n      .attr(this.attributes)\n      .attr('stroke-width', 0);\n    this.glow(elem);\n    return this;\n  }\n\n  stroke() {\n    // The first line of code below is, unfortunately, a bit of a hack:\n    // Raphael's transform() scaling does not scale the stroke-width, so\n    // in order to scale a stroke, we have to manually scale the\n    // stroke-width.\n    //\n    // This works well so long as the X & Y states for this.scale() are\n    // relatively similar.  However, if they are very different, we\n    // would expect horizontal and vertical lines to have different\n    // stroke-widths.\n    //\n    // In the future, if we want to support very divergent values for\n    // horizontal and vertical scaling, we may want to consider\n    // implementing SVG scaling with properties of the SVG viewBox &\n    // viewPort and removing it entirely from the Element.attr() calls.\n    // This would more closely parallel the approach taken in\n    // canvascontext.js as well.\n\n    const strokeWidth = this.lineWidth * (this.state.scale.x + this.state.scale.y) / 2;\n    const elem = this.paper.path(this.path)\n      .attr(this.attributes)\n      .attr('fill', 'none')\n      .attr('stroke-width', strokeWidth);\n    this.glow(elem);\n    return this;\n  }\n\n  closePath() {\n    this.path += 'Z';\n    return this;\n  }\n\n  measureText(text) {\n    const txt = this.paper.text(0, 0, text)\n      .attr(this.attributes)\n      .attr('fill', 'none')\n      .attr('stroke', 'none');\n    const bounds = txt.getBBox();\n    txt.remove();\n\n    return {\n      width: bounds.width,\n      height: bounds.height,\n    };\n  }\n\n  fillText(text, x, y) {\n    this.paper\n      .text(\n        x + (this.measureText(text).width / 2),\n        y - (this.state.font_size / (2.25 * this.state.scale.y)),\n        text\n      )\n      .attr(this.attributes);\n\n    return this;\n  }\n\n  save() {\n    // TODO(mmuthanna): State needs to be deep-copied.\n    this.state_stack.push({\n      state: {\n        font_family: this.state.font_family,\n      },\n      attributes: {\n        font: this.attributes.font,\n        fill: this.attributes.fill,\n        stroke: this.attributes.stroke,\n        'stroke-width': this.attributes['stroke-width'],\n      },\n      shadow_attributes: {\n        width: this.shadow_attributes.width,\n        color: this.shadow_attributes.color,\n      },\n    });\n    return this;\n  }\n\n  restore() {\n    // TODO(0xfe): State needs to be deep-restored.\n    const state = this.state_stack.pop();\n    this.state.font_family = state.state.font_family;\n    this.attributes.font = state.attributes.font;\n    this.attributes.fill = state.attributes.fill;\n    this.attributes.stroke = state.attributes.stroke;\n    this.attributes['stroke-width'] = state.attributes['stroke-width'];\n    this.shadow_attributes.width = state.shadow_attributes.width;\n    this.shadow_attributes.color = state.shadow_attributes.color;\n    return this;\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// @author Gregory Ristow (2015)\n\nimport { Vex } from './vex';\n\nconst attrNamesToIgnoreMap = {\n  path: {\n    x: true,\n    y: true,\n    width: true,\n    height: true,\n  },\n  rect: {\n  },\n  text: {\n    width: true,\n    height: true,\n  },\n};\n\n{\n  const fontAttrNamesToIgnore = {\n    'font-family': true,\n    'font-weight': true,\n    'font-style': true,\n    'font-size': true,\n  };\n\n  Vex.Merge(attrNamesToIgnoreMap.rect, fontAttrNamesToIgnore);\n  Vex.Merge(attrNamesToIgnoreMap.path, fontAttrNamesToIgnore);\n}\n\nexport class SVGContext {\n  constructor(element) {\n    // element is the parent DOM object\n    this.element = element;\n    // Create the SVG in the SVG namespace:\n    this.svgNS = 'http://www.w3.org/2000/svg';\n    const svg = this.create('svg');\n    // Add it to the canvas:\n    this.element.appendChild(svg);\n\n    // Point to it:\n    this.svg = svg;\n    this.groups = [this.svg]; // Create the group stack\n    this.parent = this.svg;\n\n    this.path = '';\n    this.pen = { x: NaN, y: NaN };\n    this.lineWidth = 1.0;\n    this.state = {\n      scale: { x: 1, y: 1 },\n      'font-family': 'Arial',\n      'font-size': '8pt',\n      'font-weight': 'normal',\n    };\n\n    this.attributes = {\n      'stroke-width': 0.3,\n      'fill': 'black',\n      'stroke': 'black',\n      'stroke-dasharray': 'none',\n      'font-family': 'Arial',\n      'font-size': '10pt',\n      'font-weight': 'normal',\n      'font-style': 'normal',\n    };\n\n    this.background_attributes = {\n      'stroke-width': 0,\n      'fill': 'white',\n      'stroke': 'white',\n      'stroke-dasharray': 'none',\n      'font-family': 'Arial',\n      'font-size': '10pt',\n      'font-weight': 'normal',\n      'font-style': 'normal',\n    };\n\n    this.shadow_attributes = {\n      width: 0,\n      color: 'black',\n    };\n\n    this.state_stack = [];\n\n    // Test for Internet Explorer\n    this.iePolyfill();\n  }\n\n  create(svgElementType) {\n    return document.createElementNS(this.svgNS, svgElementType);\n  }\n\n  // Allow grouping elements in containers for interactivity.\n  openGroup(cls, id, attrs) {\n    const group = this.create('g');\n    this.groups.push(group);\n    this.parent.appendChild(group);\n    this.parent = group;\n    if (cls) group.setAttribute('class', Vex.Prefix(cls));\n    if (id) group.setAttribute('id', Vex.Prefix(id));\n\n    if (attrs && attrs.pointerBBox) {\n      group.setAttribute('pointer-events', 'bounding-box');\n    }\n    return group;\n  }\n\n  closeGroup() {\n    this.groups.pop();\n    this.parent = this.groups[this.groups.length - 1];\n  }\n\n  add(elem) {\n    this.parent.appendChild(elem);\n  }\n\n  // Tests if the browser is Internet Explorer; if it is,\n  // we do some tricks to improve text layout.  See the\n  // note at ieMeasureTextFix() for details.\n  iePolyfill() {\n    if (typeof (navigator) !== 'undefined') {\n      this.ie = (\n        /MSIE 9/i.test(navigator.userAgent) ||\n        /MSIE 10/i.test(navigator.userAgent) ||\n        /rv:11\\.0/i.test(navigator.userAgent) ||\n        /Trident/i.test(navigator.userAgent)\n      );\n    }\n  }\n\n  // ### Styling & State Methods:\n\n  setFont(family, size, weight) {\n    // Unlike canvas, in SVG italic is handled by font-style,\n    // not weight. So: we search the weight argument and\n    // apply bold and italic to weight and style respectively.\n    let bold = false;\n    let italic = false;\n    let style = 'normal';\n    // Weight might also be a number (200, 400, etc...) so we\n    // test its type to be sure we have access to String methods.\n    if (typeof weight === 'string') {\n      // look for \"italic\" in the weight:\n      if (weight.indexOf('italic') !== -1) {\n        weight = weight.replace(/italic/g, '');\n        italic = true;\n      }\n      // look for \"bold\" in weight\n      if (weight.indexOf('bold') !== -1) {\n        weight = weight.replace(/bold/g, '');\n        bold = true;\n      }\n      // remove any remaining spaces\n      weight = weight.replace(/ /g, '');\n    }\n    weight = bold ? 'bold' : weight;\n    weight = (typeof weight === 'undefined' || weight === '') ? 'normal' : weight;\n\n    style = italic ? 'italic' : style;\n\n    const fontAttributes = {\n      'font-family': family,\n      'font-size': size + 'pt',\n      'font-weight': weight,\n      'font-style': style,\n    };\n\n    // Store the font size so that if the browser is Internet\n    // Explorer we can fix its calculations of text width.\n    this.fontSize = Number(size);\n\n    Vex.Merge(this.attributes, fontAttributes);\n    Vex.Merge(this.state, fontAttributes);\n\n    return this;\n  }\n\n  setRawFont(font) {\n    font = font.trim();\n    // Assumes size first, splits on space -- which is presently\n    // how all existing modules are calling this.\n    const fontArray = font.split(' ');\n\n    this.attributes['font-family'] = fontArray[1];\n    this.state['font-family'] = fontArray[1];\n\n    this.attributes['font-size'] = fontArray[0];\n    this.state['font-size'] = fontArray[0];\n\n    // Saves fontSize for IE polyfill\n    this.fontSize = Number(fontArray[0].match(/\\d+/));\n    return this;\n  }\n\n  setFillStyle(style) {\n    this.attributes.fill = style;\n    return this;\n  }\n\n  setBackgroundFillStyle(style) {\n    this.background_attributes.fill = style;\n    this.background_attributes.stroke = style;\n    return this;\n  }\n\n  setStrokeStyle(style) {\n    this.attributes.stroke = style;\n    return this;\n  }\n\n  setShadowColor(style) {\n    this.shadow_attributes.color = style;\n    return this;\n  }\n\n  setShadowBlur(blur) {\n    this.shadow_attributes.width = blur;\n    return this;\n  }\n\n  setLineWidth(width) {\n    this.attributes['stroke-width'] = width;\n    this.lineWidth = width;\n  }\n\n  // @param array {lineDash} as [dashInt, spaceInt, dashInt, spaceInt, etc...]\n  setLineDash(lineDash) {\n    if (Object.prototype.toString.call(lineDash) === '[object Array]') {\n      lineDash = lineDash.join(', ');\n      this.attributes['stroke-dasharray'] = lineDash;\n      return this;\n    } else {\n      throw new Vex.RERR('ArgumentError', 'lineDash must be an array of integers.');\n    }\n  }\n\n  setLineCap(lineCap) {\n    this.attributes['stroke-linecap'] = lineCap;\n    return this;\n  }\n\n  // ### Sizing & Scaling Methods:\n\n  // TODO (GCR): See note at scale() -- seperate our internal\n  // conception of pixel-based width/height from the style.width\n  // and style.height properties eventually to allow users to\n  // apply responsive sizing attributes to the SVG.\n  resize(width, height) {\n    this.width = width;\n    this.height = height;\n    this.element.style.width = width;\n    const attributes = {\n      width,\n      height,\n    };\n    this.applyAttributes(this.svg, attributes);\n    this.scale(this.state.scale.x, this.state.scale.y);\n    return this;\n  }\n\n  scale(x, y) {\n    // uses viewBox to scale\n    // TODO (GCR): we may at some point want to distinguish the\n    // style.width / style.height properties that are applied to\n    // the SVG object from our internal conception of the SVG\n    // width/height.  This would allow us to create automatically\n    // scaling SVG's that filled their containers, for instance.\n    //\n    // As this isn't implemented in Canvas or Raphael contexts,\n    // I've left as is for now, but in using the viewBox to\n    // handle internal scaling, am trying to make it possible\n    // for us to eventually move in that direction.\n\n    this.state.scale = { x, y };\n    const visibleWidth = this.width / x;\n    const visibleHeight = this.height / y;\n    this.setViewBox(0, 0, visibleWidth, visibleHeight);\n\n    return this;\n  }\n\n  setViewBox(...args) {\n    // Override for \"x y w h\" style:\n    if (args.length === 1) {\n      const [viewBox] = args;\n      this.svg.setAttribute('viewBox', viewBox);\n    } else {\n      const [xMin, yMin, width, height] = args;\n      const viewBoxString = xMin + ' ' + yMin + ' ' + width + ' ' + height;\n      this.svg.setAttribute('viewBox', viewBoxString);\n    }\n  }\n\n  // ### Drawing helper methods:\n\n  applyAttributes(element, attributes) {\n    const attrNamesToIgnore = attrNamesToIgnoreMap[element.nodeName];\n    Object\n      .keys(attributes)\n      .forEach(propertyName => {\n        if (attrNamesToIgnore && attrNamesToIgnore[propertyName]) {\n          return;\n        }\n        element.setAttributeNS(null, propertyName, attributes[propertyName]);\n      });\n\n    return element;\n  }\n\n  // ### Shape & Path Methods:\n\n  clear() {\n    // Clear the SVG by removing all inner children.\n\n    // (This approach is usually slightly more efficient\n    // than removing the old SVG & adding a new one to\n    // the container element, since it does not cause the\n    // container to resize twice.  Also, the resize\n    // triggered by removing the entire SVG can trigger\n    // a touchcancel event when the element resizes away\n    // from a touch point.)\n\n    while (this.svg.lastChild) {\n      this.svg.removeChild(this.svg.lastChild);\n    }\n\n    // Replace the viewbox attribute we just removed:\n    this.scale(this.state.scale.x, this.state.scale.y);\n  }\n\n  // ## Rectangles:\n\n  rect(x, y, width, height, attributes) {\n    // Avoid invalid negative height attribs by\n    // flipping the rectangle on its head:\n    if (height < 0) {\n      y += height;\n      height *= -1;\n    }\n\n    // Create the rect & style it:\n    const rectangle = this.create('rect');\n    if (typeof attributes === 'undefined') {\n      attributes = {\n        fill: 'none',\n        'stroke-width': this.lineWidth,\n        stroke: 'black',\n      };\n    }\n\n    Vex.Merge(attributes, {\n      x,\n      y,\n      width,\n      height,\n    });\n\n    this.applyAttributes(rectangle, attributes);\n\n    this.add(rectangle);\n    return this;\n  }\n\n  fillRect(x, y, width, height) {\n    if (height < 0) {\n      y += height;\n      height *= -1;\n    }\n\n    this.rect(x, y, width, height, this.attributes);\n    return this;\n  }\n\n  clearRect(x, y, width, height) {\n    // TODO(GCR): Improve implementation of this...\n    // Currently it draws a box of the background color, rather\n    // than creating alpha through lower z-levels.\n    //\n    // See the implementation of this in SVGKit:\n    // http://sourceforge.net/projects/svgkit/\n    // as a starting point.\n    //\n    // Adding a large number of transform paths (as we would\n    // have to do) could be a real performance hit.  Since\n    // tabNote seems to be the only module that makes use of this\n    // it may be worth creating a seperate tabStave that would\n    // draw lines around locations of tablature fingering.\n    //\n\n    this.rect(x, y, width, height, this.background_attributes);\n    return this;\n  }\n\n  // ## Paths:\n\n  beginPath() {\n    this.path = '';\n    this.pen.x = NaN;\n    this.pen.y = NaN;\n\n    return this;\n  }\n\n  moveTo(x, y) {\n    this.path += 'M' + x + ' ' + y;\n    this.pen.x = x;\n    this.pen.y = y;\n    return this;\n  }\n\n  lineTo(x, y) {\n    this.path += 'L' + x + ' ' + y;\n    this.pen.x = x;\n    this.pen.y = y;\n    return this;\n  }\n\n  bezierCurveTo(x1, y1, x2, y2, x, y) {\n    this.path += 'C' +\n      x1 + ' ' +\n      y1 + ',' +\n      x2 + ' ' +\n      y2 + ',' +\n      x + ' ' +\n      y;\n    this.pen.x = x;\n    this.pen.y = y;\n    return this;\n  }\n\n  quadraticCurveTo(x1, y1, x, y) {\n    this.path += 'Q' +\n      x1 + ' ' +\n      y1 + ',' +\n      x + ' ' +\n      y;\n    this.pen.x = x;\n    this.pen.y = y;\n    return this;\n  }\n\n  // This is an attempt (hack) to simulate the HTML5 canvas\n  // arc method.\n  arc(x, y, radius, startAngle, endAngle, antiClockwise) {\n    function normalizeAngle(angle) {\n      while (angle < 0) {\n        angle += Math.PI * 2;\n      }\n\n      while (angle > Math.PI * 2) {\n        angle -= Math.PI * 2;\n      }\n      return angle;\n    }\n\n    startAngle = normalizeAngle(startAngle);\n    endAngle = normalizeAngle(endAngle);\n\n    if (startAngle > endAngle) {\n      const tmp = startAngle;\n      startAngle = endAngle;\n      endAngle = tmp;\n      antiClockwise = !antiClockwise;\n    }\n\n    const delta = endAngle - startAngle;\n\n    if (delta > Math.PI) {\n      this.arcHelper(x, y, radius, startAngle, startAngle + delta / 2, antiClockwise);\n      this.arcHelper(x, y, radius, startAngle + delta / 2, endAngle, antiClockwise);\n    } else {\n      this.arcHelper(x, y, radius, startAngle, endAngle, antiClockwise);\n    }\n    return this;\n  }\n\n  arcHelper(x, y, radius, startAngle, endAngle, antiClockwise) {\n    const x1 = x + radius * Math.cos(startAngle);\n    const y1 = y + radius * Math.sin(startAngle);\n\n    const x2 = x + radius * Math.cos(endAngle);\n    const y2 = y + radius * Math.sin(endAngle);\n\n    let largeArcFlag = 0;\n    let sweepFlag = 0;\n    if (antiClockwise) {\n      sweepFlag = 1;\n      if (endAngle - startAngle < Math.PI) {\n        largeArcFlag = 1;\n      }\n    } else if (endAngle - startAngle > Math.PI) {\n      largeArcFlag = 1;\n    }\n\n    this.path += 'M' + x1 + ' ' + y1 + ' A' +\n      radius + ' ' + radius + ' 0 ' + largeArcFlag + ' ' + sweepFlag + ' ' +\n      x2 + ' ' + y2;\n    if (!isNaN(this.pen.x) && !isNaN(this.pen.y)) {\n      this.peth += 'M' + this.pen.x + ' ' + this.pen.y;\n    }\n  }\n\n  closePath() {\n    this.path += 'Z';\n\n    return this;\n  }\n\n  // Adapted from the source for Raphael's Element.glow\n  glow() {\n    // Calculate the width & paths of the glow:\n    if (this.shadow_attributes.width > 0) {\n      const sa = this.shadow_attributes;\n      const num_paths = sa.width / 2;\n      // Stroke at varying widths to create effect of gaussian blur:\n      for (let i = 1; i <= num_paths; i++) {\n        const attributes = {\n          stroke: sa.color,\n          'stroke-linejoin': 'round',\n          'stroke-linecap': 'round',\n          'stroke-width': +((sa.width * 0.4) / num_paths * i).toFixed(3),\n          opacity: +((sa.opacity || 0.3) / num_paths).toFixed(3),\n        };\n\n        const path = this.create('path');\n        attributes.d = this.path;\n        this.applyAttributes(path, attributes);\n        this.add(path);\n      }\n    }\n    return this;\n  }\n\n  fill(attributes) {\n    // If our current path is set to glow, make it glow\n    this.glow();\n\n    const path = this.create('path');\n    let newAttributes = attributes;\n    if (typeof attributes === 'undefined') {\n        attributes = {};\n        Vex.Merge(attributes, this.attributes);\n        attributes.stroke = 'none';\n        newAttributes = attributes;\n    } else {\n      newAttributes = attributes;\n      Vex.Merge(newAttributes, this.attributes); // this overrides attributes either way\n      if (attributes.class) {\n        newAttributes.class = attributes.class;\n      }\n      if (attributes.id) {\n        newAttributes.id = attributes.id;\n      }\n    }\n    \n    attributes.d = this.path;\n    //attributes.class = \"testbeam\";\n    \n    this.applyAttributes(path, attributes);\n    this.add(path);\n    return this;\n  }\n\n  stroke(extraAttributes = undefined) {\n    // If our current path is set to glow, make it glow.\n    this.glow();\n\n    const path = this.create('path');\n    const attributes = {};\n    Vex.Merge(attributes, this.attributes);\n    if (extraAttributes) {\n        Vex.Merge(attributes, extraAttributes);\n    }\n    attributes.fill = 'none';\n    attributes['stroke-width'] = this.lineWidth;\n    attributes.d = this.path;\n\n    this.applyAttributes(path, attributes);\n    this.add(path);\n    return this;\n  }\n\n  // ## Text Methods:\n  measureText(text) {\n    const txt = this.create('text');\n    if (typeof (txt.getBBox) !== 'function') {\n      return { x: 0, y: 0, width: 0, height: 0 };\n    }\n\n    txt.textContent = text;\n    this.applyAttributes(txt, this.attributes);\n\n    // Temporarily add it to the document for measurement.\n    this.svg.appendChild(txt);\n\n    let bbox = txt.getBBox();\n    if (this.ie && text !== '' && this.attributes['font-style'] === 'italic') {\n      bbox = this.ieMeasureTextFix(bbox, text);\n    }\n\n    this.svg.removeChild(txt);\n    return bbox;\n  }\n\n  ieMeasureTextFix(bbox) {\n    // Internet Explorer over-pads text in italics,\n    // resulting in giant width estimates for measureText.\n    // To fix this, we use this formula, tested against\n    // ie 11:\n    // overestimate (in pixels) = FontSize(in pt) * 1.196 + 1.96\n    // And then subtract the overestimate from calculated width.\n\n    const fontSize = Number(this.fontSize);\n    const m = 1.196;\n    const b = 1.9598;\n    const widthCorrection = (m * fontSize) + b;\n    const width = bbox.width - widthCorrection;\n    const height = bbox.height - 1.5;\n\n    // Get non-protected copy:\n    const box = {\n      x: bbox.x,\n      y: bbox.y,\n      width,\n      height,\n    };\n\n    return box;\n  }\n\n  fillText(text, x, y) {\n    if (!text || text.length <= 0) {\n      return;\n    }\n    const attributes = {};\n    Vex.Merge(attributes, this.attributes);\n    attributes.stroke = 'none';\n    attributes.x = x;\n    attributes.y = y;\n\n    const txt = this.create('text');\n    txt.textContent = text;\n    this.applyAttributes(txt, attributes);\n    this.add(txt);\n  }\n\n  save() {\n    // TODO(mmuthanna): State needs to be deep-copied.\n    this.state_stack.push({\n      state: {\n        'font-family': this.state['font-family'],\n        'font-weight': this.state['font-weight'],\n        'font-style': this.state['font-style'],\n        'font-size': this.state['font-size'],\n        scale: this.state.scale,\n      },\n      attributes: {\n        'font-family': this.attributes['font-family'],\n        'font-weight': this.attributes['font-weight'],\n        'font-style': this.attributes['font-style'],\n        'font-size': this.attributes['font-size'],\n        fill: this.attributes.fill,\n        stroke: this.attributes.stroke,\n        'stroke-width': this.attributes['stroke-width'],\n        'stroke-dasharray': this.attributes['stroke-dasharray'],\n      },\n      shadow_attributes: {\n        width: this.shadow_attributes.width,\n        color: this.shadow_attributes.color,\n      },\n      lineWidth: this.lineWidth,\n    });\n    return this;\n  }\n\n  restore() {\n    // TODO(0xfe): State needs to be deep-restored.\n    const state = this.state_stack.pop();\n    this.state['font-family'] = state.state['font-family'];\n    this.state['font-weight'] = state.state['font-weight'];\n    this.state['font-style'] = state.state['font-style'];\n    this.state['font-size'] = state.state['font-size'];\n    this.state.scale = state.state.scale;\n\n    this.attributes['font-family'] = state.attributes['font-family'];\n    this.attributes['font-weight'] = state.attributes['font-weight'];\n    this.attributes['font-style'] = state.attributes['font-style'];\n    this.attributes['font-size'] = state.attributes['font-size'];\n\n    this.attributes.fill = state.attributes.fill;\n    this.attributes.stroke = state.attributes.stroke;\n    this.attributes['stroke-width'] = state.attributes['stroke-width'];\n    this.attributes['stroke-dasharray'] = state.attributes['stroke-dasharray'];\n\n    this.shadow_attributes.width = state.shadow_attributes.width;\n    this.shadow_attributes.color = state.shadow_attributes.color;\n\n    this.lineWidth = state.lineWidth;\n    return this;\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n// Support for different rendering contexts: Canvas, Raphael\n\nimport { CanvasContext } from './canvascontext';\nimport { RaphaelContext } from './raphaelcontext';\nimport { SVGContext } from './svgcontext';\nimport { Vex } from './vex';\n\nlet lastContext = null;\n\nexport class Renderer {\n  static get Backends() {\n    return {\n      CANVAS: 1,\n      RAPHAEL: 2,\n      SVG: 3,\n      VML: 4,\n    };\n  }\n\n  // End of line types\n  static get LineEndType() {\n    return {\n      NONE: 1, // No leg\n      UP: 2,   // Upward leg\n      DOWN: 3, // Downward leg\n    };\n  }\n\n  // Set this to true if you're using VexFlow inside a runtime\n  // that does not allow modifiying canvas objects. There is a small\n  // performance degradation due to the extra indirection.\n  static get USE_CANVAS_PROXY() {\n    return false;\n  }\n\n  static get lastContext() {\n    return lastContext;\n  }\n  static set lastContext(ctx) {\n    lastContext = ctx;\n  }\n\n  static buildContext(elementId, backend, width, height, background) {\n    const renderer = new Renderer(elementId, backend);\n    if (width && height) {\n      renderer.resize(width, height);\n    }\n\n    if (!background) background = '#FFF';\n    const ctx = renderer.getContext();\n    ctx.setBackgroundFillStyle(background);\n    Renderer.lastContext = ctx;\n    return ctx;\n  }\n\n  static getCanvasContext(elementId, width, height, background) {\n    return Renderer.buildContext(elementId, Renderer.Backends.CANVAS, width, height, background);\n  }\n\n  static getRaphaelContext(elementId, width, height, background) {\n    return Renderer.buildContext(elementId, Renderer.Backends.RAPHAEL, width, height, background);\n  }\n\n  static getSVGContext(elementId, width, height, background) {\n    return Renderer.buildContext(elementId, Renderer.Backends.SVG, width, height, background);\n  }\n\n  static bolsterCanvasContext(ctx) {\n    if (Renderer.USE_CANVAS_PROXY) {\n      return new CanvasContext(ctx);\n    }\n\n    const methodNames = [\n      'clear', 'setFont', 'setRawFont', 'setFillStyle', 'setBackgroundFillStyle',\n      'setStrokeStyle', 'setShadowColor', 'setShadowBlur', 'setLineWidth',\n      'setLineCap', 'setLineDash', 'openGroup', 'closeGroup', 'getGroup',\n    ];\n\n    ctx.vexFlowCanvasContext = ctx;\n\n    methodNames.forEach(methodName => {\n      ctx[methodName] = ctx[methodName] || CanvasContext.prototype[methodName];\n    });\n\n    return ctx;\n  }\n\n  // Draw a dashed line (horizontal, vertical or diagonal\n  // dashPattern = [3,3] draws a 3 pixel dash followed by a three pixel space.\n  // setting the second number to 0 draws a solid line.\n  static drawDashedLine(context, fromX, fromY, toX, toY, dashPattern) {\n    context.beginPath();\n\n    const dx = toX - fromX;\n    const dy = toY - fromY;\n    const angle = Math.atan2(dy, dx);\n    let x = fromX;\n    let y = fromY;\n    context.moveTo(fromX, fromY);\n    let idx = 0;\n    let draw = true;\n    while (!((dx < 0 ? x <= toX : x >= toX) && (dy < 0 ? y <= toY : y >= toY))) {\n      const dashLength = dashPattern[idx++ % dashPattern.length];\n      const nx = x + (Math.cos(angle) * dashLength);\n      x = dx < 0 ? Math.max(toX, nx) : Math.min(toX, nx);\n      const ny = y + (Math.sin(angle) * dashLength);\n      y = dy < 0 ? Math.max(toY, ny) : Math.min(toY, ny);\n      if (draw) {\n        context.lineTo(x, y);\n      } else {\n        context.moveTo(x, y);\n      }\n      draw = !draw;\n    }\n\n    context.closePath();\n    context.stroke();\n  }\n\n  constructor(elementId, backend) {\n    this.elementId = elementId;\n    if (!this.elementId) {\n      throw new Vex.RERR('BadArgument', 'Invalid id for renderer.');\n    }\n\n    this.element = document.getElementById(elementId);\n    if (!this.element) this.element = elementId;\n\n    // Verify backend and create context\n    this.ctx = null;\n    this.paper = null;\n    this.backend = backend;\n    if (this.backend === Renderer.Backends.CANVAS) {\n      // Create context.\n      if (!this.element.getContext) {\n        throw new Vex.RERR('BadElement', `Can't get canvas context from element: ${elementId}`);\n      }\n      this.ctx = Renderer.bolsterCanvasContext(this.element.getContext('2d'));\n    } else if (this.backend === Renderer.Backends.RAPHAEL) {\n      this.ctx = new RaphaelContext(this.element);\n    } else if (this.backend === Renderer.Backends.SVG) {\n      this.ctx = new SVGContext(this.element);\n    } else {\n      throw new Vex.RERR('InvalidBackend', `No support for backend: ${this.backend}`);\n    }\n  }\n\n  resize(width, height) {\n    if (this.backend === Renderer.Backends.CANVAS) {\n      if (!this.element.getContext) {\n        throw new Vex.RERR(\n          'BadElement', `Can't get canvas context from element: ${this.elementId}`\n        );\n      }\n      [width, height] = CanvasContext.SanitizeCanvasDims(width, height);\n\n      const devicePixelRatio = window.devicePixelRatio || 1;\n\n      this.element.width = width * devicePixelRatio;\n      this.element.height = height * devicePixelRatio;\n      this.element.style.width = width + 'px';\n      this.element.style.height = height + 'px';\n\n      this.ctx = Renderer.bolsterCanvasContext(this.element.getContext('2d'));\n      this.ctx.scale(devicePixelRatio, devicePixelRatio);\n    } else {\n      this.ctx.resize(width, height);\n    }\n\n    return this;\n  }\n\n  getContext() { return this.ctx; }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n// This file implements the `Stem` object. Generally this object is handled\n// by its parent `StemmableNote`.\n\nimport { Vex } from './vex';\nimport { Element } from './element';\nimport { Flow } from './tables';\n\n// To enable logging for this class. Set `Vex.Flow.Stem.DEBUG` to `true`.\nfunction L(...args) { if (Stem.DEBUG) Vex.L('Vex.Flow.Stem', args); }\n\nexport class Stem extends Element {\n  static get CATEGORY() { return 'stem'; }\n\n  // Stem directions\n  static get UP() {\n    return 1;\n  }\n  static get DOWN() {\n    return -1;\n  }\n\n  // Theme\n  static get WIDTH() {\n    return Flow.STEM_WIDTH;\n  }\n  static get HEIGHT() {\n    return Flow.STEM_HEIGHT;\n  }\n\n  constructor(options = {}) {\n    super();\n    this.setAttribute('type', 'Stem');\n\n    // Default notehead x bounds\n    this.x_begin = options.x_begin || 0;\n    this.x_end = options.x_end || 0;\n\n    // Y bounds for top/bottom most notehead\n    this.y_top = options.y_top || 0;\n    this.y_bottom = options.y_bottom || 0;\n\n    // Stem top extension\n    this.stem_extension = options.stem_extension || 0;\n\n    // Direction of the stem\n    this.stem_direction = options.stem_direction || 0;\n\n    // Flag to override all draw calls\n    this.hide = options.hide || false;\n\n    this.isStemlet = options.isStemlet || false;\n    this.stemletHeight = options.stemletHeight || 0;\n\n    // Use to adjust the rendered height without affecting\n    // the results of `.getExtents()`\n    this.renderHeightAdjustment = 0;\n    this.setOptions(options);\n  }\n\n  setOptions(options) {\n    // Changing where the stem meets the head\n    this.stem_up_y_offset = options.stem_up_y_offset || 0;\n    this.stem_down_y_offset = options.stem_down_y_offset || 0;\n  }\n\n  // Set the x bounds for the default notehead\n  setNoteHeadXBounds(x_begin, x_end) {\n    this.x_begin = x_begin;\n    this.x_end = x_end;\n    return this;\n  }\n\n  // Set the direction of the stem in relation to the noteheads\n  setDirection(direction) { this.stem_direction = direction; }\n\n  // Set the extension for the stem, generally for flags or beams\n  setExtension(ext) { this.stem_extension = ext; }\n  getExtension() { return this.stem_extension; }\n\n  // The the y bounds for the top and bottom noteheads\n  setYBounds(y_top, y_bottom) {\n    this.y_top = y_top;\n    this.y_bottom = y_bottom;\n  }\n\n  // The category of the object\n  getCategory() { return Stem.CATEGORY; }\n\n  // Gets the entire height for the stem\n  getHeight() {\n    const y_offset = (this.stem_direction === Stem.UP) ? this.stem_up_y_offset : this.stem_down_y_offset; // eslint-disable-line max-len\n    return ((this.y_bottom - this.y_top) * this.stem_direction) +\n           ((Stem.HEIGHT - y_offset + this.stem_extension) * this.stem_direction);\n  }\n  getBoundingBox() {\n    throw new Vex.RERR('NotImplemented', 'getBoundingBox() not implemented.');\n  }\n\n  // Get the y coordinates for the very base of the stem to the top of\n  // the extension\n  getExtents() {\n    const isStemUp = this.stem_direction === Stem.UP;\n    const ys = [this.y_top, this.y_bottom];\n    const stemHeight = Stem.HEIGHT + this.stem_extension;\n\n    const innerMostNoteheadY = (isStemUp ? Math.min : Math.max)(...ys);\n    const outerMostNoteheadY = (isStemUp ? Math.max : Math.min)(...ys);\n    const stemTipY = innerMostNoteheadY + (stemHeight * -this.stem_direction);\n\n    return { topY: stemTipY, baseY: outerMostNoteheadY };\n  }\n\n  setVisibility(isVisible) {\n    this.hide = !isVisible;\n    return this;\n  }\n\n  setStemlet(isStemlet, stemletHeight) {\n    this.isStemlet = isStemlet;\n    this.stemletHeight = stemletHeight;\n    return this;\n  }\n\n  // Render the stem onto the canvas\n  draw() {\n    this.setRendered();\n    if (this.hide) return;\n    const ctx = this.checkContext();\n\n    let stem_x;\n    let stem_y;\n    const stem_direction = this.stem_direction;\n\n    if (stem_direction === Stem.DOWN) {\n      // Down stems are rendered to the left of the head.\n      stem_x = this.x_begin;\n      stem_y = this.y_top + this.stem_down_y_offset;\n    } else {\n      // Up stems are rendered to the right of the head.\n      stem_x = this.x_end;\n      stem_y = this.y_bottom - this.stem_up_y_offset;\n    }\n\n    const stemHeight = this.getHeight();\n\n    L('Rendering stem - ', 'Top Y: ', this.y_top, 'Bottom Y: ', this.y_bottom);\n\n    // The offset from the stem's base which is required fo satisfy the stemlet height\n    const stemletYOffset = this.isStemlet\n      ? stemHeight - this.stemletHeight * this.stem_direction\n      : 0;\n\n    // Draw the stem\n    ctx.save();\n    this.applyStyle(ctx);\n    ctx.beginPath();\n    ctx.setLineWidth(Stem.WIDTH);\n    ctx.moveTo(stem_x, stem_y - stemletYOffset);\n    ctx.lineTo(stem_x, stem_y - stemHeight - (this.renderHeightAdjustment * stem_direction));\n    if (ctx.svg) {\n        const strokeAttributes = {class: Vex.Prefix(\"stem\")};\n        if (this.id) {\n            strokeAttributes.id = this.id;\n        }\n        ctx.stroke(strokeAttributes);\n    } else {\n        ctx.stroke();\n    }\n    this.restoreStyle(ctx);\n    ctx.restore();\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n\n/**\n * ## Description\n *\n * Create a new tuplet from the specified notes. The notes must\n * be part of the same voice. If they are of different rhythmic\n * values, then options.num_notes must be set.\n *\n * @constructor\n * @param {Array.<Vex.Flow.StaveNote>} A set of notes: staveNotes,\n *   notes, etc... any class that inherits stemmableNote at some\n *   point in its prototype chain.\n * @param options: object {\n *\n *   num_notes: fit this many notes into...\n *   notes_occupied: ...the space of this many notes\n *\n *       Together, these two properties make up the tuplet ratio\n *     in the form of num_notes : notes_occupied.\n *       num_notes defaults to the number of notes passed in, so\n *     it is important that if you omit this property, all of\n *     the notes passed should be of the same note value.\n *       notes_occupied defaults to 2 -- so you should almost\n *     certainly pass this parameter for anything other than\n *     a basic triplet.\n *\n *   location:\n *     default 1, which is above the notes: ┌─── 3 ───┐\n *      -1 is below the notes └─── 3 ───┘\n *\n *   bracketed: boolean, draw a bracket around the tuplet number\n *     when true: ┌─── 3 ───┐   when false: 3\n *     defaults to true if notes are not beamed, false otherwise\n *\n *   ratioed: boolean\n *     when true: ┌─── 7:8 ───┐, when false: ┌─── 7 ───┐\n *     defaults to true if the difference between num_notes and\n *     notes_occupied is greater than 1.\n *\n *   y_offset: int, default 0\n *     manually offset a tuplet, for instance to avoid collisions\n *     with articulations, etc...\n * }\n */\n\nimport { Vex } from './vex';\nimport { Element } from './element';\nimport { Formatter } from './formatter';\nimport { Glyph } from './glyph';\nimport { Stem } from './stem';\n\nexport class Tuplet extends Element {\n  static get LOCATION_TOP() {\n    return 1;\n  }\n  static get LOCATION_BOTTOM() {\n    return -1;\n  }\n  static get NESTING_OFFSET() {\n    return 15;\n  }\n\n  constructor(notes, options) {\n    super();\n    this.setAttribute('type', 'Tuplet');\n    if (!notes || !notes.length) {\n      throw new Vex.RuntimeError('BadArguments', 'No notes provided for tuplet.');\n    }\n\n    this.options = Vex.Merge({}, options);\n    this.notes = notes;\n    this.num_notes = 'num_notes' in this.options ?\n      this.options.num_notes : notes.length;\n\n    // We accept beats_occupied, but warn that it's deprecated:\n    // the preferred property name is now notes_occupied.\n    if (this.options.beats_occupied) {\n      this.beatsOccupiedDeprecationWarning();\n    }\n    this.notes_occupied = this.options.notes_occupied ||\n      this.options.beats_occupied ||\n      2;\n    if ('bracketed' in this.options) {\n      this.bracketed = this.options.bracketed;\n    } else {\n      this.bracketed =\n        notes.some(note => note.beam === null);\n    }\n\n    this.ratioed = 'ratioed' in this.options ?\n      this.options.ratioed :\n      (Math.abs(this.notes_occupied - this.num_notes) > 1);\n    this.point = 28;\n    this.y_pos = 16;\n    this.x_pos = 100;\n    this.width = 200;\n    this.location = this.options.location || Tuplet.LOCATION_TOP;\n\n    Formatter.AlignRestsToNotes(notes, true, true);\n    this.resolveGlyphs();\n    this.attach();\n  }\n\n  attach() {\n    for (let i = 0; i < this.notes.length; i++) {\n      const note = this.notes[i];\n      note.setTuplet(this);\n    }\n  }\n\n  detach() {\n    for (let i = 0; i < this.notes.length; i++) {\n      const note = this.notes[i];\n      note.resetTuplet(this);\n    }\n  }\n\n  /**\n   * Set whether or not the bracket is drawn.\n   */\n  setBracketed(bracketed) {\n    this.bracketed = !!bracketed;\n    return this;\n  }\n\n  /**\n   * Set whether or not the ratio is shown.\n   */\n  setRatioed(ratioed) {\n    this.ratioed = !!ratioed;\n    return this;\n  }\n\n  /**\n   * Set the tuplet to be displayed either on the top or bottom of the stave\n   */\n  setTupletLocation(location) {\n    if (!location) {\n      location = Tuplet.LOCATION_TOP;\n    } else if (location !== Tuplet.LOCATION_TOP && location !== Tuplet.LOCATION_BOTTOM) {\n      throw new Vex.RERR('BadArgument', 'Invalid tuplet location: ' + location);\n    }\n\n    this.location = location;\n    return this;\n  }\n\n  getNotes() {\n    return this.notes;\n  }\n\n  getNoteCount() {\n    return this.num_notes;\n  }\n\n  beatsOccupiedDeprecationWarning() {\n    const msg = [\n      'beats_occupied has been deprecated as an ',\n      'option for tuplets. Please use notes_occupied ',\n      'instead. Calls to getBeatsOccupied and ',\n      'setBeatsOccupied should now be routed to ',\n      'getNotesOccupied and setNotesOccupied instead',\n    ].join('');\n\n    if (console && console.warn) { // eslint-disable-line no-console\n      console.warn(msg); // eslint-disable-line no-console\n    } else if (console) {\n      console.log(msg); // eslint-disable-line no-console\n    }\n  }\n\n  getBeatsOccupied() {\n    this.beatsOccupiedDeprecationWarning();\n    return this.getNotesOccupied();\n  }\n\n  setBeatsOccupied(beats) {\n    this.beatsOccupiedDeprecationWarning();\n    return this.setNotesOccupied(beats);\n  }\n\n  getNotesOccupied() {\n    return this.notes_occupied;\n  }\n\n  setNotesOccupied(notes) {\n    this.detach();\n    this.notes_occupied = notes;\n    this.resolveGlyphs();\n    this.attach();\n  }\n\n  resolveGlyphs() {\n    this.numerator_glyphs = [];\n    let n = this.num_notes;\n    while (n >= 1) {\n      this.numerator_glyphs.unshift(new Glyph('v' + (n % 10), this.point));\n      n = parseInt(n / 10, 10);\n    }\n\n    this.denom_glyphs = [];\n    n = this.notes_occupied;\n    while (n >= 1) {\n      this.denom_glyphs.unshift(new Glyph('v' + (n % 10), this.point));\n      n = parseInt(n / 10, 10);\n    }\n  }\n\n  // determine how many tuplets are nested within this tuplet\n  // on the same side (above/below), to calculate a y\n  // offset for this tuplet:\n  getNestedTupletCount() {\n    const location = this.location;\n    const first_note = this.notes[0];\n    let maxTupletCount = countTuplets(first_note, location);\n    let minTupletCount = countTuplets(first_note, location);\n\n    // Count the tuplets that are on the same side (above/below)\n    // as this tuplet:\n    function countTuplets(note, location) {\n      return note.tupletStack.filter(tuplet => tuplet.location === location).length;\n    }\n\n    this.notes.forEach(note => {\n      const tupletCount = countTuplets(note, location);\n      maxTupletCount = tupletCount > maxTupletCount ? tupletCount : maxTupletCount;\n      minTupletCount = tupletCount < minTupletCount ? tupletCount : minTupletCount;\n    });\n\n    return maxTupletCount - minTupletCount;\n  }\n\n  // determine the y position of the tuplet:\n  getYPosition() {\n    // offset the tuplet for any nested tuplets between\n    // it and the notes:\n    const nested_tuplet_y_offset =\n      this.getNestedTupletCount() *\n      Tuplet.NESTING_OFFSET *\n      -this.location;\n\n    // offset the tuplet for any manual y_offset:\n    const y_offset = this.options.y_offset || 0;\n\n    // now iterate through the notes and find our highest\n    // or lowest locations, to form a base y_pos\n    const first_note = this.notes[0];\n    let y_pos;\n    if (this.location === Tuplet.LOCATION_TOP) {\n      y_pos = first_note.getStave().getYForLine(0) - 15;\n      // y_pos = first_note.getStemExtents().topY - 10;\n\n      for (let i = 0; i < this.notes.length; ++i) {\n        const top_y = this.notes[i].getStemDirection() === Stem.UP\n          ? this.notes[i].getStemExtents().topY - 10\n          : this.notes[i].getStemExtents().baseY - 20;\n\n        if (top_y < y_pos) {\n          y_pos = top_y;\n        }\n      }\n    } else {\n      y_pos = first_note.getStave().getYForLine(4) + 20;\n\n      for (let i = 0; i < this.notes.length; ++i) {\n        const bottom_y = this.notes[i].getStemDirection() === Stem.UP\n          ? this.notes[i].getStemExtents().baseY + 20\n          : this.notes[i].getStemExtents().topY + 10;\n        if (bottom_y > y_pos) {\n          y_pos = bottom_y;\n        }\n      }\n    }\n\n    return y_pos + nested_tuplet_y_offset + y_offset;\n  }\n\n  draw() {\n    this.checkContext();\n    this.setRendered();\n\n    // determine x value of left bound of tuplet\n    const first_note = this.notes[0];\n    const last_note = this.notes[this.notes.length - 1];\n\n    if (!this.bracketed) {\n      this.x_pos = first_note.getStemX();\n      this.width = last_note.getStemX() - this.x_pos;\n    } else {\n      this.x_pos = first_note.getTieLeftX() - 5;\n      this.width = last_note.getTieRightX() - this.x_pos + 5;\n    }\n\n    // determine y value for tuplet\n    this.y_pos = this.getYPosition();\n\n    const addGlyphWidth = (width, glyph) => width + glyph.getMetrics().width;\n\n    // calculate total width of tuplet notation\n    let width = this.numerator_glyphs.reduce(addGlyphWidth, 0);\n    if (this.ratioed) {\n      width = this.denom_glyphs.reduce(addGlyphWidth, width);\n      width += this.point * 0.32;\n    }\n\n    const notation_center_x = this.x_pos + (this.width / 2);\n    const notation_start_x = notation_center_x - (width / 2);\n\n    // draw bracket if the tuplet is not beamed\n    if (this.bracketed) {\n      const line_width = this.width / 2 - width / 2 - 5;\n\n      // only draw the bracket if it has positive length\n      if (line_width > 0) {\n        this.context.fillRect(this.x_pos, this.y_pos, line_width, 1);\n        this.context.fillRect(\n          this.x_pos + this.width / 2 + width / 2 + 5,\n          this.y_pos,\n          line_width,\n          1\n        );\n        this.context.fillRect(\n          this.x_pos,\n          this.y_pos + (this.location === Tuplet.LOCATION_BOTTOM),\n          1,\n          this.location * 10\n        );\n        this.context.fillRect(\n          this.x_pos + this.width,\n          this.y_pos + (this.location === Tuplet.LOCATION_BOTTOM),\n          1,\n          this.location * 10\n        );\n      }\n    }\n\n    // draw numerator glyphs\n    let x_offset = 0;\n    this.numerator_glyphs.forEach(glyph => {\n      glyph.render(this.context, notation_start_x + x_offset, this.y_pos + (this.point / 3) - 2);\n      x_offset += glyph.getMetrics().width;\n    });\n\n    // display colon and denominator if the ratio is to be shown\n    if (this.ratioed) {\n      const colon_x = notation_start_x + x_offset + this.point * 0.16;\n      const colon_radius = this.point * 0.06;\n      this.context.beginPath();\n      this.context.arc(colon_x, this.y_pos - this.point * 0.08, colon_radius, 0, Math.PI * 2, true);\n      this.context.closePath();\n      this.context.fill();\n      this.context.beginPath();\n      this.context.arc(colon_x, this.y_pos + this.point * 0.12, colon_radius, 0, Math.PI * 2, true);\n      this.context.closePath();\n      this.context.fill();\n      x_offset += this.point * 0.32;\n      this.denom_glyphs.forEach(glyph => {\n        glyph.render(this.context, notation_start_x + x_offset, this.y_pos + (this.point / 3) - 2);\n        x_offset += glyph.getMetrics().width;\n      });\n    }\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n//\n// This file implements `Beams` that span over a set of `StemmableNotes`.\n\nimport { Vex } from './vex';\nimport { Flow } from './tables';\nimport { Element } from './element';\nimport { Fraction } from './fraction';\nimport { Tuplet } from './tuplet';\nimport { Stem } from './stem';\n\nfunction calculateStemDirection(notes) {\n  let lineSum = 0;\n  notes.forEach(note => {\n    if (note.keyProps) {\n      note.keyProps.forEach(keyProp => {\n        lineSum += (keyProp.line - 3);\n      });\n    }\n  });\n\n  if (lineSum >= 0) {\n    return Stem.DOWN;\n  }\n  return Stem.UP;\n}\n\nconst getStemSlope = (firstNote, lastNote) => {\n  const firstStemTipY = firstNote.getStemExtents().topY;\n  const firstStemX = firstNote.getStemX();\n  const lastStemTipY = lastNote.getStemExtents().topY;\n  const lastStemX = lastNote.getStemX();\n  return (lastStemTipY - firstStemTipY) / (lastStemX - firstStemX);\n};\n\nconst BEAM_LEFT = 'L';\nconst BEAM_RIGHT = 'R';\nconst BEAM_BOTH = 'B';\n\nexport class Beam extends Element {\n  // Gets the default beam groups for a provided time signature.\n  // Attempts to guess if the time signature is not found in table.\n  // Currently this is fairly naive.\n  static getDefaultBeamGroups(time_sig) {\n    if (!time_sig || time_sig === 'c') {\n      time_sig = '4/4';\n    }\n\n    const defaults = {\n      '1/2': ['1/2'],\n      '2/2': ['1/2'],\n      '3/2': ['1/2'],\n      '4/2': ['1/2'],\n\n      '1/4': ['1/4'],\n      '2/4': ['1/4'],\n      '3/4': ['1/4'],\n      '4/4': ['1/4'],\n\n      '1/8': ['1/8'],\n      '2/8': ['2/8'],\n      '3/8': ['3/8'],\n      '4/8': ['2/8'],\n\n      '1/16': ['1/16'],\n      '2/16': ['2/16'],\n      '3/16': ['3/16'],\n      '4/16': ['2/16'],\n    };\n\n    const groups = defaults[time_sig];\n\n    if (groups === undefined) {\n      // If no beam groups found, naively determine\n      // the beam groupings from the time signature\n      const beatTotal = parseInt(time_sig.split('/')[0], 10);\n      const beatValue = parseInt(time_sig.split('/')[1], 10);\n\n      const tripleMeter = beatTotal % 3 === 0;\n\n      if (tripleMeter) {\n        return [new Fraction(3, beatValue)];\n      } else if (beatValue > 4) {\n        return [new Fraction(2, beatValue)];\n      } else if (beatValue <= 4) {\n        return [new Fraction(1, beatValue)];\n      }\n    } else {\n      return groups.map(group => new Fraction().parse(group));\n    }\n\n    return [new Fraction(1, 4)];\n  }\n\n  // A helper function to automatically build basic beams for a voice. For more\n  // complex auto-beaming use `Beam.generateBeams()`.\n  //\n  // Parameters:\n  // * `voice` - The voice to generate the beams for\n  // * `stem_direction` - A stem direction to apply to the entire voice\n  // * `groups` - An array of `Fraction` representing beat groupings for the beam\n  static applyAndGetBeams(voice, stem_direction, groups) {\n    return Beam.generateBeams(voice.getTickables(), {\n      groups,\n      stem_direction,\n    });\n  }\n\n  // A helper function to autimatically build beams for a voice with\n  // configuration options.\n  //\n  // Example configuration object:\n  //\n  // ```\n  // config = {\n  //   groups: [new Vex.Flow.Fraction(2, 8)],\n  //   stem_direction: -1,\n  //   beam_rests: true,\n  //   beam_middle_only: true,\n  //   show_stemlets: false\n  // };\n  // ```\n  //\n  // Parameters:\n  // * `notes` - An array of notes to create the beams for\n  // * `config` - The configuration object\n  //    * `groups` - Array of `Fractions` that represent the beat structure to beam the notes\n  //    * `stem_direction` - Set to apply the same direction to all notes\n  //    * `beam_rests` - Set to `true` to include rests in the beams\n  //    * `beam_middle_only` - Set to `true` to only beam rests in the middle of the beat\n  //    * `show_stemlets` - Set to `true` to draw stemlets for rests\n  //    * `maintain_stem_directions` - Set to `true` to not apply new stem directions\n  //\n  static generateBeams(notes, config) {\n    if (!config) config = {};\n\n    if (!config.groups || !config.groups.length) {\n      config.groups = [new Fraction(2, 8)];\n    }\n\n    // Convert beam groups to tick amounts\n    const tickGroups = config.groups.map(group => {\n      if (!group.multiply) {\n        throw new Vex.RuntimeError('InvalidBeamGroups',\n          'The beam groups must be an array of Vex.Flow.Fractions');\n      }\n      return group.clone().multiply(Flow.RESOLUTION, 1);\n    });\n\n    const unprocessedNotes = notes;\n    let currentTickGroup = 0;\n    let noteGroups = [];\n    let currentGroup = [];\n\n    function getTotalTicks(vf_notes) {\n      return vf_notes.reduce((memo, note) => note.getTicks().clone().add(memo), new Fraction(0, 1));\n    }\n\n    function nextTickGroup() {\n      if (tickGroups.length - 1 > currentTickGroup) {\n        currentTickGroup += 1;\n      } else {\n        currentTickGroup = 0;\n      }\n    }\n\n    function createGroups() {\n      let nextGroup = [];\n\n      unprocessedNotes.forEach(unprocessedNote => {\n        nextGroup = [];\n        if (unprocessedNote.shouldIgnoreTicks()) {\n          noteGroups.push(currentGroup);\n          currentGroup = nextGroup;\n          return; // Ignore untickables (like bar notes)\n        }\n\n        currentGroup.push(unprocessedNote);\n        const ticksPerGroup = tickGroups[currentTickGroup].clone();\n        const totalTicks = getTotalTicks(currentGroup);\n\n        // Double the amount of ticks in a group, if it's an unbeamable tuplet\n        const unbeamable = Flow.durationToNumber(unprocessedNote.duration) < 8;\n        if (unbeamable && unprocessedNote.tuplet) {\n          ticksPerGroup.numerator *= 2;\n        }\n\n        // If the note that was just added overflows the group tick total\n        if (totalTicks.greaterThan(ticksPerGroup)) {\n          // If the overflow note can be beamed, start the next group\n          // with it. Unbeamable notes leave the group overflowed.\n          if (!unbeamable) {\n            nextGroup.push(currentGroup.pop());\n          }\n          noteGroups.push(currentGroup);\n          currentGroup = nextGroup;\n          nextTickGroup();\n        } else if (totalTicks.equals(ticksPerGroup)) {\n          noteGroups.push(currentGroup);\n          currentGroup = nextGroup;\n          nextTickGroup();\n        }\n      });\n\n      // Adds any remainder notes\n      if (currentGroup.length > 0) {\n        noteGroups.push(currentGroup);\n      }\n    }\n\n    function getBeamGroups() {\n      return noteGroups.filter(group => {\n        if (group.length > 1) {\n          let beamable = true;\n          group.forEach(note => {\n            if (note.getIntrinsicTicks() >= Flow.durationToTicks('4')) {\n              beamable = false;\n            }\n          });\n          return beamable;\n        }\n        return false;\n      });\n    }\n\n    // Splits up groups by Rest\n    function sanitizeGroups() {\n      const sanitizedGroups = [];\n      noteGroups.forEach(group => {\n        let tempGroup = [];\n        group.forEach((note, index, group) => {\n          const isFirstOrLast = index === 0 || index === group.length - 1;\n          const prevNote = group[index - 1];\n\n          const breaksOnEachRest = !config.beam_rests && note.isRest();\n          const breaksOnFirstOrLastRest = (config.beam_rests &&\n            config.beam_middle_only && note.isRest() && isFirstOrLast);\n\n          let breakOnStemChange = false;\n          if (config.maintain_stem_directions && prevNote &&\n            !note.isRest() && !prevNote.isRest()) {\n            const prevDirection = prevNote.getStemDirection();\n            const currentDirection = note.getStemDirection();\n            breakOnStemChange = currentDirection !== prevDirection;\n          }\n\n          const isUnbeamableDuration = parseInt(note.duration, 10) < 8;\n\n          // Determine if the group should be broken at this note\n          const shouldBreak = breaksOnEachRest || breaksOnFirstOrLastRest ||\n            breakOnStemChange || isUnbeamableDuration;\n\n          if (shouldBreak) {\n            // Add current group\n            if (tempGroup.length > 0) {\n              sanitizedGroups.push(tempGroup);\n            }\n\n            // Start a new group. Include the current note if the group\n            // was broken up by stem direction, as that note needs to start\n            // the next group of notes\n            tempGroup = breakOnStemChange ? [note] : [];\n          } else {\n            // Add note to group\n            tempGroup.push(note);\n          }\n        });\n\n        // If there is a remaining group, add it as well\n        if (tempGroup.length > 0) {\n          sanitizedGroups.push(tempGroup);\n        }\n      });\n\n      noteGroups = sanitizedGroups;\n    }\n\n    function formatStems() {\n      noteGroups.forEach(group => {\n        let stemDirection;\n        if (config.maintain_stem_directions) {\n          const note = findFirstNote(group);\n          stemDirection = note ? note.getStemDirection() : Stem.UP;\n        } else {\n          if (config.stem_direction) {\n            stemDirection = config.stem_direction;\n          } else {\n            stemDirection = calculateStemDirection(group);\n          }\n        }\n        applyStemDirection(group, stemDirection);\n      });\n    }\n\n    function findFirstNote(group) {\n      for (let i = 0; i < group.length; i++) {\n        const note = group[i];\n        if (!note.isRest()) {\n          return note;\n        }\n      }\n\n      return false;\n    }\n\n    function applyStemDirection(group, direction) {\n      group.forEach(note => {\n        note.setStemDirection(direction);\n      });\n    }\n\n    // Get all of the tuplets in all of the note groups\n    function getTuplets() {\n      const uniqueTuplets = [];\n\n      // Go through all of the note groups and inspect for tuplets\n      noteGroups.forEach(group => {\n        let tuplet = null;\n        group.forEach(note => {\n          if (note.tuplet && (tuplet !== note.tuplet)) {\n            tuplet = note.tuplet;\n            uniqueTuplets.push(tuplet);\n          }\n        });\n      });\n      return uniqueTuplets;\n    }\n\n\n    // Using closures to store the variables throughout the various functions\n    // IMO Keeps it this process lot cleaner - but not super consistent with\n    // the rest of the API's style - Silverwolf90 (Cyril)\n    createGroups();\n    sanitizeGroups();\n    formatStems();\n\n    // Get the notes to be beamed\n    const beamedNoteGroups = getBeamGroups();\n\n    // Get the tuplets in order to format them accurately\n    const allTuplets = getTuplets();\n\n    // Create a Vex.Flow.Beam from each group of notes to be beamed\n    const beams = [];\n    beamedNoteGroups.forEach(group => {\n      const beam = new Beam(group);\n\n      if (config.show_stemlets) {\n        beam.render_options.show_stemlets = true;\n      }\n      if (config.secondary_breaks) {\n        beam.render_options.secondary_break_ticks = Flow.durationToTicks(config.secondary_breaks);\n      }\n      if (config.flat_beams === true) {\n        beam.render_options.flat_beams = true;\n        beam.render_options.flat_beam_offset = config.flat_beam_offset;\n      }\n      beams.push(beam);\n    });\n\n    // Reformat tuplets\n    allTuplets.forEach(tuplet => {\n      // Set the tuplet location based on the stem direction\n      const direction = tuplet.notes[0].stem_direction === Stem.DOWN ?\n        Tuplet.LOCATION_BOTTOM : Tuplet.LOCATION_TOP;\n      tuplet.setTupletLocation(direction);\n\n      // If any of the notes in the tuplet are not beamed, draw a bracket.\n      let bracketed = false;\n      for (let i = 0; i < tuplet.notes.length; i++) {\n        const note = tuplet.notes[i];\n        if (note.beam === null) {\n          bracketed = true;\n          break;\n        }\n      }\n      tuplet.setBracketed(bracketed);\n    });\n\n    return beams;\n  }\n\n  constructor(notes, auto_stem) {\n    super();\n    this.setAttribute('type', 'Beam');\n\n    if (!notes || notes === []) {\n      throw new Vex.RuntimeError('BadArguments', 'No notes provided for beam.');\n    }\n\n    if (notes.length === 1) {\n      throw new Vex.RuntimeError('BadArguments', 'Too few notes for beam.');\n    }\n\n    // Validate beam line, direction and ticks.\n    this.ticks = notes[0].getIntrinsicTicks();\n\n    if (this.ticks >= Flow.durationToTicks('4')) {\n      throw new Vex.RuntimeError('BadArguments',\n        'Beams can only be applied to notes shorter than a quarter note.');\n    }\n\n    let i; // shared iterator\n    let note;\n\n    this.stem_direction = Stem.UP;\n\n    for (i = 0; i < notes.length; ++i) {\n      note = notes[i];\n      if (note.hasStem()) {\n        this.stem_direction = note.getStemDirection();\n        break;\n      }\n    }\n\n    let stem_direction = this.stem_direction;\n    // Figure out optimal stem direction based on given notes\n    if (auto_stem && notes[0].getCategory() === 'stavenotes') {\n      stem_direction = calculateStemDirection(notes);\n    } else if (auto_stem && notes[0].getCategory() === 'tabnotes') {\n      // Auto Stem TabNotes\n      const stem_weight = notes.reduce((memo, note) => memo + note.stem_direction, 0);\n\n      stem_direction = stem_weight > -1 ? Stem.UP : Stem.DOWN;\n    }\n\n    // Apply stem directions and attach beam to notes\n    for (i = 0; i < notes.length; ++i) {\n      note = notes[i];\n      if (auto_stem) {\n        note.setStemDirection(stem_direction);\n        this.stem_direction = stem_direction;\n      }\n      note.setBeam(this);\n    }\n\n    this.postFormatted = false;\n    this.notes = notes;\n    this.beam_count = this.getBeamCount();\n    this.break_on_indices = [];\n    this.render_options = {\n      beam_width: 5,\n      max_slope: 0.25,\n      min_slope: -0.25,\n      slope_iterations: 20,\n      slope_cost: 100,\n      show_stemlets: false,\n      stemlet_extension: 7,\n      partial_beam_length: 10,\n      flat_beams: false,\n      min_flat_beam_offset: 15,\n    };\n  }\n\n  // Get the notes in this beam\n  getNotes() { return this.notes; }\n\n  // Get the max number of beams in the set of notes\n  getBeamCount() {\n    const beamCounts = this.notes.map(note => note.getGlyph().beam_count);\n\n    const maxBeamCount = beamCounts.reduce((max, beamCount) => beamCount > max ? beamCount : max);\n\n    return maxBeamCount;\n  }\n\n  // Set which note `indices` to break the secondary beam at\n  breakSecondaryAt(indices) {\n    this.break_on_indices = indices;\n    return this;\n  }\n\n  // Return the y coordinate for linear function\n  getSlopeY(x, first_x_px, first_y_px, slope) {\n    return first_y_px + ((x - first_x_px) * slope);\n  }\n\n  // Calculate the best possible slope for the provided notes\n  calculateSlope() {\n    const {\n      notes,\n      stem_direction: stemDirection,\n      render_options: { max_slope, min_slope, slope_iterations, slope_cost },\n    } = this;\n\n    const firstNote = notes[0];\n    const initialSlope = getStemSlope(firstNote, notes[notes.length - 1]);\n    const increment = (max_slope - min_slope) / slope_iterations;\n    let minCost = Number.MAX_VALUE;\n    let bestSlope = 0;\n    let yShift = 0;\n\n    // iterate through slope values to find best weighted fit\n    for (let slope = min_slope; slope <= max_slope; slope += increment) {\n      let totalStemExtension = 0;\n      let yShiftTemp = 0;\n\n      // iterate through notes, calculating y shift and stem extension\n      for (let i = 1; i < notes.length; ++i) {\n        const note = notes[i];\n        const adjustedStemTipY = this.getSlopeY(\n          note.getStemX(),\n          firstNote.getStemX(),\n          firstNote.getStemExtents().topY,\n          slope\n        ) + yShiftTemp;\n\n        const stemTipY = note.getStemExtents().topY;\n        // beam needs to be shifted up to accommodate note\n        if (stemTipY * stemDirection < adjustedStemTipY * stemDirection) {\n          const diff = Math.abs(stemTipY - adjustedStemTipY);\n          yShiftTemp += diff * -stemDirection;\n          totalStemExtension += diff * i;\n        } else { // beam overshoots note, account for the difference\n          totalStemExtension += (stemTipY - adjustedStemTipY) * stemDirection;\n        }\n      }\n\n      // most engraving books suggest aiming for a slope about half the angle of the\n      // difference between the first and last notes' stem length;\n      const idealSlope = initialSlope / 2;\n      const distanceFromIdeal = Math.abs(idealSlope - slope);\n\n      // This tries to align most beams to something closer to the idealSlope, but\n      // doesn't go crazy. To disable, set this.render_options.slope_cost = 0\n      const cost = slope_cost * distanceFromIdeal + Math.abs(totalStemExtension);\n\n      // update state when a more ideal slope is found\n      if (cost < minCost) {\n        minCost = cost;\n        bestSlope = slope;\n        yShift = yShiftTemp;\n      }\n    }\n\n    this.slope = bestSlope;\n    this.y_shift = yShift;\n  }\n\n  // Calculate a slope and y-shift for flat beams\n  calculateFlatSlope() {\n    const {\n      notes, stem_direction,\n      render_options: { beam_width, min_flat_beam_offset, flat_beam_offset },\n    } = this;\n\n    // If a flat beam offset has not yet been supplied or calculated,\n    // generate one based on the notes in this particular note group\n    let total = 0;\n    let extremeY = 0;  // Store the highest or lowest note here\n    let extremeBeamCount = 0;  // The beam count of the extreme note\n    let currentExtreme = 0;\n    for (let i = 0; i < notes.length; i++) {\n      // Total up all of the offsets so we can average them out later\n      const note = notes[i];\n      const stemTipY = note.getStemExtents().topY;\n      total += stemTipY;\n\n      // Store the highest (stems-up) or lowest (stems-down) note so the\n      //  offset can be adjusted in case the average isn't enough\n      if (stem_direction === Stem.DOWN && currentExtreme < stemTipY) {\n        currentExtreme = stemTipY;\n        extremeY = Math.max(...note.getYs());\n        extremeBeamCount = note.getBeamCount();\n      } else if (\n        stem_direction === Stem.UP && (currentExtreme === 0 || currentExtreme > stemTipY)\n      ) {\n        currentExtreme = stemTipY;\n        extremeY = Math.min(...note.getYs());\n        extremeBeamCount = note.getBeamCount();\n      }\n    }\n\n    // Average the offsets to try and come up with a reasonable one that\n    //  works for all of the notes in the beam group.\n    let offset = total / notes.length;\n\n    // In case the average isn't long enough, add or subtract some more\n    //  based on the highest or lowest note (again, based on the stem\n    //  direction). This also takes into account the added height due to\n    //  the width of the beams.\n    const beamWidth = beam_width * 1.5;\n    const extremeTest = min_flat_beam_offset + (extremeBeamCount * beamWidth);\n    const newOffset = extremeY + (extremeTest * -stem_direction);\n    if (stem_direction === Stem.DOWN && offset < newOffset) {\n      offset = extremeY + extremeTest;\n    } else if (stem_direction === Stem.UP && offset > newOffset) {\n      offset = extremeY - extremeTest;\n    }\n\n    if (!(flat_beam_offset + this.render_options.flat_beam_offset_per_beam > 0)) {\n      // Set the offset for the group based on the calculations above.\n      this.render_options.flat_beam_offset = offset;\n    } else if (stem_direction === Stem.DOWN && offset > flat_beam_offset && !this.render_options.flat_beams) {\n       this.render_options.flat_beam_offset = offset;\n    } else if (stem_direction === Stem.UP && offset < flat_beam_offset && !this.render_options.flat_beams) {\n       this.render_options.flat_beam_offset = offset;\n    }\n\n    // for flat beams, the slope and y_shift are simply 0\n    this.slope = 0;\n    this.y_shift = 0;\n  }\n\n  getBeamYToDraw() {\n    const firstNote = this.notes[0];\n    const firstStemTipY = firstNote.getStemExtents().topY;\n    let beamY = firstStemTipY;\n\n    // For flat beams, set the first and last Y to the offset, rather than\n    //  using the note's stem extents.\n    if (this.render_options.flat_beams && this.render_options.flat_beam_offset + this.render_options.flat_beam_offset_per_beam > 0) {\n        let offset = this.render_options.flat_beam_offset;\n        if (this.render_options.flat_beam_offset_per_beam) {\n            offset += this.render_options.flat_beam_offset_per_beam * this.getBeamCount();\n        }\n        let maxY = this.notes[0].note_heads[0].y;\n        const minOrMax = this.stem_direction > 0 ? Math.min : Math.max;\n        for (const note of this.notes) {\n            for (const note_head of note.note_heads) {\n                maxY = minOrMax(maxY, note_head.y);\n            }\n        }\n      beamY = maxY + (offset * -this.stem_direction);\n    }\n    return beamY;\n  }\n\n  // Create new stems for the notes in the beam, so that each stem\n  // extends into the beams.\n  applyStemExtensions() {\n    const {\n      notes, slope, y_shift, stem_direction, beam_count,\n      render_options: {\n        show_stemlets,\n        stemlet_extension,\n        beam_width,\n      },\n    } = this;\n\n    const firstNote = notes[0];\n    const firstStemTipY = this.getBeamYToDraw();\n    const firstStemX = firstNote.getStemX();\n\n    for (let i = 0; i < notes.length; ++i) {\n      const note = notes[i];\n      const stemX = note.getStemX();\n      const { topY: stemTipY } = note.getStemExtents();\n      const beamedStemTipY = this.getSlopeY(stemX, firstStemX, firstStemTipY, slope) + y_shift;\n      const preBeamExtension = note.getStem().getExtension();\n      const beamExtension = stem_direction === Stem.UP\n        ? stemTipY - beamedStemTipY\n        : beamedStemTipY - stemTipY;\n\n      note.stem.setExtension(preBeamExtension + beamExtension);\n      note.stem.renderHeightAdjustment = -Stem.WIDTH / 2;\n\n      if (note.isRest() && show_stemlets) {\n        const beamWidth = beam_width;\n        const totalBeamWidth = ((beam_count - 1) * beamWidth * 1.5) + beamWidth;\n        note.stem\n          .setVisibility(true)\n          .setStemlet(true, totalBeamWidth + stemlet_extension);\n      }\n    }\n  }\n\n  // return upper level beam direction.\n  lookupBeamDirection(duration, prev_tick, tick, next_tick) {\n    if (duration === '4') {\n      return BEAM_LEFT;\n    }\n\n    const lookup_duration =  `${Flow.durationToNumber(duration) / 2}`;\n    const prev_note_gets_beam = prev_tick < Flow.durationToTicks(lookup_duration);\n    const next_note_gets_beam = next_tick < Flow.durationToTicks(lookup_duration);\n    const note_gets_beam = tick < Flow.durationToTicks(lookup_duration);\n\n    if (prev_note_gets_beam && next_note_gets_beam && note_gets_beam) {\n      return BEAM_BOTH;\n    } else if (prev_note_gets_beam && !next_note_gets_beam && note_gets_beam) {\n      return BEAM_LEFT;\n    } else if (!prev_note_gets_beam && next_note_gets_beam && note_gets_beam) {\n      return BEAM_RIGHT;\n    }\n\n    return this.lookupBeamDirection(lookup_duration, prev_tick, tick, next_tick);\n  }\n\n  // Get the x coordinates for the beam lines of specific `duration`\n  getBeamLines(duration) {\n    const tick_of_duration = Flow.durationToTicks(duration);\n    const beam_lines = [];\n    let beam_started = false;\n    let current_beam = null;\n    const partial_beam_length = this.render_options.partial_beam_length;\n    let previous_should_break = false;\n    let tick_tally = 0;\n    for (let i = 0; i < this.notes.length; ++i) {\n      const note = this.notes[i];\n\n      // See if we need to break secondary beams on this note.\n      const ticks = note.ticks.value();\n      tick_tally += ticks;\n      let should_break = false;\n\n      // 8th note beams are always drawn.\n      if (parseInt(duration, 10) >= 8) {\n        // First, check to see if any indices were set up through breakSecondaryAt()\n        should_break = this.break_on_indices.indexOf(i) !== -1;\n\n        // If the secondary breaks were auto-configured in the render options,\n        //  handle that as well.\n        if (this.render_options.secondary_break_ticks && tick_tally >=\n          this.render_options.secondary_break_ticks) {\n          tick_tally = 0;\n          should_break = true;\n        }\n      }\n      const note_gets_beam = note.getIntrinsicTicks() < tick_of_duration;\n\n      const stem_x = note.getStemX() - (Stem.WIDTH / 2);\n\n      // Check to see if the next note in the group will get a beam at this\n      //  level. This will help to inform the partial beam logic below.\n      const prev_note = this.notes[i - 1];\n      const next_note = this.notes[i + 1];\n      const next_note_gets_beam = next_note && next_note.getIntrinsicTicks() < tick_of_duration;\n      const prev_note_gets_beam = prev_note && prev_note.getIntrinsicTicks() < tick_of_duration;\n      const beam_alone = prev_note && next_note &&\n      note_gets_beam && !prev_note_gets_beam && !next_note_gets_beam;\n      // const beam_alone = note_gets_beam && !prev_note_gets_beam && !next_note_gets_beam;\n      if (note_gets_beam) {\n        // This note gets a beam at the current level\n        if (beam_started) {\n          // We're currently in the middle of a beam. Just continue it on to\n          //  the stem X of the current note.\n          current_beam = beam_lines[beam_lines.length - 1];\n          current_beam.end = stem_x;\n\n          // If a secondary beam break is set up, end the beam right now.\n          if (should_break) {\n            beam_started = false;\n            if (next_note && !next_note_gets_beam && current_beam.end === null) {\n              // This note gets a beam,.but the next one does not. This means\n              //  we need a partial pointing right.\n              current_beam.end = current_beam.start - partial_beam_length;\n            }\n          }\n        } else {\n          // No beam started yet. Start a new one.\n          current_beam = { start: stem_x, end: null, start_note: note };\n          beam_started = true;\n\n          if (beam_alone) {\n            // previous and next beam exists and does not get a beam but current gets it.\n            const prev_tick = prev_note.getIntrinsicTicks();\n            const next_tick = next_note.getIntrinsicTicks();\n            const tick = note.getIntrinsicTicks();\n            const beam_direction = this.lookupBeamDirection(duration, prev_tick, tick, next_tick);\n\n            if ([BEAM_LEFT, BEAM_BOTH].includes(beam_direction)) {\n              current_beam.end = current_beam.start - partial_beam_length;\n            } else {\n              current_beam.end = current_beam.start + partial_beam_length;\n            }\n          } else if (!next_note_gets_beam) {\n            // The next note doesn't get a beam. Draw a partial.\n            if ((previous_should_break || i === 0) && next_note) {\n              // This is the first note (but not the last one), or it is\n              //  following a secondary break. Draw a partial to the right.\n              current_beam.end = current_beam.start + partial_beam_length;\n            } else {\n              // By default, draw a partial to the left.\n              current_beam.end = current_beam.start - partial_beam_length;\n            }\n          } else if (should_break) {\n            // This note should have a secondary break after it. Even though\n            //  we just started a beam, it needs to end immediately.\n            current_beam.end = current_beam.start - partial_beam_length;\n            beam_started = false;\n          }\n          beam_lines.push(current_beam);\n        }\n      } else {\n        // The current note does not get a beam.\n        beam_started = false;\n      }\n\n      // Store the secondary break flag to inform the partial beam logic in\n      //  the next iteration of the loop.\n      previous_should_break = should_break;\n    }\n\n    // Add a partial beam pointing left if this is the last note in the group\n    const last_beam = beam_lines[beam_lines.length - 1];\n    if (last_beam && last_beam.end === null) {\n      last_beam.end = last_beam.start - partial_beam_length;\n    }\n    return beam_lines;\n  }\n\n  // Render the stems for each notes\n  drawStems() {\n    this.notes.forEach(note => {\n      if (note.getStem()) {\n        this.context.openGroup('stem', note.getAttribute('id') + '-stem');\n        note.getStem().setContext(this.context).draw();\n        this.context.closeGroup();\n      }\n    }, this);\n  }\n\n  // Render the beam lines\n  drawBeamLines() {\n    this.checkContext();\n\n    const valid_beam_durations = ['4', '8', '16', '32', '64'];\n\n    const firstNote = this.notes[0];\n    let beamY = this.getBeamYToDraw();\n    const firstStemX = firstNote.getStemX();\n    const beamThickness = this.render_options.beam_width * this.stem_direction;\n\n    const beamsPerStartNote = {};\n    for (const note of this.notes) {\n      beamsPerStartNote[note.getAttribute(\"id\")] = 0;\n    }\n    \n    // Draw the beams.\n    for (let i = 0; i < valid_beam_durations.length; ++i) {\n      const duration = valid_beam_durations[i];\n      const beamLines = this.getBeamLines(duration);\n      \n      for (let j = 0; j < beamLines.length; ++j) {\n        const beam_line = beamLines[j];\n        const startBeamX = beam_line.start;\n\n        const startNoteId = beam_line.start_note.getAttribute(\"id\");\n        const beamNumber = beamsPerStartNote[startNoteId];\n        beamsPerStartNote[startNoteId]++;\n\n        const startBeamY = this.getSlopeY(startBeamX, firstStemX, beamY, this.slope);\n        const lastBeamX = beam_line.end;\n        const lastBeamY = this.getSlopeY(lastBeamX, firstStemX, beamY, this.slope);\n\n        const noteSVGId = startNoteId;\n        this.context.openGroup('beam', `${noteSVGId}-beam${beamNumber}`);\n        this.context.beginPath();\n        this.context.moveTo(startBeamX, startBeamY);\n        this.context.lineTo(startBeamX, startBeamY + beamThickness);\n        this.context.lineTo(lastBeamX + 1, lastBeamY + beamThickness);\n        this.context.lineTo(lastBeamX + 1, lastBeamY);\n        this.context.closePath();\n        this.context.fill();\n        this.context.closeGroup();\n      }\n\n      beamY += beamThickness * 1.5;\n    }\n  }\n\n  // Pre-format the beam\n  preFormat() { return this; }\n\n  // Post-format the beam. This can only be called after\n  // the notes in the beam have both `x` and `y` values. ie: they've\n  // been formatted and have staves\n  postFormat() {\n    if (this.postFormatted) return;\n\n    // Calculate a smart slope if we're not forcing the beams to be flat.\n    if (this.notes[0].getCategory() === 'tabnotes' || this.render_options.flat_beams) {\n      this.calculateFlatSlope();\n    } else {\n      this.calculateSlope();\n    }\n    this.applyStemExtensions();\n\n    this.postFormatted = true;\n  }\n\n  // Render the beam to the canvas context\n  draw() {\n    this.checkContext();\n    this.setRendered();\n    if (this.unbeamable) return;\n\n    if (!this.postFormatted) {\n      this.postFormat();\n    }\n\n    this.drawStems();\n    this.applyStyle();\n    this.drawBeamLines();\n    this.restoreStyle();\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n//\n// This file implements the main Voice class. It's mainly a container\n// object to group `Tickables` for formatting.\n\nimport { Vex } from './vex';\nimport { Element } from './element';\nimport { Flow } from './tables';\nimport { Fraction } from './fraction';\n\nexport class Voice extends Element {\n  // Modes allow the addition of ticks in three different ways:\n  //\n  // STRICT: This is the default. Ticks must fill the voice.\n  // SOFT:   Ticks can be added without restrictions.\n  // FULL:   Ticks do not need to fill the voice, but can't exceed the maximum\n  //         tick length.\n  static get Mode() {\n    return {\n      STRICT: 1,\n      SOFT: 2,\n      FULL: 3,\n    };\n  }\n\n  constructor(time) {\n    super();\n    this.setAttribute('type', 'Voice');\n\n    // Time signature shortcut: \"4/4\", \"3/8\", etc.\n    if (typeof(time) === 'string') {\n      const match = time.match(/(\\d+)\\/(\\d+)/);\n      if (match) {\n        time = {\n          num_beats: match[1],\n          beat_value: match[2],\n          resolution: Flow.RESOLUTION,\n        };\n      }\n    }\n\n    // Default time sig is 4/4\n    this.time = Vex.Merge({\n      num_beats: 4,\n      beat_value: 4,\n      resolution: Flow.RESOLUTION,\n    }, time);\n\n    // Recalculate total ticks.\n    this.totalTicks = new Fraction(\n      this.time.num_beats * (this.time.resolution / this.time.beat_value), 1);\n\n    this.resolutionMultiplier = 1;\n\n    // Set defaults\n    this.tickables = [];\n    this.ticksUsed = new Fraction(0, 1);\n    this.smallestTickCount = this.totalTicks.clone();\n    this.largestTickWidth = 0;\n    this.stave = null;\n    // Do we care about strictly timed notes\n    this.mode = Voice.Mode.STRICT;\n\n    // This must belong to a VoiceGroup\n    this.voiceGroup = null;\n  }\n\n  // Get the total ticks in the voice\n  getTotalTicks() { return this.totalTicks; }\n\n  // Get the total ticks used in the voice by all the tickables\n  getTicksUsed() { return this.ticksUsed; }\n\n  // Get the largest width of all the tickables\n  getLargestTickWidth() { return this.largestTickWidth; }\n\n  // Get the tick count for the shortest tickable\n  getSmallestTickCount() { return this.smallestTickCount; }\n\n  // Get the tickables in the voice\n  getTickables() { return this.tickables; }\n\n  // Get/set the voice mode, use a value from `Voice.Mode`\n  getMode() { return this.mode; }\n  setMode(mode) { this.mode = mode; return this; }\n\n  // Get the resolution multiplier for the voice\n  getResolutionMultiplier() { return this.resolutionMultiplier; }\n\n  // Get the actual tick resolution for the voice\n  getActualResolution() { return this.resolutionMultiplier * this.time.resolution; }\n\n  // Set the voice's stave\n  setStave(stave) {\n    this.stave = stave;\n    this.boundingBox = null; // Reset bounding box so we can reformat\n    return this;\n  }\n\n  // Get the bounding box for the voice\n  getBoundingBox() {\n    let stave;\n    let boundingBox;\n    let bb;\n    let i;\n\n    if (!this.boundingBox) {\n      if (!this.stave) throw new Vex.RERR('NoStave', \"Can't get bounding box without stave.\");\n      stave = this.stave;\n      boundingBox = null;\n\n      for (i = 0; i < this.tickables.length; ++i) {\n        this.tickables[i].setStave(stave);\n\n        bb = this.tickables[i].getBoundingBox();\n        if (!bb) continue;\n\n        boundingBox = boundingBox ? boundingBox.mergeWith(bb) : bb;\n      }\n\n      this.boundingBox = boundingBox;\n    }\n    return this.boundingBox;\n  }\n\n  // Every tickable must be associated with a voiceGroup. This allows formatters\n  // and preformatters to associate them with the right modifierContexts.\n  getVoiceGroup() {\n    if (!this.voiceGroup) {\n      throw new Vex.RERR('NoVoiceGroup', 'No voice group for voice.');\n    }\n\n    return this.voiceGroup;\n  }\n\n  // Set the voice group\n  setVoiceGroup(g) { this.voiceGroup = g; return this; }\n\n  // Set the voice mode to strict or soft\n  setStrict(strict) {\n    this.mode = strict ? Voice.Mode.STRICT : Voice.Mode.SOFT;\n    return this;\n  }\n\n  // Determine if the voice is complete according to the voice mode\n  isComplete() {\n    if (this.mode === Voice.Mode.STRICT || this.mode === Voice.Mode.FULL) {\n      return this.ticksUsed.equals(this.totalTicks);\n    } else {\n      return true;\n    }\n  }\n\n  // Add a tickable to the voice\n  addTickable(tickable) {\n    if (!tickable.shouldIgnoreTicks()) {\n      const ticks = tickable.getTicks();\n\n      // Update the total ticks for this line.\n      this.ticksUsed.add(ticks);\n\n      if (\n        (this.mode === Voice.Mode.STRICT || this.mode === Voice.Mode.FULL) &&\n        this.ticksUsed.greaterThan(this.totalTicks)\n      ) {\n        this.ticksUsed.subtract(ticks);\n        throw new Vex.RERR('BadArgument', 'Too many ticks.');\n      }\n\n      // Track the smallest tickable for formatting.\n      if (ticks.lessThan(this.smallestTickCount)) {\n        this.smallestTickCount = ticks.clone();\n      }\n\n      this.resolutionMultiplier = this.ticksUsed.denominator;\n\n      // Expand total ticks using denominator from ticks used.\n      this.totalTicks.add(0, this.ticksUsed.denominator);\n    }\n\n    // Add the tickable to the line.\n    this.tickables.push(tickable);\n    tickable.setVoice(this);\n    return this;\n  }\n\n  // Add an array of tickables to the voice.\n  addTickables(tickables) {\n    for (let i = 0; i < tickables.length; ++i) {\n      this.addTickable(tickables[i]);\n    }\n\n    return this;\n  }\n\n  // Preformats the voice by applying the voice's stave to each note.\n  preFormat() {\n    if (this.preFormatted) return this;\n\n    this.tickables.forEach((tickable) => {\n      if (!tickable.getStave()) {\n        tickable.setStave(this.stave);\n      }\n    });\n\n    this.preFormatted = true;\n    return this;\n  }\n\n  // Render the voice onto the canvas `context` and an optional `stave`.\n  // If `stave` is omitted, it is expected that the notes have staves\n  // already set.\n  draw(context = this.context, stave = this.stave) {\n    this.setRendered();\n    let boundingBox = null;\n    for (let i = 0; i < this.tickables.length; ++i) {\n      const tickable = this.tickables[i];\n\n      // Set the stave if provided\n      if (stave) tickable.setStave(stave);\n\n      if (!tickable.getStave()) {\n        throw new Vex.RuntimeError(\n          'MissingStave', 'The voice cannot draw tickables without staves.'\n        );\n      }\n\n      if (i === 0) boundingBox = tickable.getBoundingBox();\n\n      if (i > 0 && boundingBox) {\n        const tickable_bb = tickable.getBoundingBox();\n        if (tickable_bb) boundingBox.mergeWith(tickable_bb);\n      }\n\n      tickable.setContext(context);\n      tickable.drawWithStyle();\n    }\n\n    this.boundingBox = boundingBox;\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n\nimport { Vex } from './vex';\nimport { Element } from './element';\nimport { Flow } from './tables';\nimport { Glyph } from './glyph';\n\nfunction drawBoldDoubleLine(ctx, type, topX, topY, botY) {\n  if (\n    type !== StaveConnector.type.BOLD_DOUBLE_LEFT &&\n    type !== StaveConnector.type.BOLD_DOUBLE_RIGHT\n  ) {\n    throw new Vex.RERR(\n      'InvalidConnector', 'A REPEAT_BEGIN or REPEAT_END type must be provided.'\n    );\n  }\n\n  let x_shift = 3;\n  let variableWidth = 3.5; // Width for avoiding anti-aliasing width issues\n  const thickLineOffset = 2; // For aesthetics\n\n  if (type === StaveConnector.type.BOLD_DOUBLE_RIGHT) {\n    x_shift = -5; // Flips the side of the thin line\n    variableWidth = 3;\n  }\n\n  // Thin line\n  ctx.fillRect(topX + x_shift, topY, 1, botY - topY);\n  // Thick line\n  ctx.fillRect(topX - thickLineOffset, topY, variableWidth, botY - topY);\n}\n\nexport class StaveConnector extends Element {\n  // SINGLE_LEFT and SINGLE are the same value for compatibility\n  // with older versions of vexflow which didn't have right sided\n  // stave connectors\n  static get type() {\n    return {\n      SINGLE_RIGHT: 0,\n      SINGLE_LEFT: 1,\n      SINGLE: 1,\n      DOUBLE: 2,\n      BRACE: 3,\n      BRACKET: 4,\n      BOLD_DOUBLE_LEFT: 5,\n      BOLD_DOUBLE_RIGHT: 6,\n      THIN_DOUBLE: 7,\n      NONE: 8,\n    };\n  }\n\n  static get typeString() {\n    return {\n      singleRight: StaveConnector.type.SINGLE_RIGHT,\n      singleLeft: StaveConnector.type.SINGLE_LEFT,\n      single: StaveConnector.type.SINGLE,\n      double: StaveConnector.type.DOUBLE,\n      brace: StaveConnector.type.BRACE,\n      bracket: StaveConnector.type.BRACKET,\n      boldDoubleLeft: StaveConnector.type.BOLD_DOUBLE_LEFT,\n      boldDoubleRight: StaveConnector.type.BOLD_DOUBLE_RIGHT,\n      thinDouble: StaveConnector.type.THIN_DOUBLE,\n      none: StaveConnector.type.NONE,\n    };\n  }\n\n  constructor(top_stave, bottom_stave) {\n    super();\n    this.setAttribute('type', 'StaveConnector');\n\n    this.thickness = Flow.STAVE_LINE_THICKNESS;\n    this.width = 3;\n    this.top_stave = top_stave;\n    this.bottom_stave = bottom_stave;\n    this.type = StaveConnector.type.DOUBLE;\n    this.font = {\n      family: 'times',\n      size: 16,\n      weight: 'normal',\n    };\n    // 1. Offset Bold Double Left to align with offset Repeat Begin bars\n    // 2. Offset BRACE type not to overlap with another StaveConnector\n    this.x_shift = 0;\n    this.texts = [];\n  }\n\n  setType(type) {\n    type = typeof(type) === 'string'\n      ? StaveConnector.typeString[type]\n      : type;\n\n    if (type >= StaveConnector.type.SINGLE_RIGHT && type <= StaveConnector.type.NONE) {\n      this.type = type;\n    }\n    return this;\n  }\n\n  setText(text, options) {\n    this.texts.push({\n      content: text,\n      options: Vex.Merge({ shift_x: 0, shift_y: 0 }, options),\n    });\n    return this;\n  }\n\n  setFont(font) {\n    Vex.Merge(this.font, font);\n  }\n\n  setXShift(x_shift) {\n    if (typeof x_shift !== 'number') {\n      throw Vex.RERR('InvalidType', 'x_shift must be a Number');\n    }\n\n    this.x_shift = x_shift;\n    return this;\n  }\n\n  draw() {\n    const ctx = this.checkContext();\n    this.setRendered();\n\n    let topY = this.top_stave.getYForLine(0);\n    let botY = this.bottom_stave.getYForLine(this.bottom_stave.getNumLines() - 1) +\n      this.thickness;\n    let width = this.width;\n    let topX = this.top_stave.getX();\n\n    const isRightSidedConnector = (\n      this.type === StaveConnector.type.SINGLE_RIGHT ||\n      this.type === StaveConnector.type.BOLD_DOUBLE_RIGHT ||\n      this.type === StaveConnector.type.THIN_DOUBLE\n    );\n\n    if (isRightSidedConnector) {\n      topX = this.top_stave.getX() + this.top_stave.width;\n    }\n\n    let attachment_height = botY - topY;\n    switch (this.type) {\n      case StaveConnector.type.SINGLE:\n        width = 1;\n        break;\n      case StaveConnector.type.SINGLE_LEFT:\n        width = 1;\n        break;\n      case StaveConnector.type.SINGLE_RIGHT:\n        width = 1;\n        break;\n      case StaveConnector.type.DOUBLE:\n        topX -= (this.width + 2);\n        break;\n      case StaveConnector.type.BRACE: {\n        width = 12;\n        // May need additional code to draw brace\n        const x1 = this.top_stave.getX() - 2 + this.x_shift;\n        const y1 = topY;\n        const x3 = x1;\n        const y3 = botY;\n        const x2 = x1 - width;\n        const y2 = y1 + attachment_height / 2.0;\n        const cpx1 = x2 - (0.90 * width);\n        const cpy1 = y1 + (0.2 * attachment_height);\n        const cpx2 = x1 + (1.10 * width);\n        const cpy2 = y2 - (0.135 * attachment_height);\n        const cpx3 = cpx2;\n        const cpy3 = y2 + (0.135 * attachment_height);\n        const cpx4 = cpx1;\n        const cpy4 = y3 - (0.2 * attachment_height);\n        const cpx5 = x2 - width;\n        const cpy5 = cpy4;\n        const cpx6 = x1 + (0.40 * width);\n        const cpy6 = y2 + (0.135 * attachment_height);\n        const cpx7 = cpx6;\n        const cpy7 = y2 - (0.135 * attachment_height);\n        const cpx8 = cpx5;\n        const cpy8 = cpy1;\n        ctx.beginPath();\n        ctx.moveTo(x1, y1);\n        ctx.bezierCurveTo(cpx1, cpy1, cpx2, cpy2, x2, y2);\n        ctx.bezierCurveTo(cpx3, cpy3, cpx4, cpy4, x3, y3);\n        ctx.bezierCurveTo(cpx5, cpy5, cpx6, cpy6, x2, y2);\n        ctx.bezierCurveTo(cpx7, cpy7, cpx8, cpy8, x1, y1);\n        ctx.fill();\n        ctx.stroke();\n        break;\n      } case StaveConnector.type.BRACKET:\n        topY -= 4;\n        botY += 4;\n        attachment_height = botY - topY;\n        Glyph.renderGlyph(ctx, topX - 5, topY - 3, 40, 'v1b', true);\n        Glyph.renderGlyph(ctx, topX - 5, botY + 3, 40, 'v10', true);\n        topX -= (this.width + 2);\n        break;\n      case StaveConnector.type.BOLD_DOUBLE_LEFT:\n        drawBoldDoubleLine(ctx, this.type, topX + this.x_shift, topY, botY);\n        break;\n      case StaveConnector.type.BOLD_DOUBLE_RIGHT:\n        drawBoldDoubleLine(ctx, this.type, topX, topY, botY);\n        break;\n      case StaveConnector.type.THIN_DOUBLE:\n        width = 1;\n        break;\n      case StaveConnector.type.NONE:\n        break;\n      default:\n        throw new Vex.RERR(\n          'InvalidType', `The provided StaveConnector.type (${this.type}) is invalid`\n        );\n    }\n\n    if (\n      this.type !== StaveConnector.type.BRACE &&\n      this.type !== StaveConnector.type.BOLD_DOUBLE_LEFT &&\n      this.type !== StaveConnector.type.BOLD_DOUBLE_RIGHT &&\n      this.type !== StaveConnector.type.NONE\n    ) {\n      ctx.fillRect(topX, topY, width, attachment_height);\n    }\n\n    // If the connector is a thin double barline, draw the paralell line\n    if (this.type === StaveConnector.type.THIN_DOUBLE) {\n      ctx.fillRect(topX - 3, topY, width, attachment_height);\n    }\n\n    ctx.save();\n    ctx.lineWidth = 2;\n    ctx.setFont(this.font.family, this.font.size, this.font.weight);\n    // Add stave connector text\n    for (let i = 0; i < this.texts.length; i++) {\n      const text = this.texts[i];\n      const text_width = ctx.measureText('' + text.content).width;\n      const x = this.top_stave.getX() - text_width - 24 + text.options.shift_x;\n      const y = (this.top_stave.getYForLine(0) + this.bottom_stave.getBottomLineY()) / 2 +\n        text.options.shift_y;\n\n      ctx.fillText('' + text.content, x, y + 4);\n    }\n    ctx.restore();\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n// The tickable interface. Tickables are things that sit on a score and\n// have a duration, i.e., they occupy space in the musical rendering dimension.\n\nimport { Vex } from './vex';\nimport { Element } from './element';\nimport { Flow } from './tables';\nimport { Fraction } from './fraction';\n\nexport class Tickable extends Element {\n  constructor() {\n    super();\n    this.setAttribute('type', 'Tickable');\n\n    // These properties represent the duration of\n    // this tickable element.\n    this.ticks = new Fraction(0, 1);\n    this.intrinsicTicks = 0;\n    this.tickMultiplier = new Fraction(1, 1);\n\n    this.width = 0;\n    this.x_shift = 0; // Shift from tick context\n    this.voice = null;\n    this.tickContext = null;\n    this.modifierContext = null;\n    this.modifiers = [];\n    this.preFormatted = false;\n    this.postFormatted = false;\n    this.tuplet = null;\n    this.tupletStack = [];\n\n    this.align_center = false;\n    this.center_x_shift = 0; // Shift from tick context if center aligned\n\n    // This flag tells the formatter to ignore this tickable during\n    // formatting and justification. It is set by tickables such as BarNote.\n    this.ignore_ticks = false;\n\n    // This is a space for an external formatting class or function to maintain\n    // metrics.\n    this.formatterMetrics = {\n      // The freedom of a tickable is the distance it can move without colliding\n      // with neighboring elements. A formatter can set these values during its\n      // formatting pass, which a different formatter can then use to fine tune.\n      freedom: { left: 0, right: 0 },\n\n      // The simplified rational duration of this tick as a string. It can be\n      // used as an index to a map or hashtable.\n      duration: '',\n\n      // The number of formatting iterations undergone.\n      iterations: 0,\n\n      // The space in pixels allocated by this formatter, along with the mean space\n      // for tickables of this duration, and the deviation from the mean.\n      space: {\n        used: 0,\n        mean: 0,\n        deviation: 0,\n      },\n    };\n  }\n\n  reset() { return this; }\n  getTicks() { return this.ticks; }\n  shouldIgnoreTicks() { return this.ignore_ticks; }\n  getWidth() { return this.width; }\n\n  getFormatterMetrics() { return this.formatterMetrics; }\n\n  setXShift(x) { this.x_shift = x; }\n  getCenterXShift() {\n    if (this.isCenterAligned()) {\n      return this.center_x_shift;\n    }\n\n    return 0;\n  }\n  isCenterAligned() { return this.align_center; }\n  setCenterAlignment(align_center) {\n    this.align_center = align_center;\n    return this;\n  }\n\n  // Every tickable must be associated with a voice. This allows formatters\n  // and preFormatter to associate them with the right modifierContexts.\n  getVoice() {\n    if (!this.voice) throw new Vex.RERR('NoVoice', 'Tickable has no voice.');\n    return this.voice;\n  }\n  setVoice(voice) { this.voice = voice; }\n  getTuplet() { return this.tuplet; }\n\n  /*\n   * resetTuplet\n   * @param tuplet -- the specific tuplet to reset\n   *   if this is not provided, all tuplets are reset.\n   * @returns this\n   *\n   * Removes any prior tuplets from the tick calculation and\n   * resets the intrinsic tick value to\n   */\n  resetTuplet(tuplet) {\n    let noteCount;\n    let notesOccupied;\n    if (tuplet) {\n      const i = this.tupletStack.indexOf(tuplet);\n      if (i !== -1) {\n        this.tupletStack.splice(i, 1);\n        noteCount = tuplet.getNoteCount();\n        notesOccupied = tuplet.getNotesOccupied();\n\n        // Revert old multiplier by inverting numerator & denom.:\n        this.applyTickMultiplier(noteCount, notesOccupied);\n      }\n      return this;\n    }\n\n    while (this.tupletStack.length) {\n      tuplet = this.tupletStack.pop();\n      noteCount = tuplet.getNoteCount();\n      notesOccupied = tuplet.getNotesOccupied();\n\n      // Revert old multiplier by inverting numerator & denom.:\n      this.applyTickMultiplier(noteCount, notesOccupied);\n    }\n    return this;\n  }\n\n  setTuplet(tuplet) {\n    // Attach to new tuplet\n\n    if (tuplet) {\n      this.tupletStack.push(tuplet);\n\n      const noteCount = tuplet.getNoteCount();\n      const notesOccupied = tuplet.getNotesOccupied();\n\n      this.applyTickMultiplier(notesOccupied, noteCount);\n    }\n\n    this.tuplet = tuplet;\n\n    return this;\n  }\n\n  /** optional, if tickable has modifiers **/\n  addToModifierContext(mc) {\n    this.modifierContext = mc;\n    // Add modifiers to modifier context (if any)\n    this.preFormatted = false;\n  }\n\n  /** optional, if tickable has modifiers **/\n  addModifier(mod) {\n    this.modifiers.push(mod);\n    this.preFormatted = false;\n    return this;\n  }\n  getModifiers() {\n    return this.modifiers;\n  }\n  setTickContext(tc) {\n    this.tickContext = tc;\n    this.preFormatted = false;\n  }\n  preFormat() {\n    if (this.preFormatted) return;\n\n    this.width = 0;\n    if (this.modifierContext) {\n      this.modifierContext.preFormat();\n      this.width += this.modifierContext.getWidth();\n    }\n  }\n  postFormat() {\n    if (this.postFormatted) return this;\n    this.postFormatted = true;\n    return this;\n  }\n  getIntrinsicTicks() {\n    return this.intrinsicTicks;\n  }\n  setIntrinsicTicks(intrinsicTicks) {\n    this.intrinsicTicks = intrinsicTicks;\n    this.ticks = this.tickMultiplier.clone().multiply(this.intrinsicTicks);\n  }\n  getTickMultiplier() {\n    return this.tickMultiplier;\n  }\n  applyTickMultiplier(numerator, denominator) {\n    this.tickMultiplier.multiply(numerator, denominator);\n    this.ticks = this.tickMultiplier.clone().multiply(this.intrinsicTicks);\n  }\n  setDuration(duration) {\n    const ticks = duration.numerator * (Flow.RESOLUTION / duration.denominator);\n    this.ticks = this.tickMultiplier.clone().multiply(ticks);\n    this.intrinsicTicks = this.ticks.value();\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n//\n// This file implements an abstract interface for notes and chords that\n// are rendered on a stave. Notes have some common properties: All of them\n// have a value (e.g., pitch, fret, etc.) and a duration (quarter, half, etc.)\n//\n// Some notes have stems, heads, dots, etc. Most notational elements that\n// surround a note are called *modifiers*, and every note has an associated\n// array of them. All notes also have a rendering context and belong to a stave.\n\nimport { Vex } from './vex';\nimport { Flow } from './tables';\nimport { Tickable } from './tickable';\n\nexport class Note extends Tickable {\n  static get CATEGORY() { return 'note'; }\n  static get STAVEPADDING() { return 12; }\n\n  // Debug helper. Displays various note metrics for the given\n  // note.\n  static plotMetrics(ctx, note, yPos) {\n    const metrics = note.getMetrics();\n    const xStart = note.getAbsoluteX() - metrics.modLeftPx - metrics.extraLeftPx;\n    const xPre1 = note.getAbsoluteX() - metrics.extraLeftPx;\n    const xAbs = note.getAbsoluteX();\n    const xPost1 = note.getAbsoluteX() + metrics.noteWidth;\n    const xPost2 = note.getAbsoluteX() + metrics.noteWidth + metrics.extraRightPx;\n    const xEnd = note.getAbsoluteX()\n      + metrics.noteWidth\n      + metrics.extraRightPx\n      + metrics.modRightPx;\n    const xFreedomRight = xEnd + note.getFormatterMetrics().freedom.right;\n\n    const xWidth = xEnd - xStart;\n    ctx.save();\n    ctx.setFont('Arial', 8, '');\n    ctx.fillText(Math.round(xWidth) + 'px', xStart + note.getXShift(), yPos);\n\n    const y = (yPos + 7);\n    function stroke(x1, x2, color, yy = y) {\n      ctx.beginPath();\n      ctx.setStrokeStyle(color);\n      ctx.setFillStyle(color);\n      ctx.setLineWidth(3);\n      ctx.moveTo(x1 + note.getXShift(), yy);\n      ctx.lineTo(x2 + note.getXShift(), yy);\n      ctx.stroke();\n    }\n\n    stroke(xStart, xPre1, 'red');\n    stroke(xPre1, xAbs, '#999');\n    stroke(xAbs, xPost1, 'green');\n    stroke(xPost1, xPost2, '#999');\n    stroke(xPost2, xEnd, 'red');\n    stroke(xEnd, xFreedomRight, '#DD0');\n    stroke(xStart - note.getXShift(), xStart, '#BBB'); // Shift\n    Vex.drawDot(ctx, xAbs + note.getXShift(), y, 'blue');\n\n    const formatterMetrics = note.getFormatterMetrics();\n    if (formatterMetrics.iterations > 0) {\n      const spaceDeviation = formatterMetrics.space.deviation;\n      const prefix = spaceDeviation >= 0 ? '+' : '';\n      ctx.setFillStyle('red');\n      ctx.fillText(prefix + Math.round(spaceDeviation),\n        xAbs + note.getXShift(), yPos - 10);\n    }\n    ctx.restore();\n  }\n\n  // Every note is a tickable, i.e., it can be mutated by the `Formatter` class for\n  // positioning and layout.\n  // To create a new note you need to provide a `noteStruct`, which consists\n  // of the following fields:\n  //\n  // `type`: The note type (e.g., `r` for rest, `s` for slash notes, etc.)\n  // `dots`: The number of dots, which affects the duration.\n  // `duration`: The time length (e.g., `q` for quarter, `h` for half, `8` for eighth etc.)\n  //\n  // The range of values for these parameters are available in `src/tables.js`.\n  constructor(noteStruct) {\n    super();\n    this.setAttribute('type', 'Note');\n\n    if (!noteStruct) {\n      throw new Vex.RuntimeError(\n        'BadArguments', 'Note must have valid initialization data to identify duration and type.'\n      );\n    }\n\n    // Parse `noteStruct` and get note properties.\n    const initStruct = Flow.parseNoteStruct(noteStruct);\n    if (!initStruct) {\n      throw new Vex.RuntimeError(\n        'BadArguments', `Invalid note initialization object: ${JSON.stringify(noteStruct)}`\n      );\n    }\n\n    // Set note properties from parameters.\n    this.duration = initStruct.duration;\n    this.dots = initStruct.dots;\n    this.noteType = initStruct.type;\n    this.customTypes = initStruct.customTypes;\n\n    if (noteStruct.duration_override) {\n      // Custom duration\n      this.setDuration(noteStruct.duration_override);\n    } else {\n      // Default duration\n      this.setIntrinsicTicks(initStruct.ticks);\n    }\n\n    this.modifiers = [];\n\n    // Get the glyph code for this note from the font.\n    this.glyph = Flow.getGlyphProps(this.duration, this.noteType);\n    this.customGlyphs = this.customTypes.map(t => Flow.getGlyphProps(this.duration, t));\n\n    if (this.positions && (typeof (this.positions) !== 'object' || !this.positions.length)) {\n      throw new Vex.RuntimeError('BadArguments', 'Note keys must be array type.');\n    }\n\n    // Note to play for audio players.\n    this.playNote = null;\n\n    // Positioning contexts used by the Formatter.\n    this.tickContext = null;    // The current tick context.\n    this.modifierContext = null;\n    this.ignore_ticks = false;\n\n    // Positioning variables\n    this.width = 0;             // Width in pixels calculated after preFormat\n    this.extraLeftPx = 0;       // Extra room on left for offset note head\n    this.extraRightPx = 0;      // Extra room on right for offset note head\n    this.x_shift = 0;           // X shift from tick context X\n    this.left_modPx = 0;        // Max width of left modifiers\n    this.right_modPx = 0;       // Max width of right modifiers\n    this.voice = null;          // The voice that this note is in\n    this.preFormatted = false;  // Is this note preFormatted?\n    this.ys = [];               // list of y coordinates for each note\n    // we need to hold on to these for ties and beams.\n\n    if (noteStruct.align_center) {\n      this.setCenterAlignment(noteStruct.align_center);\n    }\n\n    // The render surface.\n    this.stave = null;\n    this.render_options = {\n      annotation_spacing: 5,\n      stave_padding: Note.STAVEPADDING,\n    };\n  }\n\n  // Get and set the play note, which is arbitrary data that can be used by an\n  // audio player.\n  getPlayNote() { return this.playNote; }\n  setPlayNote(note) { this.playNote = note; return this; }\n\n  // Don't play notes by default, call them rests. This is also used by things like\n  // beams and dots for positioning.\n  isRest() { return false; }\n\n  // TODO(0xfe): Why is this method here?\n  addStroke(index, stroke) {\n    stroke.setNote(this);\n    stroke.setIndex(index);\n    this.modifiers.push(stroke);\n    this.setPreFormatted(false);\n    return this;\n  }\n\n  // Get and set the target stave.\n  getStave() { return this.stave; }\n  setStave(stave) {\n    this.stave = stave;\n    this.setYs([stave.getYForLine(0)]); // Update Y values if the stave is changed.\n    this.context = this.stave.context;\n    return this;\n  }\n\n  // `Note` is not really a modifier, but is used in\n  // a `ModifierContext`.\n  getCategory() { return Note.CATEGORY; }\n\n  // Set the rendering context for the note.\n  setContext(context) { this.context = context; return this; }\n\n  // Get and set spacing to the left and right of the notes.\n  getExtraLeftPx() { return this.extraLeftPx; }\n  getExtraRightPx() { return this.extraRightPx; }\n  setExtraLeftPx(x) { this.extraLeftPx = x; return this; }\n  setExtraRightPx(x) { this.extraRightPx = x; return this; }\n\n  // Returns true if this note has no duration (e.g., bar notes, spacers, etc.)\n  shouldIgnoreTicks() { return this.ignore_ticks; }\n\n  // Get the stave line number for the note.\n  getLineNumber() { return 0; }\n\n  // Get the stave line number for rest.\n  getLineForRest() { return 0; }\n\n  // Get the glyph associated with this note.\n  getGlyph() { return this.glyph; }\n\n  getGlyphWidth() {\n    return this.glyph.getWidth(this.render_options.glyph_font_scale);\n  }\n\n  // Set and get Y positions for this note. Each Y value is associated with\n  // an individual pitch/key within the note/chord.\n  setYs(ys) { this.ys = ys; return this; }\n  getYs() {\n    if (this.ys.length === 0) {\n      throw new Vex.RERR('NoYValues', 'No Y-values calculated for this note.');\n    }\n\n    return this.ys;\n  }\n\n  // Get the Y position of the space above the stave onto which text can\n  // be rendered.\n  getYForTopText(text_line) {\n    if (!this.stave) {\n      throw new Vex.RERR('NoStave', 'No stave attached to this note.');\n    }\n\n    return this.stave.getYForTopText(text_line);\n  }\n\n  // Get a `BoundingBox` for this note.\n  getBoundingBox() { return null; }\n\n  // Returns the voice that this note belongs in.\n  getVoice() {\n    if (!this.voice) throw new Vex.RERR('NoVoice', 'Note has no voice.');\n    return this.voice;\n  }\n\n  // Attach this note to `voice`.\n  setVoice(voice) {\n    this.voice = voice;\n    this.preFormatted = false;\n    return this;\n  }\n\n  // Get and set the `TickContext` for this note.\n  getTickContext() { return this.tickContext; }\n  setTickContext(tc) {\n    this.tickContext = tc;\n    this.preFormatted = false;\n    return this;\n  }\n\n  // Accessors for the note type.\n  getDuration() { return this.duration; }\n  isDotted() { return (this.dots > 0); }\n  hasStem() { return false; }\n  getDots() { return this.dots; }\n  getNoteType() { return this.noteType; }\n  setBeam() { return this; } // ignore parameters\n\n  // Attach this note to a modifier context.\n  setModifierContext(mc) { this.modifierContext = mc; return this; }\n\n  // Attach a modifier to this note.\n  addModifier(modifier, index = 0) {\n    modifier.setNote(this);\n    modifier.setIndex(index);\n    this.modifiers.push(modifier);\n    this.setPreFormatted(false);\n    return this;\n  }\n\n  // Get the coordinates for where modifiers begin.\n  getModifierStartXY() {\n    if (!this.preFormatted) {\n      throw new Vex.RERR('UnformattedNote', \"Can't call GetModifierStartXY on an unformatted note\");\n    }\n\n    return {\n      x: this.getAbsoluteX(),\n      y: this.ys[0],\n    };\n  }\n\n  // Get bounds and metrics for this note.\n  //\n  // Returns a struct with fields:\n  // `width`: The total width of the note (including modifiers.)\n  // `noteWidth`: The width of the note head only.\n  // `left_shift`: The horizontal displacement of the note.\n  // `modLeftPx`: Start `X` for left modifiers.\n  // `modRightPx`: Start `X` for right modifiers.\n  // `extraLeftPx`: Extra space on left of note.\n  // `extraRightPx`: Extra space on right of note.\n  getMetrics() {\n    if (!this.preFormatted) {\n      throw new Vex.RERR('UnformattedNote', \"Can't call getMetrics on an unformatted note.\");\n    }\n\n    let modLeftPx = 0;\n    let modRightPx = 0;\n    if (this.modifierContext != null) {\n      modLeftPx = this.modifierContext.state.left_shift;\n      modRightPx = this.modifierContext.state.right_shift;\n    }\n\n    const width = this.getWidth();\n    return {\n      width,\n      noteWidth: width - modLeftPx - modRightPx - this.extraLeftPx - this.extraRightPx,\n      left_shift: this.x_shift, // TODO(0xfe): Make style consistent\n\n      // Modifiers, accidentals etc.\n      modLeftPx,\n      modRightPx,\n\n      // Displaced note head on left or right.\n      extraLeftPx: this.extraLeftPx,\n      extraRightPx: this.extraRightPx,\n    };\n  }\n\n  // Get and set width of note. Used by the formatter for positioning.\n  setWidth(width) { this.width = width; }\n  getWidth() {\n    if (!this.preFormatted) {\n      throw new Vex.RERR('UnformattedNote', \"Can't call GetWidth on an unformatted note.\");\n    }\n\n    return this.width + (this.modifierContext ? this.modifierContext.getWidth() : 0);\n  }\n\n  // Displace note by `x` pixels. Used by the formatter.\n  setXShift(x) { this.x_shift = x; return this; }\n  getXShift() { return this.x_shift; }\n\n  // Get `X` position of this tick context.\n  getX() {\n    if (!this.tickContext) {\n      throw new Vex.RERR('NoTickContext', 'Note needs a TickContext assigned for an X-Value');\n    }\n\n    return this.tickContext.getX() + this.x_shift;\n  }\n\n  // Get the absolute `X` position of this note's tick context. This\n  // excludes x_shift, so you'll need to factor it in if you're\n  // looking for the post-formatted x-position.\n  getAbsoluteX() {\n    if (!this.tickContext) {\n      throw new Vex.RERR('NoTickContext', 'Note needs a TickContext assigned for an X-Value');\n    }\n\n    // Position note to left edge of tick context.\n    let x = this.tickContext.getX();\n    if (this.stave) {\n      x += this.stave.getNoteStartX() + this.render_options.stave_padding;\n    }\n\n    if (this.isCenterAligned()) {\n      x += this.getCenterXShift();\n    }\n\n    return x;\n  }\n  setPreFormatted(value) {\n    this.preFormatted = value;\n\n    // Maintain the width of left and right modifiers in pixels.\n    if (this.preFormatted) {\n      const extra = this.tickContext.getExtraPx();\n      this.left_modPx = Math.max(this.left_modPx, extra.left);\n      this.right_modPx = Math.max(this.right_modPx, extra.right);\n    }\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n//\n// This file implements `NoteHeads`. `NoteHeads` are typically not manipulated\n// directly, but used internally in `StaveNote`.\n//\n// See `tests/notehead_tests.js` for usage examples.\n\nimport { Vex } from './vex';\nimport { Flow } from './tables';\nimport { Note } from './note';\nimport { Stem } from './stem';\nimport { StaveNote } from './stavenote';\nimport { Glyph } from './glyph';\n\n// To enable logging for this class. Set `Vex.Flow.NoteHead.DEBUG` to `true`.\nfunction L(...args) { if (NoteHead.DEBUG) Vex.L('Vex.Flow.NoteHead', args); }\n\n// Draw slashnote head manually. No glyph exists for this.\n//\n// Parameters:\n// * `ctx`: the Canvas context\n// * `duration`: the duration of the note. ex: \"4\"\n// * `x`: the x coordinate to draw at\n// * `y`: the y coordinate to draw at\n// * `stem_direction`: the direction of the stem\nfunction drawSlashNoteHead(ctx, duration, x, y, stem_direction, staveSpace) {\n  const width = Flow.SLASH_NOTEHEAD_WIDTH;\n  ctx.save();\n  ctx.setLineWidth(Flow.STEM_WIDTH);\n\n  let fill = false;\n\n  if (Flow.durationToNumber(duration) > 2) {\n    fill = true;\n  }\n\n  if (!fill) x -= (Flow.STEM_WIDTH / 2) * stem_direction;\n\n  ctx.beginPath();\n  ctx.moveTo(x, y + staveSpace);\n  ctx.lineTo(x, y + 1);\n  ctx.lineTo(x + width, y - staveSpace);\n  ctx.lineTo(x + width, y);\n  ctx.lineTo(x, y + staveSpace);\n  ctx.closePath();\n\n  if (fill) {\n    ctx.fill();\n  } else {\n    ctx.stroke();\n  }\n\n  if (Flow.durationToFraction(duration).equals(0.5)) {\n    const breve_lines = [-3, -1, width + 1, width + 3];\n    for (let i = 0; i < breve_lines.length; i++) {\n      ctx.beginPath();\n      ctx.moveTo(x + breve_lines[i], y - 10);\n      ctx.lineTo(x + breve_lines[i], y + 11);\n      ctx.stroke();\n    }\n  }\n\n  ctx.restore();\n}\n\nexport class NoteHead extends Note {\n  static get CATEGORY() { return 'notehead'; }\n\n  constructor(head_options) {\n    super(head_options);\n    this.setAttribute('type', 'NoteHead');\n\n    this.index = head_options.index;\n    this.x = head_options.x || 0;\n    this.y = head_options.y || 0;\n    this.note_type = head_options.note_type;\n    this.duration = head_options.duration;\n    this.displaced = head_options.displaced || false;\n    this.stem_direction = head_options.stem_direction || StaveNote.STEM_UP;\n    this.line = head_options.line;\n\n    // Get glyph code based on duration and note type. This could be\n    // regular notes, rests, or other custom codes.\n    this.glyph = Flow.getGlyphProps(this.duration, this.note_type);\n    if (!this.glyph) {\n      throw new Vex.RuntimeError(\n        'BadArguments',\n        `No glyph found for duration '${this.duration}' and type '${this.note_type}'`);\n    }\n\n    this.glyph_code = this.glyph.code_head;\n    this.x_shift = head_options.x_shift || 0;\n    if (head_options.custom_glyph_code) {\n      this.custom_glyph = true;\n      this.glyph_code = head_options.custom_glyph_code;\n      this.stem_up_x_offset = head_options.stem_up_x_offset || 0;\n      this.stem_down_x_offset = head_options.stem_down_x_offset || 0;\n    }\n\n    this.style = head_options.style;\n    this.slashed = head_options.slashed;\n\n    Vex.Merge(this.render_options, {\n      // font size for note heads\n      glyph_font_scale: head_options.glyph_font_scale || Flow.DEFAULT_NOTATION_FONT_SCALE,\n      // number of stroke px to the left and right of head\n      stroke_px: 3,\n    });\n\n    this.setWidth(this.glyph.getWidth(this.render_options.glyph_font_scale));\n  }\n\n  getCategory() { return NoteHead.CATEGORY; }\n\n  // Get the width of the notehead\n  getWidth() { return this.width; }\n\n  // Determine if the notehead is displaced\n  isDisplaced() { return this.displaced === true; }\n\n  // Get the glyph data\n  getGlyph() { return this.glyph; }\n\n  // Set the X coordinate\n  setX(x) { this.x = x; return this; }\n\n  // get/set the Y coordinate\n  getY() { return this.y; }\n  setY(y) { this.y = y;  return this; }\n\n  // Get/set the stave line the notehead is placed on\n  getLine() { return this.line; }\n  setLine(line) { this.line = line; return this; }\n\n  // Get the canvas `x` coordinate position of the notehead.\n  getAbsoluteX() {\n    // If the note has not been preformatted, then get the static x value\n    // Otherwise, it's been formatted and we should use it's x value relative\n    // to its tick context\n    const x = !this.preFormatted ? this.x : super.getAbsoluteX();\n\n    // For a more natural displaced notehead, we adjust the displacement amount\n    // by half the stem width in order to maintain a slight overlap with the stem\n    const displacementStemAdjustment = (Stem.WIDTH / 2);\n\n    return x + (this.displaced\n      ? (this.width - displacementStemAdjustment) * this.stem_direction\n      : 0\n    );\n  }\n\n  // Get the `BoundingBox` for the `NoteHead`\n  getBoundingBox() {\n    if (!this.preFormatted) {\n      throw new Vex.RERR('UnformattedNote', \"Can't call getBoundingBox on an unformatted note.\");\n    }\n\n    const spacing = this.stave.getSpacingBetweenLines();\n    const half_spacing = spacing / 2;\n    const min_y = this.y - half_spacing;\n\n    return new Flow.BoundingBox(this.getAbsoluteX(), min_y, this.width, spacing);\n  }\n\n  // Set notehead to a provided `stave`\n  setStave(stave) {\n    const line = this.getLine();\n\n    this.stave = stave;\n    this.setY(stave.getYForNote(line));\n    this.context = this.stave.context;\n    return this;\n  }\n\n  // Pre-render formatting\n  preFormat() {\n    if (this.preFormatted) return this;\n\n    const width = this.getWidth() + this.extraLeftPx + this.extraRightPx;\n\n    this.setWidth(width);\n    this.setPreFormatted(true);\n    return this;\n  }\n\n  // Draw the notehead\n  draw() {\n    this.checkContext();\n    this.setRendered();\n\n    const ctx = this.context;\n    let head_x = this.getAbsoluteX();\n    if (this.custom_glyph) {\n      // head_x += this.x_shift;\n      head_x += this.stem_direction === Stem.UP ? this.stem_up_x_offset : this.stem_down_x_offset;\n    }\n\n    const y = this.y;\n\n    L(\"Drawing note head '\", this.note_type, this.duration, \"' at\", head_x, y);\n\n    // Begin and end positions for head.\n    const stem_direction = this.stem_direction;\n    const glyph_font_scale = this.render_options.glyph_font_scale;\n\n    if (this.style) {\n      this.applyStyle(ctx);\n    }\n\n    if (this.note_type === 's') {\n      const staveSpace = this.stave.getSpacingBetweenLines();\n      drawSlashNoteHead(ctx, this.duration, head_x, y, stem_direction, staveSpace);\n    } else {\n      Glyph.renderGlyph(ctx, head_x, y, glyph_font_scale, this.glyph_code);\n    }\n\n    if (this.style) {\n      this.restoreStyle(ctx);\n    }\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n// `StemmableNote` is an abstract interface for notes with optional stems.\n// Examples of stemmable notes are `StaveNote` and `TabNote`\n\nimport { Vex } from './vex';\nimport { Flow } from './tables';\nimport { Stem } from './stem';\nimport { Glyph } from './glyph';\nimport { Note } from './note';\n\nexport class StemmableNote extends Note {\n  constructor(note_struct) {\n    super(note_struct);\n    this.setAttribute('type', 'StemmableNote');\n    this.stem = null;\n    this.stemExtensionOverride = null;\n    this.beam = null;\n    this.renderFlag = true;\n  }\n\n  // Get and set the note's `Stem`\n  getStem() { return this.stem; }\n  setStem(stem) { this.stem = stem; return this; }\n\n  // Builds and sets a new stem\n  buildStem() {\n    const stem = new Stem();\n    this.setStem(stem);\n    return this;\n  }\n\n  buildFlag() {\n    const { glyph, beam } = this;\n    const shouldRenderFlag = beam === null && this.renderFlag;\n\n    if (glyph && glyph.flag && shouldRenderFlag) {\n      const flagCode = this.getStemDirection() === Stem.DOWN\n        ? glyph.code_flag_downstem\n        : glyph.code_flag_upstem;\n\n      this.flag = new Glyph(flagCode, this.render_options.glyph_font_scale);\n    }\n  }\n\n  // Get the glyph associated with the top key of this note\n  getTopGlyph() {\n    if (this.getStemDirection() === Stem.DOWN) {\n      return this.customGlyphs[this.customGlyphs.length - 1];\n    } else {\n      return this.customGlyphs[0];\n    }\n  }\n\n  // Get the full length of stem\n  getStemLength() {\n    return Stem.HEIGHT + this.getStemExtension();\n  }\n\n  // Get the number of beams for this duration\n  getBeamCount() {\n    const glyph = this.getGlyph();\n\n    if (glyph) {\n      return glyph.beam_count;\n    } else {\n      return 0;\n    }\n  }\n\n  // Get the minimum length of stem\n  getStemMinumumLength() {\n    const frac = Flow.durationToFraction(this.duration);\n    let length = frac.value() <= 1 ? 0 : 20;\n    // if note is flagged, cannot shorten beam\n    switch (this.duration) {\n      case '8':\n        if (this.beam == null) length = 35;\n        break;\n      case '16':\n        length = this.beam == null ? 35 : 25;\n        break;\n      case '32':\n        length = this.beam == null ? 45 : 35;\n        break;\n      case '64':\n        length = this.beam == null ? 50 : 40;\n        break;\n      case '128':\n        length = this.beam == null ? 55 : 45;\n        break;\n      default:\n        break;\n    }\n    return length;\n  }\n\n  // Get/set the direction of the stem\n  getStemDirection() { return this.stem_direction; }\n  setStemDirection(direction) {\n    if (!direction) direction = Stem.UP;\n    if (direction !== Stem.UP && direction !== Stem.DOWN) {\n      throw new Vex.RERR('BadArgument', `Invalid stem direction: ${direction}`);\n    }\n\n    this.stem_direction = direction;\n    if (this.stem) {\n      this.stem.setDirection(direction);\n      this.stem.setExtension(this.getStemExtension());\n      const glyph = this.getTopGlyph() || this.getGlyph();\n      this.stem.setOptions({\n        stem_up_y_offset: glyph.stem_up_y_offset,\n        stem_down_y_offset: glyph.stem_down_y_offset\n      });\n    }\n\n    this.reset();\n    if (this.flag && this.renderFlag) {\n      this.buildFlag();\n    }\n\n    this.beam = null;\n    if (this.preFormatted) {\n      this.preFormat();\n    }\n\n    return this;\n  }\n\n  // Get the `x` coordinate of the stem\n  getStemX() {\n    const x_begin = this.getAbsoluteX() + this.x_shift;\n    const x_end = this.getAbsoluteX() + this.x_shift + this.getGlyphWidth();\n    const stem_x = this.stem_direction === Stem.DOWN ? x_begin : x_end;\n    return stem_x;\n  }\n\n  // Get the `x` coordinate for the center of the glyph.\n  // Used for `TabNote` stems and stemlets over rests\n  getCenterGlyphX() {\n    return this.getAbsoluteX() + this.x_shift + (this.getGlyphWidth() / 2);\n  }\n\n  // Get the stem extension for the current duration\n  getStemExtension() {\n    const glyph = this.getGlyph();\n\n    if (this.stemExtensionOverride != null) {\n      return this.stemExtensionOverride;\n    }\n\n    if (glyph) {\n      return this.getStemDirection() === 1\n        ? glyph.stem_up_extension\n        : glyph.stem_down_extension;\n    }\n\n    return 0;\n  }\n\n  // Set the stem length to a specific. Will override the default length.\n  setStemLength(height) {\n    this.stemExtensionOverride = (height - Stem.HEIGHT);\n    return this;\n  }\n\n  // Get the top and bottom `y` values of the stem.\n  getStemExtents() {\n    return this.stem.getExtents();\n  }\n\n  // Sets the current note's beam\n  setBeam(beam) { this.beam = beam; return this; }\n\n  // Get the `y` value for the top/bottom modifiers at a specific `textLine`\n  getYForTopText(textLine) {\n    const extents = this.getStemExtents();\n    if (this.hasStem()) {\n      return Math.min(\n        this.stave.getYForTopText(textLine),\n        extents.topY - (this.render_options.annotation_spacing * (textLine + 1))\n      );\n    } else {\n      return this.stave.getYForTopText(textLine);\n    }\n  }\n\n  getYForBottomText(textLine) {\n    const extents = this.getStemExtents();\n    if (this.hasStem()) {\n      return Math.max(\n        this.stave.getYForTopText(textLine),\n        extents.baseY + (this.render_options.annotation_spacing * (textLine))\n      );\n    } else {\n      return this.stave.getYForBottomText(textLine);\n    }\n  }\n\n  hasFlag() {\n    return this.renderFlag && Flow.getGlyphProps(this.duration).flag && !this.beam;\n  }\n\n  // Post format the note\n  postFormat() {\n    if (this.beam) this.beam.postFormat();\n\n    this.postFormatted = true;\n\n    return this;\n  }\n\n  // Render the stem onto the canvas\n  drawStem(stem_struct) {\n    this.checkContext();\n    this.setRendered();\n\n    this.setStem(new Stem(stem_struct));\n    this.stem.setContext(this.context).draw();\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n//\n// `Modifier` is an abstract interface for notational elements that modify\n// a `Note`. Examples of modifiers are `Accidental`, `Annotation`, `Stroke`, etc.\n//\n// For a `Modifier` instance to be positioned correctly, it must be part of\n// a `ModifierContext`. All modifiers in the same context are rendered relative to\n// one another.\n//\n// Typically, all modifiers to a note are part of the same `ModifierContext` instance. Also,\n// in multi-voice staves, all modifiers to notes on the same `tick` are part of the same\n// `ModifierContext`. This ensures that multiple voices don't trample all over each other.\n\nimport { Vex } from './vex';\nimport { Element } from './element';\n\n// To enable logging for this class. Set `Vex.Flow.Modifier.DEBUG` to `true`.\n// function L(...args) { if (Modifier.DEBUG) Vex.L('Vex.Flow.Modifier', args); }\n\nexport class Modifier extends Element {\n  static get CATEGORY() { return 'none'; }\n\n  // Modifiers can be positioned almost anywhere, relative to a note.\n  static get Position() {\n    return {\n      LEFT: 1,\n      RIGHT: 2,\n      ABOVE: 3,\n      BELOW: 4,\n    };\n  }\n\n  static get PositionString() {\n    return {\n      above: Modifier.Position.ABOVE,\n      below: Modifier.Position.BELOW,\n      left: Modifier.Position.LEFT,\n      right: Modifier.Position.RIGHT,\n    };\n  }\n\n  constructor() {\n    super();\n    this.setAttribute('type', 'Modifier');\n\n    this.width = 0;\n\n    // Modifiers are attached to a note and an index. An index is a\n    // specific head in a chord.\n    this.note = null;\n    this.index = null;\n\n    // The `text_line` is reserved space above or below a stave.\n    this.text_line = 0;\n    this.position = Modifier.Position.LEFT;\n    this.modifier_context = null;\n    this.x_shift = 0;\n    this.y_shift = 0;\n    this.spacingFromNextModifier = 0;\n  }\n\n  // Every modifier has a category. The `ModifierContext` uses this to determine\n  // the type and order of the modifiers.\n  getCategory() { return Modifier.CATEGORY; }\n\n  // Get and set modifier widths.\n  getWidth() { return this.width; }\n  setWidth(width) { this.width = width; return this; }\n\n  // Get and set attached note (`StaveNote`, `TabNote`, etc.)\n  getNote() { return this.note; }\n  setNote(note) { this.note = note; return this; }\n\n  // Get and set note index, which is a specific note in a chord.\n  getIndex() { return this.index; }\n  setIndex(index) { this.index = index; return this; }\n\n  // Every modifier must be part of a `ModifierContext`.\n  getModifierContext() { return this.modifier_context; }\n  setModifierContext(c) { this.modifier_context = c; return this; }\n\n  // Get and set articulation position.\n  getPosition() { return this.position; }\n  setPosition(position) {\n    this.position = typeof(position) === 'string'\n      ? Modifier.PositionString[position]\n      : position;\n    return this;\n  }\n\n  // Set the `text_line` for the modifier.\n  setTextLine(line) { this.text_line = line; return this; }\n\n  // Shift modifier down `y` pixels. Negative values shift up.\n  setYShift(y) { this.y_shift = y; return this; }\n\n  setSpacingFromNextModifier(x) {\n    this.spacingFromNextModifier = x;\n  }\n\n  getSpacingFromNextModifier() { return this.spacingFromNextModifier; }\n\n  // Shift modifier `x` pixels in the direction of the modifier. Negative values\n  // shift reverse.\n  setXShift(x) {\n    this.x_shift = 0;\n    if (this.position === Modifier.Position.LEFT) {\n      this.x_shift -= x;\n    } else {\n      this.x_shift += x;\n    }\n  }\n  getXShift() { return this.x_shift; }\n\n  // Render the modifier onto the canvas.\n  draw() {\n    this.checkContext();\n    throw new Vex.RERR('MethodNotImplemented', 'draw() not implemented for this modifier.');\n  }\n\n  // aligns sub notes of NoteSubGroup (or GraceNoteGroup) to the main note with correct x-offset\n  alignSubNotesWithNote(subNotes, note) {\n    // Shift over the tick contexts of each note\n    const tickContext = note.getTickContext();\n    const extraPx = tickContext.getExtraPx();\n    const subNoteXOffset = tickContext.getX() - extraPx.left - extraPx.extraLeft\n      + this.getSpacingFromNextModifier();\n\n    subNotes.forEach((subNote) => {\n      const subTickContext = subNote.getTickContext();\n      subNote.setStave(note.stave);\n      subTickContext.setXOffset(subNoteXOffset); // don't touch baseX to avoid shift each render\n    });\n  }\n}\n","// VexFlow - Music Engraving for HTML5\n// Copyright Mohit Muthanna 2010\n//\n// This class implements dot modifiers for notes.\n\nimport { Vex } from './vex';\nimport { Modifier } from './modifier';\n\nexport class Dot extends Modifier {\n  static get CATEGORY() { return 'dots'; }\n\n  // Arrange dots inside a ModifierContext.\n  static format(dots, state) {\n    const right_shift = state.right_shift;\n    const dot_spacing = 1;\n\n    if (!dots || dots.length === 0) return false;\n\n    const dot_list = [];\n    const max_shift_map = {};\n    for (let i = 0; i < dots.length; ++i) {\n      const dot = dots[i];\n      const note = dot.getNote();\n\n      let props;\n      let shift;\n      // Only StaveNote has .getKeyProps()\n      if (typeof note.getKeyProps === 'function') {\n        props = note.getKeyProps()[dot.getIndex()];\n        shift = (props.displaced ? note.getExtraRightPx() : 0);\n      } else { // Else it's a TabNote\n        props = { line: 0.5 }; // Shim key props for dot placement\n        shift = 0;\n      }\n\n      const note_id = note.getAttribute('id');\n      dot_list.push({ line: props.line, note, note_id, dot });\n      max_shift_map[note_id] = Math.max(max_shift_map[note_id] || shift, shift);\n    }\n\n    // Sort dots by line number.\n    dot_list.sort((a, b) => b.line - a.line);\n\n    let dot_shift = right_shift;\n    let x_width = 0;\n    let last_line = null;\n    let last_note = null;\n    let prev_dotted_space = null;\n    let half_shiftY = 0;\n\n    for (let i = 0; i < dot_list.length; ++i) {\n      const { dot, note, note_id, line } = dot_list[i];\n\n      // Reset the position of the dot every line.\n      if (line !== last_line || note !== last_note) {\n        dot_shift = max_shift_map[note_id];\n      }\n\n      if (!note.isRest() && line !== last_line) {\n        if (Math.abs(line % 1) === 0.5) {\n          // note is on a space, so no dot shift\n          half_shiftY = 0;\n        } else {\n          // note is on a line, so shift dot to space above the line\n          half_shiftY = 0.5;\n          if (last_note != null &&\n              !last_note.isRest() && last_line - line === 0.5) {\n            // previous note on a space, so shift dot to space below the line\n            half_shiftY = -0.5;\n          } else if (line + half_shiftY === prev_dotted_space) {\n            // previous space is dotted, so shift dot to space below the line\n            half_shiftY = -0.5;\n          }\n        }\n      }\n\n      // convert half_shiftY to a multiplier for dots.draw()\n      if (note.isRest()) {\n        dot.dot_shiftY += -half_shiftY;\n      } else {\n        dot.dot_shiftY = -half_shiftY;\n      }\n      prev_dotted_space = line + half_shiftY;\n\n      dot.setXShift(dot_shift);\n      dot_shift += dot.getWidth() + dot_spacing; // spacing\n      x_width = (dot_shift > x_width) ? dot_shift : x_width;\n      last_line = line;\n      last_note = note;\n    }\n\n    // Update state.\n    state.right_shift += x_width;\n    return true;\n  }\n\n  /**\n   * @constructor\n   */\n  constructor() {\n    super();\n    this.setAttribute('type', 'Dot');\n\n    this.note = null;\n    this.index = null;\n    this.position = Modifier.Position.RIGHT;\n\n    this.radius = 2;\n    this.setWidth(5);\n    this.dot_shiftY = 0;\n  }\n\n  getCategory() { return Dot.CATEGORY; }\n\n  setNote(note) {\n    this.note = note;\n\n    if (this.note.getCategory() === 'gracenotes') {\n      this.radius *= 0.50;\n      this.setWidth(3);\n    }\n  }\n\n  setDotShiftY(y) { this.dot_shiftY = y; return this; }\n\n  draw() {\n    this.checkContext();\n    this.setRendered();\n\n    if (!this.note || this.index === null) {\n      throw new Vex.RERR('NoAttachedNote', \"Can't draw dot without a note and index.\");\n    }\n\n    const lineSpace = this.note.stave.options.spacing_between_lines_px;\n\n    const start = this.note.getModifierStartXY(this.position, this.index,\n      { forceFlagRight: true });\n\n    // Set the starting y coordinate to the base of the stem for TabNotes\n    if (this.note.getCategory() === 'tabnotes') {\n      start.y = this.note.getStemExtents().baseY;\n    }\n\n    const x = (start.x + this.x_shift) + this.width - this.radius;\n    const y = start.y + this.y_shift + (this.dot_shiftY * lineSpace);\n    const ctx = this.context;\n\n    ctx.beginPath();\n    ctx.arc(x, y, this.radius, 0, Math.PI * 2, false);\n    ctx.fill();\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n// This file implements notes for standard notation. This consists of one or\n// more `NoteHeads`, an optional stem, and an optional flag.\n//\n// *Throughout these comments, a \"note\" refers to the entire `StaveNote`,\n// and a \"key\" refers to a specific pitch/notehead within a note.*\n//\n// See `tests/stavenote_tests.js` for usage examples.\n\nimport { Vex } from './vex';\nimport { Flow } from './tables';\nimport { BoundingBox } from './boundingbox';\nimport { Stem } from './stem';\nimport { NoteHead } from './notehead';\nimport { StemmableNote } from './stemmablenote';\nimport { Modifier } from './modifier';\nimport { Dot } from './dot';\n\n// To enable logging for this class. Set `Vex.Flow.StaveNote.DEBUG` to `true`.\nfunction L(...args) { if (StaveNote.DEBUG) Vex.L('Vex.Flow.StaveNote', args); }\n\nconst getStemAdjustment = (note) => Stem.WIDTH / (2 * -note.getStemDirection());\n\nconst isInnerNoteIndex = (note, index) =>\n  index === (note.getStemDirection() === Stem.UP ? note.keyProps.length - 1 : 0);\n\n// Helper methods for rest positioning in ModifierContext.\nfunction shiftRestVertical(rest, note, dir) {\n  const delta = (note.isrest ? 0.0 : 1.0) * dir;\n\n  rest.line += delta;\n  rest.maxLine += delta;\n  rest.minLine += delta;\n  rest.note.setKeyLine(0, rest.note.getKeyLine(0) + (delta));\n}\n\n// Called from formatNotes :: center a rest between two notes\nfunction centerRest(rest, noteU, noteL) {\n  const delta = rest.line - Vex.MidLine(noteU.minLine, noteL.maxLine);\n  rest.note.setKeyLine(0, rest.note.getKeyLine(0) - delta);\n  rest.line -= delta;\n  rest.maxLine -= delta;\n  rest.minLine -= delta;\n}\n\nexport class StaveNote extends StemmableNote {\n  static get CATEGORY() { return 'stavenotes'; }\n  static get STEM_UP() { return Stem.UP; }\n  static get STEM_DOWN() { return Stem.DOWN; }\n  static get DEFAULT_LEDGER_LINE_OFFSET() { return 3; }\n\n  // ## Static Methods\n  //\n  // Format notes inside a ModifierContext.\n  static format(notes, state) {\n    if (!notes || notes.length < 2) return false;\n\n    // FIXME: VexFlow will soon require that a stave be set before formatting.\n    // Which, according to the below condition, means that following branch will\n    // always be taken and the rest of this function is dead code.\n    //\n    // Problematically, `Formatter#formatByY` was not designed to work for more\n    // than 2 voices (although, doesn't throw on this condition, just tries\n    // to power through).\n    //\n    // Based on the above:\n    //   * 2 voices can be formatted *with or without* a stave being set but\n    //     the output will be different\n    //   * 3 voices can only be formatted *without* a stave\n\n    // if this is enabled, notes are sometimes not staggered correctly, see setXShift lines below \n    // if (notes[0].getStave()) {\n    //   return StaveNote.formatByY(notes, state); // \n    // }\n\n    const notesList = [];\n    const stagger_same_whole_notes = notes[0].stagger_same_whole_notes;\n    // whether to stagger whole notes on the same line but different voice (show 2 instead of 1).\n    //   controlled by EngravingRules.StaggerSameWholeNotes\n\n    for (let i = 0; i < notes.length; i++) {\n      const props = notes[i].getKeyProps();\n      const line = props[0].line;\n      let minL = props[props.length - 1].line;\n      const stemDirection = notes[i].getStemDirection();\n      const stemMax = notes[i].getStemLength() / 10;\n      const stemMin = notes[i].getStemMinumumLength() / 10;\n\n      let maxL;\n      if (notes[i].isRest()) {\n        maxL = line + notes[i].glyph.line_above;\n        minL = line - notes[i].glyph.line_below;\n      } else {\n        maxL = stemDirection === 1\n          ? props[props.length - 1].line + stemMax\n          : props[props.length - 1].line;\n\n        minL = stemDirection === 1\n          ? props[0].line\n          : props[0].line - stemMax;\n      }\n\n      notesList.push({\n        line: props[0].line, // note/rest base line\n        maxLine: maxL, // note/rest upper bounds line\n        minLine: minL, // note/rest lower bounds line\n        isrest: notes[i].isRest(),\n        stemDirection,\n        stemMax, // Maximum (default) note stem length;\n        stemMin, // minimum note stem length\n        voice_shift: notes[i].getVoiceShiftWidth(),\n        is_displaced: notes[i].isDisplaced(), // note manually displaced\n        note: notes[i],\n      });\n    }\n\n    const voices = notesList.length;\n\n    let noteU = notesList[0];\n    const noteM = voices > 2 ? notesList[1] : null;\n    let noteL = voices > 2 ? notesList[2] : notesList[1];\n\n    // for two voice backward compatibility, ensure upper voice is stems up\n    // for three voices, the voices must be in order (upper, middle, lower)\n    if (voices === 2 && noteU.stemDirection === -1 && noteL.stemDirection === 1) {\n      noteU = notesList[1];\n      noteL = notesList[0];\n    }\n\n    const voiceXShift = Math.max(noteU.voice_shift, noteL.voice_shift);\n    let xShift = 0;\n    let stemDelta;\n    // Test for two voice note intersection\n    if (voices === 2) {\n      const lineSpacing = noteU.stemDirection === noteL.stemDirection ? 0.0 : 0.5;\n      // if top voice is a middle voice, check stem intersection with lower voice\n      if (noteU.stemDirection === noteL.stemDirection &&\n        noteU.minLine <= noteL.maxLine) {\n        if (!noteU.isrest) {\n          stemDelta = Math.abs(noteU.line - (noteL.maxLine + 0.5));\n          stemDelta = Math.max(stemDelta, noteU.stemMin);\n          noteU.minLine = noteU.line - stemDelta;\n          noteU.note.setStemLength(stemDelta * 10);\n        }\n      }\n      if (noteU.minLine <= noteL.maxLine + lineSpacing) {\n        if (noteU.isrest) {\n          // shift rest up\n          shiftRestVertical(noteU, noteL, 1);\n        } else if (noteL.isrest) {\n          // shift rest down\n          shiftRestVertical(noteL, noteU, -1);\n        } else {\n          xShift = voiceXShift;\n          //Vexflowpatch: Instead of shifting notes, remove the appropriate flag.\n          //If we are sharing a line, switch one notes stem direction.\n          //If we are sharing a line and in the same voice, only then offset one note\n          const lineDiff = Math.abs(noteU.line - noteL.line);\n          //if (noteU.note.glyph.stem && noteL.note.glyph.stem) { // skip this condition: whole notes also relevant\n          //If we have different dot values, must offset\n          //Or If we have a non-filled in mixed with a filled in notehead, must offset\n          let halfNoteCount = 0;\n          let wholeNoteCount = 0;\n          if (noteU.note.duration === \"h\") {\n            halfNoteCount++;\n          } else if (noteU.note.duration === \"w\") {\n            wholeNoteCount++;\n          }\n          if (noteL.note.duration === \"h\") {\n            halfNoteCount++;\n          } else if (noteL.note.duration === \"w\") {\n            wholeNoteCount++;\n          }\n          // only stagger/x-shift if one of the notes is whole or half note and the other isn't. (or dots different)\n          let staggerConditions = halfNoteCount === 1 || wholeNoteCount === 1 || noteU.note.dots !== noteL.note.dots;\n          if (stagger_same_whole_notes) { // controlled by EngravingRules.StaggerSameWholeNotes. see declaration above\n            staggerConditions = staggerConditions || wholeNoteCount === 2;\n            // should be ||=, but appveyor says syntax error, doesn't know the operator.\n          }\n          if (lineDiff === 0 && staggerConditions) {\n            noteL.note.setXShift(xShift);\n            if (noteU.note.dots > 0) {\n              let foundDots = 0;\n              for (const modifier of noteU.note.modifiers) {\n                if (modifier instanceof Dot) {\n                  foundDots++;\n                  //offset dot(s) above the shifted note\n                  //lines + 1 to negative pixels\n                  modifier.setYShift(-10 * (noteL.maxLine - noteU.line + 1));\n                  if (foundDots === noteU.note.dots) {\n                    break;\n                  }\n                }\n              }\n            }\n          } else if (lineDiff < 1 && lineDiff > 0) {//if the notes are quite close but not on the same line, shift\n            noteL.note.setXShift(xShift);\n          } else if (noteU.note.voice !== noteL.note.voice) {//If we are not in the same voice\n            if (noteU.stemDirection === noteL.stemDirection) {\n              if (noteU.line > noteL.line) {\n                //noteU is above noteL\n                if (noteU.stemDirection === 1) {\n                  noteL.note.renderFlag = false;\n                } else {\n                  noteU.note.renderFlag = false;\n                }\n              } else if (noteL.line > noteU.line) {\n                //note L is above noteU\n                if (noteL.stemDirection === 1) {\n                  noteU.note.renderFlag = false;\n                } else {\n                  noteL.note.renderFlag = false;\n                }\n              } else {\n                //same line, swap stem direction for one note\n                if (noteL.stemDirection === 1) {\n                  noteL.stemDirection = -1;\n                  noteL.note.setStemDirection(-1);\n                }\n              }\n            }\n          }\n          //Very close whole notes\n          // } else if ((!noteU.note.glyph.stem && !noteL.note.glyph.stem && lineDiff < 1.5)) {\n          //   noteL.note.setXShift(xShift);\n          // }\n        }\n      }\n\n      // format complete\n      return true;\n    }\n\n    // Check middle voice stem intersection with lower voice\n    if (noteM !== null && noteM.minLine < noteL.maxLine + 0.5) {\n      if (!noteM.isrest) {\n        stemDelta = Math.abs(noteM.line - (noteL.maxLine + 0.5));\n        stemDelta = Math.max(stemDelta, noteM.stemMin);\n        noteM.minLine = noteM.line - stemDelta;\n        noteM.note.setStemLength(stemDelta * 10);\n      }\n    }\n\n    // For three voices, test if rests can be repositioned\n    //\n    // Special case 1 :: middle voice rest between two notes\n    //\n    if (noteM.isrest && !noteU.isrest && !noteL.isrest) {\n      if (noteU.minLine <= noteM.maxLine || noteM.minLine <= noteL.maxLine) {\n        const restHeight = noteM.maxLine - noteM.minLine;\n        const space = noteU.minLine - noteL.maxLine;\n        if (restHeight < space) {\n          // center middle voice rest between the upper and lower voices\n          centerRest(noteM, noteU, noteL);\n        } else {\n          xShift = voiceXShift + 3;    // shift middle rest right\n          noteM.note.setXShift(xShift);\n        }\n        // format complete\n        return true;\n      }\n    }\n\n    // Special case 2 :: all voices are rests\n    if (noteU.isrest && noteM.isrest && noteL.isrest) {\n      // Shift upper voice rest up\n      shiftRestVertical(noteU, noteM, 1);\n      // Shift lower voice rest down\n      shiftRestVertical(noteL, noteM, -1);\n      // format complete\n      return true;\n    }\n\n    // Test if any other rests can be repositioned\n    if (noteM.isrest && noteU.isrest && noteM.minLine <= noteL.maxLine) {\n      // Shift middle voice rest up\n      shiftRestVertical(noteM, noteL, 1);\n    }\n    if (noteM.isrest && noteL.isrest && noteU.minLine <= noteM.maxLine) {\n      // Shift middle voice rest down\n      shiftRestVertical(noteM, noteU, -1);\n    }\n    if (noteU.isrest && noteU.minLine <= noteM.maxLine) {\n      // shift upper voice rest up;\n      shiftRestVertical(noteU, noteM, 1);\n    }\n    if (noteL.isrest && noteM.minLine <= noteL.maxLine) {\n      // shift lower voice rest down\n      shiftRestVertical(noteL, noteM, -1);\n    }\n\n    // If middle voice intersects upper or lower voice\n    if ((!noteU.isrest && !noteM.isrest && noteU.minLine <= noteM.maxLine + 0.5) ||\n      (!noteM.isrest && !noteL.isrest && noteM.minLine <= noteL.maxLine)) {\n      xShift = voiceXShift + 3;      // shift middle note right\n      noteM.note.setXShift(xShift);\n    }\n\n    return true;\n  }\n\n  static formatByY(notes, state) {\n    // NOTE: this function does not support more than two voices per stave\n    // use with care.\n    let hasStave = true;\n\n    for (let i = 0; i < notes.length; i++) {\n      hasStave = hasStave && notes[i].getStave() != null;\n    }\n\n    if (!hasStave) {\n      throw new Vex.RERR(\n        'Stave Missing',\n        'All notes must have a stave - Vex.Flow.ModifierContext.formatMultiVoice!'\n      );\n    }\n\n    let xShift = 0;\n\n    for (let i = 0; i < notes.length - 1; i++) {\n      let topNote = notes[i];\n      let bottomNote = notes[i + 1];\n\n      //Vexflowpatch: The stem direction doesn't really determine which note is on top.\n      //Pick the actual note that is on top via the line number\n      if (topNote.maxLine < bottomNote.maxLine) {\n        topNote = notes[i + 1];\n        bottomNote = notes[i];\n      }\n\n      const topKeys = topNote.getKeyProps();\n      const bottomKeys = bottomNote.getKeyProps();\n\n      const HALF_NOTEHEAD_HEIGHT = 0.5;\n\n      // `keyProps` and `stave.getYForLine` have different notions of a `line`\n      // so we have to convert the keyProps value by subtracting 5.\n      // See https://github.com/0xfe/vexflow/wiki/Development-Gotchas\n      //\n      // We also extend the y for each note by a half notehead because the\n      // notehead's origin is centered\n      const topNoteBottomY = topNote\n        .getStave()\n        .getYForLine(5 - topKeys[0].line + HALF_NOTEHEAD_HEIGHT);\n\n      const bottomNoteTopY = bottomNote\n        .getStave()\n        .getYForLine(5 - bottomKeys[bottomKeys.length - 1].line - HALF_NOTEHEAD_HEIGHT);\n\n      const areNotesColliding = bottomNoteTopY - topNoteBottomY < 0;\n      if (areNotesColliding) {\n        //Vexflowpatch: Only shift if we are in the same voice. This is mostly taken care of format() above.\n        if (topNote.voice === bottomNote.voice) {\n          xShift = topNote.getVoiceShiftWidth() + 2;\n          bottomNote.setXShift(xShift);\n        }\n      }\n    }\n\n    state.right_shift += xShift;\n  }\n\n  static postFormat(notes) {\n    if (!notes) return false;\n\n    notes.forEach(note => note.postFormat());\n\n    return true;\n  }\n\n  constructor(noteStruct) {\n    super(noteStruct);\n    this.setAttribute('type', 'StaveNote');\n\n    this.keys = noteStruct.keys;\n    this.clef = noteStruct.clef;\n    this.octave_shift = noteStruct.octave_shift;\n    this.beam = null;\n\n    // Pull note rendering properties\n    this.glyph = Flow.getGlyphProps(this.duration, this.noteType);\n\n    if (!this.glyph) {\n      throw new Vex.RuntimeError(\n        'BadArguments',\n        `Invalid note initialization data (No glyph found): ${JSON.stringify(noteStruct)}`\n      );\n    }\n\n    // if true, displace note to right\n    this.displaced = false;\n    this.dot_shiftY = 0;\n    //VexflowPatch: We seem to init with a dot count, and also call addDot, so this is to count the added dots vs. the inited dots.\n    this.addDotsCount = 0;\n    // per-pitch properties\n    this.keyProps = [];\n    // for displaced ledger lines\n    this.use_default_head_x = false;\n\n    // Drawing\n    this.note_heads = [];\n    this.modifiers = [];\n\n    Vex.Merge(this.render_options, {\n      // font size for note heads and rests\n      glyph_font_scale: noteStruct.glyph_font_scale || Flow.DEFAULT_NOTATION_FONT_SCALE,\n      // number of stroke px to the left and right of head\n      stroke_px: noteStruct.stroke_px || StaveNote.DEFAULT_LEDGER_LINE_OFFSET,\n    });\n\n    this.calculateKeyProps();\n    this.buildStem();\n\n    // Set the stem direction\n    if (noteStruct.auto_stem) {\n      this.autoStem();\n    } else {\n      this.setStemDirection(noteStruct.stem_direction);\n    }\n    this.reset();\n    this.buildFlag();\n  }\n\n  reset() {\n    super.reset();\n\n    // Save prior noteHead styles & reapply them after making new noteheads.\n    const noteHeadStyles = this.note_heads.map(noteHead => noteHead.getStyle());\n    this.buildNoteHeads();\n    this.note_heads.forEach((noteHead, index) => noteHead.setStyle(noteHeadStyles[index]));\n\n    if (this.stave) {\n      this.note_heads.forEach(head => head.setStave(this.stave));\n    }\n    this.calcExtraPx();\n  }\n\n  setBeam(beam) {\n    this.beam = beam;\n    this.calcExtraPx();\n    return this;\n  }\n\n  getCategory() { return StaveNote.CATEGORY; }\n\n  // Builds a `Stem` for the note\n  buildStem() {\n    this.setStem(new Stem({ hide: !!this.isRest(), }));\n    this.stem.id = Vex.Prefix(`${this.getAttribute(\"id\")}-stem`);\n  }\n\n  // Builds a `NoteHead` for each key in the note\n  buildNoteHeads() {\n    this.note_heads = [];\n    const stemDirection = this.getStemDirection();\n    const keys = this.getKeys();\n\n    let lastLine = null;\n    let lineDiff = null;\n    let displaced = false;\n\n    // Draw notes from bottom to top.\n\n    // For down-stem notes, we draw from top to bottom.\n    let start;\n    let end;\n    let step;\n    if (stemDirection === Stem.UP) {\n      start = 0;\n      end = keys.length;\n      step = 1;\n    } else if (stemDirection === Stem.DOWN) {\n      start = keys.length - 1;\n      end = -1;\n      step = -1;\n    }\n\n    for (let i = start; i !== end; i += step) {\n      const noteProps = this.keyProps[i];\n      const line = noteProps.line;\n\n      // Keep track of last line with a note head, so that consecutive heads\n      // are correctly displaced.\n      if (lastLine === null) {\n        lastLine = line;\n      } else {\n        lineDiff = Math.abs(lastLine - line);\n        if (lineDiff === 0 || lineDiff === 0.5) {\n          displaced = !displaced;\n        } else {\n          displaced = false;\n          this.use_default_head_x = true;\n        }\n      }\n      lastLine = line;\n\n      const notehead = new NoteHead({\n        duration: this.duration,\n        note_type: this.noteType,\n        displaced,\n        stem_direction: stemDirection,\n        custom_glyph_code: noteProps.code,\n        glyph_font_scale: this.render_options.glyph_font_scale,\n        x_shift: noteProps.shift_right,\n        stem_up_x_offset: noteProps.stem_up_x_offset,\n        stem_down_x_offset: noteProps.stem_down_x_offset,\n        line: noteProps.line,\n      });\n\n      this.note_heads[i] = notehead;\n    }\n  }\n\n  // Automatically sets the stem direction based on the keys in the note\n  autoStem() {\n    // Figure out optimal stem direction based on given notes\n    this.minLine = this.keyProps[0].line;\n    this.maxLine = this.keyProps[this.keyProps.length - 1].line;\n\n    const MIDDLE_LINE = 3;\n    const decider = (this.minLine + this.maxLine) / 2;\n    const stemDirection = decider < MIDDLE_LINE ? Stem.UP : Stem.DOWN;\n\n    this.setStemDirection(stemDirection);\n  }\n\n  // Calculates and stores the properties for each key in the note\n  calculateKeyProps() {\n    let lastLine = null;\n    for (let i = 0; i < this.keys.length; ++i) {\n      const key = this.keys[i];\n\n      // All rests use the same position on the line.\n      // if (this.glyph.rest) key = this.glyph.position;\n      if (this.glyph.rest) this.glyph.position = key;\n\n      const options = { octave_shift: this.octave_shift || 0 };\n      const props = Flow.keyProperties(key, this.clef, options);\n\n      if (!props) {\n        throw new Vex.RuntimeError('BadArguments', `Invalid key for note properties: ${key}`);\n      }\n\n      // Override line placement for default rests\n      if (props.key === 'R') {\n        if (this.duration === '1' || this.duration === 'w') {\n          props.line = 4;\n        } else {\n          props.line = 3;\n        }\n      }\n\n      // Calculate displacement of this note\n      const line = props.line;\n      if (lastLine === null) {\n        lastLine = line;\n      } else {\n        if (Math.abs(lastLine - line) === 0.5) {\n          this.displaced = true;\n          props.displaced = true;\n\n          // Have to mark the previous note as\n          // displaced as well, for modifier placement\n          if (this.keyProps.length > 0) {\n            this.keyProps[i - 1].displaced = true;\n          }\n        }\n      }\n\n      lastLine = line;\n      this.keyProps.push(props);\n    }\n\n    // Sort the notes from lowest line to highest line\n    lastLine = -Infinity;\n    this.keyProps.forEach(key => {\n      if (key.line < lastLine) {\n        Vex.W(\n          'Unsorted keys in note will be sorted. ' +\n          'See https://github.com/0xfe/vexflow/issues/104 for details.'\n        );\n      }\n      lastLine = key.line;\n    });\n    this.keyProps.sort((a, b) => a.line - b.line);\n  }\n\n  // Get the `BoundingBox` for the entire note\n  getBoundingBox() {\n    if (!this.preFormatted) {\n      throw new Vex.RERR('UnformattedNote', \"Can't call getBoundingBox on an unformatted note.\");\n    }\n\n    const { width: w, modLeftPx, extraLeftPx } = this.getMetrics();\n    const x = this.getAbsoluteX() - modLeftPx - extraLeftPx;\n\n    let minY = 0;\n    let maxY = 0;\n    const halfLineSpacing = this.getStave().getSpacingBetweenLines() / 2;\n    const lineSpacing = halfLineSpacing * 2;\n    if (this.isRest()) {\n      const y = this.ys[0];\n      const frac = Flow.durationToFraction(this.duration);\n      if (frac.equals(1) || frac.equals(2)) {\n        minY = y - halfLineSpacing;\n        maxY = y + halfLineSpacing;\n      } else {\n        minY = y - (this.glyph.line_above * lineSpacing);\n        maxY = y + (this.glyph.line_below * lineSpacing);\n      }\n    } else if (this.glyph.stem) {\n      const ys = this.getStemExtents();\n      ys.baseY += halfLineSpacing * this.stem_direction;\n      minY = Math.min(ys.topY, ys.baseY);\n      maxY = Math.max(ys.topY, ys.baseY);\n    } else {\n      minY = null;\n      maxY = null;\n\n      for (let i = 0; i < this.ys.length; ++i) {\n        const yy = this.ys[i];\n        if (i === 0) {\n          minY = yy;\n          maxY = yy;\n        } else {\n          minY = Math.min(yy, minY);\n          maxY = Math.max(yy, maxY);\n        }\n      }\n      minY -= halfLineSpacing;\n      maxY += halfLineSpacing;\n    }\n\n    return new BoundingBox(x, minY, w, maxY - minY);\n  }\n\n  // Gets the line number of the top or bottom note in the chord.\n  // If `isTopNote` is `true` then get the top note\n  getLineNumber(isTopNote) {\n    if (!this.keyProps.length) {\n      throw new Vex.RERR(\n        'NoKeyProps', \"Can't get bottom note line, because note is not initialized properly.\"\n      );\n    }\n\n    let resultLine = this.keyProps[0].line;\n\n    // No precondition assumed for sortedness of keyProps array\n    for (let i = 0; i < this.keyProps.length; i++) {\n      const thisLine = this.keyProps[i].line;\n      if (isTopNote) {\n        if (thisLine > resultLine) resultLine = thisLine;\n      } else {\n        if (thisLine < resultLine) resultLine = thisLine;\n      }\n    }\n\n    return resultLine;\n  }\n\n  // Determine if current note is a rest\n  isRest() { return this.glyph.rest; }\n\n  // Determine if the current note is a chord\n  isChord() { return !this.isRest() && this.keys.length > 1; }\n\n  // Determine if the `StaveNote` has a stem\n  hasStem() { return this.glyph.stem; }\n\n  hasFlag() {\n    return super.hasFlag() && !this.isRest() && this.renderFlag;\n  }\n\n  getStemX() {\n    if (this.noteType === 'r') {\n      return this.getCenterGlyphX();\n    } else {\n      // We adjust the origin of the stem because we want the stem left-aligned\n      // with the notehead if stemmed-down, and right-aligned if stemmed-up\n      return super.getStemX() + getStemAdjustment(this);\n    }\n  }\n\n  // Get the `y` coordinate for text placed on the top/bottom of a\n  // note at a desired `text_line`\n  getYForTopText(textLine) {\n    const extents = this.getStemExtents();\n    return Math.min(\n      this.stave.getYForTopText(textLine),\n      extents.topY - (this.render_options.annotation_spacing * (textLine + 1))\n    );\n  }\n  getYForBottomText(textLine) {\n    const extents = this.getStemExtents();\n    return Math.max(\n      this.stave.getYForTopText(textLine),\n      extents.baseY + (this.render_options.annotation_spacing * (textLine))\n    );\n  }\n\n  // Sets the current note to the provided `stave`. This applies\n  // `y` values to the `NoteHeads`.\n  setStave(stave) {\n    super.setStave(stave);\n\n    const ys = this.note_heads.map(notehead => {\n      notehead.setStave(stave);\n      return notehead.getY();\n    });\n\n    this.setYs(ys);\n\n    if (this.stem) {\n      const { y_top, y_bottom } = this.getNoteHeadBounds();\n      this.stem.setYBounds(y_top, y_bottom);\n    }\n\n    return this;\n  }\n\n  // Get the pitches in the note\n  getKeys() { return this.keys; }\n\n  // Get the properties for all the keys in the note\n  getKeyProps() {\n    return this.keyProps;\n  }\n\n  // Check if note is shifted to the right\n  isDisplaced() {\n    return this.displaced;\n  }\n\n  // Sets whether shift note to the right. `displaced` is a `boolean`\n  setNoteDisplaced(displaced) {\n    this.displaced = displaced;\n    return this;\n  }\n\n  // Get the starting `x` coordinate for a `StaveTie`\n  getTieRightX() {\n    let tieStartX = this.getAbsoluteX();\n    tieStartX += this.getGlyphWidth() + this.x_shift + this.extraRightPx;\n    if (this.modifierContext) tieStartX += this.modifierContext.getExtraRightPx();\n    return tieStartX;\n  }\n\n  // Get the ending `x` coordinate for a `StaveTie`\n  getTieLeftX() {\n    let tieEndX = this.getAbsoluteX();\n    tieEndX += this.x_shift - this.extraLeftPx;\n    return tieEndX;\n  }\n\n  // Get the stave line on which to place a rest\n  getLineForRest() {\n    let restLine = this.keyProps[0].line;\n    if (this.keyProps.length > 1) {\n      const lastLine = this.keyProps[this.keyProps.length - 1].line;\n      const top = Math.max(restLine, lastLine);\n      const bot = Math.min(restLine, lastLine);\n      restLine = Vex.MidLine(top, bot);\n    }\n\n    return restLine;\n  }\n\n  // Get the default `x` and `y` coordinates for the provided `position`\n  // and key `index`\n  getModifierStartXY(position, index, options) {\n    options = options || {};\n    if (!this.preFormatted) {\n      throw new Vex.RERR('UnformattedNote', \"Can't call GetModifierStartXY on an unformatted note\");\n    }\n\n    if (this.ys.length === 0) {\n      throw new Vex.RERR('NoYValues', 'No Y-Values calculated for this note.');\n    }\n\n    const { ABOVE, BELOW, LEFT, RIGHT } = Modifier.Position;\n    let x = 0;\n    if (position === LEFT) {\n      // extra_left_px\n      // FIXME: What are these magic numbers?\n      x = -1 * 2;\n    } else if (position === RIGHT) {\n      // extra_right_px\n      // FIXME: What is this magical +2?\n      x = this.getGlyphWidth() + this.x_shift + 2;\n\n      if (this.stem_direction === Stem.UP && this.hasFlag() &&\n        (options.forceFlagRight || isInnerNoteIndex(this, index))) {\n        x += this.flag.getMetrics().width;\n      }\n    } else if (position === BELOW || position === ABOVE) {\n      x = this.getGlyphWidth() / 2;\n    }\n\n    return {\n      x: this.getAbsoluteX() + x,\n      y: this.ys[index],\n    };\n  }\n\n  // Sets the style of the complete StaveNote, including all keys\n  // and the stem.\n  setStyle(style) {\n    super.setStyle(style);\n    this.note_heads.forEach(notehead => notehead.setStyle(style));\n    if (this.stem){\n      this.stem.setStyle(style);\n    } \n  }\n\n  setStemStyle(style) {\n    if (this.stem){\n      const stem = this.getStem();\n      stem.setStyle(style);\n    }\n  }\n  getStemStyle() { return this.stem.getStyle(); }\n\n  setLedgerLineStyle(style) { this.ledgerLineStyle = style; }\n  getLedgerLineStyle() { return this.ledgerLineStyle; }\n\n  setFlagStyle(style) { this.flagStyle = style; }\n  getFlagStyle() { return this.flagStyle; }\n\n  // Sets the notehead at `index` to the provided coloring `style`.\n  //\n  // `style` is an `object` with the following properties: `shadowColor`,\n  // `shadowBlur`, `fillStyle`, `strokeStyle`\n  setKeyStyle(index, style) {\n    this.note_heads[index].setStyle(style);\n    return this;\n  }\n\n  setKeyLine(index, line) {\n    this.keyProps[index].line = line;\n    this.reset();\n    return this;\n  }\n\n  getKeyLine(index) {\n    return this.keyProps[index].line;\n  }\n\n  // Add self to modifier context. `mContext` is the `ModifierContext`\n  // to be added to.\n  addToModifierContext(mContext) {\n    this.setModifierContext(mContext);\n    for (let i = 0; i < this.modifiers.length; ++i) {\n      this.modifierContext.addModifier(this.modifiers[i]);\n    }\n    this.modifierContext.addModifier(this);\n    this.setPreFormatted(false);\n    return this;\n  }\n\n  // Generic function to add modifiers to a note\n  //\n  // Parameters:\n  // * `index`: The index of the key that we're modifying\n  // * `modifier`: The modifier to add\n  addModifier(index, modifier) {\n    modifier.setNote(this);\n    modifier.setIndex(index);\n    this.modifiers.push(modifier);\n    this.setPreFormatted(false);\n    return this;\n  }\n\n  // Helper function to add an accidental to a key\n  addAccidental(index, accidental) {\n    return this.addModifier(index, accidental);\n  }\n\n  // Helper function to add an articulation to a key\n  addArticulation(index, articulation) {\n    return this.addModifier(index, articulation);\n  }\n\n  // Helper function to add an annotation to a key\n  addAnnotation(index, annotation) {\n    return this.addModifier(index, annotation);\n  }\n\n  // Helper function to add a dot on a specific key\n  addDot(index) {\n    const dot = new Dot();\n    dot.setDotShiftY(this.glyph.dot_shiftY);\n    this.addDotsCount++;\n    return this.addModifier(index, dot);\n  }\n\n  // Convenience method to add dot to all keys in note\n  addDotToAll() {\n    for (let i = 0; i < this.keys.length; ++i) {\n      this.addDot(i);\n    }\n    return this;\n  }\n\n  // Get all accidentals in the `ModifierContext`\n  getAccidentals() {\n    return this.modifierContext.getModifiers('accidentals');\n  }\n\n  // Get all dots in the `ModifierContext`\n  getDots() {\n    return this.modifierContext.getModifiers('dots');\n  }\n\n  // Get the width of the note if it is displaced. Used for `Voice`\n  // formatting\n  getVoiceShiftWidth() {\n    // TODO: may need to accomodate for dot here.\n    return this.getGlyphWidth() * (this.displaced ? 2 : 1);\n  }\n\n  // Calculates and sets the extra pixels to the left or right\n  // if the note is displaced.\n  calcExtraPx() {\n    this.setExtraLeftPx(\n      this.displaced && this.stem_direction === Stem.DOWN\n        ? this.getGlyphWidth()\n        : 0\n    );\n\n    // For upstems with flags, the extra space is unnecessary, since it's taken\n    // up by the flag.\n    this.setExtraRightPx(\n      !this.hasFlag() && this.displaced && this.stem_direction === Stem.UP\n        ? this.getGlyphWidth()\n        : 0\n    );\n  }\n\n  // Pre-render formatting\n  preFormat() {\n    if (this.preFormatted) return;\n    if (this.modifierContext) this.modifierContext.preFormat();\n\n    let width = this.getGlyphWidth() + this.extraLeftPx + this.extraRightPx;\n\n    // For upward flagged notes, the width of the flag needs to be added\n    if (this.renderFlag && this.glyph.flag && this.beam === null && this.stem_direction === Stem.UP) {\n      width += this.getGlyphWidth();\n    }\n\n    this.setWidth(width);\n    this.setPreFormatted(true);\n  }\n\n  /**\n   * @typedef {Object} noteHeadBounds\n   * @property {number} y_top the highest notehead bound\n   * @property {number} y_bottom the lowest notehead bound\n   * @property {number|Null} displaced_x the starting x for displaced noteheads\n   * @property {number|Null} non_displaced_x the starting x for non-displaced noteheads\n   * @property {number} highest_line the highest notehead line in traditional music line\n   *  numbering (bottom line = 1, top line = 5)\n   * @property {number} lowest_line the lowest notehead line\n   * @property {number|false} highest_displaced_line the highest staff line number\n   *   for a displaced notehead\n   * @property {number|false} lowest_displaced_line\n   * @property {number} highest_non_displaced_line\n   * @property {number} lowest_non_displaced_line\n   */\n\n  /**\n   * Get the staff line and y value for the highest & lowest noteheads\n   * @returns {noteHeadBounds}\n   */\n  getNoteHeadBounds() {\n    // Top and bottom Y values for stem.\n    let yTop = null;\n    let yBottom = null;\n    let nonDisplacedX = null;\n    let displacedX = null;\n\n    let highestLine = this.stave.getNumLines();\n    let lowestLine = 1;\n    let highestDisplacedLine = false;\n    let lowestDisplacedLine = false;\n    let highestNonDisplacedLine = highestLine;\n    let lowestNonDisplacedLine = lowestLine;\n\n    this.note_heads.forEach(notehead => {\n      const line = notehead.getLine();\n      const y = notehead.getY();\n\n      if (yTop === null || y < yTop) {\n        yTop = y;\n      }\n\n      if (yBottom === null || y > yBottom) {\n        yBottom = y;\n      }\n\n      if (displacedX === null && notehead.isDisplaced()) {\n        displacedX = notehead.getAbsoluteX();\n      }\n\n      if (nonDisplacedX === null && !notehead.isDisplaced()) {\n        nonDisplacedX = notehead.getAbsoluteX();\n      }\n\n      highestLine = line > highestLine ? line : highestLine;\n      lowestLine = line < lowestLine ? line : lowestLine;\n\n      if (notehead.isDisplaced()) {\n        highestDisplacedLine = (highestDisplacedLine === false) ?\n          line : Math.max(line, highestDisplacedLine);\n        lowestDisplacedLine = (lowestDisplacedLine === false) ?\n          line : Math.min(line, lowestDisplacedLine);\n      } else {\n        highestNonDisplacedLine = Math.max(line, highestNonDisplacedLine);\n        lowestNonDisplacedLine = Math.min(line, lowestNonDisplacedLine);\n      }\n    }, this);\n\n    return {\n      y_top: yTop,\n      y_bottom: yBottom,\n      displaced_x: displacedX,\n      non_displaced_x: nonDisplacedX,\n      highest_line: highestLine,\n      lowest_line: lowestLine,\n      highest_displaced_line: highestDisplacedLine,\n      lowest_displaced_line: lowestDisplacedLine,\n      highest_non_displaced_line: highestNonDisplacedLine,\n      lowest_non_displaced_line: lowestNonDisplacedLine,\n    };\n  }\n\n  // Get the starting `x` coordinate for the noteheads\n  getNoteHeadBeginX() {\n    return this.getAbsoluteX() + this.x_shift;\n  }\n\n  // Get the ending `x` coordinate for the noteheads\n  getNoteHeadEndX() {\n    const xBegin = this.getNoteHeadBeginX();\n    return xBegin + this.getGlyphWidth();\n  }\n\n  // Draw the ledger lines between the stave and the highest/lowest keys\n  drawLedgerLines() {\n    const {\n      stave, glyph,\n      render_options: { stroke_px },\n      context: ctx,\n    } = this;\n\n    const width = glyph.getWidth() + (stroke_px * 2);\n    const doubleWidth = 2 * (glyph.getWidth() + stroke_px) - (Stem.WIDTH / 2);\n\n    if (this.isRest()) return;\n    if (!ctx) {\n      throw new Vex.RERR('NoCanvasContext', \"Can't draw without a canvas context.\");\n    }\n\n    const {\n      highest_line,\n      lowest_line,\n      highest_displaced_line,\n      highest_non_displaced_line,\n      lowest_displaced_line,\n      lowest_non_displaced_line,\n      displaced_x,\n      non_displaced_x,\n    } = this.getNoteHeadBounds();\n\n    const min_x = Math.min(displaced_x, non_displaced_x);\n\n    const drawLedgerLine = (y, normal, displaced) => {\n      let x;\n      if (displaced && normal) x = min_x - stroke_px;\n      else if (normal) x = non_displaced_x - stroke_px;\n      else x = displaced_x - stroke_px;\n      const ledgerWidth = (normal && displaced) ? doubleWidth : width;\n\n      ctx.beginPath();\n      ctx.moveTo(x, y);\n      ctx.lineTo(x + ledgerWidth, y);\n      ctx.stroke();\n    };\n\n    const style = { ...stave.getStyle() || {}, ...this.getLedgerLineStyle() || {} };\n    this.applyStyle(ctx, style);\n\n    // Draw ledger lines below the staff:\n    for (let line = 6; line <= highest_line; ++line) {\n      const normal = (non_displaced_x !== null) && (line <= highest_non_displaced_line);\n      const displaced = (displaced_x !== null) && (line <= highest_displaced_line);\n      drawLedgerLine(stave.getYForNote(line), normal, displaced);\n    }\n\n    // Draw ledger lines above the staff:\n    for (let line = 0; line >= lowest_line; --line) {\n      const normal = (non_displaced_x !== null) && (line >= lowest_non_displaced_line);\n      const displaced = (displaced_x !== null) && (line >= lowest_displaced_line);\n      drawLedgerLine(stave.getYForNote(line), normal, displaced);\n    }\n\n    this.restoreStyle(ctx, style);\n  }\n\n  // Draw all key modifiers\n  drawModifiers() {\n    if (!this.context) {\n      throw new Vex.RERR('NoCanvasContext', \"Can't draw without a canvas context.\");\n    }\n\n    const ctx = this.context;\n    ctx.openGroup('modifiers');\n    for (let i = 0; i < this.modifiers.length; i++) {\n      const modifier = this.modifiers[i];\n      const notehead = this.note_heads[modifier.getIndex()];\n      const noteheadStyle = notehead.getStyle();\n      notehead.applyStyle(ctx, noteheadStyle);\n      modifier.setContext(ctx);\n      modifier.drawWithStyle();\n      notehead.restoreStyle(ctx, noteheadStyle);\n    }\n    ctx.closeGroup();\n  }\n\n  // Draw the flag for the note\n  drawFlag() {\n    const { stem, beam, context: ctx } = this;\n\n    if (!ctx) {\n      throw new Vex.RERR('NoCanvasContext', \"Can't draw without a canvas context.\");\n    }\n\n    const shouldRenderFlag = beam === null && this.renderFlag;\n    const glyph = this.getGlyph();\n\n    if (glyph.flag && shouldRenderFlag) {\n      const { y_top, y_bottom } = this.getNoteHeadBounds();\n      const noteStemHeight = stem.getHeight();\n      const flagX = this.getStemX();\n      // FIXME: What's with the magic +/- 2\n      const flagY = this.getStemDirection() === Stem.DOWN\n        // Down stems have flags on the left\n        ? y_top - noteStemHeight + 2\n        // Up stems have flags on the eft.\n        : y_bottom - noteStemHeight - 2;\n\n      // Draw the Flag\n      ctx.openGroup('flag', null, { pointerBBox: true });\n      this.applyStyle(ctx, this.getFlagStyle() || false);\n      this.flag.render(ctx, flagX, flagY);\n      this.restoreStyle(ctx, this.getFlagStyle() || false);\n      ctx.closeGroup();\n    }\n  }\n\n  // Draw the NoteHeads\n  drawNoteHeads() {\n    this.note_heads.forEach(notehead => {\n      this.context.openGroup('notehead', null, { pointerBBox: true });\n      notehead.setContext(this.context).draw();\n      this.context.closeGroup();\n    });\n  }\n\n  drawStem(stemStruct) {\n    // GCR TODO: I can't find any context in which this is called with the stemStruct\n    // argument in the codebase or tests. Nor can I find a case where super.drawStem\n    // is called at all. Perhaps these should be removed?\n    if (!this.context) {\n      throw new Vex.RERR('NoCanvasContext', \"Can't draw without a canvas context.\");\n    }\n\n    if (stemStruct) {\n      this.setStem(new Stem(stemStruct));\n    }\n    // seems to not get called here, see this.stem.id above\n    this.stem.id = Vex.Prefix(`${this.getAttribute(\"id\")}-stem`);\n\n    if (this.stem) {\n      this.context.openGroup('stem', null, { pointerBBox: true });\n      this.stem.setContext(this.context).draw();\n      this.context.closeGroup();\n    }\n  }\n\n  // Draws all the `StaveNote` parts. This is the main drawing method.\n  draw() {\n    if (!this.context) {\n      throw new Vex.RERR('NoCanvasContext', \"Can't draw without a canvas context.\");\n    }\n    if (!this.stave) {\n      throw new Vex.RERR('NoStave', \"Can't draw without a stave.\");\n    }\n    if (this.ys.length === 0) {\n      throw new Vex.RERR('NoYValues', \"Can't draw note without Y values.\");\n    }\n\n    const xBegin = this.getNoteHeadBeginX();\n    const shouldRenderStem = this.hasStem() && !this.beam;\n\n    // Format note head x positions\n    this.note_heads.forEach(notehead => notehead.setX(xBegin));\n\n    if(this.stem) {\n      // Format stem x positions\n      const stemX = this.getStemX();\n      this.stem.setNoteHeadXBounds(stemX, stemX);\n    }\n\n    L('Rendering ', this.isChord() ? 'chord :' : 'note :', this.keys);\n\n    // Draw each part of the note\n    this.drawLedgerLines();\n\n    // Apply the overall style -- may be contradicted by local settings:\n    this.applyStyle();\n    this.setAttribute('el', this.context.openGroup('stavenote', this.getAttribute('id')));\n    this.context.openGroup('note', null, { pointerBBox: true });\n    if (shouldRenderStem) this.drawStem();\n    this.drawNoteHeads();\n    this.drawFlag();\n    this.context.closeGroup();\n    this.drawModifiers();\n    this.context.closeGroup();\n    this.restoreStyle();\n    this.setRendered();\n  }\n}\n","// VexFlow - Music Engraving for HTML5\n// Copyright Mohit Muthanna 2010\n// Author Larry Kuhns 2013\n// Class to draws string numbers into the notation.\n\nimport { Vex } from './vex';\nimport { Modifier } from './modifier';\n\n/**\n * @constructor\n */\nexport class FretHandFinger extends Modifier {\n  static get CATEGORY() { return 'frethandfinger'; }\n\n  // Arrange fingerings inside a ModifierContext.\n  static format(nums, state) {\n    const { left_shift, right_shift } = state;\n    const num_spacing = 1;\n\n    if (!nums || nums.length === 0) return false;\n\n    const nums_list = [];\n    let prev_note = null;\n    let shiftLeft = 0;\n    let shiftRight = 0;\n\n    for (let i = 0; i < nums.length; ++i) {\n      const num = nums[i];\n      const note = num.getNote();\n      const pos = num.getPosition();\n      const props = note.getKeyProps()[num.getIndex()];\n      if (note !== prev_note) {\n        for (let n = 0; n < note.keys.length; ++n) {\n          const props_tmp = note.getKeyProps()[n];\n          if (left_shift === 0) {\n            shiftLeft = props_tmp.displaced ? note.getExtraLeftPx() : shiftLeft;\n          }\n          if (right_shift === 0) {\n            shiftRight = props_tmp.displaced ? note.getExtraRightPx() : shiftRight;\n          }\n        }\n        prev_note = note;\n      }\n\n      nums_list.push({\n        note,\n        num,\n        pos,\n        line: props.line,\n        shiftL: shiftLeft,\n        shiftR: shiftRight,\n      });\n    }\n\n    // Sort fingernumbers by line number.\n    nums_list.sort((a, b) => b.line - a.line);\n\n    let numShiftL = 0;\n    let numShiftR = 0;\n    let xWidthL = 0;\n    let xWidthR = 0;\n    let lastLine = null;\n    let lastNote = null;\n\n    for (let i = 0; i < nums_list.length; ++i) {\n      let num_shift = 0;\n      const { note, pos, num, line, shiftL, shiftR } = nums_list[i];\n\n      // Reset the position of the string number every line.\n      if (line !== lastLine || note !== lastNote) {\n        numShiftL = left_shift + shiftL;\n        numShiftR = right_shift + shiftR;\n      }\n\n      const numWidth = num.getWidth() + num_spacing;\n      if (pos === Modifier.Position.LEFT) {\n        num.setXShift(left_shift + numShiftL);\n        num_shift = left_shift + numWidth; // spacing\n        xWidthL = num_shift > xWidthL ? num_shift : xWidthL;\n      } else if (pos === Modifier.Position.RIGHT) {\n        num.setXShift(numShiftR);\n        num_shift = shiftRight + numWidth; // spacing\n        xWidthR = num_shift > xWidthR ? num_shift : xWidthR;\n      }\n      lastLine = line;\n      lastNote = note;\n    }\n\n    state.left_shift += xWidthL;\n    state.right_shift += xWidthR;\n\n    return true;\n  }\n\n  constructor(number) {\n    super();\n    this.setAttribute('type', 'FretHandFinger');\n\n    this.note = null;\n    this.index = null;\n    this.finger = number;\n    this.width = 7;\n    this.position = Modifier.Position.LEFT;  // Default position above stem or note head\n    this.x_shift = 0;\n    this.y_shift = 0;\n    this.x_offset = 0;       // Horizontal offset from default\n    this.y_offset = 0;       // Vertical offset from default\n    this.font = {\n      family: 'sans-serif',\n      size: 9,\n      weight: 'bold',\n    };\n  }\n  getCategory() { return FretHandFinger.CATEGORY; }\n  setFretHandFinger(number) { this.finger = number; return this; }\n  setOffsetX(x) { this.x_offset = x; return this; }\n  setOffsetY(y) { this.y_offset = y; return this; }\n\n  draw() {\n    this.checkContext();\n\n    if (!this.note || this.index == null) {\n      throw new Vex.RERR('NoAttachedNote', \"Can't draw string number without a note and index.\");\n    }\n\n    this.setRendered();\n    const ctx = this.context;\n    const start = this.note.getModifierStartXY(this.position, this.index);\n    let dot_x = start.x + this.x_shift + this.x_offset;\n    let dot_y = start.y + this.y_shift + this.y_offset + 5;\n\n    switch (this.position) {\n      case Modifier.Position.ABOVE:\n        dot_x -= 4;\n        dot_y -= 12;\n        break;\n      case Modifier.Position.BELOW:\n        dot_x -= 2;\n        dot_y += 10;\n        break;\n      case Modifier.Position.LEFT:\n        dot_x -= this.width;\n        break;\n      case Modifier.Position.RIGHT:\n        dot_x += 1;\n        break;\n      default:\n        throw new Vex.RERR('InvalidPostion', `The position ${this.position} does not exist`);\n    }\n\n    ctx.save();\n    ctx.setFont(this.font.family, this.font.size, this.font.weight);\n    ctx.fillText('' + this.finger, dot_x, dot_y);\n    ctx.restore();\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n// This class implements some standard music theory routines.\n\nimport { Vex } from './vex';\n\nexport class Music {\n  static get NUM_TONES() {\n    return 12;\n  }\n\n  static get roots() {\n    return ['c', 'd', 'e', 'f', 'g', 'a', 'b'];\n  }\n\n  static get root_values() {\n    return [0, 2, 4, 5, 7, 9, 11];\n  }\n\n  static get root_indices() {\n    return {\n      'c': 0,\n      'd': 1,\n      'e': 2,\n      'f': 3,\n      'g': 4,\n      'a': 5,\n      'b': 6,\n    };\n  }\n\n  static get canonical_notes() {\n    return [\n      'c', 'c#', 'd', 'd#',\n      'e', 'f', 'f#', 'g',\n      'g#', 'a', 'a#', 'b',\n    ];\n  }\n\n  static get diatonic_intervals() {\n    return [\n      'unison', 'm2', 'M2', 'm3', 'M3',\n      'p4', 'dim5', 'p5', 'm6', 'M6',\n      'b7', 'M7', 'octave',\n    ];\n  }\n\n  static get diatonic_accidentals() {\n    return {\n      'unison': { note: 0, accidental: 0 },\n      'm2': { note: 1, accidental: -1 },\n      'M2': { note: 1, accidental: 0 },\n      'm3': { note: 2, accidental: -1 },\n      'M3': { note: 2, accidental: 0 },\n      'p4': { note: 3, accidental: 0 },\n      'dim5': { note: 4, accidental: -1 },\n      'p5': { note: 4, accidental: 0 },\n      'm6': { note: 5, accidental: -1 },\n      'M6': { note: 5, accidental: 0 },\n      'b7': { note: 6, accidental: -1 },\n      'M7': { note: 6, accidental: 0 },\n      'octave': { note: 7, accidental: 0 },\n    };\n  }\n\n  static get intervals() {\n    return {\n      'u': 0, 'unison': 0,\n      'm2': 1, 'b2': 1, 'min2': 1, 'S': 1, 'H': 1,\n      '2': 2, 'M2': 2, 'maj2': 2, 'T': 2, 'W': 2,\n      'm3': 3, 'b3': 3, 'min3': 3,\n      'M3': 4, '3': 4, 'maj3': 4,\n      '4': 5, 'p4': 5,\n      '#4': 6, 'b5': 6, 'aug4': 6, 'dim5': 6,\n      '5': 7, 'p5': 7,\n      '#5': 8, 'b6': 8, 'aug5': 8,\n      '6': 9, 'M6': 9, 'maj6': 9,\n      'b7': 10, 'm7': 10, 'min7': 10, 'dom7': 10,\n      'M7': 11, 'maj7': 11,\n      '8': 12, 'octave': 12,\n    };\n  }\n\n  static get scales() {\n    return {\n      major: [2, 2, 1, 2, 2, 2, 1],\n      dorian: [2, 1, 2, 2, 2, 1, 2],\n      mixolydian: [2, 2, 1, 2, 2, 1, 2],\n      minor: [2, 1, 2, 2, 1, 2, 2],\n    };\n  }\n\n  static get scaleTypes() {\n    return {\n      'M': Music.scales.major,\n      'm': Music.scales.minor,\n    };\n  }\n\n  static get accidentals() {\n    return ['bb', 'b', 'n', '#', '##'];\n  }\n\n  static get noteValues() {\n    return {\n      'c': { root_index: 0, int_val: 0 },\n      'cn': { root_index: 0, int_val: 0 },\n      'c#': { root_index: 0, int_val: 1 },\n      'c##': { root_index: 0, int_val: 2 },\n      'cb': { root_index: 0, int_val: 11 },\n      'cbb': { root_index: 0, int_val: 10 },\n      'd': { root_index: 1, int_val: 2 },\n      'dn': { root_index: 1, int_val: 2 },\n      'd#': { root_index: 1, int_val: 3 },\n      'd##': { root_index: 1, int_val: 4 },\n      'db': { root_index: 1, int_val: 1 },\n      'dbb': { root_index: 1, int_val: 0 },\n      'e': { root_index: 2, int_val: 4 },\n      'en': { root_index: 2, int_val: 4 },\n      'e#': { root_index: 2, int_val: 5 },\n      'e##': { root_index: 2, int_val: 6 },\n      'eb': { root_index: 2, int_val: 3 },\n      'ebb': { root_index: 2, int_val: 2 },\n      'f': { root_index: 3, int_val: 5 },\n      'fn': { root_index: 3, int_val: 5 },\n      'f#': { root_index: 3, int_val: 6 },\n      'f##': { root_index: 3, int_val: 7 },\n      'fb': { root_index: 3, int_val: 4 },\n      'fbb': { root_index: 3, int_val: 3 },\n      'g': { root_index: 4, int_val: 7 },\n      'gn': { root_index: 4, int_val: 7 },\n      'g#': { root_index: 4, int_val: 8 },\n      'g##': { root_index: 4, int_val: 9 },\n      'gb': { root_index: 4, int_val: 6 },\n      'gbb': { root_index: 4, int_val: 5 },\n      'a': { root_index: 5, int_val: 9 },\n      'an': { root_index: 5, int_val: 9 },\n      'a#': { root_index: 5, int_val: 10 },\n      'a##': { root_index: 5, int_val: 11 },\n      'ab': { root_index: 5, int_val: 8 },\n      'abb': { root_index: 5, int_val: 7 },\n      'b': { root_index: 6, int_val: 11 },\n      'bn': { root_index: 6, int_val: 11 },\n      'b#': { root_index: 6, int_val: 0 },\n      'b##': { root_index: 6, int_val: 1 },\n      'bb': { root_index: 6, int_val: 10 },\n      'bbb': { root_index: 6, int_val: 9 },\n    };\n  }\n\n  isValidNoteValue(note) {\n    if (note == null || note < 0 || note >= Music.NUM_TONES) {\n      return false;\n    }\n    return true;\n  }\n\n  isValidIntervalValue(interval) {\n    return this.isValidNoteValue(interval);\n  }\n\n  getNoteParts(noteString) {\n    if (!noteString || noteString.length < 1) {\n      throw new Vex.RERR('BadArguments', 'Invalid note name: ' + noteString);\n    }\n\n    if (noteString.length > 3) {\n      throw new Vex.RERR('BadArguments', 'Invalid note name: ' + noteString);\n    }\n\n    const note = noteString.toLowerCase();\n\n    const regex = /^([cdefgab])(b|bb|n|#|##)?$/;\n    const match = regex.exec(note);\n\n    if (match != null) {\n      const root = match[1];\n      const accidental = match[2];\n\n      return {\n        root,\n        accidental,\n      };\n    } else {\n      throw new Vex.RERR('BadArguments', 'Invalid note name: ' + noteString);\n    }\n  }\n\n  getKeyParts(keyString) {\n    if (!keyString || keyString.length < 1) {\n      throw new Vex.RERR('BadArguments', 'Invalid key: ' + keyString);\n    }\n\n    const key = keyString.toLowerCase();\n\n    // Support Major, Minor, Melodic Minor, and Harmonic Minor key types.\n    const regex = /^([cdefgab])(b|#)?(mel|harm|m|M)?$/;\n    const match = regex.exec(key);\n\n    if (match != null) {\n      const root = match[1];\n      const accidental = match[2];\n      let type = match[3];\n\n      // Unspecified type implies major\n      if (!type) type = 'M';\n\n      return {\n        root,\n        accidental,\n        type,\n      };\n    } else {\n      throw new Vex.RERR('BadArguments', `Invalid key: ${keyString}`);\n    }\n  }\n\n  getNoteValue(noteString) {\n    const value = Music.noteValues[noteString];\n    if (value == null) {\n      throw new Vex.RERR('BadArguments', `Invalid note name: ${noteString}`);\n    }\n\n    return value.int_val;\n  }\n\n  getIntervalValue(intervalString) {\n    const value = Music.intervals[intervalString];\n    if (value == null) {\n      throw new Vex.RERR('BadArguments', `Invalid interval name: ${intervalString}`);\n    }\n\n    return value;\n  }\n\n  getCanonicalNoteName(noteValue) {\n    if (!this.isValidNoteValue(noteValue)) {\n      throw new Vex.RERR('BadArguments', `Invalid note value: ${noteValue}`);\n    }\n\n    return Music.canonical_notes[noteValue];\n  }\n\n  getCanonicalIntervalName(intervalValue) {\n    if (!this.isValidIntervalValue(intervalValue)) {\n      throw new Vex.RERR('BadArguments', `Invalid interval value: ${intervalValue}`);\n    }\n\n    return Music.diatonic_intervals[intervalValue];\n  }\n\n  /* Given a note, interval, and interval direction, product the\n   * relative note.\n   */\n  getRelativeNoteValue(noteValue, intervalValue, direction) {\n    if (direction == null) direction = 1;\n\n    if (direction !== 1 && direction !== -1) {\n      throw new Vex.RERR('BadArguments', `Invalid direction: ${direction}`);\n    }\n\n    let sum = (noteValue + (direction * intervalValue)) % Music.NUM_TONES;\n    if (sum < 0) sum += Music.NUM_TONES;\n\n    return sum;\n  }\n\n  getRelativeNoteName(root, noteValue) {\n    const parts = this.getNoteParts(root);\n    const rootValue = this.getNoteValue(parts.root);\n    let interval = noteValue - rootValue;\n\n    if (Math.abs(interval) > Music.NUM_TONES - 3) {\n      let multiplier = 1;\n      if (interval > 0) multiplier = -1;\n\n      // Possibly wrap around. (Add +1 for modulo operator)\n      const reverse_interval = (((noteValue + 1) + (rootValue + 1)) %\n        Music.NUM_TONES) * multiplier;\n\n      if (Math.abs(reverse_interval) > 2) {\n        throw new Vex.RERR('BadArguments', `Notes not related: ${root}, ${noteValue})`);\n      } else {\n        interval = reverse_interval;\n      }\n    }\n\n    if (Math.abs(interval) > 2) {\n      throw new Vex.RERR('BadArguments', `Notes not related: ${root}, ${noteValue})`);\n    }\n\n    let relativeNoteName = parts.root;\n    if (interval > 0) {\n      for (let i = 1; i <= interval; ++i) {\n        relativeNoteName += '#';\n      }\n    } else if (interval < 0) {\n      for (let i = -1; i >= interval; --i) {\n        relativeNoteName += 'b';\n      }\n    }\n\n    return relativeNoteName;\n  }\n\n  /* Return scale tones, given intervals. Each successive interval is\n   * relative to the previous one, e.g., Major Scale:\n   *\n   *   TTSTTTS = [2,2,1,2,2,2,1]\n   *\n   * When used with key = 0, returns C scale (which is isomorphic to\n   * interval list).\n   */\n  getScaleTones(key, intervals) {\n    const tones = [key];\n\n    let nextNote = key;\n    for (let i = 0; i < intervals.length; i += 1) {\n      nextNote = this.getRelativeNoteValue(nextNote, intervals[i]);\n      if (nextNote !== key) tones.push(nextNote);\n    }\n\n    return tones;\n  }\n\n  /* Returns the interval of a note, given a diatonic scale.\n   *\n   * E.g., Given the scale C, and the note E, returns M3\n   */\n  getIntervalBetween(note1, note2, direction) {\n    if (direction == null) direction = 1;\n\n    if (direction !== 1 && direction !== -1) {\n      throw new Vex.RERR('BadArguments', `Invalid direction: ${direction}`);\n    }\n\n    if (!this.isValidNoteValue(note1) || !this.isValidNoteValue(note2)) {\n      throw new Vex.RERR('BadArguments', `Invalid notes: ${note1}, ${note2}`);\n    }\n\n    let difference = direction === 1\n      ? note2 - note1\n      : note1 - note2;\n\n    if (difference < 0) difference += Music.NUM_TONES;\n\n    return difference;\n  }\n\n  // Create a scale map that represents the pitch state for a\n  // `keySignature`. For example, passing a `G` to `keySignature` would\n  // return a scale map with every note naturalized except for `F` which\n  // has an `F#` state.\n  createScaleMap(keySignature) {\n    const keySigParts = this.getKeyParts(keySignature);\n    const scaleName = Music.scaleTypes[keySigParts.type];\n\n    let keySigString = keySigParts.root;\n    if (keySigParts.accidental) keySigString += keySigParts.accidental;\n\n    if (!scaleName) throw new Vex.RERR('BadArguments', 'Unsupported key type: ' + keySignature);\n\n    const scale = this.getScaleTones(this.getNoteValue(keySigString), scaleName);\n    const noteLocation = Music.root_indices[keySigParts.root];\n\n    const scaleMap = {};\n    for (let i = 0; i < Music.roots.length; ++i) {\n      const index = (noteLocation + i) % Music.roots.length;\n      const rootName = Music.roots[index];\n      let noteName = this.getRelativeNoteName(rootName, scale[i]);\n\n      if (noteName.length === 1) {\n        noteName += 'n';\n      }\n\n      scaleMap[rootName] = noteName;\n    }\n\n    return scaleMap;\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// @author Mohit Cheppudira\n// @author Greg Ristow (modifications)\n//\n// ## Description\n//\n// This file implements accidentals as modifiers that can be attached to\n// notes. Support is included for both western and microtonal accidentals.\n//\n// See `tests/accidental_tests.js` for usage examples.\n\nimport { Vex } from './vex';\nimport { Fraction } from './fraction';\nimport { Flow } from './tables';\nimport { Music } from './music';\nimport { Modifier } from './modifier';\nimport { Glyph } from './glyph';\n\n// To enable logging for this class. Set `Vex.Flow.Accidental.DEBUG` to `true`.\nfunction L(...args) { if (Accidental.DEBUG) Vex.L('Vex.Flow.Accidental', args); }\n\nconst getGlyphWidth = glyph => glyph.getMetrics().width;\n\n// An `Accidental` inherits from `Modifier`, and is formatted within a\n// `ModifierContext`.\nexport class Accidental extends Modifier {\n  static get CATEGORY() { return 'accidentals'; }\n\n  // Arrange accidentals inside a ModifierContext.\n  static format(accidentals, state) {\n    const noteheadAccidentalPadding = 1;\n    const leftShift = state.left_shift + noteheadAccidentalPadding;\n    const accidentalSpacing = 3;\n\n    // If there are no accidentals, we needn't format their positions\n    if (!accidentals || accidentals.length === 0) return;\n\n    const accList = [];\n    let prevNote = null;\n    let shiftL = 0;\n\n    // First determine the accidentals' Y positions from the note.keys\n    let propsTemp;\n    for (let i = 0; i < accidentals.length; ++i) {\n      const acc = accidentals[i];\n      const note = acc.getNote();\n      const stave = note.getStave();\n      const props = note.getKeyProps()[acc.getIndex()];\n      if (note !== prevNote) {\n        // Iterate through all notes to get the displaced pixels\n        for (let n = 0; n < note.keys.length; ++n) {\n          propsTemp = note.getKeyProps()[n];\n          shiftL = propsTemp.displaced ? note.getExtraLeftPx() : shiftL;\n        }\n        prevNote = note;\n      }\n      if (stave !== null) {\n        const lineSpace = stave.options.spacing_between_lines_px;\n        const y = stave.getYForLine(props.line);\n        const accLine = Math.round(y / lineSpace * 2) / 2;\n        accList.push({ y, line: accLine, shift: shiftL, acc, lineSpace });\n      } else {\n        accList.push({ line: props.line, shift: shiftL, acc });\n      }\n    }\n\n    // Sort accidentals by line number.\n    accList.sort((a, b) => b.line - a.line);\n\n    // FIXME: Confusing name. Each object in this array has a property called `line`.\n    // So if this is a list of lines, you end up with: `line.line` which is very awkward.\n    const lineList = [];\n\n    // amount by which all accidentals must be shifted right or left for\n    // stem flipping, notehead shifting concerns.\n    let accShift = 0;\n    let previousLine = null;\n\n    // Create an array of unique line numbers (lineList) from accList\n    for (let i = 0; i < accList.length; i++) {\n      const acc = accList[i];\n\n      // if this is the first line, or a new line, add a lineList\n      if (previousLine === null || previousLine !== acc.line) {\n        lineList.push({\n          line: acc.line,\n          flatLine: true,\n          dblSharpLine: true,\n          numAcc: 0,\n          width: 0,\n        });\n      }\n      // if this accidental is not a flat, the accidental needs 3.0 lines lower\n      // clearance instead of 2.5 lines for b or bb.\n      // FIXME: Naming could use work. acc.acc is very awkward\n      if (acc.acc.type !== 'b' && acc.acc.type !== 'bb') {\n        lineList[lineList.length - 1].flatLine = false;\n      }\n\n      // if this accidental is not a double sharp, the accidental needs 3.0 lines above\n      if (acc.acc.type !== '##') {\n        lineList[lineList.length - 1].dblSharpLine = false;\n      }\n\n      // Track how many accidentals are on this line:\n      lineList[lineList.length - 1].numAcc++;\n\n      // Track the total x_offset needed for this line which will be needed\n      // for formatting lines w/ multiple accidentals:\n\n      // width = accidental width + universal spacing between accidentals\n      lineList[lineList.length - 1].width += acc.acc.getWidth() + accidentalSpacing;\n\n      // if this accShift is larger, use it to keep first column accidentals in the same line\n      accShift = acc.shift > accShift ? acc.shift : accShift;\n\n      previousLine = acc.line;\n    }\n\n    // ### Place Accidentals in Columns\n    //\n    // Default to a classic triangular layout (middle accidental farthest left),\n    // but follow exceptions as outlined in G. Read's _Music Notation_ and\n    // Elaine Gould's _Behind Bars_.\n    //\n    // Additionally, this implements different vertical collision rules for\n    // flats (only need 2.5 lines clearance below) and double sharps (only\n    // need 2.5 lines of clearance above or below).\n    //\n    // Classic layouts and exception patterns are found in the 'tables.js'\n    // in 'Vex.Flow.accidentalColumnsTable'\n    //\n    // Beyond 6 vertical accidentals, default to the parallel ascending lines approach,\n    // using as few columns as possible for the verticle structure.\n    //\n    // TODO (?): Allow column to be specified for an accidental at run-time?\n\n    let totalColumns = 0;\n\n    // establish the boundaries for a group of notes with clashing accidentals:\n    for (let i = 0; i < lineList.length; i++) {\n      let noFurtherConflicts = false;\n      const groupStart = i;\n      let groupEnd = i;\n\n      while (groupEnd + 1 < lineList.length && !noFurtherConflicts) {\n        // if this note conflicts with the next:\n        if (this.checkCollision(lineList[groupEnd], lineList[groupEnd + 1])) {\n          // include the next note in the group:\n          groupEnd++;\n        } else {\n          noFurtherConflicts = true;\n        }\n      }\n\n      // Gets an a line from the `lineList`, relative to the current group\n      const getGroupLine = (index) => lineList[groupStart + index];\n      const getGroupLines = (indexes) => indexes.map(getGroupLine);\n      const lineDifference = (indexA, indexB) => {\n        const [a, b] = getGroupLines([indexA, indexB]).map(item => item.line);\n        return a - b;\n      };\n\n      const notColliding = (...indexPairs) =>\n        indexPairs\n          .map(getGroupLines)\n          .every(lines => !this.checkCollision(...lines));\n\n      // Set columns for the lines in this group:\n      const groupLength = groupEnd - groupStart + 1;\n\n      // Set the accidental column for each line of the group\n      let endCase = this.checkCollision(lineList[groupStart], lineList[groupEnd]) ? 'a' : 'b';\n\n      switch (groupLength) {\n        case 3:\n          if (endCase === 'a' && lineDifference(1, 2) === 0.5 && lineDifference(0, 1) !== 0.5) {\n            endCase = 'second_on_bottom';\n          }\n          break;\n        case 4:\n          if (notColliding([0, 2], [1, 3])) {\n            endCase = 'spaced_out_tetrachord';\n          }\n          break;\n        case 5:\n          if (endCase === 'b' && notColliding([1, 3])) {\n            endCase = 'spaced_out_pentachord';\n            if (notColliding([0, 2], [2, 4])) {\n              endCase = 'very_spaced_out_pentachord';\n            }\n          }\n          break;\n        case 6:\n          if (notColliding([0, 3], [1, 4], [2, 5])) {\n            endCase = 'spaced_out_hexachord';\n          }\n          if (notColliding([0, 2], [2, 4], [1, 3], [3, 5])) {\n            endCase = 'very_spaced_out_hexachord';\n          }\n          break;\n        default:\n          break;\n      }\n\n      let groupMember;\n      let column;\n      // If the group contains more than seven members, use ascending parallel lines\n      // of accidentals, using as few columns as possible while avoiding collisions.\n      if (groupLength >= 7) {\n        // First, determine how many columns to use:\n        let patternLength = 2;\n        let collisionDetected = true;\n        while (collisionDetected === true) {\n          collisionDetected = false;\n          for (let line = 0; line + patternLength < lineList.length; line++) {\n            if (this.checkCollision(lineList[line], lineList[line + patternLength])) {\n              collisionDetected = true;\n              patternLength++;\n              break;\n            }\n          }\n        }\n        // Then, assign a column to each line of accidentals\n        for (groupMember = i; groupMember <= groupEnd; groupMember++) {\n          column = ((groupMember - i) % patternLength) + 1;\n          lineList[groupMember].column = column;\n          totalColumns = (totalColumns > column) ? totalColumns : column;\n        }\n\n        // Otherwise, if the group contains fewer than seven members, use the layouts from\n        // the accidentalsColumnsTable housed in tables.js.\n      } else {\n        for (groupMember = i; groupMember <= groupEnd; groupMember++) {\n          column = Flow.accidentalColumnsTable[groupLength][endCase][groupMember - i];\n          lineList[groupMember].column = column;\n          totalColumns = (totalColumns > column) ? totalColumns : column;\n        }\n      }\n\n      // Increment i to the last note that was set, so that if a lower set of notes\n      // does not conflict at all with this group, it can have its own classic shape.\n      i = groupEnd;\n    }\n\n    // ### Convert Columns to x_offsets\n    //\n    // This keeps columns aligned, even if they have different accidentals within them\n    // which sometimes results in a larger x_offset than is an accidental might need\n    // to preserve the symmetry of the accidental shape.\n    //\n    // Neither A.C. Vinci nor G. Read address this, and it typically only happens in\n    // music with complex chord clusters.\n    //\n    // TODO (?): Optionally allow closer compression of accidentals, instead of forcing\n    // parallel columns.\n\n    // track each column's max width, which will be used as initial shift of later columns:\n    const columnWidths = [];\n    const columnXOffsets = [];\n    for (let i = 0; i <= totalColumns; i++) {\n      columnWidths[i] = 0;\n      columnXOffsets[i] = 0;\n    }\n\n    columnWidths[0] = accShift + leftShift;\n    columnXOffsets[0] = accShift + leftShift;\n\n    // Fill columnWidths with widest needed x-space;\n    // this is what keeps the columns parallel.\n    lineList.forEach(line => {\n      if (line.width > columnWidths[line.column]) columnWidths[line.column] = line.width;\n    });\n\n    for (let i = 1; i < columnWidths.length; i++) {\n      // this column's offset = this column's width + previous column's offset\n      columnXOffsets[i] = columnWidths[i] + columnXOffsets[i - 1];\n    }\n\n    const totalShift = columnXOffsets[columnXOffsets.length - 1];\n    // Set the xShift for each accidental according to column offsets:\n    let accCount = 0;\n    lineList.forEach(line => {\n      let lineWidth = 0;\n      const lastAccOnLine = accCount + line.numAcc;\n      // handle all of the accidentals on a given line:\n      for (accCount; accCount < lastAccOnLine; accCount++) {\n        const xShift = (columnXOffsets[line.column - 1] + lineWidth);\n        accList[accCount].acc.setXShift(xShift);\n        // keep track of the width of accidentals we've added so far, so that when\n        // we loop, we add space for them.\n        lineWidth += accList[accCount].acc.getWidth() + accidentalSpacing;\n        L('Line, accCount, shift: ', line.line, accCount, xShift);\n      }\n    });\n\n    // update the overall layout with the full width of the accidental shapes:\n    state.left_shift += totalShift;\n  }\n\n  // Helper function to determine whether two lines of accidentals collide vertically\n  static checkCollision(line1, line2) {\n    let clearance = line2.line - line1.line;\n    let clearanceRequired = 3;\n    // But less clearance is required for certain accidentals: b, bb and ##.\n    if (clearance > 0) { // then line 2 is on top\n      clearanceRequired = (line2.flatLine || line2.dblSharpLine) ? 2.5 : 3.0;\n      if (line1.dblSharpLine) clearance -= 0.5;\n    } else { // line 1 is on top\n      clearanceRequired = (line1.flatLine || line1.dblSharpLine) ? 2.5 : 3.0;\n      if (line2.dblSharpLine) clearance -= 0.5;\n    }\n    const collision = Math.abs(clearance) < clearanceRequired;\n    L('Line_1, Line_2, Collision: ', line1.line, line2.line, collision);\n    return collision;\n  }\n\n  // Use this method to automatically apply accidentals to a set of `voices`.\n  // The accidentals will be remembered between all the voices provided.\n  // Optionally, you can also provide an initial `keySignature`.\n  static applyAccidentals(voices, keySignature) {\n    const tickPositions = [];\n    const tickNoteMap = {};\n\n    // Sort the tickables in each voice by their tick position in the voice\n    voices.forEach(voice => {\n      const tickPosition = new Fraction(0, 1);\n      const notes = voice.getTickables();\n      notes.forEach(note => {\n        if (note.shouldIgnoreTicks()) return;\n\n        const notesAtPosition = tickNoteMap[tickPosition.value()];\n\n        if (!notesAtPosition) {\n          tickPositions.push(tickPosition.value());\n          tickNoteMap[tickPosition.value()] = [note];\n        } else {\n          notesAtPosition.push(note);\n        }\n\n        tickPosition.add(note.getTicks());\n      });\n    });\n\n    const music = new Music();\n\n    // Default key signature is C major\n    if (!keySignature) keySignature = 'C';\n\n    // Get the scale map, which represents the current state of each pitch\n    const scaleMap = music.createScaleMap(keySignature);\n\n    tickPositions.forEach(tick => {\n      const notes = tickNoteMap[tick];\n\n      // Array to store all pitches that modified accidental states\n      // at this tick position\n      const modifiedPitches = [];\n\n      const processNote = (note) => {\n        if (note.isRest() || note.shouldIgnoreTicks()) return;\n\n        // Go through each key and determine if an accidental should be\n        // applied\n        note.keys.forEach((keyString, keyIndex) => {\n          const key = music.getNoteParts(keyString.split('/')[0]);\n\n          // Force a natural for every key without an accidental\n          const accidentalString = key.accidental || 'n';\n          const pitch = key.root + accidentalString;\n\n          // Determine if the current pitch has the same accidental\n          // as the scale state\n          const sameAccidental = scaleMap[key.root] === pitch;\n\n          // Determine if an identical pitch in the chord already\n          // modified the accidental state\n          const previouslyModified = modifiedPitches.indexOf(pitch) > -1;\n\n          // Add the accidental to the StaveNote\n          if (!sameAccidental || (sameAccidental && previouslyModified)) {\n            // Modify the scale map so that the root pitch has an\n            // updated state\n            scaleMap[key.root] = pitch;\n\n            // Create the accidental\n            const accidental = new Accidental(accidentalString);\n\n            // Attach the accidental to the StaveNote\n            note.addAccidental(keyIndex, accidental);\n\n            // Add the pitch to list of pitches that modified accidentals\n            modifiedPitches.push(pitch);\n          }\n        });\n\n        // process grace notes\n        note.getModifiers().forEach(modifier => {\n          if (modifier.getCategory() === 'gracenotegroups') {\n            modifier.getGraceNotes().forEach(processNote);\n          }\n        });\n      };\n\n      notes.forEach(processNote);\n    });\n  }\n\n  // Create accidental. `type` can be a value from the\n  // `Vex.Flow.accidentalCodes.accidentals` table in `tables.js`. For\n  // example: `#`, `##`, `b`, `n`, etc.\n  constructor(type = null) {\n    super();\n    this.setAttribute('type', 'Accidental');\n\n    L('New accidental: ', type);\n\n    this.note = null;\n    // The `index` points to a specific note in a chord.\n    this.index = null;\n    this.type = type;\n    this.position = Modifier.Position.LEFT;\n\n    this.render_options = {\n      // Font size for glyphs\n      font_scale: 38,\n\n      // Length of stroke across heads above or below the stave.\n      stroke_px: 3,\n\n      // Padding between accidental and parentheses on each side\n      parenLeftPadding: 2,\n      parenRightPadding: 2,\n    };\n\n    this.accidental = Flow.accidentalCodes(this.type);\n    if (!this.accidental) {\n      throw new Vex.RERR('ArgumentError', `Unknown accidental type: ${type}`);\n    }\n\n    // Cautionary accidentals have parentheses around them\n    this.cautionary = false;\n    this.parenLeft = null;\n    this.parenRight = null;\n\n    this.reset();\n  }\n\n  reset() {\n    const fontScale = this.render_options.font_scale;\n    this.glyph = new Glyph(this.accidental.code, fontScale);\n    this.glyph.setOriginX(1.0);\n\n    if (this.cautionary) {\n      this.parenLeft = new Glyph(Flow.accidentalCodes('{').code, fontScale);\n      this.parenRight = new Glyph(Flow.accidentalCodes('}').code, fontScale);\n      this.parenLeft.setOriginX(1.0);\n      this.parenRight.setOriginX(1.0);\n    }\n  }\n\n  getCategory() { return Accidental.CATEGORY; }\n\n  getWidth() {\n    const parenWidth = this.cautionary\n      ? (\n        getGlyphWidth(this.parenLeft) +\n        getGlyphWidth(this.parenRight) +\n        this.render_options.parenLeftPadding +\n        this.render_options.parenRightPadding\n      )\n      : 0;\n\n    return getGlyphWidth(this.glyph) + parenWidth;\n  }\n\n  // Attach this accidental to `note`, which must be a `StaveNote`.\n  setNote(note) {\n    if (!note) {\n      throw new Vex.RERR('ArgumentError', `Bad note value: ${note}`);\n    }\n\n    this.note = note;\n\n    // Accidentals attached to grace notes are rendered smaller.\n    if (this.note.getCategory() === 'gracenotes') {\n      this.render_options.font_scale = 25;\n      this.reset();\n    }\n  }\n\n  // If called, draws parenthesis around accidental.\n  setAsCautionary() {\n    this.cautionary = true;\n    this.render_options.font_scale = 28;\n    this.reset();\n    return this;\n  }\n\n  // Render accidental onto canvas.\n  draw() {\n    const {\n      context,\n      type, position, note, index, cautionary,\n      x_shift, y_shift,\n      glyph, parenLeft, parenRight,\n      render_options: { parenLeftPadding, parenRightPadding },\n    } = this;\n\n    this.checkContext();\n\n    if (!(note && (index != null))) {\n      throw new Vex.RERR('NoAttachedNote', \"Can't draw accidental without a note and index.\");\n    }\n\n    // Figure out the start `x` and `y` coordinates for note and index.\n    const start = note.getModifierStartXY(position, index);\n    let accX = start.x + x_shift;\n    const accY = start.y + y_shift;\n    L('Rendering: ', type, accX, accY);\n\n    if (!cautionary) {\n      glyph.render(context, accX, accY);\n    } else {\n      // Render the accidental in parentheses.\n      parenRight.render(context, accX, accY);\n      accX -= getGlyphWidth(parenRight);\n      accX -= parenRightPadding;\n      accX -= this.accidental.parenRightPaddingAdjustment;\n      glyph.render(context, accX, accY);\n      accX -= getGlyphWidth(glyph);\n      accX -= parenLeftPadding;\n      parenLeft.render(context, accX, accY);\n    }\n\n    this.setRendered();\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// Author Taehoon Moon 2016\n//\n// ## Description\n//\n// This file implements `NoteSubGroup` which is used to format and\n// render notes as a `Modifier`\n// ex) ClefNote, TimeSigNote and BarNote.\n\nimport { Vex } from './vex';\nimport { Flow } from './tables';\nimport { Modifier } from './modifier';\nimport { Formatter } from './formatter';\nimport { Voice } from './voice';\n\nexport class NoteSubGroup extends Modifier {\n  static get CATEGORY() { return 'notesubgroup'; }\n\n  // Arrange groups inside a `ModifierContext`\n  static format(groups, state) {\n    if (!groups || groups.length === 0) return false;\n\n    let width = 0;\n    for (let i = 0; i < groups.length; ++i) {\n      const group = groups[i];\n      group.preFormat();\n      width += group.getWidth();\n    }\n\n    state.left_shift += width;\n    return true;\n  }\n\n  constructor(subNotes) {\n    super();\n    this.setAttribute('type', 'NoteSubGroup');\n\n    this.note = null;\n    this.index = null;\n    this.position = Modifier.Position.LEFT;\n    this.subNotes = subNotes;\n    this.subNotes.forEach(subNote => { subNote.ignore_ticks = false; });\n    this.width = 0;\n    this.preFormatted = false;\n\n    this.formatter = new Formatter();\n    this.voice = new Voice({\n      num_beats: 4,\n      beat_value: 4,\n      resolution: Flow.RESOLUTION,\n    }).setStrict(false);\n\n    this.voice.addTickables(this.subNotes);\n\n    return this;\n  }\n\n  getCategory() { return NoteSubGroup.CATEGORY; }\n\n  preFormat() {\n    if (this.preFormatted) return;\n\n    this.formatter.joinVoices([this.voice]).format([this.voice], 0);\n    this.setWidth(this.formatter.getMinTotalWidth());\n    this.preFormatted = true;\n  }\n\n  setNote(note) {\n    this.note = note;\n  }\n  setWidth(width) {\n    this.width = width;\n  }\n  getWidth() {\n    return this.width;\n  }\n\n  draw() {\n    this.checkContext();\n\n    const note = this.getNote();\n\n    if (!(note && (this.index !== null))) {\n      throw new Vex.RuntimeError('NoAttachedNote',\n        \"Can't draw notes without a parent note and parent note index.\");\n    }\n\n    this.setRendered();\n    this.alignSubNotesWithNote(this.subNotes, note); // Modifier function\n\n    // Draw notes\n    this.subNotes.forEach(subNote => subNote.setContext(this.context).drawWithStyle());\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n// This class implements varies types of ties between contiguous notes. The\n// ties include: regular ties, hammer ons, pull offs, and slides.\n\nimport { Vex } from './vex';\nimport { Element } from './element';\n\nexport class StaveTie extends Element {\n  constructor(notes, text) {\n    /**\n     * Notes is a struct that has:\n     *\n     *  {\n     *    first_note: Note,\n     *    last_note: Note,\n     *    first_indices: [n1, n2, n3],\n     *    last_indices: [n1, n2, n3]\n     *  }\n     *\n     **/\n    super();\n    this.setAttribute('type', 'StaveTie');\n    this.notes = notes;\n    this.context = null;\n    this.text = text;\n    this.direction = null;\n\n    this.render_options = {\n      cp1: 8,      // Curve control point 1\n      cp2: 12,      // Curve control point 2\n      text_shift_x: 0,\n      first_x_shift: 0,\n      last_x_shift: 0,\n      y_shift: 7,\n      tie_spacing: 0,\n      font: { family: 'Arial', size: 10, style: '' },\n    };\n\n    this.font = this.render_options.font;\n    this.setNotes(notes);\n  }\n\n  setFont(font) { this.font = font; return this; }\n  setDirection(direction) { this.direction = direction; return this; }\n\n  /**\n   * Set the notes to attach this tie to.\n   *\n   * @param {!Object} notes The notes to tie up.\n   */\n  setNotes(notes) {\n    if (!notes.first_note && !notes.last_note) {\n      throw new Vex.RuntimeError(\n        'BadArguments', 'Tie needs to have either first_note or last_note set.'\n      );\n    }\n\n    if (!notes.first_indices) notes.first_indices = [0];\n    if (!notes.last_indices) notes.last_indices = [0];\n\n    if (notes.first_indices.length !== notes.last_indices.length) {\n      throw new Vex.RuntimeError('BadArguments', 'Tied notes must have similar index sizes');\n    }\n\n    // Success. Lets grab 'em notes.\n    this.first_note = notes.first_note;\n    this.first_indices = notes.first_indices;\n    this.last_note = notes.last_note;\n    this.last_indices = notes.last_indices;\n    return this;\n  }\n\n  /**\n   * @return {boolean} Returns true if this is a partial bar.\n   */\n  isPartial() {\n    return (!this.first_note || !this.last_note);\n  }\n\n  renderTie(params) {\n    if (params.first_ys.length === 0 || params.last_ys.length === 0) {\n      throw new Vex.RERR('BadArguments', 'No Y-values to render');\n    }\n\n    const ctx = this.context;\n    let cp1 = this.render_options.cp1;\n    let cp2 = this.render_options.cp2;\n\n    if (Math.abs(params.last_x_px - params.first_x_px) < 10) {\n      cp1 = 2; cp2 = 8;\n    }\n\n    const first_x_shift = this.render_options.first_x_shift;\n    const last_x_shift = this.render_options.last_x_shift;\n    const y_shift = this.render_options.y_shift * params.direction;\n\n    for (let i = 0; i < this.first_indices.length; ++i) {\n      const cp_x = ((params.last_x_px + last_x_shift) +\n          (params.first_x_px + first_x_shift)) / 2;\n      const first_y_px = params.first_ys[this.first_indices[i]] + y_shift;\n      const last_y_px = params.last_ys[this.last_indices[i]] + y_shift;\n\n      if (isNaN(first_y_px) || isNaN(last_y_px)) {\n        throw new Vex.RERR('BadArguments', 'Bad indices for tie rendering.');\n      }\n\n      const top_cp_y = ((first_y_px + last_y_px) / 2) + (cp1 * params.direction);\n      const bottom_cp_y = ((first_y_px + last_y_px) / 2) + (cp2 * params.direction);\n\n      let id;\n      if (this.first_note) { // ?. would be shorter, but fails appveyor build\n        id = this.first_note.getAttribute('id') + \"-tie\";\n      }\n      this.setAttribute('el', ctx.openGroup('stavetie', id));\n      ctx.beginPath();\n      ctx.moveTo(params.first_x_px + first_x_shift, first_y_px);\n      ctx.quadraticCurveTo(cp_x, top_cp_y, params.last_x_px + last_x_shift, last_y_px);\n      ctx.quadraticCurveTo(cp_x, bottom_cp_y, params.first_x_px + first_x_shift, first_y_px);\n      ctx.closePath();\n      ctx.fill();\n      ctx.closeGroup();\n    }\n  }\n\n  renderText(first_x_px, last_x_px) {\n    if (!this.text) return;\n    let center_x = (first_x_px + last_x_px) / 2;\n    center_x -= this.context.measureText(this.text).width / 2;\n\n    this.context.save();\n    this.context.setFont(this.font.family, this.font.size, this.font.style);\n    this.context.fillText(\n      this.text,\n      center_x + this.render_options.text_shift_x,\n      (this.first_note || this.last_note).getStave().getYForTopText() - 1\n    );\n    this.context.restore();\n  }\n\n  draw() {\n    this.checkContext();\n    this.setRendered();\n\n    const first_note = this.first_note;\n    const last_note = this.last_note;\n\n    let first_x_px;\n    let last_x_px;\n    let first_ys;\n    let last_ys;\n    let stem_direction;\n    if (first_note) {\n      first_x_px = first_note.getTieRightX() + this.render_options.tie_spacing;\n      stem_direction = first_note.getStemDirection();\n      first_ys = first_note.getYs();\n    } else {\n      first_x_px = last_note.getStave().getTieStartX();\n      first_ys = last_note.getYs();\n      this.first_indices = this.last_indices;\n    }\n\n    if (last_note) {\n      last_x_px = last_note.getTieLeftX() + this.render_options.tie_spacing;\n      stem_direction = last_note.getStemDirection();\n      last_ys = last_note.getYs();\n    } else {\n      last_x_px = first_note.getStave().getTieEndX();\n      last_ys = first_note.getYs();\n      this.last_indices = this.first_indices;\n    }\n\n    if (this.direction) {\n      stem_direction = this.direction;\n    }\n\n    this.renderTie({\n      first_x_px,\n      last_x_px,\n      first_ys,\n      last_ys,\n      direction: stem_direction,\n    });\n\n    this.renderText(first_x_px, last_x_px);\n    return true;\n  }\n}\n","// / [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n// This class implements varies types of ties between contiguous notes. The\n// ties include: regular ties, hammer ons, pull offs, and slides.\n\nimport { StaveTie } from './stavetie';\n\nexport class TabTie extends StaveTie {\n  static createHammeron(notes) {\n    return new TabTie(notes, 'H');\n  }\n\n  static createPulloff(notes) {\n    return new TabTie(notes, 'P');\n  }\n\n  constructor(notes, text) {\n    /**\n     * Notes is a struct that has:\n     *\n     *  {\n     *    first_note: Note,\n     *    last_note: Note,\n     *    first_indices: [n1, n2, n3],\n     *    last_indices: [n1, n2, n3]\n     *  }\n     *\n     **/\n    super(notes, text);\n    this.setAttribute('type', 'TabTie');\n\n    this.render_options.cp1 = 9;\n    this.render_options.cp2 = 11;\n    this.render_options.y_shift = 3;\n\n    this.setNotes(notes);\n  }\n\n  draw() {\n    this.checkContext();\n    this.setRendered();\n\n    const first_note = this.first_note;\n    const last_note = this.last_note;\n    let first_x_px;\n    let last_x_px;\n    let first_ys;\n    let last_ys;\n\n    if (first_note) {\n      first_x_px = first_note.getTieRightX() + this.render_options.tie_spacing;\n      first_ys = first_note.getYs();\n    } else {\n      first_x_px = last_note.getStave().getTieStartX();\n      first_ys = last_note.getYs();\n      this.first_indices = this.last_indices;\n    }\n\n    if (last_note) {\n      last_x_px = last_note.getTieLeftX() + this.render_options.tie_spacing;\n      last_ys = last_note.getYs();\n    } else {\n      last_x_px = first_note.getStave().getTieEndX();\n      last_ys = first_note.getYs();\n      this.last_indices = this.first_indices;\n    }\n\n    this.renderTie({\n      first_x_px,\n      last_x_px,\n      first_ys,\n      last_ys,\n      direction: -1, // Tab tie's are always face up.\n    });\n\n    this.renderText(first_x_px, last_x_px);\n    return true;\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n//\n// This file implements `GraceNoteGroup` which is used to format and\n// render grace notes.\n\nimport { Vex } from './vex';\nimport { Flow } from './tables';\nimport { Modifier } from './modifier';\nimport { Formatter } from './formatter';\nimport { Voice } from './voice';\nimport { Beam } from './beam';\nimport { StaveTie } from './stavetie';\nimport { TabTie } from './tabtie';\nimport { StaveNote } from './stavenote';\n\n// To enable logging for this class. Set `Vex.Flow.GraceNoteGroup.DEBUG` to `true`.\nfunction L(...args) { if (GraceNoteGroup.DEBUG) Vex.L('Vex.Flow.GraceNoteGroup', args); }\n\nexport class GraceNoteGroup extends Modifier {\n  static get CATEGORY() { return 'gracenotegroups'; }\n\n  // Arrange groups inside a `ModifierContext`\n  static format(gracenote_groups, state) {\n    const group_spacing_stave = 4;\n    const group_spacing_tab = 0;\n\n    if (!gracenote_groups || gracenote_groups.length === 0) return false;\n\n    const group_list = [];\n    let prev_note = null;\n    let shiftL = 0;\n\n    for (let i = 0; i < gracenote_groups.length; ++i) {\n      const gracenote_group = gracenote_groups[i];\n      const note = gracenote_group.getNote();\n      const is_stavenote = (note.getCategory() === StaveNote.CATEGORY);\n      const spacing = (is_stavenote ? group_spacing_stave : group_spacing_tab);\n\n      if (is_stavenote && note !== prev_note) {\n        // Iterate through all notes to get the displaced pixels\n        for (let n = 0; n < note.keys.length; ++n) {\n          const props_tmp = note.getKeyProps()[n];\n          shiftL = (props_tmp.displaced ? note.getExtraLeftPx() : shiftL);\n        }\n        prev_note = note;\n      }\n\n      group_list.push({ shift: shiftL, gracenote_group, spacing });\n    }\n\n    // If first note left shift in case it is displaced\n    let group_shift = group_list[0].shift;\n    let formatWidth;\n    for (let i = 0; i < group_list.length; ++i) {\n      const gracenote_group = group_list[i].gracenote_group;\n      gracenote_group.preFormat();\n      formatWidth = gracenote_group.getWidth() + group_list[i].spacing;\n      group_shift = Math.max(formatWidth, group_shift);\n    }\n\n    for (let i = 0; i < group_list.length; ++i) {\n      const gracenote_group = group_list[i].gracenote_group;\n      formatWidth = gracenote_group.getWidth() + group_list[i].spacing;\n      gracenote_group.setSpacingFromNextModifier(group_shift - Math.min(formatWidth, group_shift));\n    }\n\n    state.left_shift += group_shift;\n    return true;\n  }\n\n  // ## Prototype Methods\n  //\n  // `GraceNoteGroup` inherits from `Modifier` and is placed inside a\n  // `ModifierContext`.\n  constructor(grace_notes, show_slur) {\n    super();\n    this.setAttribute('type', 'GraceNoteGroup');\n\n    this.note = null;\n    this.index = null;\n    this.position = Modifier.Position.LEFT;\n    this.grace_notes = grace_notes;\n    this.width = 0;\n\n    this.preFormatted = false;\n\n    this.show_slur = show_slur;\n    this.slur = null;\n\n    this.formatter = new Formatter();\n    this.voice = new Voice({\n      num_beats: 4,\n      beat_value: 4,\n      resolution: Flow.RESOLUTION,\n    }).setStrict(false);\n\n    this.render_options = {\n      slur_y_shift: 0,\n    };\n\n    this.beams = [];\n\n    this.voice.addTickables(this.grace_notes);\n\n    return this;\n  }\n\n  getCategory() { return GraceNoteGroup.CATEGORY; }\n\n  preFormat() {\n    if (this.preFormatted) return;\n\n    this.formatter.joinVoices([this.voice]).format([this.voice], 0);\n    this.setWidth(this.formatter.getMinTotalWidth());\n    this.preFormatted = true;\n  }\n\n  beamNotes(grace_notes) {\n    grace_notes = grace_notes || this.grace_notes;\n    if (grace_notes.length > 1) {\n      const beam = new Beam(grace_notes);\n\n      beam.render_options.beam_width = 3;\n      beam.render_options.partial_beam_length = 4;\n\n      this.beams.push(beam);\n    }\n\n    return this;\n  }\n\n  setNote(note) {\n    this.note = note;\n  }\n  setWidth(width) {\n    this.width = width;\n  }\n  getWidth() {\n    return this.width;\n  }\n  getGraceNotes() {\n    return this.grace_notes;\n  }\n  draw() {\n    this.checkContext();\n\n    const note = this.getNote();\n\n    L('Drawing grace note group for:', note);\n\n    if (!(note && (this.index !== null))) {\n      throw new Vex.RuntimeError('NoAttachedNote',\n        \"Can't draw grace note without a parent note and parent note index.\");\n    }\n\n    this.setRendered();\n    this.alignSubNotesWithNote(this.getGraceNotes(), note); // Modifier function\n\n    // Draw notes\n    this.grace_notes.forEach(graceNote => {\n      graceNote.setContext(this.context).draw();\n    });\n\n    // Draw beam\n    this.beams.forEach(beam => {\n      beam.setContext(this.context).draw();\n    });\n\n    if (this.show_slur) {\n      // Create and draw slur\n      const is_stavenote = (this.getNote().getCategory() === StaveNote.CATEGORY);\n      const TieClass = (is_stavenote ? StaveTie : TabTie);\n\n      this.slur = new TieClass({\n        last_note: this.grace_notes[0],\n        first_note: note,\n        first_indices: [0],\n        last_indices: [0],\n      });\n\n      this.slur.render_options.cp2 = 12;\n      this.slur.render_options.y_shift = (is_stavenote ? 7 : 5) + this.render_options.slur_y_shift;\n      this.slur.setContext(this.context).draw();\n    }\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// Author: Larry Kuhns\n//\n// ## Description\n// This file implements the `Stroke` class which renders chord strokes\n// that can be arpeggiated, brushed, rasquedo, etc.\n\nimport { Vex } from './vex';\nimport { Modifier } from './modifier';\nimport { StaveNote } from './stavenote';\nimport { Glyph } from './glyph';\n\nexport class Stroke extends Modifier {\n  static get CATEGORY() { return 'strokes'; }\n  static get Type() {\n    return {\n      BRUSH_DOWN: 1,\n      BRUSH_UP: 2,\n      ROLL_DOWN: 3, // Arpeggiated chord\n      ROLL_UP: 4,   // Arpeggiated chord\n      RASQUEDO_DOWN: 5,\n      RASQUEDO_UP: 6,\n      ARPEGGIO_DIRECTIONLESS: 7, // Arpeggiated chord without upwards or downwards arrow\n    };\n  }\n\n  // Arrange strokes inside `ModifierContext`\n  static format(strokes, state) {\n    const left_shift = state.left_shift;\n    const stroke_spacing = 0;\n\n    if (!strokes || strokes.length === 0) return this;\n\n    const strokeList = strokes.map((stroke) => {\n      const note = stroke.getNote();\n      if (note instanceof StaveNote) {\n        const { line, displaced } = note.getKeyProps()[stroke.getIndex()];\n        const shift = displaced ? note.getExtraLeftPx() : 0;\n        return { line, shift, stroke };\n      } else {\n        const { str: string } = note.getPositions()[stroke.getIndex()];\n        return { line: string, shift: 0, stroke };\n      }\n    });\n\n    const strokeShift = left_shift;\n\n    // There can only be one stroke .. if more than one, they overlay each other\n    const xShift = strokeList.reduce((xShift, { stroke, shift }) => {\n      stroke.setXShift(strokeShift + shift);\n      return Math.max(stroke.getWidth() + stroke_spacing, xShift);\n    }, 0);\n\n    state.left_shift += xShift;\n    return true;\n  }\n\n  constructor(type, options) {\n    super();\n    this.setAttribute('type', 'Stroke');\n\n    this.note = null;\n    this.options = Vex.Merge({}, options);\n\n    // multi voice - span stroke across all voices if true\n    this.all_voices = 'all_voices' in this.options ? this.options.all_voices : true;\n\n    // multi voice - end note of stroke, set in draw()\n    this.note_end = null;\n    this.index = null;\n    this.type = type;\n    this.position = Modifier.Position.LEFT;\n\n    this.render_options = {\n      font_scale: 38,\n      stroke_px: 3,\n      stroke_spacing: 10,\n    };\n\n    this.font = {\n      family: 'serif',\n      size: 10,\n      weight: 'bold italic',\n    };\n\n    this.setXShift(0);\n    this.setWidth(10);\n  }\n\n  getCategory() { return Stroke.CATEGORY; }\n  getPosition() { return this.position; }\n  addEndNote(note) { this.note_end = note; return this; }\n\n  draw() {\n    this.checkContext();\n    this.setRendered();\n\n    if (!(this.note && (this.index != null))) {\n      throw new Vex.RERR('NoAttachedNote', \"Can't draw stroke without a note and index.\");\n    }\n\n    const start = this.note.getModifierStartXY(this.position, this.index);\n    let ys = this.note.getYs();\n    let topY = start.y;\n    let botY = start.y;\n    const x = start.x - 5;\n    const line_space = this.note.stave.options.spacing_between_lines_px;\n\n    const notes = this.getModifierContext().getModifiers(this.note.getCategory());\n    for (let i = 0; i < notes.length; i++) {\n      ys = notes[i].getYs();\n      for (let n = 0; n < ys.length; n++) {\n        if (this.note === notes[i] || this.all_voices) {\n          topY = Vex.Min(topY, ys[n]);\n          botY = Vex.Max(botY, ys[n]);\n        }\n      }\n    }\n\n    let arrow;\n    let arrow_shift_x;\n    let arrow_y;\n    let text_shift_x;\n    let text_y;\n    switch (this.type) {\n      case Stroke.Type.BRUSH_DOWN:\n        arrow = 'vc3';\n        arrow_shift_x = -3;\n        arrow_y = topY - (line_space / 2) + 10;\n        botY += (line_space / 2);\n        break;\n      case Stroke.Type.BRUSH_UP:\n        arrow = 'v11';\n        arrow_shift_x = 0.5;\n        arrow_y = botY + (line_space / 2);\n        topY -= (line_space / 2);\n        break;\n      case Stroke.Type.ROLL_DOWN:\n      case Stroke.Type.RASQUEDO_DOWN:\n        arrow = 'vc3';\n        arrow_shift_x = -3;\n        text_shift_x = this.x_shift + arrow_shift_x - 2;\n        if (this.note instanceof StaveNote) {\n          topY += 1.5 * line_space;\n          if ((botY - topY) % 2 !== 0) {\n            botY += 0.5 * line_space;\n          } else {\n            botY += line_space;\n          }\n          arrow_y = topY - line_space;\n          text_y = botY + line_space + 2;\n        } else {\n          topY += 1.5 * line_space;\n          botY += line_space;\n          arrow_y = topY - 0.75 * line_space;\n          text_y = botY + 0.25 * line_space;\n        }\n        break;\n      case Stroke.Type.ROLL_UP:\n      case Stroke.Type.RASQUEDO_UP:\n        arrow = 'v52';\n        arrow_shift_x = -4;\n        text_shift_x = this.x_shift + arrow_shift_x - 1;\n        if (this.note instanceof StaveNote) {\n          arrow_y = line_space / 2;\n          topY += 0.5 * line_space;\n          if ((botY - topY) % 2 === 0) {\n            botY += line_space / 2;\n          }\n          arrow_y = botY + 0.5 * line_space;\n          text_y = topY - 1.25 * line_space;\n        } else {\n          topY += 0.25 * line_space;\n          botY += 0.5 * line_space;\n          arrow_y = botY + 0.25 * line_space;\n          text_y = topY - line_space;\n        }\n        break;\n      case Stroke.Type.ARPEGGIO_DIRECTIONLESS:\n        topY += 0.5 * line_space;\n        botY += line_space; // * 0.5 can lead to slight underlap instead of overlap sometimes\n        break;\n      default:\n        throw new Vex.RERR('InvalidType', `The stroke type ${this.type} does not exist`);\n    }\n\n    // Draw the stroke\n    if (this.type === Stroke.Type.BRUSH_DOWN || this.type === Stroke.Type.BRUSH_UP) {\n      this.context.fillRect(x + this.x_shift, topY, 1, botY - topY);\n    } else {\n      if (this.note instanceof StaveNote) {\n        for (let i = topY; i <= botY; i += line_space) {\n          Glyph.renderGlyph(\n            this.context,\n            x + this.x_shift - 4,\n            i,\n            this.render_options.font_scale,\n            'va3'\n          );\n        }\n      } else {\n        let i;\n        for (i = topY; i <= botY; i += 10) {\n          Glyph.renderGlyph(\n            this.context,\n            x + this.x_shift - 4,\n            i,\n            this.render_options.font_scale,\n            'va3'\n          );\n        }\n        if (this.type === Stroke.Type.RASQUEDO_DOWN) {\n          text_y = i + 0.25 * line_space;\n        }\n      }\n    }\n\n    if (this.type === Stroke.Type.ARPEGGIO_DIRECTIONLESS) {\n      return; // skip drawing arrow heads or text\n    }\n\n    // Draw the arrow head\n    Glyph.renderGlyph(\n      this.context,\n      x + this.x_shift + arrow_shift_x,\n      arrow_y,\n      this.render_options.font_scale,\n      arrow\n    );\n\n    // Draw the rasquedo \"R\"\n    if (this.type === Stroke.Type.RASQUEDO_DOWN || this.type === Stroke.Type.RASQUEDO_UP) {\n      this.context.save();\n      this.context.setFont(this.font.family, this.font.size, this.font.weight);\n      this.context.fillText('R', x + text_shift_x, text_y);\n      this.context.restore();\n    }\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// Author: Larry Kuhns\n//\n// ## Description\n// This file implements the `StringNumber` class which renders string\n// number annotations beside notes.\n\nimport { Vex } from './vex';\nimport { Modifier } from './modifier';\nimport { Renderer } from './renderer';\nimport { StaveNote } from './stavenote';\n\nexport class StringNumber extends Modifier {\n  static get CATEGORY() { return 'stringnumber'; }\n\n  // ## Static Methods\n  // Arrange string numbers inside a `ModifierContext`\n  static format(nums, state) {\n    const left_shift = state.left_shift;\n    const right_shift = state.right_shift;\n    const num_spacing = 1;\n\n    if (!nums || nums.length === 0) return this;\n\n    const nums_list = [];\n    let prev_note = null;\n    let shift_left = 0;\n    let shift_right = 0;\n\n    let i;\n    let num;\n    let note;\n    let pos;\n    let props_tmp;\n    for (i = 0; i < nums.length; ++i) {\n      num = nums[i];\n      note = num.getNote();\n\n      for (i = 0; i < nums.length; ++i) {\n        num = nums[i];\n        note = num.getNote();\n        pos = num.getPosition();\n        const props = note.getKeyProps()[num.getIndex()];\n\n        if (note !== prev_note) {\n          for (let n = 0; n < note.keys.length; ++n) {\n            props_tmp = note.getKeyProps()[n];\n            if (left_shift === 0) {\n              shift_left = props_tmp.displaced ? note.getExtraLeftPx() : shift_left;\n            }\n            if (right_shift === 0) {\n              shift_right = props_tmp.displaced ? note.getExtraRightPx() : shift_right;\n            }\n          }\n          prev_note = note;\n        }\n\n        nums_list.push({\n          pos,\n          note,\n          num,\n          line: props.line,\n          shiftL: shift_left,\n          shiftR: shift_right,\n        });\n      }\n    }\n\n    // Sort string numbers by line number.\n    nums_list.sort((a, b) => b.line - a.line);\n\n    // TODO: This variable never gets assigned to anything. Is that a bug or can this be removed?\n    let num_shiftL = 0; // eslint-disable-line\n    let num_shiftR = 0;\n    let x_widthL = 0;\n    let x_widthR = 0;\n    let last_line = null;\n    let last_note = null;\n    for (i = 0; i < nums_list.length; ++i) {\n      let num_shift = 0;\n      note = nums_list[i].note;\n      pos = nums_list[i].pos;\n      num = nums_list[i].num;\n      const line = nums_list[i].line;\n      const shiftL = nums_list[i].shiftL;\n      const shiftR = nums_list[i].shiftR;\n\n      // Reset the position of the string number every line.\n      if (line !== last_line || note !== last_note) {\n        num_shiftL = left_shift + shiftL;\n        num_shiftR = right_shift + shiftR;\n      }\n\n      const num_width = num.getWidth() + num_spacing;\n      if (pos === Modifier.Position.LEFT) {\n        num.setXShift(left_shift);\n        num_shift = shift_left + num_width; // spacing\n        x_widthL = (num_shift > x_widthL) ? num_shift : x_widthL;\n      } else if (pos === Modifier.Position.RIGHT) {\n        num.setXShift(num_shiftR);\n        num_shift += num_width; // spacing\n        x_widthR = (num_shift > x_widthR) ? num_shift : x_widthR;\n      }\n      last_line = line;\n      last_note = note;\n    }\n\n    state.left_shift += x_widthL;\n    state.right_shift += x_widthR;\n    return true;\n  }\n\n  constructor(number) {\n    super();\n    this.setAttribute('type', 'StringNumber');\n\n    this.note = null;\n    this.last_note = null;\n    this.index = null;\n    this.string_number = number;\n    this.setWidth(20); // ???\n    this.position = Modifier.Position.ABOVE; // Default position above stem or note head\n    this.x_shift = 0;\n    this.y_shift = 0;\n    this.x_offset = 0; // Horizontal offset from default\n    this.y_offset = 0; // Vertical offset from default\n    this.dashed = true; // true - draw dashed extension  false - no extension\n    this.leg = Renderer.LineEndType.NONE;   // draw upward/downward leg at the of extension line\n    this.radius = 8;\n    this.font = {\n      family: 'sans-serif',\n      size: 10,\n      weight: 'bold',\n    };\n  }\n  getCategory() { return StringNumber.CATEGORY; }\n  getNote() { return this.note; }\n  setNote(note) { this.note = note; return this; }\n  getIndex() { return this.index; }\n  setIndex(index) { this.index = index; return this; }\n\n  setLineEndType(leg) {\n    if (leg >= Renderer.LineEndType.NONE && leg <= Renderer.LineEndType.DOWN) {\n      this.leg = leg;\n    }\n    return this;\n  }\n\n  setStringNumber(number) { this.string_number = number; return this; }\n  setOffsetX(x) { this.x_offset = x; return this; }\n  setOffsetY(y) { this.y_offset = y; return this; }\n  setLastNote(note) { this.last_note = note; return this; }\n  setDashed(dashed) { this.dashed = dashed; return this; }\n\n  draw() {\n    const ctx = this.checkContext();\n    if (!(this.note && (this.index != null))) {\n      throw new Vex.RERR('NoAttachedNote', \"Can't draw string number without a note and index.\");\n    }\n    this.setRendered();\n\n    const line_space = this.note.stave.options.spacing_between_lines_px;\n\n    const start = this.note.getModifierStartXY(this.position, this.index);\n    let dot_x = (start.x + this.x_shift + this.x_offset);\n    let dot_y = start.y + this.y_shift + this.y_offset;\n\n    switch (this.position) {\n      case Modifier.Position.ABOVE:\n      case Modifier.Position.BELOW: {\n        const stem_ext = this.note.getStemExtents();\n        let top = stem_ext.topY;\n        let bottom = stem_ext.baseY + 2;\n\n        if (this.note.stem_direction === StaveNote.STEM_DOWN) {\n          top = stem_ext.baseY;\n          bottom = stem_ext.topY - 2;\n        }\n\n        if (this.position === Modifier.Position.ABOVE) {\n          dot_y = this.note.hasStem()\n            ? top - (line_space * 1.75)\n            : start.y - (line_space * 1.75);\n        } else {\n          dot_y = this.note.hasStem()\n            ? bottom + (line_space * 1.5)\n            : start.y + (line_space * 1.75);\n        }\n\n        dot_y += this.y_shift + this.y_offset;\n\n        break;\n      } case Modifier.Position.LEFT:\n        dot_x -= (this.radius / 2) + 5;\n        break;\n      case Modifier.Position.RIGHT:\n        dot_x += (this.radius / 2) + 6;\n        break;\n      default:\n        throw new Vex.RERR(\n          'InvalidPosition', `The position ${this.position} is invalid`\n        );\n    }\n\n    ctx.save();\n    ctx.beginPath();\n    ctx.arc(dot_x, dot_y, this.radius, 0, Math.PI * 2, false);\n    ctx.lineWidth = 1.5;\n    ctx.stroke();\n    ctx.setFont(this.font.family, this.font.size, this.font.weight);\n    const x = dot_x - ctx.measureText(this.string_number).width / 2;\n    ctx.fillText('' + this.string_number, x, dot_y + 4.5);\n\n    if (this.last_note != null) {\n      const end = this.last_note.getStemX() - this.note.getX() + 5;\n      ctx.strokeStyle = '#000000';\n      ctx.lineCap = 'round';\n      ctx.lineWidth = 0.6;\n      if (this.dashed) {\n        Renderer.drawDashedLine(ctx, dot_x + 10, dot_y, dot_x + end, dot_y, [3, 3]);\n      } else {\n        Renderer.drawDashedLine(ctx, dot_x + 10, dot_y, dot_x + end, dot_y, [3, 0]);\n      }\n\n      let len;\n      let pattern;\n      switch (this.leg) {\n        case Renderer.LineEndType.UP:\n          len = -10;\n          pattern = this.dashed ? [3, 3] : [3, 0];\n          Renderer.drawDashedLine(ctx, dot_x + end, dot_y, dot_x + end, dot_y + len, pattern);\n          break;\n        case Renderer.LineEndType.DOWN:\n          len = 10;\n          pattern = this.dashed ? [3, 3] : [3, 0];\n          Renderer.drawDashedLine(ctx, dot_x + end, dot_y, dot_x + end, dot_y + len, pattern);\n          break;\n        default:\n          break;\n      }\n    }\n\n    ctx.restore();\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// Author: Larry Kuhns.\n//\n// ## Description\n//\n// This file implements articulations and accents as modifiers that can be\n// attached to notes. The complete list of articulations is available in\n// `tables.js` under `Vex.Flow.articulationCodes`.\n//\n// See `tests/articulation_tests.js` for usage examples.\n\nimport { Vex } from './vex';\nimport { Flow } from './tables';\nimport { Modifier } from './modifier';\nimport { Glyph } from './glyph';\nimport { Stem } from './stem';\n\n// To enable logging for this class. Set `Vex.Flow.Articulation.DEBUG` to `true`.\nfunction L(...args) { if (Articulation.DEBUG) Vex.L('Vex.Flow.Articulation', args); }\n\nconst { ABOVE, BELOW } = Modifier.Position;\n\nconst roundToNearestHalf = (mathFn, value) => mathFn(value / 0.5) * 0.5;\n\n// This includes both staff and ledger lines\nconst isWithinLines = (line, position) => position === ABOVE ? line <= 5 : line >= 1;\n\nconst getRoundingFunction = (line, position) => {\n  if (isWithinLines(line, position)) {\n    if (position === ABOVE) {\n      return Math.ceil;\n    } else {\n      return Math.floor;\n    }\n  } else {\n    return Math.round;\n  }\n};\n\nconst snapLineToStaff = (canSitBetweenLines, line, position, offsetDirection) => {\n  // Initially, snap to nearest staff line or space\n  const snappedLine = roundToNearestHalf(getRoundingFunction(line, position), line);\n  const canSnapToStaffSpace = canSitBetweenLines && isWithinLines(snappedLine, position);\n  const onStaffLine = snappedLine % 1 === 0;\n\n  if (canSnapToStaffSpace && onStaffLine) {\n    const HALF_STAFF_SPACE = 0.5;\n    return snappedLine + (HALF_STAFF_SPACE * -offsetDirection);\n  } else {\n    return snappedLine;\n  }\n};\n\nconst isStaveNote = (note) => {\n  const noteCategory = note.getCategory();\n  return noteCategory === 'stavenotes' || noteCategory === 'gracenotes';\n};\n\nconst getTopY = (note, textLine) => {\n  const stave = note.getStave();\n  const stemDirection = note.getStemDirection();\n  const { topY: stemTipY, baseY: stemBaseY } = note.getStemExtents();\n\n  if (isStaveNote(note)) {\n    if (note.hasStem()) {\n      if (stemDirection === Stem.UP) {\n        return stemTipY;\n      } else {\n        return stemBaseY;\n      }\n    } else {\n      return Math.min(...note.getYs());\n    }\n  } else if (note.getCategory() === 'tabnotes') {\n    if (note.hasStem()) {\n      if (stemDirection === Stem.UP) {\n        return stemTipY;\n      } else {\n        return stave.getYForTopText(textLine);\n      }\n    } else {\n      return stave.getYForTopText(textLine);\n    }\n  } else {\n    throw new Vex.RERR(\n      'UnknownCategory', 'Only can get the top and bottom ys of stavenotes and tabnotes'\n    );\n  }\n};\n\nconst getBottomY = (note, textLine) => {\n  const stave = note.getStave();\n  const stemDirection = note.getStemDirection();\n  const { topY: stemTipY, baseY: stemBaseY } = note.getStemExtents();\n\n  if (isStaveNote(note)) {\n    if (note.hasStem()) {\n      if (stemDirection === Stem.UP) {\n        return stemBaseY;\n      } else {\n        return stemTipY;\n      }\n    } else {\n      return Math.max(...note.getYs());\n    }\n  } else if (note.getCategory() === 'tabnotes') {\n    if (note.hasStem()) {\n      if (stemDirection === Stem.UP) {\n        return stave.getYForBottomText(textLine);\n      } else {\n        return stemTipY;\n      }\n    } else {\n      return stave.getYForBottomText(textLine);\n    }\n  } else {\n    throw new Vex.RERR(\n      'UnknownCategory', 'Only can get the top and bottom ys of stavenotes and tabnotes'\n    );\n  }\n};\n\n// Gets the initial offset of the articulation from the y value of the starting position.\n// This is required because the top/bottom text positions already have spacing applied to\n// provide a \"visually pleasent\" default position. However the y values provided from\n// the stavenote's top/bottom do *not* have any pre-applied spacing. This function\n// normalizes this asymmetry.\nconst getInitialOffset = (note, position) => {\n  const isOnStemTip = (\n    (position === ABOVE && note.getStemDirection() === Stem.UP) ||\n    (position === BELOW && note.getStemDirection() === Stem.DOWN)\n  );\n\n  if (isStaveNote(note)) {\n    if (note.hasStem() && isOnStemTip) {\n      return 0.5;\n    } else {\n      // this amount is larger than the stem-tip offset because we start from\n      // the center of the notehead\n      return 1;\n    }\n  } else {\n    if (note.hasStem() && isOnStemTip) {\n      return 1;\n    } else {\n      return 0;\n    }\n  }\n};\n\nexport class Articulation extends Modifier {\n  static get CATEGORY() { return 'articulations'; }\n  static get INITIAL_OFFSET() { return -0.5; }\n\n  // FIXME:\n  // Most of the complex formatting logic (ie: snapping to space) is\n  // actually done in .render(). But that logic belongs in this method.\n  //\n  // Unfortunately, this isn't possible because, by this point, stem lengths\n  // have not yet been finalized. Finalized stem lengths are required to determine the\n  // initial position of any stem-side articulation.\n  //\n  // This indicates that all objects should have their stave set before being\n  // formatted. It can't be an optional if you want accurate vertical positioning.\n  // Consistently positioned articulations that play nice with other modifiers\n  // won't be possible until we stop relying on render-time formatting.\n  //\n  // Ideally, when this function has completed, the vertical articulation positions\n  // should be ready to render without further adjustment. But the current state\n  // is far from this ideal.\n  static format(articulations, state) {\n    if (!articulations || articulations.length === 0) return false;\n\n    const isAbove = artic => artic.getPosition() === ABOVE;\n    const isBelow = artic => artic.getPosition() === BELOW;\n    const margin = 0.5;\n    const getIncrement = (articulation, line, position) =>\n      roundToNearestHalf(\n        getRoundingFunction(line, position),\n        (articulation.glyph.getMetrics().height / 10) + margin\n      );\n\n    articulations\n      .filter(isAbove)\n      .forEach(articulation => {\n        articulation.setTextLine(state.top_text_line);\n        state.top_text_line += getIncrement(articulation, state.top_text_line, ABOVE);\n      });\n\n    articulations\n      .filter(isBelow)\n      .forEach(articulation => {\n        articulation.setTextLine(state.text_line);\n        state.text_line += getIncrement(articulation, state.text_line, BELOW);\n      });\n\n    const width = articulations\n      .map(articulation => articulation.getWidth())\n      .reduce((maxWidth, articWidth) => Math.max(articWidth, maxWidth));\n\n    state.left_shift += width / 2;\n    state.right_shift += width / 2;\n    return true;\n  }\n\n  static easyScoreHook({ articulations }, note, builder) {\n    if (!articulations) return;\n\n    const articNameToCode = {\n      staccato: 'a.',\n      tenuto: 'a-',\n    };\n\n    articulations\n      .split(',')\n      .map(articString => articString.trim().split('.'))\n      .map(([name, position]) => {\n        const artic = { type: articNameToCode[name] };\n        if (position) artic.position = Modifier.PositionString[position];\n        return builder.getFactory().Articulation(artic);\n      })\n      .map(artic => note.addModifier(0, artic));\n  }\n\n  // Create a new articulation of type `type`, which is an entry in\n  // `Vex.Flow.articulationCodes` in `tables.js`.\n  constructor(type) {\n    super();\n    this.setAttribute('type', 'Articulation');\n\n    this.note = null;\n    this.index = null;\n    this.type = type;\n    this.position = BELOW;\n    this.render_options = {\n      font_scale: 38,\n    };\n\n    this.articulation = Flow.articulationCodes(this.type);\n    if (!this.articulation) {\n      throw new Vex.RERR('ArgumentError', `Articulation not found: ${this.type}`);\n    }\n\n    this.glyph = new Glyph(this.articulation.code, this.render_options.font_scale);\n\n    this.setWidth(this.glyph.getMetrics().width);\n  }\n\n  getCategory() { return Articulation.CATEGORY; }\n\n  // Render articulation in position next to note.\n  draw() {\n    const {\n      note, index, position, glyph,\n      articulation: { between_lines: canSitBetweenLines },\n      text_line: textLine,\n      context: ctx,\n    } = this;\n\n    this.checkContext();\n\n    if (!note || index == null) {\n      throw new Vex.RERR('NoAttachedNote', \"Can't draw Articulation without a note and index.\");\n    }\n\n    this.setRendered();\n\n    const stave = note.getStave();\n    const staffSpace = stave.getSpacingBetweenLines();\n    const isTab = note.getCategory() === 'tabnotes';\n\n    // Articulations are centered over/under the note head.\n    const { x } = note.getModifierStartXY(position, index);\n    const shouldSitOutsideStaff = !canSitBetweenLines || isTab;\n\n    const initialOffset = getInitialOffset(note, position);\n\n    let y = {\n      [ABOVE]: () => {\n        glyph.setOrigin(0.5, 1);\n        const y = getTopY(note, textLine) - ((textLine + initialOffset) * staffSpace);\n        return shouldSitOutsideStaff\n          ? Math.min(stave.getYForTopText(Articulation.INITIAL_OFFSET), y)\n          : y;\n      },\n      [BELOW]: () => {\n        glyph.setOrigin(0.5, 0);\n        const y = getBottomY(note, textLine) + ((textLine + initialOffset) * staffSpace);\n        return shouldSitOutsideStaff\n          ? Math.max(stave.getYForBottomText(Articulation.INITIAL_OFFSET), y)\n          : y;\n      },\n    }[position]();\n\n    if (!isTab) {\n      const offsetDirection = position === ABOVE ? -1 : +1;\n      const noteLine = isTab ? note.positions[index].str : note.getKeyProps()[index].line;\n      const distanceFromNote = (note.getYs()[index] - y) / staffSpace;\n      const articLine = distanceFromNote + noteLine;\n      const snappedLine = snapLineToStaff(canSitBetweenLines, articLine, position, offsetDirection);\n\n      if (isWithinLines(snappedLine, position)) glyph.setOrigin(0.5, 0.5);\n\n      y += Math.abs(snappedLine - articLine) * staffSpace * offsetDirection;\n    }\n\n    L(`Rendering articulation at (x: ${x}, y: ${y})`);\n\n    glyph.render(ctx, x, y);\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n// A formatter for abstract tickable objects, such as notes, chords,\n// tabs, etc.\n\nimport { Vex } from './vex';\nimport { Tickable } from './tickable';\nimport { Fraction } from './fraction';\n\nexport class TickContext extends Tickable {\n  static getNextContext(tContext) {\n    const contexts = tContext.tContexts;\n    const index = contexts.indexOf(tContext);\n\n    return contexts[index + 1];\n  }\n\n  constructor() {\n    super();\n    this.setAttribute('type', 'TickContext');\n    this.currentTick = new Fraction(0, 1);\n    this.maxTicks = new Fraction(0, 1);\n    this.minTicks = null;\n    this.padding = 3;     // padding on each side (width += padding * 2)\n    this.x = 0;\n    this.xBase = 0;        // base x position without xOffset\n    this.xOffset = 0;      // xBase and xOffset are an alternative way to describe x (x = xB + xO)\n    this.tickables = [];   // Notes, tabs, chords, lyrics.\n    this.notePx = 0;       // width of widest note in this context\n    this.extraLeftPx = 0;  // Extra left pixels for modifers & displace notes\n    this.extraRightPx = 0; // Extra right pixels for modifers & displace notes\n    this.tContexts = [];   // Parent array of tick contexts\n  }\n\n  getX() { return this.x; }\n  setX(x) { this.x = x; this.xBase = x; this.xOffset = 0; return this; }\n  getXBase() { return this.xBase; } // use of xBase and xOffset is optional, avoids offset creep\n  setXBase(xBase) { this.xBase = xBase; this.x = xBase + this.xOffset; }\n  getXOffset() { return this.xOffset; }\n  setXOffset(xOffset) { this.xOffset = xOffset; this.x = this.xBase + xOffset; }\n  getWidth() { return this.width + (this.padding * 2); }\n  setPadding(padding) { this.padding = padding; return this; }\n  getMaxTicks() { return this.maxTicks; }\n  getMinTicks() { return this.minTicks; }\n  getTickables() { return this.tickables; }\n\n  getCenterAlignedTickables() {\n    return this.tickables.filter(tickable => tickable.isCenterAligned());\n  }\n\n  // Get widths context, note and left/right modifiers for formatting\n  getMetrics() {\n    const { width, notePx, extraLeftPx, extraRightPx } = this;\n    return { width, notePx, extraLeftPx, extraRightPx };\n  }\n\n  getCurrentTick() { return this.currentTick; }\n  setCurrentTick(tick) {\n    this.currentTick = tick;\n    this.preFormatted = false;\n  }\n\n  // ### DEPRECATED ###\n  // Get left & right pixels used for modifiers. THIS METHOD IS DEPRECATED. Use\n  // the getMetrics() method instead!\n  getExtraPx() {\n    let left_shift = 0;\n    let right_shift = 0;\n    let extraLeftPx = 0;\n    let extraRightPx = 0;\n    for (let i = 0; i < this.tickables.length; i++) {\n      extraLeftPx = Math.max(this.tickables[i].extraLeftPx || 0, extraLeftPx);\n      extraRightPx = Math.max(this.tickables[i].extraRightPx || 0, extraRightPx);\n      const mContext = this.tickables[i].modifierContext;\n      if (mContext && mContext != null) {\n        left_shift = Math.max(left_shift, mContext.state.left_shift);\n        right_shift = Math.max(right_shift, mContext.state.right_shift);\n      }\n    }\n    return {\n      left: left_shift,\n      right: right_shift,\n      extraLeft: extraLeftPx,\n      extraRight: extraRightPx,\n    };\n  }\n\n  addTickable(tickable) {\n    if (!tickable) {\n      throw new Vex.RERR('BadArgument', 'Invalid tickable added.');\n    }\n\n    if (!tickable.shouldIgnoreTicks()) {\n      this.ignore_ticks = false;\n\n      const ticks = tickable.getTicks();\n\n      if (ticks.greaterThan(this.maxTicks)) {\n        this.maxTicks = ticks.clone();\n      }\n\n      if (this.minTicks == null) {\n        this.minTicks = ticks.clone();\n      } else if (ticks.lessThan(this.minTicks)) {\n        this.minTicks = ticks.clone();\n      }\n    }\n\n    tickable.setTickContext(this);\n    this.tickables.push(tickable);\n    this.preFormatted = false;\n    return this;\n  }\n\n  preFormat() {\n    if (this.preFormatted) return this;\n\n    for (let i = 0; i < this.tickables.length; ++i) {\n      const tickable = this.tickables[i];\n      tickable.preFormat();\n      const metrics = tickable.getMetrics();\n\n      // Maintain max extra pixels from all tickables in the context\n      this.extraLeftPx = Math.max(this.extraLeftPx, metrics.extraLeftPx + metrics.modLeftPx);\n      this.extraRightPx = Math.max(this.extraRightPx, metrics.extraRightPx + metrics.modRightPx);\n\n      // Maintain the widest note for all tickables in the context\n      this.notePx = Math.max(this.notePx, metrics.noteWidth);\n\n      // Recalculate the tick context total width\n      this.width = this.notePx + this.extraLeftPx + this.extraRightPx;\n    }\n\n    return this;\n  }\n\n  postFormat() {\n    if (this.postFormatted) return this;\n    this.postFormatted = true;\n    return this;\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// Author: Cyril Silverman\n//\n// ## Description\n//\n// This file implements ornaments as modifiers that can be\n// attached to notes. The complete list of ornaments is available in\n// `tables.js` under `Vex.Flow.ornamentCodes`.\n//\n// See `tests/ornament_tests.js` for usage examples.\n\nimport { Vex } from './vex';\nimport { Flow } from './tables';\nimport { Modifier } from './modifier';\nimport { TickContext } from './tickcontext';\nimport { StaveNote } from './stavenote';\nimport { Glyph } from './glyph';\n\n// To enable logging for this class. Set `Vex.Flow.Ornament.DEBUG` to `true`.\nfunction L(...args) { if (Ornament.DEBUG) Vex.L('Vex.Flow.Ornament', args); }\n\nexport class Ornament extends Modifier {\n  static get CATEGORY() { return 'ornaments'; }\n\n  // ## Static Methods\n  // Arrange ornaments inside `ModifierContext`\n  static format(ornaments, state) {\n    if (!ornaments || ornaments.length === 0) return false;\n\n    let width = 0;\n    for (let i = 0; i < ornaments.length; ++i) {\n      const ornament = ornaments[i];\n      const increment = 2;\n\n      width = Math.max(ornament.getWidth(), width);\n\n      if (ornament.getPosition() === Modifier.Position.ABOVE) {\n        ornament.setTextLine(state.top_text_line);\n        state.top_text_line += increment;\n      } else {\n        ornament.setTextLine(state.text_line);\n        state.text_line += increment;\n      }\n    }\n\n    state.left_shift += width / 2;\n    state.right_shift += width / 2;\n    return true;\n  }\n\n  // Create a new ornament of type `type`, which is an entry in\n  // `Vex.Flow.ornamentCodes` in `tables.js`.\n  constructor(type) {\n    super();\n    this.setAttribute('type', 'Ornament');\n\n    this.note = null;\n    this.index = null;\n    this.type = type;\n    this.position = Modifier.Position.ABOVE;\n    this.delayed = false;\n\n    this.accidentalUpper = null;\n    this.accidentalLower = null;\n\n    this.render_options = {\n      font_scale: 38,\n      accidentalLowerPadding: 3,\n      accidentalUpperPadding: 3,\n    };\n\n    this.ornament = Flow.ornamentCodes(this.type);\n    if (!this.ornament) {\n      throw new Vex.RERR('ArgumentError', `Ornament not found: '${this.type}'`);\n    }\n\n    this.glyph = new Glyph(this.ornament.code, this.render_options.font_scale);\n    this.glyph.setOrigin(0.5, 1.0); // FIXME: SMuFL won't require a vertical origin shift\n  }\n\n  getCategory() { return Ornament.CATEGORY; }\n\n  // Set whether the ornament is to be delayed\n  setDelayed(delayed) { this.delayed = delayed; return this; }\n\n  // Set the upper accidental for the ornament\n  setUpperAccidental(accid) {\n    const scale = this.render_options.font_scale / 1.3;\n    this.accidentalUpper = new Glyph(Flow.accidentalCodes(accid).code, scale);\n    this.accidentalUpper.setOrigin(0.5, 1.0);\n    return this;\n  }\n\n  // Set the lower accidental for the ornament\n  setLowerAccidental(accid) {\n    const scale = this.render_options.font_scale / 1.3;\n    this.accidentalLower = new Glyph(Flow.accidentalCodes(accid).code, scale);\n    this.accidentalLower.setOrigin(0.5, 1.0);\n    return this;\n  }\n\n  // Render ornament in position next to note.\n  draw() {\n    this.checkContext();\n\n    if (!this.note || this.index == null) {\n      throw new Vex.RERR('NoAttachedNote', \"Can't draw Ornament without a note and index.\");\n    }\n\n    this.setRendered();\n\n    const ctx = this.context;\n    const stemDir = this.note.getStemDirection();\n    const stave = this.note.getStave();\n\n    // Get stem extents\n    const stemExtents = this.note.getStem().getExtents();\n    let y = stemDir === StaveNote.STEM_DOWN ? stemExtents.baseY : stemExtents.topY;\n\n    // TabNotes don't have stems attached to them. Tab stems are rendered\n    // outside the stave.\n    if (this.note.getCategory() === 'tabnotes') {\n      if (this.note.hasStem()) {\n        if (stemDir === StaveNote.STEM_DOWN) {\n          y = stave.getYForTopText(this.text_line);\n        }\n      } else { // Without a stem\n        y = stave.getYForTopText(this.text_line);\n      }\n    }\n\n    const isPlacedOnNoteheadSide = stemDir === StaveNote.STEM_DOWN;\n    const spacing = stave.getSpacingBetweenLines();\n    let lineSpacing = 1;\n\n    // Beamed stems are longer than quarter note stems, adjust accordingly\n    if (!isPlacedOnNoteheadSide && this.note.beam) {\n      lineSpacing += 0.5;\n    }\n\n    const totalSpacing = spacing * (this.text_line + lineSpacing);\n    const glyphYBetweenLines = y - totalSpacing;\n\n    // Get initial coordinates for the modifier position\n    const start = this.note.getModifierStartXY(this.position, this.index);\n    let glyphX = start.x;\n    let glyphY = Math.min(stave.getYForTopText(this.text_line), glyphYBetweenLines);\n    glyphY += this.y_shift;\n\n    // Ajdust x position if ornament is delayed\n    if (this.delayed) {\n      let delayXShift = 0;\n      if (this.delayXShift !== undefined) {\n        delayXShift = this.delayXShift;\n      } else {\n        delayXShift += this.glyph.getMetrics().width / 2;\n        const nextContext = TickContext.getNextContext(this.note.getTickContext());\n        if (nextContext) {\n          delayXShift += (nextContext.getX() - glyphX) * 0.5;\n        } else {\n          delayXShift += (stave.x + stave.width - glyphX) * 0.5;\n        }\n        this.delayXShift = delayXShift;\n      }\n      glyphX += delayXShift;\n    }\n\n    L('Rendering ornament: ', this.ornament, glyphX, glyphY);\n\n    if (this.accidentalLower) {\n      this.accidentalLower.render(ctx, glyphX, glyphY);\n      glyphY -= this.accidentalLower.getMetrics().height;\n      glyphY -= this.render_options.accidentalLowerPadding;\n    }\n\n    this.glyph.render(ctx, glyphX, glyphY);\n    glyphY -= this.glyph.getMetrics().height;\n\n    if (this.accidentalUpper) {\n      glyphY -= this.render_options.accidentalUpperPadding;\n      this.accidentalUpper.render(ctx, glyphX, glyphY);\n    }\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n//\n// This file implements text annotations as modifiers that can be attached to\n// notes.\n//\n// See `tests/annotation_tests.js` for usage examples.\n\nimport { Vex } from './vex';\nimport { Flow } from './tables';\nimport { Modifier } from './modifier';\n\n// To enable logging for this class. Set `Vex.Flow.Annotation.DEBUG` to `true`.\nfunction L(...args) { if (Annotation.DEBUG) Vex.L('Vex.Flow.Annotation', args); }\n\nexport class Annotation extends Modifier {\n  static get CATEGORY() { return 'annotations'; }\n\n  // Text annotations can be positioned and justified relative to the note.\n  static get Justify() {\n    return {\n      LEFT: 1,\n      CENTER: 2,\n      RIGHT: 3,\n      CENTER_STEM: 4,\n    };\n  }\n\n  static get JustifyString() {\n    return {\n      left: Annotation.Justify.LEFT,\n      right: Annotation.Justify.RIGHT,\n      center: Annotation.Justify.CENTER,\n      centerStem: Annotation.Justify.CENTER_STEM,\n    };\n  }\n\n  static get VerticalJustify() {\n    return {\n      TOP: 1,\n      CENTER: 2,\n      BOTTOM: 3,\n      CENTER_STEM: 4,\n    };\n  }\n\n  static get VerticalJustifyString() {\n    return {\n      above: Annotation.VerticalJustify.TOP,\n      top: Annotation.VerticalJustify.TOP,\n      below: Annotation.VerticalJustify.BOTTOM,\n      bottom: Annotation.VerticalJustify.BOTTOM,\n      center: Annotation.VerticalJustify.CENTER,\n      centerStem: Annotation.VerticalJustify.CENTER_STEM,\n    };\n  }\n\n  // Arrange annotations within a `ModifierContext`\n  static format(annotations, state) {\n    if (!annotations || annotations.length === 0) return false;\n\n    let width = 0;\n    for (let i = 0; i < annotations.length; ++i) {\n      const annotation = annotations[i];\n      width = Math.max(annotation.getWidth(), width);\n      if (annotation.getPosition() === Modifier.Position.ABOVE) {\n        annotation.setTextLine(state.top_text_line);\n        state.top_text_line++;\n      } else {\n        annotation.setTextLine(state.text_line);\n        state.text_line++;\n      }\n    }\n\n    state.left_shift += width / 2;\n    state.right_shift += width / 2;\n    return true;\n  }\n\n  // ## Prototype Methods\n  //\n  // Annotations inherit from `Modifier` and is positioned correctly when\n  // in a `ModifierContext`.\n  // Create a new `Annotation` with the string `text`.\n  constructor(text) {\n    super();\n    this.setAttribute('type', 'Annotation');\n\n    this.note = null;\n    this.index = null;\n    this.text = text;\n    this.justification = Annotation.Justify.CENTER;\n    this.vert_justification = Annotation.VerticalJustify.TOP;\n    this.font = {\n      family: 'Arial',\n      size: 10,\n      weight: '',\n    };\n\n    // The default width is calculated from the text.\n    this.setWidth(Flow.textWidth(text));\n  }\n\n  getCategory() { return Annotation.CATEGORY; }\n\n  // Set font family, size, and weight. E.g., `Arial`, `10pt`, `Bold`.\n  setFont(family, size, weight) {\n    this.font = { family, size, weight };\n    return this;\n  }\n\n  // Set vertical position of text (above or below stave). `just` must be\n  // a value in `Annotation.VerticalJustify`.\n  setVerticalJustification(just) {\n    this.vert_justification = typeof (just) === 'string'\n      ? Annotation.VerticalJustifyString[just]\n      : just;\n    return this;\n  }\n\n  // Get and set horizontal justification. `justification` is a value in\n  // `Annotation.Justify`.\n  getJustification() { return this.justification; }\n  setJustification(just) {\n    this.justification = typeof (just) === 'string'\n      ? Annotation.JustifyString[just]\n      : just;\n    return this;\n  }\n\n  // Render text beside the note.\n  draw() {\n    this.checkContext();\n\n    if (!this.note) {\n      throw new Vex.RERR(\n        'NoNoteForAnnotation', \"Can't draw text annotation without an attached note.\"\n      );\n    }\n\n    this.setRendered();\n    const start = this.note.getModifierStartXY(Modifier.Position.ABOVE,\n      this.index);\n\n    // We're changing context parameters. Save current state.\n    this.context.save();\n    this.context.setFont(this.font.family, this.font.size, this.font.weight);\n    const text_width = this.context.measureText(this.text).width;\n\n    // Estimate text height to be the same as the width of an 'm'.\n    //\n    // This is a hack to work around the inability to measure text height\n    // in HTML5 Canvas (and SVG).\n    const text_height = this.context.measureText('m').width;\n    let x;\n    let y;\n\n    if (this.justification === Annotation.Justify.LEFT) {\n      x = start.x;\n    } else if (this.justification === Annotation.Justify.RIGHT) {\n      x = start.x - text_width;\n    } else if (this.justification === Annotation.Justify.CENTER) {\n      x = start.x - text_width / 2;\n    } else /* CENTER_STEM */ {\n      x = this.note.getStemX() - text_width / 2;\n    }\n\n    let stem_ext;\n    let spacing;\n    const has_stem = this.note.hasStem();\n    const stave = this.note.getStave();\n\n    // The position of the text varies based on whether or not the note\n    // has a stem.\n    if (has_stem) {\n      stem_ext = this.note.getStem().getExtents();\n      spacing = stave.getSpacingBetweenLines();\n    }\n\n    if (this.vert_justification === Annotation.VerticalJustify.BOTTOM) {\n      // HACK: We need to compensate for the text's height since its origin\n      // is bottom-right.\n      y = stave.getYForBottomText(this.text_line + Flow.TEXT_HEIGHT_OFFSET_HACK);\n      if (has_stem) {\n        const stem_base = (this.note.getStemDirection() === 1 ? stem_ext.baseY : stem_ext.topY);\n        y = Math.max(y, stem_base + (spacing * (this.text_line + 2)));\n      }\n    } else if (this.vert_justification === Annotation.VerticalJustify.CENTER) {\n      const yt = this.note.getYForTopText(this.text_line) - 1;\n      const yb = stave.getYForBottomText(this.text_line);\n      y = yt + (yb - yt) / 2 + text_height / 2;\n    } else if (this.vert_justification === Annotation.VerticalJustify.TOP) {\n      y = Math.min(stave.getYForTopText(this.text_line), this.note.getYs()[0] - 10);\n      if (has_stem) {\n        y = Math.min(y, (stem_ext.topY - 5) - (spacing * this.text_line));\n      }\n    } else /* CENTER_STEM */ {\n      const extents = this.note.getStemExtents();\n      y = extents.topY + (extents.baseY - extents.topY) / 2 +\n        text_height / 2;\n    }\n\n    L('Rendering annotation: ', this.text, x, y);\n    this.context.fillText(this.text, x, y);\n    this.context.restore();\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n//\n// This file implements tablature bends.\n\nimport { Vex } from './vex';\nimport { Flow } from './tables';\nimport { Modifier } from './modifier';\n/**\n   @param text Text for bend (\"Full\", \"Half\", etc.) (DEPRECATED)\n   @param release If true, render a release. (DEPRECATED)\n   @param phrase If set, ignore \"text\" and \"release\", and use the more\n                 sophisticated phrase specified.\n\n   Example of a phrase:\n\n     [{\n       type: UP,\n       text: \"whole\"\n       width: 8;\n     },\n     {\n       type: DOWN,\n       text: \"whole\"\n       width: 8;\n     },\n     {\n       type: UP,\n       text: \"half\"\n       width: 8;\n     },\n     {\n       type: UP,\n       text: \"whole\"\n       width: 8;\n     },\n     {\n       type: DOWN,\n       text: \"1 1/2\"\n       width: 8;\n     }]\n */\nexport class Bend extends Modifier {\n  static get CATEGORY() { return 'bends'; }\n\n  static get UP() {\n    return 0;\n  }\n  static get DOWN() {\n    return 1;\n  }\n\n  // ## Static Methods\n  // Arrange bends in `ModifierContext`\n  static format(bends, state) {\n    if (!bends || bends.length === 0) return false;\n\n    let last_width = 0;\n    // Bends are always on top.\n    const text_line = state.top_text_line;\n\n    // Format Bends\n    for (let i = 0; i < bends.length; ++i) {\n      const bend = bends[i];\n      bend.setXShift(last_width);\n      last_width = bend.getWidth();\n      bend.setTextLine(text_line);\n    }\n\n    state.right_shift += last_width;\n    state.top_text_line += 1;\n    return true;\n  }\n\n  // ## Prototype Methods\n  constructor(text, release, phrase) {\n    super();\n    this.setAttribute('type', 'Bend');\n\n    this.text = text;\n    this.x_shift = 0;\n    this.release = release || false;\n    this.font = '10pt Arial';\n    this.render_options = {\n      line_width: 1.5,\n      line_style: '#777777',\n      bend_width: 8,\n      release_width: 8,\n    };\n\n    if (phrase) {\n      this.phrase = phrase;\n    } else {\n      // Backward compatibility\n      this.phrase = [{ type: Bend.UP, text: this.text }];\n      if (this.release) this.phrase.push({ type: Bend.DOWN, text: '' });\n    }\n\n    this.updateWidth();\n  }\n\n  getCategory() { return Bend.CATEGORY; }\n\n  setXShift(value) {\n    this.x_shift = value;\n    this.updateWidth();\n  }\n  setFont(font) { this.font = font; return this; }\n  getText() { return this.text; }\n  updateWidth() {\n    const that = this;\n\n    function measure_text(text) {\n      let text_width;\n      if (that.context) {\n        text_width = that.context.measureText(text).width;\n      } else {\n        text_width = Flow.textWidth(text);\n      }\n\n      return text_width;\n    }\n\n    let total_width = 0;\n    for (let i = 0; i < this.phrase.length; ++i) {\n      const bend = this.phrase[i];\n      if ('width' in bend) {\n        total_width += bend.width;\n      } else {\n        const additional_width = (bend.type === Bend.UP) ?\n          this.render_options.bend_width : this.render_options.release_width;\n\n        bend.width = Vex.Max(additional_width, measure_text(bend.text)) + 3;\n        bend.draw_width = bend.width / 2;\n        total_width += bend.width;\n      }\n    }\n\n    this.setWidth(total_width + this.x_shift);\n    return this;\n  }\n  draw() {\n    this.checkContext();\n    if (!(this.note && (this.index != null))) {\n      throw new Vex.RERR('NoNoteForBend', \"Can't draw bend without a note or index.\");\n    }\n\n    this.setRendered();\n\n    const start = this.note.getModifierStartXY(Modifier.Position.RIGHT,\n      this.index);\n    start.x += 3;\n    start.y += 0.5;\n    const x_shift = this.x_shift;\n\n    const ctx = this.context;\n    const bend_height = this.note.getStave().getYForTopText(this.text_line) + 3;\n    const annotation_y = this.note.getStave().getYForTopText(this.text_line) - 1;\n    const that = this;\n\n    function renderBend(x, y, width, height) {\n      const cp_x = x + width;\n      const cp_y = y;\n\n      ctx.save();\n      ctx.beginPath();\n      ctx.setLineWidth(that.render_options.line_width);\n      ctx.setStrokeStyle(that.render_options.line_style);\n      ctx.setFillStyle(that.render_options.line_style);\n      ctx.moveTo(x, y);\n      ctx.quadraticCurveTo(cp_x, cp_y, x + width, height);\n      ctx.stroke();\n      ctx.restore();\n    }\n\n    function renderRelease(x, y, width, height) {\n      ctx.save();\n      ctx.beginPath();\n      ctx.setLineWidth(that.render_options.line_width);\n      ctx.setStrokeStyle(that.render_options.line_style);\n      ctx.setFillStyle(that.render_options.line_style);\n      ctx.moveTo(x, height);\n      ctx.quadraticCurveTo(\n        x + width, height,\n        x + width, y);\n      ctx.stroke();\n      ctx.restore();\n    }\n\n    function renderArrowHead(x, y, direction) {\n      const width = 4;\n      const dir = direction || 1;\n\n      ctx.beginPath();\n      ctx.moveTo(x, y);\n      ctx.lineTo(x - width, y + width * dir);\n      ctx.lineTo(x + width, y + width * dir);\n      ctx.closePath();\n      ctx.fill();\n    }\n\n    function renderText(x, text) {\n      ctx.save();\n      ctx.setRawFont(that.font);\n      const render_x = x - (ctx.measureText(text).width / 2);\n      ctx.fillText(text, render_x, annotation_y);\n      ctx.restore();\n    }\n\n    let last_bend = null;\n    let last_drawn_width = 0;\n    for (let i = 0; i < this.phrase.length; ++i) {\n      const bend = this.phrase[i];\n      if (i === 0) bend.draw_width += x_shift;\n\n      last_drawn_width = bend.draw_width +\n        (last_bend ? last_bend.draw_width : 0) -\n        (i === 1 ? x_shift : 0);\n      if (bend.type === Bend.UP) {\n        if (last_bend && last_bend.type === Bend.UP) {\n          renderArrowHead(start.x, bend_height);\n        }\n\n        renderBend(start.x, start.y, last_drawn_width, bend_height);\n      }\n\n      if (bend.type === Bend.DOWN) {\n        if (last_bend && last_bend.type === Bend.UP) {\n          renderRelease(start.x, start.y, last_drawn_width, bend_height);\n        }\n\n        if (last_bend && last_bend.type === Bend.DOWN) {\n          renderArrowHead(start.x, start.y, -1);\n          renderRelease(start.x, start.y, last_drawn_width, bend_height);\n        }\n\n        if (last_bend === null) {\n          last_drawn_width = bend.draw_width;\n          renderRelease(start.x, start.y, last_drawn_width, bend_height);\n        }\n      }\n\n      renderText(start.x + last_drawn_width, bend.text);\n      last_bend = bend;\n      last_bend.x = start.x;\n\n      start.x += last_drawn_width;\n    }\n\n    // Final arrowhead and text\n    if (last_bend.type === Bend.UP) {\n      renderArrowHead(last_bend.x + last_drawn_width, bend_height);\n    } else if (last_bend.type === Bend.DOWN) {\n      renderArrowHead(last_bend.x + last_drawn_width, start.y, -1);\n    }\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n// This class implements vibratos.\n\nimport { Vex } from './vex';\nimport { Modifier } from './modifier';\nimport { Bend } from './bend';\n\nexport class Vibrato extends Modifier {\n  static get CATEGORY() { return 'vibratos'; }\n\n  // ## Static Methods\n  // Arrange vibratos inside a `ModifierContext`.\n  static format(vibratos, state, context) {\n    if (!vibratos || vibratos.length === 0) return false;\n\n    // Vibratos are always on top.\n    let text_line = state.top_text_line;\n    let width = 0;\n    let shift = state.right_shift - 7;\n\n    // If there's a bend, drop the text line\n    const bends = context.getModifiers(Bend.CATEGORY);\n    if (bends && bends.length > 0) {\n      text_line--;\n    }\n\n    // Format Vibratos\n    for (let i = 0; i < vibratos.length; ++i) {\n      const vibrato = vibratos[i];\n      vibrato.setXShift(shift);\n      vibrato.setTextLine(text_line);\n      width += vibrato.getWidth();\n      shift += width;\n    }\n\n    state.right_shift += width;\n    state.top_text_line += 1;\n    return true;\n  }\n\n  // ## Prototype Methods\n  constructor() {\n    super();\n    this.setAttribute('type', 'Vibrato');\n\n    this.position = Modifier.Position.RIGHT;\n    this.render_options = {\n      harsh: false,\n      vibrato_width: 20,\n      wave_height: 6,\n      wave_width: 4,\n      wave_girth: 2,\n    };\n\n    this.setVibratoWidth(this.render_options.vibrato_width);\n  }\n  getCategory() { return Vibrato.CATEGORY; }\n  setHarsh(harsh) { this.render_options.harsh = harsh; return this; }\n  setVibratoWidth(width) {\n    this.render_options.vibrato_width = width;\n    this.setWidth(width);\n    return this;\n  }\n\n  draw() {\n    const ctx = this.checkContext();\n\n    if (!this.note) {\n      throw new Vex.RERR('NoNoteForVibrato', \"Can't draw vibrato without an attached note.\");\n    }\n\n    this.setRendered();\n    const start = this.note.getModifierStartXY(Modifier.Position.RIGHT, this.index);\n\n    const vx = start.x + this.x_shift;\n    const vy = this.note.getYForTopText(this.text_line) + 2;\n\n    Vibrato.renderVibrato(ctx, vx, vy, this.render_options);\n  }\n\n  // Static rendering method that can be called from\n  // other classes (e.g. VibratoBracket)\n  static renderVibrato(ctx, x, y, opts) {\n    const { harsh, vibrato_width, wave_width, wave_girth, wave_height } = opts;\n    const num_waves = vibrato_width / wave_width;\n\n    ctx.beginPath();\n\n    let i;\n    if (harsh) {\n      ctx.moveTo(x, y + wave_girth + 1);\n      for (i = 0; i < num_waves / 2; ++i) {\n        ctx.lineTo(x + wave_width, y - (wave_height / 2));\n        x += wave_width;\n        ctx.lineTo(x + wave_width, y + (wave_height / 2));\n        x += wave_width;\n      }\n      for (i = 0; i < num_waves / 2; ++i) {\n        ctx.lineTo(x - wave_width, (y - (wave_height / 2)) + wave_girth + 1);\n        x -= wave_width;\n        ctx.lineTo(x - wave_width, (y + (wave_height / 2)) + wave_girth + 1);\n        x -= wave_width;\n      }\n      ctx.fill();\n    } else {\n      ctx.moveTo(x, y + wave_girth);\n      for (i = 0; i < num_waves / 2; ++i) {\n        ctx.quadraticCurveTo(x + (wave_width / 2), y - (wave_height / 2), x + wave_width, y);\n        x += wave_width;\n        ctx.quadraticCurveTo(x + (wave_width / 2), y + (wave_height / 2), x + wave_width, y);\n        x += wave_width;\n      }\n\n      for (i = 0; i < num_waves / 2; ++i) {\n        ctx.quadraticCurveTo(\n          x - (wave_width / 2),\n          (y + (wave_height / 2)) + wave_girth,\n          x - wave_width, y + wave_girth);\n        x -= wave_width;\n        ctx.quadraticCurveTo(\n          x - (wave_width / 2),\n          (y - (wave_height / 2)) + wave_girth,\n          x - wave_width, y + wave_girth);\n        x -= wave_width;\n      }\n      ctx.fill();\n    }\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n//\n// This class implements various types of modifiers to notes (e.g. bends,\n// fingering positions etc.)\n\nimport { Vex } from './vex';\nimport { StaveNote } from './stavenote';\nimport { Dot } from './dot';\nimport { FretHandFinger } from './frethandfinger';\nimport { Accidental } from './accidental';\nimport { NoteSubGroup } from './notesubgroup';\nimport { GraceNoteGroup } from './gracenotegroup';\nimport { Stroke } from './strokes';\nimport { StringNumber } from './stringnumber';\nimport { Articulation } from './articulation';\nimport { Ornament } from './ornament';\nimport { Annotation } from './annotation';\nimport { Bend } from './bend';\nimport { Vibrato } from './vibrato';\n\n// To enable logging for this class. Set `Vex.Flow.ModifierContext.DEBUG` to `true`.\nfunction L(...args) { if (ModifierContext.DEBUG) Vex.L('Vex.Flow.ModifierContext', args); }\n\nexport class ModifierContext {\n  constructor() {\n    // Current modifiers\n    this.modifiers = {};\n\n    // Formatting data.\n    this.preFormatted = false;\n    this.postFormatted = false;\n    this.width = 0;\n    this.spacing = 0;\n    this.state = {\n      left_shift: 0,\n      right_shift: 0,\n      text_line: 0,\n      top_text_line: 0,\n    };\n\n    // Add new modifiers to this array. The ordering is significant -- lower\n    // modifiers are formatted and rendered before higher ones.\n    this.PREFORMAT = [\n      StaveNote,\n      Dot,\n      FretHandFinger,\n      Accidental,\n      Stroke,\n      GraceNoteGroup,\n      NoteSubGroup,\n      StringNumber,\n      Articulation,\n      Ornament,\n      Annotation,\n      Bend,\n      Vibrato,\n    ];\n\n    // If post-formatting is required for an element, add it to this array.\n    this.POSTFORMAT = [StaveNote];\n  }\n\n  addModifier(modifier) {\n    const type = modifier.getCategory();\n    if (!this.modifiers[type]) this.modifiers[type] = [];\n    this.modifiers[type].push(modifier);\n    modifier.setModifierContext(this);\n    this.preFormatted = false;\n    return this;\n  }\n\n  getModifiers(type) { return this.modifiers[type]; }\n  getWidth() { return this.width; }\n  getExtraLeftPx() { return this.state.left_shift; }\n  getExtraRightPx() { return this.state.right_shift; }\n  getState() { return this.state; }\n\n  getMetrics() {\n    if (!this.formatted) {\n      throw new Vex.RERR('UnformattedModifier', 'Unformatted modifier has no metrics.');\n    }\n\n    return {\n      width: this.state.left_shift + this.state.right_shift + this.spacing,\n      spacing: this.spacing,\n      extra_left_px: this.state.left_shift,\n      extra_right_px: this.state.right_shift,\n    };\n  }\n\n  preFormat() {\n    if (this.preFormatted) return;\n    this.PREFORMAT.forEach((modifier) => {\n      L('Preformatting ModifierContext: ', modifier.CATEGORY);\n      modifier.format(this.getModifiers(modifier.CATEGORY), this.state, this);\n    });\n\n    // Update width of this modifier context\n    this.width = this.state.left_shift + this.state.right_shift;\n    this.preFormatted = true;\n  }\n\n  postFormat() {\n    if (this.postFormatted) return;\n    this.POSTFORMAT.forEach((modifier) => {\n      L('Postformatting ModifierContext: ', modifier.CATEGORY);\n      modifier.postFormat(this.getModifiers(modifier.CATEGORY), this);\n    });\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n//\n// This file implements the formatting and layout algorithms that are used\n// to position notes in a voice. The algorithm can align multiple voices both\n// within a stave, and across multiple staves.\n//\n// To do this, the formatter breaks up voices into a grid of rational-valued\n// `ticks`, to which each note is assigned. Then, minimum widths are assigned\n// to each tick based on the widths of the notes and modifiers in that tick. This\n// establishes the smallest amount of space required for each tick.\n//\n// Finally, the formatter distributes the left over space proportionally to\n// all the ticks, setting the `x` values of the notes in each tick.\n//\n// See `tests/formatter_tests.js` for usage examples. The helper functions included\n// here (`FormatAndDraw`, `FormatAndDrawTab`) also serve as useful usage examples.\n\nimport { Vex } from './vex';\nimport { Beam } from './beam';\nimport { Flow } from './tables';\nimport { Fraction } from './fraction';\nimport { Voice } from './voice';\nimport { StaveConnector } from './staveconnector';\nimport { StaveNote } from './stavenote';\nimport { Note } from './note';\nimport { ModifierContext } from './modifiercontext';\nimport { TickContext } from './tickcontext';\n\n// To enable logging for this class. Set `Vex.Flow.Formatter.DEBUG` to `true`.\nfunction L(...args) { if (Formatter.DEBUG) Vex.L('Vex.Flow.Formatter', args); }\n\n// Helper function to locate the next non-rest note(s).\nfunction lookAhead(notes, restLine, i, compare) {\n  // If no valid next note group, nextRestLine is same as current.\n  let nextRestLine = restLine;\n\n  // Get the rest line for next valid non-rest note group.\n  for (i += 1; i < notes.length; i += 1) {\n    const note = notes[i];\n    if (!note.isRest() && !note.shouldIgnoreTicks()) {\n      nextRestLine = note.getLineForRest();\n      break;\n    }\n  }\n\n  // Locate the mid point between two lines.\n  if (compare && restLine !== nextRestLine) {\n    const top = Math.max(restLine, nextRestLine);\n    const bot = Math.min(restLine, nextRestLine);\n    nextRestLine = Vex.MidLine(top, bot);\n  }\n  return nextRestLine;\n}\n\n// Take an array of `voices` and place aligned tickables in the same context. Returns\n// a mapping from `tick` to `ContextType`, a list of `tick`s, and the resolution\n// multiplier.\n//\n// Params:\n// * `voices`: Array of `Voice` instances.\n// * `ContextType`: A context class (e.g., `ModifierContext`, `TickContext`)\n// * `addToContext`: Function to add tickable to context.\nfunction createContexts(voices, ContextType, addToContext) {\n  if (!voices || !voices.length) {\n    throw new Vex.RERR('BadArgument', 'No voices to format');\n  }\n\n  // Find out highest common multiple of resolution multipliers.\n  // The purpose of this is to find out a common denominator\n  // for all fractional tick values in all tickables of all voices,\n  // so that the values can be expanded and the numerator used\n  // as an integer tick value.\n  const totalTicks = voices[0].getTotalTicks();\n  const resolutionMultiplier = voices.reduce((resolutionMultiplier, voice) => {\n    // VexFlowPatch: this error is unnecessary, and prevents the fix to the layouting in #1187.\n    // if (!voice.getTotalTicks().equals(totalTicks)) {\n    //   throw new Vex.RERR(\n    //     'TickMismatch', 'Voices should have same total note duration in ticks.'\n    //   );\n    // }\n\n    if (voice.getMode() === Voice.Mode.STRICT && !voice.isComplete()) {\n      throw new Vex.RERR(\n        'IncompleteVoice', 'Voice does not have enough notes.'\n      );\n    }\n\n    return Math.max(\n      resolutionMultiplier,\n      Fraction.LCM(resolutionMultiplier, voice.getResolutionMultiplier())\n    );\n  }, 1);\n\n  // Initialize tick maps.\n  const tickToContextMap = {};\n  const tickList = [];\n  const contexts = [];\n\n  // For each voice, extract notes and create a context for every\n  // new tick that hasn't been seen before.\n  voices.forEach(voice => {\n    // Use resolution multiplier as denominator to expand ticks\n    // to suitable integer values, so that no additional expansion\n    // of fractional tick values is needed.\n    const ticksUsed = new Fraction(0, resolutionMultiplier);\n\n    voice.getTickables().forEach(tickable => {\n      const integerTicks = ticksUsed.numerator;\n\n      // If we have no tick context for this tick, create one.\n      if (!tickToContextMap[integerTicks]) {\n        const newContext = new ContextType();\n        contexts.push(newContext);\n        tickToContextMap[integerTicks] = newContext;\n      }\n\n      // Add this tickable to the TickContext.\n      addToContext(tickable, tickToContextMap[integerTicks]);\n\n      // Maintain a sorted list of tick contexts.\n      tickList.push(integerTicks);\n      ticksUsed.add(tickable.getTicks());\n    });\n  });\n\n  return {\n    map: tickToContextMap,\n    array: contexts,\n    list: Vex.SortAndUnique(tickList, (a, b) => a - b, (a, b) => a === b),\n    resolutionMultiplier,\n  };\n}\n\nexport class Formatter {\n  // Helper function to layout \"notes\" one after the other without\n  // regard for proportions. Useful for tests and debugging.\n  static SimpleFormat(notes, x = 0, { paddingBetween = 10 } = {}) {\n    notes.reduce((x, note) => {\n      note.addToModifierContext(new ModifierContext());\n      const tick = new TickContext().addTickable(note).preFormat();\n      const extra = tick.getExtraPx();\n      tick.setX(x + extra.left);\n\n      return x + tick.getWidth() + extra.right + paddingBetween;\n    }, x);\n  }\n\n  // Helper function to plot formatter debug info.\n  static plotDebugging(ctx, formatter, xPos, y1, y2) {\n    const x = xPos + Note.STAVEPADDING;\n    const contextGaps = formatter.contextGaps;\n    function stroke(x1, x2, color) {\n      ctx.beginPath();\n      ctx.setStrokeStyle(color);\n      ctx.setFillStyle(color);\n      ctx.setLineWidth(1);\n      ctx.fillRect(x1, y1, x2 - x1, y2 - y1);\n    }\n\n    ctx.save();\n    ctx.setFont('Arial', 8, '');\n\n    contextGaps.gaps.forEach(gap => {\n      stroke(x + gap.x1, x + gap.x2, '#aaa');\n      // Vex.drawDot(ctx, xPos + gap.x1, yPos, 'blue');\n      ctx.fillText(Math.round(gap.x2 - gap.x1), x + gap.x1, y2 + 12);\n    });\n\n    ctx.fillText(Math.round(contextGaps.total) + 'px', x - 20, y2 + 12);\n    ctx.setFillStyle('red');\n\n    ctx.fillText('Loss: ' +\n      formatter.lossHistory.map(loss => Math.round(loss)), x - 20, y2 + 22);\n    ctx.restore();\n  }\n\n  // Helper function to format and draw a single voice. Returns a bounding\n  // box for the notation.\n  //\n  // Parameters:\n  // * `ctx` - The rendering context\n  // * `stave` - The stave to which to draw (`Stave` or `TabStave`)\n  // * `notes` - Array of `Note` instances (`StaveNote`, `TextNote`, `TabNote`, etc.)\n  // * `params` - One of below:\n  //    * Setting `autobeam` only `(context, stave, notes, true)` or\n  //      `(ctx, stave, notes, {autobeam: true})`\n  //    * Setting `align_rests` a struct is needed `(context, stave, notes, {align_rests: true})`\n  //    * Setting both a struct is needed `(context, stave, notes, {\n  //      autobeam: true, align_rests: true})`\n  //\n  // `autobeam` automatically generates beams for the notes.\n  // `align_rests` aligns rests with nearby notes.\n  static FormatAndDraw(ctx, stave, notes, params) {\n    const options = {\n      auto_beam: false,\n      align_rests: false,\n    };\n\n    if (typeof params === 'object') {\n      Vex.Merge(options, params);\n    } else if (typeof params === 'boolean') {\n      options.auto_beam = params;\n    }\n\n    // Start by creating a voice and adding all the notes to it.\n    const voice = new Voice(Flow.TIME4_4)\n      .setMode(Voice.Mode.SOFT)\n      .addTickables(notes);\n\n    // Then create beams, if requested.\n    const beams = options.auto_beam ? Beam.applyAndGetBeams(voice) : [];\n\n    // Instantiate a `Formatter` and format the notes.\n    new Formatter()\n      .joinVoices([voice], { align_rests: options.align_rests })\n      .formatToStave([voice], stave, { align_rests: options.align_rests, stave });\n\n    // Render the voice and beams to the stave.\n    voice.setStave(stave).draw(ctx, stave);\n    beams.forEach(beam => beam.setContext(ctx).draw());\n\n    // Return the bounding box of the voice.\n    return voice.getBoundingBox();\n  }\n\n  // Helper function to format and draw aligned tab and stave notes in two\n  // separate staves.\n  //\n  // Parameters:\n  // * `ctx` - The rendering context\n  // * `tabstave` - A `TabStave` instance on which to render `TabNote`s.\n  // * `stave` - A `Stave` instance on which to render `Note`s.\n  // * `notes` - Array of `Note` instances for the stave (`StaveNote`, `BarNote`, etc.)\n  // * `tabnotes` - Array of `Note` instances for the tab stave (`TabNote`, `BarNote`, etc.)\n  // * `autobeam` - Automatically generate beams.\n  // * `params` - A configuration object:\n  //    * `autobeam` automatically generates beams for the notes.\n  //    * `align_rests` aligns rests with nearby notes.\n  static FormatAndDrawTab(ctx, tabstave, stave, tabnotes, notes, autobeam, params) {\n    const opts = {\n      auto_beam: autobeam,\n      align_rests: false,\n    };\n\n    if (typeof params === 'object') {\n      Vex.Merge(opts, params);\n    } else if (typeof params === 'boolean') {\n      opts.auto_beam = params;\n    }\n\n    // Create a `4/4` voice for `notes`.\n    const notevoice = new Voice(Flow.TIME4_4)\n      .setMode(Voice.Mode.SOFT)\n      .addTickables(notes);\n\n    // Create a `4/4` voice for `tabnotes`.\n    const tabvoice = new Voice(Flow.TIME4_4)\n      .setMode(Voice.Mode.SOFT)\n      .addTickables(tabnotes);\n\n    // Then create beams, if requested.\n    const beams = opts.auto_beam ? Beam.applyAndGetBeams(notevoice) : [];\n\n    // Instantiate a `Formatter` and align tab and stave notes.\n    new Formatter()\n      .joinVoices([notevoice], { align_rests: opts.align_rests })\n      .joinVoices([tabvoice])\n      .formatToStave([notevoice, tabvoice], stave, { align_rests: opts.align_rests });\n\n    // Render voices and beams to staves.\n    notevoice.draw(ctx, stave);\n    tabvoice.draw(ctx, tabstave);\n    beams.forEach(beam => beam.setContext(ctx).draw());\n\n    // Draw a connector between tab and note staves.\n    new StaveConnector(stave, tabstave).setContext(ctx).draw();\n  }\n\n  // Auto position rests based on previous/next note positions.\n  //\n  // Params:\n  // * `notes`: An array of notes.\n  // * `alignAllNotes`: If set to false, only aligns non-beamed notes.\n  // * `alignTuplets`: If set to false, ignores tuplets.\n  static AlignRestsToNotes(notes, alignAllNotes, alignTuplets) {\n    notes.forEach((note, index) => {\n      if (note instanceof StaveNote && note.isRest()) {\n        if (note.tuplet && !alignTuplets) return;\n\n        // If activated rests not on default can be rendered as specified.\n        const position = note.getGlyph().position.toUpperCase();\n        if (position !== 'R/4' && position !== 'B/4') return;\n\n        if (alignAllNotes || note.beam != null) {\n          // Align rests with previous/next notes.\n          const props = note.getKeyProps()[0];\n          if (index === 0) {\n            props.line = lookAhead(notes, props.line, index, false);\n            note.setKeyLine(0, props.line);\n          } else if (index > 0 && index < notes.length) {\n            // If previous note is a rest, use its line number.\n            let restLine;\n            if (notes[index - 1].isRest()) {\n              restLine = notes[index - 1].getKeyProps()[0].line;\n              props.line = restLine;\n            } else {\n              restLine = notes[index - 1].getLineForRest();\n              // Get the rest line for next valid non-rest note group.\n              props.line = lookAhead(notes, restLine, index, true);\n            }\n            note.setKeyLine(0, props.line);\n          }\n        }\n      }\n    });\n\n    return this;\n  }\n\n  constructor() {\n    // Minimum width required to render all the notes in the voices.\n    this.minTotalWidth = 0;\n\n    // This is set to `true` after `minTotalWidth` is calculated.\n    this.hasMinTotalWidth = false;\n\n    // Total number of ticks in the voice.\n    this.totalTicks = new Fraction(0, 1);\n\n    // Arrays of tick and modifier contexts.\n    this.tickContexts = null;\n    this.modiferContexts = null;\n\n    // Gaps between contexts, for free movement of notes post\n    // formatting.\n    this.contextGaps = {\n      total: 0,\n      gaps: [],\n    };\n\n    this.voices = [];\n  }\n\n  // Find all the rests in each of the `voices` and align them\n  // to neighboring notes. If `alignAllNotes` is `false`, then only\n  // align non-beamed notes.\n  alignRests(voices, alignAllNotes) {\n    if (!voices || !voices.length) {\n      throw new Vex.RERR('BadArgument', 'No voices to format rests');\n    }\n\n    voices.forEach(voice =>\n      Formatter.AlignRestsToNotes(voice.getTickables(), alignAllNotes));\n  }\n\n  // Calculate the minimum width required to align and format `voices`.\n  preCalculateMinTotalWidth(voices) {\n    // Cache results.\n    if (this.hasMinTotalWidth) return this.minTotalWidth;\n\n    // Create tick contexts if not already created.\n    if (!this.tickContexts) {\n      if (!voices) {\n        throw new Vex.RERR(\n          'BadArgument', \"'voices' required to run preCalculateMinTotalWidth\"\n        );\n      }\n\n      this.createTickContexts(voices);\n    }\n\n    const { list: contextList, map: contextMap } = this.tickContexts;\n\n    // Go through each tick context and calculate total width.\n    this.minTotalWidth = contextList\n      .map(tick => {\n        const context = contextMap[tick];\n        context.preFormat();\n        return context.getWidth();\n      })\n      .reduce((a, b) => a + b, 0);\n\n    this.hasMinTotalWidth = true;\n\n    return this.minTotalWidth;\n  }\n\n  // Get minimum width required to render all voices. Either `format` or\n  // `preCalculateMinTotalWidth` must be called before this method.\n  getMinTotalWidth() {\n    if (!this.hasMinTotalWidth) {\n      throw new Vex.RERR(\n        'NoMinTotalWidth',\n        \"Call 'preCalculateMinTotalWidth' or 'preFormat' before calling 'getMinTotalWidth'\"\n      );\n    }\n\n    return this.minTotalWidth;\n  }\n\n  // Create `ModifierContext`s for each tick in `voices`.\n  createModifierContexts(voices) {\n    const contexts = createContexts(\n      voices,\n      ModifierContext,\n      (tickable, context) => tickable.addToModifierContext(context)\n    );\n\n    this.modiferContexts = contexts;\n    return contexts;\n  }\n\n  // Create `TickContext`s for each tick in `voices`. Also calculate the\n  // total number of ticks in voices.\n  createTickContexts(voices) {\n    const contexts = createContexts(\n      voices,\n      TickContext,\n      (tickable, context) => context.addTickable(tickable)\n    );\n\n    contexts.array.forEach(context => {\n      context.tContexts = contexts.array;\n    });\n\n    this.totalTicks = voices[0].getTicksUsed().clone();\n    this.tickContexts = contexts;\n    return contexts;\n  }\n\n  // This is the core formatter logic. Format voices and justify them\n  // to `justifyWidth` pixels. `renderingContext` is required to justify elements\n  // that can't retreive widths without a canvas. This method sets the `x` positions\n  // of all the tickables/notes in the formatter.\n  preFormat(justifyWidth = 0, renderingContext, voices, stave) {\n    // Initialize context maps.\n    const contexts = this.tickContexts;\n    const { list: contextList, map: contextMap, resolutionMultiplier } = contexts;\n\n    // If voices and a stave were provided, set the Stave for each voice\n    // and preFormat to apply Y values to the notes;\n    if (voices && stave) {\n      voices.forEach(voice => voice.setStave(stave).preFormat());\n    }\n\n    // Now distribute the ticks to each tick context, and assign them their\n    // own X positions.\n    let x = 0;\n    let shift = 0;\n    const centerX = justifyWidth / 2;\n    this.minTotalWidth = 0;\n\n    // Pass 1: Give each note maximum width requested by context.\n    contextList.forEach((tick) => {\n      const context = contextMap[tick];\n      if (renderingContext) context.setContext(renderingContext);\n\n      // Make sure that all tickables in this context have calculated their\n      // space requirements.\n      context.preFormat();\n\n      const width = context.getWidth();\n      this.minTotalWidth += width;\n\n      const metrics = context.getMetrics();\n      x = x + shift + metrics.extraLeftPx;\n      context.setX(x);\n\n      // Calculate shift for the next tick.\n      shift = width - metrics.extraLeftPx;\n    });\n\n    this.minTotalWidth = x + shift;\n    this.hasMinTotalWidth = true;\n\n    // No justification needed. End formatting.\n    if (justifyWidth <= 0) return;\n\n    // Pass 2: Take leftover width, and distribute it to proportionately to\n    // all notes.\n    const remainingX = justifyWidth - this.minTotalWidth;\n    const leftoverPxPerTick = remainingX / (this.totalTicks.value() * resolutionMultiplier);\n    let spaceAccum = 0;\n\n    contextList.forEach((tick, index) => {\n      const prevTick = contextList[index - 1] || 0;\n      const context = contextMap[tick];\n      const tickSpace = (tick - prevTick) * leftoverPxPerTick;\n\n      spaceAccum += tickSpace;\n      context.setX(context.getX() + spaceAccum);\n\n      // Move center aligned tickables to middle\n      context\n        .getCenterAlignedTickables()\n        .forEach(tickable => { // eslint-disable-line\n          tickable.center_x_shift = centerX - context.getX();\n        });\n    });\n\n    // Just one context. Done formatting.\n    if (contextList.length === 1) return;\n\n    this.justifyWidth = justifyWidth;\n    this.lossHistory = [];\n    this.evaluate();\n  }\n\n  // Calculate the total cost of this formatting decision.\n  evaluate() {\n    const justifyWidth = this.justifyWidth;\n    // Calculate available slack per tick context. This works out how much freedom\n    // to move a context has in either direction, without affecting other notes.\n    this.contextGaps = { total: 0, gaps: [] };\n    this.tickContexts.list.forEach((tick, index) => {\n      if (index === 0) return;\n      const prevTick = this.tickContexts.list[index - 1];\n      const prevContext = this.tickContexts.map[prevTick];\n      const context = this.tickContexts.map[tick];\n      const prevMetrics = prevContext.getMetrics();\n\n      const insideRightEdge = prevContext.getX() + prevMetrics.width;\n      const insideLeftEdge = context.getX();\n      const gap = insideLeftEdge - insideRightEdge;\n      this.contextGaps.total += gap;\n      this.contextGaps.gaps.push({ x1: insideRightEdge, x2: insideLeftEdge });\n\n      // Tell the tick contexts how much they can reposition themselves.\n      context.getFormatterMetrics().freedom.left = gap;\n      prevContext.getFormatterMetrics().freedom.right = gap;\n    });\n\n    // Calculate mean distance in each voice for each duration type, then calculate\n    // how far each note is from the mean.\n    const durationStats = this.durationStats = {};\n\n    function updateStats(duration, space) {\n      const stats = durationStats[duration];\n      if (stats === undefined) {\n        durationStats[duration] = { mean: space, count: 1 };\n      } else {\n        stats.count += 1;\n        stats.mean = (stats.mean + space) / 2;\n      }\n    }\n\n    this.voices.forEach(voice => {\n      voice.getTickables().forEach((note, i, notes) => {\n        const duration = note.getTicks().clone().simplify().toString();\n        const metrics = note.getMetrics();\n        const formatterMetrics = note.getFormatterMetrics();\n        const leftNoteEdge = note.getX() + metrics.noteWidth +\n          metrics.modRightPx + metrics.extraRightPx;\n        let space = 0;\n\n        if (i < (notes.length - 1)) {\n          const rightNote = notes[i + 1];\n          const rightMetrics = rightNote.getMetrics();\n          const rightNoteEdge = rightNote.getX() -\n            rightMetrics.modLeftPx - rightMetrics.extraLeftPx;\n\n          space = rightNoteEdge - leftNoteEdge;\n          formatterMetrics.space.used = rightNote.getX() - note.getX();\n          rightNote.getFormatterMetrics().freedom.left = space;\n        } else {\n          space = justifyWidth - leftNoteEdge;\n          formatterMetrics.space.used = justifyWidth - note.getX();\n        }\n\n        formatterMetrics.freedom.right = space;\n        updateStats(duration, formatterMetrics.space.used);\n      });\n    });\n\n    // Calculate how much each note deviates from the mean. Loss function is square\n    // root of the sum of squared deviations.\n    let totalDeviation = 0;\n    this.voices.forEach(voice => {\n      voice.getTickables().forEach((note) => {\n        const duration = note.getTicks().clone().simplify().toString();\n        const metrics = note.getFormatterMetrics();\n        metrics.iterations += 1;\n        metrics.space.deviation = metrics.space.used - durationStats[duration].mean;\n        metrics.duration = duration;\n        metrics.space.mean = durationStats[duration].mean;\n\n        totalDeviation += Math.pow(durationStats[duration].mean, 2);\n      });\n    });\n\n    this.totalCost = Math.sqrt(totalDeviation);\n    this.lossHistory.push(this.totalCost);\n    return this;\n  }\n\n  // Run a single iteration of rejustification. At a high level, this method calculates\n  // the overall \"loss\" (or cost) of this layout, and repositions tickcontexts in an\n  // attempt to reduce the cost. You can call this method multiple times until it finds\n  // and oscillates around a global minimum.\n  tune() {\n    const sum = (means) => means.reduce((a, b) => a + b);\n\n    // Move `current` tickcontext by `shift` pixels, and adjust the freedom\n    // on adjacent tickcontexts.\n    function move(current, prev, next, shift) {\n      current.setX(current.getX() + shift);\n      current.getFormatterMetrics().freedom.left += shift;\n      current.getFormatterMetrics().freedom.right -= shift;\n\n      if (prev) prev.getFormatterMetrics().freedom.right += shift;\n      if (next) next.getFormatterMetrics().freedom.left -= shift;\n    }\n\n    let shift = 0;\n    this.tickContexts.list.forEach((tick, index, list) => {\n      const context = this.tickContexts.map[tick];\n      const prevContext = (index > 0) ? this.tickContexts.map[list[index - 1]] : null;\n      const nextContext = (index < list.length - 1) ? this.tickContexts.map[list[index + 1]] : null;\n\n      move(context, prevContext, nextContext, shift);\n\n      const cost = -sum(\n        context.getTickables().map(t => t.getFormatterMetrics().space.deviation));\n\n      if (cost > 0) {\n        shift = -Math.min(context.getFormatterMetrics().freedom.right, Math.abs(cost));\n      } else if (cost < 0) {\n        if (nextContext) {\n          shift = Math.min(nextContext.getFormatterMetrics().freedom.right, Math.abs(cost));\n        } else {\n          shift = 0;\n        }\n      }\n\n      const minShift = Math.min(5, Math.abs(shift));\n      shift = shift > 0 ? minShift : -minShift;\n    });\n\n    return this.evaluate();\n  }\n\n  // This is the top-level call for all formatting logic completed\n  // after `x` *and* `y` values have been computed for the notes\n  // in the voices.\n  postFormat() {\n    const postFormatContexts = (contexts) =>\n      contexts.list.forEach(tick => contexts.map[tick].postFormat());\n\n    postFormatContexts(this.modiferContexts);\n    postFormatContexts(this.tickContexts);\n\n    return this;\n  }\n\n  // Take all `voices` and create `ModifierContext`s out of them. This tells\n  // the formatters that the voices belong on a single stave.\n  joinVoices(voices) {\n    this.createModifierContexts(voices);\n    this.hasMinTotalWidth = false;\n    return this;\n  }\n\n  // Align rests in voices, justify the contexts, and position the notes\n  // so voices are aligned and ready to render onto the stave. This method\n  // mutates the `x` positions of all tickables in `voices`.\n  //\n  // Voices are full justified to fit in `justifyWidth` pixels.\n  //\n  // Set `options.context` to the rendering context. Set `options.align_rests`\n  // to true to enable rest alignment.\n  format(voices, justifyWidth, options) {\n    const opts = {\n      align_rests: false,\n      context: null,\n      stave: null,\n    };\n\n    Vex.Merge(opts, options);\n    this.voices = voices;\n    this.alignRests(voices, opts.align_rests);\n    this.createTickContexts(voices);\n    this.preFormat(justifyWidth, opts.context, voices, opts.stave);\n\n    // Only postFormat if a stave was supplied for y value formatting\n    if (opts.stave) this.postFormat();\n\n    return this;\n  }\n\n  // This method is just like `format` except that the `justifyWidth` is inferred\n  // from the `stave`.\n  formatToStave(voices, stave, options) {\n    const justifyWidth = stave.getNoteEndX() - stave.getNoteStartX() - 10;\n    L('Formatting voices to width: ', justifyWidth);\n    const opts = { context: stave.getContext() };\n    Vex.Merge(opts, options);\n    return this.format(voices, justifyWidth, opts);\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n// A base class for stave modifiers (e.g. clefs, key signatures)\n\nimport { Element } from './element';\n\nexport class StaveModifier extends Element {\n  static get Position() {\n    return {\n      LEFT: 1,\n      RIGHT: 2,\n      ABOVE: 3,\n      BELOW: 4,\n      BEGIN: 5,\n      END: 6,\n    };\n  }\n\n  constructor() {\n    super();\n    this.setAttribute('type', 'StaveModifier');\n\n    this.padding = 10;\n    this.position = StaveModifier.Position.ABOVE;\n    this.layoutMetrics = null;\n  }\n\n  getPosition() { return this.position; }\n  setPosition(position) { this.position = position; return this; }\n  getStave() { return this.stave; }\n  setStave(stave) { this.stave = stave; return this; }\n  getWidth() { return this.width; }\n  setWidth(width) { this.width = width; return this; }\n  getX() { return this.x; }\n  setX(x) { this.x = x; return this; }\n  getCategory() { return ''; }\n  makeSpacer(padding) {\n    // TODO(0xfe): Return an instance of type `Spacer` based on `GhostNote`\n    // instead of this hack.\n\n    return {\n      getContext() { return true; },\n      setStave() {},\n      renderToStave() {},\n      getMetrics() {\n        return { width: padding };\n      },\n    };\n  }\n  placeGlyphOnLine(glyph, stave, line) {\n    glyph.setYShift(stave.getYForLine(line) - stave.getYForGlyphs());\n  }\n  getPadding(index) {\n    return (index !== undefined && index < 2 ? 0 : this.padding);\n  }\n  setPadding(padding) { this.padding = padding; return this; }\n  setLayoutMetrics(layoutMetrics) {\n    this.layoutMetrics = layoutMetrics;\n    return this;\n  }\n  getLayoutMetrics() {\n    return this.layoutMetrics;\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// Author Larry Kuhns 2011\n\nimport { Flow } from './tables';\nimport { StaveModifier } from './stavemodifier';\n\nexport class Barline extends StaveModifier {\n  static get CATEGORY() { return 'barlines'; }\n  static get type() {\n    return {\n      SINGLE: 1,\n      DOUBLE: 2,\n      END: 3,\n      REPEAT_BEGIN: 4,\n      REPEAT_END: 5,\n      REPEAT_BOTH: 6,\n      NONE: 7,\n    };\n  }\n\n  static get typeString() {\n    return {\n      single: Barline.type.SINGLE,\n      double: Barline.type.DOUBLE,\n      end: Barline.type.END,\n      repeatBegin: Barline.type.REPEAT_BEGIN,\n      repeatEnd: Barline.type.REPEAT_END,\n      repeatBoth: Barline.type.REPEAT_BOTH,\n      none: Barline.type.NONE,\n    };\n  }\n\n  /**\n   * @constructor\n   */\n  constructor(type) {\n    super();\n    this.setAttribute('type', 'Barline');\n    this.thickness = Flow.STAVE_LINE_THICKNESS;\n\n    const TYPE = Barline.type;\n    this.widths = {};\n    this.widths[TYPE.SINGLE] = 5;\n    this.widths[TYPE.DOUBLE] = 5;\n    this.widths[TYPE.END] = 5;\n    this.widths[TYPE.REPEAT_BEGIN] = 5;\n    this.widths[TYPE.REPEAT_END] = 5;\n    this.widths[TYPE.REPEAT_BOTH] = 5;\n    this.widths[TYPE.NONE] = 5;\n\n    this.paddings = {};\n    this.paddings[TYPE.SINGLE] = 0;\n    this.paddings[TYPE.DOUBLE] = 0;\n    this.paddings[TYPE.END] = 0;\n    this.paddings[TYPE.REPEAT_BEGIN] = 15;\n    this.paddings[TYPE.REPEAT_END] = 15;\n    this.paddings[TYPE.REPEAT_BOTH] = 15;\n    this.paddings[TYPE.NONE] = 0;\n\n    this.layoutMetricsMap = {};\n    this.layoutMetricsMap[TYPE.SINGLE] = {\n      xMin: 0,\n      xMax: 1,\n      paddingLeft: 5,\n      paddingRight: 5,\n    };\n    this.layoutMetricsMap[TYPE.DOUBLE] = {\n      xMin: -3,\n      xMax: 1,\n      paddingLeft: 5,\n      paddingRight: 5,\n    };\n    this.layoutMetricsMap[TYPE.END] = {\n      xMin: -5,\n      xMax: 1,\n      paddingLeft: 5,\n      paddingRight: 5,\n    };\n    this.layoutMetricsMap[TYPE.REPEAT_END] = {\n      xMin: -10,\n      xMax: 1,\n      paddingLeft: 5,\n      paddingRight: 5,\n    };\n    this.layoutMetricsMap[TYPE.REPEAT_BEGIN] = {\n      xMin: -2,\n      xMax: 10,\n      paddingLeft: 5,\n      paddingRight: 5,\n    };\n    this.layoutMetricsMap[TYPE.REPEAT_BOTH] = {\n      xMin: -10,\n      xMax: 10,\n      paddingLeft: 5,\n      paddingRight: 5,\n    };\n    this.layoutMetricsMap[TYPE.NONE] = {\n      xMin: 0,\n      xMax: 0,\n      paddingLeft: 5,\n      paddingRight: 5,\n    };\n    this.setPosition(StaveModifier.Position.BEGIN);\n    this.setType(type);\n  }\n  getCategory() { return Barline.CATEGORY; }\n  getType() { return this.type; }\n  setType(type) {\n    this.type = typeof(type) === 'string'\n      ? Barline.typeString[type]\n      : type;\n\n    this.setWidth(this.widths[this.type]);\n    this.setPadding(this.paddings[this.type]);\n    this.setLayoutMetrics(this.layoutMetricsMap[this.type]);\n    return this;\n  }\n\n  // Draw barlines\n  draw(stave) {\n    stave.checkContext();\n    this.setRendered();\n\n    switch (this.type) {\n      case Barline.type.SINGLE:\n        this.drawVerticalBar(stave, this.x, false);\n        break;\n      case Barline.type.DOUBLE:\n        this.drawVerticalBar(stave, this.x, true);\n        break;\n      case Barline.type.END:\n        this.drawVerticalEndBar(stave, this.x);\n        break;\n      case Barline.type.REPEAT_BEGIN:\n        // If the barline is shifted over (in front of clef/time/key)\n        // Draw vertical bar at the beginning.\n        this.drawRepeatBar(stave, this.x, true);\n        if (stave.getX() !== this.x) {\n          this.drawVerticalBar(stave, stave.getX());\n        }\n\n        break;\n      case Barline.type.REPEAT_END:\n        this.drawRepeatBar(stave, this.x, false);\n        break;\n      case Barline.type.REPEAT_BOTH:\n        this.drawRepeatBar(stave, this.x, false);\n        this.drawRepeatBar(stave, this.x, true);\n        break;\n      default:\n        // Default is NONE, so nothing to draw\n        break;\n    }\n  }\n\n  drawVerticalBar(stave, x, double_bar) {\n    stave.checkContext();\n    const topY = stave.getTopLineTopY();\n    const botY = stave.getBottomLineBottomY();\n    if (double_bar) {\n      stave.context.fillRect(x - 3, topY, 1, botY - topY);\n    }\n    stave.context.fillRect(x, topY, 1, botY - topY);\n  }\n\n  drawVerticalEndBar(stave, x) {\n    stave.checkContext();\n    const topY = stave.getTopLineTopY();\n    const botY = stave.getBottomLineBottomY();\n    stave.context.fillRect(x - 5, topY, 1, botY - topY);\n    stave.context.fillRect(x - 2, topY, 3, botY - topY);\n  }\n\n  drawRepeatBar(stave, x, begin) {\n    stave.checkContext();\n\n    const topY = stave.getTopLineTopY();\n    const botY = stave.getBottomLineBottomY();\n    let x_shift = 3;\n\n    if (!begin) {\n      x_shift = -5;\n    }\n\n    stave.context.fillRect(x + x_shift, topY, 1, botY - topY);\n    stave.context.fillRect(x - 2, topY, 3, botY - topY);\n\n    const dot_radius = 2;\n\n    // Shift dots left or right\n    if (begin) {\n      x_shift += 4;\n    } else {\n      x_shift -= 4;\n    }\n\n    const dot_x = (x + x_shift) + (dot_radius / 2);\n\n    // calculate the y offset based on number of stave lines\n    let y_offset = (stave.getNumLines() - 1) * stave.getSpacingBetweenLines();\n    y_offset = (y_offset / 2) - (stave.getSpacingBetweenLines() / 2);\n    let dot_y = topY + y_offset + (dot_radius / 2);\n\n    // draw the top repeat dot\n    stave.context.beginPath();\n    stave.context.arc(dot_x, dot_y, dot_radius, 0, Math.PI * 2, false);\n    stave.context.fill();\n\n    // draw the bottom repeat dot\n    dot_y += stave.getSpacingBetweenLines();\n    stave.context.beginPath();\n    stave.context.arc(dot_x, dot_y, dot_radius, 0, Math.PI * 2, false);\n    stave.context.fill();\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// Author Larry Kuhns 2011\n\nimport { StaveModifier } from './stavemodifier';\nimport { Glyph } from './glyph';\n\nexport class Repetition extends StaveModifier {\n  static get CATEGORY() { return 'repetitions'; }\n  static get type() {\n    return {\n      NONE: 1,         // no coda or segno\n      CODA_LEFT: 2,    // coda at beginning of stave\n      CODA_RIGHT: 3,   // coda at end of stave\n      SEGNO_LEFT: 4,   // segno at beginning of stave\n      SEGNO_RIGHT: 5,  // segno at end of stave\n      DC: 6,           // D.C. at end of stave\n      DC_AL_CODA: 7,   // D.C. al coda at end of stave\n      DC_AL_FINE: 8,   // D.C. al Fine end of stave\n      DS: 9,           // D.S. at end of stave\n      DS_AL_CODA: 10,  // D.S. al coda at end of stave\n      DS_AL_FINE: 11,  // D.S. al Fine at end of stave\n      FINE: 12,        // Fine at end of stave\n      TO_CODA: 13,     // To Coda at end of stave\n    };\n  }\n\n  constructor(type, x, y_shift) {\n    super();\n    this.setAttribute('type', 'Repetition');\n\n    this.symbol_type = type;\n    this.x = x;\n    this.x_shift = 0;\n    this.y_shift = y_shift;\n    this.font = {\n      family: 'times',\n      size: 12,\n      weight: 'bold italic',\n    };\n  }\n\n  getCategory() { return Repetition.CATEGORY; }\n  setShiftX(x) { this.x_shift = x; return this; }\n  setShiftY(y) { this.y_shift = y; return this; }\n\n  setX(x) { \n    this.x = x; return this;\n  }\n\n  draw(stave, x) {\n    this.setRendered();\n\n    switch (this.symbol_type) {\n      case Repetition.type.CODA_RIGHT:\n        this.drawCodaFixed(stave, x + stave.width);\n        break;\n      case Repetition.type.CODA_LEFT:\n        this.drawSymbolText(stave, x, 'Coda', true);\n        break;\n      case Repetition.type.SEGNO_LEFT:\n        this.drawSignoFixed(stave, x);\n        break;\n      case Repetition.type.SEGNO_RIGHT:\n        this.drawSignoFixed(stave, x + stave.width);\n        break;\n      case Repetition.type.DC:\n        this.drawSymbolText(stave, x, 'D.C.', false);\n        break;\n      case Repetition.type.DC_AL_CODA:\n        this.drawSymbolText(stave, x, 'D.C. al', true);\n        break;\n      case Repetition.type.DC_AL_FINE:\n        this.drawSymbolText(stave, x, 'D.C. al Fine', false);\n        break;\n      case Repetition.type.DS:\n        this.drawSymbolText(stave, x, 'D.S.', false);\n        break;\n      case Repetition.type.DS_AL_CODA:\n        this.drawSymbolText(stave, x, 'D.S. al', true);\n        break;\n      case Repetition.type.DS_AL_FINE:\n        this.drawSymbolText(stave, x, 'D.S. al Fine', false);\n        break;\n      case Repetition.type.FINE:\n        this.drawSymbolText(stave, x, 'Fine', false);\n        break;\n      // VexFlowPatch: added TO_CODA type, handling\n      case Repetition.type.TO_CODA:\n        this.drawSymbolText(stave, x, 'To', true);\n        break;\n      default:\n        break;\n    }\n\n    return this;\n  }\n\n  drawCodaFixed(stave, x) {\n    const y = stave.getYForTopText(stave.options.num_lines) + this.y_shift;\n    Glyph.renderGlyph(stave.context, this.x + x + this.x_shift, y + 25, 40, 'v4d', true);\n    return this;\n  }\n\n  drawSignoFixed(stave, x) {\n    const y = stave.getYForTopText(stave.options.num_lines) + this.y_shift;\n    Glyph.renderGlyph(stave.context, this.x + x + this.x_shift, y + 25, 30, 'v8c', true);\n    return this;\n  }\n\n  drawSymbolText(stave, x, text, draw_coda) {\n    const ctx = stave.checkContext();\n\n    ctx.save();\n    ctx.setFont(this.font.family, this.font.size, this.font.weight);\n    // Default to right symbol\n    let text_x = 0 + this.x_shift;\n    let symbol_x = x + this.x_shift;\n    if (this.symbol_type === Repetition.type.CODA_LEFT) {\n      // Offset Coda text to right of stave beginning\n      text_x = this.x + stave.options.vertical_bar_width;\n      symbol_x = text_x + ctx.measureText(text).width + 12;\n    } else {\n      // VexFlowPatch: fix placement, like for DS_AL_CODA\n      this.x_shift = -(text_x + ctx.measureText(text).width + 12 + stave.options.vertical_bar_width + 12);\n      // TO_CODA and DS_AL_CODA draw in the next measure without this x_shift, not sure why not for other symbols.\n      text_x = this.x + this.x_shift + stave.options.vertical_bar_width;\n      symbol_x = text_x + ctx.measureText(text).width + 12;\n    }\n    // earlier, we applied this to most elements individually, not necessary:\n    // } else if (this.symbol_type === Repetition.type.TO_CODA) {\n    //   // text_x = x + this.x + this.x_shift + stave.options.vertical_bar_width;\n    //   // symbol_x = text_x + ctx.measureText(text).width + 12;\n\n    //   // VexFlowPatch: fix placement, like for DS_AL_CODA\n    //   this.x_shift = -(text_x + ctx.measureText(text).width + 12 + stave.options.vertical_bar_width + 12);\n    //   // TO_CODA and DS_AL_CODA draw in the next measure without this x_shift, not sure why not for other symbols.\n    //   text_x = this.x + this.x_shift + stave.options.vertical_bar_width;\n    //   symbol_x = text_x + ctx.measureText(text).width + 12;\n    // } else if (this.symbol_type === Repetition.type.DS_AL_CODA) {\n    //   this.x_shift = -(text_x + ctx.measureText(text).width + 12 + stave.options.vertical_bar_width + 12);\n    //   // TO_CODA and DS_AL_CODA draw in the next measure without this x_shift, not sure why not for other symbols.\n    //   text_x = this.x + this.x_shift + stave.options.vertical_bar_width;\n    //   symbol_x = text_x + ctx.measureText(text).width + 12;\n    // } else {\n    //   // Offset Signo text to left stave end\n    //   symbol_x = this.x + x + stave.width - 5 + this.x_shift;\n    //   text_x = symbol_x - + ctx.measureText(text).width - 12;\n    // }\n\n    const y = stave.getYForTopText(stave.options.num_lines) + this.y_shift + 25;\n    if (draw_coda) {\n      Glyph.renderGlyph(ctx, symbol_x, y, 40, 'v4d', true);\n    }\n\n    ctx.fillText(text, text_x, y + 5);\n    ctx.restore();\n\n    return this;\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// Author Larry Kuhns 2011\n\nimport { StaveModifier } from './stavemodifier';\n\nexport class StaveSection extends StaveModifier {\n  static get CATEGORY() { return 'stavesection'; }\n\n  constructor(section, x, shift_y) {\n    super();\n    this.setAttribute('type', 'StaveSection');\n\n    this.setWidth(16);\n    this.section = section;\n    this.x = x;\n    this.shift_x = 0;\n    this.shift_y = shift_y;\n    this.font = {\n      family: 'sans-serif',\n      size: 12,\n      weight: 'bold',\n    };\n  }\n\n  getCategory() { return StaveSection.CATEGORY; }\n  setStaveSection(section) { this.section = section; return this; }\n  setShiftX(x) { this.shift_x = x; return this; }\n  setShiftY(y) { this.shift_y = y; return this; }\n  draw(stave, shift_x) {\n    const ctx = stave.checkContext();\n    this.setRendered();\n\n    ctx.save();\n    ctx.lineWidth = 2;\n    ctx.setFont(this.font.family, this.font.size, this.font.weight);\n    const text_measurements = ctx.measureText('' + this.section);\n    const text_width = text_measurements.width;\n    let text_height = text_measurements.height;\n    if (!text_height) {\n      text_height = text_measurements.emHeightAscent + 2; // node canvas / generateImages fix\n    }\n    let width = text_width + 6;  // add left & right padding\n    if (width < 18) width = 18;\n    const height = text_height + this.font.size / 10; // font.size / 10: padding\n    //  Seems to be a good default y\n    const y = stave.getYForTopText(3) + 19 - (height * 1.15) + this.shift_y;\n    let x = this.x + shift_x;\n    ctx.beginPath();\n    ctx.lineWidth = 2;\n    ctx.rect(x, y + text_height/4, width, height);\n    ctx.stroke();\n    x += (width - text_width) / 2;\n    ctx.fillText('' + this.section, x, y + height );\n    ctx.restore();\n    return this;\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// Author Radosaw Eichler 2012\n\nimport { Flow } from './tables';\nimport { Modifier } from './modifier';\nimport { StaveModifier } from './stavemodifier';\nimport { Glyph } from './glyph';\n\nexport class StaveTempo extends StaveModifier {\n  static get CATEGORY() { return 'stavetempo'; }\n\n  constructor(tempo, x, shift_y) {\n    super();\n    this.setAttribute('type', 'StaveTempo');\n\n    this.tempo = tempo;\n    this.position = Modifier.Position.ABOVE;\n    this.x = x;\n    this.shift_x = 10;\n    this.shift_y = shift_y;\n    this.font = {\n      family: 'times',\n      size: 14,\n      weight: 'bold',\n    };\n    this.render_options = {\n      glyph_font_scale: 30,  // font size for note\n    };\n  }\n  getCategory() { return StaveTempo.CATEGORY; }\n  setTempo(tempo) { this.tempo = tempo; return this; }\n  setShiftX(x) { this.shift_x = x; return this; }\n  setShiftY(y) { this.shift_y = y; return this; }\n\n  draw(stave, shift_x) {\n    const ctx = stave.checkContext();\n    this.setRendered();\n\n    const options = this.render_options;\n    // FIXME: What does the '38' mean? Why 38? Is that supposed to\n    // be the default font size for standard notation?\n    const scale = options.glyph_font_scale / 38;\n    const name = this.tempo.name;\n    const duration = this.tempo.duration;\n    const dots = this.tempo.dots;\n    const bpm = this.tempo.bpm;\n    const font = this.font;\n    let x = this.x + this.shift_x + shift_x;\n    const y = stave.getYForTopText(1) + this.shift_y;\n\n    ctx.save();\n\n    if (name) {\n      ctx.setFont(font.family, font.size, font.weight);\n      ctx.fillText(name, x, y);\n      x += ctx.measureText(name).width;\n    }\n\n    if (duration && bpm) {\n      ctx.setFont(font.family, font.size, 'normal');\n\n      if (name) {\n        x += ctx.measureText(' ').width;\n        ctx.fillText('(', x, y);\n        x += ctx.measureText('(').width;\n      }\n\n      const code = Flow.getGlyphProps(duration);\n\n      x += 3 * scale;\n      Glyph.renderGlyph(ctx, x, y, options.glyph_font_scale, code.code_head);\n      x += code.getWidth() * scale;\n\n      // Draw stem and flags\n      if (code.stem) {\n        let stem_height = 30;\n\n        if (code.beam_count) stem_height += 3 * (code.beam_count - 1);\n\n        stem_height *= scale;\n\n        const y_top = y - stem_height;\n        ctx.fillRect(x - scale, y_top, scale, stem_height);\n\n        if (code.flag) {\n          Glyph.renderGlyph(ctx, x, y_top, options.glyph_font_scale, code.code_flag_upstem);\n\n          if (!dots) x += 6 * scale;\n        }\n      }\n\n      // Draw dot\n      for (let i = 0; i < dots; i++) {\n        x += 6 * scale;\n        ctx.beginPath();\n        ctx.arc(x, y + 2 * scale, 2 * scale, 0, Math.PI * 2, false);\n        ctx.fill();\n      }\n\n      ctx.fillText(' = ' + bpm + (name ? ')' : ''), x + 3 * scale, y);\n    }\n\n    ctx.restore();\n    return this;\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n// `TextNote` is a notation element that is positioned in time. Generally\n// meant for objects that sit above/below the staff and inline with each other.\n// Examples of this would be such as dynamics, lyrics, chord changes, etc.\n\nimport { Vex } from './vex';\nimport { Flow } from './tables';\nimport { Note } from './note';\nimport { Glyph } from './glyph';\n\nexport class TextNote extends Note {\n  static get Justification() {\n    return {\n      LEFT: 1,\n      CENTER: 2,\n      RIGHT: 3,\n    };\n  }\n\n  // Glyph data\n  static get GLYPHS() {\n    return {\n      'segno': {\n        code: 'v8c',\n        point: 40,\n        x_shift: 0,\n        y_shift: -10,\n        // width: 10 // optional\n      },\n      'tr': {\n        code: 'v1f',\n        point: 40,\n        x_shift: 0,\n        y_shift: 0,\n        // width: 10 // optional\n      },\n      'mordent_upper': {\n        code: 'v1e',\n        point: 40,\n        x_shift: 0,\n        y_shift: 0,\n        // width: 10 // optional\n      },\n      'mordent_lower': {\n        code: 'v45',\n        point: 40,\n        x_shift: 0,\n        y_shift: 0,\n        // width: 10 // optional\n      },\n      'f': {\n        code: 'vba',\n        point: 40,\n        x_shift: 0,\n        y_shift: 0,\n        // width: 10 // optional\n      },\n      'p': {\n        code: 'vbf',\n        point: 40,\n        x_shift: 0,\n        y_shift: 0,\n        // width: 10 // optional\n      },\n      'm': {\n        code: 'v62',\n        point: 40,\n        x_shift: 0,\n        y_shift: 0,\n        // width: 10 // optional\n      },\n      's': {\n        code: 'v4a',\n        point: 40,\n        x_shift: 0,\n        y_shift: 0,\n        // width: 10 // optional\n      },\n      'z': {\n        code: 'v80',\n        point: 40,\n        x_shift: 0,\n        y_shift: 0,\n        // width: 10 // optional\n      },\n      'coda': {\n        code: 'v4d',\n        point: 40,\n        x_shift: 0,\n        y_shift: -8,\n        // width: 10 // optional\n      },\n      'pedal_open': {\n        code: 'v36',\n        point: 40,\n        x_shift: 0,\n        y_shift: 0,\n      },\n      'pedal_close': {\n        code: 'v5d',\n        point: 40,\n        x_shift: 0,\n        y_shift: 3,\n      },\n      'caesura_straight': {\n        code: 'v34',\n        point: 40,\n        x_shift: 0,\n        y_shift: 2,\n      },\n      'caesura_curved': {\n        code: 'v4b',\n        point: 40,\n        x_shift: 0,\n        y_shift: 2,\n      },\n      'breath': {\n        code: 'v6c',\n        point: 40,\n        x_shift: 0,\n        y_shift: 0,\n      },\n      'tick': {\n        code: 'v6f',\n        point: 50,\n        x_shift: 0,\n        y_shift: 0,\n      },\n      'turn': {\n        code: 'v72',\n        point: 40,\n        x_shift: 0,\n        y_shift: 0,\n      },\n      'turn_inverted': {\n        code: 'v33',\n        point: 40,\n        x_shift: 0,\n        y_shift: 0,\n      },\n\n      // DEPRECATED - please use \"mordent_upper\" or \"mordent_lower\"\n      'mordent': {\n        code: 'v1e',\n        point: 40,\n        x_shift: 0,\n        y_shift: 0,\n        // width: 10 // optional\n      },\n    };\n  }\n\n  constructor(text_struct) {\n    super(text_struct);\n    this.setAttribute('type', 'TextNote');\n\n    // Note properties\n    this.text = text_struct.text;\n    this.superscript = text_struct.superscript;\n    this.subscript = text_struct.subscript;\n    this.glyph_type = text_struct.glyph;\n    this.glyph = null;\n    this.font = {\n      family: 'Arial',\n      size: 12,\n      weight: '',\n    };\n\n    // Set font\n    if (text_struct.font) this.font = text_struct.font;\n\n    // Determine and set initial note width. Note that the text width is\n    // an approximation and isn't very accurate. The only way to accurately\n    // measure the length of text is with `canvasmeasureText()`\n    if (this.glyph_type) {\n      const struct = TextNote.GLYPHS[this.glyph_type];\n      if (!struct) throw new Vex.RERR('Invalid glyph type: ' + this.glyph_type);\n\n      this.glyph = new Glyph(struct.code, struct.point, { cache: false });\n\n      if (struct.width) {\n        this.setWidth(struct.width);\n      } else {\n        this.setWidth(this.glyph.getMetrics().width);\n      }\n\n      this.glyph_struct = struct;\n    } else {\n      this.setWidth(Flow.textWidth(this.text));\n    }\n    this.line = text_struct.line || 0;\n    this.smooth = text_struct.smooth || false;\n    this.ignore_ticks = text_struct.ignore_ticks || false;\n    this.justification = TextNote.Justification.LEFT;\n  }\n\n  // Set the horizontal justification of the TextNote\n  setJustification(just) {\n    this.justification = just;\n    return this;\n  }\n\n  // Set the Stave line on which the note should be placed\n  setLine(line) {\n    this.line = line;\n    return this;\n  }\n\n  // Pre-render formatting\n  preFormat() {\n    this.checkContext();\n\n    if (this.preFormatted) return;\n\n    if (this.smooth) {\n      this.setWidth(0);\n    } else {\n      if (this.glyph) {\n        // Width already set.\n      } else {\n        this.setWidth(this.context.measureText(this.text).width);\n      }\n    }\n\n    if (this.justification === TextNote.Justification.CENTER) {\n      this.extraLeftPx = this.width / 2;\n    } else if (this.justification === TextNote.Justification.RIGHT) {\n      this.extraLeftPx = this.width;\n    }\n\n    this.setPreFormatted(true);\n  }\n\n  // Renders the TextNote\n  draw() {\n    this.checkContext();\n\n    if (!this.stave) {\n      throw new Vex.RERR('NoStave', \"Can't draw without a stave.\");\n    }\n\n    this.setRendered();\n    const ctx = this.context;\n    let x = this.getAbsoluteX();\n    if (this.justification === TextNote.Justification.CENTER) {\n      x -= this.getWidth() / 2;\n    } else if (this.justification === TextNote.Justification.RIGHT) {\n      x -= this.getWidth();\n    }\n\n    let y;\n    if (this.glyph) {\n      y = this.stave.getYForLine(this.line + -3);\n      this.glyph.render(\n        this.context,\n        x + this.glyph_struct.x_shift,\n        y + this.glyph_struct.y_shift\n      );\n    } else {\n      y = this.stave.getYForLine(this.line + -3);\n      this.applyStyle(ctx);\n      ctx.setFont(this.font.family, this.font.size, this.font.weight);\n      ctx.fillText(this.text, x, y);\n\n      // Width of the letter M gives us the approximate height of the text\n      const height = ctx.measureText('M').width;\n      // Get accurate width of text\n      const width = ctx.measureText(this.text).width;\n\n      // Write superscript\n      if (this.superscript) {\n        ctx.setFont(this.font.family, this.font.size / 1.3, this.font.weight);\n        ctx.fillText(this.superscript, x + width + 2, y - (height / 2.2));\n      }\n\n      // Write subscript\n      if (this.subscript) {\n        ctx.setFont(this.font.family, this.font.size / 1.3, this.font.weight);\n        ctx.fillText(this.subscript, x + width + 2, y + (height / 2.2) - 1);\n      }\n\n      this.restoreStyle(ctx);\n    }\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// Author Taehoon Moon 2014\n\nimport { Vex } from './vex';\nimport { StaveModifier } from './stavemodifier';\nimport { TextNote } from './textnote';\n\nexport class StaveText extends StaveModifier {\n  static get CATEGORY() { return 'stavetext'; }\n\n  constructor(text, position, options) {\n    super();\n    this.setAttribute('type', 'StaveText');\n\n    this.setWidth(16);\n    this.text = text;\n    this.position = position;\n    this.options = {\n      shift_x: 0,\n      shift_y: 0,\n      justification: TextNote.Justification.CENTER,\n    };\n    Vex.Merge(this.options, options);\n\n    this.font = {\n      family: 'times',\n      size: 16,\n      weight: 'normal',\n    };\n  }\n\n  getCategory() { return StaveText.CATEGORY; }\n  setStaveText(text) { this.text = text; return this; }\n  setShiftX(x) { this.shift_x = x; return this; }\n  setShiftY(y) { this.shift_y = y; return this; }\n\n  setFont(font) {\n    Vex.Merge(this.font, font);\n  }\n\n  setText(text) {\n    this.text = text;\n  }\n\n  draw(stave) {\n    const ctx = stave.checkContext();\n    this.setRendered();\n\n    ctx.save();\n    ctx.lineWidth = 2;\n    ctx.setFont(this.font.family, this.font.size, this.font.weight);\n    const text_width = ctx.measureText('' + this.text).width;\n\n    let x;\n    let y;\n    const Position = StaveModifier.Position;\n    const Justification = TextNote.Justification;\n    switch (this.position) {\n      case Position.LEFT:\n      case Position.RIGHT:\n        y = (stave.getYForLine(0) + stave.getBottomLineY()) / 2 + this.options.shift_y;\n        if (this.position === Position.LEFT) {\n          x = stave.getX() - text_width - 24 + this.options.shift_x;\n        } else {\n          x = stave.getX() + stave.getWidth() + 24 + this.options.shift_x;\n        }\n        break;\n      case Position.ABOVE:\n      case Position.BELOW:\n        x = stave.getX() + this.options.shift_x;\n        if (this.options.justification === Justification.CENTER) {\n          x += stave.getWidth() / 2 - text_width / 2;\n        } else if (this.options.justification === Justification.RIGHT) {\n          x += stave.getWidth() - text_width;\n        }\n\n        if (this.position === Position.ABOVE) {\n          y = stave.getYForTopText(2) + this.options.shift_y;\n        } else {\n          y = stave.getYForBottomText(2) + this.options.shift_y;\n        }\n        break;\n      default:\n        throw new Vex.RERR('InvalidPosition', 'Value Must be in Modifier.Position.');\n    }\n\n    ctx.fillText('' + this.text, x, y + 4);\n    ctx.restore();\n    return this;\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna Cheppudira 2013.\n// Co-author: Benjamin W. Bohl\n//\n// ## Description\n//\n// This file implements various types of clefs that can be rendered on a stave.\n//\n// See `tests/clef_tests.js` for usage examples.\n\nimport { Vex } from './vex';\nimport { StaveModifier } from './stavemodifier';\nimport { Glyph } from './glyph';\n\n// To enable logging for this class, set `Vex.Flow.Clef.DEBUG` to `true`.\nfunction L(...args) { if (Clef.DEBUG) Vex.L('Vex.Flow.Clef', args); }\n\nexport class Clef extends StaveModifier {\n  static get CATEGORY() { return 'clefs'; }\n\n  // Every clef name is associated with a glyph code from the font file\n  // and a default stave line number.\n  static get types() {\n    return {\n      'treble': {\n        code: 'v83',\n        line: 3,\n      },\n      'bass': {\n        code: 'v79',\n        line: 1,\n      },\n      'alto': {\n        code: 'vad',\n        line: 2,\n      },\n      'tenor': {\n        code: 'vad',\n        line: 1,\n      },\n      'percussion': {\n        code: 'v59',\n        line: 2,\n      },\n      'soprano': {\n        code: 'vad',\n        line: 4,\n      },\n      'mezzo-soprano': {\n        code: 'vad',\n        line: 3,\n      },\n      'baritone-c': {\n        code: 'vad',\n        line: 0,\n      },\n      'baritone-f': {\n        code: 'v79',\n        line: 2,\n      },\n      'subbass': {\n        code: 'v79',\n        line: 0,\n      },\n      'french': {\n        code: 'v83',\n        line: 4,\n      },\n      'tab': {\n        code: 'v2f',\n      },\n    };\n  }\n\n  // Sizes affect the point-size of the clef.\n  static get sizes() {\n    return {\n      'default': {\n        point: 40,\n        width: 26\n      },\n      'small': {\n        point: 32,\n        width: 20,\n      },\n    };\n  }\n\n  // Annotations attach to clefs -- such as \"8\" for octave up or down.\n  static get annotations() {\n    return {\n      '8va': {\n        code: 'v8',\n        sizes: {\n          'default': {\n            point: 20,\n            attachments: {\n              'treble': {\n                line: -1.2,\n                x_shift: 11,\n              },\n            },\n          },\n          'small': {\n            point: 18,\n            attachments: {\n              'treble': {\n                line: -0.4,\n                x_shift: 8,\n              },\n            },\n          },\n        },\n      },\n      '8vb': {\n        code: 'v8',\n        sizes: {\n          'default': {\n            point: 20,\n            attachments: {\n              'treble': {\n                line: 6.3,\n                x_shift: 10,\n              },\n              'bass': {\n                line: 4,\n                x_shift: 1,\n              },\n            },\n          },\n          'small': {\n            point: 18,\n            attachments: {\n              'treble': {\n                line: 5.8,\n                x_shift: 6,\n              },\n              'bass': {\n                line: 3.5,\n                x_shift: 0.5,\n              },\n            },\n          },\n        },\n      },\n    };\n  }\n\n  // Create a new clef. The parameter `clef` must be a key from\n  // `Clef.types`.\n  constructor(type, size, annotation) {\n    super();\n    this.setAttribute('type', 'Clef');\n\n    this.setPosition(StaveModifier.Position.BEGIN);\n    this.setType(type, size, annotation);\n    this.setWidth(Clef.sizes[this.size].width);\n    L('Creating clef:', type);\n  }\n\n  getCategory() { return Clef.CATEGORY; }\n\n  setType(type, size, annotation) {\n    this.type = type;\n    this.clef = Clef.types[type];\n    if (size === undefined) {\n      this.size = 'default';\n    } else {\n      this.size = size;\n    }\n    this.clef.point = Clef.sizes[this.size].point;\n    this.glyph = new Glyph(this.clef.code, this.clef.point);\n\n    // If an annotation, such as 8va, is specified, add it to the Clef object.\n    if (annotation !== undefined) {\n      const anno_dict = Clef.annotations[annotation];\n      this.annotation = {\n        code: anno_dict.code,\n        point: anno_dict.sizes[this.size].point,\n        line: anno_dict.sizes[this.size].attachments[this.type].line,\n        x_shift: anno_dict.sizes[this.size].attachments[this.type].x_shift,\n      };\n\n      this.attachment = new Glyph(this.annotation.code, this.annotation.point);\n      this.attachment.metrics.x_max = 0;\n      this.attachment.setXShift(this.annotation.x_shift);\n    } else {\n      this.annotation = undefined;\n    }\n\n    return this;\n  }\n\n  getWidth() {\n    if (this.type === 'tab' && !this.stave) {\n      throw new Vex.RERR('ClefError', \"Can't get width without stave.\");\n    }\n\n    return this.width;\n  }\n\n  setStave(stave) {\n    this.stave = stave;\n\n    if (this.type !== 'tab') return this;\n\n    let glyphScale;\n    let glyphOffset;\n    const numLines = this.stave.getOptions().num_lines;\n    switch (numLines) {\n      case 8:\n        glyphScale = 55;\n        glyphOffset = 14;\n        break;\n      case 7:\n        glyphScale = 47;\n        glyphOffset = 8;\n        break;\n      case 6:\n        glyphScale = 40;\n        glyphOffset = 1;\n        break;\n      case 5:\n        glyphScale = 30;\n        glyphOffset = -6;\n        break;\n      case 4:\n        glyphScale = 23;\n        glyphOffset = -12;\n        break;\n      default:\n        throw new Vex.RERR('ClefError', `Invalid number of lines: ${numLines}`);\n    }\n\n    this.glyph.setPoint(glyphScale);\n    this.glyph.setYShift(glyphOffset);\n\n    return this;\n  }\n\n  draw() {\n    if (!this.x) throw new Vex.RERR('ClefError', \"Can't draw clef without x.\");\n    if (!this.stave) throw new Vex.RERR('ClefError', \"Can't draw clef without stave.\");\n    this.setRendered();\n\n    this.glyph.setStave(this.stave);\n    this.glyph.setContext(this.stave.context);\n    if (this.clef.line !== undefined) {\n      this.placeGlyphOnLine(this.glyph, this.stave, this.clef.line);\n    }\n\n    this.stave.context.openGroup(\"clef\");\n    this.glyph.renderToStave(this.x);\n\n    if (this.annotation !== undefined) {\n      this.placeGlyphOnLine(this.attachment, this.stave, this.annotation.line);\n      this.attachment.setStave(this.stave);\n      this.attachment.setContext(this.stave.context);\n      this.attachment.renderToStave(this.x);\n    }\n    this.stave.context.closeGroup();\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// Author: Cyril Silverman\n//\n// ## Description\n//\n// This file implements key signatures. A key signature sits on a stave\n// and indicates the notes with implicit accidentals.\n\nimport { Vex } from './vex';\nimport { Flow } from './tables';\nimport { StaveModifier } from './stavemodifier';\nimport { Glyph } from './glyph';\n\nexport class KeySignature extends StaveModifier {\n  static get CATEGORY() { return 'keysignatures'; }\n\n  // Space between natural and following accidental depending\n  // on vertical position\n  static get accidentalSpacing() {\n    return {\n      '#': {\n        above: 6,\n        below: 4,\n      },\n      'b': {\n        above: 4,\n        below: 7,\n      },\n      'n': {\n        above: 4,\n        below: 1,\n      },\n      '##': {\n        above: 6,\n        below: 4,\n      },\n      'bb': {\n        above: 4,\n        below: 7,\n      },\n      'db': {\n        above: 4,\n        below: 7,\n      },\n      'd': {\n        above: 4,\n        below: 7,\n      },\n      'bbs': {\n        above: 4,\n        below: 7,\n      },\n      '++': {\n        above: 6,\n        below: 4,\n      },\n      '+': {\n        above: 6,\n        below: 4,\n      },\n      '+-': {\n        above: 6,\n        below: 4,\n      },\n      '++-': {\n        above: 6,\n        below: 4,\n      },\n      'bs': {\n        above: 4,\n        below: 10,\n      },\n      'bss': {\n        above: 4,\n        below: 10,\n      },\n    };\n  }\n\n  // Create a new Key Signature based on a `key_spec`\n  constructor(keySpec, cancelKeySpec, alterKeySpec) {\n    super();\n    this.setAttribute('type', 'KeySignature');\n\n    this.setKeySig(keySpec, cancelKeySpec, alterKeySpec);\n    this.setPosition(StaveModifier.Position.BEGIN);\n    this.glyphFontScale = 38; // TODO(0xFE): Should this match StaveNote?\n    this.glyphs = [];\n    this.xPositions = []; // relative to this.x\n    this.paddingForced = false;\n  }\n\n  getCategory() { return KeySignature.CATEGORY; }\n\n  // Add an accidental glyph to the `KeySignature` instance which represents\n  // the provided `acc`. If `nextAcc` is also provided, the appropriate\n  // spacing will be included in the glyph's position\n  convertToGlyph(acc, nextAcc) {\n    const accGlyphData = Flow.accidentalCodes(acc.type);\n    const glyph = new Glyph(accGlyphData.code, this.glyphFontScale);\n\n    // Determine spacing between current accidental and the next accidental\n    let extraWidth = 1;\n    if (acc.type === 'n' && nextAcc) {\n      const spacing = KeySignature.accidentalSpacing[nextAcc.type];\n      if (spacing) {\n        const isAbove = nextAcc.line >= acc.line;\n        extraWidth = isAbove ? spacing.above : spacing.below;\n      }\n    }\n\n    // Place the glyph on the stave\n    this.placeGlyphOnLine(glyph, this.stave, acc.line);\n    this.glyphs.push(glyph);\n\n    const xPosition = this.xPositions[this.xPositions.length - 1];\n    const glyphWidth = glyph.getMetrics().width + extraWidth;\n    // Store the next accidental's x position\n    this.xPositions.push(xPosition + glyphWidth);\n    // Expand size of key signature\n    this.width += glyphWidth;\n  }\n\n  // Cancel out a key signature provided in the `spec` parameter. This will\n  // place appropriate natural accidentals before the key signature.\n  cancelKey(spec) {\n    this.formatted = false;\n    this.cancelKeySpec = spec;\n\n    return this;\n  }\n\n  convertToCancelAccList(spec) {\n    // Get the accidental list for the cancelled key signature\n    const cancel_accList = Flow.keySignature(spec);\n\n    // If the cancelled key has a different accidental type, ie: # vs b\n    const different_types = this.accList.length > 0\n      && cancel_accList.length > 0\n      && cancel_accList[0].type !== this.accList[0].type;\n\n    // Determine how many naturals needed to add\n    const naturals = different_types\n      ? cancel_accList.length\n      : cancel_accList.length - this.accList.length;\n\n    // Return if no naturals needed\n    if (naturals < 1) return undefined;\n\n    // Get the line position for each natural\n    const cancelled = [];\n    for (let i = 0; i < naturals; i++) {\n      let index = i;\n      if (!different_types) {\n        index = cancel_accList.length - naturals + i;\n      }\n\n      const acc = cancel_accList[index];\n      cancelled.push({ type: 'n', line: acc.line });\n    }\n\n    // Combine naturals with main accidental list for the key signature\n    this.accList = cancelled.concat(this.accList);\n\n    return {\n      accList: cancelled,\n      type: cancel_accList[0].type\n    };\n  }\n\n  // Deprecated\n  addToStave(stave) {\n    this.paddingForced = true;\n    stave.addModifier(this);\n\n    return this;\n  }\n\n  // Apply the accidental staff line placement based on the `clef` and\n  // the  accidental `type` for the key signature ('# or 'b').\n  convertAccLines(clef, type, accList = this.accList) {\n    let offset = 0.0; // if clef === \"treble\"\n    let customLines; // when clef doesn't follow treble key sig shape\n\n    switch (clef) {\n      // Treble & Subbass both have offsets of 0, so are not included.\n      case 'soprano':\n        if (type === '#') customLines = [2.5, 0.5, 2, 0, 1.5, -0.5, 1];\n        else offset = -1;\n        break;\n      case 'mezzo-soprano':\n        if (type === 'b') customLines = [0, 2, 0.5, 2.5, 1, 3, 1.5];\n        else offset = 1.5;\n        break;\n      case 'alto':\n        offset = 0.5;\n        break;\n      case 'tenor':\n        if (type === '#') customLines = [3, 1, 2.5, 0.5, 2, 0, 1.5];\n        else offset = -0.5;\n        break;\n      case 'baritone-f':\n      case 'baritone-c':\n        if (type === 'b') customLines = [0.5, 2.5, 1, 3, 1.5, 3.5, 2];\n        else offset = 2;\n        break;\n      case 'bass':\n      case 'french':\n        offset = 1;\n        break;\n      default:\n        break;\n    }\n\n    // If there's a special case, assign those lines/spaces:\n    let i;\n    if (typeof customLines !== 'undefined') {\n      for (i = 0; i < accList.length; ++i) {\n        accList[i].line = customLines[i];\n      }\n    } else if (offset !== 0) {\n      for (i = 0; i < accList.length; ++i) {\n        accList[i].line += offset;\n      }\n    }\n  }\n\n  getPadding(index) {\n    if (!this.formatted) this.format();\n\n    return (\n      this.glyphs.length === 0 || (!this.paddingForced && index < 2) ?\n        0 : this.padding\n    );\n  }\n\n  getWidth() {\n    if (!this.formatted) this.format();\n\n    return this.width;\n  }\n\n  setKeySig(keySpec, cancelKeySpec, alterKeySpec) {\n    this.formatted = false;\n    this.keySpec = keySpec;\n    this.cancelKeySpec = cancelKeySpec;\n    this.alterKeySpec = alterKeySpec;\n\n    return this;\n  }\n\n  // Alter the accidentals of a key spec one by one.\n  // Each alteration is a new accidental that replaces the\n  // original accidental (or the canceled one).\n  alterKey(alterKeySpec) {\n    this.formatted = false;\n    this.alterKeySpec = alterKeySpec;\n\n    return this;\n  }\n\n  convertToAlterAccList(alterKeySpec) {\n    const max = Math.min(alterKeySpec.length, this.accList.length);\n    for (let i = 0; i < max; ++i) {\n      if (alterKeySpec[i]) {\n        this.accList[i].type = alterKeySpec[i];\n      }\n    }\n  }\n\n  format() {\n    if (!this.stave) {\n      throw new Vex.RERR('KeySignatureError', \"Can't draw key signature without stave.\");\n    }\n\n    this.width = 0;\n    this.glyphs = [];\n    this.xPositions = [0]; // initialize with initial x position\n    this.accList = Flow.keySignature(this.keySpec);\n    const accList = this.accList;\n    const firstAccidentalType = accList.length > 0 ? accList[0].type : null;\n    let cancelAccList;\n    if (this.cancelKeySpec) {\n      cancelAccList = this.convertToCancelAccList(this.cancelKeySpec);\n    }\n    if (this.alterKeySpec) {\n      this.convertToAlterAccList(this.alterKeySpec);\n    }\n\n    if (this.accList.length > 0) {\n      const clef = ((this.position === StaveModifier.Position.END) ?\n        this.stave.endClef : this.stave.clef) || this.stave.clef;\n      if (cancelAccList) {\n        this.convertAccLines(clef, cancelAccList.type, cancelAccList.accList);\n      }\n      this.convertAccLines(clef, firstAccidentalType, accList);\n      for (let i = 0; i < this.accList.length; ++i) {\n        this.convertToGlyph(this.accList[i], this.accList[i + 1]);\n      }\n    }\n\n    this.formatted = true;\n  }\n\n  draw() {\n    if (!this.x) {\n      throw new Vex.RERR('KeySignatureError', \"Can't draw key signature without x.\");\n    }\n\n    if (!this.stave) {\n      throw new Vex.RERR('KeySignatureError', \"Can't draw key signature without stave.\");\n    }\n\n    if (!this.formatted) this.format();\n    this.setRendered();\n\n    if (this.glyphs.length > 0) {\n        this.stave.context.openGroup(\"keysignature\");\n        for (let i = 0; i < this.glyphs.length; i++) {\n          const glyph = this.glyphs[i];\n          const x = this.x + this.xPositions[i];\n          glyph.setStave(this.stave);\n          glyph.setContext(this.stave.context);\n          glyph.renderToStave(x);\n        }\n        this.stave.context.closeGroup();\n    }\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n// Implements time signatures glyphs for staffs\n// See tables.js for the internal time signatures\n// representation\n\nimport { Vex } from './vex';\nimport { Glyph } from './glyph';\nimport { StaveModifier } from './stavemodifier';\n\nconst assertIsValidFraction = (timeSpec) => {\n  const numbers = timeSpec.split('/').filter(number => number !== '');\n\n  if (numbers.length !== 2) {\n    throw new Vex.RERR(\n      'BadTimeSignature',\n      `Invalid time spec: ${timeSpec}. Must be in the form \"<numerator>/<denominator>\"`\n    );\n  }\n\n  numbers.forEach(number => {\n    if (isNaN(Number(number))) {\n      throw new Vex.RERR(\n        'BadTimeSignature', `Invalid time spec: ${timeSpec}. Must contain two valid numbers.`\n      );\n    }\n  });\n};\n\nexport class TimeSignature extends StaveModifier {\n  static get CATEGORY() { return 'timesignatures'; }\n\n  static get glyphs() {\n    return {\n      'C': {\n        code: 'v41',\n        point: 40,\n        line: 2,\n      },\n      'C|': {\n        code: 'vb6',\n        point: 40,\n        line: 2,\n      },\n    };\n  }\n\n  constructor(timeSpec = null, customPadding = 15, validate_args = true) {\n    super();\n    this.setAttribute('type', 'TimeSignature');\n    this.validate_args = validate_args;\n\n    if (timeSpec === null) return;\n\n    const padding = customPadding;\n\n    this.point = 40;\n    this.topLine = 2;\n    this.bottomLine = 4;\n    this.setPosition(StaveModifier.Position.BEGIN);\n    this.setTimeSig(timeSpec);\n    this.setWidth(this.timeSig.glyph.getMetrics().width);\n    this.setPadding(padding);\n  }\n\n  getCategory() { return TimeSignature.CATEGORY; }\n\n  parseTimeSpec(timeSpec) {\n    if (timeSpec === 'C' || timeSpec === 'C|') {\n      const { line, code, point } = TimeSignature.glyphs[timeSpec];\n      return {\n        line,\n        num: false,\n        glyph: new Glyph(code, point),\n      };\n    }\n\n    if (this.validate_args) {\n      assertIsValidFraction(timeSpec);\n    }\n\n    const [topDigits, botDigits] = timeSpec\n      .split('/')\n      .map(number => number.split(''));\n\n    return {\n      num: true,\n      glyph: this.makeTimeSignatureGlyph(topDigits, botDigits),\n    };\n  }\n\n  makeTimeSignatureGlyph(topDigits, botDigits) {\n    const glyph = new Glyph('v0', this.point);\n    glyph.topGlyphs = [];\n    glyph.botGlyphs = [];\n\n    let topWidth = 0;\n    for (let i = 0; i < topDigits.length; ++i) {\n      const num = topDigits[i];\n      const topGlyph = new Glyph('v' + num, this.point);\n\n      glyph.topGlyphs.push(topGlyph);\n      topWidth += topGlyph.getMetrics().width;\n    }\n\n    let botWidth = 0;\n    for (let i = 0; i < botDigits.length; ++i) {\n      const num = botDigits[i];\n      const botGlyph = new Glyph('v' + num, this.point);\n\n      glyph.botGlyphs.push(botGlyph);\n      botWidth += botGlyph.getMetrics().width;\n    }\n\n    const width = topWidth > botWidth ? topWidth : botWidth;\n    const xMin = glyph.getMetrics().x_min;\n\n    glyph.getMetrics = () => ({\n      x_min: xMin,\n      x_max: xMin + width,\n      width,\n    });\n\n    const topStartX = (width - topWidth) / 2.0;\n    const botStartX = (width - botWidth) / 2.0;\n\n    const that = this;\n    glyph.renderToStave = function renderToStave(x) {\n      let start_x = x + topStartX;\n      for (let i = 0; i < this.topGlyphs.length; ++i) {\n        const glyph = this.topGlyphs[i];\n        Glyph.renderOutline(\n          this.context,\n          glyph.metrics.outline,\n          glyph.scale,\n          start_x + glyph.x_shift,\n          this.stave.getYForLine(that.topLine)\n        );\n        start_x += glyph.getMetrics().width;\n      }\n\n      start_x = x + botStartX;\n      for (let i = 0; i < this.botGlyphs.length; ++i) {\n        const glyph = this.botGlyphs[i];\n        that.placeGlyphOnLine(glyph, this.stave, glyph.line);\n        Glyph.renderOutline(\n          this.context,\n          glyph.metrics.outline,\n          glyph.scale,\n          start_x + glyph.x_shift,\n          this.stave.getYForLine(that.bottomLine)\n        );\n        start_x += glyph.getMetrics().width;\n      }\n    };\n\n    return glyph;\n  }\n\n  getTimeSig() {\n    return this.timeSig;\n  }\n\n  setTimeSig(timeSpec) {\n    this.timeSig = this.parseTimeSpec(timeSpec);\n    return this;\n  }\n\n  draw() {\n    if (!this.x) {\n      throw new Vex.RERR('TimeSignatureError', \"Can't draw time signature without x.\");\n    }\n\n    if (!this.stave) {\n      throw new Vex.RERR('TimeSignatureError', \"Can't draw time signature without stave.\");\n    }\n\n    this.setRendered();\n    this.timeSig.glyph.setStave(this.stave);\n    this.timeSig.glyph.setContext(this.stave.context);\n    this.placeGlyphOnLine(this.timeSig.glyph, this.stave, this.timeSig.line);\n    this.timeSig.glyph.renderToStave(this.x);\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// Author Larry Kuhns 2011\n\nimport { StaveModifier } from './stavemodifier';\n\nexport class Volta extends StaveModifier {\n  static get CATEGORY() { return 'voltas'; }\n  static get type() {\n    return {\n      NONE: 1,\n      BEGIN: 2,\n      MID: 3,\n      END: 4,\n      BEGIN_END: 5,\n    };\n  }\n\n  constructor(type, number, x, y_shift) {\n    super();\n    this.setAttribute('type', 'Volta');\n    this.volta = type;\n    this.x = x;\n    this.y_shift = y_shift;\n    this.number = number;\n    this.font = {\n      family: 'sans-serif',\n      size: 9,\n      weight: 'bold',\n    };\n  }\n\n  getCategory() { return Volta.CATEGORY; }\n  setShiftY(y) { this.y_shift = y; return this; }\n\n  draw(stave, x) {\n    const ctx = stave.checkContext();\n    this.setRendered();\n\n    // VexFlowPatch: don't add x. already merged in Vexflow 3.x\n    let width = stave.width - x; // don't add x offset to width\n    const top_y = stave.getYForTopText(stave.options.num_lines) + this.y_shift;\n    const vert_height = 1.5 * stave.options.spacing_between_lines_px;\n    switch (this.volta) {\n      case Volta.type.BEGIN:\n        ctx.fillRect(this.x + x, top_y, 1, vert_height);\n        break;\n      case Volta.type.END:\n        width -= 5;\n        ctx.fillRect(this.x + x + width, top_y, 1, vert_height);\n        break;\n      case Volta.type.BEGIN_END:\n        width -= 3;\n        ctx.fillRect(this.x + x, top_y, 1, vert_height);\n        ctx.fillRect(this.x + x + width, top_y, 1, vert_height);\n        break;\n      default:\n        break;\n    }\n    // If the beginning of a volta, draw measure number\n    if (this.volta === Volta.type.BEGIN || this.volta === Volta.type.BEGIN_END) {\n      ctx.save();\n      ctx.setFont(this.font.family, this.font.size, this.font.weight);\n      ctx.fillText(this.number, this.x + x + 5, top_y + 15);\n      ctx.restore();\n    }\n\n    ctx.fillRect(this.x + x, top_y, width, 1);\n    return this;\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n\nimport { Vex } from './vex';\nimport { Element } from './element';\nimport { Flow } from './tables';\nimport { Barline } from './stavebarline';\nimport { StaveModifier } from './stavemodifier';\nimport { Repetition } from './staverepetition';\nimport { StaveSection } from './stavesection';\nimport { StaveTempo } from './stavetempo';\nimport { StaveText } from './stavetext';\nimport { BoundingBox } from './boundingbox';\nimport { Clef } from './clef';\nimport { KeySignature } from './keysignature';\nimport { TimeSignature } from './timesignature';\nimport { Volta } from './stavevolta';\n\nexport class Stave extends Element {\n  constructor(x, y, width, options) {\n    super();\n    this.setAttribute('type', 'Stave');\n\n    this.x = x;\n    this.y = y;\n    this.width = width;\n    this.formatted = false;\n    this.setStartX(x + 5);\n    // this.start_x = x + 5;\n    this.end_x = x + width;\n    this.modifiers = [];  // stave modifiers (clef, key, time, barlines, coda, segno, etc.)\n    this.measure = 0;\n    this.clef = 'treble';\n    this.endClef = undefined;\n    this.font = {\n      family: 'sans-serif',\n      size: 8,\n      weight: '',\n    };\n    this.options = {\n      vertical_bar_width: 10,       // Width around vertical bar end-marker\n      glyph_spacing_px: 10,\n      num_lines: 5,\n      fill_style: '#999999',\n      left_bar: true,               // draw vertical bar on left\n      right_bar: true,               // draw vertical bar on right\n      spacing_between_lines_px: 10, // in pixels\n      space_above_staff_ln: 4,      // in staff lines\n      space_below_staff_ln: 4,      // in staff lines\n      top_text_position: 1,          // in staff lines\n    };\n    this.bounds = { x: this.x, y: this.y, w: this.width, h: 0 };\n    Vex.Merge(this.options, options);\n\n    this.resetLines();\n\n    const BARTYPE = Barline.type;\n    // beg bar\n    this.addModifier(new Barline(this.options.left_bar ? BARTYPE.SINGLE : BARTYPE.NONE));\n    // end bar\n    this.addEndModifier(new Barline(this.options.right_bar ? BARTYPE.SINGLE : BARTYPE.NONE));\n  }\n\n  space(spacing) { return this.options.spacing_between_lines_px * spacing; }\n\n  resetLines() {\n    this.options.line_config = [];\n    for (let i = 0; i < this.options.num_lines; i++) {\n      this.options.line_config.push({ visible: true });\n    }\n    this.height = (this.options.num_lines + this.options.space_above_staff_ln) *\n      this.options.spacing_between_lines_px;\n    this.options.bottom_text_position = this.options.num_lines;\n  }\n\n  getOptions() { return this.options; }\n\n  setNoteStartX(x) {\n    if (!this.formatted) this.format();\n\n    this.setStartX(x);\n    const begBarline = this.modifiers[0];\n    begBarline.setX(this.start_x - begBarline.getWidth());\n    return this;\n  }\n  setStartX(x) {\n    this.start_x = x;\n  }\n  getNoteStartX() {\n    if (!this.formatted) this.format();\n\n    return this.start_x;\n  }\n\n  getNoteEndX() {\n    if (!this.formatted) this.format();\n\n    return this.end_x;\n  }\n  getTieStartX() { return this.start_x; }\n  getTieEndX() { return this.x + this.width; }\n  getX() { return this.x; }\n  getNumLines() { return this.options.num_lines; }\n  setNumLines(lines) {\n    this.options.num_lines = parseInt(lines, 10);\n    this.resetLines();\n    return this;\n  }\n  setY(y) { this.y = y; return this; }\n\n  getTopLineTopY() {\n    return this.getYForLine(0) - (Flow.STAVE_LINE_THICKNESS / 2);\n  }\n  getBottomLineBottomY() {\n    return this.getYForLine(this.getNumLines() - 1) + (Flow.STAVE_LINE_THICKNESS / 2);\n  }\n\n  setX(x) {\n    const shift = x - this.x;\n    this.formatted = false;\n    this.x = x;\n    this.start_x += shift;\n    this.end_x += shift;\n    for (let i = 0; i < this.modifiers.length; i++) {\n      const mod = this.modifiers[i];\n      if (mod.x !== undefined) {\n        mod.x += shift;\n      }\n    }\n    return this;\n  }\n\n  setWidth(width) {\n    this.formatted = false;\n    this.width = width;\n    this.end_x = this.x + width;\n\n    // reset the x position of the end barline (TODO(0xfe): This makes no sense)\n    // this.modifiers[1].setX(this.end_x);\n    return this;\n  }\n\n  getWidth() {\n    return this.width;\n  }\n\n  getStyle() {\n    return {\n      fillStyle: this.options.fill_style,\n      strokeStyle: this.options.fill_style, // yes, this is correct for legacy compatibility\n      lineWidth: Flow.STAVE_LINE_THICKNESS, ...this.style || {}\n    };\n  }\n\n  setMeasure(measure) { this.measure = measure; return this; }\n\n  /**\n   * Gets the pixels to shift from the beginning of the stave\n   * following the modifier at the provided index\n   * @param  {Number} index The index from which to determine the shift\n   * @return {Number}       The amount of pixels shifted\n   */\n  getModifierXShift(index = 0) {\n    if (typeof index !== 'number') {\n      throw new Vex.RERR('InvalidIndex', 'Must be of number type');\n    }\n\n    if (!this.formatted) this.format();\n\n    if (this.getModifiers(StaveModifier.Position.BEGIN).length === 1) {\n      return 0;\n    }\n\n    let start_x = this.start_x - this.x;\n    const begBarline = this.modifiers[0];\n    if (begBarline.getType() === Barline.type.REPEAT_BEGIN && start_x > begBarline.getWidth()) {\n      start_x -= begBarline.getWidth();\n    }\n\n    return start_x;\n  }\n\n  // Coda & Segno Symbol functions\n  setRepetitionTypeLeft(type, y) {\n    this.modifiers.push(new Repetition(type, this.x, y));\n    return this;\n  }\n\n  setRepetitionTypeRight(type, y) {\n    this.modifiers.push(new Repetition(type, this.x, y));\n    return this;\n  }\n\n  // Volta functions\n  setVoltaType(type, number_t, y) {\n    this.modifiers.push(new Volta(type, number_t, this.x, y));\n    return this;\n  }\n\n  // Section functions\n  setSection(section, y, xOffset = 0, fontSize = 12) {\n    const staveSection = new StaveSection(section, this.x + xOffset, y);\n    // staveSection.shift_x = xOffset; // has no effect\n    staveSection.font.size = fontSize;\n    this.modifiers.push(staveSection);\n    return this;\n  }\n\n  // Tempo functions\n  setTempo(tempo, y) {\n    this.modifiers.push(new StaveTempo(tempo, this.x, y));\n    return this;\n  }\n\n  // Text functions\n  setText(text, position, options) {\n    this.modifiers.push(new StaveText(text, position, options));\n    return this;\n  }\n\n  getHeight() {\n    return this.height;\n  }\n\n  getSpacingBetweenLines() {\n    return this.options.spacing_between_lines_px;\n  }\n\n  getBoundingBox() {\n    return new BoundingBox(this.x, this.y, this.width, this.getBottomY() - this.y);\n  }\n\n  getBottomY() {\n    const options = this.options;\n    const spacing = options.spacing_between_lines_px;\n    const score_bottom = this.getYForLine(options.num_lines) +\n      (options.space_below_staff_ln * spacing);\n\n    return score_bottom;\n  }\n\n  getBottomLineY() {\n    return this.getYForLine(this.options.num_lines);\n  }\n\n  // This returns the y for the *center* of a staff line\n  getYForLine(line) {\n    const options = this.options;\n    const spacing = options.spacing_between_lines_px;\n    const headroom = options.space_above_staff_ln;\n\n    const y = this.y + (line * spacing) + (headroom * spacing);\n\n    return y;\n  }\n\n  getLineForY(y) {\n    // Does the reverse of getYForLine - somewhat dumb and just calls\n    // getYForLine until the right value is reaches\n\n    const options = this.options;\n    const spacing = options.spacing_between_lines_px;\n    const headroom = options.space_above_staff_ln;\n    return ((y - this.y) / spacing) - headroom;\n  }\n\n  getYForTopText(line) {\n    const l = line || 0;\n    return this.getYForLine(-l - this.options.top_text_position);\n  }\n\n  getYForBottomText(line) {\n    const l = line || 0;\n    return this.getYForLine(this.options.bottom_text_position + l);\n  }\n\n  getYForNote(line) {\n    const options = this.options;\n    const spacing = options.spacing_between_lines_px;\n    const headroom = options.space_above_staff_ln;\n    const y = this.y + (headroom * spacing) + (5 * spacing) - (line * spacing);\n\n    return y;\n  }\n\n  getYForGlyphs() {\n    return this.getYForLine(3);\n  }\n\n  // This method adds a stave modifier to the stave. Note that the first two\n  // modifiers (BarLines) are automatically added upon construction.\n  addModifier(modifier, position) {\n    if (position !== undefined) {\n      modifier.setPosition(position);\n    }\n\n    modifier.setStave(this);\n    this.formatted = false;\n    this.modifiers.push(modifier);\n    return this;\n  }\n\n  addEndModifier(modifier) {\n    this.addModifier(modifier, StaveModifier.Position.END);\n    return this;\n  }\n\n  // Bar Line functions\n  setBegBarType(type) {\n    // Only valid bar types at beginning of stave is none, single or begin repeat\n    const { SINGLE, REPEAT_BEGIN, NONE } = Barline.type;\n    if (type === SINGLE || type === REPEAT_BEGIN || type === NONE) {\n      this.modifiers[0].setType(type);\n      this.formatted = false;\n    }\n    return this;\n  }\n\n  setEndBarType(type) {\n    // Repeat end not valid at end of stave\n    if (type !== Barline.type.REPEAT_BEGIN) {\n      this.modifiers[1].setType(type);\n      this.formatted = false;\n    }\n    return this;\n  }\n\n  setClef(clefSpec, size, annotation, position) {\n    if (position === undefined) {\n      position = StaveModifier.Position.BEGIN;\n    }\n\n    if (position === StaveModifier.Position.END) {\n      this.endClef = clefSpec;\n    } else {\n      this.clef = clefSpec;\n    }\n\n    const clefs = this.getModifiers(position, Clef.CATEGORY);\n    if (clefs.length === 0) {\n      this.addClef(clefSpec, size, annotation, position);\n    } else {\n      clefs[0].setType(clefSpec, size, annotation);\n    }\n\n    return this;\n  }\n\n  setEndClef(clefSpec, size, annotation) {\n    this.setClef(clefSpec, size, annotation, StaveModifier.Position.END);\n    return this;\n  }\n\n  setKeySignature(keySpec, cancelKeySpec, position) {\n    if (position === undefined) {\n      position = StaveModifier.Position.BEGIN;\n    }\n\n    const keySignatures = this.getModifiers(position, KeySignature.CATEGORY);\n    if (keySignatures.length === 0) {\n      this.addKeySignature(keySpec, cancelKeySpec, position);\n    } else {\n      keySignatures[0].setKeySig(keySpec, cancelKeySpec);\n    }\n\n    return this;\n  }\n\n  setEndKeySignature(keySpec, cancelKeySpec) {\n    this.setKeySignature(keySpec, cancelKeySpec, StaveModifier.Position.END);\n    return this;\n  }\n\n  setTimeSignature(timeSpec, customPadding, position) {\n    if (position === undefined) {\n      position = StaveModifier.Position.BEGIN;\n    }\n\n    const timeSignatures = this.getModifiers(position, TimeSignature.CATEGORY);\n    if (timeSignatures.length === 0) {\n      this.addTimeSignature(timeSpec, customPadding, position);\n    } else {\n      timeSignatures[0].setTimeSig(timeSpec);\n    }\n\n    return this;\n  }\n\n  setEndTimeSignature(timeSpec, customPadding) {\n    this.setTimeSignature(timeSpec, customPadding, StaveModifier.Position.END);\n    return this;\n  }\n\n  addKeySignature(keySpec, cancelKeySpec, position) {\n    if (position === undefined) {\n      position = StaveModifier.Position.BEGIN;\n    }\n    this.addModifier(new KeySignature(keySpec, cancelKeySpec)\n      .setPosition(position), position);\n    return this;\n  }\n\n  addClef(clef, size, annotation, position) {\n    if (position === undefined || position === StaveModifier.Position.BEGIN) {\n      this.clef = clef;\n    } else if (position === StaveModifier.Position.END) {\n      this.endClef = clef;\n    }\n\n    this.addModifier(new Clef(clef, size, annotation), position);\n    return this;\n  }\n\n  addEndClef(clef, size, annotation) {\n    this.addClef(clef, size, annotation, StaveModifier.Position.END);\n    return this;\n  }\n\n  addTimeSignature(timeSpec, customPadding, position) {\n    this.addModifier(new TimeSignature(timeSpec, customPadding), position);\n    return this;\n  }\n\n  addEndTimeSignature(timeSpec, customPadding) {\n    this.addTimeSignature(timeSpec, customPadding, StaveModifier.Position.END);\n    return this;\n  }\n\n  // Deprecated\n  addTrebleGlyph() {\n    this.addClef('treble');\n    return this;\n  }\n\n  getModifiers(position, category) {\n    if (position === undefined && category === undefined) return this.modifiers;\n\n    return this.modifiers.filter(modifier =>\n      (position === undefined || position === modifier.getPosition()) &&\n      (category === undefined || category === modifier.getCategory())\n    );\n  }\n\n  sortByCategory(items, order) {\n    for (let i = items.length - 1; i >= 0; i--) {\n      for (let j = 0; j < i; j++) {\n        if (order[items[j].getCategory()] > order[items[j + 1].getCategory()]) {\n          const temp = items[j];\n          items[j] = items[j + 1];\n          items[j + 1] = temp;\n        }\n      }\n    }\n  }\n\n  format() {\n    const begBarline = this.modifiers[0];\n    const endBarline = this.modifiers[1];\n\n    const begModifiers = this.getModifiers(StaveModifier.Position.BEGIN);\n    const endModifiers = this.getModifiers(StaveModifier.Position.END);\n\n    this.sortByCategory(begModifiers, {\n      barlines: 0, clefs: 1, keysignatures: 2, timesignatures: 3,\n    });\n\n    this.sortByCategory(endModifiers, {\n      timesignatures: 0, keysignatures: 1, barlines: 2, clefs: 3,\n    });\n\n    if (begModifiers.length > 1 &&\n      begBarline.getType() === Barline.type.REPEAT_BEGIN) {\n      begModifiers.push(begModifiers.splice(0, 1)[0]);\n      begModifiers.splice(0, 0, new Barline(Barline.type.SINGLE));\n    }\n\n    if (endModifiers.indexOf(endBarline) > 0) {\n      endModifiers.splice(0, 0, new Barline(Barline.type.NONE));\n    }\n\n    let width;\n    let padding;\n    let modifier;\n    let offset = 0;\n    let x = this.x;\n    for (let i = 0; i < begModifiers.length; i++) {\n      modifier = begModifiers[i];\n      padding = modifier.getPadding(i + offset);\n      width = modifier.getWidth();\n      // VexFlowPatch: prevent modifier width being NaN and throwing Vexflow error\n      if (isNaN(width)) {\n        modifier.setWidth(10);\n        width = 10;\n      }\n\n      x += padding;\n      modifier.setX(x);\n      x += width;\n\n      if (padding + width === 0) offset--;\n    }\n\n    this.setStartX(x);\n    // this.start_x = x;\n    x = this.x + this.width;\n\n    const widths = {\n      left: 0,\n      right: 0,\n      paddingRight: 0,\n      paddingLeft: 0,\n    };\n\n    let lastBarlineIdx = 0;\n\n    for (let i = 0; i < endModifiers.length; i++) {\n      modifier = endModifiers[i];\n      lastBarlineIdx = (modifier.getCategory() === 'barlines') ? i : lastBarlineIdx;\n\n      widths.right = 0;\n      widths.left = 0;\n      widths.paddingRight = 0;\n      widths.paddingLeft = 0;\n      const layoutMetrics = modifier.getLayoutMetrics();\n\n      if (layoutMetrics) {\n        if (i !== 0) {\n          widths.right = layoutMetrics.xMax || 0;\n          widths.paddingRight = layoutMetrics.paddingRight || 0;\n        }\n        widths.left = (-layoutMetrics.xMin) || 0;\n        widths.paddingLeft = layoutMetrics.paddingLeft || 0;\n\n        if (i === endModifiers.length - 1) {\n          widths.paddingLeft = 0;\n        }\n      } else {\n        widths.paddingRight = modifier.getPadding(i - lastBarlineIdx) || 0; // can be null too\n        if (i !== 0) {\n          widths.right = modifier.getWidth() || 0;\n        }\n        if (i === 0) {\n          widths.left = modifier.getWidth() || 0;\n        }\n      }\n      x -= widths.paddingRight;\n      x -= widths.right;\n\n      modifier.setX(x);\n\n      x -= widths.left;\n      x -= widths.paddingLeft;\n    }\n\n    this.end_x = endModifiers.length === 1 ? this.x + this.width : x;\n    this.formatted = true;\n  }\n\n  /**\n   * All drawing functions below need the context to be set.\n   */\n  draw() {\n    this.checkContext();\n    this.setRendered();\n\n    if (!this.formatted) this.format();\n\n    const num_lines = this.options.num_lines;\n    const width = this.width;\n    const x = this.x;\n    let y;\n\n    // Render lines\n    for (let line = 0; line < num_lines; line++) {\n      y = this.getYForLine(line);\n\n      this.applyStyle();\n      if (this.options.line_config[line].visible) {\n        this.context.beginPath();\n        this.context.moveTo(x, y);\n        this.context.lineTo(x + width, y);\n        this.context.stroke();\n      }\n      this.restoreStyle();\n    }\n\n    // Draw the modifiers (bar lines, coda, segno, repeat brackets, etc.)\n    for (let i = 0; i < this.modifiers.length; i++) {\n      // Only draw modifier if it has a draw function\n      if (typeof this.modifiers[i].draw === 'function') {\n        this.modifiers[i].applyStyle(this.context);\n        this.modifiers[i].draw(this, this.getModifierXShift(i));\n        this.modifiers[i].restoreStyle(this.context);\n      }\n    }\n\n    // Render measure numbers\n    if (this.measure > 0) {\n      this.context.save();\n      this.context.setFont(this.font.family, this.font.size, this.font.weight);\n      const text_width = this.context.measureText('' + this.measure).width;\n      y = this.getYForTopText(0) + 3;\n      this.context.fillText('' + this.measure, this.x - text_width / 2, y);\n      this.context.restore();\n    }\n\n    return this;\n  }\n\n  // Draw Simple barlines for backward compatability\n  // Do not delete - draws the beginning bar of the stave\n  drawVertical(x, isDouble) {\n    this.drawVerticalFixed(this.x + x, isDouble);\n  }\n\n  drawVerticalFixed(x, isDouble) {\n    this.checkContext();\n\n    const top_line = this.getYForLine(0);\n    const bottom_line = this.getYForLine(this.options.num_lines - 1);\n    if (isDouble) {\n      this.context.fillRect(x - 3, top_line, 1, bottom_line - top_line + 1);\n    }\n    this.context.fillRect(x, top_line, 1, bottom_line - top_line + 1);\n  }\n\n  drawVerticalBar(x) {\n    this.drawVerticalBarFixed(this.x + x, false);\n  }\n\n  drawVerticalBarFixed(x) {\n    this.checkContext();\n\n    const top_line = this.getYForLine(0);\n    const bottom_line = this.getYForLine(this.options.num_lines - 1);\n    this.context.fillRect(x, top_line, 1, bottom_line - top_line + 1);\n  }\n\n  /**\n   * Get the current configuration for the Stave.\n   * @return {Array} An array of configuration objects.\n   */\n  getConfigForLines() {\n    return this.options.line_config;\n  }\n\n  /**\n   * Configure properties of the lines in the Stave\n   * @param line_number The index of the line to configure.\n   * @param line_config An configuration object for the specified line.\n   * @throws Vex.RERR \"StaveConfigError\" When the specified line number is out of\n   *   range of the number of lines specified in the constructor.\n   */\n  setConfigForLine(line_number, line_config) {\n    if (line_number >= this.options.num_lines || line_number < 0) {\n      throw new Vex.RERR(\n        'StaveConfigError',\n        'The line number must be within the range of the number of lines in the Stave.'\n      );\n    }\n\n    if (line_config.visible === undefined) {\n      throw new Vex.RERR(\n        'StaveConfigError',\n        \"The line configuration object is missing the 'visible' property.\"\n      );\n    }\n\n    if (typeof (line_config.visible) !== 'boolean') {\n      throw new Vex.RERR(\n        'StaveConfigError',\n        \"The line configuration objects 'visible' property must be true or false.\"\n      );\n    }\n\n    this.options.line_config[line_number] = line_config;\n\n    return this;\n  }\n\n  /**\n   * Set the staff line configuration array for all of the lines at once.\n   * @param lines_configuration An array of line configuration objects.  These objects\n   *   are of the same format as the single one passed in to setLineConfiguration().\n   *   The caller can set null for any line config entry if it is desired that the default be used\n   * @throws Vex.RERR \"StaveConfigError\" When the lines_configuration array does not have\n   *   exactly the same number of elements as the num_lines configuration object set in\n   *   the constructor.\n   */\n  setConfigForLines(lines_configuration) {\n    if (lines_configuration.length !== this.options.num_lines) {\n      throw new Vex.RERR(\n        'StaveConfigError',\n        'The length of the lines configuration array must match the number of lines in the Stave'\n      );\n    }\n\n    // Make sure the defaults are present in case an incomplete set of\n    //  configuration options were supplied.\n    // eslint-disable-next-line\n    for (const line_config in lines_configuration) {\n      // Allow 'null' to be used if the caller just wants the default for a particular node.\n      if (!lines_configuration[line_config]) {\n        lines_configuration[line_config] = this.options.line_config[line_config];\n      }\n      Vex.Merge(this.options.line_config[line_config], lines_configuration[line_config]);\n    }\n\n    this.options.line_config = lines_configuration;\n\n    return this;\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n\nimport { Vex } from './vex';\nimport { Stave } from './stave';\n\nexport class TabStave extends Stave {\n  constructor(x, y, width, options) {\n    const tab_options = {\n      spacing_between_lines_px: 13,\n      num_lines: 6,\n      top_text_position: 1,\n    };\n\n    Vex.Merge(tab_options, options);\n    super(x, y, width, tab_options);\n    this.setAttribute('type', 'TabStave');\n  }\n\n  getYForGlyphs() {\n    return this.getYForLine(2.5);\n  }\n\n  // Deprecated\n  addTabGlyph() {\n    this.addClef('tab');\n    return this;\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n//\n// The file implements notes for Tablature notation. This consists of one or\n// more fret positions, and can either be drawn with or without stems.\n//\n// See `tests/tabnote_tests.js` for usage examples\n\nimport { Vex } from './vex';\nimport { Flow } from './tables';\nimport { Modifier } from './modifier';\nimport { Stem } from './stem';\nimport { StemmableNote } from './stemmablenote';\nimport { Dot } from './dot';\nimport { Glyph } from './glyph';\n\n// Gets the unused strings grouped together if consecutive.\n//\n// Parameters:\n// * num_lines - The number of lines\n// * strings_used - An array of numbers representing which strings have fret positions\nfunction getUnusedStringGroups(num_lines, strings_used) {\n  const stem_through = [];\n  let group = [];\n  for (let string = 1; string <= num_lines; string++) {\n    const is_used = strings_used.indexOf(string) > -1;\n\n    if (!is_used) {\n      group.push(string);\n    } else {\n      stem_through.push(group);\n      group = [];\n    }\n  }\n  if (group.length > 0) stem_through.push(group);\n\n  return stem_through;\n}\n\n// Gets groups of points that outline the partial stem lines\n// between fret positions\n//\n// Parameters:\n// * stem_Y - The `y` coordinate the stem is located on\n// * unused_strings - An array of groups of unused strings\n// * stave - The stave to use for reference\n// * stem_direction - The direction of the stem\nfunction getPartialStemLines(stem_y, unused_strings, stave, stem_direction) {\n  const up_stem = stem_direction !== 1;\n  const down_stem = stem_direction !== -1;\n\n  const line_spacing = stave.getSpacingBetweenLines();\n  const total_lines = stave.getNumLines();\n\n  const stem_lines = [];\n\n  unused_strings.forEach(strings => {\n    const containsLastString = strings.indexOf(total_lines) > -1;\n    const containsFirstString =  strings.indexOf(1) > -1;\n\n    if ((up_stem && containsFirstString) ||\n       (down_stem && containsLastString)) {\n      return;\n    }\n\n    // If there's only one string in the group, push a duplicate value.\n    // We do this because we need 2 strings to convert into upper/lower y\n    // values.\n    if (strings.length === 1) {\n      strings.push(strings[0]);\n    }\n\n    const line_ys = [];\n    // Iterate through each group string and store it's y position\n    strings.forEach((string, index, strings) => {\n      const isTopBound = string === 1;\n      const isBottomBound = string === total_lines;\n\n      // Get the y value for the appropriate staff line,\n      // we adjust for a 0 index array, since string numbers are index 1\n      let y = stave.getYForLine(string - 1);\n\n      // Unless the string is the first or last, add padding to each side\n      // of the line\n      if (index === 0 && !isTopBound) {\n        y -= line_spacing / 2 - 1;\n      } else if (index === strings.length - 1 && !isBottomBound) {\n        y += line_spacing / 2 - 1;\n      }\n\n      // Store the y value\n      line_ys.push(y);\n\n      // Store a subsequent y value connecting this group to the main\n      // stem above/below the stave if it's the top/bottom string\n      if (stem_direction === 1 && isTopBound) {\n        line_ys.push(stem_y - 2);\n      } else if (stem_direction === -1 && isBottomBound) {\n        line_ys.push(stem_y + 2);\n      }\n    });\n\n    // Add the sorted y values to the\n    stem_lines.push(line_ys.sort((a, b) => a - b));\n  });\n\n  return stem_lines;\n}\n\nexport class TabNote extends StemmableNote {\n  static get CATEGORY() { return 'tabnotes'; }\n\n  // Initialize the TabNote with a `tab_struct` full of properties\n  // and whether to `draw_stem` when rendering the note\n  constructor(tab_struct, draw_stem) {\n    super(tab_struct);\n    this.setAttribute('type', 'TabNote');\n\n    this.ghost = false; // Renders parenthesis around notes\n    // Note properties\n    //\n    // The fret positions in the note. An array of `{ str: X, fret: X }`\n    this.positions = tab_struct.positions;\n\n    // Render Options\n    Vex.Merge(this.render_options, {\n      // font size for note heads and rests\n      glyph_font_scale: Flow.DEFAULT_TABLATURE_FONT_SCALE,\n      // Flag to draw a stem\n      draw_stem,\n      // Flag to draw dot modifiers\n      draw_dots: draw_stem,\n      // Flag to extend the main stem through the stave and fret positions\n      draw_stem_through_stave: false,\n      // vertical shift from stave line\n      y_shift: 0,\n      // normal glyph scale\n      scale: 1.0,\n      // default tablature font\n      font: '10pt Arial',\n    });\n\n    this.glyph = Flow.getGlyphProps(this.duration, this.noteType);\n\n    if (!this.glyph) {\n      throw new Vex.RuntimeError(\n        'BadArguments',\n        `Invalid note initialization data (No glyph found): ${JSON.stringify(tab_struct)}`\n      );\n    }\n\n    this.buildStem();\n\n    if (tab_struct.stem_direction) {\n      this.setStemDirection(tab_struct.stem_direction);\n    } else {\n      this.setStemDirection(Stem.UP);\n    }\n\n    // Renders parenthesis around notes\n    this.ghost = false;\n    this.updateWidth();\n  }\n\n  reset() {\n    if (this.stave) this.setStave(this.stave);\n  }\n\n  // The ModifierContext category\n  getCategory() { return TabNote.CATEGORY; }\n\n  // Set as ghost `TabNote`, surrounds the fret positions with parenthesis.\n  // Often used for indicating frets that are being bent to\n  setGhost(ghost) {\n    this.ghost = ghost;\n    this.updateWidth();\n    return this;\n  }\n\n  // Determine if the note has a stem\n  hasStem() { return this.render_options.draw_stem; }\n\n  // Get the default stem extension for the note\n  getStemExtension() {\n    const glyph = this.getGlyph();\n\n    if (this.stem_extension_override != null) {\n      return this.stem_extension_override;\n    }\n\n    if (glyph) {\n      return this.getStemDirection() === 1\n        ? glyph.tabnote_stem_up_extension\n        : glyph.tabnote_stem_down_extension;\n    }\n\n    return 0;\n  }\n\n  // Add a dot to the note\n  addDot() {\n    const dot = new Dot();\n    this.dots += 1;\n    return this.addModifier(dot, 0);\n  }\n\n  // Calculate and store the width of the note\n  updateWidth() {\n    this.glyphs = [];\n    this.width = 0;\n    for (let i = 0; i < this.positions.length; ++i) {\n      let fret = this.positions[i].fret;\n      if (this.ghost) fret = '(' + fret + ')';\n      const glyph = Flow.tabToGlyph(fret, this.render_options.scale);\n      this.glyphs.push(glyph);\n      this.width = Math.max(glyph.getWidth(), this.width);\n    }\n    // For some reason we associate a notehead glyph with a TabNote, and this\n    // glyph is used for certain width calculations. Of course, this is totally\n    // incorrect since a notehead is a poor approximation for the dimensions of\n    // a fret number which can have multiple digits. As a result, we must\n    // overwrite getWidth() to return the correct width\n    this.glyph.getWidth = () => this.width;\n  }\n\n  // Set the `stave` to the note\n  setStave(stave) {\n    super.setStave(stave);\n    this.context = stave.context;\n\n    // Calculate the fret number width based on font used\n    let i;\n    if (this.context) {\n      const ctx = this.context;\n      this.width = 0;\n      for (i = 0; i < this.glyphs.length; ++i) {\n        const glyph = this.glyphs[i];\n        const text = '' + glyph.text;\n        if (text.toUpperCase() !== 'X') {\n          ctx.save();\n          ctx.setRawFont(this.render_options.font);\n          glyph.width = ctx.measureText(text).width;\n          ctx.restore();\n          glyph.getWidth = () => glyph.width;\n        }\n        this.width = Math.max(glyph.getWidth(), this.width);\n      }\n      this.glyph.getWidth = () => this.width;\n    }\n\n    // we subtract 1 from `line` because getYForLine expects a 0-based index,\n    // while the position.str is a 1-based index\n    const ys = this.positions.map(({ str: line }) => stave.getYForLine(line - 1));\n\n    this.setYs(ys);\n\n    if (this.stem) {\n      this.stem.setYBounds(this.getStemY(), this.getStemY());\n    }\n\n    return this;\n  }\n\n  // Get the fret positions for the note\n  getPositions() { return this.positions; }\n\n  // Add self to the provided modifier context `mc`\n  addToModifierContext(mc) {\n    this.setModifierContext(mc);\n    for (let i = 0; i < this.modifiers.length; ++i) {\n      this.modifierContext.addModifier(this.modifiers[i]);\n    }\n    this.modifierContext.addModifier(this);\n    this.preFormatted = false;\n    return this;\n  }\n\n  // Get the `x` coordinate to the right of the note\n  getTieRightX() {\n    let tieStartX = this.getAbsoluteX();\n    const note_glyph_width = this.glyph.getWidth();\n    tieStartX += note_glyph_width / 2;\n    tieStartX += (-this.width / 2) + this.width + 2;\n\n    return tieStartX;\n  }\n\n  // Get the `x` coordinate to the left of the note\n  getTieLeftX() {\n    let tieEndX = this.getAbsoluteX();\n    const note_glyph_width = this.glyph.getWidth();\n    tieEndX += note_glyph_width / 2;\n    tieEndX -= (this.width / 2) + 2;\n\n    return tieEndX;\n  }\n\n  // Get the default `x` and `y` coordinates for a modifier at a specific\n  // `position` at a fret position `index`\n  getModifierStartXY(position, index) {\n    if (!this.preFormatted) {\n      throw new Vex.RERR('UnformattedNote', \"Can't call GetModifierStartXY on an unformatted note\");\n    }\n\n    if (this.ys.length === 0) {\n      throw new Vex.RERR('NoYValues', 'No Y-Values calculated for this note.');\n    }\n\n    let x = 0;\n    if (position === Modifier.Position.LEFT) {\n      x = -1 * 2;  // extra_left_px\n    } else if (position === Modifier.Position.RIGHT) {\n      x = this.width + 2; // extra_right_px\n    } else if (position === Modifier.Position.BELOW || position === Modifier.Position.ABOVE) {\n      const note_glyph_width = this.glyph.getWidth();\n      x = note_glyph_width / 2;\n    }\n\n    return {\n      x: this.getAbsoluteX() + x,\n      y: this.ys[index],\n    };\n  }\n\n  // Get the default line for rest\n  getLineForRest() { return this.positions[0].str; }\n\n  // Pre-render formatting\n  preFormat() {\n    if (this.preFormatted) return;\n    if (this.modifierContext) this.modifierContext.preFormat();\n    // width is already set during init()\n    this.setPreFormatted(true);\n  }\n\n  // Get the x position for the stem\n  getStemX() { return this.getCenterGlyphX(); }\n\n  // Get the y position for the stem\n  getStemY() {\n    const num_lines = this.stave.getNumLines();\n\n    // The decimal staff line amounts provide optimal spacing between the\n    // fret number and the stem\n    const stemUpLine = -0.5;\n    const stemDownLine = num_lines - 0.5;\n    const stemStartLine = Stem.UP === this.stem_direction ? stemUpLine : stemDownLine;\n\n    return this.stave.getYForLine(stemStartLine);\n  }\n\n  // Get the stem extents for the tabnote\n  getStemExtents() {\n    return this.stem.getExtents();\n  }\n\n  // Draw the fal onto the context\n  drawFlag() {\n    const {\n      beam, glyph, context, stem, stem_direction,\n      render_options: { draw_stem, glyph_font_scale },\n    } = this;\n\n    const shouldDrawFlag = beam == null && draw_stem;\n\n    // Now it's the flag's turn.\n    if (glyph.flag && shouldDrawFlag) {\n      const flag_x = this.getStemX() + 1;\n      const flag_y = this.getStemY() - stem.getHeight();\n\n      const flag_code = stem_direction === Stem.DOWN\n        ? glyph.code_flag_downstem // Down stems have flags on the left.\n        : glyph.code_flag_upstem;\n\n      // Draw the Flag\n      Glyph.renderGlyph(context, flag_x, flag_y, glyph_font_scale, flag_code);\n    }\n  }\n\n  // Render the modifiers onto the context\n  drawModifiers() {\n    // Draw the modifiers\n    this.modifiers.forEach((modifier) => {\n      // Only draw the dots if enabled\n      if (modifier.getCategory() === 'dots' && !this.render_options.draw_dots) return;\n\n      modifier.setContext(this.context);\n      modifier.drawWithStyle();\n    });\n  }\n\n  // Render the stem extension through the fret positions\n  drawStemThrough() {\n    const stem_x = this.getStemX();\n    const stem_y = this.getStemY();\n    const ctx = this.context;\n\n    const stem_through = this.render_options.draw_stem_through_stave;\n    const draw_stem = this.render_options.draw_stem;\n    if (draw_stem && stem_through) {\n      const total_lines = this.stave.getNumLines();\n      const strings_used = this.positions.map(position => position.str);\n\n      const unused_strings = getUnusedStringGroups(total_lines, strings_used);\n      const stem_lines = getPartialStemLines(\n        stem_y,\n        unused_strings,\n        this.getStave(),\n        this.getStemDirection()\n      );\n\n      ctx.save();\n      ctx.setLineWidth(Stem.WIDTH);\n      stem_lines.forEach(bounds => {\n        if (bounds.length === 0) return;\n\n        ctx.beginPath();\n        ctx.moveTo(stem_x, bounds[0]);\n        ctx.lineTo(stem_x, bounds[bounds.length - 1]);\n        ctx.stroke();\n        ctx.closePath();\n      });\n      ctx.restore();\n    }\n  }\n\n  // Render the fret positions onto the context\n  drawPositions() {\n    const ctx = this.context;\n    const x = this.getAbsoluteX();\n    const ys = this.ys;\n    for (let i = 0; i < this.positions.length; ++i) {\n      const y = ys[i] + this.render_options.y_shift;\n      const glyph = this.glyphs[i];\n\n      // Center the fret text beneath the notation note head\n      const note_glyph_width = this.glyph.getWidth();\n      const tab_x = x + (note_glyph_width / 2) - (glyph.getWidth() / 2);\n\n      // FIXME: Magic numbers.\n      ctx.clearRect(tab_x - 2, y - 3, glyph.getWidth() + 4, 6);\n\n      if (glyph.code) {\n        Glyph.renderGlyph(ctx, tab_x, y,\n          this.render_options.glyph_font_scale * this.render_options.scale,\n          glyph.code);\n      } else {\n        ctx.save();\n        ctx.setRawFont(this.render_options.font);\n        const text = glyph.text.toString();\n        ctx.fillText(text, tab_x, y + 5 * this.render_options.scale);\n        ctx.restore();\n      }\n    }\n  }\n\n  // The main rendering function for the entire note\n  draw() {\n    this.checkContext();\n\n    if (!this.stave) {\n      throw new Vex.RERR('NoStave', \"Can't draw without a stave.\");\n    }\n\n    if (this.ys.length === 0) {\n      throw new Vex.RERR('NoYValues', \"Can't draw note without Y values.\");\n    }\n\n    this.setRendered();\n    const render_stem = this.beam == null && this.render_options.draw_stem;\n\n    // VexFlowPatch: open group for tabnote, so that the SVG DOM has a named element for tabnote, like stavenote\n    this.context.openGroup('tabnote', null, { pointerBBox: true });\n    this.drawPositions();\n    this.drawStemThrough();\n\n    const stem_x = this.getStemX();\n\n    this.stem.setNoteHeadXBounds(stem_x, stem_x);\n\n    if (render_stem) {\n      this.context.openGroup('stem', null, { pointerBBox: true });\n      this.stem.setContext(this.context).draw();\n      this.context.closeGroup();\n    }\n\n    this.drawFlag();\n    this.drawModifiers();\n    this.context.closeGroup();\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// Author: Balazs Forian-Szabo\n//\n// ## Description\n//\n// This file implements `VibratoBrackets`\n// that renders vibrato effect between two notes.\n\nimport { Vex } from './vex';\nimport { Element } from './element';\nimport { Vibrato } from './vibrato';\n\n// To enable logging for this class. Set `Vex.Flow.VibratoBracket.DEBUG` to `true`.\nfunction L(...args) { if (VibratoBracket.DEBUG) Vex.L('Vex.Flow.VibratoBracket', args); }\n\nexport class VibratoBracket extends Element {\n  // bracket_data = {\n  //   start: Vex.Flow.Note (optional)\n  //   stop: Vex.Flow.Note (optional)\n  // };\n  // Either the stop or start note must be set, or both of them.\n  // A null value for the start or stop note indicates that the vibrato\n  // is drawn from the beginning or until the end of the stave accordingly.\n  constructor(bracket_data) {\n    super();\n    this.setAttribute('type', 'VibratoBracket');\n\n    this.start = bracket_data.start;\n    this.stop = bracket_data.stop;\n\n    this.line = 1;\n\n    this.render_options = {\n      harsh: false,\n      wave_height: 6,\n      wave_width: 4,\n      wave_girth: 2,\n    };\n  }\n\n  // Set line position of the vibrato bracket\n  setLine(line) { this.line = line; return this; }\n  setHarsh(harsh) { this.render_options.harsh = harsh; return this; }\n\n  // Draw the vibrato bracket on the rendering context\n  draw() {\n    const ctx = this.context;\n    this.setRendered();\n\n    const y = (this.start)\n      ? this.start.getStave().getYForTopText(this.line)\n      : this.stop.getStave().getYForTopText(this.line);\n\n    // If start note is not set then vibrato will be drawn\n    // from the beginning of the stave\n    const start_x = (this.start)\n      ? this.start.getAbsoluteX()\n      : this.stop.getStave().getTieStartX();\n\n    // If stop note is not set then vibrato will be drawn\n    // until the end of the stave\n    const stop_x = (this.stop)\n      ? this.stop.getAbsoluteX() - this.stop.getWidth() - 5\n      : this.start.getStave().getTieEndX() - 10;\n\n    this.render_options.vibrato_width = stop_x - start_x;\n\n    L('Rendering VibratoBracket: start_x:', start_x, 'stop_x:', stop_x, 'y:', y);\n\n    Vibrato.renderVibrato(ctx, start_x, y, this.render_options);\n  }\n}\n","// VexFlow - Music Engraving for HTML5\n// Copyright Mohit Muthanna 2010\n//\n// This class implements multiple measure rests\n\nimport { Vex } from './vex';\nimport { Flow } from './tables';\nimport { Element } from './element';\nimport { Glyph } from './glyph';\nimport { NoteHead } from './notehead';\nimport { StaveModifier } from './stavemodifier';\nimport { TimeSignature } from './timesignature';\n\nlet semibrave_rest;\nfunction get_semibrave_rest() {\n  if (!semibrave_rest) {\n    const notehead = new NoteHead({ duration: 'w', note_type: 'r' });\n    semibrave_rest = {\n      glyph_font_scale: notehead.render_options.glyph_font_scale,\n      glyph_code: notehead.glyph_code,\n      width: notehead.getWidth(),\n    };\n  }\n  return semibrave_rest;\n}\n\nexport class MultiMeasureRest extends Element {\n  // Parameters:\n  // * `number_of_measures` - Number of measures.\n  // * `options` - The options object.\n  //   * `show_number` - Show number of measures string or not.\n  //   * `number_line` -  Staff line to render the number of measures string.\n  //   * `number_glyph_point` - Size of the number of measures string glyphs.\n  //   * `padding_left` - Left padding from stave x.\n  //   * `padding_right` - Right padding from stave end x.\n  //   * `line` - Staff line to render rest line or rest symbols.\n  //   * `spacing_between_lines_px` - Spacing between staff lines to\n  // resolve serif height or {2-bar and 4-bar}rest symbol height.\n  //   * `line_thickness` - Rest line thickness.\n  //   * `serif_thickness` - Rest serif line thickness.\n  //   * `use_symbols` - Use rest symbols or not.\n  //   * `symbol_spacing` - Spacing between each rest symbol glyphs.\n  //   * `semibrave_rest_glyph_scale` - Size of the semibrave(1-bar) rest symbol.\n  constructor(number_of_measures, options) {\n    super();\n    this.setAttribute('type', 'MultiMeasureRest');\n\n    this.render_options = {\n      show_number: true,\n      number_line: -0.5,\n      number_glyph_point: 40, // same as TimeSignature.\n\n      padding_left: undefined,\n      padding_right: undefined,\n\n      line: 2,\n\n      spacing_between_lines_px: 10, // same as Stave.\n\n      line_thickness: undefined,\n      serif_thickness: 2,\n\n      use_symbols: false,\n      symbol_spacing: undefined,\n\n      /* same as NoteHead. */\n      semibrave_rest_glyph_scale: Flow.DEFAULT_NOTATION_FONT_SCALE,\n    };\n    Vex.Merge(this.render_options, options);\n\n    this.number_of_measures = number_of_measures;\n    this.xs = {\n      left: NaN,\n      right: NaN,\n    };\n  }\n\n  getXs() {\n    return this.xs;\n  }\n\n  setStave(stave) {\n    this.stave = stave;\n    return this;\n  }\n\n  getStave() {\n    return this.stave;\n  }\n\n  drawLine(ctx, left, right, sbl) {\n    const y = this.stave.getYForLine(this.render_options.line);\n    const padding = (right - left) * 0.1;\n\n    left += padding;\n    right -= padding;\n\n    const serif = {\n      thickness: this.render_options.serif_thickness,\n      height: sbl,\n    };\n    let lineThicknessHalf = sbl * 0.25;\n    if (!isNaN(this.render_options.line_thickness)) {\n      lineThicknessHalf = this.render_options.line_thickness * 0.5;\n    }\n\n    ctx.save();\n    ctx.beginPath();\n    ctx.moveTo(left, y - sbl);\n    ctx.lineTo(left + serif.thickness, y - sbl);\n    ctx.lineTo(left + serif.thickness, y - lineThicknessHalf);\n    ctx.lineTo(right - serif.thickness, y - lineThicknessHalf);\n    ctx.lineTo(right - serif.thickness, y - sbl);\n    ctx.lineTo(right, y - sbl);\n    ctx.lineTo(right, y + sbl);\n    ctx.lineTo(right - serif.thickness, y + sbl);\n    ctx.lineTo(right - serif.thickness, y + lineThicknessHalf);\n    ctx.lineTo(left + serif.thickness, y + lineThicknessHalf);\n    ctx.lineTo(left + serif.thickness, y + sbl);\n    ctx.lineTo(left, y + sbl);\n    ctx.closePath();\n    ctx.fill();\n  }\n\n  drawSymbols(ctx, left, right, sbl) {\n    const n4 = Math.floor(this.number_of_measures / 4);\n    const n = this.number_of_measures % 4;\n    const n2 = Math.floor(n / 2);\n    const n1 = n % 2;\n\n    const semibrave_rest = get_semibrave_rest();\n    const semibrave_rest_width = semibrave_rest.width *\n      (this.render_options.semibrave_rest_glyph_scale / semibrave_rest.glyph_font_scale);\n    const glyphs = {\n      2: {\n        width: semibrave_rest_width * 0.5,\n        height: sbl,\n      },\n      1: {\n        width: semibrave_rest_width,\n      },\n    };\n\n    let spacing = semibrave_rest_width * 1.35;\n    if (!isNaN(this.render_options.symbol_spacing)) {\n      spacing = this.render_options.symbol_spacing;\n    }\n\n    const width = (n4 * glyphs[2].width) + (n2 * glyphs[2].width)\n      + (n1 * glyphs[1].width) + ((n4 + n2 + n1 - 1) * spacing);\n    let x = left + ((right - left) * 0.5) - (width * 0.5);\n    const yTop = this.stave.getYForLine(this.render_options.line - 1);\n    const yMiddle = this.stave.getYForLine(this.render_options.line);\n    const yBottom = this.stave.getYForLine(this.render_options.line + 1);\n\n    ctx.save();\n    ctx.setStrokeStyle('none');\n    ctx.setLineWidth(0);\n\n    for (let i = 0; i < n4; ++i) {\n      ctx.fillRect(x, yMiddle - glyphs[2].height, glyphs[2].width, glyphs[2].height);\n      ctx.fillRect(x, yBottom - glyphs[2].height, glyphs[2].width, glyphs[2].height);\n      x += glyphs[2].width + spacing;\n    }\n    for (let i = 0; i < n2; ++i) {\n      ctx.fillRect(x, yMiddle - glyphs[2].height, glyphs[2].width, glyphs[2].height);\n      x += glyphs[2].width + spacing;\n    }\n    for (let i = 0; i < n1; ++i) {\n      Glyph.renderGlyph(ctx, x, yTop, this.render_options.semibrave_rest_glyph_scale,\n        semibrave_rest.glyph_code);\n      x += glyphs[1].width + spacing;\n    }\n\n    ctx.restore();\n  }\n\n  draw() {\n    this.checkContext();\n    this.setRendered();\n\n    const ctx = this.context;\n    const stave = this.stave;\n    const sbl = this.render_options.spacing_between_lines_px;\n\n    let left = stave.getNoteStartX();\n    let right = stave.getNoteEndX();\n\n    // FIXME: getNoteStartX() returns x+5(barline width) and\n    // getNoteEndX() returns x + width(no barline width) by default. how to fix?\n    const begModifiers = stave.getModifiers(StaveModifier.Position.BEGIN);\n    if (begModifiers.length === 1 && begModifiers[0].getCategory() === 'barlines') {\n      left -= begModifiers[0].getWidth();\n    }\n\n    if (!isNaN(this.render_options.padding_left)) {\n      left = stave.getX() + this.render_options.padding_left;\n    }\n\n    if (!isNaN(this.render_options.padding_right)) {\n      right = stave.getX() + stave.getWidth() - this.render_options.padding_right;\n    }\n\n    this.xs.left = left;\n    this.xs.right = right;\n\n    if (this.render_options.use_symbols) {\n      this.drawSymbols(ctx, left, right, sbl);\n    } else {\n      this.drawLine(ctx, left, right, sbl);\n    }\n\n    if (this.render_options.show_number) {\n      const timeSpec = '/' + this.number_of_measures;\n      const timeSig = new TimeSignature(null, undefined, false);\n      timeSig.point = this.render_options.number_glyph_point;\n      timeSig.setTimeSig(timeSpec);\n      timeSig.setStave(stave);\n      timeSig.x = left + ((right - left) * 0.5) - (timeSig.timeSig.glyph.getMetrics().width * 0.5);\n      timeSig.bottomLine = this.render_options.number_line;\n      timeSig.setContext(ctx).draw();\n    }\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// Copyright Mohit Muthanna 2010\n//\n// Author Taehoon Moon 2014\n\nimport { Vex } from './vex';\nimport { Note } from './note';\nimport { Clef } from './clef';\nimport { Glyph } from './glyph';\n\n/** @constructor */\nexport class ClefNote extends Note {\n  static get CATEGORY() { return 'clefnote'; }\n\n  constructor(type, size, annotation) {\n    super({ duration: 'b' });\n    this.setAttribute('type', 'ClefNote');\n\n    this.setType(type, size, annotation);\n\n    // Note properties\n    this.ignore_ticks = true;\n  }\n\n  setType(type, size, annotation) {\n    this.type = type;\n    this.clef_obj = new Clef(type, size, annotation);\n    this.clef = this.clef_obj.clef;\n    this.glyph = new Glyph(this.clef.code, this.clef.point);\n    this.setWidth(this.glyph.getMetrics().width);\n    return this;\n  }\n\n  getClef() {\n    return this.clef;\n  }\n\n  setContext(context) {\n    this.context = context;\n    this.glyph.setContext(this.context);\n    return this;\n  }\n\n  getBoundingBox() {\n    return super.getBoundingBox();\n  }\n\n  addToModifierContext() {\n    /* overridden to ignore */\n    return this;\n  }\n\n  getCategory() { return ClefNote.CATEGORY; }\n\n  preFormat() {\n    this.setPreFormatted(true);\n    return this;\n  }\n\n  draw() {\n    if (!this.stave) throw new Vex.RERR('NoStave', \"Can't draw without a stave.\");\n\n    if (!this.glyph.getContext()) {\n      this.glyph.setContext(this.context);\n    }\n\n    this.setRendered();\n    const abs_x = this.getAbsoluteX();\n\n    this.glyph.setStave(this.stave);\n    this.glyph.setYShift(\n      this.stave.getYForLine(this.clef.line) - this.stave.getYForGlyphs());\n    this.glyph.renderToStave(abs_x);\n\n    // If the Vex.Flow.Clef has an annotation, such as 8va, draw it.\n    if (this.clef_obj.annotation !== undefined) {\n      const attachment = new Glyph(this.clef_obj.annotation.code, this.clef_obj.annotation.point);\n      if (!attachment.getContext()) {\n        attachment.setContext(this.context);\n      }\n      attachment.setStave(this.stave);\n      attachment.setYShift(\n        this.stave.getYForLine(this.clef_obj.annotation.line) - this.stave.getYForGlyphs());\n      attachment.setXShift(this.clef_obj.annotation.x_shift);\n      attachment.renderToStave(abs_x);\n    }\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// Author Mark Meeus 2019\n\nimport { Note } from './note';\nimport { KeySignature } from './keysignature';\n\nexport class KeySigNote extends Note {\n  constructor(keySpec, cancelKeySpec, alterKeySpec) {\n    super({ duration: 'b' });\n    this.setAttribute('type', 'KeySigNote');\n\n    this.keySignature = new KeySignature(keySpec, cancelKeySpec, alterKeySpec);\n\n    // Note properties\n    this.ignore_ticks = true;\n  }\n\n  getBoundingBox() {\n    return super.getBoundingBox();\n  }\n\n  addToModifierContext() {\n    /* overridden to ignore */\n    return this;\n  }\n\n  preFormat() {\n    this.setPreFormatted(true);\n    this.keySignature.setStave(this.stave);\n    this.keySignature.format();\n    this.setWidth(this.keySignature.width);\n    return this;\n  }\n\n  draw() {\n    this.stave.checkContext();\n    this.setRendered();\n    this.keySignature.x = this.getAbsoluteX();\n    this.keySignature.setContext(this.context);\n    this.keySignature.draw();\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// Author Taehoon Moon 2014\n\nimport { Note } from './note';\nimport { TimeSignature } from './timesignature';\n\nexport class TimeSigNote extends Note {\n  constructor(timeSpec, customPadding) {\n    super({ duration: 'b' });\n    this.setAttribute('type', 'TimeSigNote');\n\n    const timeSignature = new TimeSignature(timeSpec, customPadding);\n    this.timeSig = timeSignature.getTimeSig();\n    this.setWidth(this.timeSig.glyph.getMetrics().width);\n\n    // Note properties\n    this.ignore_ticks = true;\n  }\n\n  getBoundingBox() {\n    return super.getBoundingBox();\n  }\n\n  addToModifierContext() {\n    /* overridden to ignore */\n    return this;\n  }\n\n  preFormat() {\n    this.setPreFormatted(true);\n    return this;\n  }\n\n  draw() {\n    this.stave.checkContext();\n    this.setRendered();\n\n    if (!this.timeSig.glyph.getContext()) {\n      this.timeSig.glyph.setContext(this.context);\n    }\n\n    this.timeSig.glyph.setStave(this.stave);\n    this.timeSig.glyph.setYShift(\n      this.stave.getYForLine(this.timeSig.line) - this.stave.getYForGlyphs());\n    this.timeSig.glyph.renderToStave(this.getAbsoluteX());\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n// This class implements varies types of ties between contiguous notes. The\n// ties include: regular ties, hammer ons, pull offs, and slides.\n\nimport { Vex } from './vex';\nimport { TabTie } from './tabtie';\n\nexport class TabSlide extends TabTie {\n  static get SLIDE_UP() {\n    return 1;\n  }\n  static get SLIDE_DOWN() {\n    return -1;\n  }\n\n  static createSlideUp(notes) {\n    return new TabSlide(notes, TabSlide.SLIDE_UP);\n  }\n\n  static createSlideDown(notes) {\n    return new TabSlide(notes, TabSlide.SLIDE_DOWN);\n  }\n\n  constructor(notes, direction) {\n    /**\n     * Notes is a struct that has:\n     *\n     *  {\n     *    first_note: Note,\n     *    last_note: Note,\n     *    first_indices: [n1, n2, n3],\n     *    last_indices: [n1, n2, n3]\n     *  }\n     *\n     **/\n    super(notes, 'sl.');\n    this.setAttribute('type', 'TabSlide');\n\n    if (!direction) {\n      const first_fret = notes.first_note.getPositions()[0].fret;\n      const last_fret = notes.last_note.getPositions()[0].fret;\n\n      direction = ((parseInt(first_fret, 10) > parseInt(last_fret, 10)) ?\n        TabSlide.SLIDE_DOWN : TabSlide.SLIDE_UP);\n    }\n\n    this.slide_direction = direction;\n    this.render_options.cp1 = 11;\n    this.render_options.cp2 = 14;\n    this.render_options.y_shift = 0.5;\n\n    this.setFont({ font: 'Times', size: 10, style: 'bold italic' });\n    this.setNotes(notes);\n  }\n\n  renderTie(params) {\n    if (params.first_ys.length === 0 || params.last_ys.length === 0) {\n      throw new Vex.RERR('BadArguments', 'No Y-values to render');\n    }\n\n    const ctx = this.context;\n    const first_x_px = params.first_x_px;\n    const first_ys = params.first_ys;\n    const last_x_px = params.last_x_px;\n\n    const direction = this.slide_direction;\n    if (direction !== TabSlide.SLIDE_UP && direction !== TabSlide.SLIDE_DOWN) {\n      throw new Vex.RERR('BadSlide', 'Invalid slide direction');\n    }\n\n    for (let i = 0; i < this.first_indices.length; ++i) {\n      const slide_y = first_ys[this.first_indices[i]] +\n        this.render_options.y_shift;\n\n      if (isNaN(slide_y)) {\n        throw new Vex.RERR('BadArguments', 'Bad indices for slide rendering.');\n      }\n\n      ctx.beginPath();\n      ctx.moveTo(first_x_px, slide_y + (3 * direction));\n      ctx.lineTo(last_x_px, slide_y - (3 * direction));\n      ctx.closePath();\n      ctx.stroke();\n    }\n\n    this.setRendered();\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n\nimport { StaveNote } from './stavenote';\nimport { Stem } from './stem';\nimport { Flow } from './tables';\n\nexport class GraceNote extends StaveNote {\n  static get CATEGORY() { return 'gracenotes'; }\n  static get LEDGER_LINE_OFFSET() { return 2; }\n  static get SCALE() { return 0.66; }\n\n  constructor(note_struct) {\n    super(Object.assign(note_struct, {\n      glyph_font_scale: Flow.DEFAULT_NOTATION_FONT_SCALE * GraceNote.SCALE,\n      stroke_px: GraceNote.LEDGER_LINE_OFFSET,\n    }));\n    this.setAttribute('type', 'GraceNote');\n\n    this.slash = note_struct.slash;\n    this.slur = true;\n\n    this.buildNoteHeads();\n\n    this.width = 3;\n  }\n\n  getStemExtension() {\n    if (this.stem_extension_override != null) {\n      return this.stem_extension_override;\n    }\n\n    const glyph = this.getGlyph();\n    if (glyph) {\n      let ret = super.getStemExtension();\n      if (glyph.stem) {\n        const staveNoteScale = this.getStaveNoteScale();\n        ret = ((Stem.HEIGHT + ret) * staveNoteScale) - Stem.HEIGHT;\n      }\n      return ret;\n    }\n\n    return 0;\n  }\n\n  getCategory() { return GraceNote.CATEGORY; }\n\n  // FIXME: move this to more basic class.\n  getStaveNoteScale() {\n    return this.render_options.glyph_font_scale / Flow.DEFAULT_NOTATION_FONT_SCALE;\n  }\n\n  draw() {\n    super.draw();\n    this.setRendered();\n    const stem = this.stem;\n    if (this.slash && stem) {\n      const staveNoteScale = this.getStaveNoteScale();\n\n      // some magic numbers are based on the staveNoteScale 0.66.\n      const offsetScale = staveNoteScale / 0.66;\n      let slashBBox = undefined;\n      const beam = this.beam;\n      if (beam) {\n        // FIXME: should render slash after beam?\n        if (!beam.postFormatted) {\n          beam.postFormat();\n        }\n\n        slashBBox = this.calcBeamedNotesSlashBBox(8 * offsetScale,\n          8 * offsetScale,\n          {\n            stem: 6 * offsetScale,\n            beam: 5 * offsetScale,\n          });\n      } else {\n        const stem_direction = this.getStemDirection();\n        const noteHeadBounds = this.getNoteHeadBounds();\n        const noteStemHeight = stem.getHeight();\n        let x = this.getAbsoluteX();\n        let y = stem_direction === Flow.Stem.DOWN ?\n          noteHeadBounds.y_top - noteStemHeight :\n          noteHeadBounds.y_bottom - noteStemHeight;\n\n        const defaultStemExtention = stem_direction === Flow.Stem.DOWN ?\n          this.glyph.stem_down_extension :\n          this.glyph.stem_up_extension;\n\n        let defaultOffsetY = Flow.STEM_HEIGHT;\n        defaultOffsetY -= (defaultOffsetY / 2.8);\n        defaultOffsetY += defaultStemExtention;\n        y += ((defaultOffsetY * staveNoteScale) * stem_direction);\n\n        const offsets = stem_direction === Flow.Stem.UP ? {\n          x1: 1,\n          y1: 0,\n          x2: 13,\n          y2: -9,\n        } : {\n          x1: -4,\n          y1: 1,\n          x2: 13,\n          y2: 9,\n        };\n\n        x += (offsets.x1 * offsetScale);\n        y += (offsets.y1 * offsetScale);\n        slashBBox = {\n          x1: x,\n          y1: y,\n          x2: x + (offsets.x2 * offsetScale),\n          y2: y + (offsets.y2 * offsetScale),\n        };\n      }\n\n      // FIXME: avoide staff lines, leadger lines or others.\n\n      const ctx = this.context;\n      ctx.save();\n      ctx.setLineWidth(1 * offsetScale); // FIXME: use more appropriate value.\n      ctx.beginPath();\n      ctx.moveTo(slashBBox.x1, slashBBox.y1);\n      ctx.lineTo(slashBBox.x2, slashBBox.y2);\n      ctx.closePath();\n      ctx.stroke();\n      ctx.restore();\n    }\n  }\n\n  calcBeamedNotesSlashBBox(slashStemOffset, slashBeamOffset, protrusions) {\n    const beam = this.beam;\n    const beam_slope = beam.slope;\n    const isBeamEndNote = (beam.notes[beam.notes.length - 1] === this);\n    const scaleX = isBeamEndNote ? -1 : 1;\n    const beam_angle = Math.atan(beam_slope * scaleX);\n\n    // slash line intersecting point on beam.\n    const iPointOnBeam = {\n      dx: Math.cos(beam_angle) * slashBeamOffset,\n      dy: Math.sin(beam_angle) * slashBeamOffset,\n    };\n\n    slashStemOffset *= this.getStemDirection();\n    const slash_angle = Math.atan((iPointOnBeam.dy - slashStemOffset) / iPointOnBeam.dx);\n    const protrusion_stem_dx = Math.cos(slash_angle) * protrusions.stem * scaleX;\n    const protrusion_stem_dy = Math.sin(slash_angle) * protrusions.stem;\n    const protrusion_beam_dx = Math.cos(slash_angle) * protrusions.beam * scaleX;\n    const protrusion_beam_dy = Math.sin(slash_angle) * protrusions.beam;\n\n    const stemX = this.getStemX();\n    const stem0X = beam.notes[0].getStemX();\n    const stemY = this.beam.getBeamYToDraw() + ((stemX - stem0X) * beam_slope);\n\n    const ret = {\n      x1: stemX - protrusion_stem_dx,\n      y1: (stemY + slashStemOffset - protrusion_stem_dy),\n      x2: stemX + (iPointOnBeam.dx * scaleX) + protrusion_beam_dx,\n      y2: stemY + iPointOnBeam.dy + protrusion_beam_dy,\n    };\n    return ret;\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// @author Balazs Forian-Szabo\n//\n// ## Description\n//\n// A basic implementation of grace notes\n// to be rendered on a tab stave.\n//\n// See `tests/gracetabnote_tests.js` for usage examples.\n\nimport { Vex } from './vex';\nimport { TabNote } from './tabnote';\n\nexport class GraceTabNote extends TabNote {\n  static get CATEGORY() { return 'gracetabnotes'; }\n\n  constructor(note_struct) {\n    super(note_struct, false);\n    this.setAttribute('type', 'GraceTabNote');\n\n    Vex.Merge(this.render_options, {\n      // vertical shift from stave line\n      y_shift: 0.3,\n      // grace glyph scale\n      scale: 0.6,\n      // grace tablature font\n      font: '7.5pt Arial',\n    });\n\n    this.updateWidth();\n  }\n\n  getCategory() { return GraceTabNote.CATEGORY; }\n\n  draw() {\n    super.draw();\n    this.setRendered();\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n// This class implements varies types of tunings for tablature.\n\nimport { Vex } from './vex';\nimport { Flow } from './tables';\n\nexport class Tuning {\n  static get names() {\n    return {\n      'standard': 'E/5,B/4,G/4,D/4,A/3,E/3',\n      'dagdad': 'D/5,A/4,G/4,D/4,A/3,D/3',\n      'dropd': 'E/5,B/4,G/4,D/4,A/3,D/3',\n      'eb': 'Eb/5,Bb/4,Gb/4,Db/4,Ab/3,Db/3',\n      'standardBanjo': 'D/5,B/4,G/4,D/4,G/5',\n    };\n  }\n\n  constructor(tuningString = 'E/5,B/4,G/4,D/4,A/3,E/3,B/2,E/2') {\n    // Default to standard tuning.\n    this.setTuning(tuningString);\n  }\n\n  noteToInteger(noteString) {\n    return Flow.keyProperties(noteString).int_value;\n  }\n\n  setTuning(noteString) {\n    if (Tuning.names[noteString]) {\n      noteString = Tuning.names[noteString];\n    }\n\n    this.tuningString = noteString;\n    this.tuningValues = [];\n    this.numStrings = 0;\n\n    const keys = noteString.split(/\\s*,\\s*/);\n    if (keys.length === 0) {\n      throw new Vex.RERR('BadArguments', 'Invalid tuning string: ' + noteString);\n    }\n\n    this.numStrings = keys.length;\n    for (let i = 0; i < this.numStrings; ++i) {\n      this.tuningValues[i] = this.noteToInteger(keys[i]);\n    }\n  }\n\n  getValueForString(stringNum) {\n    const s = parseInt(stringNum, 10);\n    if (s < 1 || s > this.numStrings) {\n      throw new Vex.RERR(\n        'BadArguments', `String number must be between 1 and ${this.numStrings}:${stringNum}`\n      );\n    }\n\n    return this.tuningValues[s - 1];\n  }\n\n  getValueForFret(fretNum, stringNum) {\n    const stringValue = this.getValueForString(stringNum);\n    const f = parseInt(fretNum, 10);\n\n    if (f < 0) {\n      throw new Vex.RERR('BadArguments', 'Fret number must be 0 or higher: ' +\n          fretNum);\n    }\n\n    return stringValue + f;\n  }\n\n  getNoteForFret(fretNum, stringNum) {\n    const noteValue = this.getValueForFret(fretNum, stringNum);\n\n    const octave = Math.floor(noteValue / 12);\n    const value = noteValue % 12;\n\n    return Flow.integerToNote(value) + '/' + octave;\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n// This class by Raffaele Viglianti, 2012 http://itisnotsound.wordpress.com/\n//\n// This class implements hairpins between notes.\n// Hairpins can be either Crescendo or Descrescendo.\n\nimport { Vex } from './vex';\nimport { Element } from './element';\nimport { Modifier } from './modifier';\n\nexport class StaveHairpin extends Element {\n  static get type() {\n    return {\n      CRESC: 1,\n      DECRESC: 2,\n    };\n  }\n\n  /* Helper function to convert ticks into pixels.\n   * Requires a Formatter with voices joined and formatted (to\n   * get pixels per tick)\n   *\n   * options is struct that has:\n   *\n   *  {\n   *   height: px,\n   *   y_shift: px, //vertical offset\n   *   left_shift_ticks: 0, //left horizontal offset expressed in ticks\n   *   right_shift_ticks: 0 // right horizontal offset expressed in ticks\n   *  }\n   *\n   **/\n  static FormatByTicksAndDraw(ctx, formatter, notes, type, position, options) {\n    const ppt = formatter.pixelsPerTick;\n\n    if (ppt == null) {\n      throw new Vex.RuntimeError(\n        'BadArguments',\n        'A valid Formatter must be provide to draw offsets by ticks.'\n      );\n    }\n\n    const l_shift_px = ppt * options.left_shift_ticks;\n    const r_shift_px = ppt * options.right_shift_ticks;\n\n    const hairpin_options = {\n      height: options.height,\n      y_shift: options.y_shift,\n      left_shift_px: l_shift_px,\n      right_shift_px: r_shift_px };\n\n    new StaveHairpin({\n      first_note: notes.first_note,\n      last_note: notes.last_note,\n    }, type)\n      .setContext(ctx)\n      .setRenderOptions(hairpin_options)\n      .setPosition(position)\n      .draw();\n  }\n\n  /**\n   * Create a new hairpin from the specified notes.\n   *\n   * @constructor\n   * @param {!Object} notes The notes to tie up.\n   * @param {!Object} type The type of hairpin\n   */\n  constructor(notes, type) {\n    /**\n     * Notes is a struct that has:\n     *\n     *  {\n     *    first_note: Note,\n     *    last_note: Note,\n     *  }\n     *\n     **/\n    super();\n    this.setAttribute('type', 'StaveHairpin');\n    this.notes = notes;\n    this.hairpin = type;\n    this.position = Modifier.Position.BELOW;\n\n    this.render_options = {\n      height: 10,\n      y_shift: 0, // vertical offset\n      left_shift_px: 0, // left horizontal offset\n      right_shift_px: 0, // right horizontal offset\n    };\n\n    this.setNotes(notes);\n  }\n\n  setPosition(position) {\n    if (position === Modifier.Position.ABOVE || position === Modifier.Position.BELOW) {\n      this.position = position;\n    }\n    return this;\n  }\n\n  setRenderOptions(options) {\n    if (\n      options.height != null &&\n      options.y_shift != null &&\n      options.left_shift_px != null &&\n      options.right_shift_px != null\n    ) {\n      this.render_options = options;\n    }\n    return this;\n  }\n\n  /**\n   * Set the notes to attach this hairpin to.\n   *\n   * @param {!Object} notes The start and end notes.\n   */\n  setNotes(notes) {\n    if (!notes.first_note && !notes.last_note) {\n      throw new Vex.RuntimeError(\n        'BadArguments',\n        'Hairpin needs to have either first_note or last_note set.'\n      );\n    }\n\n    // Success. Lets grab 'em notes.\n    this.first_note = notes.first_note;\n    this.last_note = notes.last_note;\n    return this;\n  }\n\n  renderHairpin(params) {\n    const ctx = this.checkContext();\n    let dis = this.render_options.y_shift + 20;\n    let y_shift = params.first_y;\n\n    if (this.position === Modifier.Position.ABOVE) {\n      dis = -dis + 30;\n      y_shift = params.first_y - params.staff_height;\n    }\n\n    const l_shift = this.render_options.left_shift_px;\n    const r_shift = this.render_options.right_shift_px;\n\n    ctx.beginPath();\n\n    switch (this.hairpin) {\n      case StaveHairpin.type.CRESC:\n        ctx.moveTo(params.last_x + r_shift, y_shift + dis);\n        ctx.lineTo(params.first_x + l_shift, y_shift + (this.render_options.height / 2) + dis);\n        ctx.lineTo(params.last_x + r_shift, y_shift + this.render_options.height + dis);\n        break;\n      case StaveHairpin.type.DECRESC:\n        ctx.moveTo(params.first_x + l_shift, y_shift + dis);\n        ctx.lineTo(params.last_x + r_shift, y_shift + (this.render_options.height / 2) + dis);\n        ctx.lineTo(params.first_x + l_shift, y_shift + this.render_options.height + dis);\n        break;\n      default:\n        // Default is NONE, so nothing to draw\n        break;\n    }\n\n    ctx.stroke();\n    ctx.closePath();\n  }\n\n  draw() {\n    this.checkContext();\n    this.setRendered();\n\n    const firstNote = this.first_note;\n    const lastNote = this.last_note;\n\n    const start = firstNote.getModifierStartXY(this.position, 0);\n    const end = lastNote.getModifierStartXY(this.position, 0);\n\n    this.renderHairpin({\n      first_x: start.x,\n      last_x: end.x,\n      first_y: firstNote.getStave().y + firstNote.getStave().height,\n      last_y: lastNote.getStave().y + lastNote.getStave().height,\n      staff_height: firstNote.getStave().height,\n    });\n    return true;\n  }\n}\n","// VexFlow - Music Engraving for HTML5\n// Copyright Mohit Muthanna 2010\n//\n// This class implements curves (for slurs)\n\nimport { Vex } from './vex';\nimport { Element } from './element';\n\nexport class Curve extends Element {\n  static get Position() {\n    return {\n      NEAR_HEAD: 1,\n      NEAR_TOP: 2,\n    };\n  }\n\n  static get PositionString() {\n    return {\n      nearHead: Curve.Position.NEAR_HEAD,\n      nearTop: Curve.Position.NEAR_TOP,\n    };\n  }\n\n  // from: Start note\n  // to: End note\n  // options:\n  //    cps: List of control points\n  //    x_shift: pixels to shift\n  //    y_shift: pixels to shift\n  constructor(from, to, options) {\n    super();\n    this.setAttribute('type', 'Curve');\n\n    this.render_options = {\n      spacing: 2,\n      thickness: 2,\n      x_shift: 0,\n      y_shift: 10,\n      position: Curve.Position.NEAR_HEAD,\n      position_end: Curve.Position.NEAR_HEAD,\n      invert: false,\n      cps: [{ x: 0, y: 10 }, { x: 0, y: 10 }],\n    };\n\n    Vex.Merge(this.render_options, options);\n    this.setNotes(from, to);\n  }\n\n  setNotes(from, to) {\n    if (!from && !to) {\n      throw new Vex.RuntimeError(\n        'BadArguments', 'Curve needs to have either first_note or last_note set.'\n      );\n    }\n\n    this.from = from;\n    this.to = to;\n    return this;\n  }\n\n  /**\n   * @return {boolean} Returns true if this is a partial bar.\n   */\n  isPartial() {\n    return (!this.from || !this.to);\n  }\n\n  renderCurve(params) {\n    const ctx = this.context;\n    const cps = this.render_options.cps;\n\n    const x_shift = this.render_options.x_shift;\n    const y_shift = this.render_options.y_shift * params.direction;\n\n    const first_x = params.first_x + x_shift;\n    const first_y = params.first_y + y_shift;\n    const last_x = params.last_x - x_shift;\n    const last_y = params.last_y + y_shift;\n    const thickness = this.render_options.thickness;\n\n    const cp_spacing = (last_x - first_x) / (cps.length + 2);\n\n    ctx.beginPath();\n    ctx.moveTo(first_x, first_y);\n    ctx.bezierCurveTo(\n      first_x + cp_spacing + cps[0].x,\n      first_y + (cps[0].y * params.direction),\n      last_x - cp_spacing + cps[1].x,\n      last_y + (cps[1].y * params.direction),\n      last_x,\n      last_y\n    );\n    ctx.bezierCurveTo(\n      last_x - cp_spacing + cps[1].x,\n      last_y + ((cps[1].y + thickness) * params.direction),\n      first_x + cp_spacing + cps[0].x,\n      first_y + ((cps[0].y + thickness) * params.direction),\n      first_x,\n      first_y\n    );\n    ctx.stroke();\n    ctx.closePath();\n    ctx.fill();\n  }\n\n  draw() {\n    this.checkContext();\n    this.setRendered();\n\n    const first_note = this.from;\n    const last_note = this.to;\n    let first_x;\n    let last_x;\n    let first_y;\n    let last_y;\n    let stem_direction;\n\n    let metric = 'baseY';\n    let end_metric = 'baseY';\n\n    function getPosition(position) {\n      return typeof(position) === 'string'\n        ? Curve.PositionString[position]\n        : position;\n    }\n    const position = getPosition(this.render_options.position);\n    const position_end = getPosition(this.render_options.position_end);\n\n    if (position === Curve.Position.NEAR_TOP) {\n      metric = 'topY';\n      end_metric = 'topY';\n    }\n\n    if (position_end === Curve.Position.NEAR_HEAD) {\n      end_metric = 'baseY';\n    } else if (position_end === Curve.Position.NEAR_TOP) {\n      end_metric = 'topY';\n    }\n\n    if (first_note) {\n      first_x = first_note.getTieRightX();\n      stem_direction = first_note.getStemDirection();\n      first_y = first_note.getStemExtents()[metric];\n    } else {\n      first_x = last_note.getStave().getTieStartX();\n      first_y = last_note.getStemExtents()[metric];\n    }\n\n    if (last_note) {\n      last_x = last_note.getTieLeftX();\n      stem_direction = last_note.getStemDirection();\n      last_y = last_note.getStemExtents()[end_metric];\n    } else {\n      last_x = first_note.getStave().getTieEndX();\n      last_y = first_note.getStemExtents()[end_metric];\n    }\n\n    this.renderCurve({\n      first_x,\n      last_x,\n      first_y,\n      last_y,\n      direction: stem_direction * (this.render_options.invert === true ? -1 : 1),\n    });\n    return true;\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n// This file implements the `TextDynamics` which renders traditional\n// text dynamics markings, **ie: p, f, sfz, rfz, ppp**\n//\n// You can render any dynamics string that contains a combination of\n// the following letters:  P, M, F, Z, R, S\n\nimport { Vex } from './vex';\nimport { Note } from './note';\nimport { Glyph } from './glyph';\n\n// To enable logging for this class. Set `Vex.Flow.TextDynamics.DEBUG` to `true`.\nfunction L(...args) { if (TextDynamics.DEBUG) Vex.L('Vex.Flow.TextDynamics', args); }\n\nexport class TextDynamics extends Note {\n  // The glyph data for each dynamics letter\n  static get GLYPHS() {\n    return {\n      'f': {\n        code: 'vba',\n        width: 12,\n      },\n      'p': {\n        code: 'vbf',\n        width: 14,\n      },\n      'm': {\n        code: 'v62',\n        width: 17,\n      },\n      's': {\n        code: 'v4a',\n        width: 10,\n      },\n      'z': {\n        code: 'v80',\n        width: 12,\n      },\n      'r': {\n        code: 'vb1',\n        width: 12,\n      },\n    };\n  }\n\n  // A `TextDynamics` object inherits from `Note` so that it can be formatted\n  // within a `Voice`.\n  // Create the dynamics marking. `text_struct` is an object\n  // that contains a `duration` property and a `sequence` of\n  // letters that represents the letters to render\n  constructor(text_struct) {\n    super(text_struct);\n    this.setAttribute('type', 'TextDynamics');\n\n    this.sequence = text_struct.text.toLowerCase();\n    this.line = text_struct.line || 0;\n    this.glyphs = [];\n\n    Vex.Merge(this.render_options, {\n      glyph_font_size: 40,\n    });\n\n    L('New Dynamics Text: ', this.sequence);\n  }\n\n  // Set the Stave line on which the note should be placed\n  setLine(line) {\n    this.line = line;\n    return this;\n  }\n\n  // Preformat the dynamics text\n  preFormat() {\n    let total_width = 0;\n    // Iterate through each letter\n    this.sequence.split('').forEach(letter => {\n      // Get the glyph data for the letter\n      const glyph_data = TextDynamics.GLYPHS[letter];\n      if (!glyph_data) throw new Vex.RERR('Invalid dynamics character: ' + letter);\n\n      const size =  this.render_options.glyph_font_size;\n      const glyph = new Glyph(glyph_data.code, size);\n\n      // Add the glyph\n      this.glyphs.push(glyph);\n\n      total_width += glyph_data.width;\n    });\n\n    // Store the width of the text\n    this.setWidth(total_width);\n    this.preFormatted = true;\n    return this;\n  }\n\n  // Draw the dynamics text on the rendering context\n  draw() {\n    this.setRendered();\n    const x = this.getAbsoluteX();\n    const y = this.stave.getYForLine(this.line + (-3));\n\n    L('Rendering Dynamics: ', this.sequence);\n\n    let letter_x = x;\n    this.glyphs.forEach((glyph, index) => {\n      const current_letter = this.sequence[index];\n      glyph.render(this.context, letter_x, y);\n      letter_x += TextDynamics.GLYPHS[current_letter].width;\n    });\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n//\n// This file implements `StaveLine` which are simply lines that connect\n// two notes. This object is highly configurable, see the `render_options`.\n// A simple line is often used for notating glissando articulations, but you\n// can format a `StaveLine` with arrows or colors for more pedagogical\n// purposes, such as diagrams.\nimport { Vex } from './vex';\nimport { Element } from './element';\nimport { Flow } from './tables';\n\n// Attribution: Arrow rendering implementations based off of\n// Patrick Horgan's article, \"Drawing lines and arcs with\n// arrow heads on  HTML5 Canvas\"\n//\n// Draw an arrow head that connects between 3 coordinates\nfunction drawArrowHead(ctx, x0, y0, x1, y1, x2, y2) {\n  // all cases do this.\n  ctx.beginPath();\n  ctx.moveTo(x0, y0);\n  ctx.lineTo(x1, y1);\n  ctx.lineTo(x2, y2);\n  ctx.lineTo(x0, y0);\n  ctx.closePath();\n\n  ctx.fill();\n}\n\n// Helper function to draw a line with arrow heads\nfunction drawArrowLine(ctx, point1, point2, config) {\n  const both_arrows = config.draw_start_arrow && config.draw_end_arrow;\n\n  const x1 = point1.x;\n  const y1 = point1.y;\n  const x2 = point2.x;\n  const y2 = point2.y;\n\n  // For ends with arrow we actually want to stop before we get to the arrow\n  // so that wide lines won't put a flat end on the arrow.\n  const distance = Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));\n  const ratio = (distance - config.arrowhead_length / 3) / distance;\n  let end_x;\n  let end_y;\n  let start_x;\n  let start_y;\n  if (config.draw_end_arrow || both_arrows) {\n    end_x = Math.round(x1 + (x2 - x1) * ratio);\n    end_y = Math.round(y1 + (y2 - y1) * ratio);\n  } else {\n    end_x = x2;\n    end_y = y2;\n  }\n\n  if (config.draw_start_arrow || both_arrows) {\n    start_x = x1 + (x2 - x1) * (1 - ratio);\n    start_y = y1 + (y2 - y1) * (1 - ratio);\n  } else {\n    start_x = x1;\n    start_y = y1;\n  }\n\n  if (config.color) {\n    ctx.setStrokeStyle(config.color);\n    ctx.setFillStyle(config.color);\n  }\n\n  // Draw the shaft of the arrow\n  ctx.beginPath();\n  ctx.moveTo(start_x, start_y);\n  ctx.lineTo(end_x, end_y);\n  ctx.stroke();\n  ctx.closePath();\n\n  // calculate the angle of the line\n  const line_angle = Math.atan2(y2 - y1, x2 - x1);\n  // h is the line length of a side of the arrow head\n  const h = Math.abs(config.arrowhead_length / Math.cos(config.arrowhead_angle));\n\n  let angle1;\n  let angle2;\n  let top_x;\n  let top_y;\n  let bottom_x;\n  let bottom_y;\n\n  if (config.draw_end_arrow || both_arrows) {\n    angle1 = line_angle + Math.PI + config.arrowhead_angle;\n    top_x = x2 + Math.cos(angle1) * h;\n    top_y = y2 + Math.sin(angle1) * h;\n\n    angle2 = line_angle + Math.PI - config.arrowhead_angle;\n    bottom_x = x2 + Math.cos(angle2) * h;\n    bottom_y = y2 + Math.sin(angle2) * h;\n\n    drawArrowHead(ctx, top_x, top_y, x2, y2, bottom_x, bottom_y);\n  }\n\n  if (config.draw_start_arrow || both_arrows) {\n    angle1 = line_angle + config.arrowhead_angle;\n    top_x = x1 + Math.cos(angle1) * h;\n    top_y = y1 + Math.sin(angle1) * h;\n\n    angle2 = line_angle - config.arrowhead_angle;\n    bottom_x = x1 + Math.cos(angle2) * h;\n    bottom_y = y1 + Math.sin(angle2) * h;\n\n    drawArrowHead(ctx, top_x, top_y, x1, y1, bottom_x, bottom_y);\n  }\n}\n\nexport class StaveLine extends Element {\n  // Text Positioning\n  static get TextVerticalPosition() {\n    return {\n      TOP: 1,\n      BOTTOM: 2,\n    };\n  }\n\n  static get TextJustification() {\n    return {\n      LEFT: 1,\n      CENTER: 2,\n      RIGHT: 3,\n    };\n  }\n\n  // Initialize the StaveLine with the given `notes`.\n  //\n  // `notes` is a struct that has:\n  //\n  //  ```\n  //  {\n  //    first_note: Note,\n  //    last_note: Note,\n  //    first_indices: [n1, n2, n3],\n  //    last_indices: [n1, n2, n3]\n  //  }\n  //  ```\n  constructor(notes) {\n    super();\n    this.setAttribute('type', 'StaveLine');\n\n    this.notes = notes;\n\n    this.text = '';\n\n    this.font = {\n      family: 'Arial',\n      size: 10,\n      weight: '',\n    };\n\n    this.render_options = {\n      // Space to add to the left or the right\n      padding_left: 4,\n      padding_right: 3,\n\n      // The width of the line in pixels\n      line_width: 1,\n      // An array of line/space lengths. Unsupported with Raphael (SVG)\n      line_dash: null,\n      // Can draw rounded line end, instead of a square. Unsupported with Raphael (SVG)\n      rounded_end: true,\n      // The color of the line and arrowheads\n      color: null,\n\n      // Flags to draw arrows on each end of the line\n      draw_start_arrow: false,\n      draw_end_arrow: false,\n\n      // The length of the arrowhead sides\n      arrowhead_length: 10,\n      // The angle of the arrowhead\n      arrowhead_angle: Math.PI / 8,\n\n      // The position of the text\n      text_position_vertical: StaveLine.TextVerticalPosition.TOP,\n      text_justification: StaveLine.TextJustification.CENTER,\n    };\n\n    this.setNotes(notes);\n  }\n\n  // Set the font for the `StaveLine` text\n  setFont(font) { this.font = font; return this; }\n  // The the annotation for the `StaveLine`\n  setText(text) { this.text = text; return this; }\n\n  // Set the notes for the `StaveLine`\n  setNotes(notes) {\n    if (!notes.first_note && !notes.last_note) {\n      throw new Vex.RuntimeError(\n        'BadArguments', 'Notes needs to have either first_note or last_note set.'\n      );\n    }\n\n    if (!notes.first_indices) notes.first_indices = [0];\n    if (!notes.last_indices) notes.last_indices = [0];\n\n    if (notes.first_indices.length !== notes.last_indices.length) {\n      throw new Vex.RuntimeError(\n        'BadArguments', 'Connected notes must have similar index sizes'\n      );\n    }\n\n    // Success. Lets grab 'em notes.\n    this.first_note = notes.first_note;\n    this.first_indices = notes.first_indices;\n    this.last_note = notes.last_note;\n    this.last_indices = notes.last_indices;\n    return this;\n  }\n\n  // Apply the style of the `StaveLine` to the context\n  applyLineStyle() {\n    const ctx = this.checkContext();\n    const render_options = this.render_options;\n\n    if (render_options.line_dash) {\n      ctx.setLineDash(render_options.line_dash);\n    }\n\n    if (render_options.line_width) {\n      ctx.setLineWidth(render_options.line_width);\n    }\n\n    if (render_options.rounded_end) {\n      ctx.setLineCap('round');\n    } else {\n      ctx.setLineCap('square');\n    }\n  }\n\n  // Apply the text styling to the context\n  applyFontStyle() {\n    const ctx = this.checkContext();\n\n    if (this.font) {\n      ctx.setFont(this.font.family, this.font.size, this.font.weight);\n    }\n\n    if (this.render_options.color) {\n      ctx.setStrokeStyle(this.render_options.color);\n      ctx.setFillStyle(this.render_options.color);\n    }\n  }\n\n  // Renders the `StaveLine` on the context\n  draw() {\n    const ctx = this.checkContext();\n    this.setRendered();\n\n    const first_note = this.first_note;\n    const last_note = this.last_note;\n    const render_options = this.render_options;\n\n    ctx.save();\n    this.applyLineStyle();\n\n    // Cycle through each set of indices and draw lines\n    let start_position;\n    let end_position;\n    this.first_indices.forEach((first_index, i) => {\n      const last_index = this.last_indices[i];\n\n      // Get initial coordinates for the start/end of the line\n      start_position = first_note.getModifierStartXY(2, first_index);\n      end_position = last_note.getModifierStartXY(1, last_index);\n      const upwards_slope = start_position.y > end_position.y;\n\n      // Adjust `x` coordinates for modifiers\n      start_position.x += first_note.getMetrics().modRightPx + render_options.padding_left;\n      end_position.x -= last_note.getMetrics().modLeftPx + render_options.padding_right;\n\n\n      // Adjust first `x` coordinates for displacements\n      const notehead_width = first_note.getGlyph().getWidth();\n      const first_displaced = first_note.getKeyProps()[first_index].displaced;\n      if (first_displaced && first_note.getStemDirection() === 1) {\n        start_position.x += notehead_width + render_options.padding_left;\n      }\n\n      // Adjust last `x` coordinates for displacements\n      const last_displaced = last_note.getKeyProps()[last_index].displaced;\n      if (last_displaced && last_note.getStemDirection() === -1) {\n        end_position.x -= notehead_width + render_options.padding_right;\n      }\n\n      // Adjust y position better if it's not coming from the center of the note\n      start_position.y += upwards_slope ? -3 : 1;\n      end_position.y += upwards_slope ? 2 : 0;\n\n      drawArrowLine(ctx, start_position, end_position, this.render_options);\n    });\n\n    ctx.restore();\n\n    // Determine the x coordinate where to start the text\n    const text_width = ctx.measureText(this.text).width;\n    const justification = render_options.text_justification;\n    let x = 0;\n    if (justification === StaveLine.TextJustification.LEFT) {\n      x = start_position.x;\n    } else if (justification === StaveLine.TextJustification.CENTER) {\n      const delta_x = (end_position.x - start_position.x);\n      const center_x = (delta_x / 2) + start_position.x;\n      x = center_x - (text_width / 2);\n    } else if (justification === StaveLine.TextJustification.RIGHT) {\n      x = end_position.x  -  text_width;\n    }\n\n    // Determine the y value to start the text\n    let y;\n    const vertical_position = render_options.text_position_vertical;\n    if (vertical_position === StaveLine.TextVerticalPosition.TOP) {\n      y = first_note.getStave().getYForTopText();\n    } else if (vertical_position === StaveLine.TextVerticalPosition.BOTTOM) {\n      y = first_note.getStave().getYForBottomText(Flow.TEXT_HEIGHT_OFFSET_HACK);\n    }\n\n    // Draw the text\n    ctx.save();\n    this.applyFontStyle();\n    ctx.fillText(this.text, x, y);\n    ctx.restore();\n\n    return this;\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n//\n// This file implements different types of pedal markings. These notation\n// elements indicate to the performer when to depress and release the a pedal.\n//\n// In order to create \"Sostenuto\", and \"una corda\" markings, you must set\n// custom text for the release/depress pedal markings.\n\nimport { Vex } from './vex';\nimport { Element } from './element';\nimport { Glyph } from './glyph';\n\n// To enable logging for this class. Set `Vex.Flow.PedalMarking.DEBUG` to `true`.\nfunction L(...args) { if (PedalMarking.DEBUG) Vex.L('Vex.Flow.PedalMarking', args); }\n\n// Draws a pedal glyph with the provided `name` on a rendering `context`\n// at the coordinates `x` and `y. Takes into account the glyph data\n// coordinate shifts.\nfunction drawPedalGlyph(name, context, x, y, point) {\n  const glyph_data = PedalMarking.GLYPHS[name];\n  const glyph = new Glyph(glyph_data.code, point);\n  glyph.render(context, x + glyph_data.x_shift, y + glyph_data.y_shift);\n}\n\nexport class PedalMarking extends Element {\n  // Glyph data\n  static get GLYPHS() {\n    return {\n      'pedal_depress': {\n        code: 'v36',\n        x_shift: -10,\n        y_shift: 0,\n      },\n      'pedal_release': {\n        code: 'v5d',\n        x_shift: -2,\n        y_shift: 3,\n      },\n    };\n  }\n\n  static get Styles() {\n    return {\n      TEXT: 1,\n      BRACKET: 2,\n      MIXED: 3,\n    };\n  }\n\n  static get StylesString() {\n    return {\n      text: PedalMarking.Styles.TEXT,\n      bracket: PedalMarking.Styles.BRACKET,\n      mixed: PedalMarking.Styles.MIXED,\n    };\n  }\n\n  // Create a sustain pedal marking. Returns the defaults PedalMarking.\n  // Which uses the traditional \"Ped\" and \"*\"\" markings.\n  static createSustain(notes) {\n    const pedal = new PedalMarking(notes);\n    return pedal;\n  }\n\n  // Create a sostenuto pedal marking\n  static createSostenuto(notes) {\n    const pedal = new PedalMarking(notes);\n    pedal.setStyle(PedalMarking.Styles.MIXED);\n    pedal.setCustomText('Sost. Ped.');\n    return pedal;\n  }\n\n  // Create an una corda pedal marking\n  static createUnaCorda(notes) {\n    const pedal = new PedalMarking(notes);\n    pedal.setStyle(PedalMarking.Styles.TEXT);\n    pedal.setCustomText('una corda', 'tre corda');\n    return pedal;\n  }\n\n  // ## Prototype Methods\n  constructor(notes) {\n    super();\n    this.setAttribute('type', 'PedalMarking');\n\n    this.notes = notes;\n    this.style = PedalMarking.TEXT;\n    this.line = 0;\n\n    // Custom text for the release/depress markings\n    this.custom_depress_text = '';\n    this.custom_release_text = '';\n\n    this.font = {\n      family: 'Times New Roman',\n      size: 12,\n      weight: 'italic bold',\n    };\n\n    this.render_options = {\n      bracket_height: 10,\n      text_margin_right: 6,\n      bracket_line_width: 1,\n      glyph_point_size: 40,\n      color: 'black',\n    };\n  }\n\n  // Set custom text for the `depress`/`release` pedal markings. No text is\n  // set if the parameter is falsy.\n  setCustomText(depress, release) {\n    this.custom_depress_text = depress || '';\n    this.custom_release_text = release || '';\n    return this;\n  }\n\n  // Set the pedal marking style\n  setStyle(style) {\n    if (style < 1 && style > 3)  {\n      throw new Vex.RERR('InvalidParameter', 'The style must be one found in PedalMarking.Styles');\n    }\n\n    this.style = style;\n    return this;\n  }\n\n  // Set the staff line to render the markings on\n  setLine(line) { this.line = line; return this; }\n\n  // Draw the bracket based pedal markings\n  drawBracketed() {\n    const ctx = this.context;\n    let is_pedal_depressed = false;\n    let prev_x;\n    let prev_y;\n    const pedal = this;\n\n    // Iterate through each note\n    this.notes.forEach((note, index, notes) => {\n      // Each note triggers the opposite pedal action\n      is_pedal_depressed = !is_pedal_depressed;\n\n      // Get the initial coordinates for the note\n      const x = note.getAbsoluteX();\n      const y = note.getStave().getYForBottomText(pedal.line + 3);\n\n      // Throw if current note is positioned before the previous note\n      if (x < prev_x) {\n        throw new Vex.RERR(\n          'InvalidConfiguration', 'The notes provided must be in order of ascending x positions'\n        );\n      }\n\n      // Determine if the previous or next note are the same\n      // as the current note. We need to keep track of this for\n      // when adjustments are made for the release+depress action\n      const next_is_same = notes[index + 1] === note;\n      const prev_is_same = notes[index - 1] === note;\n\n      let x_shift = 0;\n      if (is_pedal_depressed) {\n        // Adjustment for release+depress\n        x_shift =  prev_is_same ? 5 : 0;\n\n        if (pedal.style === PedalMarking.Styles.MIXED && !prev_is_same) {\n          // For MIXED style, start with text instead of bracket\n          if (pedal.custom_depress_text) {\n            // If we have custom text, use instead of the default \"Ped\" glyph\n            const text_width = ctx.measureText(pedal.custom_depress_text).width;\n            ctx.fillText(pedal.custom_depress_text, x - (text_width / 2), y);\n            x_shift = (text_width / 2) + pedal.render_options.text_margin_right;\n          } else {\n            // Render the Ped glyph in position\n            drawPedalGlyph('pedal_depress', ctx, x, y, pedal.render_options.glyph_point_size);\n            x_shift = 20 + pedal.render_options.text_margin_right;\n          }\n        } else {\n          // Draw start bracket\n          ctx.beginPath();\n          ctx.moveTo(x, y - pedal.render_options.bracket_height);\n          ctx.lineTo(x + x_shift, y);\n          ctx.stroke();\n          ctx.closePath();\n        }\n      } else {\n        // Adjustment for release+depress\n        x_shift = next_is_same ? -5 : 0;\n\n        // Draw end bracket\n        ctx.beginPath();\n        ctx.moveTo(prev_x, prev_y);\n        ctx.lineTo(x + x_shift, y);\n        ctx.lineTo(x, y - pedal.render_options.bracket_height);\n        ctx.stroke();\n        ctx.closePath();\n      }\n\n      // Store previous coordinates\n      prev_x = x + x_shift;\n      prev_y = y;\n    });\n  }\n\n  // Draw the text based pedal markings. This defaults to the traditional\n  // \"Ped\" and \"*\"\" symbols if no custom text has been provided.\n  drawText() {\n    const ctx = this.context;\n    let is_pedal_depressed = false;\n    const pedal = this;\n\n    // The glyph point size\n    const point = pedal.render_options.glyph_point_size;\n\n    // Iterate through each note, placing glyphs or custom text accordingly\n    this.notes.forEach(note => {\n      is_pedal_depressed = !is_pedal_depressed;\n      const stave = note.getStave();\n      const x = note.getAbsoluteX();\n      const y = stave.getYForBottomText(pedal.line + 3);\n\n      let text_width = 0;\n      if (is_pedal_depressed) {\n        if (pedal.custom_depress_text) {\n          text_width = ctx.measureText(pedal.custom_depress_text).width;\n          ctx.fillText(pedal.custom_depress_text, x - (text_width / 2), y);\n        } else {\n          drawPedalGlyph('pedal_depress', ctx, x, y, point);\n        }\n      } else {\n        if (pedal.custom_release_text) {\n          text_width = ctx.measureText(pedal.custom_release_text).width;\n          ctx.fillText(pedal.custom_release_text, x - (text_width / 2), y);\n        } else {\n          drawPedalGlyph('pedal_release', ctx, x, y, point);\n        }\n      }\n    });\n  }\n\n  // Render the pedal marking in position on the rendering context\n  draw() {\n    const ctx = this.checkContext();\n    this.setRendered();\n\n    ctx.save();\n    ctx.setStrokeStyle(this.render_options.color);\n    ctx.setFillStyle(this.render_options.color);\n    ctx.setFont(this.font.family, this.font.size, this.font.weight);\n\n    L('Rendering Pedal Marking');\n\n    if (this.style === PedalMarking.Styles.BRACKET || this.style === PedalMarking.Styles.MIXED) {\n      ctx.setLineWidth(this.render_options.bracket_line_width);\n      this.drawBracketed();\n    } else if (this.style === PedalMarking.Styles.TEXT) {\n      this.drawText();\n    }\n\n    ctx.restore();\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// Author: Cyril Silverman\n//\n// ## Description\n//\n// This file implement `TextBrackets` which extend between two notes.\n// The octave transposition markings (8va, 8vb, 15va, 15vb) can be created\n// using this class.\n\nimport { Vex } from './vex';\nimport { Flow } from './tables';\nimport { Element } from './element';\nimport { Renderer } from './renderer';\n\n// To enable logging for this class. Set `Vex.Flow.TextBracket.DEBUG` to `true`.\nfunction L(...args) { if (TextBracket.DEBUG) Vex.L('Vex.Flow.TextBracket', args); }\n\nexport class TextBracket extends Element {\n  // FIXME: Modifier.Position is singular while this is plural, make consistent\n  static get Positions() {\n    return {\n      TOP: 1,\n      BOTTOM: -1,\n    };\n  }\n\n  static get PositionString() {\n    return {\n      top: TextBracket.Positions.TOP,\n      bottom: TextBracket.Positions.BOTTOM,\n    };\n  }\n\n  constructor({\n    start,\n    stop,\n    text = '',\n    superscript = '',\n    position = TextBracket.Positions.TOP,\n  }) {\n    super();\n    this.setAttribute('type', 'TextBracket');\n\n    this.start = start;\n    this.stop = stop;\n\n    this.text = text;\n    this.superscript = superscript;\n\n    this.position = typeof position === 'string'\n      ? TextBracket.PositionString[position]\n      : position;\n\n    this.line = 1;\n\n    this.font = {\n      family: 'Serif',\n      size: 15,\n      weight: 'italic',\n    };\n\n    this.render_options = {\n      dashed: true,\n      dash: [5],\n      color: 'black',\n      line_width: 1,\n      show_bracket: true,\n      bracket_height: 8,\n\n      // In the BOTTOM position, the bracket line can extend\n      // under the superscript.\n      underline_superscript: true,\n    };\n  }\n\n  // Apply the text backet styling to the provided `context`\n  applyStyle(context) {\n    // Apply style for the octave bracket\n    context.setFont(this.font.family, this.font.size, this.font.weight);\n    context.setStrokeStyle(this.render_options.color);\n    context.setFillStyle(this.render_options.color);\n    context.setLineWidth(this.render_options.line_width);\n\n    return this;\n  }\n\n  // Set whether the bracket line should be `dashed`. You can also\n  // optionally set the `dash` pattern by passing in an array of numbers\n  setDashed(dashed, dash) {\n    this.render_options.dashed = dashed;\n    if (dash) this.render_options.dash = dash;\n    return this;\n  }\n\n  // Set the font for the text\n  setFont(font) {\n    // We use Object.assign to support partial updates to the font object\n    this.font = { ...this.font, ...font };\n    return this;\n  }\n  // Set the rendering `context` for the octave bracket\n  setLine(line) { this.line = line; return this; }\n\n  // Draw the octave bracket on the rendering context\n  draw() {\n    const ctx = this.context;\n    this.setRendered();\n\n    let y = 0;\n    switch (this.position) {\n      case TextBracket.Positions.TOP:\n        y = this.start.getStave().getYForTopText(this.line);\n        break;\n      case TextBracket.Positions.BOTTOM:\n        y = this.start.getStave().getYForBottomText(this.line + Flow.TEXT_HEIGHT_OFFSET_HACK);\n        break;\n      default:\n        throw new Vex.RERR('InvalidPosition', `The position ${this.position} is invalid`);\n    }\n\n    // Get the preliminary start and stop coordintates for the bracket\n    const start = { x: this.start.getAbsoluteX(), y };\n    const stop = { x: this.stop.getAbsoluteX(), y };\n\n    L('Rendering TextBracket: start:', start, 'stop:', stop, 'y:', y);\n\n    const bracket_height = this.render_options.bracket_height * this.position;\n\n    ctx.save();\n    this.applyStyle(ctx);\n\n    // Draw text\n    ctx.fillText(this.text, start.x, start.y);\n\n    // Get the width and height for the octave number\n    const main_width = ctx.measureText(this.text).width;\n    const main_height = ctx.measureText('M').width;\n\n    // Calculate the y position for the super script\n    const super_y = start.y - (main_height / 2.5);\n\n    // Draw the superscript\n    ctx.setFont(this.font.family, this.font.size / 1.4, this.font.weight);\n    ctx.fillText(this.superscript, start.x + main_width + 1, super_y);\n\n    // Determine width and height of the superscript\n    const superscript_width = ctx.measureText(this.superscript).width;\n    const super_height = ctx.measureText('M').width;\n\n    // Setup initial coordinates for the bracket line\n    let start_x = start.x;\n    let line_y = super_y;\n    const end_x = stop.x + this.stop.getGlyph().getWidth();\n\n    // Adjust x and y coordinates based on position\n    if (this.position === TextBracket.Positions.TOP) {\n      start_x += main_width + superscript_width + 5;\n      line_y -= super_height / 2.7;\n    } else if (this.position === TextBracket.Positions.BOTTOM) {\n      line_y += super_height / 2.7;\n      start_x += main_width + 2;\n\n      if (!this.render_options.underline_superscript) {\n        start_x += superscript_width;\n      }\n    }\n\n    if (this.render_options.dashed) {\n      // Main line\n      Renderer.drawDashedLine(\n        ctx,\n        start_x,\n        line_y,\n        end_x,\n        line_y,\n        this.render_options.dash\n      );\n      // Ending Bracket\n      if (this.render_options.show_bracket) {\n        Renderer.drawDashedLine(\n          ctx,\n          end_x,\n          line_y + (1 * this.position),\n          end_x,\n          line_y + bracket_height,\n          this.render_options.dash\n        );\n      }\n    } else {\n      ctx.beginPath();\n      ctx.moveTo(start_x, line_y);\n      // Main line\n      ctx.lineTo(end_x, line_y);\n      if (this.render_options.show_bracket) {\n        // Ending bracket\n        ctx.lineTo(end_x, line_y + bracket_height);\n      }\n      ctx.stroke();\n      ctx.closePath();\n    }\n\n    ctx.restore();\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n//\n// A `BarNote` is used to render bar lines (from `barline.js`). `BarNote`s can\n// be added to a voice and rendered in the middle of a stave. Since it has no\n// duration, it consumes no `tick`s, and is dealt with appropriately by the formatter.\n//\n// See `tests/barnote_tests.js` for usage examples.\n\nimport { Vex } from './vex';\nimport { Note } from './note';\nimport { Barline } from './stavebarline';\n\n// To enable logging for this class. Set `Vex.Flow.BarNote.DEBUG` to `true`.\nfunction L(...args) { if (BarNote.DEBUG) Vex.L('Vex.Flow.BarNote', args); }\n\nexport class BarNote extends Note {\n  constructor(type = Barline.type.SINGLE) {\n    super({ duration: 'b' });\n    this.setAttribute('type', 'BarNote');\n\n    this.metrics = {\n      widths: {},\n    };\n\n    const TYPE = Barline.type;\n    this.metrics.widths = {\n      [TYPE.SINGLE]: 8,\n      [TYPE.DOUBLE]: 12,\n      [TYPE.END]: 15,\n      [TYPE.REPEAT_BEGIN]: 14,\n      [TYPE.REPEAT_END]: 14,\n      [TYPE.REPEAT_BOTH]: 18,\n      [TYPE.NONE]: 0,\n    };\n\n    // Tell the formatter that bar notes have no duration.\n    this.ignore_ticks = true;\n    this.setType(type);\n  }\n\n  // Get and set the type of Bar note. `type` must be one of `Vex.Flow.Barline.type`.\n  getType() { return this.type; }\n  setType(type) {\n    this.type = typeof(type) === 'string'\n      ? Barline.typeString[type]\n      : type;\n\n    // Set width to width of relevant `Barline`.\n    this.setWidth(this.metrics.widths[this.type]);\n    return this;\n  }\n\n  getBoundingBox() {\n    return super.getBoundingBox();\n  }\n\n  addToModifierContext() {\n    /* overridden to ignore */\n    return this;\n  }\n\n  preFormat() {\n    /* overridden to ignore */\n    this.setPreFormatted(true);\n    return this;\n  }\n\n  // Render note to stave.\n  draw() {\n    this.checkContext();\n    if (!this.stave) throw new Vex.RERR('NoStave', \"Can't draw without a stave.\");\n    L('Rendering bar line at: ', this.getAbsoluteX());\n    const barline = new Barline(this.type);\n    barline.setX(this.getAbsoluteX());\n    barline.draw(this.stave);\n    this.setRendered();\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n\nimport { Vex } from './vex';\nimport { StemmableNote } from './stemmablenote';\n\nexport class GhostNote extends StemmableNote {\n  /** @constructor */\n  constructor(parameter) {\n    // Sanity check\n    if (!parameter) {\n      throw new Vex.RuntimeError('BadArguments',\n        'Ghost note must have valid initialization data to identify ' +\n        'duration.');\n    }\n\n    let note_struct;\n\n    // Preserve backwards-compatibility\n    if (typeof (parameter) === 'string') {\n      note_struct = { duration: parameter };\n    } else if (typeof (parameter) === 'object') {\n      note_struct = parameter;\n    } else {\n      throw new Vex.RuntimeError('BadArguments',\n        'Ghost note must have valid initialization data to identify ' +\n        'duration.');\n    }\n\n    super(note_struct);\n    this.setAttribute('type', 'GhostNote');\n\n    // Note properties\n    this.setWidth(0);\n  }\n\n  isRest() { return true; }\n\n  setStave(stave) {\n    super.setStave(stave);\n  }\n\n  addToModifierContext() { /* intentionally overridden */ return this; }\n\n  preFormat() {\n    this.setPreFormatted(true);\n    return this;\n  }\n\n  draw() {\n    if (!this.stave) throw new Vex.RERR('NoStave', \"Can't draw without a stave.\");\n\n    // Draw the modifiers\n    this.setRendered();\n    for (let i = 0; i < this.modifiers.length; ++i) {\n      const modifier = this.modifiers[i];\n      modifier.setContext(this.context);\n      modifier.drawWithStyle();\n    }\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// Author: Mike Corrigan <corrigan@gmail.com>\n//\n// This class implements tremolo notation.\n\nimport { Vex } from './vex';\nimport { Modifier } from './modifier';\nimport { Glyph } from './glyph';\nimport { GraceNote } from './gracenote';\n\nexport class Tremolo extends Modifier {\n  static get CATEGORY() { return 'tremolo'; }\n  static get YOFFSETSTEMUP() { return -9; }\n  static get YOFFSETSTEMDOWN() { return -21; }\n  static get XOFFSETSTEMUP() { return 6; }\n  static get XOFFSETSTEMDOWN() { return -2; }\n  constructor(num) {\n    super();\n    this.setAttribute('type', 'Tremolo');\n\n    this.num = num;\n    this.note = null;\n    this.index = null;\n    this.position = Modifier.Position.CENTER;\n    this.code = 'v74';\n\n    this.y_spacing_scale = 1;\n    this.extra_stroke_scale = 1;\n  }\n\n  getCategory() { return Tremolo.CATEGORY; }\n\n  draw() {\n    this.checkContext();\n\n    if (!(this.note && this.index != null)) {\n      throw new Vex.RERR('NoAttachedNote', \"Can't draw Tremolo without a note and index.\");\n    }\n\n    this.setRendered();\n    const stemDirection = this.note.getStemDirection();\n    // VexFlowPatch: add y_spacing_scale\n    this.y_spacing = 4 * stemDirection * this.y_spacing_scale;\n    const start = this.note.getModifierStartXY(this.position, this.index);\n    let x = start.x;\n    let y = this.note.stem.getExtents().topY;\n    let scale = this.note.getCategory() === 'gracenotes' ? GraceNote.SCALE : 1;\n    // VexFlowPatch: add extra stroke scale\n    scale *= this.extra_stroke_scale;\n    if (stemDirection < 0) {\n      y += Tremolo.YOFFSETSTEMDOWN * scale;\n    } else {\n      y += Tremolo.YOFFSETSTEMUP * scale;\n    }\n\n    this.font = {\n      family: 'Arial',\n      size: 16 * scale,\n      weight: '',\n    };\n\n    this.render_options = {\n      font_scale: 35 * scale,\n      stroke_px: 3,\n      stroke_spacing: 10 * scale,\n    };\n\n    x += stemDirection < 0 ? Tremolo.XOFFSETSTEMDOWN : Tremolo.XOFFSETSTEMUP;\n    for (let i = 0; i < this.num; ++i) {\n      Glyph.renderGlyph(this.context, x, y, this.render_options.font_scale, this.code);\n      y += this.y_spacing;\n    }\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n//\n// This file implements the `Crescendo` object which draws crescendos and\n// decrescendo dynamics markings. A `Crescendo` is initialized with a\n// duration and formatted as part of a `Voice` like any other `Note`\n// type in VexFlow. This object would most likely be formatted in a Voice\n// with `TextNotes` - which are used to represent other dynamics markings.\n\nimport { Vex } from './vex';\nimport { Note } from './note';\nimport { TickContext } from './tickcontext';\n\n// To enable logging for this class. Set `Vex.Flow.Crescendo.DEBUG` to `true`.\nfunction L(...args) { if (Crescendo.DEBUG) Vex.L('Vex.Flow.Crescendo', args); }\n\n// Private helper to draw the hairpin\nfunction renderHairpin(ctx, params) {\n  const begin_x = params.begin_x;\n  const end_x = params.end_x;\n  const y = params.y;\n  const half_height =  params.height / 2;\n\n  ctx.beginPath();\n\n  if (params.reverse) {\n    ctx.moveTo(begin_x, y - half_height);\n    ctx.lineTo(end_x,  y);\n    ctx.lineTo(begin_x, y + half_height);\n  } else {\n    ctx.moveTo(end_x,  y - half_height);\n    ctx.lineTo(begin_x, y);\n    ctx.lineTo(end_x,  y + half_height);\n  }\n\n  ctx.stroke();\n  ctx.closePath();\n}\n\nexport class Crescendo extends Note {\n  // Initialize the crescendo's properties\n  constructor(note_struct) {\n    super(note_struct);\n    this.setAttribute('type', 'Crescendo');\n\n    // Whether the object is a decrescendo\n    this.decrescendo = false;\n\n    // The staff line to be placed on\n    this.line = note_struct.line || 0;\n\n    // The height at the open end of the cresc/decresc\n    this.height = 15;\n\n    Vex.Merge(this.render_options, {\n      // Extensions to the length of the crescendo on either side\n      extend_left: 0,\n      extend_right: 0,\n      // Vertical shift\n      y_shift: 0,\n    });\n  }\n\n  // Set the line to center the element on\n  setLine(line) { this.line = line; return this; }\n\n  // Set the full height at the open end\n  setHeight(height) { this.height = height; return this; }\n\n  // Set whether the sign should be a descresendo by passing a bool\n  // to `decresc`\n  setDecrescendo(decresc) {\n    this.decrescendo = decresc;\n    return this;\n  }\n\n  // Preformat the note\n  preFormat() { this.preFormatted = true; return this; }\n\n  // Render the Crescendo object onto the canvas\n  draw() {\n    this.checkContext();\n    this.setRendered();\n\n    const tick_context = this.getTickContext();\n    const next_context = TickContext.getNextContext(tick_context);\n\n    const begin_x = this.getAbsoluteX();\n    const end_x  = next_context ? next_context.getX() : this.stave.x + this.stave.width;\n    const y = this.stave.getYForLine(this.line + (-3)) + 1;\n\n    L(\n      'Drawing ',\n      this.decrescendo ? 'decrescendo ' : 'crescendo ',\n      this.height,\n      'x',\n      begin_x - end_x\n    );\n\n    renderHairpin(this.context, {\n      begin_x: begin_x - this.render_options.extend_left,\n      end_x: end_x + this.render_options.extend_right,\n      y: y + this.render_options.y_shift,\n      height: this.height,\n      reverse: this.decrescendo,\n    });\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// A generic text parsing class for VexFlow.\n\nimport { Vex } from './vex';\n\n// To enable logging for this class. Set `Vex.Flow.Parser.DEBUG` to `true`.\nfunction L(...args) { if (Parser.DEBUG) Vex.L('Vex.Flow.Parser', args); }\n\nexport const X = Vex.MakeException('ParserError');\n\n// Converts parser results into an easy to reference list that can be\n// used in triggers.\nfunction flattenMatches(results) {\n  if (results.matchedString !== undefined) return results.matchedString;\n  if (results.results) return flattenMatches(results.results);\n  if (results.length === 1) return flattenMatches(results[0]);\n  if (results.length === 0) return null;\n  return results.map(flattenMatches);\n}\n\n// This is the base parser class. Given an arbitrary context-free grammar, it\n// can parse any line and execute code when specific rules are met (e.g.,\n// when a string is terminated.)\nexport class Parser {\n  // For an example of a simple grammar, take a look at tests/parser_tests.js or\n  // the EasyScore grammar in easyscore.js.\n  constructor(grammar) {\n    this.grammar = grammar;\n  }\n\n  // Parse `line` using current grammar. Returns {success: true} if the\n  // line parsed correctly, otherwise returns `{success: false, errorPos: N}`\n  // where `errorPos` is the location of the error in the string.\n  parse(line) {\n    this.line = line;\n    this.pos = 0;\n    this.errorPos = -1;\n    const results = this.expect(this.grammar.begin());\n    results.errorPos = this.errorPos;\n    return results;\n  }\n\n  matchFail(returnPos) {\n    if (this.errorPos === -1) this.errorPos = this.pos;\n    this.pos = returnPos;\n  }\n\n  matchSuccess() {\n    this.errorPos = -1;\n  }\n\n  // Look for `token` in this.line[this.pos], and return success\n  // if one is found. `token` is specified as a regular expression.\n  matchToken(token, noSpace = false) {\n    const regexp = noSpace\n      ? new RegExp('^((' + token + '))')\n      : new RegExp('^((' + token + ')\\\\s*)');\n    const workingLine = this.line.slice(this.pos);\n    const result = workingLine.match(regexp);\n    if (result !== null) {\n      return {\n        success: true,\n        matchedString: result[2],\n        incrementPos: result[1].length,\n        pos: this.pos,\n      };\n    } else {\n      return {\n        success: false,\n        pos: this.pos,\n      };\n    }\n  }\n\n  // Execute rule to match a sequence of tokens (or rules). If `maybe` is\n  // set, then return success even if the token is not found, but reset\n  // the position before exiting.\n  expectOne(rule, maybe = false) {\n    const results = [];\n    const pos = this.pos;\n\n    let allMatches = true;\n    let oneMatch = false;\n    maybe = (maybe === true) || (rule.maybe === true);\n\n    // Execute all sub rules in sequence.\n    for (let i = 0; i < rule.expect.length; i++) {\n      const next = rule.expect[i];\n      const localPos = this.pos;\n      const result = this.expect(next);\n\n      // If `rule.or` is set, then return success if any one\n      // of the subrules match, else all subrules must match.\n      if (result.success) {\n        results.push(result);\n        oneMatch = true;\n        if (rule.or) break;\n      } else {\n        allMatches = false;\n        if (!rule.or) {\n          this.pos = localPos;\n          break;\n        }\n      }\n    }\n\n    const gotOne = (rule.or && oneMatch) || allMatches;\n    const success = gotOne || (maybe === true);\n    if (maybe && !gotOne) this.pos = pos;\n    if (success) this.matchSuccess(); else this.matchFail(pos);\n    return { success, results, numMatches: gotOne ? 1 : 0 };\n  }\n\n  // Try to match multiple (one or more) instances of the rule. If `maybe` is set,\n  // then a failed match is also a success (but the position is reset).\n  expectOneOrMore(rule, maybe = false) {\n    const results = [];\n    const pos = this.pos;\n    let numMatches = 0;\n    let more = true;\n\n    do {\n      const result = this.expectOne(rule);\n      if (result.success) {\n        numMatches++;\n        results.push(result.results);\n      } else {\n        more = false;\n      }\n    } while (more);\n\n    const success = (numMatches > 0) || (maybe === true);\n    if (maybe && !(numMatches > 0)) this.pos = pos;\n    if (success) this.matchSuccess(); else this.matchFail(pos);\n    return { success, results, numMatches };\n  }\n\n  // Match zero or more instances of `rule`. Offloads to `expectOneOrMore`.\n  expectZeroOrMore(rule) {\n    return this.expectOneOrMore(rule, true);\n  }\n\n  // Execute the rule produced by the provided the `rules` function. This\n  // ofloads to one of the above matchers and consolidates the results. It is also\n  // responsible for executing any code triggered by the rule (in `rule.run`.)\n  expect(rules) {\n    L('Evaluating rules:', rules);\n    let result;\n    if (!rules) {\n      throw new X('Invalid Rule: ' + rules, rules);\n    }\n\n    // Get rule from Grammar class.\n    const rule = rules.bind(this.grammar)();\n\n    if (rule.token) {\n      // Base case: parse the regex and throw an error if the\n      // line doesn't match.\n      result = this.matchToken(rule.token, (rule.noSpace === true));\n      if (result.success) {\n        // Token match! Update position and throw away parsed portion\n        // of string.\n        this.pos += result.incrementPos;\n      }\n    } else if (rule.expect) {\n      if (rule.oneOrMore) {\n        result = this.expectOneOrMore(rule);\n      } else if (rule.zeroOrMore) {\n        result = this.expectZeroOrMore(rule);\n      } else {\n        result = this.expectOne(rule);\n      }\n    } else {\n      throw new X('Bad grammar! No `token` or `expect` property', rule);\n    }\n\n    // If there's a trigger attached to this rule, then pull it.\n    result.matches = [];\n    if (result.results) result.results.forEach(r => result.matches.push(flattenMatches(r)));\n    if (rule.run && result.success) rule.run(result);\n    return result;\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// This class implements a parser for a simple language to generate\n// VexFlow objects.\n\n/* eslint max-classes-per-file: \"off\" */\n\nimport { Vex } from './vex';\nimport { StaveNote } from './stavenote';\nimport { Parser } from './parser';\nimport { Articulation } from './articulation';\n\n// To enable logging for this class. Set `Vex.Flow.EasyScore.DEBUG` to `true`.\nfunction L(...args) { if (EasyScore.DEBUG) Vex.L('Vex.Flow.EasyScore', args); }\n\nexport const X = Vex.MakeException('EasyScoreError');\n\nclass Grammar {\n  constructor(builder) {\n    this.builder = builder;\n  }\n\n  begin() { return this.LINE; }\n\n  LINE() {\n    return {\n      expect: [this.PIECE, this.PIECES, this.EOL],\n    };\n  }\n  PIECE() {\n    return {\n      expect: [this.CHORDORNOTE, this.PARAMS],\n      run: () => this.builder.commitPiece(),\n    };\n  }\n  PIECES() {\n    return {\n      expect: [this.COMMA, this.PIECE],\n      zeroOrMore: true,\n    };\n  }\n  PARAMS() {\n    return {\n      expect: [this.DURATION, this.TYPE, this.DOTS, this.OPTS],\n    };\n  }\n  CHORDORNOTE() {\n    return {\n      expect: [this.CHORD, this.SINGLENOTE],\n      or: true,\n    };\n  }\n  CHORD() {\n    return {\n      expect: [this.LPAREN, this.NOTES, this.RPAREN],\n      run: (state) => this.builder.addChord(state.matches[1]),\n    };\n  }\n  NOTES() {\n    return {\n      expect: [this.NOTE],\n      oneOrMore: true,\n    };\n  }\n  NOTE() {\n    return {\n      expect: [this.NOTENAME, this.ACCIDENTAL, this.OCTAVE],\n    };\n  }\n  SINGLENOTE() {\n    return {\n      expect: [this.NOTENAME, this.ACCIDENTAL, this.OCTAVE],\n      run: (state) =>\n        this.builder.addSingleNote(state.matches[0], state.matches[1], state.matches[2]),\n    };\n  }\n  ACCIDENTAL() {\n    return {\n      expect: [this.ACCIDENTALS],\n      maybe: true,\n    };\n  }\n  DOTS() {\n    return {\n      expect: [this.DOT],\n      zeroOrMore: true,\n      run: (state) => this.builder.setNoteDots(state.matches[0]),\n    };\n  }\n  TYPE() {\n    return {\n      expect: [this.SLASH, this.MAYBESLASH, this.TYPES],\n      maybe: true,\n      run: (state) => this.builder.setNoteType(state.matches[2]),\n    };\n  }\n  DURATION() {\n    return {\n      expect: [this.SLASH, this.DURATIONS],\n      maybe: true,\n      run: (state) => this.builder.setNoteDuration(state.matches[1]),\n    };\n  }\n  OPTS() {\n    return {\n      expect: [this.LBRACKET, this.KEYVAL, this.KEYVALS, this.RBRACKET],\n      maybe: true,\n    };\n  }\n  KEYVALS() {\n    return {\n      expect: [this.COMMA, this.KEYVAL],\n      zeroOrMore: true,\n    };\n  }\n  KEYVAL() {\n    const unquote = (str) => str.slice(1, -1);\n\n    return {\n      expect: [this.KEY, this.EQUALS, this.VAL],\n      run: (state) => this.builder.addNoteOption(state.matches[0], unquote(state.matches[2])),\n    };\n  }\n  VAL() {\n    return {\n      expect: [this.SVAL, this.DVAL],\n      or: true,\n    };\n  }\n\n  KEY() { return { token: '[a-zA-Z][a-zA-Z0-9]*' }; }\n  DVAL() { return { token: '[\"][^\"]*[\"]' }; }\n  SVAL() { return { token: \"['][^']*[']\" }; }\n  NOTENAME() { return { token: '[a-gA-G]' }; }\n  OCTAVE() { return { token: '[0-9]+' }; }\n  ACCIDENTALS() { return { token: 'bbs|bb|bss|bs|b|db|d|##|#|n|\\\\+\\\\+-|\\\\+-|\\\\+\\\\+|\\\\+|k|o' }; }\n  DURATIONS() { return { token: '[0-9whq]+' }; }\n  TYPES() { return { token: '[rRsSxX]' }; }\n  LPAREN() { return { token: '[(]' }; }\n  RPAREN() { return { token: '[)]' }; }\n  COMMA() { return { token: '[,]' }; }\n  DOT() { return { token: '[.]' }; }\n  SLASH() { return { token: '[/]' }; }\n  MAYBESLASH() { return { token: '[/]?' }; }\n  EQUALS() { return { token: '[=]' }; }\n  LBRACKET() { return { token: '\\\\[' }; }\n  RBRACKET() { return { token: '\\\\]' }; }\n  EOL() { return { token: '$' }; }\n}\n\nclass Builder {\n  constructor(factory) {\n    this.factory = factory;\n    this.commitHooks = [];\n    this.reset();\n  }\n\n  reset(options = {}) {\n    this.options = {\n      stem: 'auto',\n      clef: 'treble',\n    };\n    this.elements = {\n      notes: [],\n      accidentals: [],\n    };\n    this.rollingDuration = '8';\n    this.resetPiece();\n    Object.assign(this.options, options);\n  }\n\n  getFactory() { return this.factory; }\n\n  getElements() { return this.elements; }\n\n  addCommitHook(commitHook) {\n    this.commitHooks.push(commitHook);\n  }\n\n  resetPiece() {\n    L('resetPiece');\n    this.piece = {\n      chord: [],\n      duration: this.rollingDuration,\n      dots: 0,\n      type: undefined,\n      options: {},\n    };\n  }\n\n  setNoteDots(dots) {\n    L('setNoteDots:', dots);\n    if (dots) this.piece.dots = dots.length;\n  }\n\n  setNoteDuration(duration) {\n    L('setNoteDuration:', duration);\n    this.rollingDuration = this.piece.duration = duration || this.rollingDuration;\n  }\n\n  setNoteType(type) {\n    L('setNoteType:', type);\n    if (type) this.piece.type = type;\n  }\n\n  addNoteOption(key, value) {\n    L('addNoteOption: key:', key, 'value:', value);\n    this.piece.options[key] = value;\n  }\n\n  addNote(key, accid, octave) {\n    L('addNote:', key, accid, octave);\n    this.piece.chord.push({ key, accid, octave });\n  }\n\n  addSingleNote(key, accid, octave) {\n    L('addSingleNote:', key, accid, octave);\n    this.addNote(key, accid, octave);\n  }\n\n  addChord(notes) {\n    L('startChord');\n    if (typeof (notes[0]) !== 'object') {\n      this.addSingleNote(notes[0]);\n    } else {\n      notes.forEach(n => {\n        if (n) this.addNote(...n);\n      });\n    }\n    L('endChord');\n  }\n\n  commitPiece() {\n    L('commitPiece');\n    const { factory } = this;\n\n    if (!factory) return;\n\n    const options = { ...this.options, ...this.piece.options };\n    const { stem, clef } = options;\n    const autoStem = stem.toLowerCase() === 'auto';\n    const stemDirection = !autoStem && stem.toLowerCase() === 'up'\n      ? StaveNote.STEM_UP\n      : StaveNote.STEM_DOWN;\n\n    // Build StaveNotes.\n    const { chord, duration, dots, type } = this.piece;\n    const keys = chord.map(note => note.key + '/' + note.octave);\n    const note = factory.StaveNote({\n      keys,\n      duration,\n      dots,\n      type,\n      clef,\n      auto_stem: autoStem,\n    });\n    if (!autoStem) note.setStemDirection(stemDirection);\n\n    // Attach accidentals.\n    const accids = chord.map(note => note.accid || null);\n    accids.forEach((accid, i) => {\n      if (accid) note.addAccidental(i, factory.Accidental({ type: accid }));\n    });\n\n    // Attach dots.\n    for (let i = 0; i < dots; i++) note.addDotToAll();\n\n    this.commitHooks.forEach(fn => fn(options, note, this));\n\n    this.elements.notes.push(note);\n    this.elements.accidentals.concat(accids);\n    this.resetPiece();\n  }\n}\n\nfunction setId({ id }, note) {\n  if (id === undefined) return;\n\n  note.setAttribute('id', id);\n}\n\n\nfunction setClass(options, note) {\n  if (!options.class) return;\n\n  const commaSeparatedRegex = /\\s*,\\s*/;\n\n  options.class\n    .split(commaSeparatedRegex)\n    .forEach(className => note.addClass(className));\n}\n\nexport class EasyScore {\n  constructor(options = {}) {\n    this.setOptions(options);\n    this.defaults = {\n      clef: 'treble',\n      time: '4/4',\n      stem: 'auto',\n    };\n  }\n\n  set(defaults) {\n    Object.assign(this.defaults, defaults);\n    return this;\n  }\n\n  setOptions(options) {\n    this.options = {\n      factory: null,\n      builder: null,\n      commitHooks: [\n        setId,\n        setClass,\n        Articulation.easyScoreHook,\n      ],\n      throwOnError: false, ...options\n    };\n\n    this.factory = this.options.factory;\n    this.builder = this.options.builder || new Builder(this.factory);\n    this.grammar = new Grammar(this.builder);\n    this.parser = new Parser(this.grammar);\n    this.options.commitHooks.forEach(commitHook => this.addCommitHook(commitHook));\n    return this;\n  }\n\n  setContext(context) {\n    if (this.factory) this.factory.setContext(context);\n    return this;\n  }\n\n  parse(line, options = {}) {\n    this.builder.reset(options);\n    const result = this.parser.parse(line);\n    if (!result.success && this.options.throwOnError) {\n      throw new X('Error parsing line: ' + line, result);\n    }\n    return result;\n  }\n\n  beam(notes, options = {}) {\n    this.factory.Beam({ notes, options });\n    return notes;\n  }\n\n  tuplet(notes, options = {}) {\n    this.factory.Tuplet({ notes, options });\n    return notes;\n  }\n\n  notes(line, options = {}) {\n    options = { clef: this.defaults.clef, stem: this.defaults.stem, ...options };\n    this.parse(line, options);\n    return this.builder.getElements().notes;\n  }\n\n  voice(notes, voiceOptions) {\n    voiceOptions = { time: this.defaults.time, ...voiceOptions };\n    return this.factory.Voice(voiceOptions).addTickables(notes);\n  }\n\n  addCommitHook(commitHook) {\n    return this.builder.addCommitHook(commitHook);\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// @author Mohit Cheppudira\n//\n// ## Description\n//\n// This file implements a high level API around VexFlow. It will eventually\n// become the canonical way to use VexFlow.\n//\n// *This API is currently DRAFT*\n\nimport { Vex } from './vex';\nimport { Accidental } from './accidental';\nimport { Articulation } from './articulation';\nimport { Annotation } from './annotation';\nimport { Formatter } from './formatter';\nimport { FretHandFinger } from './frethandfinger';\nimport { StringNumber } from './stringnumber';\nimport { TextDynamics } from './textdynamics';\nimport { ModifierContext } from './modifiercontext';\nimport { MultiMeasureRest } from './multimeasurerest';\nimport { Renderer } from './renderer';\nimport { Stave } from './stave';\nimport { StaveTie } from './stavetie';\nimport { StaveLine } from './staveline';\nimport { StaveNote } from './stavenote';\nimport { StaveConnector } from './staveconnector';\nimport { System } from './system';\nimport { TickContext } from './tickcontext';\nimport { Tuplet } from './tuplet';\nimport { Voice } from './voice';\nimport { Beam } from './beam';\nimport { Curve } from './curve';\nimport { GraceNote } from './gracenote';\nimport { GraceNoteGroup } from './gracenotegroup';\nimport { NoteSubGroup } from './notesubgroup';\nimport { EasyScore } from './easyscore';\nimport { TimeSigNote } from './timesignote';\nimport { KeySigNote } from './keysignote';\nimport { ClefNote } from './clefnote';\nimport { PedalMarking } from './pedalmarking';\nimport { TextBracket } from './textbracket';\nimport { VibratoBracket } from './vibratobracket';\nimport { GhostNote } from './ghostnote';\nimport { BarNote } from './barnote';\nimport { TabNote } from './tabnote';\nimport { TabStave } from './tabstave';\nimport { TextNote } from './textnote';\n\n// To enable logging for this class. Set `Vex.Flow.Factory.DEBUG` to `true`.\nfunction L(...args) { if (Factory.DEBUG) Vex.L('Vex.Flow.Factory', args); }\n\nexport const X = Vex.MakeException('FactoryError');\n\nfunction setDefaults(params = {}, defaults) {\n  const default_options = defaults.options;\n  params = Object.assign(defaults, params);\n  params.options = Object.assign(default_options, params.options);\n  return params;\n}\n\nexport class Factory {\n  constructor(options) {\n    L('New factory: ', options);\n    const defaults = {\n      stave: {\n        space: 10,\n      },\n      renderer: {\n        context: null,\n        elementId: '',\n        backend: Renderer.Backends.SVG,\n        width: 500,\n        height: 200,\n        background: '#FFF',\n      },\n      font: {\n        face: 'Arial',\n        point: 10,\n        style: '',\n      },\n    };\n\n    this.options = defaults;\n    this.setOptions(options);\n  }\n\n  static newFromElementId(elementId, width = 500, height = 200) {\n    return new Factory({ renderer: { elementId, width, height } });\n  }\n\n  reset() {\n    this.renderQ = [];\n    this.systems = [];\n    this.staves = [];\n    this.voices = [];\n    this.stave = null; // current stave\n  }\n\n  getOptions() { return this.options; }\n  setOptions(options) {\n    for (const key of ['stave', 'renderer', 'font']) {\n      Object.assign(this.options[key], options[key]);\n    }\n    if (this.options.renderer.elementId !== null || this.options.renderer.context) {\n      this.initRenderer();\n    }\n\n    this.reset();\n  }\n\n  initRenderer() {\n    const { elementId, backend, width, height, background } = this.options.renderer;\n    if (elementId === '') {\n      throw new X('HTML DOM element not set in Factory');\n    }\n\n    this.context = Renderer.buildContext(elementId, backend, width, height, background);\n  }\n\n  getContext() { return this.context; }\n  setContext(context) { this.context = context; return this; }\n  getStave() { return this.stave; }\n  getVoices() { return this.voices; }\n\n  // Returns pixels from current stave spacing.\n  space(spacing) { return this.options.stave.space * spacing; }\n\n  Stave(params) {\n    params = setDefaults(params, {\n      x: 0,\n      y: 0,\n      width: this.options.renderer.width - this.space(1),\n      options: {\n        spacing_between_lines_px: this.options.stave.space,\n      },\n    });\n\n    const stave = new Stave(params.x, params.y, params.width, params.options);\n    this.staves.push(stave);\n    stave.setContext(this.context);\n    this.stave = stave;\n    return stave;\n  }\n\n  TabStave(params) {\n    params = setDefaults(params, {\n      x: 0,\n      y: 0,\n      width: this.options.renderer.width - this.space(1),\n      options: {\n        spacing_between_lines_px: this.options.stave.space * 1.3,\n      },\n    });\n\n    const stave = new TabStave(params.x, params.y, params.width, params.options);\n    this.staves.push(stave);\n    stave.setContext(this.context);\n    this.stave = stave;\n    return stave;\n  }\n\n  StaveNote(noteStruct) {\n    const note = new StaveNote(noteStruct);\n    if (this.stave) note.setStave(this.stave);\n    note.setContext(this.context);\n    this.renderQ.push(note);\n    return note;\n  }\n\n  GhostNote(noteStruct) {\n    const ghostNote = new GhostNote(noteStruct);\n    if (this.stave) ghostNote.setStave(this.stave);\n    ghostNote.setContext(this.context);\n    this.renderQ.push(ghostNote);\n    return ghostNote;\n  }\n\n  TextNote(textNoteStruct) {\n    const textNote = new TextNote(textNoteStruct);\n    if (this.stave) textNote.setStave(this.stave);\n    textNote.setContext(this.context);\n    this.renderQ.push(textNote);\n    return textNote;\n  }\n\n  BarNote(params) {\n    params = setDefaults(params, {\n      type: 'single',\n      options: {},\n    });\n\n    const barNote = new BarNote(params.type);\n    if (this.stave) barNote.setStave(this.stave);\n    barNote.setContext(this.context);\n    this.renderQ.push(barNote);\n    return barNote;\n  }\n\n  ClefNote(params) {\n    params = setDefaults(params, {\n      type: 'treble',\n      options: {\n        size: 'default',\n      },\n    });\n\n    const clefNote = new ClefNote(params.type, params.options.size, params.options.annotation);\n    if (this.stave) clefNote.setStave(this.stave);\n    clefNote.setContext(this.context);\n    this.renderQ.push(clefNote);\n    return clefNote;\n  }\n\n  TimeSigNote(params) {\n    params = setDefaults(params, {\n      time: '4/4',\n      options: {},\n    });\n\n    const timeSigNote = new TimeSigNote(params.time);\n    if (this.stave) timeSigNote.setStave(this.stave);\n    timeSigNote.setContext(this.context);\n    this.renderQ.push(timeSigNote);\n    return timeSigNote;\n  }\n\n  KeySigNote(params) {\n    const keySigNote = new KeySigNote(params.key, params.cancelKey, params.alterKey);\n    if (this.stave) keySigNote.setStave(this.stave);\n    keySigNote.setContext(this.context);\n    this.renderQ.push(keySigNote);\n    return keySigNote;\n  }\n\n  TabNote(noteStruct) {\n    const note = new TabNote(noteStruct);\n    if (this.stave) note.setStave(this.stave);\n    note.setContext(this.context);\n    this.renderQ.push(note);\n    return note;\n  }\n\n  GraceNote(noteStruct) {\n    const note = new GraceNote(noteStruct);\n    if (this.stave) note.setStave(this.stave);\n    note.setContext(this.context);\n    return note;\n  }\n\n  GraceNoteGroup(params) {\n    const group = new GraceNoteGroup(params.notes, params.slur);\n    group.setContext(this.context);\n    return group;\n  }\n\n  Accidental(params) {\n    params = setDefaults(params, {\n      type: null,\n      options: {},\n    });\n\n    const accid = new Accidental(params.type);\n    accid.setContext(this.context);\n    return accid;\n  }\n\n  Annotation(params) {\n    params = setDefaults(params, {\n      text: 'p',\n      vJustify: 'below',\n      hJustify: 'center',\n      fontFamily: 'Times',\n      fontSize: 14,\n      fontWeight: 'bold italic',\n      options: {},\n    });\n\n    const annotation = new Annotation(params.text);\n    annotation.setJustification(params.hJustify);\n    annotation.setVerticalJustification(params.vJustify);\n    annotation.setFont(params.fontFamily, params.fontSize, params.fontWeight);\n    annotation.setContext(this.context);\n    return annotation;\n  }\n\n  Articulation(params) {\n    params = setDefaults(params, {\n      type: 'a.',\n      position: 'above',\n      options: {},\n    });\n\n    const articulation = new Articulation(params.type);\n    articulation.setPosition(params.position);\n    articulation.setContext(this.context);\n    return articulation;\n  }\n\n  TextDynamics(params) {\n    params = setDefaults(params, {\n      text: 'p',\n      duration: 'q',\n      dots: 0,\n      line: 0,\n      options: {},\n    });\n\n    const text = new TextDynamics({\n      text: params.text,\n      line: params.line,\n      duration: params.duration,\n      dots: params.dots,\n    });\n\n    if (this.stave) text.setStave(this.stave);\n    text.setContext(this.context);\n    this.renderQ.push(text);\n    return text;\n  }\n\n  Fingering(params) {\n    params = setDefaults(params, {\n      number: '0',\n      position: 'left',\n      options: {},\n    });\n\n    const fingering = new FretHandFinger(params.number);\n    fingering.setPosition(params.position);\n    fingering.setContext(this.context);\n    return fingering;\n  }\n\n  StringNumber(params) {\n    params = setDefaults(params, {\n      number: '0',\n      position: 'left',\n      options: {},\n    });\n\n    const stringNumber = new StringNumber(params.number);\n    stringNumber.setPosition(params.position);\n    stringNumber.setContext(this.context);\n    return stringNumber;\n  }\n\n  TickContext() {\n    return new TickContext().setContext(this.context);\n  }\n\n  ModifierContext() {\n    return new ModifierContext();\n  }\n\n  MultiMeasureRest(params) {\n    const multimeasurerest = new MultiMeasureRest(params.number_of_measures, params);\n    multimeasurerest.setContext(this.context);\n    this.renderQ.push(multimeasurerest);\n    return multimeasurerest;\n  }\n\n  Voice(params) {\n    params = setDefaults(params, {\n      time: '4/4',\n      options: {},\n    });\n    const voice = new Voice(params.time);\n    this.voices.push(voice);\n    return voice;\n  }\n\n  StaveConnector(params) {\n    params = setDefaults(params, {\n      top_stave: null,\n      bottom_stave: null,\n      type: 'double',\n      options: {},\n    });\n    const connector = new StaveConnector(params.top_stave, params.bottom_stave);\n    connector.setType(params.type).setContext(this.context);\n    this.renderQ.push(connector);\n    return connector;\n  }\n\n  Formatter() {\n    return new Formatter();\n  }\n\n  Tuplet(params) {\n    params = setDefaults(params, {\n      notes: [],\n      options: {},\n    });\n\n    const tuplet = new Tuplet(params.notes, params.options).setContext(this.context);\n    this.renderQ.push(tuplet);\n    return tuplet;\n  }\n\n  Beam(params) {\n    params = setDefaults(params, {\n      notes: [],\n      options: {\n        autoStem: false,\n        secondaryBeamBreaks: [],\n      },\n    });\n\n    const beam = new Beam(params.notes, params.options.autoStem).setContext(this.context);\n    beam.breakSecondaryAt(params.options.secondaryBeamBreaks);\n    this.renderQ.push(beam);\n    return beam;\n  }\n\n  Curve(params) {\n    params = setDefaults(params, {\n      from: null,\n      to: null,\n      options: {},\n    });\n\n    const curve = new Curve(params.from, params.to, params.options).setContext(this.context);\n    this.renderQ.push(curve);\n    return curve;\n  }\n\n  StaveTie(params) {\n    params = setDefaults(params, {\n      from: null,\n      to: null,\n      first_indices: [0],\n      last_indices: [0],\n      text: null,\n      options: {\n        direction: undefined,\n      },\n    });\n\n    const tie = new StaveTie({\n      first_note: params.from,\n      last_note: params.to,\n      first_indices: params.first_indices,\n      last_indices: params.last_indices,\n    }, params.text);\n\n    if (params.options.direction) tie.setDirection(params.options.direction);\n    tie.setContext(this.context);\n    this.renderQ.push(tie);\n    return tie;\n  }\n\n  StaveLine(params) {\n    params = setDefaults(params, {\n      from: null,\n      to: null,\n      first_indices: [0],\n      last_indices: [0],\n      options: {},\n    });\n\n    const line = new StaveLine({\n      first_note: params.from,\n      last_note: params.to,\n      first_indices: params.first_indices,\n      last_indices: params.last_indices,\n    });\n\n    if (params.options.text) line.setText(params.options.text);\n    if (params.options.font) line.setFont(params.options.font);\n\n    line.setContext(this.context);\n    this.renderQ.push(line);\n    return line;\n  }\n\n  VibratoBracket(params) {\n    params = setDefaults(params, {\n      from: null,\n      to: null,\n      options: {\n        harsh: false,\n      },\n    });\n\n    const vibratoBracket = new VibratoBracket({\n      start: params.from,\n      stop: params.to,\n    });\n\n    if (params.options.line) vibratoBracket.setLine(params.options.line);\n    if (params.options.harsh) vibratoBracket.setHarsh(params.options.harsh);\n\n    vibratoBracket.setContext(this.context);\n    this.renderQ.push(vibratoBracket);\n\n    return vibratoBracket;\n  }\n\n  TextBracket(params) {\n    params = setDefaults(params, {\n      from: null,\n      to: null,\n      text: '',\n      options: {\n        superscript: '',\n        position: 1,\n      },\n    });\n\n    const textBracket = new TextBracket({\n      start: params.from,\n      stop: params.to,\n      text: params.text,\n      superscript: params.options.superscript,\n      position: params.options.position,\n    });\n\n    if (params.options.line) textBracket.setLine(params.options.line);\n    if (params.options.font) textBracket.setFont(params.options.font);\n\n    textBracket.setContext(this.context);\n    this.renderQ.push(textBracket);\n    return textBracket;\n  }\n\n  System(params = {}) {\n    params.factory = this;\n    const system = new System(params).setContext(this.context);\n    this.systems.push(system);\n    return system;\n  }\n\n  EasyScore(params = {}) {\n    params.factory = this;\n    return new EasyScore(params);\n  }\n\n  PedalMarking(params = {}) {\n    params = setDefaults(params, {\n      notes: [],\n      options: {\n        style: 'mixed',\n      },\n    });\n\n    const pedal = new PedalMarking(params.notes);\n    pedal.setStyle(PedalMarking.StylesString[params.options.style]);\n    pedal.setContext(this.context);\n    this.renderQ.push(pedal);\n    return pedal;\n  }\n\n  NoteSubGroup(params = {}) {\n    params = setDefaults(params, {\n      notes: [],\n      options: {},\n    });\n\n    const group = new NoteSubGroup(params.notes);\n    group.setContext(this.context);\n    return group;\n  }\n\n  draw() {\n    this.systems.forEach(i => i.setContext(this.context).format());\n    this.staves.forEach(i => i.setContext(this.context).draw());\n    this.voices.forEach(i => i.setContext(this.context).draw());\n    this.renderQ.forEach(i => {\n      if (!i.isRendered()) i.setContext(this.context).draw();\n    });\n    this.systems.forEach(i => i.setContext(this.context).draw());\n    this.reset();\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// This class implements a musical system, which is a collection of staves,\n// each which can have one or more voices. All voices across all staves in\n// the system are formatted together.\n\nimport { Element } from './element';\nimport { Factory } from './factory';\nimport { Formatter } from './formatter';\nimport { Note } from './note';\n\nfunction setDefaults(params, defaults) {\n  const default_options = defaults.options;\n  params = Object.assign(defaults, params);\n  params.options = Object.assign(default_options, params.options);\n  return params;\n}\n\nexport class System extends Element {\n  constructor(params = {}) {\n    super();\n    this.setAttribute('type', 'System');\n    this.setOptions(params);\n    this.parts = [];\n  }\n\n  setOptions(options = {}) {\n    this.options = setDefaults(options, {\n      x: 10,\n      y: 10,\n      width: 500,\n      connector: null,\n      spaceBetweenStaves: 12, // stave spaces\n      factory: null,\n      debugFormatter: false,\n      formatIterations: 0,   // number of formatter tuning steps\n      options: {},\n    });\n\n    this.factory = this.options.factory || new Factory({ renderer: { el: null } });\n  }\n\n  setContext(context) {\n    super.setContext(context);\n    this.factory.setContext(context);\n    return this;\n  }\n\n  addConnector(type = 'double') {\n    this.connector = this.factory.StaveConnector({\n      top_stave: this.parts[0].stave,\n      bottom_stave: this.parts[this.parts.length - 1].stave,\n      type,\n    });\n    return this.connector;\n  }\n\n  addStave(params) {\n    params = setDefaults(params, {\n      stave: null,\n      voices: [],\n      spaceAbove: 0, // stave spaces\n      spaceBelow: 0, // stave spaces\n      debugNoteMetrics: false,\n      options: { left_bar: false },\n    });\n\n    if (!params.stave) {\n      params.stave = this.factory.Stave({\n        x: this.options.x,\n        y: this.options.y,\n        width: this.options.width,\n        options: params.options,\n      });\n    }\n\n    params.voices.forEach(voice =>\n      voice\n        .setContext(this.context)\n        .setStave(params.stave)\n        .getTickables()\n        .forEach(tickable => tickable.setStave(params.stave))\n    );\n\n    this.parts.push(params);\n    return params.stave;\n  }\n\n  format() {\n    const formatter = new Formatter();\n    this.formatter = formatter;\n\n    let y = this.options.y;\n    let startX = 0;\n    let allVoices = [];\n    const debugNoteMetricsYs = [];\n\n    // Join the voices for each stave.\n    this.parts.forEach(part => {\n      y = y + part.stave.space(part.spaceAbove);\n      part.stave.setY(y);\n      formatter.joinVoices(part.voices);\n      y = y + part.stave.space(part.spaceBelow);\n      y = y + part.stave.space(this.options.spaceBetweenStaves);\n      if (part.debugNoteMetrics) {\n        debugNoteMetricsYs.push({ y, voice: part.voices[0] });\n        y += 15;\n      }\n      allVoices = allVoices.concat(part.voices);\n\n      startX = Math.max(startX, part.stave.getNoteStartX());\n    });\n\n    // Update the start position of all staves.\n    this.parts.forEach(part => part.stave.setNoteStartX(startX));\n    const justifyWidth = this.options.width - (startX - this.options.x) - Note.STAVEPADDING;\n    formatter.format(allVoices, justifyWidth);\n\n    for (let i = 0; i < this.options.formatIterations; i++) {\n      formatter.tune();\n    }\n\n    this.startX = startX;\n    this.debugNoteMetricsYs = debugNoteMetricsYs;\n    this.lastY = y;\n  }\n\n  draw() {\n    // Render debugging information, if requested.\n    const ctx = this.checkContext();\n    this.setRendered();\n\n    if (this.options.debugFormatter) {\n      Formatter.plotDebugging(ctx, this.formatter, this.startX, this.options.y, this.lastY);\n    }\n\n    this.debugNoteMetricsYs.forEach(d => {\n      d.voice.getTickables().forEach(note => Note.plotMetrics(ctx, note, d.y));\n    });\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n\nimport { Vex } from './vex';\nimport { Flow } from './tables';\nimport { Element } from './element';\nimport { Fraction } from './fraction';\nimport { Renderer } from './renderer';\nimport { Formatter } from './formatter';\nimport { Music } from './music';\nimport { Glyph } from './glyph';\nimport { Stave } from './stave';\nimport { StaveNote } from './stavenote';\nimport { StaveModifier } from './stavemodifier';\nimport { StaveTempo } from './stavetempo';\nimport { Voice } from './voice';\nimport { Accidental } from './accidental';\nimport { Beam } from './beam';\nimport { StaveTie } from './stavetie';\nimport { TabStave } from './tabstave';\nimport { TabNote } from './tabnote';\nimport { Bend } from './bend';\nimport { Vibrato } from './vibrato';\nimport { VibratoBracket } from './vibratobracket';\nimport { Note } from './note';\nimport { ModifierContext } from './modifiercontext';\nimport { MultiMeasureRest } from './multimeasurerest';\nimport { TickContext } from './tickcontext';\nimport { Articulation } from './articulation';\nimport { Annotation } from './annotation';\nimport { Barline } from './stavebarline';\nimport { NoteHead } from './notehead';\nimport { StaveConnector } from './staveconnector';\nimport { ClefNote } from './clefnote';\nimport { KeySignature } from './keysignature';\nimport { KeySigNote } from './keysignote';\nimport { TimeSignature } from './timesignature';\nimport { TimeSigNote } from './timesignote';\nimport { Stem } from './stem';\nimport { TabTie } from './tabtie';\nimport { Clef } from './clef';\nimport { Dot } from './dot';\nimport { Modifier } from './modifier';\nimport { TabSlide } from './tabslide';\nimport { Tuplet } from './tuplet';\nimport { GraceNote } from './gracenote';\nimport { GraceTabNote } from './gracetabnote';\nimport { Tuning } from './tuning';\nimport { KeyManager } from './keymanager';\nimport { StaveHairpin } from './stavehairpin';\nimport { BoundingBox } from './boundingbox';\nimport { Stroke } from './strokes';\nimport { TextNote } from './textnote';\nimport { Curve } from './curve';\nimport { TextDynamics } from './textdynamics';\nimport { StaveLine } from './staveline';\nimport { Ornament } from './ornament';\nimport { PedalMarking } from './pedalmarking';\nimport { TextBracket } from './textbracket';\nimport { FretHandFinger } from './frethandfinger';\nimport { Repetition } from './staverepetition';\nimport { BarNote } from './barnote';\nimport { GhostNote } from './ghostnote';\nimport { NoteSubGroup } from './notesubgroup';\nimport { GraceNoteGroup } from './gracenotegroup';\nimport { Tremolo } from './tremolo';\nimport { StringNumber } from './stringnumber';\nimport { Crescendo } from './crescendo';\nimport { Volta } from './stavevolta';\nimport { Font } from './fonts/vexflow_font';\nimport { System } from './system';\nimport { Factory } from './factory';\nimport { Parser } from './parser';\nimport { EasyScore } from './easyscore';\nimport { Registry } from './registry';\n\nVex.Flow = Flow;\nVex.Flow.Element = Element;\nVex.Flow.Fraction = Fraction;\nVex.Flow.Renderer = Renderer;\nVex.Flow.Formatter = Formatter;\nVex.Flow.Music = Music;\nVex.Flow.Glyph = Glyph;\nVex.Flow.Stave = Stave;\nVex.Flow.StaveNote = StaveNote;\nVex.Flow.StaveModifier = StaveModifier;\nVex.Flow.StaveTempo = StaveTempo;\nVex.Flow.Voice = Voice;\nVex.Flow.Accidental = Accidental;\nVex.Flow.Beam = Beam;\nVex.Flow.StaveTie = StaveTie;\nVex.Flow.TabStave = TabStave;\nVex.Flow.TabNote = TabNote;\nVex.Flow.Bend = Bend;\nVex.Flow.Vibrato = Vibrato;\nVex.Flow.VibratoBracket = VibratoBracket;\nVex.Flow.Note = Note;\nVex.Flow.ModifierContext = ModifierContext;\nVex.Flow.MultiMeasureRest = MultiMeasureRest;\nVex.Flow.TickContext = TickContext;\nVex.Flow.Articulation = Articulation;\nVex.Flow.Annotation = Annotation;\nVex.Flow.Barline = Barline;\nVex.Flow.NoteHead = NoteHead;\nVex.Flow.StaveConnector = StaveConnector;\nVex.Flow.ClefNote = ClefNote;\nVex.Flow.KeySignature = KeySignature;\nVex.Flow.KeySigNote = KeySigNote;\nVex.Flow.TimeSignature = TimeSignature;\nVex.Flow.TimeSigNote = TimeSigNote;\nVex.Flow.Stem = Stem;\nVex.Flow.TabTie = TabTie;\nVex.Flow.Clef = Clef;\nVex.Flow.Dot = Dot;\nVex.Flow.Modifier = Modifier;\nVex.Flow.TabSlide = TabSlide;\nVex.Flow.Tuplet = Tuplet;\nVex.Flow.GraceNote = GraceNote;\nVex.Flow.GraceTabNote = GraceTabNote;\nVex.Flow.Tuning = Tuning;\nVex.Flow.KeyManager = KeyManager;\nVex.Flow.StaveHairpin = StaveHairpin;\nVex.Flow.BoundingBox = BoundingBox;\nVex.Flow.Stroke = Stroke;\nVex.Flow.TextNote = TextNote;\nVex.Flow.Curve = Curve;\nVex.Flow.TextDynamics = TextDynamics;\nVex.Flow.StaveLine = StaveLine;\nVex.Flow.Ornament = Ornament;\nVex.Flow.PedalMarking = PedalMarking;\nVex.Flow.TextBracket = TextBracket;\nVex.Flow.FretHandFinger = FretHandFinger;\nVex.Flow.Repetition = Repetition;\nVex.Flow.BarNote = BarNote;\nVex.Flow.GhostNote = GhostNote;\nVex.Flow.NoteSubGroup = NoteSubGroup;\nVex.Flow.GraceNoteGroup = GraceNoteGroup;\nVex.Flow.Tremolo = Tremolo;\nVex.Flow.StringNumber = StringNumber;\nVex.Flow.Crescendo = Crescendo;\nVex.Flow.Volta = Volta;\nVex.Flow.Font = Font;\nVex.Flow.System = System;\nVex.Flow.Factory = Factory;\nVex.Flow.Parser = Parser;\nVex.Flow.EasyScore = EasyScore;\nVex.Flow.Registry = Registry;\n\nexport default Vex;\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n//\n// This class implements diatonic key management.\n\nimport { Vex } from './vex';\nimport { Music } from './music';\n\nexport class KeyManager {\n  constructor(key) {\n    this.music = new Music();\n    this.setKey(key);\n  }\n\n  setKey(key) {\n    this.key = key;\n    this.reset();\n    return this;\n  }\n\n  getKey() { return this.key; }\n\n  reset() {\n    this.keyParts = this.music.getKeyParts(this.key);\n\n    this.keyString = this.keyParts.root;\n    if (this.keyParts.accidental) this.keyString += this.keyParts.accidental;\n\n    const is_supported_type = Music.scaleTypes[this.keyParts.type];\n    if (!is_supported_type) {\n      throw new Vex.RERR('BadArguments', `Unsupported key type: ${this.key}`);\n    }\n\n    this.scale = this.music.getScaleTones(\n      this.music.getNoteValue(this.keyString),\n      Music.scaleTypes[this.keyParts.type]\n    );\n\n    this.scaleMap = {};\n    this.scaleMapByValue = {};\n    this.originalScaleMapByValue = {};\n\n    const noteLocation = Music.root_indices[this.keyParts.root];\n\n    for (let i = 0; i < Music.roots.length; ++i) {\n      const index = (noteLocation + i) % Music.roots.length;\n      const rootName = Music.roots[index];\n\n      const noteName = this.music.getRelativeNoteName(rootName, this.scale[i]);\n      this.scaleMap[rootName] = noteName;\n      this.scaleMapByValue[this.scale[i]] = noteName;\n      this.originalScaleMapByValue[this.scale[i]] = noteName;\n    }\n\n    return this;\n  }\n\n  getAccidental(key) {\n    const root = this.music.getKeyParts(key).root;\n    const parts = this.music.getNoteParts(this.scaleMap[root]);\n\n    return {\n      note: this.scaleMap[root],\n      accidental: parts.accidental,\n    };\n  }\n\n  selectNote(note) {\n    note = note.toLowerCase();\n    const parts = this.music.getNoteParts(note);\n\n    // First look for matching note in our altered scale\n    const scaleNote = this.scaleMap[parts.root];\n    const modparts = this.music.getNoteParts(scaleNote);\n\n    if (scaleNote === note) {\n      return {\n        'note': scaleNote,\n        'accidental': parts.accidental,\n        'change': false,\n      };\n    }\n\n    // Then search for a note of equivalent value in our altered scale\n    const valueNote = this.scaleMapByValue[this.music.getNoteValue(note)];\n    if (valueNote != null) {\n      return {\n        'note': valueNote,\n        'accidental': this.music.getNoteParts(valueNote).accidental,\n        'change': false,\n      };\n    }\n\n    // Then search for a note of equivalent value in the original scale\n    const originalValueNote = this.originalScaleMapByValue[\n      this.music.getNoteValue(note)];\n    if (originalValueNote != null) {\n      this.scaleMap[modparts.root] = originalValueNote;\n      delete this.scaleMapByValue[this.music.getNoteValue(scaleNote)];\n      this.scaleMapByValue[this.music.getNoteValue(note)] = originalValueNote;\n      return {\n        'note': originalValueNote,\n        'accidental': this.music.getNoteParts(originalValueNote).accidental,\n        'change': true,\n      };\n    }\n\n    // Then try to unmodify a currently modified note.\n    if (modparts.root === note) {\n      delete this.scaleMapByValue[this.music.getNoteValue(this.scaleMap[parts.root])];\n      this.scaleMapByValue[this.music.getNoteValue(modparts.root)] =  modparts.root;\n      this.scaleMap[modparts.root] = modparts.root;\n      return {\n        'note': modparts.root,\n        'accidental': null,\n        'change': true,\n      };\n    }\n\n    // Last resort -- shitshoot\n    delete this.scaleMapByValue[this.music.getNoteValue(this.scaleMap[parts.root])];\n    this.scaleMapByValue[this.music.getNoteValue(note)] = note;\n\n    delete this.scaleMap[modparts.root];\n    this.scaleMap[modparts.root] = note;\n\n    return {\n      note,\n      'accidental': parts.accidental,\n      'change': true,\n    };\n  }\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(3607);\n"],"names":["root","factory","exports","module","define","amd","this","s","a","o","h","u","r","t","l","i","Error","code","n","call","length","e","c","d","p","encode","f","getTypeOf","charCodeAt","push","charAt","join","decode","substr","replace","uint8array","Uint8Array","Array","indexOf","compressedSize","uncompressedSize","crc32","compression","compressedContent","prototype","getContentWorker","Promise","resolve","pipe","uncompressWorker","on","streamInfo","data_length","getCompressedWorker","withStreamInfo","createWorkerFrom","compressWorker","STORE","magic","DEFLATE","base64","binary","dir","createFolders","date","compressionOptions","comment","unixPermissions","dosPermissions","lie","Uint16Array","Uint32Array","_pako","_pakoAction","_pakoOptions","meta","inherits","processChunk","_createPako","transformTo","data","flush","cleanUp","raw","level","onData","pako","A","String","fromCharCode","file","O","utf8encode","I","name","m","_","g","b","v","y","w","k","x","S","z","C","getUTCHours","getUTCMinutes","getUTCSeconds","getUTCFullYear","getUTCMonth","getUTCDate","B","E","fileRecord","R","LOCAL_FILE_HEADER","dirRecord","CENTRAL_FILE_HEADER","bytesWritten","zipComment","zipPlatform","encodeFileName","streamFiles","accumulate","contentBuffer","dirRecords","currentSourceOffset","entriesCount","currentFile","_sources","percent","openedSource","closedSource","DATA_DESCRIPTOR","shift","CENTRAL_DIRECTORY_END","prepareNextSource","previous","isPaused","pause","resume","registerPrevious","end","error","generatedError","lock","generateWorker","platform","forEach","options","_compressWorker","arguments","files","Object","create","clone","loadAsync","support","defaults","version","external","decompressed","extend","checkCRC32","optimizedBinaryString","decodeFileName","utf8decode","isNode","isStream","reject","prepareContent","then","load","all","fileNameStr","fileCommentStr","_upstreamEnded","_bindStream","_stream","Readable","_helper","emit","_read","Buffer","newBufferFrom","from","allocBuffer","alloc","fill","isBuffer","Date","toUpperCase","parseInt","slice","substring","lastIndexOf","toString","filter","test","folder","remove","generate","generateInternalStream","type","mimeType","toLowerCase","checkSupport","generateAsync","generateNodeStream","toNodejsStream","stream","byteAt","zero","lastIndexOfSignature","readAndCheckSignature","readData","checkOffset","index","checkIndex","setIndex","skip","readInt","readString","readDate","UTC","subarray","ZIP64_CENTRAL_DIRECTORY_LOCATOR","ZIP64_CENTRAL_DIRECTORY_END","destType","propName","dataIsReady","max","_tickScheduled","_tickAndRepeat","delay","isFinished","_tick","Math","min","extraStreamInfo","isLocked","_listeners","mergeStreamInfo","hasOwnProperty","nodestream","_internalType","_outputType","_mimeType","_worker","newBlob","concat","apply","set","objectMode","array","string","arraybuffer","ArrayBuffer","nodebuffer","blob","Blob","size","self","BlobBuilder","WebKitBlobBuilder","MozBlobBuilder","MSBlobBuilder","append","getBlob","leftOver","applyFromCharCode","Utf8DecodeWorker","Utf8EncodeWorker","stringifyByChunk","stringifyByChar","applyCanBeUsed","floor","buffer","byteLength","MAX_VALUE_16BITS","MAX_VALUE_32BITS","pretty","FileReader","onload","target","result","onerror","readAsArrayBuffer","loadOptions","checkSignature","reader","isSignature","readBlockEndOfCentral","diskNumber","diskWithCentralDirStart","centralDirRecordsOnThisDisk","centralDirRecords","centralDirSize","centralDirOffset","zipCommentLength","readBlockZip64EndOfCentral","zip64EndOfCentralSize","zip64ExtensibleData","id","value","readBlockZip64EndOfCentralLocator","diskWithZip64CentralDirStart","relativeOffsetEndOfZip64CentralDir","disksCount","readLocalFiles","localHeaderOffset","readLocalPart","handleUTF8","processAttributes","readCentralDir","zip64","readCentralPart","readEndOfCentral","abs","prepareReader","isEncrypted","bitFlag","useUTF8","fileNameLength","fileName","compressionMethod","versionMadeBy","extraFieldsLength","fileCommentLength","diskNumberStart","internalFileAttributes","externalFileAttributes","readExtraFields","parseZIP64ExtraField","fileComment","extraFields","findExtraFieldUnicodePath","findExtraFieldUnicodeComment","_data","_dataBinary","internalStream","_decompressWorker","async","nodeStream","MutationObserver","WebKitMutationObserver","document","createTextNode","observe","characterData","setImmediate","MessageChannel","createElement","onreadystatechange","parentNode","removeChild","documentElement","appendChild","setTimeout","port1","onmessage","port2","postMessage","window","TypeError","state","queue","outcome","promise","onFulfilled","callFulfilled","otherCallFulfilled","onRejected","callRejected","otherCallRejected","status","finally","constructor","catch","race","immediate","assign","method","chunkSize","windowBits","memLevel","strategy","to","gzip","err","msg","ended","chunks","strm","avail_out","deflateInit2","header","deflateSetHeader","dictionary","string2buf","deflateSetDictionary","_dict_set","input","next_in","avail_in","output","Buf8","next_out","deflate","onEnd","buf2binstring","shrinkBuf","deflateEnd","flattenChunks","Deflate","deflateRaw","inflateInit2","Z_OK","inflateGetHeader","Z_FINISH","Z_NO_FLUSH","binstring2buf","inflate","Z_NEED_DICT","inflateSetDictionary","Z_BUF_ERROR","Z_STREAM_END","Z_SYNC_FLUSH","utf8border","buf2string","arraySet","inflateEnd","Inflate","inflateRaw","ungzip","Int32Array","setTyped","Buf16","Buf32","Z_PARTIAL_FLUSH","Z_FULL_FLUSH","Z_BLOCK","Z_TREES","Z_ERRNO","Z_STREAM_ERROR","Z_DATA_ERROR","Z_NO_COMPRESSION","Z_BEST_SPEED","Z_BEST_COMPRESSION","Z_DEFAULT_COMPRESSION","Z_FILTERED","Z_HUFFMAN_ONLY","Z_RLE","Z_FIXED","Z_DEFAULT_STRATEGY","Z_BINARY","Z_TEXT","Z_UNKNOWN","Z_DEFLATED","T","D","F","pending","pending_buf","pending_out","total_out","N","_tr_flush_block","block_start","strstart","U","P","L","max_chain_length","prev_length","nice_match","w_size","w_mask","prev","good_match","lookahead","match_start","j","window_size","hash_size","head","wrap","adler","total_in","insert","ins_h","hash_shift","hash_mask","Z","match_length","_tr_tally","max_lazy_match","last_lit","W","prev_match","match_available","M","good_length","max_lazy","nice_length","max_chain","func","H","pending_buf_size","gzhead","gzindex","last_flush","w_bits","hash_bits","dyn_ltree","dyn_dtree","bl_tree","l_desc","d_desc","bl_desc","bl_count","heap","heap_len","heap_max","depth","l_buf","lit_bufsize","d_buf","opt_len","static_len","matches","bi_buf","bi_valid","G","data_type","_tr_init","K","Y","deflateInit","deflateReset","deflateResetKeep","text","hcrc","extra","time","os","_tr_align","_tr_stored_block","deflateInfo","xflags","extra_len","done","dmax","wsize","whave","wnext","hold","bits","lencode","distcode","lenbits","distbits","mode","sane","last","havedict","flags","check","total","wbits","offset","ncode","nlen","ndist","have","next","lens","work","lendyn","distdyn","back","was","inflateReset","inflateReset2","inflateResetKeep","inflateInit","inflateInfo","static_tree","extra_bits","extra_base","elems","max_length","has_stree","dyn_tree","max_code","stat_desc","X","V","q","J","splice","definition","noop","undefinedType","isIE","navigator","userAgent","logMethods","bindMethod","obj","methodName","bind","Function","traceForIE","console","log","trace","realMethod","undefined","replaceLoggingMethods","loggerName","methodFactory","debug","enableLoggingWhenConsoleArrives","defaultMethodFactory","Logger","defaultLevel","currentLevel","storageKey","getPersistedLevel","storedLevel","localStorage","ignore","cookie","location","encodeURIComponent","exec","levels","getLevel","setLevel","persist","SILENT","levelNum","levelName","persistLevelIfPossible","setDefaultLevel","resetLevel","removeItem","clearPersistedLevel","enableAll","TRACE","disableAll","initialLevel","defaultLogger","_loggersByName","getLogger","logger","_log","noConflict","getLoggers","Fraction","numerator","denominator","wholeValue","simplify","setRealValue","static","f1","f2","RealValue","Denominator","Numerator","fraction","sum","Add","Sub","round","WholeValue","GetExpandedNumerator","calculateNumberOfNeededDots","num","product","expandedNumerator","pow","IsNegative","realValue","expand","expansionValue","Quantize","maxAllowedDenominator","upTestFraction","downTestFraction","Equals","CompareTo","diff","lt","frac","lte","gt","gte","greatestCommonDenominator","whole","maximumAllowedNumber","factor","isOnBeat","timeSignature","beatDistance","distanceFromBeat","FloatInaccuracyTolerance","beatStep","Matrix2D","matrix","angle","rotation","cos","sin","scalarMultiplication","scalar","getTransposeMatrix","transpose","vectorMultiplication","point","PointF2D","measureErrors","errors","tempErrors","finalizeMeasure","measureNumber","list","pushMeasureError","errorMsg","OSMDColor","red","green","blue","alpha","Black","DeepSkyBlue","Green","Magenta","Orange","Red","Disabled","DarkBlue","Debug1","Debug2","Debug3","NoteEnum","AccidentalEnum","Pitch","fundamentalNote","octave","accidental","accidentalXml","NONE","halfTone","octXmlDiff","HalfTonesFromAccidental","frequency","calcFrequency","note","noteEnum","lines","enums","pitchEnumValues","originalIndex","octaveShift","newIndex","pitch","newHalfTone","AccidentalHalfTones","WrapAroundCheck","limit","overflow","halftone","halfToneSteps","octaveSteps","LN10","halftoneFactor","key","calcFractionalKey","SHARP","halftoneInOctave","FLAT","NATURAL","DOUBLESHARP","DOUBLEFLAT","TRIPLESHARP","TRIPLEFLAT","QUARTERTONESHARP","QUARTERTONEFLAT","SLASHFLAT","THREEQUARTERSSHARP","THREEQUARTERSFLAT","SLASHQUARTERSHARP","SLASHSHARP","DOUBLESLASHFLAT","SORI","KORON","halfTones","acc","Octave","FundamentalNote","Accidental","AccidentalXml","Frequency","OctaveXmlDifference","getHalfTone","getTransposedPitch","getHigherPitchByTransposeFactor","getLowerPitchByTransposeFactor","DoEnharmonicChange","getPreviousFundamentalNote","AccidentalFromHalfTones","getNextFundamentalNote","ToString","accidentalString","accidentalVexflow","getNoteEnumString","OperatorEquals","p2","p1","OperatorNotEqual","OperatorFundamentalGreaterThan","OperatorFundamentalLessThan","noteEnumIndex","newNoteEnum","newOctave","fundamental","LN2","Empty","RectangleF2D","width","height","Location","Size","SizeF2D","FontStyles","Fonts","TextAlignmentEnum","textAlignment","LeftTop","LeftCenter","LeftBottom","CenterTop","CenterCenter","CenterBottom","RightTop","RightCenter","RightBottom","TieTypes","zip","content","rootFile","DOMParser","parseFromString","getElementsByTagName","getAttribute","xml","doc","IXmlElement","message","elem","hasAttributes","nodeName","firstAttribute","attributes","hasElements","hasChildNodes","childNodes","nodeType","Node","TEXT_NODE","nodeValue","attribute","attributeName","getNamedItem","attrs","element","elementName","nodes","node","ELEMENT_NODE","elements","ret","nameUnset","str","wordRegExString","ignoreCase","RegExp","AbstractGraphicalExpression","GraphicalObject","parentStaffline","expression","measure","super","parentMeasure","boundingBox","BoundingBox","PositionAndShape","parentStaffLine","AbstractExpressions","rules","ParentMusicSystem","Label","label","ParentStaffLine","SourceExpression","Placement","AbstractGraphicalInstruction","parent","Parent","keySignatureNoteAlterationsDict","Dictionary","currentAlterationsComparedToKeyInstructionList","currentInMeasureNoteAlterationsDict","ActiveKeyInstruction","activeKeyInstruction","reactOnKeyInstructionChange","doCalculationsAtEndOfMeasure","clear","keys","setValue","getValue","checkAccidental","graphicalNote","pitchKey","isInCurrentAlterationsToKeyList","containsKey","inMeasureAlterationAccidental","isAlterAmbiguousAccidental","MusicSheetCalculator","symbolFactory","addGraphicalAccidental","noteEnums","AlteratedNotes","keyAccidentalType","Key","ColDirEnum","dataObject","isSymbol","relativePositionHasBeenSet","xBordersHaveBeenSet","yBordersHaveBeenSet","absolutePosition","relativePosition","marginSize","upperLeftCorner","upperLeftMarginCorner","borderLeft","borderRight","borderTop","borderBottom","borderMarginLeft","borderMarginRight","borderMarginTop","borderMarginBottom","childElements","RelativePositionHasBeenSet","XBordersHaveBeenSet","YBordersHaveBeenSet","AbsolutePosition","RelativePosition","MarginSize","UpperLeftCorner","UpperLeftMarginCorner","BorderLeft","calculateRectangle","BorderRight","BorderTop","BorderBottom","BorderMarginLeft","calculateMarginRectangle","BorderMarginRight","BorderMarginTop","BorderMarginBottom","BoundingRectangle","boundingRectangle","BoundingMarginRectangle","boundingMarginRectangle","ChildElements","DataObject","Center","setAbsolutePositionFromParent","calculateAbsolutePosition","calculateAbsolutePositionsRecursiveWithoutTopelement","idx","len","calculateAbsolutePositionsRecursive","calculateAbsolutePositionsOfChildren","calculateBoundingBox","minLeft","Number","MAX_VALUE","maxRight","MIN_VALUE","minTop","maxBottom","minMarginLeft","maxMarginRight","minMarginTop","maxMarginBottom","childElement","calculateTopBottomBorders","EngravingRules","FixStafflineBoundingBox","StaffLineActivitySymbol","computeNonOverlappingPositionWithMargin","placementPsi","direction","position","currentPosition","hasBeenMoved","Left","Right","calculateMarginPositionAlongDirection","Up","Down","ArgumentOutOfRangeException","collisionDetection","psi","overlapWidth","overlapHeight","liesInsideBorders","leftBorderInside","rightBorderInside","topBorderInside","bottomBorderInside","pointLiesInsideBorders","marginCollisionDetection","liesInsideMargins","leftMarginInside","rightMarginInside","topMarginInside","bottomMarginInside","pointLiesInsideMargins","computeNonOverlappingPosition","calculatePositionAlongDirection","getClickedObjectOfType","clickPosition","innerObject","getObjectsInRegion","region","liesInside","className","child","isInstanceOfClass","createFromLocationAndSize","toBePlaced","shiftDistance","Clickable","OutlineAndFillStyleEnum","AutoColorSet","NoteState","GraphicalLayers","StyleSets","OUTLINE_AND_FILL_STYLE_DICT","BaseWritingColor","FollowingCursor","AlternativeFollowingCursor","PlaybackCursor","Highlighted","ErrorUnderlay","Selected","SelectionSymbol","DebugColor1","DebugColor2","DebugColor3","SplitScreenDivision","GreyTransparentOverlay","MarkedArea1","MarkedArea2","MarkedArea3","MarkedArea4","MarkedArea5","MarkedArea6","MarkedArea7","MarkedArea8","MarkedArea9","MarkedArea10","Comment1","Comment2","Comment3","Comment4","Comment5","Comment6","Comment7","Comment8","Comment9","Comment10","PhonicScoreModes","MusicSymbolDrawingStyle","DrawingMode","DrawingParametersEnum","ColoringModes","drawingParameters","default","drawTitle","drawSubtitle","drawLyricist","drawComposer","drawCredits","drawPartNames","fingeringPosition","PlacementEnum","drawHiddenNotes","drawingParametersEnum","allon","setForAllOn","thumbnail","setForThumbnail","leadsheet","setForLeadsheet","compact","setForCompactMode","compacttight","setForCompactTightMode","setForDefault","drawHighlights","drawErrors","drawSelectionStartSymbol","drawSelectionEndSymbol","drawCursors","drawActivitySymbols","drawScrollIndicator","drawComments","drawMarkedAreas","DrawTitle","DrawSubtitle","DrawComposer","DrawLyricist","DrawPartNames","CompactMode","loadDefaultValues","DrawCredits","VoiceSpacingMultiplierVexflow","VoiceSpacingAddendVexflow","MinSkyBottomDistBetweenStaves","MinSkyBottomDistBetweenSystems","BetweenStaffDistance","StaffDistance","MinimumDistanceBetweenSystems","PageBottomMargin","PageLeftMargin","PageRightMargin","RenderTitle","RenderSubtitle","RenderComposer","RenderLyricist","RenderPartNames","RenderPartAbbreviations","FingeringPosition","Rules","NoteDistances","NoteDistancesScalingFactors","DurationDistanceDict","DurationScalingDistanceDict","NoteToGraphicalNoteMapObjectCount","SamplingUnit","unit","SheetTitleHeight","SheetSubtitleHeight","SheetMinimumDistanceBetweenTitleAndSubtitle","SheetComposerHeight","SheetAuthorHeight","PagePlacementEnum","PageHeight","PageTopMargin","PageTopMarginNarrow","TitleTopDistance","TitleBottomDistance","MinimumStaffLineDistance","StaffHeight","TabStaffInterlineHeight","BetweenStaffLinesDistance","SystemLeftMargin","SystemRightMargin","SystemLabelsRightMargin","SystemComposerDistance","InstrumentLabelTextHeight","LastSystemMaxScalingFactor","AutoBeamNotes","AutoBeamOptions","beam_middle_rests_only","beam_rests","maintain_stem_directions","AutoBeamTabs","BeamWidth","BeamSpaceWidth","BeamForwardLength","FlatBeams","FlatBeamOffset","FlatBeamOffsetPerBeam","ClefLeftMargin","ClefRightMargin","PercussionOneLineCutoff","PercussionForceVoicesOneLineCutoff","PercussionUseXMLDisplayStep","PercussionXMLDisplayStepNoteValueShift","PercussionOneLineXMLDisplayStepOctaveOffset","BetweenKeySymbolsDistance","KeyRightMargin","RhythmRightMargin","ShowRhythmAgainAfterPartEndOrFinalBarline","NewPartAndSystemAfterFinalBarline","InStaffClefScalingFactor","DistanceBetweenNaturalAndSymbolWhenCancelling","NoteHelperLinesOffset","MeasureLeftMargin","MeasureRightMargin","DistanceBetweenLastInstructionAndRepetitionBarline","ArpeggioDistance","StaccatoShorteningFactor","IdealStemLength","StemNoteHeadBorderYOffset","StemMargin","StemMinLength","StemMaxLength","BeamSlopeMaxAngle","StemMinAllowedDistanceBetweenNoteHeadAndBeamLine","SetWantedStemDirectionByXml","GraceNoteScalingFactor","GraceNoteXOffset","WedgeOpeningLength","WedgeMeasureEndOpeningLength","WedgeMeasureBeginOpeningLength","WedgePlacementAboveY","WedgePlacementBelowY","WedgeHorizontalMargin","WedgeVerticalMargin","DistanceOffsetBetweenTwoHorizontallyCrossedWedges","WedgeMinLength","WedgeEndDistanceBetweenTimestampsFactor","DistanceBetweenAdjacentDynamics","TempoChangeMeasureValidity","TempoContinousFactor","StaccatoScalingFactor","BetweenDotsDistance","OrnamentAccidentalScalingFactor","ChordSymbolTextHeight","ChordSymbolTextAlignment","ChordSymbolRelativeXOffset","ChordSymbolXSpacing","ChordOverlapAllowedIntoNextMeasure","ChordSymbolYOffset","ChordSymbolYPadding","ChordSymbolYAlignment","ChordSymbolYAlignmentScope","ChordAccidentalTexts","resetChordAccidentalTexts","ChordSymbolLabelTexts","resetChordSymbolLabelTexts","CustomChords","resetChordNames","RepetitionSymbolsYOffset","RehearsalMarkXOffsetDefault","RehearsalMarkXOffset","RehearsalMarkXOffsetSystemStartMeasure","RehearsalMarkYOffsetDefault","RehearsalMarkYOffset","RehearsalMarkFontSize","MeasureNumberLabelHeight","MeasureNumberLabelOffset","MeasureNumberLabelXOffset","TupletsRatioed","TupletsBracketed","TripletsBracketed","TupletNumberLabelHeight","TupletNumberYOffset","LabelMarginBorderFactor","TupletVerticalLineLength","TupletNumbersInTabs","SlurPlacementFromXML","BezierCurveStepSize","calculateCurveParametersArrays","TieGhostObjectWidth","TieYPositionOffsetFactor","MinimumNeededXspaceForTieGhostObject","TieHeightMinimum","TieHeightMaximum","TieHeightInterpolationK","TieHeightInterpolationD","SlurNoteHeadYOffset","SlurStemXOffset","SlurSlopeMaxAngle","SlurTangentMinAngle","SlurTangentMaxAngle","SlurHeightFactor","SlurHeightFlattenLongSlursFactorByWidth","SlurHeightFlattenLongSlursFactorByAngle","SlurHeightFlattenLongSlursCutoffAngle","SlurHeightFlattenLongSlursCutoffWidth","SlursStartingAtSameStaffEntryYOffset","SlurMaximumYControlPointDistance","RepetitionEndingLabelHeight","RepetitionEndingLabelXOffset","RepetitionEndingLabelYOffset","RepetitionEndingLineYLowerOffset","RepetitionEndingLineYUpperOffset","VoltaOffset","LyricsAlignmentStandard","LyricsHeight","LyricsYOffsetToStaffHeight","VerticalBetweenLyricsDistance","HorizontalBetweenLyricsDistance","BetweenSyllableMaximumDistance","BetweenSyllableMinimumDistance","LyricOverlapAllowedIntoNextMeasure","MinimumDistanceBetweenDashes","MaximumLyricsElongationFactor","InstantaneousTempoTextHeight","ContinuousDynamicTextHeight","MoodTextHeight","UnknownTextHeight","ContinuousTempoTextHeight","DynamicExpressionMaxDistance","DynamicExpressionSpacer","VexFlowDefaultNotationFontScale","VexFlowDefaultTabFontScale","TremoloStrokeScale","TremoloYSpacingScale","StemWidth","StaffLineWidth","StaffLineColor","LedgerLineWidth","LedgerLineStrokeStyle","LedgerLineColorDefault","WedgeLineWidth","TupletLineWidth","LyricUnderscoreLineWidth","SystemThinLineWidth","SystemBoldLineWidth","SystemRepetitionEndingLineWidth","SystemDotWidth","DistanceBetweenVerticalSystemLines","DistanceBetweenDotAndLine","RepeatEndStartPadding","OctaveShiftLineWidth","OctaveShiftVerticalLineLength","GraceLineWidth","MultipleRestMeasureDefaultWidth","MinimumCrossedBeamDifferenceMargin","SheetMaximumWidth","PickupMeasureWidthMultiplier","DisplacedNoteMargin","MinNoteDistance","SubMeasureXSpacingThreshold","MeasureDynamicsMaxScalingFactor","WholeRestXShiftVexflow","MetronomeMarksDrawn","MetronomeMarkXShift","MetronomeMarkYShift","SoftmaxFactorVexFlow","StaggerSameWholeNotes","AlignRests","AlignRestOption","Never","RestCollisionYPadding","FillEmptyMeasuresWithWholeRest","FillEmptyMeasuresWithWholeRests","No","ArpeggiosGoAcrossVoices","RenderArpeggios","RenderSlurs","ColoringMode","XML","ColoringEnabled","ColorStemsLikeNoteheads","ColorBeams","ColorFlags","applyDefaultColorMusic","DefaultColorCursor","DefaultFontFamily","DefaultFontStyle","Regular","DefaultVexFlowNoteFont","MaxMeasureToDrawIndex","MinMeasureToDrawIndex","MaxSystemToDrawNumber","MaxPageToDrawNumber","RenderFingerings","RenderMeasureNumbers","RenderMeasureNumbersOnlyAtSystemStart","UseXMLMeasureNumbers","RenderLyrics","RenderChordSymbols","RenderMultipleRestMeasures","AutoGenerateMutipleRestMeasuresFromRestMeasures","RenderRehearsalMarks","RenderClefsAtBeginningOfStaffline","RenderKeySignatures","RenderTimeSignatures","ArticulationPlacementFromXML","AboveOrBelow","FingeringPositionFromXML","FingeringPositionGrace","FingeringInsideStafflines","FingeringLabelFontHeight","FingeringOffsetX","FingeringOffsetY","FingeringPaddingY","FingeringTextSize","RenderStringNumbersClassical","StringNumberOffsetY","NewSystemAtXMLNewSystemAttribute","NewPageAtXMLNewPageAttribute","RestoreCursorAfterRerender","StretchLastSystemLine","PageFormat","UndefinedPageFormat","PageBackgroundColor","RenderSingleHorizontalStaffline","SpacingBetweenTextLines","NoteToGraphicalNoteMap","SkyBottomLineBatchMinMeasures","SkyBottomLineWebGLMinMeasures","AlwaysSetPreferredSkyBottomLineBackendAutomatically","DisableWebGLInFirefox","DisableWebGLInSafariAndIOS","setPreferredSkyBottomLineBackendAutomatically","MaxInstructionsConstValue","ex","info","numberOfGraphicalMeasures","vendor","globalThis","alwaysUsePlain","includes","PreferredSkyBottomLineBatchCalculatorBackend","SkyBottomLineBatchCalculatorBackendType","Plain","WebGL","color","DefaultColorMusic","DefaultColorNotehead","DefaultColorRest","DefaultColorStem","DefaultColorLabel","DefaultColorTitle","addGraphicalNoteToNoteMap","NoteToGraphicalNoteObjectId","GNote","GraphicalNote","FromNote","clearMusicSheetObjects","chordAccidentalTexts","useChordAccidentalsUnicode","setChordSymbolLabelText","chordtexts","ChordSymbolEnum","minor","augmented","diminished","dominant","majorseventh","minorseventh","diminishedseventh","augmentedseventh","halfdiminished","majorminor","majorsixth","minorsixth","dominantninth","majorninth","minorninth","dominant11th","major11th","minor11th","dominant13th","major13th","minor13th","suspendedsecond","suspendedfourth","power","none","addChordName","altName","chordKindText","adds","alts","subs","degrees","CustomChord","createCustomChord","renameChord","newAltName","renameCustomChord","sharp","flat","TPower3","OneMinusTPower3","FactorOne","FactorTwo","idString","aspectRatio","IsUndefined","otherPageFormat","GraphicalChordSymbolContainer","chordSymbolContainer","textHeight","keyInstruction","transposeHalftones","calculateLabel","GetChordSymbolContainer","GraphicalLabel","graphicalLabel","ChordSymbolContainer","calculateChordText","colorDefault","DefaultColorChordSymbol","settingsLabel","settings","GraphicalContinuousDynamicExpression","continuousDynamic","staffLine","isSplittedPart","notToBeRemoved","StartMeasure","startMeasure","EndMeasure","endMeasure","EndStaffLine","IsSplittedPart","IsVerbal","ContinuousDynamic","NotToBeRemoved","Lines","updateSkyBottomLine","skyBottomLineCalculator","SkyBottomLineCalculator","left","right","warn","DynamicType","ContDynamicEnum","crescendo","diminuendo","MeasureNumber","Above","yValue","updateSkyLineInRange","updateSkyLineWithWedge","Start","End","Below","updateBottomLineInRange","updateBottomLineWithWedge","createCrescendoLines","startX","endX","wedgeOpeningLength","wedgeLineWidth","lineStart","upperLineEnd","lowerLineEnd","addWedgeLines","createFirstHalfCrescendoLines","wedgeMeasureEndOpeningLength","createSecondHalfCrescendoLines","wedgeMeasureBeginOpeningLength","upperLineStart","lowerLineStart","addDoubleLines","recalculateCrescendoLines","isSecondHalfSplit","createDiminuendoLines","upperWedgeStart","lowerWedgeStart","wedgeEnd","createFirstHalfDiminuendoLines","createSecondHalfDiminuendoLines","lineEnd","recalculateDiminuendoLines","yPosition","isFirstHalfSplit","calcPsi","shiftYPosition","squeeze","wedgePoint","upperWedgeEnd","lowerWedgeEnd","upperLine","GraphicalLine","lowerLine","GraphicalCurve","tPow3","bezierCurveStepSize","oneMinusTPow3","bezierFactorOne","bezierFactorTwo","calculateCurvePointAtIndex","bezierStartPt","bezierStartControlPt","bezierEndControlPt","bezierEndPt","GraphicalInstantaneousDynamicExpression","instantaneousDynamic","parentSourceMeasure","mInstantaneousDynamicExpression","mMeasure","GraphicalInstantaneousTempoExpression","tempoExpresssion","alignment","fontHeight","setLabelPositionAndShapeBorders","trim","TextLines","labelMarginBorderFactor","split","numOfLines","maxWidth","line","widthToHeightRatio","TextMeasurer","computeTextWidthToHeightRatio","font","fontStyle","fontFamily","currWidth","xOffset","bbox","start","styleEnum","colorHex","styleId","Width","lyricsEntry","graphicalStaffEntry","lyricsHeight","staffHeight","lyricsTextAlignment","Text","Notes","Length","LyricsEntry","ParentLyricWord","graphicalLyricWord","StaffEntryParent","lyricWord","graphicalLyricsEntries","initialize","GetLyricWord","GraphicalLyricsEntries","isFilled","Syllables","systemRectangle","labelRectangle","GraphicalMeasure","staff","hasOnlyRests","ShowTimeSignature","parentStaff","ParentStaff","staffEntries","parentMusicSystem","FirstInstructionStaffEntry","firstInstructionStaffEntry","LastInstructionStaffEntry","lastInstructionStaffEntry","resetLayout","getLineWidth","addClefAtBegin","clef","addKeyAtBegin","currentKey","previousKey","currentClef","addRhythmAtBegin","rhythm","addClefAtEnd","visible","setPositionInStaffline","xPos","setWidth","layoutSymbols","findGraphicalStaffEntryFromTimestamp","relativeTimestamp","relInMeasureTimestamp","findGraphicalStaffEntryFromVerticalContainerTimestamp","absoluteTimestamp","sourceStaffEntry","VerticalContainerParent","getAbsoluteTimestamp","hasSameDurationWithSourceMeasureParent","duration","findStaffEntryMinNoteLength","Duration","hasMultipleVoices","voices","staffEntry","idx2","len2","VoiceEntries","voiceEntry","ParentVoice","isVisible","ParentInstrument","Visible","getGraphicalMeasureDurationFromStaffEntries","voice","voiceDuration","gve","graphicalVoiceEntries","parentVoiceEntry","notes","graphicalNoteLength","createFromFraction","addGraphicalStaffEntry","addGraphicalStaffEntryAtTimestamp","isPianoRightHand","isUpperStaffOfInstrument","isPianoLeftHand","isLowerStaffOfInstrument","Staves","beginsWithLineRepetition","sourceMeasure","endsWithLineRepetition","beginsWithWordRepetition","endsWithWordRepetition","getTransposedHalftones","GetMusicSheet","Transpose","GraphicalMusicPage","musicSystems","labels","MusicSystems","Labels","PageNumber","pageNumber","setMusicPageAbsolutePosition","pageIndex","musicSheet","calculator","musicPages","measureList","verticalGraphicalStaffEntryContainers","cursors","leadSheet","numberOfStaves","ParentMusicSheet","GetCalculator","MusicPages","MeasureList","VerticalGraphicalStaffEntryContainers","Title","title","Subtitle","subtitle","Composer","composer","Lyricist","lyricist","Cursors","SelectionStartSymbol","selectionStartSymbol","SelectionEndSymbol","selectionEndSymbol","MinAllowedSystemWidth","minAllowedSystemWidth","NumberOfStaves","LeadSheet","graphicalMusicSheet","pageAbsolute","Initialize","reCalculate","calculate","EnforceRedrawOfMusicSystems","graphicalMusicPage","needsToBeRedrawn","getClickedObject","positionOnMusicSheet","findGraphicalMeasure","measureIndex","staffIndex","gMeasure","findGraphicalStaffEntryFromMeasureList","graphicalMeasure","findNextGraphicalStaffEntry","graphicalStaffEntryIndex","nextMeasure","getFirstVisibleMeasuresListFromIndices","graphicalMeasures","orderMeasuresByStaffLine","measures","orderedMeasures","mList","initializeActiveClefs","activeClefs","firstSourceMeasure","getFirstSourceMeasure","CompleteNumberOfStaves","ClefInstruction","FirstInstructionsStaffEntries","Instructions","abstractNotationInstruction","GetMainKey","KeyInstruction","getOrCreateVerticalContainer","timestamp","CollectionUtil","getLastElement","verticalGraphicalStaffEntryContainer","VerticalGraphicalStaffEntryContainer","AbsoluteTimestamp","GetVerticalContainerFromTimestamp","startIndex","binarySearch","compareByTimestamp","GetInterpolatedIndexInVerticalContainers","musicTimestamp","containers","leftTS","rightTS","leftIndex","rightIndex","middleIndex","plus","getLongestStaffEntryDuration","foundIndex","getVisibleStavesIndicesFromSourceMeasure","visibleMeasures","visibleInstruments","visibleStavesIndices","instrument","getGlobalStaffIndexOfFirstStaff","getGraphicalMeasureFromSourceMeasureAndIndex","getLastGraphicalMeasureFromIndex","lastRendered","getMeasureIndex","inListIndex","GetNearestGraphicalObject","startSearchArea","maxSearchArea","searchAreaIncrement","shouldBeIncludedTest","foundEntries","entries","closest","object","CalculateDistance","GetNearestVoiceEntry","GraphicalVoiceEntry","parentStaffEntry","GetNearestNote","maxClickDist","nearestVoiceEntry","closestNote","closestDist","MAX_SAFE_INTEGER","posY","distX","distY","domToSvg","domToSvgTransform","svgToDom","svgToOsmd","pt","inverse","svg","drawer","Backends","getSvgElement","createSVGPoint","transformMatrix","getScreenCTM","sp","matrixTransform","GetClickableLabel","GetNearestStaffEntry","gse","GetPossibleCommentAnchor","entry","tryGetTimestampFromPosition","tryGetClickableLabel","tryGetTimeStampFromPosition","getStaffEntry","container","StaffEntries","GetPreviousVisibleContainerIndex","GetNextVisibleContainerIndex","findClosestLeftStaffEntry","fractionalIndex","searchOnlyVisibleEntries","foundEntry","findClosestRightStaffEntry","returnOnlyVisibleEntries","ceil","calculateCursorLineAtTimestamp","calculateXPositionFromTimestamp","correspondingMusicSystem","StaffLines","yCoordinate","timeStamp","currentMusicSystem","previousStaffEntry","nextStaffEntry","currentTimeStamp","previousStaffEntryMusicSystem","nextStaffEntryMusicSystem","previousStaffEntryPositionX","nextStaffEntryPositionX","GetRightBorderAbsoluteXPosition","sm","nextSystemLeftBorderTimeStamp","interpolatedXPosition","previousSystemRightBorderX","nextSystemLeftBorderX","GetLeftBorderAbsoluteXPosition","GetNumberOfVisibleInstruments","visibleInstrumentCount","Instruments","GetNumberOfFollowedInstruments","followedInstrumentCount","Following","GetGraphicalFromSourceStaffEntry","ParentMeasure","VerticalMeasureList","idInMusicSheet","Timestamp","pt1","pt2","deltaX","deltaY","maxLength","maxLengthInStaffEntry","findStaffEntryMaxNoteLength","DrawnAccidental","lineShift","sourceNote","numberOfDots","activeClef","octaveEnum","transposedPitch","transposeCalculator","transposePitch","NoteTuplet","ParentMusicPage","AClassHierarchyTrackable","GraphicalOctaveShift","getOctaveShift","setSymbol","Type","OctaveEnum","VA8","octaveSymbol","MusicSymbol","VB8","MA15","MB15","GraphicalRectangle","upperLeftPoint","lowerRightPoint","style","GraphicalSlur","slur","xTimestampSpan","minus","yTimestampSpan","calculateCurve","startStaffEntry","endStaffEntry","slurStartNote","findGraphicalNoteFromNote","StartNote","graceStart","findGraphicalNoteFromGraceNote","findEndTieGraphicalNoteFromNoteWithStartingSlur","slurEndNote","EndNote","graceEnd","calculatePlacement","startEndPoints","calculateStartAndEnd","startY","endY","minAngle","maxAngle","points","placement","startUpperRight","beginInstructionsWidth","endUpperLeft","staffEntryParent","calculateTopPoints","pointF","startEndLineAngleRadians","atan","start2","end2","rotationMatrix","getRotationMatrix","transposeMatrix","transformedPoints","calculateTranslatedAndRotatedPointListAbove","startLineSlope","calculateMaxLeftSlope","endLineSlope","calculateMaxRightSlope","startLineD","endLineD","intersectionPoint","sameSlope","heightWidthRatio","calculateHeightWidthRatio","startYOffset","endYOffset","startAngle","endAngle","calculateAngles","controlPoints","calculateControlPoints","startControlPoint","endControlPoint","SkyLine","getLeftIndexForPointX","endIndex","distance","samplingUnit","curvePoint","startLowerRight","endLowerLeft","calculateBottomPoints","calculateTranslatedAndRotatedPointListBelow","BottomLine","slurStartVE","StemDirection","StemDirectionType","slurEndVE","startNoteHasMoreStartingSlurs","isSlurLonger","endNoteHasMoreEndingSlurs","PlacementXml","ParentVoiceEntry","LinkedVoice","LyricsEntries","startStemDirection","sX","eX","minAbove","getSkyLineMinInRange","maxBelow","getBottomLineMaxInRange","getRightIndexForPointX","skylineValue","bottomLineValue","slope","getPointListMaxY","heightFactor","widthFlattenFactor","cutoffAngle","cutoffWidth","factorStart","factorEnd","degreesToRadiansFactor","controlPointYDiff","calculatedStartAngle","calculatedEndAngle","PI","GraphicalStaffEntry","graphicalChordContainers","tabStaffEntry","MaxAccidentals","graphicalInstructions","ties","graphicalTies","lyricsEntries","parentVerticalContainer","FingeringEntries","GraphicalInstructions","GraphicalTies","findTieGraphicalNoteFromNote","tieNote","isRest","NoteTie","NoteSlurs","graceNote","getGraphicalNoteDurationFromVoice","findVoiceEntryGraphicalNotes","isVoiceEntryPartOfLinkedVoiceEntry","Link","LinkStaffEntries","sEntry","minLength","calNoteLen","findOrCreateGraphicalVoiceEntry","graphicalVoiceEntry","createVoiceEntry","findOrCreateGraphicalVoiceEntryFromGraphicalNote","addGraphicalNoteToListAtCorrectYPosition","graphicalNotes","getSkylineMin","skybottomcalculator","getAbsoluteStartAndEnd","getHighestYAtEntry","getLowestYAtEntry","getBottomlineMax","staffEntryLink","graphicalLinkedStaffEntries","GetStaffEntryLink","GraphicalLinkedStaffEntries","getLinkedStaffEntriesGraphicalNotes","graphicalLinkedStaffEntry","ParentStaffEntry","GetVoiceEntry","tie","startNote","endNote","SVGElement","vfTie","GetTie","Tie","GraphicalUnknownExpression","sourceMultiExpression","AbstractExpression","yValueAbove","yValueBelow","sort","sortForVexflow","staffEntriesWithGraphicalTies","staffEntriesWithOrnaments","staffEntriesWithChordSymbols","staffLinesWithLyricWords","graphicalLyricWords","abstractNotImplementedErrorMessage","dynamicExpressionMap","Map","textMeasurer","minimumStaffEntriesWidth","prepareGraphicalMusicSheet","accidentalCalculators","createAccidentalCalculators","lyricWords","completeNumberOfStaves","getCompleteNumberOfStaves","openOctaveShifts","SourceMeasures","createGraphicalMeasuresForSourceMeasure","multipleRestMeasures","isReducedToMultiRest","multipleRestMeasureNumber","measuresToSkip","nextSourceMeasure","beginMultiRestMeasure","multiRestCount","canBeReducedToMultiRest","measureListIndex","staffIsPercussionArray","map","ClefType","ClefEnum","percussion","handleStaffEntries","calculateVerticalContainersList","setIndicesToVerticalGraphicalContainers","clearSystemsAndMeasures","clearRecreatedObjects","createGraphicalTies","calculateSheetLabelBoundingBoxes","calculateXLayout","maxInstrNameLabelLength","calculateMusicSystems","GraphicalMusicSheet","transformRelativeToAbsolutePosition","calculateMeasureXLayout","calculateMeasureWidthFromStaffEntries","setMeasuresMinStaffEntriesWidth","measuresVertical","oldMinimumStaffEntriesWidth","formatMeasures","initGraphicalMeasuresCreation","handleBeam","beam","openBeams","handleTiedGraphicalNote","tiedGraphicalNote","beams","octaveShiftValue","openTie","isLastTieNote","handleVoiceEntryLyrics","openLyricWords","handleVoiceEntryOrnaments","ornamentContainer","handleVoiceEntryArticulations","articulations","handleVoiceEntryTechnicalInstructions","technicalInstructions","handleTuplet","tuplet","openTuplets","layoutVoiceEntry","hasPitchedNote","layoutStaffEntry","createGraphicalTie","startGse","endGse","updateStaffLineBorders","calculateMeasureNumberPlacement","musicSystem","Measures","Id","previousMeasureNumber","labelOffsetX","isFirstMeasureAndNotPrintedOne","getPrintedMeasureNumber","ImplicitMeasure","calculateSingleMeasureNumberPlacement","labelNumber","relativeX","relativeY","startCollisionCheck","endCollisionCheck","skyLineMinValue","minBracketTopBorder","GroupBrackets","groupBracket","MeasureNumberLabels","calculateMeasureNumberSkyline","measureNumberLabel","layoutGraphicalTie","tieIsAtSystemBreak","isTab","calculateSingleStaffLineLyricsPosition","lyricVersesNumber","numberOfVerses","lyricsStartYPosition","lyricsStaffEntriesList","measureRelativePosition","staffEntryPositionX","lyricsEntryLabel","bottomLineMax","maxPosition","lyricEntry","verseNumber","VerseNumber","sortedLyricVerseNumberIndex","previousRelativeX","calculateLyricsExtendsAndDashes","lyricsStaffEntries","calculateSingleLyricWord","calculateLyricExtend","calculateSingleOctaveShift","multiExpression","calculateWordRepetitionInstruction","repetitionInstruction","calculateMoodAndUnknownExpression","relative","MoodList","UnknownList","combinedExprString","EntriesList","prefix","getRelativePositionInStaffLineFromTimestamp","isPartOfMultiStaffInstrument","getPlacementOfFirstEntry","graphLabel","getFontstyleOfFirstEntry","gue","handleStaffEntryLink","staffEntryLinks","allMeasures","visibleMeasureList","visiblegraphicalMeasures","numberOfStaffLines","gmlist","musicSystemBuilder","MusicSystemBuilder","buildMusicSystems","optimizeRestPlacement","calculateStaffEntryArticulationMarks","calculateTieCurves","calculateSkyBottomLines","calculateTupletNumbers","calculateFingerings","calculateSlurs","calculateOrnaments","calculateChordSymbols","calculateDynamicExpressions","calculateMoodAndUnknownExpressions","calculateExpressionAlignements","calculateOctaveShifts","calculateWordRepetitionInstructions","calculateRepetitionEndings","calculateTempoExpressions","calculateRehearsalMarks","calculateLyricsPosition","idx3","len3","calculateSystemYLayout","calculateComments","calculateMarkedAreas","isFirstSystem","setMusicSystemLabelsYPosition","createSystemLeftLine","setYPositionsToVerticalLineObjectsAndCreateLines","createInstrumentBrackets","createGroupBrackets","InstrumentalGroups","alignBeginInstructions","calculateBorders","addActivitySymbolClickArea","calculatePageLabels","minimumOffset","alignmentScopedStaffEntries","calculateAlignedChordSymbolsOffset","graphicalChordContainer","sps","gps","yShift","gLabel","sbc","layoutMeasureWithWholeRest","rest","layoutBeams","layoutArticulationMarks","layoutOrnament","ornaments","calculateRestNotePlacementWithinGraphicalBeam","restNote","previousNote","nextNote","calculateDynamicExpressionsForMultiExpression","calculateGraphicalVerbalContinuousDynamic","graphicalContinuousDynamic","startPosInStaffline","drawingHeight","calculateGraphicalContinuousDynamic","EndMultiExpression","SourceMeasureParent","endStaffLine","sameStaffLine","endAbsoluteTimestamp","getFirstNonNullStaffEntry","endOfMeasure","maxNoteLength","currentMaxLength","calculateMaxNoteLength","endPosInStaffLine","beginOfNextNote","nextNotePosInStaffLine","startCollideBox","get","StartMultiExpression","currentStaffLineIndex","secondGraphicalContinuousDynamic","upperStartX","lowerStartX","upperEndX","lowerEndX","idealY","secondIdealY","nextStaffLineIndex","distanceBetweenStaffLines","maxBottomLineValueForExpressionLength","withinCrossedBeam","closestToEndStaffEntry","findClosestStaffEntry","closestToStartStaffEntry","nextStaffLine","nextStaffLineMinSkyLineValue","relativeSkyLineHeight","previousStaffLineIndex","previousStaffLine","minSkyLineValueForExpressionLength","formerStaffLineIndex","formerStaffLine","formerStaffLineMaxBottomLineValue","calculateGraphicalInstantaneousDynamicExpression","graphicalInstantaneousDynamic","skyLineValue","difference","lastStaff","calcGraphicalRepetitionEndingsRecursively","repetition","layoutSingleRepetitionEnding","numberText","leftOpen","rightOpen","combinedString","marginFactor","calculateTempoExpressionsForMultiTempoExpression","multiTempoExpression","ContinuousTempo","InstantaneousTempo","firstVisibleMeasureX","verticalIndex","Expression","InstantaneousTempoExpression","firstInstructionEntry","lastInstruction","expr","Enum","TempoEnum","metronomeMark","createMetronomeMark","ContinuousTempoExpression","metronomeExpression","graphicalMeasureCreatedCalculations","idx4","len4","endInstructionsWidth","handleVoiceEntry","accidentalCalculator","linkedNotes","StemDirectionXml","Undefined","WantedStemDirection","calculateStemDirectionFromVoices","graphicalTabVoiceEntry","IsGrace","createGraceNote","createNote","stafflineNoteCalculator","trackNote","checkNoteForAccidental","resetYPositionForLeadSheet","NoteBeam","PrintObject","graphicalTabNote","Articulations","TechnicalInstructions","OrnamentContainer","layoutVoiceEntries","maxLabelLength","NameLabel","print","Voices","renderedLabel","defaultColorTitle","IsCreditLabel","checkMeasuresForWholeRestNotes","optimizeRestNotePlacement","voice1Notes","voice1Note1","voice1Note1IsRest","voice2Note1IsRest","voice2Notes","calculateTwoRestNotesPlacementWithCollisionDetection","calculateRestNotePlacementWithCollisionDetectionFromGraphicalNote","staffEntryIndex","multiStaffInstrument","firstVisibleMeasureRelativeX","leftStaffEntry","rightStaffEntry","numEntries","getFirstLeftNotNullStaffEntryFromContainer","getFirstRightNotNullStaffEntryFromContainer","measureRelativeX","leftX","rightX","timestampQuotient","leftTimestamp","rightTimestamp","getRelativeXPositionFromTimestamp","discreteIndex","page","pageWidth","firstSystemAbsoluteTopMargin","firstMusicSystem","composerRelativeY","VerticalSourceStaffEntryContainers","gTie","handleTie","setTieDirections","startGraphicalStaffEntry","graphicalTie","highestNote","gseTie","TieDirection","NotYetDefined","AccidentalCalculator","numberOfEntries","verticalContainer","Index","verticalMeasureList","restInAllGraphicalMeasures","createGraphicalMeasure","allRests","getStaffFromIndex","TAB","createTabStaffMeasure","createMultiRestMeasure","hasError","getErrorInMeasure","instruction","copy","MidiInstrumentId","MidiInstrument","Percussion","transposeKey","octaveShifts","StaffLinkedExpressions","OctaveShiftStart","openOctaveShift","absoluteEnd","ParentEndMultiExpression","OctaveShiftParams","entryIndex","createStaffEntry","findLinkedNotes","getAbsoluteStartTimestamp","getAbsoluteEndTimestamp","getOpenOctaveShift","ParentStartMultiExpression","clefInstruction","createInStaffClef","ChordContainers","HasChordSymbols","createChordSymbols","LastInstructionsStaffEntries","lastStaffEntry","OctaveShiftEnd","setBeamNotesWantedStemDirections","SourceStaffEntry","VerticalSourceStaffEntryContainer","VoiceEntry","Note","YesVisible","TransposedPitch","getStafflineUniquePositionCount","StafflineCount","system","idx5","len5","idx6","len6","hasTie","fingerings","Fingering","IsGraceNote","reverse","fingering","marginLeft","marginRight","skybottomFurthest","firstRestNote","secondRestNote","collision","bottomBorder","topBorder","lyricStaffEntriesDict","HasLyrics","LyricVersesNumbers","nextLyricEntry","startStaffLine","endStaffentry","numberOfDashes","calculateSingleDashForLyricWord","calculateDashes","lastGraphicalMeasure","secondStartX","secondEndX","distanceBetweenDashes","counter","calculateRightAndLeftDashesForLyricWord","dash","LyricsDashes","calculateSingleLyricWordWithUnderscore","lastMeasureBb","graphicalLine","LyricLines","leftLabel","leftDash","leftDashRelative","rightLabel","rightDash","rightDashRelative","maxIndex","InstantaneousDynamic","StartingContinuousDynamic","horizontalIndex","FirstRepetitionInstructions","LastRepetitionInstructions","musicsheet","Repetitions","TempoExpressions","calculateRehearsalMark","ParentSourceStaffEntry","drawableBoundingBoxElement","skyLineVisible","bottomLineVisible","phonicScoreMode","Manual","splitScreenLineColor","Mode","drawSheet","drawSplitScreenLine","drawLineAsVerticalRectangle","Cursor","pagesToDraw","drawPage","drawLineAsHorizontalRectangle","layer","rectangle","applyScreenTransformationForRect","renderRectangle","lineWidth","drawLineAsHorizontalRectangleWithOffset","drawLineAsVerticalRectangleWithOffset","drawRectangle","rect","calculatePixelDistance","unitDistance","drawLabel","screenPosition","applyScreenTransformation","fontHeightInPixel","widthInPixel","bitmapWidth","bitmapHeight","renderLabel","applyScreenTransformations","symbol","heightInPixel","renderSystemToScreen","systemBoundingBoxInPixels","absBoundingRectWithMargin","drawMeasure","drawSkyLine","drawBottomLine","drawInstrumentBrace","brace","drawGroupBracket","bracket","drawMusicSystem","getSystemAbsBoundingRect","getSytemBoundingBoxInPixels","drawMusicSystemComponents","relBoundingRect","selectStartSymb","selectEndSymb","drawStaffLine","drawDashes","drawLyricLines","systemLine","SystemLines","drawSystemLineObject","SVGNode","instruments","instrumentsVisible","InstrumentBrackets","drawStaffLineSymbols","drawComment","activateSystemRendering","systemId","absBoundingRect","createNewImage","drawOctaveShifts","drawExpressions","lyricLines","lyricLine","drawGraphicalLine","staffline","colorOrStyle","drawLine","stop","lyricsDashes","drawStaffLines","drawInstantaneousDynamic","drawContinuousDynamic","drawSymbol","symbolStyle","scalingFactor","drawBoundingBoxes","startBox","dataObjectString","typeMatch","VexFlowStaffEntry","VexFlowMeasure","VexFlowGraphicalNote","VexFlowVoiceEntry","VexFlowStaffLine","SystemLine","VexFlowContinuousDynamicExpression","drawBoundingBox","bb","drawCross","labelText","tmpRect","rectNode","Background","markedArea","GraphicalMarkedAreas","Comment","GraphicalComments","parentInst","absX","absY","highlight","Highlight","PLAY","drawSymbols","Midi","midiPlaybackAvailable","audible","PlaybackSymbols","MIC","following","FollowSymbols","measurePSI","absXPSI","absYPSI","DrawErroneousMeasures","MeasureError","MusicSystem","staffLines","measureNumberLabels","objectsToRedraw","instrumentBrackets","groupBrackets","graphicalMarkedAreas","graphicalComments","systemLines","breaksPage","NextSystem","idxInParent","GraphicalMeasures","values","ObjectsToRedraw","systemLabelsRightMargin","xPosition","top","bottom","leftSystemLine","createSystemLine","SystemLinesEnum","SingleThin","SystemLinePosition","MeasureBegin","createLinesForSystemLine","createVerticalLineForMeasure","lineType","linePosition","staffLineRelative","staves","bottomMeasure","getBottomStaffLine","singleVerticalLineAfterMeasure","systemXPosition","AddGraphicalMeasures","GetSystemsFirstTimeStamp","GetSystemsLastTimeStamp","firstStaffLine","lastStaffLine","createInstrumentBracket","instrumentGroups","recursionDepth","instrumentGroup","instrument1","findFirstVisibleInstrumentInInstrumentalGroup","instrument2","findLastVisibleInstrumentInInstrumentalGroup","createGroupBracket","createMusicSystemLabel","instrumentLabelTextHeight","originalSystemLabelsRightMargin","instrNameLabel","PartAbbreviation","updateMusicSystemStaffLineXPosition","ypositionSum","staffCounter","checkStaffEntriesForStaffEntryLink","first","second","topStaffLine","topMeasure","calcBracketsWidth","instrumentBracket","instrumentalGroup","groupOrInstrument","Instrument","globalSystemIndex","numberOfVisibleStaffLines","activeRhythm","activeKeys","initializeActiveInstructions","systemMaxWidth","getFullPageSystemWidth","prevMeasureEndsPart","currentSystemParams","SystemBuildParameters","currentSystem","initMusicSystem","sourceMeasureEndsPart","HasEndLine","sourceMeasureBreaksSystem","isSystemStartMeasure","IsSystemStartMeasure","isFirstSourceMeasure","currentMeasureBeginInstructionsWidth","currentMeasureEndInstructionsWidth","measureStartLine","getMeasureStartLine","forceShowRhythm","addBeginInstructions","addEndInstructions","currentMeasureVarWidth","measureEndLine","getMeasureEndLine","nextMeasureBeginInstructionWidth","nextGraphicalMeasures","hasBeginInstructions","totalMeasureWidth","measureFitsInSystem","currentWidth","doXmlPageBreak","printNewPageXml","doXmlLineBreak","printNewSystemXml","addMeasureToSystem","updateActiveClefs","finalizeCurrentSystem","finalizeCurrentAndCreateNewSystem","systemMeasures","optimizeDistanceBetweenStaffLines","calculateMusicSystemsRelativePositions","setMeasureWidth","beginInstrWidth","endInstrWidth","systemEndsPart","checkExtraInstructionMeasure","startNewPage","adaptRepetitionLineWithIfNeeded","checkAndCreateExtraInstructionMeasure","stretchMusicSystem","measureParams","endLine","DotsBoldBoldDots","DotsThinBold","currentSystemFixWidth","currentVarWidth","beginLine","addStaveMeasuresToSystem","currentSystemVarWidth","systemMeasureIndex","createMusicSystem","layoutSystemStaves","systemWidth","staffList","multiLyrics","yOffsetSum","addStaffLineToMusicSystem","yOffset","relativeYPosition","createStaffLine","visibleStaffIndices","firstKeyInstruction","transposeKeyInstruction","firstRhythmInstruction","isTransposedBy","isSystemFirstMeasure","measureCount","totalBeginInstructionLengthX","beginInstructionsStaffEntry","beginInstructionLengthX","AddInstructionsAtMeasureBegin","totalEndInstructionLengthX","endInstructionsStaffEntry","endInstructionLengthX","addInstructionsAtMeasureEnd","firstEntry","visibleStaffIdx","currentRhythm","instructionsLengthX","RhythmInstruction","clefAdded","keyAdded","rhythmAdded","printRhythm","previousMeasure","RhythmPrinted","lastEntry","otherVerticalMeasure","visStaffIdx","getEntriesPerStaff","instructions","firstStaffEntries","visibleInstructionEntries","maxMeasureWidth","sse","rhythmInstruction","measureWidth","addExtraInstructionMeasure","None","createExtraGraphicalMeasure","gmeasures","thisMeasureBeginsLineRepetition","isGlobalFirstMeasure","previousMeasureEndsLineRepetition","BoldThinDots","nextMeasureBeginsLineRepetition","thisMeasureEndsLineRepetition","nextMeasureHasKeyInstructionChange","thisMeasureEndsWordRepetition","nextMeasureBeginsWordRepetition","DoubleThin","endingBarStyleEnum","systemLineEnum","nextMeasureIndex","getNextMeasureKeyInstruction","visIndex","getKeyInstruction","calculateXScalingFactor","systemFixWidth","systemVarWidth","currentXPosition","startLine","staffEntriesScaleFactor","MeasureEnd","decreaseMusicSystemBorders","updateStaffLinesRelativePosition","createMusicPage","addSystemToPage","upperBottomLine","lowerSkyLine","maxDistance","startIdx","endIdx","lowerIdx","lowerStafflineYPos","currentPage","currentYPosition","timesPageCouldntFitSingleSystem","previousSystem","prevSystemLastStaffline","prevSystemLastStaffLineBB","findRequiredDistanceWithSkyBottomLine","newYPosition","currSystemBottomYPos","upperSystem","lowerSystem","upperSystemLastStaffLine","lowerSystemFirstStaffLine","upperBottomLineArray","lowerSkyLineArray","upperStaffLineBB","lowerStaffLineBB","skylinePixelWidth","upperIdx","lowerCenterIdx","absoluteStartTimestamp","absoluteEndTimestamp","PlainSkyBottomLineBatchCalculatorBackend","SkyBottomLineBatchCalculatorBackend","getPreferredRenderingConfiguration","elementHeight","elementWidth","numColumns","numRows","onInitialize","tableConfiguration","calculateFromCanvas","canvas","vexFlowContext","canvasWidth","imageData","getImageData","getVFStave","getWidth","measureArrayLength","xStart","xEnd","yStart","yEnd","skyLine","bottomLine","bufIndex","lowestSkyLine","highestBottomLine","SkyBottomLineCalculationResult","xCoordinate","verticalLine","anchor","arrowPoints","arrows","linePoints","arrowThickness","hilfsVar","arrowlines","preferredBackend","batchEntryArrayList","has","batches","batchEntryArray","backend","WebGLSkyBottomLineBatchCalculatorBackend","calculateLines","results","updateLines","CanvasVexFlowBackend","IsExtraGraphicalMeasure","initializeHeadless","numElementsPerTable","getContext","context","canvasElement","getCanvas","vsStaff","setX","setY","oldMeasureWidth","format","translate","draw","staffLineParent","mStaffLineParent","mRules","calculationResults","StaffLineParent","arrayLength","mSkyLine","mBottomLine","arrayChunkSize","subSampledSkyLine","subSampledBottomLine","chunkIndex","chunk","unitInPixels","TopLineOffset","BottomLineOffset","tmpCanvas","ctx","rgbaLength","tmpSkyLine","tmpBottomLine","findPreviousValidNumber","findNextValidNumber","updateInRange","resetSkyLineInRange","resetBottomLineInRange","setInRange","setSkyLineWithValue","sl","setBottomLineWithValue","bl","getSkyLineMin","getBottomLineMax","isNaN","getSkyLineMinAtPoint","getMinInRange","getBottomLineMaxAtPoint","getMaxInRange","getBottomLineMaxInBoundingBox","startPoint","endPoint","updateWithBoundingBoxRecursively","currentTopBorder","currentBottomBorder","tSkyLine","drawPixel","coord","oldStyle","fillStyle","fillRect","skyBottomArray","StaffLine","parentSystem","abstractExpressions","graphicalSlurs","skyBottomLine","topLineOffset","bottomLineOffset","calculateStaffLineOffsets","NextStaffLine","OctaveShifts","GraphicalSlurs","addSlurToStaffline","gSlur","activitySymbol","staffLinePsi","closestStaffentry","parentTopStaffLine","systemLineType","ThinBold","xmlValue","Dotted","Dashed","Bold","BoldThin","DoubleBold","Tick","Short","xValue","alignDynamicExpressions","groups","tmpList","aeIdx","currentExpression","nextExpression","dist","getDistance","aes","centerYs","yIdeal","exprIdx","centerOffset","prevExpression","overlapRight","getOverlap","overlapLeft","rightBorderA","leftBorderB","bottomBorderA","topBorderB","VF","Flow","VexFlowBackend","getVexflowBackendType","Renderer","CANVAS","getOSMDBackendType","BackendType","Canvas","getCanvasSize","getElementById","offsetHeight","zoom","inner","zIndex","renderer","clearRect","save","setFillStyle","restore","scale","CanvasRenderingCtx","renderText","old","VexFlowConverter","strokeStyle","fillText","globalAlpha","renderLine","beginPath","moveTo","lineTo","stroke","renderCurve","bezierCurveTo","closePath","vexFlowCanvasContext","SvgVexFlowBackend","SVG","removeNode","lastChild","openGroup","fontFamilyVexFlow","setFont","fontWeightVexflow","fontStyleVexflow","Italic","BoldItalic","closeGroup","export","cloneNode","svgDocType","implementation","createDocumentType","svgDoc","createDocument","replaceChild","svgData","XMLSerializer","serializeToString","href","download","innerHTML","body","getInnerElement","getRenderElement","renderingHtmlElement","getRenderer","removeAllChildrenFromContainer","children","item","removeFromContainer","htmlElementToRemove","resize","sourceLabel","isTuplet","durations","remainingFraction","dur","notehead","octaveOffsetGiven","octaveOffset","fund","OctaveOffset","noteheadCode","NoteHeadCode","clefType","codeFilled","Filled","Shape","NoteHeadShape","NORMAL","DIAMOND","codeStart","TRIANGLE","CIRCLEX","RECTANGLE","SQUARE","SLASH","ghostNotes","GhostNote","baseNote","accidentals","baseNoteLength","vfClefType","TypeLength","DotsXml","restYPitch","vfnote","numDots","alignCenter","xShift","slashNoteHead","vfpitch","pauseVoiceEntry","neighborGSEs","previousVoiceEntry","followingVoiceEntry","pauseVEIndex","followingNote","previousNotePitch","Clef","restToNotePitch","SourceMeasure","ActiveTimeSignature","staffGves","restVoiceId","VoiceId","maxHalftone","linesShift","staffGve","gveNote","wantedStemDirection","isUpperVoiceRest","lineShiftDirection","noteHalftone","newHigh","newLow","restClefInstruction","fromHalftone","Notehead","vfnoteStruct","align_center","auto_stem","slash","GraceSlash","firstNote","IsCueNote","glyph_font_scale","DEFAULT_NOTATION_FONT_SCALE","GraceNote","SCALE","stroke_px","LEDGER_LINE_OFFSET","StaveNote","stagger_same_whole_notes","getKeyProps","ledgerLineStyle","defaultColorStem","stemColor","StemColor","stemStyle","setStemStyle","flag","setFlagStyle","x_shift","setStemDirection","Stem","UP","DOWN","addAccidental","tremoloStrokes","TremoloStrokes","tremolo","Tremolo","extra_stroke_scale","y_spacing_scale","addModifier","keyProps","addDotToAll","articulation","vfArt","vfArtPosition","Modifier","Position","ABOVE","getStemDirection","BELOW","articulationEnum","ArticulationEnum","accent","Articulation","downbow","fermata","marcatodown","marcatoup","invertedfermata","lefthandpizzicato","naturalharmonic","snappizzicato","staccatissimo","staccato","tenuto","upbow","strongaccent","setPosition","oContainer","vfOrna","vfPosition","GetOrnament","OrnamentEnum","DelayedInvertedTurn","Ornament","setDelayed","DelayedTurn","InvertedMordent","InvertedTurn","Mordent","Trill","Turn","AccidentalBelow","setLowerAccidental","AccidentalAbove","setUpperAccidental","arpeggioType","ArpeggioType","ARPEGGIO_DIRECTIONLESS","Stroke","BRUSH_DOWN","BRUSH_UP","RASQUEDO_DOWN","RASQUEDO_UP","ROLL_DOWN","ROLL_UP","tabPositions","tabPhrases","tabVibrato","tabNote","tabPosition","StringNumberTab","fret","FretNumber","BendArray","bend","phraseText","phraseStep","bendalter","Bend","VibratoStroke","TabNote","positions","phrase","Vibrato","annotation","Line","timeSpec","SymbolEnum","RhythmSymbolEnum","Rhythm","COMMON","CUT","TimeSignature","KeyEnum","minorMap","major","majorMap","StaveConnector","SINGLE","SINGLE_RIGHT","THIN_DOUBLE","BOLD_DOUBLE_RIGHT","BOLD_DOUBLE_LEFT","fontSize","TimesNewRoman","weight","family","Underlined","Kokila","drawPitch","OctaveShift","getPitchFromOctaveShift","setAccidental","tranposedPitch","vfnoteIndex","vfNote","noteheads","note_heads","getSVGId","getSVGGElement","getStemSVG","getBeamSVGs","beamSVGs","newSVG","systemIndex","VexFlowMusicSystem","isTabMeasure","VexFlowMultiRestMeasure","VexFlowTabMeasure","extraGraphicalMeasure","ExtraGraphicalMeasurePreviousMeasure","addFermataAtTiedEndNote","tiedNote","se","vfClefParams","vfClefBefore","ClefNote","chordSymbolSpacing","graphicalChordSymbolContainer","createGraphicalTechnicalInstruction","technicalInstruction","VexFlowInstantaneousDynamicExpression","instantaneousDynamicExpression","DynamicEnum","DynEnum","VexFlowInstrumentBrace","VexFlowInstrumentBracket","firstVexFlowStaffLine","lastVexFlowStaffLine","vexflowConnector","setType","BRACE","firstVexMeasure","lastVexMeasure","addConnector","BRACKET","setContext","con","topY","top_stave","getYForLine","botY","bottom_stave","getNumLines","thickness","getX","stave1","stave2","setXShift","NoteSubGroup","vfVoices","vfTies","vfRepetitionWords","connectors","autoVfBeams","autoTupletVfBeams","vfbeams","tuplets","vftuplets","setAbsoluteCoordinates","stave","Stave","fill_style","space_above_staff_ln","space_below_staff_ln","setLineNumber","setBegBarType","Barline","setEndBarType","updateInstructionWidth","clean","addClef","vfclef","StaveModifier","BEGIN","lineNumber","setNumLines","getBottomLineY","num_lines","line_config","setKeySignature","keySignature","timeSig","setStyle","endClef","setEndClef","modifier","getModifiers","originalStrokeStyle","originalFillStyle","getStyle","getCategory","getPosition","END","transparentStyle","originalStyle","hasEndClef","addMeasureLine","renderInitialLine","modifiers","checkContext","setRendered","drawVerticalBar","DOUBLE","drawVerticalEndBar","REPEAT_BEGIN","drawRepeatBar","REPEAT_END","REPEAT_BOTH","addMeasureNumber","StavePositionEnum","setText","justification","shift_x","shift_y","addWordRepetition","RepetitionInstructionEnum","Segno","Repetition","SEGNO_LEFT","LEFT","Coda","CODA_LEFT","DaCapo","DC","DalSegno","DS","Fine","FINE","ToCoda","TO_CODA","DaCapoAlFine","DC_AL_FINE","DaCapoAlCoda","DC_AL_CODA","DalSegnoAlFine","DS_AL_FINE","DalSegnoAlCoda","DS_AL_CODA","addVolta","voltaType","Volta","Ending","AlignmentType","Begin","endsRepetitionEnding","BEGIN_END","beginsRepetitionEnding","skylineMinForMeasure","prevMeasure","newSkylineValueForMeasure","vexFlowVoltaHeight","currentMeasureNumber","tempMeasure","prevStaveModifiers","nextStaveModifier","prevskyBottomLineCalculator","prevStart","prevEnd","prevMeasureSkyline","y_shift","setVoltaType","endingIndices","voiceID","connector","correctNotePositions","formatVoices","getVoicesWithinMeasure","ve","gNote","relPosY","getGraphicalVoiceEntriesPerVoice","voiceEntries","getRestFilledVexFlowStaveNotesPerVoice","latestVoiceTimestamp","gvEntries","gNotesStartTimestamp","gNotesEndTimestamp","noteEnd","inBetweenLength","ghostGves","createGhostGves","gapFromMeasureStart","measureEndTimestamp","restLength","vfghosts","GhostNotes","vfghost","ghostGve","vfStaveNote","mybeam","currentTupletBuilder","finalizeBeams","beamedNotes","beamHasQuarterNoteOrLonger","psBeam","autoStemBeam","beamColor","isGraceBeam","stemColors","vfBeam","Beam","render_options","beam_width","partial_beam_length","flat_beams","flat_beam_offset","flat_beam_offset_per_beam","autoBeamNotes","currentTuplet","notesToAutoBeam","consecutiveBeamableNotes","tupletNotesToAutoBeam","separateAutoBeams","haveTwoOrMoreNotesToBeamAlready","noteIsQuarterOrLonger","unbeamableNote","contains","noteTuplet","tupletContainsUnbeamableNote","NoteTypeXml","NoteType","QUARTER","autoBeamOptions","generateBeamOptions","beam_middle_only","notesForSeparateAutoBeam","newBeams","generateBeams","finalizeTuplets","tupletBuilder","tupletStaveNotes","tupletVoiceEntries","tupletVoiceEntry","notesOccupied","NormalNotes","bracketed","Bracket","TupletLabelNumber","Tuplet","LOCATION_TOP","tupletLabelNumberPlacement","LOCATION_BOTTOM","notes_occupied","num_notes","ratioed","graceSlur","graceGVoiceEntriesBefore","graveGVoiceEntriesAdded","GraceSlur","graceNotes","gveGrace","GraceNoteSlash","graceNoteGroup","GraceNoteGroup","graceGve","GraceAfterMainNote","setModifierXOffsets","Voice","beat_value","num_beats","resolution","RESOLUTION","setMode","SOFT","restFilledEntries","vexFlowVoiceEntry","getTicks","addTickable","vfse","clefModifier","createFingerings","createStringNumber","createArpeggio","setStemDirectionFromVexFlow","graceGVoiceEntry","createArticulations","createOrnaments","Arpeggio","arpeggio","StrokeTypeFromArpeggioType","all_voices","addStroke","vfStaffEntry","gVoiceEntry","gnote","generateArticulations","gvoices","generateOrnaments","numberOfFingerings","fingeringIndex","modifierPosition","offsetX","baseFingeringXOffset","RIGHT","sourceStaff","fretFinger","FretHandFinger","setOffsetX","offsetYSign","ordering","perFingeringShift","shiftCount","setOffsetY","stringNumber","StringNumber","radius","stringIndex","stringInstruction","StringInstruction","vfStringNumber","offsetY","baseStringNumberXOffset","vfBeginInstructionsWidth","vfEndInstructionsWidth","mod","getPadding","addStaveTie","stavetie","multiRestElement","MultiMeasureRest","setStave","VexFlowMusicSheetCalculator","beamsNeedUpdate","VexFlowGraphicalSymbolFactory","VexFlowTextMeasurer","VexflowStafflineNoteCalculator","DEFAULT_FONT_STACK","Gonville","Bravura","Custom","Petaluma","calculateXPosition","allVoices","formatter","Formatter","softmaxFactor","maxStaffEntries","maxStaffEntriesPlusAccidentals","measureAccidentals","setMaxAccidentals","mvoices","mvoice","ticksUsed","equals","totalTicks","joinVoices","minStaffEntriesWidth","preCalculateMinTotalWidth","formatVoicesDefault","formatToStave","formatVoicesAlignRests","align_rests","Always","Auto","alignRests","collidableVoiceEntries","numberOfRests","vexflowMeasure","calculateElongationFactor","lastEntryDict","elongationFactorForMeasureWidth","oldMinSpacing","nextMeasureOverlap","newElongationFactorForMeasureWidth","currentContainerIndex","minSpacing","overlapAllowedIntoNextMeasure","GraphicalLyricEntry","SyllableIndex","TextAlignment","IsCenterAligned","syllables","dashSpace","bBox","labelWidth","spacingNeededToLastContainer","currentSpacingToLastContainer","currentSpacingToMeasureEnd","spacingNeededToMeasureEnd","maxXInMeasure","IsLeft","elongationFactorForMeasureWidthForCurrentContainer","elongationFactorNeededForMeasureEnd","elongationFactorNeededForLastContainer","lastNoteDuration","sourceNoteDuration","overlap","cumulativeOverlap","calculateElongationFactorFromStaffEntries","lastLyricEntryDict","lastChordEntryDict","GraphicalTie","positionNote","vfStartNote","vfEndNote","startNoteIndexInTie","endNoteIndexInTie","vfTie1","StaveTie","first_indices","first_note","vfTie2","last_indices","last_note","startTieNote","endTieNote","slideDirection","TabSlide","TabTie","tieDirection","getTieDirection","setDirection","dynamicStartPosition","ParentMultiTempoExpression","staffNumber","StaffNumber","firstMetronomeMark","vfStave","vexflowDuration","beatUnit","NoteTypeHandler","getNoteDurationFromType","hasExpressionsAboveStaffline","isMetronomeExpression","skyline","setTempo","bpm","TempoInBpm","dots","dotted","setShiftX","rehearsalExpression","firstMeasureNumber","setSection","startTimeStamp","endTimeStamp","minMeasureToDrawIndex","maxMeasureToDrawIndex","graphicalOctaveShift","VexFlowOctaveShift","setStartNote","setEndNote","endsOnDifferentStaffLine","lastMeasureOfFirstShift","lastNoteOfFirstShift","systemsInBetweenCount","nextShiftStaffline","nextShiftFirstMeasure","nextOctaveShift","nextShiftLastMeasure","lastNote","logPrefix","calculateOctaveShiftSkyBottomLine","vfOctaveShift","startXOffset","endXOffset","stopX","textBracket","getTextBracket","TextBracket","Positions","TOP","headroom","Infinity","getStave","top_text_position","footroom","bottom_text_position","uppermostMeasure","numMeasures","SkyBottomLineBatchCalculator","AlignmentManager","ae","graphicalLyricEntry","Word","lyricsEntryIndex","GraphicalLyricWord","findIndexGraphicalSlurFromSlur","gSlurs","slurIndex","openSlursDict","openGraphicalSlurs","oldGSlur","newGSlur","sortedGSlurs","Compare","isCrossed","VexFlowMusicSheetDrawer","MusicSheetDrawer","DrawingParameters","backends","pageIdx","STAVE_LINE_THICKNESS","STEM_WIDTH","DEFAULT_TAB_FONT_SCALE","setZoom","absolutePos","drawSlurs","vfstaffLine","graphicalSlur","drawSlur","curvePointsInPixels","p3","p4","drawStaffEntry","DrawOverlayLine","musicPage","musicPageIndex","backendToUse","startPosition","drawSampledLine","indices","currentValue","absolute","verticalStart","verticalEnd","horizontalStart","horizontalEnd","fingeringEntry","drawLyrics","lyricEntries","vexFlowOctaveShift","abstractGraphicalExpression","graphicalExpression","currLine","xOffsetInPixel","newNode","vfTopMeasure","nextIndex","nextBottomMeasure","nextTopMeasure","firstVexStaff","lastVexStaff","vexFlowBracket","vexFlowBrace","supscript","BOTTOM","vve","superscript","CurvePositionEnum","VexFlowSlur","parentslur","parentSlur","vfSlur","curve_Options","cps","invert","NEAR_TOP","position_end","spacing","createVexFlowCurve","vfCurve","Curve","lastBorderLeft","preFormatted","applyBordersFromVexflow","getAbsoluteX","glyph","getBoundingBox","stringNumberOffsets","calculateModifierXOffsets","fingeringOffsets","collisionDistance","offsets","collisionFound","slursInVFStaffLine","alignmentManager","SlursInVFStaffLine","addVFSlurToVFStaffline","stafflineCount","TabStave","CreateTabNote","fontSizeStandard","measureText","setFontSize","staveNote","getNoteHeadBeginX","modifierWidth","mVexFlowStaveNote","defaultColorNotehead","defaultColorRest","transparentColor","noteheadColor","sourceNoteNoteheadColor","NoteheadColor","AutoColoring","CustomColorSet","ColoringSetCurrent","NoteheadColorCurrentlyRendered","beamNotes","colorBeam","setLedgerLineStyle","setVoiceEntryStemColor","stemTransparent","staffPitchListMapping","baseLineNote","baseLineOctave","currentPitchList","findOrInsert","positionByXml","displayStepUnpitched","vfGraphicalNote","notePitch","displayNote","displayOctave","displayOctaveUnpitched","pitchIndex","PitchIndexOf","half","mappedPitch","createShader","gl","source","shader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","deleteShader","maxTextureSize","getParameter","MAX_TEXTURE_SIZE","getMaximumTextureSize","program","vertexShader","fragmentShader","createProgram","attachShader","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","deleteProgram","VERTEX_SHADER","FRAGMENT_SHADER","constants","macroName","macroValue","regex","updateMacroConstantsInShaderSource","NUM_ROWS","ELEMENT_HEIGHT","vertices","vertexBuffer","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","Float32Array","STATIC_DRAW","useProgram","positionAttributeLocation","getAttribLocation","enableVertexAttribArray","vertexAttribPointer","FLOAT","createVertexBuffer","texture","textureIdx","uniformName","createTexture","activeTexture","TEXTURE0","bindTexture","TEXTURE_2D","texParameteri","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","TEXTURE_MIN_FILTER","NEAREST","TEXTURE_MAG_FILTER","uniformLocation","getUniformLocation","uniform1i","viewport","texImage2D","RGBA","UNSIGNED_BYTE","drawArrays","TRIANGLES","pixels","readPixels","skyLinePixel","bottomLinePixel","InstrumentalGroup","hasLyrics","hasChordSymbols","lyricVersesNumbers","subInstruments","nameLabel","Name","IdString","midiInstrumentID","Volume","volume","PlaybackTranspose","playbackTranspose","SubInstruments","getSubInstrument","subInstrumentIdString","subInstrument","partAbbreviation","Audible","SetVoiceAudible","voiceId","SetVoiceFollowing","SetStaffAudible","staffId","isAudibleInOtherStaves","st","SetStaffFollow","follow","isFollowingInOtherStaves","areAllVoiceVisible","createStaves","Staff","instrumentalGroups","proto","__proto__","tag","defaultTextTranslation","reInit","init","parts","sheetStart","SelectionStart","sheetEnd","SelectionEnd","SheetEndTimestamp","calcMapping","getCurrentRepetitionTimestampTransform","curEnrolledTimestamp","curTransform","timestamps","$from","absoluteEnrolledToSheetTimestamp","transform","Parts","MusicSheet","getIterator","MusicPartManagerIterator","setSelectionStart","beginning","setSelectionRange","iterator","currentRepetition","CurrentRepetition","curTimestampTransform","TimestampTransform","CurrentEnrolledTimestamp","CurrentSourceTimestamp","EndReached","JumpOccurred","backJumpOccurred","jumpRep","JumpResponsibleRepetition","nextBackJump","curRepetition","curRepetitionIteration","CurrentJumpResponsibleRepetitionIterationBeforeJump","moveToNext","sourceTimestamp","enrolledTimestamp","nextForwardJump","startTimestamp","endTimestamp","currentMeasureIndex","currentPartIndex","currentVoiceEntryIndex","currentDynamicEntryIndex","currentTempoEntryIndex","currentDynamicChangingExpressions","endReached","frontReached","currentEnrolledMeasureTimestamp","currentRelativeInMeasureTimestamp","currentVerticalContainerInMeasureTimestamp","jumpResponsibleRepetition","activeDynamicExpressions","currentVoiceEntries","rep","setRepetitionIterationCount","currentMeasure","ContinuousDynamicExpression","DynamicsContainer","currentTempoChangingExpression","activeTempoExpression","FrontReached","CurrentMeasure","CurrentRepetitionIteration","getRepetitionIterationCount","CurrentBpm","currentBpm","CurrentVoiceEntries","CurrentMeasureIndex","CurrentRelativeInMeasureTimestamp","forwardJumpOccurred","ActiveTempoExpression","ActiveDynamicExpressions","CurrentTempoChangingExpression","currentMappingPart","CurrentVisibleVoiceEntries","getVisibleEntries","CurrentAudibleVoiceEntries","getAudibleEntries","getCurrentDynamicChangingExpressions","CurrentScoreFollowingVoiceEntries","getScoreFollowingEntries","recursiveMove","moveToNextVisibleVoiceEntry","notesOnly","checkEntries","resetRepetitionIterationCount","incrementRepetitionIterationCount","repetitionIterationCountDictKeys","iterationCount","repetitionIterationCountDictValues","handleRepetitionsAtMeasureBegin","parentRepetition","StartIndex","EndIndex","handleRepetitionsAtMeasureEnd","BackwardJumpInstructions","UserNumberOfRepetitions","doBackJump","forwardJumpInstruction","forwardJumpTargetMeasureIndex","getForwardJumpTargetForIteration","getBackwardJumpTarget","activateCurrentRhythmInstructions","SheetPlaybackSetting","activateCurrentDynamicOrTempoInstructions","timeSortedDynamics","TimestampSortedDynamicExpressionsList","parMultiExpression","dynamicsContainer","continuousDynamicExpression","startTime","endTime","ParentMultiExpression","timeSortedTempoExpressions","TimestampSortedTempoExpressionsList","AbsoluteEndTimestamp","currentContainer","getVoiceEntries","selectionEnd","tlist","visibleEntries","audibleEntries","followingEntries","PlaybackSettings","sourceMeasures","repetitions","dynListStaves","timestampSortedDynamicExpressionsList","timestampSortedTempoExpressionsList","musicPartManager","musicSheetErrors","MusicSheetErrors","defaultStartTempoInBpm","drawErroneousMeasures","hasBeenOpenedForTheFirstTime","currentEnrolledPosition","playbackSettings","userStartTempoInBPM","MusicPartManager","hasBPMInfo","DynListStaves","HasBeenOpenedForTheFirstTime","InitializeStartTempoInBPM","startTempo","DefaultStartTempoInBpm","Path","path","TitleString","SubtitleString","ComposerString","LyricistString","SheetErrors","selectionStart","HasBPMInfo","addMeasure","checkForInstrumentWithNoVoice","staffIndexInMusicSheet","fillStaffList","getListOfMeasuresFromIndeces","getNextSourceMeasure","getLastSourceMeasure","resetAllNoteStates","Normal","getMusicSheetInstrumentIndex","instrumentIndex","staffLineIndex","setRepetitionNewUserNumberOfRepetitions","repIndex","getRepetitionByIndex","other","localeCompare","getExpressionsStartTempoInBPM","me","StartTempo","Errors","FirstMeasureNumber","LastMeasureNumber","CurrentEnrolledPosition","FullNameString","getEnrolledSelectionStartTimeStampWorkaround","iter","lastMeasure","getSourceMeasureFromTimeStamp","vssec","findSourceMeasureFromTimeStamp","getVisibleInstruments","visInstruments","defaultTitle","sourceMusicPart","parentPartListEntry","repetitionRun","isEnding","IsRepetition","IsEnding","IsLastRepetitionRun","RepetitionRun","ParentPartListEntry","SourceMusicPart","StartTimestamp","comp","enrolledTimestamps","PartListEntry","virtualOverallRepetition","backwardJumpInstructions","endingParts","endingIndexDict","userNumberOfRepetitions","visibles","fromWords","repetitonIterationOrder","numberOfEndings","musicSheet2","EndingIndexDict","EndingParts","Visibles","DefaultNumberOfRepetitions","defaultNumber","checkRepetitionForMultipleLyricVerses","endingsDiff","NumberOfEndings","iteration","endingIndex","part","startMarker","SetEndingStartIndex","endingNumbers","RepetitionEndingPart","endingNumber","setEndingEndIndex","setEndIndex","FromWords","lyricVerses","verses","FirstSourceMeasureNumber","LastSourceMeasureNumber","endingPart","MeasuresCount","ParentRepetition","setStartIndex","pluginManager","repetitionInstructionReader","xmlMeasureList","voiceGeneratorsDict","staffMainVoiceGeneratorDict","divisions","currentClefNumber","currentXmlMeasureIndex","activeKeyHasBeenInitialized","abstractInstructions","openChordSymbolContainers","activeClefsHaveBeenInitialized","createExpressionGenerators","slurReader","SlurReader","ActiveKey","activeKey","MaxTieNoteFraction","maxTieNoteFraction","ActiveRhythm","readNextXmlMeasure","measureStartAbsoluteTimestamp","octavePlusOne","followingMultirestMeasures","inSourceMeasureInstrumentIndex","prepareReadingMeasure","currentFraction","previousFraction","divisionsException","lastNoteWasGrace","measureNode","xmlMeasureListArr","isInteger","MeasureNumberXML","measureNumberXml","previousNode","xmlNodeIndex","xmlNode","newSystemAttr","newPageAttr","printObject","noteStaff","currentStaff","isChord","noteVoice","currentVoiceGenerator","getOrCreateVoiceGenerator","typeDuration","noteDivisions","noteDuration","normalNotes","ITextTranslation","translateText","getNoteDurationFromTypeNode","getNoteDurationForTuplet","notationsNode","isGraceNote","graceNoteSlash","graceNode","notationNode","isCueNote","typeNode","noteTypeXml","UNDEFINED","sizeAttr","StringToNoteType","stemColorXml","stemDirectionXml","stemNode","Double","stemColorAttr","parseXmlColor","noteheadColorXml","vibratoStrokes","ornamentsNode","tremoloNode","tremoloType","tremoloStrokesGiven","vibratoNode","vibratoType","noteheadNode","colorAttr","noteColorXml","noteColorAttr","currentStaffEntry","findOrCreateStaffEntry","hasVoiceEntry","checkForStaffEntryLink","beginOfMeasure","hasNotes","saveAbstractInstructionList","read","expressionReader","expressionReaders","readExpressionStaffNumber","readExpressionParameters","divisionsNode","readDivisionsFromNotes","MusicSheetReadingException","addAbstractInstruction","isAttributesNodeAtBeginOfMeasure","isAttributesNodeAtEndOfMeasure","saveClefInstructionAtEndOfMeasure","staffDetailsNodes","staffDetailsNode","staffLinesNode","staffNumberAttr","measureStyle","multipleRest","multipleRestValueXml","multipleRestNumber","currentMultirestStartMeasure","forFraction","backFraction","directionTypeNode","relativePositionInMeasure","handeled","handleRepetitionInstructionsFromWordsOrSymbols","addOctaveShift","handleLineRepetitionInstructions","stringValue","endingBarStyleXml","SystemLinesEnumHelper","xmlBarlineStyleToSystemLinesEnum","tempo","parseFloat","ChordSymbolReader","readChordSymbol","checkForOpenBeam","createDefaultClefInstruction","createDefaultKeyInstruction","closeOpenExpressions","TempoInBPM","Message","xmlColorString","doCalculationsAfterDurationHasBeenSet","checkOpenTies","voiceGenerator","GetVoice","mainVoiceGenerator","VoiceGenerator","ExpressionReader","firstStaffEntry","removeFirstInstructionOfTypeClefInstruction","removeFirstInstructionOfTypeKeyInstruction","attributesNode","attributesNodeIndex","firstNoteNodeIndex","childs","nextNoteNodeIndex","attrNode","guitarPro","transposeNode","chromaticNode","clefList","nodeList","clefEnum","clefOctaveOffset","lineNode","signNode","isSupportedClef","clefOctaveNode","keyNode","keyEnum","modeNode","timeNode","symbolEnum","timePrintObject","symbolAttribute","printObjectAttribute","denom","senzaMisura","timeList","beatsList","typeList","fractions","maxDenom","numbers","newRhythmInstruction","instructionTimestamp","newClefInstruction","sseIndex","firstSse","previousPrintedMeasure","lastStaffEntryBefore","newKeyInstruction","removeFirstInstructionOfTypeRhythmInstruction","actualNotes","actual","normal","directionStaffNumber","staffNode","divisionsFromNote","xmlMeasureIndex","durationNode","MusicSheetReader","afterSheetReadingModules","ReaderPluginManager","MusicSymbolModuleFactory","createRepetitionInstructionReader","repetitionCalculator","createRepetitionCalculator","PluginManager","instrumentReaders","instrumentReader","createMusicSheet","_createMusicSheet","_removeFromArray","trimString","_lastElement","sourceMeasureCounter","pushSheetLabels","partlistNode","partInst","partList","initializeReading","couldReadMeasure","octavePlusOneEncoding","encoding","checkIfRhythmInstructionsAreSetAndEqual","checkSourceMeasureForNullEntries","setSourceMeasureDuration","removeRedundantInstructions","calculateRepetitions","repetitionInstructions","instrumentDict","createInstrumentGroups","getCompleteNumberOfStavesFromXml","idNode","currentInstrument","instrumentNumberOfStaves","getInstrumentNumberOfStavesFromXml","InstrumentReader","rhythmInstructions","maxRhythmValue","areRhythmInstructionsMixed","removeAllInstructionsOfTypeRhythmInstruction","instrs","instrumentsMaxTieNoteFractions","activeRythmMeasure","instrumentsDurations","calculateInstrumentsDuration","maxInstrumentDuration","instrumentsDuration","Equal","checkFractionsForEquivalence","reverseCheck","checkIfMeasureIsImplicit","allInstrumentsHaveSameDuration","firstStaffIndexOfInstrument","graphicalMeasureIsEmpty","setErrorInGraphicalMeasure","filePath","readComposer","readTitle","readTitleAndComposerFromCredits","barI","filenameSplits","presentAttrsWithValue","val","attr","identificationNode","creators","creator","systemYCoordinates","computeSystemYCoordinates","finalTitle","finalSubtitle","possibleTitle","largestTitleCreditSize","largestCreditYInfo","creditElements","credit","creditChild","creditJustify","creditY","creditYGiven","creditYInfo","creditSize","titleCreditSizeInt","paperHeight","topSystemDistance","defi","found","systemLayouts","syslab","topSystemDistanceString","titleNode","titleNodeChild","movementNode","finalSubTitle","subtitleNodeChild","workNumber","entryList","instrumentId","currentGroup","entryArray","instrIdString","partElements","partElement","SubInstrument","subElement","setMidiInstrument","subInstr","instrumentElements","instrumentElement","fixedKey","pan","iG","instr","partNode","xmlMeasure","stavesNode","RepetitionInstructionReader","RepetitionCalculator","getAccEnumFromString","addArticulationExpression","currentVoiceEntry","childNode","isSupportedArticulation","placementValue","newArticulation","marcatoType","hasArticulation","addFermata","addTechnicalArticulations","technicalNode","currentNote","xmlElementToArticulationEnum","xmlArticulation","nodeFingering","currentTechnicalInstruction","createTechnicalInstruction","TechnicalInstructionType","nodeString","stringOrFingeringNode","TechnicalInstruction","getPlacement","placementAttr","defaultPlacement","addOrnament","ornament","elementToOrnamentEnum","ornamentElement","accidentalsList","accidentalsListArr","accidentalNode","kind","kindText","rootStep","rootAlter","rootNote","rootAlteration","rootPitch","chordKind","bassPitch","kindValue","bass","bassStep","bassAlter","bassNote","bassAlteration","degreeNodes","degreeNode","degreeValue","degreeAlter","degreeType","alter","ChordDegreeText","Degree","openContinuousDynamicExpressions","globalStaffIndex","inSourceMeasureCurrentFraction","inSourceMeasureFormerFraction","ignoreDivisionsOffset","offsetNode","offsetDivisions","directionTimestamp","offsetFraction","multiply","placeAttr","placementString","dynamicsNode","defAttr","readExpressionPlacement","wedgeNode","wordsNode","rehearsalNode","directionNode","inSourceMeasurePreviousFraction","isTempoInstruction","isDynamicInstruction","tempoAttr","dynAttr","match","soundTempo","soundDynamic","dirNode","dirContentNode","bpmNumber","createNewTempoExpressionIfNeeded","instantaneousTempoExpression","currentMultiTempoExpression","addExpression","CombinedExpressionsText","fromNotation","interpretInstantaneousDynamics","interpretWords","interpretWedge","interpretRehearsalMark","openCont","createNewMultiExpressionIfNeeded","NumberXml","closeOpenContinuousDynamic","openContinuousTempoExpression","closeOpenContinuousTempo","octaveStaffNumber","octaveShiftNode","readPlacement","numberXml","readNumber","getMultiExpression","catchLogMessage","expressionText","InstantaneousDynamicExpression","InMeasureTimestamp","activeInstantaneousDynamic","fontStyleAttr","checkIfWordsNodeIsRepetitionInstruction","fillMultiOrTempoExpression","numberStringXml","wedgeNumberXml","addWedge","RehearsalExpression","existingMultiExpression","MultiExpression","MultiTempoExpression","inputString","tmpInputString","createExpressionFromString","stringTrimmed","isInputStringInstantaneousTempo","isInputStringContinuousTempo","continuousTempoExpression","isInputStringContinuousDynamic","openWordContinuousDynamic","MoodExpression","isInputStringMood","hasMoodExpressions","moodExpression","unknownMultiExpression","hasDigit","unknownExpression","UnknownExpression","openContinuousDynamicExpression","EndingContinuousDynamic","dyn","addLyricEntry","lyricNodeList","lyricNodeListArr","lyricNode","syllabic","textNode","textAndElisionNodes","lyricNodeChildren","nextText","nextSyllabic","elisionIndex","currentLyricVerseNumber","errorNumberParse1","currentLyricWord","syllableNumber","LyricWord","lvn","handleRepetitionInstructions","RepetitionInstructionComparer","currentRepetitionInstruction","StartLine","BackJumpLine","barlineNode","pieceEndingDetected","hasRepeat","styleNode","barlineNodeElements","separatedEndingIndices","separatedEndingIndex","search","newInstruction","RepetitionInstruction","addInstruction","relativeMeasurePosition","dsRegEx","innerText","StringUtil","StringContainsSeparatedWord","dcRegEx","segnoCount","codaCount","toCodaCount","dalSegnaCount","findInstructionInPreviousMeasure","foundInstruction","backwardSearchForPreviousIdenticalInstruction","currentInstructionIndex","searchedType","currentInstruction","currentRepetitionInstructions","openSlurDict","addSlur","slurNodes","slurNode","slurNumber","slurPlacementXml","orientationAttr","Slur","checkForDoubleSlur","voiceMeasureReadPlugins","addVoiceMeasureReadPlugin","plugin","processVoiceMeasureReadPlugins","measureVoiceEntries","measureReadCalculations","mainVoice","beamNumberOffset","currentOctaveShift","tupletDict","openTupletNumber","lyricsReader","LyricsReader","articulationReader","ArticulationReader","openTieDict","addToVoice","isGrace","noteNode","chord","dotsXml","addRestNote","addSingleNote","lyricElements","hasTupletCommand","readArticulations","slurElements","tupletElements","addTuplet","arpeggioNode","currentArpeggio","arpeggioAlreadyExists","directionAttr","addNote","tiedNodeList","addTie","SIMPLE","slideNodeList","SLIDE","hammerNodeList","HAMMERON","pulloffNodeList","PULLOFF","handleTimeModificationNode","StaffEntryLink","linkMusicTimestamp","verticalSourceStaffEntryContainer","getVerticalContainerByTimestamp","handleOpenBeam","articNode","fermaNode","tecNode","ornaNode","accidentalValue","playbackInstrumentId","noteheadShapeXml","noteheadFilledXml","noteAlter","noteAccidental","noteStep","noteOctave","xmlnodeElementsArr","noteElement","noteElementsArr","pitchElement","displayStepElement","noteValueShift","lineShiftFromNoteEnum","noteLength","fretNumber","bends","stringNode","fretNode","bendalterNote","addNoteInfo","PlaybackInstrumentId","StemColorXml","createBeam","restFraction","octaveElement","displayStep","ExtendedNoteList","NoteheadColorXml","beamNode","beamAttr","beamNumber","mainBeamNode","currentBeamTag","BeamNumber","sameVoiceEntry","beamNote","addNoteToBeam","endBeam","pop","openBeam","beamLastNoteStaffEntry","getVerticalContainerIndexByTimestamp","candidateNote","tupletNodeList","timeModNode","tupletNodeListArr","tupletNode","bracketAttr","tupletNumber","tupletLabelNumber","PlacementFromXml","subnotelist","Fractions","getTupletNoteDurationFromType","foundNonRest","subList","tupletnumber","noTupletNumbering","noteList","tieNodeList","tieType","tieNode","findCurrentNoteInTieDict","newTieNumber","getNextAvailableNumberForTie","TieNumber","tieNumber","AddNote","NoteIndexToTieDirection","tieTabNote","tieCandidateNote","parentInstrument","parseMidiInstrument","midiInstrument","Acoustic_Grand_Piano","Bright_Acoustic_Piano","Electric_Grand_Piano","Electric_Piano_1","Electric_Piano_2","instrumentType","tmpName","Synth_Voice","Banjo","Recorder","Trombone","Viola","Cello","Clarinet","Contrabass","Flute","French_Horn","Acoustic_Guitar_nylon","Orchestral_Harp","Oboe","Church_Organ","Piccolo","Tenor_Sax","Steel_Drums","String_Ensemble_1","Trumpet","Tuba","Violin","Woodblock","otherArticulation","BeamEnum","beamNumberOffsetToXML","extendedNoteList","BeamNumberOffsetToXML","chordDegrees","RootPitch","ChordKind","BassPitch","ChordDegrees","chordSymbol","transposedRootPitch","getTextFromChordKindEnum","getTextForAccidental","chordDegree","alteration","add","subtract","degreeTypeAry","customChords","customChord","hasCustomChordDegrees","degType","deg","alternateName","transposedBassPitch","stringList","AbstractTempoExpression","parentMultiTempoExpression","wordsToFind","wordToFind","stringContainsSeparatedWord","word","dynamicType","startVolume","endVolume","startMultiExpression","endMultiExpression","StartVolume","EndVolume","isStringInStringList","listContinuousDynamicIncreasing","listContinuousDynamicDecreasing","getInterpolatedDynamic","currentAbsoluteTimestamp","continuousAbsoluteStartTimestamp","continuousAbsoluteEndTimestamp","interpolationRatio","isWedge","setTempoType","listContinuousTempoFaster","listContinuousTempoSlower","tempoType","ContinuousTempoType","piuMosso","allargando","ritenuto","TempoType","EndTempo","endTempo","getAbsoluteFloatTimestamp","getInterpolatedTempo","accelerando","ritardando","setOctaveShiftValue","octaveValue","DynamicExpressionSymbolEnum","dynamicExpression","soundDynamics","dynamicEnum","dynamicToRelativeVolumeDict","ffffff","fffff","ffff","fff","ff","mf","sf","sfp","sfpp","fp","rf","rfz","sfz","sffz","fz","mp","pp","ppp","pppp","ppppp","pppppp","SoundDynamic","calculateLength","MidiVolume","listInstantaneousDynamics","getDynamicExpressionSymbol","InvalidEnumArgumentException","staticConstructor","isMetronomeMark","setTempoAndTempoType","tempoEnum","larghissimo","grave","lento","largo","larghetto","adagio","adagietto","andanteModerato","andante","andantino","moderato","allegretto","allegroModerato","allegro","vivace","vivacissimo","allegrissimo","presto","prestissimo","listInstantaneousTempoLarghissimo","listInstantaneousTempoGrave","listInstantaneousTempoLento","listInstantaneousTempoLargo","listInstantaneousTempoLarghetto","listInstantaneousTempoAdagio","listInstantaneousTempoAdagietto","listInstantaneousTempoAndanteModerato","listInstantaneousTempoAndante","listInstantaneousTempoAndantino","listInstantaneousTempoModerato","listInstantaneousTempoAllegretto","listInstantaneousTempoAllegroModerato","listInstantaneousTempoAllegro","listInstantaneousTempoVivace","listInstantaneousTempoVivacissimo","listInstantaneousTempoAllegrissimo","listInstantaneousTempoPresto","listInstantaneousTempoPrestissimo","listInstantaneousTempoChangesGeneral","tempoInBpm","getDefaultValueForTempoType","listInstantaneousTempoAddons","addon","changes","setMoodType","listMoodAffettuoso","listMoodAgitato","listMoodAnimato","listMoodAppassionato","listMoodBrillante","listMoodCantabile","listMoodDolce","listMoodEnergico","listMoodEroico","listMoodEspressivo","listMoodFurioso","listMoodGiocoso","listMoodGioioso","listMoodGrandioso","listMoodGrazioso","listMoodLacrimoso","listMoodLeggiero","listMoodMaestoso","listMoodMalinconico","listMoodMarcato","listMoodMarziale","listMoodMesto","listMoodMorendo","listMoodNobilmente","listMoodPatetico","listMoodPesante","listMoodSaltando","listMoodSautille","listMoodScherzando","listMoodSostenuto","listMoodSpiccato","listMoodTenerezza","listMoodTranquillamente","listMoodTrionfante","Mood","moodType","MoodEnum","Affettuoso","Agitato","Animato","Appassionato","Brillante","Cantabile","Dolce","Energico","Eroico","Espressivo","Furioso","Giocoso","Gioioso","Grandioso","Grazioso","Lacrimoso","Leggiero","Maestoso","Malinconico","Marcato","Marziale","Mesto","Morendo","Nobilmente","Patetico","Pesante","Saltando","Sautille","Scherzando","Sostenuto","Spiccato","Tenerezza","Tranquillamente","Trionfante","unknownList","moodList","expressions","endingContinuousDynamic","startingContinuousDynamic","octaveShiftStart","octaveShiftEnd","combinedExpressionsText","abstractExpression","removeExpressionFromEntryList","addExpressionToEntryList","multiExpressionEntry","MultiExpressionEntry","instantaneousTempo","continuousTempo","abstractTempoExpression","checkIfAlreadyExists","tempoExpressionEntry","TempoExpressionEntry","AbstractNotationInstruction","calcParameters","Electric_Bass_finger","Electric_Bass_pick","Fretless_Bass","Slap_Bass_1","Slap_Bass_2","Synth_Bass_1","Synth_Bass_2","clefInstructionG","clefInstructionF","ClefPitch","clefPitch","ReferenceCyPosition","referenceCyPosition","NotEqual","clef2","keyTypeOriginal","alteratedNotes","calcAlteratedNotes","keyInstructionList","keyType","currentKeyInstruction","sharpPositionList","flatPositionList","willAlterateNote","getAlterationForPitch","key2","key1","ForwardJump","rhythmSymbolEnum","rhythm2","rhythm1","master","Master","syllableIndex","containsVoiceEntry","findLyricEntryInVoiceEntry","Appearance","slurs","isRestFlag","NoteAsString","typeLength","noteheadColorCurrentlyRendered","isWholeRest","noteSlur","noteType","NoteTypeXmlValues","indexInArray","shapeTypeXml","filledXml","setShapeFromXml","filledXmlAttribute","shape","ShapeTypeXmlToShape","filled","SourceNote","accidentalAbove","accidentalBelow","staffLinkedExpressions","tempoExpressions","verticalSourceStaffEntryContainers","graphicalMeasureErrors","firstRepetitionInstructions","lastRepetitionInstructions","implicitMeasure","hasEndLine","firstInstructionsStaffEntries","lastInstructionsStaffEntries","MeasureNumberPrinted","activeTimeSignature","getNextMeasure","getPreviousMeasure","tempoInBPM","inMeasureTimestamp","inSourceMeasureStaffIndex","existingVerticalSourceStaffEntryContainer","createdNewContainer","findOrCreateVoiceEntry","createdNewVoiceEntry","createdVoiceEntry","getPreviousSourceStaffEntryFromIndex","checkForEmptyVerticalContainer","undefinedCounter","maxInstDuration","maxDuration","instrumentDuration","getLastSourceStaffEntryForInstrument","instrumentMaxTieNoteFractions","sourceStaffEntries","allRestsOrInvisible","visibleLyrics","multiExpressions","verticalContainerParent","chordSymbolContainers","removeAllInstructionsOfTypeClefInstruction","removeAllInstructionsOfTypeKeyInstruction","calculateMinNoteLength","tieRestDuration","addFollowingNotes","instrumentStaffId","linkStaffEntries","bendArray","vibratoStroke","stringNumberTab","getNoteIndex","comments","$get$","$set$","Comments","parentVoice","parentSourceStaffEntry","stemDirection","graceAfterMainNote","existingArticulation","invertedstrongaccent","spiccato","breathmark","caesura","hasSlur","isStaccato","isAccent","getVerseNumberForLyricEntry","createVoiceEntriesForOrnament","voiceEntryWithOrnament","baselength","baseVoice","baseTimestamp","currentTimestamp","higherPitch","createBaseVoiceEntry","createAlteratedVoiceEntry","lowerPitch","lowerAlteration","higherAlteration","RangeError","url","timeout","xhttp","XMLHttpRequest","ActiveXObject","readyState","DONE","responseText","ontimeout","overrideMimeType","open","send","openSheetMusicDisplay","cursorOptions","hidden","currentPageNumber","cursorElementId","curs","wantedZIndex","cursorElement","adjustToBackgroundColor","manager","graphic","reset","hide","show","update","resetIterator","Sheet","lastSheetMeasureIndex","startMeasureIndex","endMeasureIndex","getStaffEntryFromVoiceEntry","updateCurrentPage","multiRestGMeasure","totalRestMeasures","progressRatio","effectiveWidth","bottomStaffline","measurePositionAndShape","updateWidthAndStyle","FollowCursor","scrollIntoView","behavior","inline","getBoundingClientRect","block","display","newWidth","updateStyle","gradient","createLinearGradient","addColorStop","src","toDataURL","Iterator","Hidden","VoicesUnderCursor","NotesUnderCursor","GNotesUnderCursor","newPageNumber","CursorType","autoResize","OpenSheetMusicDisplay","OSMDOptions","OSMDOptionsStandard","cursorsOptions","zoomUpdated","loadUrlTimeout","backendType","setOptions","cursor","tempTitle","MXLHelper","MXLtoXMLstring","trimmedStr","modifiedXml","OnXMLRead","AJAX","ajax","exc","xmlDocument","xmlDocumentNodes","scorePartwiseElement","URL","score","sheet","needBackendUpdate","updateGraphic","calc","render","offsetWidth","createOrRefreshRenderBackend","enableOrDisableCursors","DrawBoundingBox","canvasDimensionsLimit","createBackend","sizeWarningPartTwo","exportSVG","IsReadyToRender","onXMLRead","backendTypeGiven","BackendTypeFromString","autoBeam","percussionOneLineCutoff","percussionForceVoicesOneLineCutoff","coloringMode","setColoringMode","coloringEnabled","colorStemsLikeNoteheads","disableCursor","drawMetronomeMarks","drawPartAbbreviations","drawFingerings","drawMeasureNumbers","drawMeasureNumbersOnlyAtSystemStart","drawTimeSignatures","measureNumberInterval","useXMLMeasureNumbers","PlacementEnumFromString","fingeringInsideStafflines","newSystemFromXML","newPageFromXML","fillEmptyMeasuresWithWholeRest","followCursor","setWantedStemDirectionByXml","darkMode","defaultColorMusic","defaultColorLabel","defaultFontFamily","defaultFontStyle","drawUpToMeasureNumber","drawFromMeasureNumber","drawUpToPageNumber","drawUpToSystemNumber","tupletsRatioed","tupletsBracketed","tripletsBracketed","resizeHandlerAttached","autoResizeEnabled","pageFormat","setPageFormat","pageBackgroundColor","renderSingleHorizontalStaffline","spacingFactorSoftmax","spacingBetweenTextLines","stretchLastSystemLine","autoGenerateMutipleRestMeasuresFromRestMeasures","preferredSkyBottomLineBatchCalculatorBackend","skyBottomLineBatchMinMeasures","noteIndices","colorSetString","coloringSetCustom","colorString","coloringSetCurrent","setLogLevel","DEBUG","INFO","WARN","ERROR","getLogLevel","handleResize","startCallback","endCallback","rtime","resizeStart","AutoResizeEnabled","getTime","resizeEnd","clearTimeout","attachEvent","addEventListener","enable","previousIterator","backendToDrawOn","setStrokeStyle","pageFormatString","widthAndHeight","PageFormatStandards","formatId","newPageFormat","StringToPageFormat","setCustomPageFormat","DrawSkyLine","DrawBottomLine","setDrawBoundingBox","Zoom","TransposeCalculator","Drawer","GraphicSheet","Version","halftones","transposedFundamentalNote","transposedOctave","transposedAccidental","CalculateTransposedHalfTone","transposedHalfTone","octaveChange","noteIndex","accidentalHalfTones","currentIndex","previousKeyType","keyMapping","defineProperty","enumerable","thisPointer","dict","iterationFunction","toDeleteEntries","cmp","mid","PSMath","base","weights","sumWeigtedValues","sumWeights","extendStatics","__extends","setPrototypeOf","__","BSTree","_super","util","Queue_1","BSTreeKV","compareFunction","compare","defaultCompare","nElements","isUndefined","insertNode","createNode","isEmpty","searchNode","inorderTraversal","callback","inorderTraversalAux","preorderTraversal","preorderTraversalAux","postorderTraversal","postorderTraversalAux","levelTraversal","levelTraversalAux","minimum","minimumAux","maximum","maximumAux","toArray","heightAux","leftCh","rightCh","transplant","n1","n2","signal","enqueue","dequeue","Dictionary_1","Set_1","Bag","toStrFunction","toStrF","defaultToString","nCopies","copies","count","_i","values_1","toSet","toret","elements_1","table","toStr","pair","previousElement","name_1","name_2","name_3","FactoryDictionary","defaultFactoryFunction","_this","setDefault","defaultValue","collections","arrays","Heap","leftChildIndex","nodeIndex","rightChildIndex","parentIndex","minIndex","leftChild","rightChild","siftUp","swap","siftDown","peek","removeRoot","equF","compareToEquals","LinkedDictionaryPair","unlink","HeadOrTailLinkedDictionaryPair","LinkedDictionary","tail","appendToTail","lastNode","getLinkedDictionaryPair","oldPair","newPair","existingPair","crawlNode","LinkedList","firstNode","nodeAtIndex","elementAtIndex","equalsFunction","equalsF","defaultEquals","currentNode","eqF","equalsAux","removeElementAtIndex","current","temp","MultiDictionary","valuesEqualsFunction","allowDuplicateValues","allowDuplicate","_a","v_1","Direction","MultiRootTree","rootIds","initRootIds","initNodes","rootId","createEmptyNodeIfNotExist","nodeKey","nodeListItem","getRootIds","getNodes","getObject","toObject","flatten","extraPropsObject","hasParent","childrenCount","traverse","extraPropsObject_1","startId","returnArray","idsList","moveIdBeforeId","moveId","beforeId","BEFORE","moveIdAfterId","afterId","AFTER","moveIdIntoId","insideId","atStart","INSIDE_AT_START","INSIDE_AT_END","swapRootIdWithRootId","withRootId","findRootId","swapRootPositionWithRootPosition","swapRootPosition","withRootPosition","deleteId","rootDeleteId","nodeAndSubNodesDelete","nodeRefrencesDelete","insertIdBeforeId","insertId","foundRootIdIndex","insertIdIntoRoot","foundNodeIdIndex","findNodeId","insertIdIntoNode","insertIdAfterId","belowId","insertIdIntoId","nodeInsertAtEnd","rootInsertAtEnd","length_1","length_2","sourceId","sourceRootIndex","targetId","targetRootIndex","rootDelete","nodeInsertAtStart","nodeDeleteAtIndex","swapArrayElements","arr","indexA","indexB","toDeleteLater","nodeDelete","findNode","unshift","rootInsertAtStart","Heap_1","PriorityQueue","reverseCompareFunction","el","LinkedList_1","Queue","Set","toStringFunction","intersection","otherSet","union","isSubsetOf","isSub","Stack","freq","array1","array2","array_1","_arrays","Bag_1","BSTree_1","BSTreeKV_1","LinkedDictionary_1","MultiDictionary_1","FactoryDictionary_1","FactoryDictionary_2","DefaultDictionary","PriorityQueue_1","Stack_1","MultiRootTree_1","_util","_hasOwnProperty","isFunction","isString","prop","makeString","Vex","args","MakeException","RERR","RuntimeError","Merge","destination","property","Min","Max","fn","RoundN","MidLine","mid_line","SortAndUnique","eq","newArr","Contains","getCanvasContext","canvas_sel","drawDot","arc","BM","start_time","elapsed","StackTrace","stack","Prefix","GCD","LCM","arg0","LCMM","gcd","param1","param2","otherNumerator","otherDenominator","lcm","divide","__compareA","__compareB","greaterThan","greaterThanEquals","lessThan","lessThanEquals","quotient","toSimplifiedString","__tmp","toMixedString","parse","setIndexValue","Registry","INDEXES","registry","defaultRegistry","class","updateIndex","oldValue","register","setAttribute","onRegister","getElementsByAttribute","attrName","getElementsByType","getElementsByClass","onUpdate","Element","ID","newID","classes","rendered","getDefaultRegistry","applyStyle","shadowColor","setShadowColor","shadowBlur","setShadowBlur","setLineWidth","restoreStyle","drawWithStyle","hasClass","addClass","removeClass","isRendered","getAttributes","BoundingBoxComputation","x1","y1","x2","y2","NaN","addPoint","addX","addY","addQuadraticCurve","p0x","p0y","p1x","p1y","p2x","p2y","cp1x","cp1y","cp2x","cp2y","addBezierCurve","p3x","p3y","p0","b2ac","t1","sqrt","t2","that","getY","getW","getH","setW","setH","move","mergeWith","new_x","new_y","new_w","new_h","Font","processOutline","outline","originX","originY","scaleX","scaleY","outlineFns","command","nextX","nextY","Glyph","cache","glyphs","x_min","x_max","ha","cached_outline","x_pos","y_pos","nocache","metrics","loadMetrics","renderOutline","quadraticCurveTo","bboxComp","originShift","setPoint","setYShift","getOutlineBoundingBox","getMetrics","setOriginX","setOriginY","setOrigin","renderToStave","getYForGlyphs","STEM_HEIGHT","DEFAULT_TABLATURE_FONT_SCALE","SLASH_NOTEHEAD_WIDTH","TEXT_HEIGHT_OFFSET_HACK","IsKerned","props","clefProperties","line_shift","keyProperties","params","octave_shift","pieces","note_values","int_value","int_val","shift_right","extraProps","glyph_name","customNoteHeads","displaced","stem_up_x_offset","stem_down_x_offset","stem_up_y_offset","stem_down_y_offset","integerToNote","integer","noteValue","tabToGlyph","glyphMetrics","textWidth","articulationCodes","artic","between_lines","accidentalCodes","parenRightPaddingAdjustment","accidentalColumnsTable","second_on_bottom","spaced_out_tetrachord","spaced_out_pentachord","very_spaced_out_pentachord","spaced_out_hexachord","very_spaced_out_hexachord","ornamentCodes","spec","keySpec","keySpecs","accidentalList","acc_list","unicode","parseNoteDurationString","durationString","parseNoteStruct","noteStruct","durationStringData","ticks","durationToTicks","customTypes","getGlyphProps","validTypes","currentTicks","sanitizeDuration","alias","durationAliases","durationToFraction","durationToNumber","duration_codes","glyphTypeProperties","customGlyphTypeProperties","code_head","common","stem","stem_offset","stem_up_extension","stem_down_extension","tabnote_stem_up_extension","tabnote_stem_down_extension","dot_shiftY","line_above","line_below","beam_count","code_flag_upstem","code_flag_downstem","smufl","to_code_points","bracketTop","bracketBottom","barlineTick","segno","coda","gClef","cClef","fClef","unpitchedPercussionClef1","timeSig0","timeSig1","timeSig2","timeSig3","timeSig4","timeSig5","timeSig6","timeSig7","timeSig8","timeSig9","timeSigCommon","timeSigCutCommon","noteheadDoubleWhole","noteheadWhole","noteheadHalf","noteheadBlack","noteheadXWhole","noteheadXHalf","noteheadXBlack","noteheadCircleX","noteheadTriangleUpWhole","noteheadTriangleUpHalf","noteheadTriangleUpBlack","noteheadDiamondWhole","noteheadDiamondHalf","noteheadDiamondBlack","augmentationDot","tremolo1","flag8thUp","flag8thDown","flag16thUp","flag16thDown","flag32ndUp","flag32ndDown","flag64thUp","flag64thDown","flag128thUp","flag128thDown","accidentalFlat","accidentalNatural","accidentalSharp","accidentalDoubleSharp","accidentalDoubleFlat","accidentalParensLeft","accidentalParensRight","accidentalQuarterToneFlatStein","accidentalThreeQuarterTonesFlatZimmermann","accidentalQuarterToneSharpStein","accidentalThreeQuarterTonesSharpStein","accidentalBuyukMucennebFlat","accidentalBakiyeFlat","accidentalKomaSharp","accidentalKucukMucennebSharp","accidentalKoron","accidentalSori","articAccentAbove","articAccentBelow","articTenutoAbove","articTenutoBelow","articStaccatoAbove","articStaccatoBelow","articStaccatissimoAbove","articMarcatoAbove","fermataAbove","fermataBelow","breathMarkComma","breathMarkUpbow","caesuraCurved","restMaxima","restDoubleWhole","restWhole","restHalf","restQuarter","rest8th","rest16th","rest32nd","rest64th","rest128th","dynamicPiano","dynamicMezzo","dynamicForte","dynamicRinforzando","dynamicSforzando","dynamicZ","ornamentTrill","ornamentTurn","ornamentTurnSlash","ornamentMordent","ornamentMordentInverted","ornamentTremblement","ornamentPrecompAppoggTrill","ornamentPrecompSlideTrillDAnglebert","ornamentPrecompSlideTrillBach","ornamentPrecompTrillSuffixDandrieu","ornamentPrecompDoubleCadenceUpperPrefix","ornamentPrecompDoubleCadenceUpperPrefixTurn","ornamentPrecompTrillLowerSuffix","stringsDownBow","stringsUpBow","stringsHarmonic","pluckedSnapPizzicatoAbove","pluckedLeftHandPizzicato","keyboardPedalPed","keyboardPedalUp","pictChokeCymbal","wiggleArpeggiatoUp","arrowheadBlackUp","arrowheadBlackDown","TIME4_4","CanvasContext","WIDTH","HEIGHT","CANVAS_BROWSER_SIZE_LIMIT","setRawFont","setBackgroundFillStyle","background_fillStyle","blur","setLineCap","cap_type","lineCap","setLineDash","lineDash","SanitizeCanvasDims","antiClockwise","glow","RaphaelContext","paper","Raphael","pen","font_family","font_size","font_weight","background_attributes","shadow_attributes","state_stack","setSize","setViewBox","viewBox","normalizeAngle","tmp","delta","arcHelper","largeArcFlag","sweepFlag","out","sa","num_paths","toFixed","opacity","strokeWidth","txt","bounds","getBBox","attrNamesToIgnoreMap","fontAttrNamesToIgnore","SVGContext","svgNS","iePolyfill","svgElementType","createElementNS","cls","group","pointerBBox","ie","bold","italic","fontAttributes","fontArray","applyAttributes","visibleWidth","visibleHeight","xMin","yMin","viewBoxString","attrNamesToIgnore","propertyName","setAttributeNS","peth","newAttributes","extraAttributes","textContent","ieMeasureTextFix","widthCorrection","lastContext","RAPHAEL","VML","LineEndType","USE_CANVAS_PROXY","elementId","background","buildContext","fromX","fromY","toX","toY","dashPattern","dx","dy","atan2","dashLength","nx","ny","bolsterCanvasContext","devicePixelRatio","CATEGORY","x_begin","x_end","y_top","y_bottom","stem_extension","stem_direction","isStemlet","stemletHeight","renderHeightAdjustment","setNoteHeadXBounds","setExtension","ext","getExtension","setYBounds","getHeight","y_offset","getExtents","isStemUp","ys","stemHeight","innerMostNoteheadY","outerMostNoteheadY","baseY","setVisibility","setStemlet","stem_x","stem_y","stemletYOffset","strokeAttributes","NESTING_OFFSET","beats_occupied","beatsOccupiedDeprecationWarning","some","AlignRestsToNotes","resolveGlyphs","attach","setTuplet","detach","resetTuplet","setBracketed","setRatioed","setTupletLocation","getNotes","getNoteCount","getBeatsOccupied","getNotesOccupied","setBeatsOccupied","beats","setNotesOccupied","numerator_glyphs","denom_glyphs","getNestedTupletCount","maxTupletCount","countTuplets","minTupletCount","tupletStack","tupletCount","getYPosition","nested_tuplet_y_offset","top_y","getStemExtents","bottom_y","getTieLeftX","getTieRightX","getStemX","addGlyphWidth","reduce","notation_start_x","line_width","x_offset","colon_x","colon_radius","calculateStemDirection","lineSum","keyProp","BEAM_LEFT","BEAM_BOTH","time_sig","beatTotal","beatValue","getTickables","config","tickGroups","unprocessedNotes","currentTickGroup","noteGroups","nextTickGroup","nextGroup","unprocessedNote","shouldIgnoreTicks","ticksPerGroup","memo","unbeamable","createGroups","sanitizedGroups","tempGroup","isFirstOrLast","prevNote","breaksOnEachRest","breaksOnFirstOrLastRest","breakOnStemChange","prevDirection","isUnbeamableDuration","sanitizeGroups","findFirstNote","applyStemDirection","beamedNoteGroups","beamable","getIntrinsicTicks","allTuplets","uniqueTuplets","getTuplets","show_stemlets","secondary_breaks","secondary_break_ticks","hasStem","stem_weight","setBeam","postFormatted","getBeamCount","break_on_indices","max_slope","min_slope","slope_iterations","slope_cost","stemlet_extension","min_flat_beam_offset","getGlyph","beamCount","breakSecondaryAt","getSlopeY","first_x_px","first_y_px","calculateSlope","initialSlope","firstStemTipY","firstStemX","getStemSlope","increment","minCost","bestSlope","totalStemExtension","yShiftTemp","adjustedStemTipY","stemTipY","idealSlope","cost","calculateFlatSlope","extremeY","extremeBeamCount","currentExtreme","getYs","extremeTest","newOffset","getBeamYToDraw","beamY","maxY","minOrMax","note_head","applyStemExtensions","stemX","beamedStemTipY","preBeamExtension","getStem","beamExtension","totalBeamWidth","lookupBeamDirection","prev_tick","tick","next_tick","lookup_duration","prev_note_gets_beam","next_note_gets_beam","note_gets_beam","getBeamLines","tick_of_duration","beam_lines","beam_started","current_beam","previous_should_break","tick_tally","should_break","prev_note","next_note","beam_alone","start_note","beam_direction","last_beam","drawStems","drawBeamLines","valid_beam_durations","beamThickness","beamsPerStartNote","beamLines","beam_line","startBeamX","startNoteId","startBeamY","lastBeamX","lastBeamY","noteSVGId","preFormat","postFormat","STRICT","FULL","resolutionMultiplier","tickables","smallestTickCount","largestTickWidth","voiceGroup","getTotalTicks","getTicksUsed","getLargestTickWidth","getSmallestTickCount","getMode","getResolutionMultiplier","getActualResolution","getVoiceGroup","setVoiceGroup","setStrict","strict","isComplete","tickable","setVoice","addTickables","tickable_bb","drawBoldDoubleLine","topX","variableWidth","SINGLE_LEFT","typeString","singleRight","singleLeft","single","double","boldDoubleLeft","boldDoubleRight","thinDouble","texts","attachment_height","x3","y3","cpx1","cpy1","cpx2","cpy2","cpx3","cpy3","cpx4","cpy4","cpx5","cpy5","cpx6","cpy6","cpx7","cpy7","cpx8","cpy8","renderGlyph","text_width","Tickable","intrinsicTicks","tickMultiplier","tickContext","modifierContext","center_x_shift","ignore_ticks","formatterMetrics","freedom","iterations","space","used","mean","deviation","getFormatterMetrics","getCenterXShift","isCenterAligned","setCenterAlignment","getVoice","getTuplet","noteCount","applyTickMultiplier","addToModifierContext","mc","setTickContext","tc","setIntrinsicTicks","getTickMultiplier","setDuration","STAVEPADDING","yPos","modLeftPx","extraLeftPx","xPre1","xAbs","xPost1","noteWidth","xPost2","extraRightPx","modRightPx","xFreedomRight","xWidth","getXShift","yy","spaceDeviation","initStruct","JSON","stringify","duration_override","customGlyphs","playNote","left_modPx","right_modPx","annotation_spacing","stave_padding","getPlayNote","setPlayNote","setNote","setPreFormatted","setYs","getExtraLeftPx","getExtraRightPx","setExtraLeftPx","setExtraRightPx","getLineNumber","getLineForRest","getGlyphWidth","getYForTopText","text_line","getTickContext","getDuration","isDotted","getDots","getNoteType","setModifierContext","getModifierStartXY","left_shift","right_shift","getNoteStartX","getExtraPx","NoteHead","head_options","note_type","STEM_UP","glyph_code","custom_glyph_code","custom_glyph","slashed","isDisplaced","getLine","setLine","displacementStemAdjustment","getSpacingBetweenLines","half_spacing","min_y","getYForNote","head_x","staveSpace","breve_lines","drawSlashNoteHead","StemmableNote","note_struct","stemExtensionOverride","renderFlag","setStem","buildStem","buildFlag","shouldRenderFlag","flagCode","getTopGlyph","getStemLength","getStemExtension","getStemMinumumLength","getCenterGlyphX","setStemLength","textLine","extents","getYForBottomText","hasFlag","drawStem","stem_struct","PositionString","above","below","modifier_context","spacingFromNextModifier","getNote","getIndex","getModifierContext","setTextLine","setSpacingFromNextModifier","getSpacingFromNextModifier","alignSubNotesWithNote","subNotes","extraPx","subNoteXOffset","extraLeft","subNote","subTickContext","setXOffset","Dot","dot_list","max_shift_map","dot","note_id","dot_shift","x_width","last_line","prev_dotted_space","half_shiftY","setDotShiftY","lineSpace","spacing_between_lines_px","forceFlagRight","shiftRestVertical","isrest","maxLine","minLine","setKeyLine","getKeyLine","STEM_DOWN","DEFAULT_LEDGER_LINE_OFFSET","notesList","minL","stemMax","stemMin","maxL","voice_shift","getVoiceShiftWidth","is_displaced","noteU","noteM","noteL","voiceXShift","stemDelta","lineSpacing","lineDiff","halfNoteCount","wholeNoteCount","staggerConditions","foundDots","centerRest","hasStave","topNote","bottomNote","topKeys","bottomKeys","HALF_NOTEHEAD_HEIGHT","topNoteBottomY","addDotsCount","use_default_head_x","calculateKeyProps","autoStem","noteHeadStyles","noteHead","buildNoteHeads","calcExtraPx","getKeys","step","lastLine","noteProps","minY","halfLineSpacing","isTopNote","resultLine","thisLine","getNoteHeadBounds","setNoteDisplaced","tieStartX","tieEndX","restLine","bot","isInnerNoteIndex","getStemStyle","getLedgerLineStyle","flagStyle","getFlagStyle","setKeyStyle","mContext","addArticulation","addAnnotation","addDot","getAccidentals","yTop","yBottom","nonDisplacedX","displacedX","highestLine","lowestLine","highestDisplacedLine","lowestDisplacedLine","highestNonDisplacedLine","lowestNonDisplacedLine","displaced_x","non_displaced_x","highest_line","lowest_line","highest_displaced_line","lowest_displaced_line","highest_non_displaced_line","lowest_non_displaced_line","getNoteHeadEndX","drawLedgerLines","doubleWidth","min_x","drawLedgerLine","ledgerWidth","drawModifiers","noteheadStyle","drawFlag","noteStemHeight","flagX","flagY","drawNoteHeads","stemStruct","xBegin","shouldRenderStem","nums","nums_list","shiftLeft","shiftRight","pos","props_tmp","shiftL","shiftR","numShiftL","numShiftR","xWidthL","xWidthR","num_shift","numWidth","number","finger","setFretHandFinger","dot_x","dot_y","Music","NUM_TONES","roots","root_values","root_indices","canonical_notes","diatonic_intervals","diatonic_accidentals","intervals","scales","dorian","mixolydian","scaleTypes","noteValues","root_index","isValidNoteValue","isValidIntervalValue","interval","getNoteParts","noteString","getKeyParts","keyString","getNoteValue","getIntervalValue","intervalString","getCanonicalNoteName","getCanonicalIntervalName","intervalValue","getRelativeNoteValue","getRelativeNoteName","rootValue","multiplier","reverse_interval","relativeNoteName","getScaleTones","tones","getIntervalBetween","note1","note2","createScaleMap","keySigParts","scaleName","keySigString","noteLocation","scaleMap","rootName","noteName","leftShift","accList","propsTemp","accLine","lineList","accShift","previousLine","flatLine","dblSharpLine","numAcc","totalColumns","noFurtherConflicts","groupStart","groupEnd","checkCollision","getGroupLine","getGroupLines","indexes","lineDifference","notColliding","indexPairs","every","groupLength","groupMember","column","endCase","patternLength","collisionDetected","columnWidths","columnXOffsets","totalShift","accCount","lastAccOnLine","line1","line2","clearance","clearanceRequired","tickPositions","tickNoteMap","tickPosition","notesAtPosition","music","modifiedPitches","processNote","keyIndex","sameAccidental","previouslyModified","getGraceNotes","font_scale","parenLeftPadding","parenRightPadding","cautionary","parenLeft","parenRight","fontScale","parenWidth","setAsCautionary","accX","accY","getMinTotalWidth","cp1","cp2","text_shift_x","first_x_shift","last_x_shift","tie_spacing","setNotes","isPartial","renderTie","first_ys","last_ys","last_x_px","cp_x","last_y_px","top_cp_y","bottom_cp_y","center_x","getTieStartX","getTieEndX","gracenote_groups","group_list","gracenote_group","is_stavenote","formatWidth","group_shift","grace_notes","show_slur","slur_y_shift","TieClass","strokes","strokeList","getPositions","strokeShift","note_end","stroke_spacing","addEndNote","line_space","arrow","arrow_shift_x","arrow_y","text_y","shift_left","num_shiftL","num_shiftR","x_widthL","x_widthR","num_width","string_number","dashed","leg","setLineEndType","setStringNumber","setLastNote","setDashed","stem_ext","pattern","drawDashedLine","roundToNearestHalf","mathFn","isWithinLines","getRoundingFunction","isStaveNote","noteCategory","INITIAL_OFFSET","getIncrement","top_text_line","articWidth","builder","articNameToCode","articString","getFactory","canSitBetweenLines","staffSpace","shouldSitOutsideStaff","initialOffset","isOnStemTip","getInitialOffset","stemBaseY","getTopY","getBottomY","offsetDirection","noteLine","articLine","snappedLine","snapLineToStaff","TickContext","tContext","contexts","tContexts","currentTick","maxTicks","minTicks","padding","xBase","notePx","getXBase","setXBase","getXOffset","setPadding","getMaxTicks","getMinTicks","getCenterAlignedTickables","getCurrentTick","setCurrentTick","extraRight","delayed","accidentalUpper","accidentalLower","accidentalLowerPadding","accidentalUpperPadding","accid","stemDir","stemExtents","isPlacedOnNoteheadSide","glyphYBetweenLines","glyphX","glyphY","delayXShift","nextContext","getNextContext","Annotation","Justify","CENTER","CENTER_STEM","JustifyString","center","centerStem","VerticalJustify","VerticalJustifyString","annotations","vert_justification","setVerticalJustification","just","getJustification","setJustification","text_height","has_stem","stem_base","yt","last_width","release","line_style","bend_width","release_width","updateWidth","getText","measure_text","total_width","additional_width","draw_width","bend_height","annotation_y","renderBend","cp_y","renderRelease","renderArrowHead","render_x","last_bend","last_drawn_width","vibratos","vibrato","harsh","vibrato_width","wave_height","wave_width","wave_girth","setVibratoWidth","setHarsh","vx","vy","renderVibrato","opts","num_waves","ModifierContext","PREFORMAT","POSTFORMAT","getState","formatted","extra_left_px","extra_right_px","lookAhead","nextRestLine","createContexts","ContextType","addToContext","tickToContextMap","tickList","integerTicks","newContext","paddingBetween","contextGaps","gaps","gap","lossHistory","loss","auto_beam","applyAndGetBeams","tabstave","tabnotes","autobeam","notevoice","tabvoice","alignAllNotes","alignTuplets","minTotalWidth","hasMinTotalWidth","tickContexts","modiferContexts","createTickContexts","contextList","contextMap","createModifierContexts","justifyWidth","renderingContext","centerX","leftoverPxPerTick","spaceAccum","prevTick","evaluate","prevContext","prevMetrics","insideRightEdge","insideLeftEdge","durationStats","leftNoteEdge","rightNote","rightMetrics","stats","updateStats","totalDeviation","totalCost","tune","minShift","postFormatContexts","getNoteEndX","layoutMetrics","makeSpacer","placeGlyphOnLine","setLayoutMetrics","getLayoutMetrics","repeatBegin","repeatEnd","repeatBoth","TYPE","widths","paddings","layoutMetricsMap","xMax","paddingLeft","paddingRight","getType","double_bar","getTopLineTopY","getBottomLineBottomY","begin","CODA_RIGHT","SEGNO_RIGHT","symbol_type","setShiftY","drawCodaFixed","drawSymbolText","drawSignoFixed","draw_coda","text_x","symbol_x","vertical_bar_width","StaveSection","section","setStaveSection","text_measurements","emHeightAscent","StaveTempo","stem_height","TextNote","Justification","GLYPHS","text_struct","subscript","glyph_type","struct","glyph_struct","smooth","StaveText","setStaveText","types","sizes","attachments","anno_dict","attachment","glyphScale","glyphOffset","numLines","getOptions","KeySignature","accidentalSpacing","cancelKeySpec","alterKeySpec","setKeySig","glyphFontScale","xPositions","paddingForced","convertToGlyph","nextAcc","accGlyphData","extraWidth","glyphWidth","cancelKey","convertToCancelAccList","cancel_accList","different_types","naturals","cancelled","addToStave","convertAccLines","customLines","alterKey","convertToAlterAccList","firstAccidentalType","cancelAccList","customPadding","validate_args","topLine","setTimeSig","parseTimeSpec","assertIsValidFraction","topDigits","botDigits","makeTimeSignatureGlyph","topGlyphs","botGlyphs","topWidth","topGlyph","botWidth","botGlyph","topStartX","botStartX","start_x","getTimeSig","MID","volta","vert_height","setStartX","end_x","glyph_spacing_px","left_bar","right_bar","resetLines","BARTYPE","addEndModifier","setNoteStartX","begBarline","setMeasure","getModifierXShift","setRepetitionTypeLeft","setRepetitionTypeRight","number_t","staveSection","getLineForY","setClef","clefSpec","clefs","keySignatures","addKeySignature","setEndKeySignature","setTimeSignature","timeSignatures","addTimeSignature","setEndTimeSignature","addEndClef","addEndTimeSignature","addTrebleGlyph","category","sortByCategory","items","order","endBarline","begModifiers","endModifiers","barlines","keysignatures","timesignatures","lastBarlineIdx","drawVertical","isDouble","drawVerticalFixed","top_line","bottom_line","drawVerticalBarFixed","getConfigForLines","setConfigForLine","line_number","setConfigForLines","lines_configuration","tab_options","addTabGlyph","tab_struct","draw_stem","ghost","draw_dots","draw_stem_through_stave","setGhost","stem_extension_override","getStemY","stemDownLine","stemStartLine","shouldDrawFlag","flag_x","flag_y","flag_code","drawStemThrough","stem_through","unused_strings","strings_used","getUnusedStringGroups","stem_lines","up_stem","down_stem","line_spacing","total_lines","strings","containsLastString","containsFirstString","line_ys","isTopBound","isBottomBound","getPartialStemLines","drawPositions","tab_x","render_stem","VibratoBracket","bracket_data","stop_x","semibrave_rest","get_semibrave_rest","number_of_measures","show_number","number_line","number_glyph_point","padding_left","padding_right","line_thickness","serif_thickness","use_symbols","symbol_spacing","semibrave_rest_glyph_scale","xs","getXs","sbl","serif","lineThicknessHalf","n4","semibrave_rest_width","yMiddle","clef_obj","getClef","abs_x","KeySigNote","TimeSigNote","SLIDE_UP","SLIDE_DOWN","first_fret","last_fret","slide_direction","slide_y","staveNoteScale","getStaveNoteScale","offsetScale","slashBBox","calcBeamedNotesSlashBBox","noteHeadBounds","defaultStemExtention","defaultOffsetY","slashStemOffset","slashBeamOffset","protrusions","beam_slope","beam_angle","iPointOnBeam","slash_angle","protrusion_stem_dx","protrusion_stem_dy","protrusion_beam_dx","protrusion_beam_dy","stem0X","stemY","GraceTabNote","Tuning","names","tuningString","setTuning","noteToInteger","tuningValues","numStrings","getValueForString","stringNum","getValueForFret","fretNum","getNoteForFret","StaveHairpin","CRESC","DECRESC","ppt","pixelsPerTick","l_shift_px","left_shift_ticks","r_shift_px","right_shift_ticks","hairpin_options","left_shift_px","right_shift_px","setRenderOptions","hairpin","renderHairpin","dis","first_y","staff_height","l_shift","r_shift","last_x","first_x","last_y","NEAR_HEAD","nearHead","nearTop","cp_spacing","metric","end_metric","TextDynamics","sequence","glyph_font_size","letter","glyph_data","letter_x","current_letter","drawArrowHead","x0","y0","StaveLine","TextVerticalPosition","TextJustification","line_dash","rounded_end","draw_start_arrow","draw_end_arrow","arrowhead_length","arrowhead_angle","text_position_vertical","text_justification","applyLineStyle","applyFontStyle","start_position","end_position","first_index","last_index","upwards_slope","notehead_width","point1","point2","both_arrows","ratio","end_y","start_y","line_angle","angle1","angle2","top_x","bottom_x","drawArrowLine","vertical_position","drawPedalGlyph","PedalMarking","Styles","TEXT","MIXED","StylesString","mixed","pedal","setCustomText","custom_depress_text","custom_release_text","bracket_height","text_margin_right","bracket_line_width","glyph_point_size","depress","drawBracketed","prev_x","prev_y","is_pedal_depressed","next_is_same","prev_is_same","drawText","show_bracket","underline_superscript","main_width","main_height","super_y","superscript_width","super_height","line_y","BarNote","barline","parameter","YOFFSETSTEMUP","YOFFSETSTEMDOWN","XOFFSETSTEMUP","XOFFSETSTEMDOWN","y_spacing","Crescendo","decrescendo","extend_left","extend_right","setHeight","setDecrescendo","decresc","tick_context","next_context","begin_x","half_height","flattenMatches","matchedString","Parser","grammar","errorPos","expect","matchFail","returnPos","matchSuccess","matchToken","token","noSpace","regexp","success","incrementPos","expectOne","rule","maybe","allMatches","oneMatch","localPos","or","gotOne","numMatches","expectOneOrMore","more","expectZeroOrMore","oneOrMore","zeroOrMore","run","EasyScore","Grammar","LINE","PIECE","PIECES","EOL","CHORDORNOTE","PARAMS","commitPiece","COMMA","DURATION","DOTS","OPTS","CHORD","SINGLENOTE","LPAREN","NOTES","RPAREN","addChord","NOTE","NOTENAME","ACCIDENTAL","OCTAVE","ACCIDENTALS","DOT","setNoteDots","MAYBESLASH","TYPES","setNoteType","DURATIONS","setNoteDuration","LBRACKET","KEYVAL","KEYVALS","RBRACKET","KEY","EQUALS","VAL","addNoteOption","SVAL","DVAL","Builder","commitHooks","rollingDuration","resetPiece","getElements","addCommitHook","commitHook","piece","accids","setId","setClass","easyScoreHook","throwOnError","parser","voiceOptions","setDefaults","default_options","Factory","face","renderQ","systems","initRenderer","getVoices","ghostNote","textNoteStruct","textNote","barNote","clefNote","timeSigNote","keySigNote","vJustify","hJustify","fontWeight","multimeasurerest","secondaryBeamBreaks","curve","vibratoBracket","System","spaceBetweenStaves","debugFormatter","formatIterations","addStave","spaceAbove","spaceBelow","debugNoteMetrics","debugNoteMetricsYs","lastY","plotDebugging","plotMetrics","KeyManager","setKey","getKey","keyParts","scaleMapByValue","originalScaleMapByValue","getAccidental","selectNote","scaleNote","modparts","valueNote","originalValueNote","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","Symbol","toStringTag"],"sourceRoot":""}